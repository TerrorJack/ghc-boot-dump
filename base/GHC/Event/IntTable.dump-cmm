
==================== Output Cmm ====================
2018-03-16 16:02:59.890641268 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:59.891930725 UTC

[section ""data" . GHC.Event.IntTable.$WBucket_closure" {
     GHC.Event.IntTable.$WBucket_closure:
         const GHC.Event.IntTable.$WBucket_info;
 },
 GHC.Event.IntTable.$WBucket_entry() //  [R2, R3, R4]
         { info_tbl: [(c7T5m,
                       label: GHC.Event.IntTable.$WBucket_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T5m: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7T5q; else goto c7T5r;
       c7T5q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$WBucket_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7T5r: // global
           I64[Sp - 24] = block_c7T5j_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7T5v; else goto c7T5k;
       u7T5v: // global
           call _c7T5j(R1) args: 0, res: 0, upd: 0;
       c7T5k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T5j() //  [R1]
         { info_tbl: [(c7T5j,
                       label: block_c7T5j_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T5j: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7T5u; else goto c7T5t;
       c7T5u: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7T5t: // global
           _s7SZt::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s7SZt::I64;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.893650941 UTC

[section ""data" . GHC.Event.IntTable.$WIT_closure" {
     GHC.Event.IntTable.$WIT_closure:
         const GHC.Event.IntTable.$WIT_info;
 },
 GHC.Event.IntTable.$WIT_entry() //  [R2, R3]
         { info_tbl: [(c7T5D,
                       label: GHC.Event.IntTable.$WIT_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T5D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7T5M; else goto c7T5N;
       c7T5M: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$WIT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7T5N: // global
           I64[Sp - 16] = block_c7T5A_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7T5T; else goto c7T5B;
       u7T5T: // global
           call _c7T5A(R1) args: 0, res: 0, upd: 0;
       c7T5B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T5A() //  [R1]
         { info_tbl: [(c7T5A,
                       label: block_c7T5A_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T5A: // global
           I64[Sp] = block_c7T5G_info;
           _s7SZx::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7SZx::P64;
           if (R1 & 7 != 0) goto u7T5S; else goto c7T5H;
       u7T5S: // global
           call _c7T5G(R1) args: 0, res: 0, upd: 0;
       c7T5H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T5G() //  [R1]
         { info_tbl: [(c7T5G,
                       label: block_c7T5G_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T5G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7T5R; else goto c7T5Q;
       c7T5R: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7T5Q: // global
           _s7SZA::P64 = P64[R1 + 7];
           _s7SZz::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s7SZA::P64;
           I64[Hp] = _s7SZz::I64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.895098045 UTC

[section ""cstring" . lvl_r7SZ3_bytes" {
     lvl_r7SZ3_bytes:
         I8[] [98,117,99,107,101,116,78,101,120,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.895860803 UTC

[section ""data" . GHC.Event.IntTable.bucketNext1_closure" {
     GHC.Event.IntTable.bucketNext1_closure:
         const GHC.Event.IntTable.bucketNext1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketNext1_entry() //  [R1]
         { info_tbl: [(c7T60,
                       label: GHC.Event.IntTable.bucketNext1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T60: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7T61; else goto c7T62;
       c7T61: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7T62: // global
           (_c7T5X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7T5X::I64 == 0) goto c7T5Z; else goto c7T5Y;
       c7T5Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7T5Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7T5X::I64;
           R2 = lvl_r7SZ3_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.897166626 UTC

[section ""data" . GHC.Event.IntTable.bucketNext_closure" {
     GHC.Event.IntTable.bucketNext_closure:
         const GHC.Event.IntTable.bucketNext_info;
         const 0;
 },
 GHC.Event.IntTable.bucketNext_entry() //  [R2]
         { info_tbl: [(c7T6f,
                       label: GHC.Event.IntTable.bucketNext_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T6f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7T6g; else goto c7T6h;
       c7T6g: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketNext_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7T6h: // global
           I64[Sp - 8] = block_c7T68_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7T6o; else goto c7T69;
       u7T6o: // global
           call _c7T68(R1) args: 0, res: 0, upd: 0;
       c7T69: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T68() //  [R1]
         { info_tbl: [(c7T68,
                       label: block_c7T68_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T68: // global
           if (R1 & 7 == 1) goto c7T6c; else goto c7T6d;
       c7T6c: // global
           R1 = GHC.Event.IntTable.bucketNext1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7T6d: // global
           R1 = P64[R1 + 14] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.898319456 UTC

[section ""cstring" . lvl1_r7SZ4_bytes" {
     lvl1_r7SZ4_bytes:
         I8[] [98,117,99,107,101,116,86,97,108,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.899041486 UTC

[section ""data" . GHC.Event.IntTable.bucketValue1_closure" {
     GHC.Event.IntTable.bucketValue1_closure:
         const GHC.Event.IntTable.bucketValue1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketValue1_entry() //  [R1]
         { info_tbl: [(c7T6v,
                       label: GHC.Event.IntTable.bucketValue1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T6v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7T6w; else goto c7T6x;
       c7T6w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7T6x: // global
           (_c7T6s::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7T6s::I64 == 0) goto c7T6u; else goto c7T6t;
       c7T6u: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7T6t: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7T6s::I64;
           R2 = lvl1_r7SZ4_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.900264746 UTC

[section ""data" . GHC.Event.IntTable.bucketValue_closure" {
     GHC.Event.IntTable.bucketValue_closure:
         const GHC.Event.IntTable.bucketValue_info;
         const 0;
 },
 GHC.Event.IntTable.bucketValue_entry() //  [R2]
         { info_tbl: [(c7T6J,
                       label: GHC.Event.IntTable.bucketValue_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T6J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7T6K; else goto c7T6L;
       c7T6K: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketValue_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7T6L: // global
           I64[Sp - 8] = block_c7T6C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7T6S; else goto c7T6D;
       u7T6S: // global
           call _c7T6C(R1) args: 0, res: 0, upd: 0;
       c7T6D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T6C() //  [R1]
         { info_tbl: [(c7T6C,
                       label: block_c7T6C_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T6C: // global
           if (R1 & 7 == 1) goto c7T6G; else goto c7T6H;
       c7T6G: // global
           R1 = GHC.Event.IntTable.bucketValue1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7T6H: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.901387465 UTC

[section ""cstring" . lvl2_r7SZ5_bytes" {
     lvl2_r7SZ5_bytes:
         I8[] [98,117,99,107,101,116,75,101,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.902125237 UTC

[section ""data" . GHC.Event.IntTable.bucketKey1_closure" {
     GHC.Event.IntTable.bucketKey1_closure:
         const GHC.Event.IntTable.bucketKey1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketKey1_entry() //  [R1]
         { info_tbl: [(c7T6Z,
                       label: GHC.Event.IntTable.bucketKey1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T6Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7T70; else goto c7T71;
       c7T70: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7T71: // global
           (_c7T6W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7T6W::I64 == 0) goto c7T6Y; else goto c7T6X;
       c7T6Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7T6X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7T6W::I64;
           R2 = lvl2_r7SZ5_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.903453626 UTC

[section ""data" . GHC.Event.IntTable.bucketKey_closure" {
     GHC.Event.IntTable.bucketKey_closure:
         const GHC.Event.IntTable.bucketKey_info;
         const 0;
 },
 GHC.Event.IntTable.bucketKey_entry() //  [R2]
         { info_tbl: [(c7T7d,
                       label: GHC.Event.IntTable.bucketKey_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T7d: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7T7e; else goto c7T7f;
       c7T7e: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketKey_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7T7f: // global
           I64[Sp - 8] = block_c7T76_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7T7p; else goto c7T77;
       u7T7p: // global
           call _c7T76(R1) args: 0, res: 0, upd: 0;
       c7T77: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T76() //  [R1]
         { info_tbl: [(c7T76,
                       label: block_c7T76_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T76: // global
           if (R1 & 7 == 1) goto c7T7a; else goto c7T7b;
       c7T7a: // global
           R1 = GHC.Event.IntTable.bucketKey1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7T7b: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7T7o; else goto c7T7n;
       c7T7o: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7T7n: // global
           _s7SZN::I64 = I64[R1 + 22];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7SZN::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.905040084 UTC

[section ""data" . GHC.Event.IntTable.tabSize_closure" {
     GHC.Event.IntTable.tabSize_closure:
         const GHC.Event.IntTable.tabSize_info;
 },
 GHC.Event.IntTable.tabSize_entry() //  [R2]
         { info_tbl: [(c7T7x,
                       label: GHC.Event.IntTable.tabSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T7x: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7T7B; else goto c7T7C;
       c7T7B: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.tabSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7T7C: // global
           I64[Sp - 8] = block_c7T7u_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7T7G; else goto c7T7v;
       u7T7G: // global
           call _c7T7u(R1) args: 0, res: 0, upd: 0;
       c7T7v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T7u() //  [R1]
         { info_tbl: [(c7T7u,
                       label: block_c7T7u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T7u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7T7F; else goto c7T7E;
       c7T7F: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7T7E: // global
           _s7SZU::P64 = P64[R1 + 15];
           _s7SZT::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = _s7SZU::P64;
           I64[Hp] = _s7SZT::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.906575731 UTC

[section ""data" . GHC.Event.IntTable.tabArr_closure" {
     GHC.Event.IntTable.tabArr_closure:
         const GHC.Event.IntTable.tabArr_info;
 },
 GHC.Event.IntTable.tabArr_entry() //  [R2]
         { info_tbl: [(c7T7O,
                       label: GHC.Event.IntTable.tabArr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T7O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7T7S; else goto c7T7T;
       c7T7S: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.tabArr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7T7T: // global
           I64[Sp - 8] = block_c7T7L_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7T7X; else goto c7T7M;
       u7T7X: // global
           call _c7T7L(R1) args: 0, res: 0, upd: 0;
       c7T7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T7L() //  [R1]
         { info_tbl: [(c7T7L,
                       label: block_c7T7L_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T7L: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7T7W; else goto c7T7V;
       c7T7W: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7T7V: // global
           _s7SZX::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = _s7SZX::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.908286059 UTC

[section ""data" . GHC.Event.IntTable.$wnew_closure" {
     GHC.Event.IntTable.$wnew_closure:
         const GHC.Event.IntTable.$wnew_info;
 },
 GHC.Event.IntTable.$wnew_entry() //  [R2]
         { info_tbl: [(c7T8a,
                       label: GHC.Event.IntTable.$wnew_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T8a: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7T8i; else goto c7T8j;
       c7T8i: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.$wnew_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7T8j: // global
           I64[Sp - 8] = block_c7T82_info;
           _s7T00::I64 = R2;
           R2 = GHC.Event.IntTable.Empty_closure+1;
           R1 = _s7T00::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T82() //  [R1]
         { info_tbl: [(c7T82,
                       label: block_c7T82_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T82: // global
           I64[Sp - 8] = block_c7T84_info;
           _s7T04::P64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp] = _s7T04::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T84() //  [R1]
         { info_tbl: [(c7T84,
                       label: block_c7T84_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T84: // global
           I64[Sp - 8] = block_c7T86_info;
           R2 = 8;
           _s7T07::P64 = R1;
           R1 = 8;
           P64[Sp] = _s7T07::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T86() //  [R1]
         { info_tbl: [(c7T86,
                       label: block_c7T86_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T86: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7T8o; else goto c7T8n;
       c7T8o: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7T8n: // global
           _s7T04::P64 = P64[Sp + 16];
           _s7T07::P64 = P64[Sp + 8];
           _s7T0b::I64 = R1 + 16;
           I64[_s7T0b::I64] = 0;
           I64[Hp - 48] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = _s7T07::P64;
           _c7T8c::P64 = Hp - 46;
           call MO_Touch(_c7T8c::P64);
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = _s7T04::P64;
           P64[Hp - 8] = _c7T8c::P64;
           I64[Hp] = _s7T0b::I64;
           I64[Sp + 16] = block_c7T8f_info;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T8f() //  [R1]
         { info_tbl: [(c7T8f,
                       label: block_c7T8f_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T8f: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7T8r; else goto c7T8q;
       c7T8r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7T8q: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.910401299 UTC

[section ""data" . GHC.Event.IntTable.new1_closure" {
     GHC.Event.IntTable.new1_closure:
         const GHC.Event.IntTable.new1_info;
 },
 GHC.Event.IntTable.new1_entry() //  [R2]
         { info_tbl: [(c7T8z,
                       label: GHC.Event.IntTable.new1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T8z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7T8A; else goto c7T8B;
       c7T8A: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.new1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7T8B: // global
           I64[Sp - 8] = block_c7T8w_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7T8F; else goto c7T8x;
       u7T8F: // global
           call _c7T8w(R1) args: 0, res: 0, upd: 0;
       c7T8x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T8w() //  [R1]
         { info_tbl: [(c7T8w,
                       label: block_c7T8w_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T8w: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.IntTable.$wnew_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.911578457 UTC

[section ""data" . GHC.Event.IntTable.new_closure" {
     GHC.Event.IntTable.new_closure:
         const GHC.Event.IntTable.new_info;
 },
 GHC.Event.IntTable.new_entry() //  [R2]
         { info_tbl: [(c7T8K,
                       label: GHC.Event.IntTable.new_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T8K: // global
           R2 = R2;
           call GHC.Event.IntTable.new1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.914223751 UTC

[section ""data" . GHC.Event.IntTable.$wupdateWith_closure" {
     GHC.Event.IntTable.$wupdateWith_closure:
         const GHC.Event.IntTable.$wupdateWith_info;
 },
 $wgo_s7T0F_entry() //  [R1, R2]
         { info_tbl: [(c7T9h,
                       label: $wgo_s7T0F_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T9h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7T9i; else goto c7T9j;
       c7T9i: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7T9j: // global
           I64[Sp - 32] = block_c7T9a_info;
           _s7T0F::P64 = R1;
           _s7T0o::P64 = P64[R1 + 7];
           _s7T0p::I64 = I64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s7T0o::P64;
           I64[Sp - 16] = _s7T0p::I64;
           P64[Sp - 8] = _s7T0F::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7T9W; else goto c7T9b;
       u7T9W: // global
           call _c7T9a(R1) args: 0, res: 0, upd: 0;
       c7T9b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T9a() //  [R1]
         { info_tbl: [(c7T9a,
                       label: block_c7T9a_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T9a: // global
           if (R1 & 7 == 1) goto c7T9e; else goto c7T9f;
       c7T9e: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7T9f: // global
           _s7T0J::P64 = P64[R1 + 6];
           _s7T0K::P64 = P64[R1 + 14];
           _s7T0I::I64 = I64[R1 + 22];
           if (_s7T0I::I64 == I64[Sp + 16]) goto c7T9D; else goto c7T9x;
       c7T9D: // global
           I64[Sp] = block_c7T9C_info;
           R2 = _s7T0J::P64;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7T0K::P64;
           P64[Sp + 16] = _s7T0J::P64;
           I64[Sp + 24] = _s7T0I::I64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c7T9x: // global
           I64[Sp + 8] = block_c7T9t_info;
           R2 = _s7T0K::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s7T0J::P64;
           I64[Sp + 24] = _s7T0I::I64;
           Sp = Sp + 8;
           call $wgo_s7T0F_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T9C() //  [R1]
         { info_tbl: [(c7T9C,
                       label: block_c7T9C_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T9C: // global
           _s7T0J::P64 = P64[Sp + 16];
           _s7T0K::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7T9J; else goto c7T9R;
       c7T9J: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7T9M; else goto c7T9L;
       c7T9M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7T9L: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T0J::P64;
           R3 = _s7T0K::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7T9R: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7T9U; else goto c7T9T;
       c7T9U: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7T9T: // global
           _s7T0T::P64 = P64[R1 + 6];
           I64[Hp - 40] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 32] = _s7T0T::P64;
           P64[Hp - 24] = _s7T0K::P64;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T0J::P64;
           R3 = Hp - 38;
           R2 = Hp - 6;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7T9t() //  [R1, R2, R3]
         { info_tbl: [(c7T9t,
                       label: block_c7T9t_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T9t: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7T9A; else goto c7T9z;
       c7T9A: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       c7T9z: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$wupdateWith_entry() //  [R2, R3, R4]
         { info_tbl: [(c7T9X,
                       label: GHC.Event.IntTable.$wupdateWith_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T9X: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7T9Y; else goto c7T9Z;
       c7T9Y: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wupdateWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7T9Z: // global
           I64[Sp - 24] = block_c7T8R_info;
           R1 = P64[R4 + 8];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TaA; else goto c7T8S;
       u7TaA: // global
           call _c7T8R(R1) args: 0, res: 0, upd: 0;
       c7T8S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7T8R() //  [R1]
         { info_tbl: [(c7T8R,
                       label: block_c7T8R_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7T8R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Ta2; else goto c7Ta1;
       c7Ta2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ta1: // global
           _s7T0p::I64 = I64[Sp + 16];
           _s7T0w::P64 = P64[R1 + 7];
           _s7T0y::P64 = P64[R1 + 15];
           _s7T0x::I64 = I64[R1 + 23];
           _s7T0z::I64 = _s7T0p::I64 & (I64[_s7T0w::P64 + 8] - 1);
           _s7T0E::P64 = P64[(_s7T0w::P64 + 24) + (_s7T0z::I64 << 3)];
           I64[Hp - 16] = $wgo_s7T0F_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s7T0p::I64;
           I64[Sp - 16] = block_c7Ta3_info;
           R2 = _s7T0E::P64;
           R1 = Hp - 15;
           I64[Sp - 8] = _s7T0z::I64;
           P64[Sp] = _s7T0y::P64;
           I64[Sp + 8] = _s7T0x::I64;
           P64[Sp + 16] = _s7T0w::P64;
           Sp = Sp - 16;
           call $wgo_s7T0F_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ta3() //  [R1, R2, R3]
         { info_tbl: [(c7Ta3,
                       label: block_c7Ta3_info
                       rep:StackRep [True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ta3: // global
           I64[Sp - 16] = block_c7Ta5_info;
           _s7T0X::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _s7T0X::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TaB; else goto c7Ta7;
       u7TaB: // global
           call _c7Ta5(R1) args: 0, res: 0, upd: 0;
       c7Ta7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ta5() //  [R1]
         { info_tbl: [(c7Ta5,
                       label: block_c7Ta5_info
                       rep:StackRep [False, False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ta5: // global
           if (R1 & 7 == 1) goto c7Tad; else goto c7Tai;
       c7Tad: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Tai: // global
           _s7T0w::P64 = P64[Sp + 48];
           _s7T0z::I64 = I64[Sp + 24];
           _s7T0X::P64 = P64[Sp + 16];
           _s7T0Z::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s7T0w::P64 + 24) + (_s7T0z::I64 << 3)] = _s7T0Z::P64;
           I64[_s7T0w::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T0w::P64 + 24) + ((I64[_s7T0w::P64 + 8] << 3) + (_s7T0z::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_c7Tag_info;
           _s7T10::P64 = R1;
           R1 = _s7T0X::P64;
           P64[Sp + 48] = _s7T10::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u7TaC; else goto c7Taj;
       u7TaC: // global
           call _c7Tag(R1) args: 0, res: 0, upd: 0;
       c7Taj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tag() //  [R1]
         { info_tbl: [(c7Tag,
                       label: block_c7Tag_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tag: // global
           _s7T10::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c7Tap; else goto c7Tat;
       c7Tap: // global
           R1 = _s7T10::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Tat: // global
           _s7T0x::I64 = I64[Sp + 16];
           _s7T0y::P64 = P64[Sp + 8];
           I64[_s7T0x::I64] = I64[_s7T0x::I64] - 1;
           call MO_Touch(_s7T0y::P64);
           R1 = _s7T10::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.921361834 UTC

[section ""data" . GHC.Event.IntTable.delete3_closure" {
     GHC.Event.IntTable.delete3_closure:
         const GHC.Event.IntTable.delete3_info;
 },
 GHC.Event.IntTable.delete3_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TaK,
                       label: GHC.Event.IntTable.delete3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TaK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7TaO; else goto c7TaP;
       c7TaO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.delete3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TaP: // global
           I64[Sp - 24] = block_c7TaH_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TaX; else goto c7TaI;
       u7TaX: // global
           call _c7TaH(R1) args: 0, res: 0, upd: 0;
       c7TaI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TaH() //  [R1]
         { info_tbl: [(c7TaH,
                       label: block_c7TaH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TaH: // global
           I64[Sp] = block_c7TaN_info;
           _s7T1f::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7T1f::I64;
           if (R1 & 7 != 0) goto u7TaW; else goto c7TaR;
       u7TaW: // global
           call _c7TaN(R1) args: 0, res: 0, upd: 0;
       c7TaR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TaN() //  [R1]
         { info_tbl: [(c7TaN,
                       label: block_c7TaN_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TaN: // global
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.IntTable.$wupdateWith_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.922768087 UTC

[section ""data" . GHC.Event.IntTable.updateWith_closure" {
     GHC.Event.IntTable.updateWith_closure:
         const GHC.Event.IntTable.updateWith_info;
 },
 GHC.Event.IntTable.updateWith_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Tb2,
                       label: GHC.Event.IntTable.updateWith_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tb2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.delete3_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.923622451 UTC

[section ""data" . GHC.Event.IntTable.delete2_closure" {
     GHC.Event.IntTable.delete2_closure:
         const GHC.Event.IntTable.delete2_info;
 },
 GHC.Event.IntTable.delete2_entry() //  []
         { info_tbl: [(c7Tb9,
                       label: GHC.Event.IntTable.delete2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tb9: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.924682892 UTC

[section ""data" . GHC.Event.IntTable.delete1_closure" {
     GHC.Event.IntTable.delete1_closure:
         const GHC.Event.IntTable.delete1_info;
 },
 GHC.Event.IntTable.delete1_entry() //  [R2, R3]
         { info_tbl: [(c7Tbj,
                       label: GHC.Event.IntTable.delete1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tbj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Tbn; else goto c7Tbo;
       c7Tbn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.delete1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Tbo: // global
           I64[Sp - 16] = block_c7Tbg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Tbw; else goto c7Tbh;
       u7Tbw: // global
           call _c7Tbg(R1) args: 0, res: 0, upd: 0;
       c7Tbh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tbg() //  [R1]
         { info_tbl: [(c7Tbg,
                       label: block_c7Tbg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tbg: // global
           I64[Sp] = block_c7Tbm_info;
           _s7T1n::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7T1n::I64;
           if (R1 & 7 != 0) goto u7Tbv; else goto c7Tbq;
       u7Tbv: // global
           call _c7Tbm(R1) args: 0, res: 0, upd: 0;
       c7Tbq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tbm() //  [R1]
         { info_tbl: [(c7Tbm,
                       label: block_c7Tbm_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tbm: // global
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 8];
           R2 = GHC.Event.IntTable.delete2_closure+1;
           Sp = Sp + 16;
           call GHC.Event.IntTable.$wupdateWith_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.926082421 UTC

[section ""data" . GHC.Event.IntTable.delete_closure" {
     GHC.Event.IntTable.delete_closure:
         const GHC.Event.IntTable.delete_info;
 },
 GHC.Event.IntTable.delete_entry() //  [R2, R3]
         { info_tbl: [(c7TbB,
                       label: GHC.Event.IntTable.delete_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TbB: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.delete1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.928311301 UTC

[section ""data" . GHC.Event.IntTable.$wgrow_closure" {
     GHC.Event.IntTable.$wgrow_closure:
         const GHC.Event.IntTable.$wgrow_info;
 },
 GHC.Event.IntTable.$wgrow_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TbK,
                       label: GHC.Event.IntTable.$wgrow_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 22} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TbK: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c7TbL; else goto c7TbM;
       c7TbL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wgrow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TbM: // global
           I64[Sp - 32] = block_c7TbR_info;
           _s7T1q::P64 = R2;
           _s7T1v::I64 = I64[R2 + 8] << 1;
           R2 = GHC.Event.IntTable.Empty_closure+1;
           R1 = _s7T1v::I64;
           P64[Sp - 24] = _s7T1q::P64;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TbR() //  [R1]
         { info_tbl: [(c7TbR,
                       label: block_c7TbR_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TbR: // global
           I64[Sp - 8] = block_c7TbT_info;
           _s7T1y::P64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp] = _s7T1y::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TbT() //  [R1]
         { info_tbl: [(c7TbT,
                       label: block_c7TbT_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TbT: // global
           I64[Sp - 8] = block_c7TbV_info;
           R2 = 8;
           _s7T1B::P64 = R1;
           R1 = 8;
           P64[Sp] = _s7T1B::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TbV() //  [R1]
         { info_tbl: [(c7TbV,
                       label: block_c7TbV_info
                       rep:StackRep [False, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TbV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Tc1; else goto c7Tc0;
       c7Tc1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tc0: // global
           _s7T1B::P64 = P64[Sp + 8];
           _s7T1F::I64 = R1 + 16;
           I64[_s7T1F::I64] = 0;
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = _s7T1B::P64;
           _c7Tc5::P64 = Hp - 14;
           call MO_Touch(_c7Tc5::P64);
           I64[Sp - 16] = 0;
           I64[Sp - 8] = 0;
           I64[Sp] = _s7T1F::I64;
           P64[Sp + 8] = _c7Tc5::P64;
           Sp = Sp - 16;
           call _c7Tch() args: 0, res: 0, upd: 0;
     }
 },
 _c7Tch() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tch: // global
           _s7T1Q::I64 = I64[Sp];
           if (_s7T1Q::I64 == I64[Sp + 56]) goto u7Tda; else goto c7TcP;
       u7Tda: // global
           Sp = Sp + 8;
           call _c7Tca() args: 0, res: 0, upd: 0;
       c7TcP: // global
           P64[Sp - 8] = P64[P64[Sp + 40] + ((I64[Sp + 8] << 3) + 24)];
           I64[Sp] = _s7T1Q::I64;
           Sp = Sp - 8;
           call _c7Tcw() args: 0, res: 0, upd: 0;
     }
 },
 _c7Tca() //  []
         { info_tbl: [(c7Tca,
                       label: block_c7Tca_info
                       rep:StackRep [True, False, False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tca: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Tce; else goto c7Tcd;
       c7Tce: // global
           HpAlloc = 32;
           I64[Sp] = block_c7Tca_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7Tcd: // global
           _c7Tc5::P64 = P64[Sp + 16];
           _s7T1r::P64 = P64[Sp + 40];
           _s7T1y::P64 = P64[Sp + 24];
           _s7T1F::I64 = I64[Sp + 8];
           I64[_s7T1F::I64] = I64[Sp + 48];
           call MO_Touch(_c7Tc5::P64);
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = _s7T1y::P64;
           P64[Hp - 8] = _c7Tc5::P64;
           I64[Hp] = _s7T1F::I64;
           call MO_WriteBarrier();
           P64[_s7T1r::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7T1r::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Tcw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tcw: // global
           _s7T23::P64 = P64[Sp];
           I64[Sp] = block_c7Tcz_info;
           R1 = _s7T23::P64;
           if (R1 & 7 != 0) goto u7Tdh; else goto c7TcB;
       u7Tdh: // global
           call _c7Tcz(R1) args: 0, res: 0, upd: 0;
       c7TcB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tcz() //  [R1]
         { info_tbl: [(c7Tcz,
                       label: block_c7Tcz_info
                       rep:StackRep [True, True, True, False, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tcz: // global
           _s7T22::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c7TcH; else goto c7TcI;
       c7TcH: // global
           I64[Sp + 8] = _s7T22::I64;
           I64[Sp + 16] = I64[Sp + 16] + 1;
           Sp = Sp + 8;
           call _c7Tch() args: 0, res: 0, upd: 0;
       c7TcI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TcN; else goto c7TcM;
       c7TcN: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TcM: // global
           _s7T1y::P64 = P64[Sp + 40];
           _s7T27::P64 = P64[R1 + 6];
           _s7T28::P64 = P64[R1 + 14];
           _s7T26::I64 = I64[R1 + 22];
           _s7T29::I64 = _s7T26::I64 & (I64[_s7T1y::P64 + 8] - 1);
           _s7T2e::P64 = P64[(_s7T1y::P64 + 24) + (_s7T29::I64 << 3)];
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7T27::P64;
           P64[Hp - 8] = _s7T2e::P64;
           I64[Hp] = _s7T26::I64;
           call MO_WriteBarrier();
           P64[(_s7T1y::P64 + 24) + (_s7T29::I64 << 3)] = Hp - 22;
           I64[_s7T1y::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T1y::P64 + 24) + ((I64[_s7T1y::P64 + 8] << 3) + (_s7T29::I64 >> 7))] = 1 :: W8;
           I64[Sp + 8] = _s7T22::I64 + 1;
           P64[Sp] = _s7T28::P64;
           call _c7Tcw() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.931833932 UTC

[section ""data" . poly_<>_r7SZ6_closure" {
     poly_<>_r7SZ6_closure:
         const poly_<>_r7SZ6_info;
 },
 sat_s7T2o_entry() //  [R1]
         { info_tbl: [(c7Tdy,
                       label: sat_s7T2o_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tdy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Tdz; else goto c7TdA;
       c7Tdz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7TdA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_<>_r7SZ6_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_<>_r7SZ6_entry() //  [R2, R3]
         { info_tbl: [(c7TdF,
                       label: poly_<>_r7SZ6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TdF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TdG; else goto c7TdH;
       c7TdG: // global
           R3 = R3;
           R2 = R2;
           R1 = poly_<>_r7SZ6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TdH: // global
           I64[Sp - 16] = block_c7Tdo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TdO; else goto c7Tdp;
       u7TdO: // global
           call _c7Tdo(R1) args: 0, res: 0, upd: 0;
       c7Tdp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tdo() //  [R1]
         { info_tbl: [(c7Tdo,
                       label: block_c7Tdo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tdo: // global
           _s7T2j::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7TdC; else goto c7TdD;
       c7TdC: // global
           R1 = _s7T2j::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7TdD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7TdN; else goto c7TdM;
       c7TdN: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TdM: // global
           _s7T2m::P64 = P64[R1 + 6];
           _s7T2n::P64 = P64[R1 + 14];
           _s7T2l::I64 = I64[R1 + 22];
           I64[Hp - 56] = sat_s7T2o_info;
           P64[Hp - 40] = _s7T2j::P64;
           P64[Hp - 32] = _s7T2n::P64;
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7T2m::P64;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = _s7T2l::I64;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.93573719 UTC

[section ""data" . GHC.Event.IntTable.$winsertWith_closure" {
     GHC.Event.IntTable.$winsertWith_closure:
         const GHC.Event.IntTable.$winsertWith_info;
 },
 GHC.Event.IntTable.$winsertWith_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TdQ: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$winsertWith_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7TdW,
                       label: GHC.Event.IntTable.$winsertWith_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TdW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Te0; else goto c7TdZ;
       c7Te0: // global
           HpAlloc = 32;
           R1 = GHC.Event.IntTable.$winsertWith_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7TdZ: // global
           I64[Hp - 24] = GHC.STRef.STRef_con_info;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R3;
           R5 = Hp - 23;
           R4 = R4;
           R3 = Hp - 7;
           R2 = R2;
           call insertWith1_r7SZ8_entry(R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . $winsertWith1_r7SZ7_closure" {
     $winsertWith1_r7SZ7_closure:
         const $winsertWith1_r7SZ7_info;
 },
 $winsertWith1_r7SZ7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Te2: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $winsertWith1_r7SZ7_entry(R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 $winsertWith1_r7SZ7_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7TeD,
                       label: $winsertWith1_r7SZ7_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TeD: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c7TeE; else goto c7TeF;
       c7TeE: // global
           R1 = $winsertWith1_r7SZ7_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7TeF: // global
           I64[Sp - 40] = block_c7Te6_info;
           R1 = P64[R5 + 8];
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7TfW; else goto c7Te7;
       u7TfW: // global
           call _c7Te6(R1) args: 0, res: 0, upd: 0;
       c7Te7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Te6() //  [R1]
         { info_tbl: [(c7Te6,
                       label: block_c7Te6_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Te6: // global
           _s7T2F::P64 = P64[R1 + 7];
           _s7T2I::I64 = I64[Sp + 16] & (I64[_s7T2F::P64 + 8] - 1);
           _s7T3p::P64 = P64[(_s7T2F::P64 + 24) + (_s7T2I::I64 << 3)];
           I64[Sp - 40] = I64[R1 + 23];
           P64[Sp - 32] = P64[R1 + 15];
           I64[Sp - 24] = _s7T2I::I64;
           P64[Sp - 16] = GHC.Event.IntTable.Empty_closure+1;
           P64[Sp - 8] = _s7T3p::P64;
           P64[Sp] = _s7T2F::P64;
           Sp = Sp - 40;
           call _c7Ter() args: 0, res: 0, upd: 0;
     }
 },
 _c7Ter() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ter: // global
           I64[Sp - 8] = block_c7Tet_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TfU; else goto c7Teu;
       u7TfU: // global
           call _c7Tet(R1) args: 0, res: 0, upd: 0;
       c7Teu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tet() //  [R1]
         { info_tbl: [(c7Tet,
                       label: block_c7Tet_info
                       rep:StackRep [True, False, True, False, True, False, False, True,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tet: // global
           _s7T3o::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c7TfC; else goto c7TfD;
       c7TfC: // global
           _s7T2F::P64 = P64[Sp + 48];
           _s7T2T::I64 = I64[I64[Sp + 8]];
           if (%MO_S_Lt_W64(_s7T2T::I64 + 1,
                            I64[_s7T2F::P64 + 8] - %MO_S_Shr_W64(I64[_s7T2F::P64 + 8],
                                                                 2))) goto c7Tf5; else goto c7Tfe;
       c7Tf5: // global
           I64[Sp] = block_c7Tf3_info;
           R1 = P64[Sp + 72];
           I64[Sp + 72] = _s7T2T::I64;
           P64[Sp + 80] = _s7T3o::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c7Tfe: // global
           I64[Sp + 8] = block_c7Tfb_info;
           R4 = _s7T2T::I64;
           R3 = P64[Sp + 80];
           R2 = _s7T2F::P64;
           Sp = Sp + 8;
           call GHC.Event.IntTable.$wgrow_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
       c7TfD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TfG; else goto c7TfF;
       c7TfG: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TfF: // global
           _s7T3t::P64 = P64[R1 + 6];
           _s7T3u::P64 = P64[R1 + 14];
           _s7T3s::I64 = I64[R1 + 22];
           if (_s7T3s::I64 == I64[Sp + 64]) goto c7TfJ; else goto c7TfI;
       c7TfJ: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_c7Tfl_info;
           R3 = _s7T3u::P64;
           R2 = _s7T3o::P64;
           P64[Sp + 80] = _s7T3t::P64;
           Sp = Sp + 16;
           call poly_<>_r7SZ6_entry(R3, R2) args: 8, res: 8, upd: 8;
       c7TfI: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7T3t::P64;
           P64[Hp - 8] = _s7T3o::P64;
           I64[Hp] = _s7T3s::I64;
           P64[Sp + 32] = Hp - 22;
           P64[Sp + 40] = _s7T3u::P64;
           Sp = Sp + 8;
           call _c7Ter() args: 0, res: 0, upd: 0;
     }
 },
 _c7Tf3() //  [R1]
         { info_tbl: [(c7Tf3,
                       label: block_c7Tf3_info
                       rep:StackRep [True, False, True, True, True, False, True, True,
                                     True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tf3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Tf9; else goto c7Tf8;
       c7Tf9: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tf8: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 80];
           I64[Hp] = I64[Sp + 64];
           _s7T2F::P64 = P64[Sp + 48];
           _s7T2G::I64 = I64[Sp + 8];
           _s7T2H::P64 = P64[Sp + 16];
           _s7T2I::I64 = I64[Sp + 24];
           _s7T2T::I64 = I64[Sp + 72];
           call MO_WriteBarrier();
           P64[(_s7T2F::P64 + 24) + (_s7T2I::I64 << 3)] = Hp - 22;
           I64[_s7T2F::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T2F::P64 + 24) + ((I64[_s7T2F::P64 + 8] << 3) + (_s7T2I::I64 >> 7))] = 1 :: W8;
           I64[_s7T2G::I64] = _s7T2T::I64 + 1;
           call MO_Touch(_s7T2H::P64);
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Tfb() //  []
         { info_tbl: [(c7Tfb,
                       label: block_c7Tfb_info
                       rep:StackRep [False, True, True, True, True, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tfb: // global
           I64[Sp] = block_c7Tfd_info;
           R5 = P64[Sp + 72];
           R4 = P64[Sp + 64];
           R3 = I64[Sp + 56];
           R2 = P64[Sp + 48];
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tfd() //  [R1]
         { info_tbl: [(c7Tfd,
                       label: block_c7Tfd_info
                       rep:StackRep [False, True, True, True, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tfd: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Tfl() //  [R1]
         { info_tbl: [(c7Tfl,
                       label: block_c7Tfl_info
                       rep:StackRep [True, True, True, False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tfl: // global
           I64[Sp] = block_c7Tfp_info;
           R3 = P64[Sp + 64];
           R2 = P64[Sp + 56];
           _s7T3i::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 56] = _s7T3i::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tfp() //  [R1]
         { info_tbl: [(c7Tfp,
                       label: block_c7Tfp_info
                       rep:StackRep [True, True, True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tfp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7Tfx; else goto c7Tfw;
       c7Tfx: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tfw: // global
           I64[Hp - 40] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = I64[Sp + 48];
           _s7T2F::P64 = P64[Sp + 32];
           _s7T2I::I64 = I64[Sp + 8];
           _s7T3g::P64 = P64[Sp + 64];
           call MO_WriteBarrier();
           P64[(_s7T2F::P64 + 24) + (_s7T2I::I64 << 3)] = Hp - 38;
           I64[_s7T2F::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T2F::P64 + 24) + ((I64[_s7T2F::P64 + 8] << 3) + (_s7T2I::I64 >> 7))] = 1 :: W8;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T3g::P64;
           R1 = Hp - 6;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . insertWith1_r7SZ8_closure" {
     insertWith1_r7SZ8_closure:
         const insertWith1_r7SZ8_info;
 },
 insertWith1_r7SZ8_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7Tg4,
                       label: insertWith1_r7SZ8_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tg4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Tg8; else goto c7Tg9;
       c7Tg8: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = insertWith1_r7SZ8_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Tg9: // global
           I64[Sp - 32] = block_c7Tg1_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7Tgh; else goto c7Tg2;
       u7Tgh: // global
           call _c7Tg1(R1) args: 0, res: 0, upd: 0;
       c7Tg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tg1() //  [R1]
         { info_tbl: [(c7Tg1,
                       label: block_c7Tg1_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tg1: // global
           I64[Sp] = block_c7Tg7_info;
           _s7T3D::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7T3D::I64;
           if (R1 & 7 != 0) goto u7Tgg; else goto c7Tgb;
       u7Tgg: // global
           call _c7Tg7(R1) args: 0, res: 0, upd: 0;
       c7Tgb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tg7() //  [R1]
         { info_tbl: [(c7Tg7,
                       label: block_c7Tg7_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tg7: // global
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call $winsertWith1_r7SZ7_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.941530633 UTC

[section ""data" . insertWith2_r7SZ9_closure" {
     insertWith2_r7SZ9_closure:
         const insertWith2_r7SZ9_info;
 },
 insertWith2_r7SZ9_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7Tgp,
                       label: insertWith2_r7SZ9_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tgp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Tgt; else goto c7Tgu;
       c7Tgt: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = insertWith2_r7SZ9_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Tgu: // global
           I64[Sp - 32] = block_c7Tgm_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7TgC; else goto c7Tgn;
       u7TgC: // global
           call _c7Tgm(R1) args: 0, res: 0, upd: 0;
       c7Tgn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tgm() //  [R1]
         { info_tbl: [(c7Tgm,
                       label: block_c7Tgm_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tgm: // global
           I64[Sp] = block_c7Tgs_info;
           _s7T3M::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7T3M::I64;
           if (R1 & 7 != 0) goto u7TgB; else goto c7Tgw;
       u7TgB: // global
           call _c7Tgs(R1) args: 0, res: 0, upd: 0;
       c7Tgw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tgs() //  [R1]
         { info_tbl: [(c7Tgs,
                       label: block_c7Tgs_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tgs: // global
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.943020144 UTC

[section ""data" . GHC.Event.IntTable.insertWith_closure" {
     GHC.Event.IntTable.insertWith_closure:
         const GHC.Event.IntTable.insertWith_info;
 },
 GHC.Event.IntTable.insertWith_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7TgH,
                       label: GHC.Event.IntTable.insertWith_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TgH: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call insertWith2_r7SZ9_entry(R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.945534905 UTC

[section ""data" . GHC.Event.IntTable.$wreset_closure" {
     GHC.Event.IntTable.$wreset_closure:
         const GHC.Event.IntTable.$wreset_info;
 },
 $wgo_s7T47_entry() //  [R1, R2]
         { info_tbl: [(c7Thj,
                       label: $wgo_s7T47_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Thj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Thk; else goto c7Thl;
       c7Thk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Thl: // global
           I64[Sp - 24] = block_c7Thc_info;
           _s7T47::P64 = R1;
           _s7T3P::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _s7T3P::I64;
           P64[Sp - 8] = _s7T47::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7ThI; else goto c7Thd;
       u7ThI: // global
           call _c7Thc(R1) args: 0, res: 0, upd: 0;
       c7Thd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Thc() //  [R1]
         { info_tbl: [(c7Thc,
                       label: block_c7Thc_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Thc: // global
           if (R1 & 7 == 1) goto c7Thg; else goto c7Thh;
       c7Thg: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Thh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Tht; else goto c7Ths;
       c7Tht: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ths: // global
           _s7T4b::P64 = P64[R1 + 6];
           _s7T4c::P64 = P64[R1 + 14];
           _s7T4a::I64 = I64[R1 + 22];
           if (_s7T4a::I64 == I64[Sp + 8]) goto c7ThH; else goto c7ThB;
       c7ThH: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T4b::P64;
           R3 = _s7T4c::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ThB: // global
           Hp = Hp - 16;
           I64[Sp] = block_c7Thx_info;
           R2 = _s7T4c::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _s7T4b::P64;
           I64[Sp + 16] = _s7T4a::I64;
           call $wgo_s7T47_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Thx() //  [R1, R2, R3]
         { info_tbl: [(c7Thx,
                       label: block_c7Thx_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Thx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ThE; else goto c7ThD;
       c7ThE: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       c7ThD: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$wreset_entry() //  [R2, R3, R4]
         { info_tbl: [(c7ThN,
                       label: GHC.Event.IntTable.$wreset_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ThN: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7ThO; else goto c7ThP;
       c7ThO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wreset_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ThP: // global
           I64[Sp - 24] = block_c7TgO_info;
           R1 = R3;
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TiA; else goto c7TgP;
       u7TiA: // global
           call _c7TgO(R1) args: 0, res: 0, upd: 0;
       c7TgP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TgO() //  [R1]
         { info_tbl: [(c7TgO,
                       label: block_c7TgO_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TgO: // global
           _s7T3R::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7ThK; else goto c7ThL;
       c7ThK: // global
           I64[Sp] = block_c7TgT_info;
           R1 = P64[_s7T3R::P64 + 8];
           if (R1 & 7 != 0) goto u7Tiz; else goto c7TgU;
       u7Tiz: // global
           call _c7TgT(R1) args: 0, res: 0, upd: 0;
       c7TgU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ThL: // global
           I64[Sp + 16] = block_c7Tin_info;
           R5 = _s7T3R::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 16;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7TgT() //  [R1]
         { info_tbl: [(c7TgT,
                       label: block_c7TgT_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TgT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7ThT; else goto c7ThS;
       c7ThT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ThS: // global
           _s7T3P::I64 = I64[Sp + 8];
           _s7T3Y::P64 = P64[R1 + 7];
           _s7T40::P64 = P64[R1 + 15];
           _s7T3Z::I64 = I64[R1 + 23];
           _s7T41::I64 = _s7T3P::I64 & (I64[_s7T3Y::P64 + 8] - 1);
           _s7T46::P64 = P64[(_s7T3Y::P64 + 24) + (_s7T41::I64 << 3)];
           I64[Hp - 8] = $wgo_s7T47_info;
           I64[Hp] = _s7T3P::I64;
           I64[Sp - 16] = block_c7ThU_info;
           R2 = _s7T46::P64;
           R1 = Hp - 7;
           I64[Sp - 8] = _s7T41::I64;
           P64[Sp] = _s7T40::P64;
           I64[Sp + 8] = _s7T3Z::I64;
           P64[Sp + 16] = _s7T3Y::P64;
           Sp = Sp - 16;
           call $wgo_s7T47_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ThU() //  [R1, R2, R3]
         { info_tbl: [(c7ThU,
                       label: block_c7ThU_info
                       rep:StackRep [True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ThU: // global
           I64[Sp - 16] = block_c7ThW_info;
           _s7T4l::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _s7T4l::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TiB; else goto c7ThY;
       u7TiB: // global
           call _c7ThW(R1) args: 0, res: 0, upd: 0;
       c7ThY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ThW() //  [R1]
         { info_tbl: [(c7ThW,
                       label: block_c7ThW_info
                       rep:StackRep [False, False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ThW: // global
           if (R1 & 7 == 1) goto u7Tix; else goto c7Ti9;
       u7Tix: // global
           Sp = Sp + 56;
           call _c7Tig() args: 0, res: 0, upd: 0;
       c7Ti9: // global
           _s7T3Y::P64 = P64[Sp + 48];
           _s7T41::I64 = I64[Sp + 24];
           _s7T4l::P64 = P64[Sp + 16];
           _s7T4n::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s7T3Y::P64 + 24) + (_s7T41::I64 << 3)] = _s7T4n::P64;
           I64[_s7T3Y::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T3Y::P64 + 24) + ((I64[_s7T3Y::P64 + 8] << 3) + (_s7T41::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_c7Ti7_info;
           R1 = _s7T4l::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u7TiC; else goto c7Tia;
       u7TiC: // global
           call _c7Ti7(R1) args: 0, res: 0, upd: 0;
       c7Tia: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ti7() //  [R1]
         { info_tbl: [(c7Ti7,
                       label: block_c7Ti7_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ti7: // global
           if (R1 & 7 == 1) goto u7Tiy; else goto c7Tik;
       u7Tiy: // global
           Sp = Sp + 32;
           call _c7Tig() args: 0, res: 0, upd: 0;
       c7Tik: // global
           _s7T3Z::I64 = I64[Sp + 16];
           _s7T40::P64 = P64[Sp + 8];
           I64[_s7T3Z::I64] = I64[_s7T3Z::I64] - 1;
           call MO_Touch(_s7T40::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Tig() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tig: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Tin() //  []
         { info_tbl: [(c7Tin,
                       label: block_c7Tin_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tin: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.949872756 UTC

[section ""data" . GHC.Event.IntTable.reset1_closure" {
     GHC.Event.IntTable.reset1_closure:
         const GHC.Event.IntTable.reset1_info;
 },
 GHC.Event.IntTable.reset1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TiM,
                       label: GHC.Event.IntTable.reset1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TiM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7TiQ; else goto c7TiR;
       c7TiQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.reset1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TiR: // global
           I64[Sp - 24] = block_c7TiJ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TiZ; else goto c7TiK;
       u7TiZ: // global
           call _c7TiJ(R1) args: 0, res: 0, upd: 0;
       c7TiK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TiJ() //  [R1]
         { info_tbl: [(c7TiJ,
                       label: block_c7TiJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TiJ: // global
           I64[Sp] = block_c7TiP_info;
           _s7T4H::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7T4H::I64;
           if (R1 & 7 != 0) goto u7TiY; else goto c7TiT;
       u7TiY: // global
           call _c7TiP(R1) args: 0, res: 0, upd: 0;
       c7TiT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TiP() //  [R1]
         { info_tbl: [(c7TiP,
                       label: block_c7TiP_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TiP: // global
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.IntTable.$wreset_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.951321647 UTC

[section ""data" . GHC.Event.IntTable.reset_closure" {
     GHC.Event.IntTable.reset_closure:
         const GHC.Event.IntTable.reset_info;
 },
 GHC.Event.IntTable.reset_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Tj4,
                       label: GHC.Event.IntTable.reset_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tj4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.reset1_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.953018934 UTC

[section ""data" . GHC.Event.IntTable.$wlookup_closure" {
     GHC.Event.IntTable.$wlookup_closure:
         const GHC.Event.IntTable.$wlookup_info;
 },
 go_s7T50_entry() //  [R1, R2]
         { info_tbl: [(c7TjB,
                       label: go_s7T50_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TjB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7TjC; else goto u7TjU;
       c7TjC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u7TjU: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c7Tjr() args: 0, res: 0, upd: 0;
     }
 },
 _c7Tjr() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tjr: // global
           _s7T4K::I64 = I64[P64[Sp] + 7];
           I64[Sp - 8] = block_c7Tju_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7T4K::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TjW; else goto c7Tjv;
       u7TjW: // global
           call _c7Tju(R1) args: 0, res: 0, upd: 0;
       c7Tjv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tju() //  [R1]
         { info_tbl: [(c7Tju,
                       label: block_c7Tju_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tju: // global
           if (R1 & 7 == 1) goto c7Tjy; else goto c7Tjz;
       c7Tjy: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Tjz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TjL; else goto c7TjK;
       c7TjL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TjK: // global
           if (I64[R1 + 22] == I64[Sp + 16]) goto c7TjT; else goto c7TjP;
       c7TjT: // global
           _s7T54::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T54::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7TjP: // global
           _s7T55::P64 = P64[R1 + 14];
           Hp = Hp - 16;
           P64[Sp + 16] = _s7T55::P64;
           Sp = Sp + 8;
           call _c7Tjr() args: 0, res: 0, upd: 0;
     }
 },
 GHC.Event.IntTable.$wlookup_entry() //  [R2, R3]
         { info_tbl: [(c7TjZ,
                       label: GHC.Event.IntTable.$wlookup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TjZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Tk1; else goto c7Tk2;
       c7Tk1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wlookup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Tk2: // global
           I64[Sp - 16] = block_c7Tjb_info;
           R1 = P64[R3 + 8];
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Tka; else goto c7Tjc;
       u7Tka: // global
           call _c7Tjb(R1) args: 0, res: 0, upd: 0;
       c7Tjc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tjb() //  [R1]
         { info_tbl: [(c7Tjb,
                       label: block_c7Tjb_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tjb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Tk5; else goto c7Tk4;
       c7Tk5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tk4: // global
           _s7T4K::I64 = I64[Sp + 8];
           _s7T4R::P64 = P64[R1 + 7];
           _s7T4Z::P64 = P64[(_s7T4R::P64 + 24) + (_s7T4K::I64 & (I64[_s7T4R::P64 + 8] - 1) << 3)];
           I64[Hp - 8] = go_s7T50_info;
           I64[Hp] = _s7T4K::I64;
           I64[Sp + 8] = block_c7Tk0_info;
           R2 = _s7T4Z::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s7T50_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tk0() //  [R1]
         { info_tbl: [(c7Tk0,
                       label: block_c7Tk0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tk0: // global
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.955531457 UTC

[section ""data" . GHC.Event.IntTable.lookup1_closure" {
     GHC.Event.IntTable.lookup1_closure:
         const GHC.Event.IntTable.lookup1_info;
 },
 GHC.Event.IntTable.lookup1_entry() //  [R2, R3]
         { info_tbl: [(c7Tki,
                       label: GHC.Event.IntTable.lookup1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tki: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Tkm; else goto c7Tkn;
       c7Tkm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.lookup1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Tkn: // global
           I64[Sp - 16] = block_c7Tkf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Tkv; else goto c7Tkg;
       u7Tkv: // global
           call _c7Tkf(R1) args: 0, res: 0, upd: 0;
       c7Tkg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tkf() //  [R1]
         { info_tbl: [(c7Tkf,
                       label: block_c7Tkf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tkf: // global
           I64[Sp] = block_c7Tkl_info;
           _s7T5c::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7T5c::I64;
           if (R1 & 7 != 0) goto u7Tku; else goto c7Tkp;
       u7Tku: // global
           call _c7Tkl(R1) args: 0, res: 0, upd: 0;
       c7Tkp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tkl() //  [R1]
         { info_tbl: [(c7Tkl,
                       label: block_c7Tkl_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tkl: // global
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.IntTable.$wlookup_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.956895604 UTC

[section ""data" . GHC.Event.IntTable.lookup_closure" {
     GHC.Event.IntTable.lookup_closure:
         const GHC.Event.IntTable.lookup_info;
 },
 GHC.Event.IntTable.lookup_entry() //  [R2, R3]
         { info_tbl: [(c7TkA,
                       label: GHC.Event.IntTable.lookup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TkA: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.lookup1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.957819718 UTC

[section ""cstring" . GHC.Event.IntTable.$trModule4_bytes" {
     GHC.Event.IntTable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.958395264 UTC

[section ""data" . GHC.Event.IntTable.$trModule3_closure" {
     GHC.Event.IntTable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.958922254 UTC

[section ""cstring" . GHC.Event.IntTable.$trModule2_bytes" {
     GHC.Event.IntTable.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.959530068 UTC

[section ""data" . GHC.Event.IntTable.$trModule1_closure" {
     GHC.Event.IntTable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.960136196 UTC

[section ""data" . GHC.Event.IntTable.$trModule_closure" {
     GHC.Event.IntTable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.IntTable.$trModule3_closure+1;
         const GHC.Event.IntTable.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.960703743 UTC

[section ""data" . $krep_r7SZa_closure" {
     $krep_r7SZa_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.961359957 UTC

[section ""data" . $krep1_r7SZb_closure" {
     $krep1_r7SZb_closure:
         const :_con_info;
         const $krep_r7SZa_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.961984012 UTC

[section ""data" . $krep2_r7SZc_closure" {
     $krep2_r7SZc_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep1_r7SZb_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.962599577 UTC

[section ""data" . $krep3_r7SZd_closure" {
     $krep3_r7SZd_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.963210562 UTC

[section ""cstring" . GHC.Event.IntTable.$tcBucket2_bytes" {
     GHC.Event.IntTable.$tcBucket2_bytes:
         I8[] [66,117,99,107,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.963766552 UTC

[section ""data" . GHC.Event.IntTable.$tcBucket1_closure" {
     GHC.Event.IntTable.$tcBucket1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcBucket2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.964345211 UTC

[section ""data" . GHC.Event.IntTable.$tcBucket_closure" {
     GHC.Event.IntTable.$tcBucket_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcBucket1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17735724201551259799;
         const 1580619789810252778;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.964972818 UTC

[section ""data" . $krep4_r7SZe_closure" {
     $krep4_r7SZe_closure:
         const :_con_info;
         const $krep3_r7SZd_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.965628924 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty1_closure" {
     GHC.Event.IntTable.$tc'Empty1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcBucket_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.966190056 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'Empty3_bytes" {
     GHC.Event.IntTable.$tc'Empty3_bytes:
         I8[] [39,69,109,112,116,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.966762609 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty2_closure" {
     GHC.Event.IntTable.$tc'Empty2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'Empty3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.967356765 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty_closure" {
     GHC.Event.IntTable.$tc'Empty_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'Empty2_closure+1;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const 14716594083905147916;
         const 6006296133869125928;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.967984739 UTC

[section ""data" . $krep5_r7SZf_closure" {
     $krep5_r7SZf_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.968569962 UTC

[section ""data" . $krep6_r7SZg_closure" {
     $krep6_r7SZg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7SZd_closure+2;
         const $krep5_r7SZf_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.969105987 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket1_closure" {
     GHC.Event.IntTable.$tc'Bucket1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7SZa_closure+1;
         const $krep6_r7SZg_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.969892207 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'Bucket3_bytes" {
     GHC.Event.IntTable.$tc'Bucket3_bytes:
         I8[] [39,66,117,99,107,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.970468328 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket2_closure" {
     GHC.Event.IntTable.$tc'Bucket2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'Bucket3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.97103675 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket_closure" {
     GHC.Event.IntTable.$tc'Bucket_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'Bucket2_closure+1;
         const GHC.Event.IntTable.$tc'Bucket1_closure+4;
         const 13477734220520722226;
         const 15099239145624852322;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.971639423 UTC

[section ""data" . $krep7_r7SZh_closure" {
     $krep7_r7SZh_closure:
         const :_con_info;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.972314245 UTC

[section ""data" . $krep8_r7SZi_closure" {
     $krep8_r7SZi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Arr.$tcArr_closure;
         const $krep7_r7SZh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.972900892 UTC

[section ""cstring" . GHC.Event.IntTable.$tcIT2_bytes" {
     GHC.Event.IntTable.$tcIT2_bytes:
         I8[] [73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.975731067 UTC

[section ""data" . GHC.Event.IntTable.$tcIT1_closure" {
     GHC.Event.IntTable.$tcIT1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcIT2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.976334447 UTC

[section ""data" . GHC.Event.IntTable.$tcIT_closure" {
     GHC.Event.IntTable.$tcIT_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcIT1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 1485413372890074222;
         const 7871673693356487434;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.976968266 UTC

[section ""data" . $krep9_r7SZj_closure" {
     $krep9_r7SZj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcIT_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.977595625 UTC

[section ""data" . $krep10_r7SZk_closure" {
     $krep10_r7SZk_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r7SZc_closure+1;
         const $krep9_r7SZj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.978122858 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT1_closure" {
     GHC.Event.IntTable.$tc'IT1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7SZi_closure+1;
         const $krep10_r7SZk_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.978688582 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'IT3_bytes" {
     GHC.Event.IntTable.$tc'IT3_bytes:
         I8[] [39,73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.979266774 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT2_closure" {
     GHC.Event.IntTable.$tc'IT2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'IT3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.979833169 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT_closure" {
     GHC.Event.IntTable.$tc'IT_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'IT2_closure+1;
         const GHC.Event.IntTable.$tc'IT1_closure+4;
         const 2061931487051656996;
         const 1303251193055522557;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.980499913 UTC

[section ""data" . $krep11_r7SZl_closure" {
     $krep11_r7SZl_closure:
         const :_con_info;
         const $krep9_r7SZj_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.981065015 UTC

[section ""data" . $krep12_r7SZm_closure" {
     $krep12_r7SZm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep11_r7SZl_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.981655645 UTC

[section ""cstring" . GHC.Event.IntTable.$tcIntTable2_bytes" {
     GHC.Event.IntTable.$tcIntTable2_bytes:
         I8[] [73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.98221488 UTC

[section ""data" . GHC.Event.IntTable.$tcIntTable1_closure" {
     GHC.Event.IntTable.$tcIntTable1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcIntTable2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.982806115 UTC

[section ""data" . GHC.Event.IntTable.$tcIntTable_closure" {
     GHC.Event.IntTable.$tcIntTable_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcIntTable1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 12646307913912198429;
         const 5258607314097228638;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.983423126 UTC

[section ""data" . $krep13_r7SZn_closure" {
     $krep13_r7SZn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcIntTable_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.983983992 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable1_closure" {
     GHC.Event.IntTable.$tc'IntTable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7SZm_closure+1;
         const $krep13_r7SZn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.984529698 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'IntTable3_bytes" {
     GHC.Event.IntTable.$tc'IntTable3_bytes:
         I8[] [39,73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.985093349 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable2_closure" {
     GHC.Event.IntTable.$tc'IntTable2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'IntTable3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.985701694 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable_closure" {
     GHC.Event.IntTable.$tc'IntTable_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'IntTable2_closure+1;
         const GHC.Event.IntTable.$tc'IntTable1_closure+4;
         const 17952658267866828845;
         const 12036984593740445577;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.986277344 UTC

[section ""data" . GHC.Event.IntTable.Empty_closure" {
     GHC.Event.IntTable.Empty_closure:
         const GHC.Event.IntTable.Empty_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.987212785 UTC

[section ""data" . GHC.Event.IntTable.Bucket_closure" {
     GHC.Event.IntTable.Bucket_closure:
         const GHC.Event.IntTable.Bucket_info;
 },
 GHC.Event.IntTable.Bucket_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TkI,
                       label: GHC.Event.IntTable.Bucket_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TkI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TkM; else goto c7TkL;
       c7TkM: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.Bucket_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TkL: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           I64[Hp] = R2;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.988331789 UTC

[section ""data" . GHC.Event.IntTable.IT_closure" {
     GHC.Event.IntTable.IT_closure:
         const GHC.Event.IntTable.IT_info;
 },
 GHC.Event.IntTable.IT_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TkS,
                       label: GHC.Event.IntTable.IT_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TkS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TkW; else goto c7TkV;
       c7TkW: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.IT_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TkV: // global
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           I64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.98969579 UTC

[GHC.Event.IntTable.Empty_con_entry() //  [R1]
         { info_tbl: [(c7TkX,
                       label: GHC.Event.IntTable.Empty_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,69,109,112,116,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TkX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.990405209 UTC

[GHC.Event.IntTable.Bucket_con_entry() //  [R1]
         { info_tbl: [(c7TkY,
                       label: GHC.Event.IntTable.Bucket_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,66,117,99,107,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TkY: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.99116129 UTC

[GHC.Event.IntTable.IT_con_entry() //  [R1]
         { info_tbl: [(c7TkZ,
                       label: GHC.Event.IntTable.IT_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,73,84]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TkZ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.991848268 UTC

[section ""relreadonly" . S7T63_srt" {
     S7T63_srt:
         const Control.Exception.Base.recSelError_closure;
         const GHC.Event.IntTable.bucketNext_closure;
         const GHC.Event.IntTable.bucketNext1_closure;
         const GHC.Event.IntTable.bucketValue_closure;
         const GHC.Event.IntTable.bucketValue1_closure;
         const GHC.Event.IntTable.bucketKey_closure;
         const GHC.Event.IntTable.bucketKey1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.992467657 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:02:59.993415836 UTC

[section ""data" . GHC.Event.IntTable.$WBucket_closure" {
     GHC.Event.IntTable.$WBucket_closure:
         const GHC.Event.IntTable.$WBucket_info;
 },
 GHC.Event.IntTable.$WBucket_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Tl7,
                       label: GHC.Event.IntTable.$WBucket_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tl7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Tlb; else goto c7Tlc;
       c7Tlb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$WBucket_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Tlc: // global
           I64[Sp - 24] = block_c7Tl4_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Tlg; else goto c7Tl5;
       u7Tlg: // global
           call _c7Tl4(R1) args: 0, res: 0, upd: 0;
       c7Tl5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tl4() //  [R1]
         { info_tbl: [(c7Tl4,
                       label: block_c7Tl4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tl4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Tlf; else goto c7Tle;
       c7Tlf: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tle: // global
           _s7SZt::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s7SZt::I64;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.995002995 UTC

[section ""data" . GHC.Event.IntTable.$WIT_closure" {
     GHC.Event.IntTable.$WIT_closure:
         const GHC.Event.IntTable.$WIT_info;
 },
 GHC.Event.IntTable.$WIT_entry() //  [R2, R3]
         { info_tbl: [(c7Tlo,
                       label: GHC.Event.IntTable.$WIT_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tlo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Tlx; else goto c7Tly;
       c7Tlx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$WIT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Tly: // global
           I64[Sp - 16] = block_c7Tll_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TlE; else goto c7Tlm;
       u7TlE: // global
           call _c7Tll(R1) args: 0, res: 0, upd: 0;
       c7Tlm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tll() //  [R1]
         { info_tbl: [(c7Tll,
                       label: block_c7Tll_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tll: // global
           I64[Sp] = block_c7Tlr_info;
           _s7SZx::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7SZx::P64;
           if (R1 & 7 != 0) goto u7TlD; else goto c7Tls;
       u7TlD: // global
           call _c7Tlr(R1) args: 0, res: 0, upd: 0;
       c7Tls: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tlr() //  [R1]
         { info_tbl: [(c7Tlr,
                       label: block_c7Tlr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tlr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TlC; else goto c7TlB;
       c7TlC: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TlB: // global
           _s7SZA::P64 = P64[R1 + 7];
           _s7SZz::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s7SZA::P64;
           I64[Hp] = _s7SZz::I64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.996303284 UTC

[section ""cstring" . lvl_r7SZ3_bytes" {
     lvl_r7SZ3_bytes:
         I8[] [98,117,99,107,101,116,78,101,120,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.99709271 UTC

[section ""data" . GHC.Event.IntTable.bucketNext1_closure" {
     GHC.Event.IntTable.bucketNext1_closure:
         const GHC.Event.IntTable.bucketNext1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketNext1_entry() //  [R1]
         { info_tbl: [(c7TlL,
                       label: GHC.Event.IntTable.bucketNext1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TlL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TlM; else goto c7TlN;
       c7TlM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7TlN: // global
           (_c7TlI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7TlI::I64 == 0) goto c7TlK; else goto c7TlJ;
       c7TlK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7TlJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7TlI::I64;
           R2 = lvl_r7SZ3_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.998310533 UTC

[section ""data" . GHC.Event.IntTable.bucketNext_closure" {
     GHC.Event.IntTable.bucketNext_closure:
         const GHC.Event.IntTable.bucketNext_info;
         const 0;
 },
 GHC.Event.IntTable.bucketNext_entry() //  [R2]
         { info_tbl: [(c7TlZ,
                       label: GHC.Event.IntTable.bucketNext_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TlZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Tm0; else goto c7Tm1;
       c7Tm0: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketNext_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Tm1: // global
           I64[Sp - 8] = block_c7TlS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Tm8; else goto c7TlT;
       u7Tm8: // global
           call _c7TlS(R1) args: 0, res: 0, upd: 0;
       c7TlT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TlS() //  [R1]
         { info_tbl: [(c7TlS,
                       label: block_c7TlS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TlS: // global
           if (R1 & 7 == 1) goto c7TlW; else goto c7TlX;
       c7TlW: // global
           R1 = GHC.Event.IntTable.bucketNext1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7TlX: // global
           R1 = P64[R1 + 14] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:02:59.99937797 UTC

[section ""cstring" . lvl1_r7SZ4_bytes" {
     lvl1_r7SZ4_bytes:
         I8[] [98,117,99,107,101,116,86,97,108,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.000089693 UTC

[section ""data" . GHC.Event.IntTable.bucketValue1_closure" {
     GHC.Event.IntTable.bucketValue1_closure:
         const GHC.Event.IntTable.bucketValue1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketValue1_entry() //  [R1]
         { info_tbl: [(c7Tmf,
                       label: GHC.Event.IntTable.bucketValue1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tmf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Tmg; else goto c7Tmh;
       c7Tmg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Tmh: // global
           (_c7Tmc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Tmc::I64 == 0) goto c7Tme; else goto c7Tmd;
       c7Tme: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Tmd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Tmc::I64;
           R2 = lvl1_r7SZ4_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.001207448 UTC

[section ""data" . GHC.Event.IntTable.bucketValue_closure" {
     GHC.Event.IntTable.bucketValue_closure:
         const GHC.Event.IntTable.bucketValue_info;
         const 0;
 },
 GHC.Event.IntTable.bucketValue_entry() //  [R2]
         { info_tbl: [(c7Tmt,
                       label: GHC.Event.IntTable.bucketValue_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tmt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Tmu; else goto c7Tmv;
       c7Tmu: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketValue_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Tmv: // global
           I64[Sp - 8] = block_c7Tmm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TmC; else goto c7Tmn;
       u7TmC: // global
           call _c7Tmm(R1) args: 0, res: 0, upd: 0;
       c7Tmn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tmm() //  [R1]
         { info_tbl: [(c7Tmm,
                       label: block_c7Tmm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tmm: // global
           if (R1 & 7 == 1) goto c7Tmq; else goto c7Tmr;
       c7Tmq: // global
           R1 = GHC.Event.IntTable.bucketValue1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7Tmr: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.002295256 UTC

[section ""cstring" . lvl2_r7SZ5_bytes" {
     lvl2_r7SZ5_bytes:
         I8[] [98,117,99,107,101,116,75,101,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.002974994 UTC

[section ""data" . GHC.Event.IntTable.bucketKey1_closure" {
     GHC.Event.IntTable.bucketKey1_closure:
         const GHC.Event.IntTable.bucketKey1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketKey1_entry() //  [R1]
         { info_tbl: [(c7TmJ,
                       label: GHC.Event.IntTable.bucketKey1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TmJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TmK; else goto c7TmL;
       c7TmK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7TmL: // global
           (_c7TmG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7TmG::I64 == 0) goto c7TmI; else goto c7TmH;
       c7TmI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7TmH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7TmG::I64;
           R2 = lvl2_r7SZ5_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.004202624 UTC

[section ""data" . GHC.Event.IntTable.bucketKey_closure" {
     GHC.Event.IntTable.bucketKey_closure:
         const GHC.Event.IntTable.bucketKey_info;
         const 0;
 },
 GHC.Event.IntTable.bucketKey_entry() //  [R2]
         { info_tbl: [(c7TmX,
                       label: GHC.Event.IntTable.bucketKey_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TmX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7TmY; else goto c7TmZ;
       c7TmY: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketKey_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TmZ: // global
           I64[Sp - 8] = block_c7TmQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Tn9; else goto c7TmR;
       u7Tn9: // global
           call _c7TmQ(R1) args: 0, res: 0, upd: 0;
       c7TmR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TmQ() //  [R1]
         { info_tbl: [(c7TmQ,
                       label: block_c7TmQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TmQ: // global
           if (R1 & 7 == 1) goto c7TmU; else goto c7TmV;
       c7TmU: // global
           R1 = GHC.Event.IntTable.bucketKey1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7TmV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Tn8; else goto c7Tn7;
       c7Tn8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tn7: // global
           _s7SZN::I64 = I64[R1 + 22];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7SZN::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.005676903 UTC

[section ""data" . GHC.Event.IntTable.tabSize_closure" {
     GHC.Event.IntTable.tabSize_closure:
         const GHC.Event.IntTable.tabSize_info;
 },
 GHC.Event.IntTable.tabSize_entry() //  [R2]
         { info_tbl: [(c7Tnh,
                       label: GHC.Event.IntTable.tabSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tnh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Tnl; else goto c7Tnm;
       c7Tnl: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.tabSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Tnm: // global
           I64[Sp - 8] = block_c7Tne_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Tnq; else goto c7Tnf;
       u7Tnq: // global
           call _c7Tne(R1) args: 0, res: 0, upd: 0;
       c7Tnf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tne() //  [R1]
         { info_tbl: [(c7Tne,
                       label: block_c7Tne_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tne: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Tnp; else goto c7Tno;
       c7Tnp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tno: // global
           _s7SZU::P64 = P64[R1 + 15];
           _s7SZT::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = _s7SZU::P64;
           I64[Hp] = _s7SZT::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.007038022 UTC

[section ""data" . GHC.Event.IntTable.tabArr_closure" {
     GHC.Event.IntTable.tabArr_closure:
         const GHC.Event.IntTable.tabArr_info;
 },
 GHC.Event.IntTable.tabArr_entry() //  [R2]
         { info_tbl: [(c7Tny,
                       label: GHC.Event.IntTable.tabArr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tny: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7TnC; else goto c7TnD;
       c7TnC: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.tabArr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TnD: // global
           I64[Sp - 8] = block_c7Tnv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TnH; else goto c7Tnw;
       u7TnH: // global
           call _c7Tnv(R1) args: 0, res: 0, upd: 0;
       c7Tnw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tnv() //  [R1]
         { info_tbl: [(c7Tnv,
                       label: block_c7Tnv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tnv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TnG; else goto c7TnF;
       c7TnG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TnF: // global
           _s7SZX::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = _s7SZX::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.008655379 UTC

[section ""data" . GHC.Event.IntTable.$wnew_closure" {
     GHC.Event.IntTable.$wnew_closure:
         const GHC.Event.IntTable.$wnew_info;
 },
 GHC.Event.IntTable.$wnew_entry() //  [R2]
         { info_tbl: [(c7TnU,
                       label: GHC.Event.IntTable.$wnew_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TnU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7To2; else goto c7To3;
       c7To2: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.$wnew_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7To3: // global
           I64[Sp - 8] = block_c7TnM_info;
           _s7T00::I64 = R2;
           R2 = GHC.Event.IntTable.Empty_closure+1;
           R1 = _s7T00::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TnM() //  [R1]
         { info_tbl: [(c7TnM,
                       label: block_c7TnM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TnM: // global
           I64[Sp - 8] = block_c7TnO_info;
           _s7T04::P64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp] = _s7T04::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TnO() //  [R1]
         { info_tbl: [(c7TnO,
                       label: block_c7TnO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TnO: // global
           I64[Sp - 8] = block_c7TnQ_info;
           R2 = 8;
           _s7T07::P64 = R1;
           R1 = 8;
           P64[Sp] = _s7T07::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TnQ() //  [R1]
         { info_tbl: [(c7TnQ,
                       label: block_c7TnQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TnQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7To8; else goto c7To7;
       c7To8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7To7: // global
           _s7T04::P64 = P64[Sp + 16];
           _s7T07::P64 = P64[Sp + 8];
           _s7T0b::I64 = R1 + 16;
           I64[_s7T0b::I64] = 0;
           I64[Hp - 48] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = _s7T07::P64;
           _c7TnW::P64 = Hp - 46;
           call MO_Touch(_c7TnW::P64);
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = _s7T04::P64;
           P64[Hp - 8] = _c7TnW::P64;
           I64[Hp] = _s7T0b::I64;
           I64[Sp + 16] = block_c7TnZ_info;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TnZ() //  [R1]
         { info_tbl: [(c7TnZ,
                       label: block_c7TnZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TnZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Tob; else goto c7Toa;
       c7Tob: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Toa: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.010634057 UTC

[section ""data" . GHC.Event.IntTable.new1_closure" {
     GHC.Event.IntTable.new1_closure:
         const GHC.Event.IntTable.new1_info;
 },
 GHC.Event.IntTable.new1_entry() //  [R2]
         { info_tbl: [(c7Toj,
                       label: GHC.Event.IntTable.new1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Toj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Tok; else goto c7Tol;
       c7Tok: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.new1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Tol: // global
           I64[Sp - 8] = block_c7Tog_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Top; else goto c7Toh;
       u7Top: // global
           call _c7Tog(R1) args: 0, res: 0, upd: 0;
       c7Toh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tog() //  [R1]
         { info_tbl: [(c7Tog,
                       label: block_c7Tog_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tog: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.IntTable.$wnew_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.011740647 UTC

[section ""data" . GHC.Event.IntTable.new_closure" {
     GHC.Event.IntTable.new_closure:
         const GHC.Event.IntTable.new_info;
 },
 GHC.Event.IntTable.new_entry() //  [R2]
         { info_tbl: [(c7Tou,
                       label: GHC.Event.IntTable.new_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tou: // global
           R2 = R2;
           call GHC.Event.IntTable.new1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.014241208 UTC

[section ""data" . GHC.Event.IntTable.$wupdateWith_closure" {
     GHC.Event.IntTable.$wupdateWith_closure:
         const GHC.Event.IntTable.$wupdateWith_info;
 },
 $wgo_s7T0F_entry() //  [R1, R2]
         { info_tbl: [(c7Tp1,
                       label: $wgo_s7T0F_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tp1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Tp2; else goto c7Tp3;
       c7Tp2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Tp3: // global
           I64[Sp - 32] = block_c7ToU_info;
           _s7T0F::P64 = R1;
           _s7T0o::P64 = P64[R1 + 7];
           _s7T0p::I64 = I64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s7T0o::P64;
           I64[Sp - 16] = _s7T0p::I64;
           P64[Sp - 8] = _s7T0F::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7TpG; else goto c7ToV;
       u7TpG: // global
           call _c7ToU(R1) args: 0, res: 0, upd: 0;
       c7ToV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ToU() //  [R1]
         { info_tbl: [(c7ToU,
                       label: block_c7ToU_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ToU: // global
           if (R1 & 7 == 1) goto c7ToY; else goto c7ToZ;
       c7ToY: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ToZ: // global
           _s7T0J::P64 = P64[R1 + 6];
           _s7T0K::P64 = P64[R1 + 14];
           _s7T0I::I64 = I64[R1 + 22];
           if (_s7T0I::I64 == I64[Sp + 16]) goto c7Tpn; else goto c7Tph;
       c7Tpn: // global
           I64[Sp] = block_c7Tpm_info;
           R2 = _s7T0J::P64;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7T0K::P64;
           P64[Sp + 16] = _s7T0J::P64;
           I64[Sp + 24] = _s7T0I::I64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c7Tph: // global
           I64[Sp + 8] = block_c7Tpd_info;
           R2 = _s7T0K::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s7T0J::P64;
           I64[Sp + 24] = _s7T0I::I64;
           Sp = Sp + 8;
           call $wgo_s7T0F_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tpm() //  [R1]
         { info_tbl: [(c7Tpm,
                       label: block_c7Tpm_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tpm: // global
           _s7T0J::P64 = P64[Sp + 16];
           _s7T0K::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7Tpt; else goto c7TpB;
       c7Tpt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Tpw; else goto c7Tpv;
       c7Tpw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tpv: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T0J::P64;
           R3 = _s7T0K::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TpB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7TpE; else goto c7TpD;
       c7TpE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TpD: // global
           _s7T0T::P64 = P64[R1 + 6];
           I64[Hp - 40] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 32] = _s7T0T::P64;
           P64[Hp - 24] = _s7T0K::P64;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T0J::P64;
           R3 = Hp - 38;
           R2 = Hp - 6;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Tpd() //  [R1, R2, R3]
         { info_tbl: [(c7Tpd,
                       label: block_c7Tpd_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tpd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Tpk; else goto c7Tpj;
       c7Tpk: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       c7Tpj: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$wupdateWith_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TpH,
                       label: GHC.Event.IntTable.$wupdateWith_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TpH: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7TpI; else goto c7TpJ;
       c7TpI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wupdateWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TpJ: // global
           I64[Sp - 24] = block_c7ToB_info;
           R1 = P64[R4 + 8];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Tqk; else goto c7ToC;
       u7Tqk: // global
           call _c7ToB(R1) args: 0, res: 0, upd: 0;
       c7ToC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7ToB() //  [R1]
         { info_tbl: [(c7ToB,
                       label: block_c7ToB_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7ToB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7TpM; else goto c7TpL;
       c7TpM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TpL: // global
           _s7T0p::I64 = I64[Sp + 16];
           _s7T0w::P64 = P64[R1 + 7];
           _s7T0y::P64 = P64[R1 + 15];
           _s7T0x::I64 = I64[R1 + 23];
           _s7T0z::I64 = _s7T0p::I64 & (I64[_s7T0w::P64 + 8] - 1);
           _s7T0E::P64 = P64[(_s7T0w::P64 + 24) + (_s7T0z::I64 << 3)];
           I64[Hp - 16] = $wgo_s7T0F_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s7T0p::I64;
           I64[Sp - 16] = block_c7TpN_info;
           R2 = _s7T0E::P64;
           R1 = Hp - 15;
           I64[Sp - 8] = _s7T0z::I64;
           P64[Sp] = _s7T0y::P64;
           I64[Sp + 8] = _s7T0x::I64;
           P64[Sp + 16] = _s7T0w::P64;
           Sp = Sp - 16;
           call $wgo_s7T0F_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TpN() //  [R1, R2, R3]
         { info_tbl: [(c7TpN,
                       label: block_c7TpN_info
                       rep:StackRep [True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TpN: // global
           I64[Sp - 16] = block_c7TpP_info;
           _s7T0X::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _s7T0X::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Tql; else goto c7TpR;
       u7Tql: // global
           call _c7TpP(R1) args: 0, res: 0, upd: 0;
       c7TpR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TpP() //  [R1]
         { info_tbl: [(c7TpP,
                       label: block_c7TpP_info
                       rep:StackRep [False, False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TpP: // global
           if (R1 & 7 == 1) goto c7TpX; else goto c7Tq2;
       c7TpX: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Tq2: // global
           _s7T0w::P64 = P64[Sp + 48];
           _s7T0z::I64 = I64[Sp + 24];
           _s7T0X::P64 = P64[Sp + 16];
           _s7T0Z::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s7T0w::P64 + 24) + (_s7T0z::I64 << 3)] = _s7T0Z::P64;
           I64[_s7T0w::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T0w::P64 + 24) + ((I64[_s7T0w::P64 + 8] << 3) + (_s7T0z::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_c7Tq0_info;
           _s7T10::P64 = R1;
           R1 = _s7T0X::P64;
           P64[Sp + 48] = _s7T10::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u7Tqm; else goto c7Tq3;
       u7Tqm: // global
           call _c7Tq0(R1) args: 0, res: 0, upd: 0;
       c7Tq3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tq0() //  [R1]
         { info_tbl: [(c7Tq0,
                       label: block_c7Tq0_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tq0: // global
           _s7T10::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c7Tq9; else goto c7Tqd;
       c7Tq9: // global
           R1 = _s7T10::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Tqd: // global
           _s7T0x::I64 = I64[Sp + 16];
           _s7T0y::P64 = P64[Sp + 8];
           I64[_s7T0x::I64] = I64[_s7T0x::I64] - 1;
           call MO_Touch(_s7T0y::P64);
           R1 = _s7T10::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.020413614 UTC

[section ""data" . GHC.Event.IntTable.delete3_closure" {
     GHC.Event.IntTable.delete3_closure:
         const GHC.Event.IntTable.delete3_info;
 },
 GHC.Event.IntTable.delete3_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Tqu,
                       label: GHC.Event.IntTable.delete3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tqu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Tqy; else goto c7Tqz;
       c7Tqy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.delete3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Tqz: // global
           I64[Sp - 24] = block_c7Tqr_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TqH; else goto c7Tqs;
       u7TqH: // global
           call _c7Tqr(R1) args: 0, res: 0, upd: 0;
       c7Tqs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tqr() //  [R1]
         { info_tbl: [(c7Tqr,
                       label: block_c7Tqr_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tqr: // global
           I64[Sp] = block_c7Tqx_info;
           _s7T1f::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7T1f::I64;
           if (R1 & 7 != 0) goto u7TqG; else goto c7TqB;
       u7TqG: // global
           call _c7Tqx(R1) args: 0, res: 0, upd: 0;
       c7TqB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tqx() //  [R1]
         { info_tbl: [(c7Tqx,
                       label: block_c7Tqx_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tqx: // global
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.IntTable.$wupdateWith_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.022488767 UTC

[section ""data" . GHC.Event.IntTable.updateWith_closure" {
     GHC.Event.IntTable.updateWith_closure:
         const GHC.Event.IntTable.updateWith_info;
 },
 GHC.Event.IntTable.updateWith_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TqM,
                       label: GHC.Event.IntTable.updateWith_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TqM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.delete3_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.023364423 UTC

[section ""data" . GHC.Event.IntTable.delete2_closure" {
     GHC.Event.IntTable.delete2_closure:
         const GHC.Event.IntTable.delete2_info;
 },
 GHC.Event.IntTable.delete2_entry() //  []
         { info_tbl: [(c7TqT,
                       label: GHC.Event.IntTable.delete2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TqT: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.024434526 UTC

[section ""data" . GHC.Event.IntTable.delete1_closure" {
     GHC.Event.IntTable.delete1_closure:
         const GHC.Event.IntTable.delete1_info;
 },
 GHC.Event.IntTable.delete1_entry() //  [R2, R3]
         { info_tbl: [(c7Tr3,
                       label: GHC.Event.IntTable.delete1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tr3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Tr7; else goto c7Tr8;
       c7Tr7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.delete1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Tr8: // global
           I64[Sp - 16] = block_c7Tr0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Trg; else goto c7Tr1;
       u7Trg: // global
           call _c7Tr0(R1) args: 0, res: 0, upd: 0;
       c7Tr1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tr0() //  [R1]
         { info_tbl: [(c7Tr0,
                       label: block_c7Tr0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tr0: // global
           I64[Sp] = block_c7Tr6_info;
           _s7T1n::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7T1n::I64;
           if (R1 & 7 != 0) goto u7Trf; else goto c7Tra;
       u7Trf: // global
           call _c7Tr6(R1) args: 0, res: 0, upd: 0;
       c7Tra: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tr6() //  [R1]
         { info_tbl: [(c7Tr6,
                       label: block_c7Tr6_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tr6: // global
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 8];
           R2 = GHC.Event.IntTable.delete2_closure+1;
           Sp = Sp + 16;
           call GHC.Event.IntTable.$wupdateWith_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.025883744 UTC

[section ""data" . GHC.Event.IntTable.delete_closure" {
     GHC.Event.IntTable.delete_closure:
         const GHC.Event.IntTable.delete_info;
 },
 GHC.Event.IntTable.delete_entry() //  [R2, R3]
         { info_tbl: [(c7Trl,
                       label: GHC.Event.IntTable.delete_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Trl: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.delete1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.028106514 UTC

[section ""data" . GHC.Event.IntTable.$wgrow_closure" {
     GHC.Event.IntTable.$wgrow_closure:
         const GHC.Event.IntTable.$wgrow_info;
 },
 GHC.Event.IntTable.$wgrow_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Tru,
                       label: GHC.Event.IntTable.$wgrow_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 22} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tru: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c7Trv; else goto c7Trw;
       c7Trv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wgrow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Trw: // global
           I64[Sp - 32] = block_c7TrB_info;
           _s7T1q::P64 = R2;
           _s7T1v::I64 = I64[R2 + 8] << 1;
           R2 = GHC.Event.IntTable.Empty_closure+1;
           R1 = _s7T1v::I64;
           P64[Sp - 24] = _s7T1q::P64;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TrB() //  [R1]
         { info_tbl: [(c7TrB,
                       label: block_c7TrB_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TrB: // global
           I64[Sp - 8] = block_c7TrD_info;
           _s7T1y::P64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp] = _s7T1y::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TrD() //  [R1]
         { info_tbl: [(c7TrD,
                       label: block_c7TrD_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TrD: // global
           I64[Sp - 8] = block_c7TrF_info;
           R2 = 8;
           _s7T1B::P64 = R1;
           R1 = 8;
           P64[Sp] = _s7T1B::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TrF() //  [R1]
         { info_tbl: [(c7TrF,
                       label: block_c7TrF_info
                       rep:StackRep [False, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TrF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7TrL; else goto c7TrK;
       c7TrL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TrK: // global
           _s7T1B::P64 = P64[Sp + 8];
           _s7T1F::I64 = R1 + 16;
           I64[_s7T1F::I64] = 0;
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = _s7T1B::P64;
           _c7TrP::P64 = Hp - 14;
           call MO_Touch(_c7TrP::P64);
           I64[Sp - 16] = 0;
           I64[Sp - 8] = 0;
           I64[Sp] = _s7T1F::I64;
           P64[Sp + 8] = _c7TrP::P64;
           Sp = Sp - 16;
           call _c7Ts1() args: 0, res: 0, upd: 0;
     }
 },
 _c7Ts1() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ts1: // global
           _s7T1Q::I64 = I64[Sp];
           if (_s7T1Q::I64 == I64[Sp + 56]) goto u7TsU; else goto c7Tsz;
       u7TsU: // global
           Sp = Sp + 8;
           call _c7TrU() args: 0, res: 0, upd: 0;
       c7Tsz: // global
           P64[Sp - 8] = P64[P64[Sp + 40] + ((I64[Sp + 8] << 3) + 24)];
           I64[Sp] = _s7T1Q::I64;
           Sp = Sp - 8;
           call _c7Tsg() args: 0, res: 0, upd: 0;
     }
 },
 _c7TrU() //  []
         { info_tbl: [(c7TrU,
                       label: block_c7TrU_info
                       rep:StackRep [True, False, False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TrU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TrY; else goto c7TrX;
       c7TrY: // global
           HpAlloc = 32;
           I64[Sp] = block_c7TrU_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7TrX: // global
           _c7TrP::P64 = P64[Sp + 16];
           _s7T1r::P64 = P64[Sp + 40];
           _s7T1y::P64 = P64[Sp + 24];
           _s7T1F::I64 = I64[Sp + 8];
           I64[_s7T1F::I64] = I64[Sp + 48];
           call MO_Touch(_c7TrP::P64);
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = _s7T1y::P64;
           P64[Hp - 8] = _c7TrP::P64;
           I64[Hp] = _s7T1F::I64;
           call MO_WriteBarrier();
           P64[_s7T1r::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7T1r::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Tsg() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tsg: // global
           _s7T23::P64 = P64[Sp];
           I64[Sp] = block_c7Tsj_info;
           R1 = _s7T23::P64;
           if (R1 & 7 != 0) goto u7Tt1; else goto c7Tsl;
       u7Tt1: // global
           call _c7Tsj(R1) args: 0, res: 0, upd: 0;
       c7Tsl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tsj() //  [R1]
         { info_tbl: [(c7Tsj,
                       label: block_c7Tsj_info
                       rep:StackRep [True, True, True, False, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tsj: // global
           _s7T22::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c7Tsr; else goto c7Tss;
       c7Tsr: // global
           I64[Sp + 8] = _s7T22::I64;
           I64[Sp + 16] = I64[Sp + 16] + 1;
           Sp = Sp + 8;
           call _c7Ts1() args: 0, res: 0, upd: 0;
       c7Tss: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Tsx; else goto c7Tsw;
       c7Tsx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tsw: // global
           _s7T1y::P64 = P64[Sp + 40];
           _s7T27::P64 = P64[R1 + 6];
           _s7T28::P64 = P64[R1 + 14];
           _s7T26::I64 = I64[R1 + 22];
           _s7T29::I64 = _s7T26::I64 & (I64[_s7T1y::P64 + 8] - 1);
           _s7T2e::P64 = P64[(_s7T1y::P64 + 24) + (_s7T29::I64 << 3)];
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7T27::P64;
           P64[Hp - 8] = _s7T2e::P64;
           I64[Hp] = _s7T26::I64;
           call MO_WriteBarrier();
           P64[(_s7T1y::P64 + 24) + (_s7T29::I64 << 3)] = Hp - 22;
           I64[_s7T1y::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T1y::P64 + 24) + ((I64[_s7T1y::P64 + 8] << 3) + (_s7T29::I64 >> 7))] = 1 :: W8;
           I64[Sp + 8] = _s7T22::I64 + 1;
           P64[Sp] = _s7T28::P64;
           call _c7Tsg() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.031655538 UTC

[section ""data" . poly_<>_r7SZ6_closure" {
     poly_<>_r7SZ6_closure:
         const poly_<>_r7SZ6_info;
 },
 sat_s7T2o_entry() //  [R1]
         { info_tbl: [(c7Tti,
                       label: sat_s7T2o_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tti: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Ttj; else goto c7Ttk;
       c7Ttj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Ttk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_<>_r7SZ6_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_<>_r7SZ6_entry() //  [R2, R3]
         { info_tbl: [(c7Ttp,
                       label: poly_<>_r7SZ6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ttp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Ttq; else goto c7Ttr;
       c7Ttq: // global
           R3 = R3;
           R2 = R2;
           R1 = poly_<>_r7SZ6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ttr: // global
           I64[Sp - 16] = block_c7Tt8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Tty; else goto c7Tt9;
       u7Tty: // global
           call _c7Tt8(R1) args: 0, res: 0, upd: 0;
       c7Tt9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tt8() //  [R1]
         { info_tbl: [(c7Tt8,
                       label: block_c7Tt8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tt8: // global
           _s7T2j::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7Ttm; else goto c7Ttn;
       c7Ttm: // global
           R1 = _s7T2j::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7Ttn: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7Ttx; else goto c7Ttw;
       c7Ttx: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ttw: // global
           _s7T2m::P64 = P64[R1 + 6];
           _s7T2n::P64 = P64[R1 + 14];
           _s7T2l::I64 = I64[R1 + 22];
           I64[Hp - 56] = sat_s7T2o_info;
           P64[Hp - 40] = _s7T2j::P64;
           P64[Hp - 32] = _s7T2n::P64;
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7T2m::P64;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = _s7T2l::I64;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.035616389 UTC

[section ""data" . GHC.Event.IntTable.$winsertWith_closure" {
     GHC.Event.IntTable.$winsertWith_closure:
         const GHC.Event.IntTable.$winsertWith_info;
 },
 GHC.Event.IntTable.$winsertWith_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TtA: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$winsertWith_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7TtG,
                       label: GHC.Event.IntTable.$winsertWith_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TtG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TtK; else goto c7TtJ;
       c7TtK: // global
           HpAlloc = 32;
           R1 = GHC.Event.IntTable.$winsertWith_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7TtJ: // global
           I64[Hp - 24] = GHC.STRef.STRef_con_info;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R3;
           R5 = Hp - 23;
           R4 = R4;
           R3 = Hp - 7;
           R2 = R2;
           call insertWith1_r7SZ8_entry(R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . $winsertWith1_r7SZ7_closure" {
     $winsertWith1_r7SZ7_closure:
         const $winsertWith1_r7SZ7_info;
 },
 $winsertWith1_r7SZ7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TtM: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $winsertWith1_r7SZ7_entry(R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 $winsertWith1_r7SZ7_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7Tun,
                       label: $winsertWith1_r7SZ7_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tun: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c7Tuo; else goto c7Tup;
       c7Tuo: // global
           R1 = $winsertWith1_r7SZ7_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7Tup: // global
           I64[Sp - 40] = block_c7TtQ_info;
           R1 = P64[R5 + 8];
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7TvG; else goto c7TtR;
       u7TvG: // global
           call _c7TtQ(R1) args: 0, res: 0, upd: 0;
       c7TtR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TtQ() //  [R1]
         { info_tbl: [(c7TtQ,
                       label: block_c7TtQ_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TtQ: // global
           _s7T2F::P64 = P64[R1 + 7];
           _s7T2I::I64 = I64[Sp + 16] & (I64[_s7T2F::P64 + 8] - 1);
           _s7T3p::P64 = P64[(_s7T2F::P64 + 24) + (_s7T2I::I64 << 3)];
           I64[Sp - 40] = I64[R1 + 23];
           P64[Sp - 32] = P64[R1 + 15];
           I64[Sp - 24] = _s7T2I::I64;
           P64[Sp - 16] = GHC.Event.IntTable.Empty_closure+1;
           P64[Sp - 8] = _s7T3p::P64;
           P64[Sp] = _s7T2F::P64;
           Sp = Sp - 40;
           call _c7Tub() args: 0, res: 0, upd: 0;
     }
 },
 _c7Tub() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tub: // global
           I64[Sp - 8] = block_c7Tud_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TvE; else goto c7Tue;
       u7TvE: // global
           call _c7Tud(R1) args: 0, res: 0, upd: 0;
       c7Tue: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tud() //  [R1]
         { info_tbl: [(c7Tud,
                       label: block_c7Tud_info
                       rep:StackRep [True, False, True, False, True, False, False, True,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tud: // global
           _s7T3o::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c7Tvm; else goto c7Tvn;
       c7Tvm: // global
           _s7T2F::P64 = P64[Sp + 48];
           _s7T2T::I64 = I64[I64[Sp + 8]];
           if (%MO_S_Lt_W64(_s7T2T::I64 + 1,
                            I64[_s7T2F::P64 + 8] - %MO_S_Shr_W64(I64[_s7T2F::P64 + 8],
                                                                 2))) goto c7TuP; else goto c7TuY;
       c7TuP: // global
           I64[Sp] = block_c7TuN_info;
           R1 = P64[Sp + 72];
           I64[Sp + 72] = _s7T2T::I64;
           P64[Sp + 80] = _s7T3o::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c7TuY: // global
           I64[Sp + 8] = block_c7TuV_info;
           R4 = _s7T2T::I64;
           R3 = P64[Sp + 80];
           R2 = _s7T2F::P64;
           Sp = Sp + 8;
           call GHC.Event.IntTable.$wgrow_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
       c7Tvn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Tvq; else goto c7Tvp;
       c7Tvq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tvp: // global
           _s7T3t::P64 = P64[R1 + 6];
           _s7T3u::P64 = P64[R1 + 14];
           _s7T3s::I64 = I64[R1 + 22];
           if (_s7T3s::I64 == I64[Sp + 64]) goto c7Tvt; else goto c7Tvs;
       c7Tvt: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_c7Tv5_info;
           R3 = _s7T3u::P64;
           R2 = _s7T3o::P64;
           P64[Sp + 80] = _s7T3t::P64;
           Sp = Sp + 16;
           call poly_<>_r7SZ6_entry(R3, R2) args: 8, res: 8, upd: 8;
       c7Tvs: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7T3t::P64;
           P64[Hp - 8] = _s7T3o::P64;
           I64[Hp] = _s7T3s::I64;
           P64[Sp + 32] = Hp - 22;
           P64[Sp + 40] = _s7T3u::P64;
           Sp = Sp + 8;
           call _c7Tub() args: 0, res: 0, upd: 0;
     }
 },
 _c7TuN() //  [R1]
         { info_tbl: [(c7TuN,
                       label: block_c7TuN_info
                       rep:StackRep [True, False, True, True, True, False, True, True,
                                     True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TuN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TuT; else goto c7TuS;
       c7TuT: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TuS: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 80];
           I64[Hp] = I64[Sp + 64];
           _s7T2F::P64 = P64[Sp + 48];
           _s7T2G::I64 = I64[Sp + 8];
           _s7T2H::P64 = P64[Sp + 16];
           _s7T2I::I64 = I64[Sp + 24];
           _s7T2T::I64 = I64[Sp + 72];
           call MO_WriteBarrier();
           P64[(_s7T2F::P64 + 24) + (_s7T2I::I64 << 3)] = Hp - 22;
           I64[_s7T2F::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T2F::P64 + 24) + ((I64[_s7T2F::P64 + 8] << 3) + (_s7T2I::I64 >> 7))] = 1 :: W8;
           I64[_s7T2G::I64] = _s7T2T::I64 + 1;
           call MO_Touch(_s7T2H::P64);
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7TuV() //  []
         { info_tbl: [(c7TuV,
                       label: block_c7TuV_info
                       rep:StackRep [False, True, True, True, True, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TuV: // global
           I64[Sp] = block_c7TuX_info;
           R5 = P64[Sp + 72];
           R4 = P64[Sp + 64];
           R3 = I64[Sp + 56];
           R2 = P64[Sp + 48];
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7TuX() //  [R1]
         { info_tbl: [(c7TuX,
                       label: block_c7TuX_info
                       rep:StackRep [False, True, True, True, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TuX: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Tv5() //  [R1]
         { info_tbl: [(c7Tv5,
                       label: block_c7Tv5_info
                       rep:StackRep [True, True, True, False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tv5: // global
           I64[Sp] = block_c7Tv9_info;
           R3 = P64[Sp + 64];
           R2 = P64[Sp + 56];
           _s7T3i::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 56] = _s7T3i::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tv9() //  [R1]
         { info_tbl: [(c7Tv9,
                       label: block_c7Tv9_info
                       rep:StackRep [True, True, True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tv9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7Tvh; else goto c7Tvg;
       c7Tvh: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tvg: // global
           I64[Hp - 40] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = I64[Sp + 48];
           _s7T2F::P64 = P64[Sp + 32];
           _s7T2I::I64 = I64[Sp + 8];
           _s7T3g::P64 = P64[Sp + 64];
           call MO_WriteBarrier();
           P64[(_s7T2F::P64 + 24) + (_s7T2I::I64 << 3)] = Hp - 38;
           I64[_s7T2F::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T2F::P64 + 24) + ((I64[_s7T2F::P64 + 8] << 3) + (_s7T2I::I64 >> 7))] = 1 :: W8;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T3g::P64;
           R1 = Hp - 6;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . insertWith1_r7SZ8_closure" {
     insertWith1_r7SZ8_closure:
         const insertWith1_r7SZ8_info;
 },
 insertWith1_r7SZ8_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7TvO,
                       label: insertWith1_r7SZ8_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TvO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7TvS; else goto c7TvT;
       c7TvS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = insertWith1_r7SZ8_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TvT: // global
           I64[Sp - 32] = block_c7TvL_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7Tw1; else goto c7TvM;
       u7Tw1: // global
           call _c7TvL(R1) args: 0, res: 0, upd: 0;
       c7TvM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TvL() //  [R1]
         { info_tbl: [(c7TvL,
                       label: block_c7TvL_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TvL: // global
           I64[Sp] = block_c7TvR_info;
           _s7T3D::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7T3D::I64;
           if (R1 & 7 != 0) goto u7Tw0; else goto c7TvV;
       u7Tw0: // global
           call _c7TvR(R1) args: 0, res: 0, upd: 0;
       c7TvV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TvR() //  [R1]
         { info_tbl: [(c7TvR,
                       label: block_c7TvR_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TvR: // global
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call $winsertWith1_r7SZ7_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.041196222 UTC

[section ""data" . insertWith2_r7SZ9_closure" {
     insertWith2_r7SZ9_closure:
         const insertWith2_r7SZ9_info;
 },
 insertWith2_r7SZ9_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7Tw9,
                       label: insertWith2_r7SZ9_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tw9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Twd; else goto c7Twe;
       c7Twd: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = insertWith2_r7SZ9_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Twe: // global
           I64[Sp - 32] = block_c7Tw6_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7Twm; else goto c7Tw7;
       u7Twm: // global
           call _c7Tw6(R1) args: 0, res: 0, upd: 0;
       c7Tw7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tw6() //  [R1]
         { info_tbl: [(c7Tw6,
                       label: block_c7Tw6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tw6: // global
           I64[Sp] = block_c7Twc_info;
           _s7T3M::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7T3M::I64;
           if (R1 & 7 != 0) goto u7Twl; else goto c7Twg;
       u7Twl: // global
           call _c7Twc(R1) args: 0, res: 0, upd: 0;
       c7Twg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Twc() //  [R1]
         { info_tbl: [(c7Twc,
                       label: block_c7Twc_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Twc: // global
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.042690519 UTC

[section ""data" . GHC.Event.IntTable.insertWith_closure" {
     GHC.Event.IntTable.insertWith_closure:
         const GHC.Event.IntTable.insertWith_info;
 },
 GHC.Event.IntTable.insertWith_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7Twr,
                       label: GHC.Event.IntTable.insertWith_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Twr: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call insertWith2_r7SZ9_entry(R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.045271815 UTC

[section ""data" . GHC.Event.IntTable.$wreset_closure" {
     GHC.Event.IntTable.$wreset_closure:
         const GHC.Event.IntTable.$wreset_info;
 },
 $wgo_s7T47_entry() //  [R1, R2]
         { info_tbl: [(c7Tx3,
                       label: $wgo_s7T47_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tx3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Tx4; else goto c7Tx5;
       c7Tx4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Tx5: // global
           I64[Sp - 24] = block_c7TwW_info;
           _s7T47::P64 = R1;
           _s7T3P::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _s7T3P::I64;
           P64[Sp - 8] = _s7T47::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Txs; else goto c7TwX;
       u7Txs: // global
           call _c7TwW(R1) args: 0, res: 0, upd: 0;
       c7TwX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TwW() //  [R1]
         { info_tbl: [(c7TwW,
                       label: block_c7TwW_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TwW: // global
           if (R1 & 7 == 1) goto c7Tx0; else goto c7Tx1;
       c7Tx0: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Tx1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Txd; else goto c7Txc;
       c7Txd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Txc: // global
           _s7T4b::P64 = P64[R1 + 6];
           _s7T4c::P64 = P64[R1 + 14];
           _s7T4a::I64 = I64[R1 + 22];
           if (_s7T4a::I64 == I64[Sp + 8]) goto c7Txr; else goto c7Txl;
       c7Txr: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T4b::P64;
           R3 = _s7T4c::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Txl: // global
           Hp = Hp - 16;
           I64[Sp] = block_c7Txh_info;
           R2 = _s7T4c::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _s7T4b::P64;
           I64[Sp + 16] = _s7T4a::I64;
           call $wgo_s7T47_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Txh() //  [R1, R2, R3]
         { info_tbl: [(c7Txh,
                       label: block_c7Txh_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Txh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Txo; else goto c7Txn;
       c7Txo: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       c7Txn: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$wreset_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Txx,
                       label: GHC.Event.IntTable.$wreset_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Txx: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7Txy; else goto c7Txz;
       c7Txy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wreset_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Txz: // global
           I64[Sp - 24] = block_c7Twy_info;
           R1 = R3;
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Tyk; else goto c7Twz;
       u7Tyk: // global
           call _c7Twy(R1) args: 0, res: 0, upd: 0;
       c7Twz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Twy() //  [R1]
         { info_tbl: [(c7Twy,
                       label: block_c7Twy_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Twy: // global
           _s7T3R::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7Txu; else goto c7Txv;
       c7Txu: // global
           I64[Sp] = block_c7TwD_info;
           R1 = P64[_s7T3R::P64 + 8];
           if (R1 & 7 != 0) goto u7Tyj; else goto c7TwE;
       u7Tyj: // global
           call _c7TwD(R1) args: 0, res: 0, upd: 0;
       c7TwE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Txv: // global
           I64[Sp + 16] = block_c7Ty7_info;
           R5 = _s7T3R::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 16;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7TwD() //  [R1]
         { info_tbl: [(c7TwD,
                       label: block_c7TwD_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TwD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TxD; else goto c7TxC;
       c7TxD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TxC: // global
           _s7T3P::I64 = I64[Sp + 8];
           _s7T3Y::P64 = P64[R1 + 7];
           _s7T40::P64 = P64[R1 + 15];
           _s7T3Z::I64 = I64[R1 + 23];
           _s7T41::I64 = _s7T3P::I64 & (I64[_s7T3Y::P64 + 8] - 1);
           _s7T46::P64 = P64[(_s7T3Y::P64 + 24) + (_s7T41::I64 << 3)];
           I64[Hp - 8] = $wgo_s7T47_info;
           I64[Hp] = _s7T3P::I64;
           I64[Sp - 16] = block_c7TxE_info;
           R2 = _s7T46::P64;
           R1 = Hp - 7;
           I64[Sp - 8] = _s7T41::I64;
           P64[Sp] = _s7T40::P64;
           I64[Sp + 8] = _s7T3Z::I64;
           P64[Sp + 16] = _s7T3Y::P64;
           Sp = Sp - 16;
           call $wgo_s7T47_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TxE() //  [R1, R2, R3]
         { info_tbl: [(c7TxE,
                       label: block_c7TxE_info
                       rep:StackRep [True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TxE: // global
           I64[Sp - 16] = block_c7TxG_info;
           _s7T4l::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _s7T4l::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Tyl; else goto c7TxI;
       u7Tyl: // global
           call _c7TxG(R1) args: 0, res: 0, upd: 0;
       c7TxI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TxG() //  [R1]
         { info_tbl: [(c7TxG,
                       label: block_c7TxG_info
                       rep:StackRep [False, False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TxG: // global
           if (R1 & 7 == 1) goto u7Tyh; else goto c7TxT;
       u7Tyh: // global
           Sp = Sp + 56;
           call _c7Ty0() args: 0, res: 0, upd: 0;
       c7TxT: // global
           _s7T3Y::P64 = P64[Sp + 48];
           _s7T41::I64 = I64[Sp + 24];
           _s7T4l::P64 = P64[Sp + 16];
           _s7T4n::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s7T3Y::P64 + 24) + (_s7T41::I64 << 3)] = _s7T4n::P64;
           I64[_s7T3Y::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T3Y::P64 + 24) + ((I64[_s7T3Y::P64 + 8] << 3) + (_s7T41::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_c7TxR_info;
           R1 = _s7T4l::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u7Tym; else goto c7TxU;
       u7Tym: // global
           call _c7TxR(R1) args: 0, res: 0, upd: 0;
       c7TxU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TxR() //  [R1]
         { info_tbl: [(c7TxR,
                       label: block_c7TxR_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TxR: // global
           if (R1 & 7 == 1) goto u7Tyi; else goto c7Ty4;
       u7Tyi: // global
           Sp = Sp + 32;
           call _c7Ty0() args: 0, res: 0, upd: 0;
       c7Ty4: // global
           _s7T3Z::I64 = I64[Sp + 16];
           _s7T40::P64 = P64[Sp + 8];
           I64[_s7T3Z::I64] = I64[_s7T3Z::I64] - 1;
           call MO_Touch(_s7T40::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Ty0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ty0: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Ty7() //  []
         { info_tbl: [(c7Ty7,
                       label: block_c7Ty7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ty7: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.049572526 UTC

[section ""data" . GHC.Event.IntTable.reset1_closure" {
     GHC.Event.IntTable.reset1_closure:
         const GHC.Event.IntTable.reset1_info;
 },
 GHC.Event.IntTable.reset1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Tyw,
                       label: GHC.Event.IntTable.reset1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tyw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7TyA; else goto c7TyB;
       c7TyA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.reset1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TyB: // global
           I64[Sp - 24] = block_c7Tyt_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TyJ; else goto c7Tyu;
       u7TyJ: // global
           call _c7Tyt(R1) args: 0, res: 0, upd: 0;
       c7Tyu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tyt() //  [R1]
         { info_tbl: [(c7Tyt,
                       label: block_c7Tyt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tyt: // global
           I64[Sp] = block_c7Tyz_info;
           _s7T4H::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7T4H::I64;
           if (R1 & 7 != 0) goto u7TyI; else goto c7TyD;
       u7TyI: // global
           call _c7Tyz(R1) args: 0, res: 0, upd: 0;
       c7TyD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tyz() //  [R1]
         { info_tbl: [(c7Tyz,
                       label: block_c7Tyz_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tyz: // global
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.IntTable.$wreset_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.051011346 UTC

[section ""data" . GHC.Event.IntTable.reset_closure" {
     GHC.Event.IntTable.reset_closure:
         const GHC.Event.IntTable.reset_info;
 },
 GHC.Event.IntTable.reset_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TyO,
                       label: GHC.Event.IntTable.reset_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TyO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.reset1_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.05271134 UTC

[section ""data" . GHC.Event.IntTable.$wlookup_closure" {
     GHC.Event.IntTable.$wlookup_closure:
         const GHC.Event.IntTable.$wlookup_info;
 },
 go_s7T50_entry() //  [R1, R2]
         { info_tbl: [(c7Tzl,
                       label: go_s7T50_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tzl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Tzm; else goto u7TzE;
       c7Tzm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u7TzE: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c7Tzb() args: 0, res: 0, upd: 0;
     }
 },
 _c7Tzb() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tzb: // global
           _s7T4K::I64 = I64[P64[Sp] + 7];
           I64[Sp - 8] = block_c7Tze_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7T4K::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TzG; else goto c7Tzf;
       u7TzG: // global
           call _c7Tze(R1) args: 0, res: 0, upd: 0;
       c7Tzf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Tze() //  [R1]
         { info_tbl: [(c7Tze,
                       label: block_c7Tze_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Tze: // global
           if (R1 & 7 == 1) goto c7Tzi; else goto c7Tzj;
       c7Tzi: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Tzj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Tzv; else goto c7Tzu;
       c7Tzv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Tzu: // global
           if (I64[R1 + 22] == I64[Sp + 16]) goto c7TzD; else goto c7Tzz;
       c7TzD: // global
           _s7T54::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T54::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Tzz: // global
           _s7T55::P64 = P64[R1 + 14];
           Hp = Hp - 16;
           P64[Sp + 16] = _s7T55::P64;
           Sp = Sp + 8;
           call _c7Tzb() args: 0, res: 0, upd: 0;
     }
 },
 GHC.Event.IntTable.$wlookup_entry() //  [R2, R3]
         { info_tbl: [(c7TzJ,
                       label: GHC.Event.IntTable.$wlookup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TzJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TzL; else goto c7TzM;
       c7TzL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wlookup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TzM: // global
           I64[Sp - 16] = block_c7TyV_info;
           R1 = P64[R3 + 8];
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TzU; else goto c7TyW;
       u7TzU: // global
           call _c7TyV(R1) args: 0, res: 0, upd: 0;
       c7TyW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TyV() //  [R1]
         { info_tbl: [(c7TyV,
                       label: block_c7TyV_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TyV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TzP; else goto c7TzO;
       c7TzP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TzO: // global
           _s7T4K::I64 = I64[Sp + 8];
           _s7T4R::P64 = P64[R1 + 7];
           _s7T4Z::P64 = P64[(_s7T4R::P64 + 24) + (_s7T4K::I64 & (I64[_s7T4R::P64 + 8] - 1) << 3)];
           I64[Hp - 8] = go_s7T50_info;
           I64[Hp] = _s7T4K::I64;
           I64[Sp + 8] = block_c7TzK_info;
           R2 = _s7T4Z::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s7T50_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TzK() //  [R1]
         { info_tbl: [(c7TzK,
                       label: block_c7TzK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TzK: // global
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.055831087 UTC

[section ""data" . GHC.Event.IntTable.lookup1_closure" {
     GHC.Event.IntTable.lookup1_closure:
         const GHC.Event.IntTable.lookup1_info;
 },
 GHC.Event.IntTable.lookup1_entry() //  [R2, R3]
         { info_tbl: [(c7TA2,
                       label: GHC.Event.IntTable.lookup1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TA2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TA6; else goto c7TA7;
       c7TA6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.lookup1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TA7: // global
           I64[Sp - 16] = block_c7TzZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TAf; else goto c7TA0;
       u7TAf: // global
           call _c7TzZ(R1) args: 0, res: 0, upd: 0;
       c7TA0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TzZ() //  [R1]
         { info_tbl: [(c7TzZ,
                       label: block_c7TzZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TzZ: // global
           I64[Sp] = block_c7TA5_info;
           _s7T5c::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7T5c::I64;
           if (R1 & 7 != 0) goto u7TAe; else goto c7TA9;
       u7TAe: // global
           call _c7TA5(R1) args: 0, res: 0, upd: 0;
       c7TA9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TA5() //  [R1]
         { info_tbl: [(c7TA5,
                       label: block_c7TA5_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TA5: // global
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.IntTable.$wlookup_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.057535866 UTC

[section ""data" . GHC.Event.IntTable.lookup_closure" {
     GHC.Event.IntTable.lookup_closure:
         const GHC.Event.IntTable.lookup_info;
 },
 GHC.Event.IntTable.lookup_entry() //  [R2, R3]
         { info_tbl: [(c7TAk,
                       label: GHC.Event.IntTable.lookup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TAk: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.lookup1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.058278584 UTC

[section ""cstring" . GHC.Event.IntTable.$trModule4_bytes" {
     GHC.Event.IntTable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.058871889 UTC

[section ""data" . GHC.Event.IntTable.$trModule3_closure" {
     GHC.Event.IntTable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.059462569 UTC

[section ""cstring" . GHC.Event.IntTable.$trModule2_bytes" {
     GHC.Event.IntTable.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.060018008 UTC

[section ""data" . GHC.Event.IntTable.$trModule1_closure" {
     GHC.Event.IntTable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.060588057 UTC

[section ""data" . GHC.Event.IntTable.$trModule_closure" {
     GHC.Event.IntTable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.IntTable.$trModule3_closure+1;
         const GHC.Event.IntTable.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.061157497 UTC

[section ""data" . $krep_r7SZa_closure" {
     $krep_r7SZa_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.06181107 UTC

[section ""data" . $krep1_r7SZb_closure" {
     $krep1_r7SZb_closure:
         const :_con_info;
         const $krep_r7SZa_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.062397631 UTC

[section ""data" . $krep2_r7SZc_closure" {
     $krep2_r7SZc_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep1_r7SZb_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.062995861 UTC

[section ""data" . $krep3_r7SZd_closure" {
     $krep3_r7SZd_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.063585314 UTC

[section ""cstring" . GHC.Event.IntTable.$tcBucket2_bytes" {
     GHC.Event.IntTable.$tcBucket2_bytes:
         I8[] [66,117,99,107,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.064169375 UTC

[section ""data" . GHC.Event.IntTable.$tcBucket1_closure" {
     GHC.Event.IntTable.$tcBucket1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcBucket2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.064688227 UTC

[section ""data" . GHC.Event.IntTable.$tcBucket_closure" {
     GHC.Event.IntTable.$tcBucket_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcBucket1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17735724201551259799;
         const 1580619789810252778;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.065541169 UTC

[section ""data" . $krep4_r7SZe_closure" {
     $krep4_r7SZe_closure:
         const :_con_info;
         const $krep3_r7SZd_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.06618142 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty1_closure" {
     GHC.Event.IntTable.$tc'Empty1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcBucket_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.066770235 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'Empty3_bytes" {
     GHC.Event.IntTable.$tc'Empty3_bytes:
         I8[] [39,69,109,112,116,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.067326767 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty2_closure" {
     GHC.Event.IntTable.$tc'Empty2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'Empty3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.067922232 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty_closure" {
     GHC.Event.IntTable.$tc'Empty_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'Empty2_closure+1;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const 14716594083905147916;
         const 6006296133869125928;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.06857653 UTC

[section ""data" . $krep5_r7SZf_closure" {
     $krep5_r7SZf_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.069170439 UTC

[section ""data" . $krep6_r7SZg_closure" {
     $krep6_r7SZg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7SZd_closure+2;
         const $krep5_r7SZf_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.069826442 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket1_closure" {
     GHC.Event.IntTable.$tc'Bucket1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7SZa_closure+1;
         const $krep6_r7SZg_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.070432549 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'Bucket3_bytes" {
     GHC.Event.IntTable.$tc'Bucket3_bytes:
         I8[] [39,66,117,99,107,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.07103986 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket2_closure" {
     GHC.Event.IntTable.$tc'Bucket2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'Bucket3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.071641108 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket_closure" {
     GHC.Event.IntTable.$tc'Bucket_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'Bucket2_closure+1;
         const GHC.Event.IntTable.$tc'Bucket1_closure+4;
         const 13477734220520722226;
         const 15099239145624852322;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.072275709 UTC

[section ""data" . $krep7_r7SZh_closure" {
     $krep7_r7SZh_closure:
         const :_con_info;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.072888498 UTC

[section ""data" . $krep8_r7SZi_closure" {
     $krep8_r7SZi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Arr.$tcArr_closure;
         const $krep7_r7SZh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.073531941 UTC

[section ""cstring" . GHC.Event.IntTable.$tcIT2_bytes" {
     GHC.Event.IntTable.$tcIT2_bytes:
         I8[] [73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.074099693 UTC

[section ""data" . GHC.Event.IntTable.$tcIT1_closure" {
     GHC.Event.IntTable.$tcIT1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcIT2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.076753043 UTC

[section ""data" . GHC.Event.IntTable.$tcIT_closure" {
     GHC.Event.IntTable.$tcIT_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcIT1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 1485413372890074222;
         const 7871673693356487434;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.077429199 UTC

[section ""data" . $krep9_r7SZj_closure" {
     $krep9_r7SZj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcIT_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.078044225 UTC

[section ""data" . $krep10_r7SZk_closure" {
     $krep10_r7SZk_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r7SZc_closure+1;
         const $krep9_r7SZj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.078633415 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT1_closure" {
     GHC.Event.IntTable.$tc'IT1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7SZi_closure+1;
         const $krep10_r7SZk_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.079209526 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'IT3_bytes" {
     GHC.Event.IntTable.$tc'IT3_bytes:
         I8[] [39,73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.079773531 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT2_closure" {
     GHC.Event.IntTable.$tc'IT2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'IT3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.080378 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT_closure" {
     GHC.Event.IntTable.$tc'IT_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'IT2_closure+1;
         const GHC.Event.IntTable.$tc'IT1_closure+4;
         const 2061931487051656996;
         const 1303251193055522557;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.080952733 UTC

[section ""data" . $krep11_r7SZl_closure" {
     $krep11_r7SZl_closure:
         const :_con_info;
         const $krep9_r7SZj_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.08159325 UTC

[section ""data" . $krep12_r7SZm_closure" {
     $krep12_r7SZm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep11_r7SZl_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.082162192 UTC

[section ""cstring" . GHC.Event.IntTable.$tcIntTable2_bytes" {
     GHC.Event.IntTable.$tcIntTable2_bytes:
         I8[] [73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.082711806 UTC

[section ""data" . GHC.Event.IntTable.$tcIntTable1_closure" {
     GHC.Event.IntTable.$tcIntTable1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcIntTable2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.083305778 UTC

[section ""data" . GHC.Event.IntTable.$tcIntTable_closure" {
     GHC.Event.IntTable.$tcIntTable_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcIntTable1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 12646307913912198429;
         const 5258607314097228638;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.083889 UTC

[section ""data" . $krep13_r7SZn_closure" {
     $krep13_r7SZn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcIntTable_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.08443482 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable1_closure" {
     GHC.Event.IntTable.$tc'IntTable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7SZm_closure+1;
         const $krep13_r7SZn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.085019394 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'IntTable3_bytes" {
     GHC.Event.IntTable.$tc'IntTable3_bytes:
         I8[] [39,73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.08563419 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable2_closure" {
     GHC.Event.IntTable.$tc'IntTable2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'IntTable3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.086251671 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable_closure" {
     GHC.Event.IntTable.$tc'IntTable_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'IntTable2_closure+1;
         const GHC.Event.IntTable.$tc'IntTable1_closure+4;
         const 17952658267866828845;
         const 12036984593740445577;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.086884345 UTC

[section ""data" . GHC.Event.IntTable.Empty_closure" {
     GHC.Event.IntTable.Empty_closure:
         const GHC.Event.IntTable.Empty_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.087817488 UTC

[section ""data" . GHC.Event.IntTable.Bucket_closure" {
     GHC.Event.IntTable.Bucket_closure:
         const GHC.Event.IntTable.Bucket_info;
 },
 GHC.Event.IntTable.Bucket_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TAs,
                       label: GHC.Event.IntTable.Bucket_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TAs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TAw; else goto c7TAv;
       c7TAw: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.Bucket_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TAv: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           I64[Hp] = R2;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.088943904 UTC

[section ""data" . GHC.Event.IntTable.IT_closure" {
     GHC.Event.IntTable.IT_closure:
         const GHC.Event.IntTable.IT_info;
 },
 GHC.Event.IntTable.IT_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TAC,
                       label: GHC.Event.IntTable.IT_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TAC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TAG; else goto c7TAF;
       c7TAG: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.IT_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TAF: // global
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           I64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.089891317 UTC

[GHC.Event.IntTable.Empty_con_entry() //  [R1]
         { info_tbl: [(c7TAH,
                       label: GHC.Event.IntTable.Empty_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,69,109,112,116,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TAH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.090649927 UTC

[GHC.Event.IntTable.Bucket_con_entry() //  [R1]
         { info_tbl: [(c7TAJ,
                       label: GHC.Event.IntTable.Bucket_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,66,117,99,107,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TAJ: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.091405881 UTC

[GHC.Event.IntTable.IT_con_entry() //  [R1]
         { info_tbl: [(c7TAL,
                       label: GHC.Event.IntTable.IT_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,73,84]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TAL: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.092092262 UTC

[section ""relreadonly" . S7T63_srt" {
     S7T63_srt:
         const Control.Exception.Base.recSelError_closure;
         const GHC.Event.IntTable.bucketNext_closure;
         const GHC.Event.IntTable.bucketNext1_closure;
         const GHC.Event.IntTable.bucketValue_closure;
         const GHC.Event.IntTable.bucketValue1_closure;
         const GHC.Event.IntTable.bucketKey_closure;
         const GHC.Event.IntTable.bucketKey1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.093023718 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:00.094528717 UTC

[section ""data" . GHC.Event.IntTable.$WBucket_closure" {
     GHC.Event.IntTable.$WBucket_closure:
         const GHC.Event.IntTable.$WBucket_info;
 },
 GHC.Event.IntTable.$WBucket_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TAU,
                       label: GHC.Event.IntTable.$WBucket_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TAU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7TAY; else goto c7TAZ;
       c7TAY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$WBucket_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TAZ: // global
           I64[Sp - 24] = block_c7TAR_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TB3; else goto c7TAS;
       u7TB3: // global
           call _c7TAR(R1) args: 0, res: 0, upd: 0;
       c7TAS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TAR() //  [R1]
         { info_tbl: [(c7TAR,
                       label: block_c7TAR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TAR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TB2; else goto c7TB1;
       c7TB2: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TB1: // global
           _s7SZt::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s7SZt::I64;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.101072059 UTC

[section ""data" . GHC.Event.IntTable.$WIT_closure" {
     GHC.Event.IntTable.$WIT_closure:
         const GHC.Event.IntTable.$WIT_info;
 },
 GHC.Event.IntTable.$WIT_entry() //  [R2, R3]
         { info_tbl: [(c7TBn,
                       label: GHC.Event.IntTable.$WIT_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TBn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TBw; else goto c7TBx;
       c7TBw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$WIT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TBx: // global
           I64[Sp - 16] = block_c7TBk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TBD; else goto c7TBl;
       u7TBD: // global
           call _c7TBk(R1) args: 0, res: 0, upd: 0;
       c7TBl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TBk() //  [R1]
         { info_tbl: [(c7TBk,
                       label: block_c7TBk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TBk: // global
           I64[Sp] = block_c7TBq_info;
           _s7SZx::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7SZx::P64;
           if (R1 & 7 != 0) goto u7TBC; else goto c7TBr;
       u7TBC: // global
           call _c7TBq(R1) args: 0, res: 0, upd: 0;
       c7TBr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TBq() //  [R1]
         { info_tbl: [(c7TBq,
                       label: block_c7TBq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TBq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TBB; else goto c7TBA;
       c7TBB: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TBA: // global
           _s7SZA::P64 = P64[R1 + 7];
           _s7SZz::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s7SZA::P64;
           I64[Hp] = _s7SZz::I64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.110678999 UTC

[section ""cstring" . lvl_r7SZ3_bytes" {
     lvl_r7SZ3_bytes:
         I8[] [98,117,99,107,101,116,78,101,120,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.112639393 UTC

[section ""data" . GHC.Event.IntTable.bucketNext1_closure" {
     GHC.Event.IntTable.bucketNext1_closure:
         const GHC.Event.IntTable.bucketNext1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketNext1_entry() //  [R1]
         { info_tbl: [(c7TC0,
                       label: GHC.Event.IntTable.bucketNext1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TC0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TC1; else goto c7TC2;
       c7TC1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7TC2: // global
           (_c7TBX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7TBX::I64 == 0) goto c7TBZ; else goto c7TBY;
       c7TBZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7TBY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7TBX::I64;
           R2 = lvl_r7SZ3_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.117448505 UTC

[section ""data" . GHC.Event.IntTable.bucketNext_closure" {
     GHC.Event.IntTable.bucketNext_closure:
         const GHC.Event.IntTable.bucketNext_info;
         const 0;
 },
 GHC.Event.IntTable.bucketNext_entry() //  [R2]
         { info_tbl: [(c7TCl,
                       label: GHC.Event.IntTable.bucketNext_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TCl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7TCm; else goto c7TCn;
       c7TCm: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketNext_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TCn: // global
           I64[Sp - 8] = block_c7TCe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TCu; else goto c7TCf;
       u7TCu: // global
           call _c7TCe(R1) args: 0, res: 0, upd: 0;
       c7TCf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TCe() //  [R1]
         { info_tbl: [(c7TCe,
                       label: block_c7TCe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TCe: // global
           if (R1 & 7 == 1) goto c7TCi; else goto c7TCj;
       c7TCi: // global
           R1 = GHC.Event.IntTable.bucketNext1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7TCj: // global
           R1 = P64[R1 + 14] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.123128552 UTC

[section ""cstring" . lvl1_r7SZ4_bytes" {
     lvl1_r7SZ4_bytes:
         I8[] [98,117,99,107,101,116,86,97,108,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.12506751 UTC

[section ""data" . GHC.Event.IntTable.bucketValue1_closure" {
     GHC.Event.IntTable.bucketValue1_closure:
         const GHC.Event.IntTable.bucketValue1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketValue1_entry() //  [R1]
         { info_tbl: [(c7TCQ,
                       label: GHC.Event.IntTable.bucketValue1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TCQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TCR; else goto c7TCS;
       c7TCR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7TCS: // global
           (_c7TCN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7TCN::I64 == 0) goto c7TCP; else goto c7TCO;
       c7TCP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7TCO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7TCN::I64;
           R2 = lvl1_r7SZ4_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.129791097 UTC

[section ""data" . GHC.Event.IntTable.bucketValue_closure" {
     GHC.Event.IntTable.bucketValue_closure:
         const GHC.Event.IntTable.bucketValue_info;
         const 0;
 },
 GHC.Event.IntTable.bucketValue_entry() //  [R2]
         { info_tbl: [(c7TDb,
                       label: GHC.Event.IntTable.bucketValue_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TDb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7TDc; else goto c7TDd;
       c7TDc: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketValue_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TDd: // global
           I64[Sp - 8] = block_c7TD4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TDk; else goto c7TD5;
       u7TDk: // global
           call _c7TD4(R1) args: 0, res: 0, upd: 0;
       c7TD5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TD4() //  [R1]
         { info_tbl: [(c7TD4,
                       label: block_c7TD4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TD4: // global
           if (R1 & 7 == 1) goto c7TD8; else goto c7TD9;
       c7TD8: // global
           R1 = GHC.Event.IntTable.bucketValue1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7TD9: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.135431969 UTC

[section ""cstring" . lvl2_r7SZ5_bytes" {
     lvl2_r7SZ5_bytes:
         I8[] [98,117,99,107,101,116,75,101,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.137484854 UTC

[section ""data" . GHC.Event.IntTable.bucketKey1_closure" {
     GHC.Event.IntTable.bucketKey1_closure:
         const GHC.Event.IntTable.bucketKey1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketKey1_entry() //  [R1]
         { info_tbl: [(c7TDD,
                       label: GHC.Event.IntTable.bucketKey1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TDD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TDE; else goto c7TDF;
       c7TDE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7TDF: // global
           (_c7TDA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7TDA::I64 == 0) goto c7TDC; else goto c7TDB;
       c7TDC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7TDB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7TDA::I64;
           R2 = lvl2_r7SZ5_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.142323384 UTC

[section ""data" . GHC.Event.IntTable.bucketKey_closure" {
     GHC.Event.IntTable.bucketKey_closure:
         const GHC.Event.IntTable.bucketKey_info;
         const 0;
 },
 GHC.Event.IntTable.bucketKey_entry() //  [R2]
         { info_tbl: [(c7TDY,
                       label: GHC.Event.IntTable.bucketKey_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TDY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7TDZ; else goto c7TE0;
       c7TDZ: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketKey_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TE0: // global
           I64[Sp - 8] = block_c7TDR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TEa; else goto c7TDS;
       u7TEa: // global
           call _c7TDR(R1) args: 0, res: 0, upd: 0;
       c7TDS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TDR() //  [R1]
         { info_tbl: [(c7TDR,
                       label: block_c7TDR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TDR: // global
           if (R1 & 7 == 1) goto c7TDV; else goto c7TDW;
       c7TDV: // global
           R1 = GHC.Event.IntTable.bucketKey1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7TDW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TE9; else goto c7TE8;
       c7TE9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TE8: // global
           _s7SZN::I64 = I64[R1 + 22];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7SZN::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.149501946 UTC

[section ""data" . GHC.Event.IntTable.tabSize_closure" {
     GHC.Event.IntTable.tabSize_closure:
         const GHC.Event.IntTable.tabSize_info;
 },
 GHC.Event.IntTable.tabSize_entry() //  [R2]
         { info_tbl: [(c7TEv,
                       label: GHC.Event.IntTable.tabSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TEv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7TEz; else goto c7TEA;
       c7TEz: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.tabSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TEA: // global
           I64[Sp - 8] = block_c7TEs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TEE; else goto c7TEt;
       u7TEE: // global
           call _c7TEs(R1) args: 0, res: 0, upd: 0;
       c7TEt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TEs() //  [R1]
         { info_tbl: [(c7TEs,
                       label: block_c7TEs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TEs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7TED; else goto c7TEC;
       c7TED: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TEC: // global
           _s7SZU::P64 = P64[R1 + 15];
           _s7SZT::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = _s7SZU::P64;
           I64[Hp] = _s7SZT::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.155532585 UTC

[section ""data" . GHC.Event.IntTable.tabArr_closure" {
     GHC.Event.IntTable.tabArr_closure:
         const GHC.Event.IntTable.tabArr_info;
 },
 GHC.Event.IntTable.tabArr_entry() //  [R2]
         { info_tbl: [(c7TEW,
                       label: GHC.Event.IntTable.tabArr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TEW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7TF0; else goto c7TF1;
       c7TF0: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.tabArr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TF1: // global
           I64[Sp - 8] = block_c7TET_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TF5; else goto c7TEU;
       u7TF5: // global
           call _c7TET(R1) args: 0, res: 0, upd: 0;
       c7TEU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TET() //  [R1]
         { info_tbl: [(c7TET,
                       label: block_c7TET_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TET: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TF4; else goto c7TF3;
       c7TF4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TF3: // global
           _s7SZX::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = _s7SZX::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.162052432 UTC

[section ""data" . GHC.Event.IntTable.$wnew_closure" {
     GHC.Event.IntTable.$wnew_closure:
         const GHC.Event.IntTable.$wnew_info;
 },
 GHC.Event.IntTable.$wnew_entry() //  [R2]
         { info_tbl: [(c7TFs,
                       label: GHC.Event.IntTable.$wnew_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TFs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7TFA; else goto c7TFB;
       c7TFA: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.$wnew_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TFB: // global
           I64[Sp - 8] = block_c7TFk_info;
           _s7T00::I64 = R2;
           R2 = GHC.Event.IntTable.Empty_closure+1;
           R1 = _s7T00::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TFk() //  [R1]
         { info_tbl: [(c7TFk,
                       label: block_c7TFk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TFk: // global
           I64[Sp - 8] = block_c7TFm_info;
           _s7T04::P64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp] = _s7T04::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TFm() //  [R1]
         { info_tbl: [(c7TFm,
                       label: block_c7TFm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TFm: // global
           I64[Sp - 8] = block_c7TFo_info;
           R2 = 8;
           _s7T07::P64 = R1;
           R1 = 8;
           P64[Sp] = _s7T07::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TFo() //  [R1]
         { info_tbl: [(c7TFo,
                       label: block_c7TFo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TFo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7TFG; else goto c7TFF;
       c7TFG: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TFF: // global
           _s7T04::P64 = P64[Sp + 16];
           _s7T07::P64 = P64[Sp + 8];
           _s7T0b::I64 = R1 + 16;
           I64[_s7T0b::I64] = 0;
           I64[Hp - 48] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = _s7T07::P64;
           _c7TFu::P64 = Hp - 46;
           call MO_Touch(_c7TFu::P64);
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = _s7T04::P64;
           P64[Hp - 8] = _c7TFu::P64;
           I64[Hp] = _s7T0b::I64;
           I64[Sp + 16] = block_c7TFx_info;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TFx() //  [R1]
         { info_tbl: [(c7TFx,
                       label: block_c7TFx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TFx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TFJ; else goto c7TFI;
       c7TFJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TFI: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.173473188 UTC

[section ""data" . GHC.Event.IntTable.new1_closure" {
     GHC.Event.IntTable.new1_closure:
         const GHC.Event.IntTable.new1_info;
 },
 GHC.Event.IntTable.new1_entry() //  [R2]
         { info_tbl: [(c7TG9,
                       label: GHC.Event.IntTable.new1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TG9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7TGa; else goto c7TGb;
       c7TGa: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.new1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TGb: // global
           I64[Sp - 8] = block_c7TG6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TGf; else goto c7TG7;
       u7TGf: // global
           call _c7TG6(R1) args: 0, res: 0, upd: 0;
       c7TG7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TG6() //  [R1]
         { info_tbl: [(c7TG6,
                       label: block_c7TG6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TG6: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.IntTable.$wnew_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.179045934 UTC

[section ""data" . GHC.Event.IntTable.new_closure" {
     GHC.Event.IntTable.new_closure:
         const GHC.Event.IntTable.new_info;
 },
 GHC.Event.IntTable.new_entry() //  [R2]
         { info_tbl: [(c7TGt,
                       label: GHC.Event.IntTable.new_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TGt: // global
           R2 = R2;
           call GHC.Event.IntTable.new1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.184560576 UTC

[section ""data" . GHC.Event.IntTable.$wupdateWith_closure" {
     GHC.Event.IntTable.$wupdateWith_closure:
         const GHC.Event.IntTable.$wupdateWith_info;
 },
 $wgo_s7T0F_entry() //  [R1, R2]
         { info_tbl: [(c7TH4,
                       label: $wgo_s7T0F_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TH4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7TH5; else goto c7TH6;
       c7TH5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TH6: // global
           I64[Sp - 32] = block_c7TGX_info;
           _s7T0F::P64 = R1;
           _s7T0o::P64 = P64[R1 + 7];
           _s7T0p::I64 = I64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s7T0o::P64;
           I64[Sp - 16] = _s7T0p::I64;
           P64[Sp - 8] = _s7T0F::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7THJ; else goto c7TGY;
       u7THJ: // global
           call _c7TGX(R1) args: 0, res: 0, upd: 0;
       c7TGY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TGX() //  [R1]
         { info_tbl: [(c7TGX,
                       label: block_c7TGX_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TGX: // global
           if (R1 & 7 == 1) goto c7TH1; else goto c7TH2;
       c7TH1: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TH2: // global
           _s7T0J::P64 = P64[R1 + 6];
           _s7T0K::P64 = P64[R1 + 14];
           _s7T0I::I64 = I64[R1 + 22];
           if (_s7T0I::I64 == I64[Sp + 16]) goto c7THq; else goto c7THk;
       c7THq: // global
           I64[Sp] = block_c7THp_info;
           R2 = _s7T0J::P64;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7T0K::P64;
           P64[Sp + 16] = _s7T0J::P64;
           I64[Sp + 24] = _s7T0I::I64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c7THk: // global
           I64[Sp + 8] = block_c7THg_info;
           R2 = _s7T0K::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s7T0J::P64;
           I64[Sp + 24] = _s7T0I::I64;
           Sp = Sp + 8;
           call $wgo_s7T0F_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7THp() //  [R1]
         { info_tbl: [(c7THp,
                       label: block_c7THp_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7THp: // global
           _s7T0J::P64 = P64[Sp + 16];
           _s7T0K::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7THw; else goto c7THE;
       c7THw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7THz; else goto c7THy;
       c7THz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7THy: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T0J::P64;
           R3 = _s7T0K::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7THE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7THH; else goto c7THG;
       c7THH: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7THG: // global
           _s7T0T::P64 = P64[R1 + 6];
           I64[Hp - 40] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 32] = _s7T0T::P64;
           P64[Hp - 24] = _s7T0K::P64;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T0J::P64;
           R3 = Hp - 38;
           R2 = Hp - 6;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7THg() //  [R1, R2, R3]
         { info_tbl: [(c7THg,
                       label: block_c7THg_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7THg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7THn; else goto c7THm;
       c7THn: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       c7THm: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$wupdateWith_entry() //  [R2, R3, R4]
         { info_tbl: [(c7THK,
                       label: GHC.Event.IntTable.$wupdateWith_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7THK: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7THL; else goto c7THM;
       c7THL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wupdateWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7THM: // global
           I64[Sp - 24] = block_c7TGE_info;
           R1 = P64[R4 + 8];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TIn; else goto c7TGF;
       u7TIn: // global
           call _c7TGE(R1) args: 0, res: 0, upd: 0;
       c7TGF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TGE() //  [R1]
         { info_tbl: [(c7TGE,
                       label: block_c7TGE_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TGE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7THP; else goto c7THO;
       c7THP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7THO: // global
           _s7T0p::I64 = I64[Sp + 16];
           _s7T0w::P64 = P64[R1 + 7];
           _s7T0y::P64 = P64[R1 + 15];
           _s7T0x::I64 = I64[R1 + 23];
           _s7T0z::I64 = _s7T0p::I64 & (I64[_s7T0w::P64 + 8] - 1);
           _s7T0E::P64 = P64[(_s7T0w::P64 + 24) + (_s7T0z::I64 << 3)];
           I64[Hp - 16] = $wgo_s7T0F_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s7T0p::I64;
           I64[Sp - 16] = block_c7THQ_info;
           R2 = _s7T0E::P64;
           R1 = Hp - 15;
           I64[Sp - 8] = _s7T0z::I64;
           P64[Sp] = _s7T0y::P64;
           I64[Sp + 8] = _s7T0x::I64;
           P64[Sp + 16] = _s7T0w::P64;
           Sp = Sp - 16;
           call $wgo_s7T0F_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7THQ() //  [R1, R2, R3]
         { info_tbl: [(c7THQ,
                       label: block_c7THQ_info
                       rep:StackRep [True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7THQ: // global
           I64[Sp - 16] = block_c7THS_info;
           _s7T0X::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _s7T0X::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TIo; else goto c7THU;
       u7TIo: // global
           call _c7THS(R1) args: 0, res: 0, upd: 0;
       c7THU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7THS() //  [R1]
         { info_tbl: [(c7THS,
                       label: block_c7THS_info
                       rep:StackRep [False, False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7THS: // global
           if (R1 & 7 == 1) goto c7TI0; else goto c7TI5;
       c7TI0: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7TI5: // global
           _s7T0w::P64 = P64[Sp + 48];
           _s7T0z::I64 = I64[Sp + 24];
           _s7T0X::P64 = P64[Sp + 16];
           _s7T0Z::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s7T0w::P64 + 24) + (_s7T0z::I64 << 3)] = _s7T0Z::P64;
           I64[_s7T0w::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T0w::P64 + 24) + ((I64[_s7T0w::P64 + 8] << 3) + (_s7T0z::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_c7TI3_info;
           _s7T10::P64 = R1;
           R1 = _s7T0X::P64;
           P64[Sp + 48] = _s7T10::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u7TIp; else goto c7TI6;
       u7TIp: // global
           call _c7TI3(R1) args: 0, res: 0, upd: 0;
       c7TI6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TI3() //  [R1]
         { info_tbl: [(c7TI3,
                       label: block_c7TI3_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TI3: // global
           _s7T10::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c7TIc; else goto c7TIg;
       c7TIc: // global
           R1 = _s7T10::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7TIg: // global
           _s7T0x::I64 = I64[Sp + 16];
           _s7T0y::P64 = P64[Sp + 8];
           I64[_s7T0x::I64] = I64[_s7T0x::I64] - 1;
           call MO_Touch(_s7T0y::P64);
           R1 = _s7T10::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.209099359 UTC

[section ""data" . GHC.Event.IntTable.delete3_closure" {
     GHC.Event.IntTable.delete3_closure:
         const GHC.Event.IntTable.delete3_info;
 },
 GHC.Event.IntTable.delete3_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TJv,
                       label: GHC.Event.IntTable.delete3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TJv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7TJz; else goto c7TJA;
       c7TJz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.delete3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TJA: // global
           I64[Sp - 24] = block_c7TJs_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TJI; else goto c7TJt;
       u7TJI: // global
           call _c7TJs(R1) args: 0, res: 0, upd: 0;
       c7TJt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TJs() //  [R1]
         { info_tbl: [(c7TJs,
                       label: block_c7TJs_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TJs: // global
           I64[Sp] = block_c7TJy_info;
           _s7T1f::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7T1f::I64;
           if (R1 & 7 != 0) goto u7TJH; else goto c7TJC;
       u7TJH: // global
           call _c7TJy(R1) args: 0, res: 0, upd: 0;
       c7TJC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TJy() //  [R1]
         { info_tbl: [(c7TJy,
                       label: block_c7TJy_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TJy: // global
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.IntTable.$wupdateWith_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.217016196 UTC

[section ""data" . GHC.Event.IntTable.updateWith_closure" {
     GHC.Event.IntTable.updateWith_closure:
         const GHC.Event.IntTable.updateWith_info;
 },
 GHC.Event.IntTable.updateWith_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TK0,
                       label: GHC.Event.IntTable.updateWith_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TK0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.delete3_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.220541881 UTC

[section ""data" . GHC.Event.IntTable.delete2_closure" {
     GHC.Event.IntTable.delete2_closure:
         const GHC.Event.IntTable.delete2_info;
 },
 GHC.Event.IntTable.delete2_entry() //  []
         { info_tbl: [(c7TKb,
                       label: GHC.Event.IntTable.delete2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TKb: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.224218576 UTC

[section ""data" . GHC.Event.IntTable.delete1_closure" {
     GHC.Event.IntTable.delete1_closure:
         const GHC.Event.IntTable.delete1_info;
 },
 GHC.Event.IntTable.delete1_entry() //  [R2, R3]
         { info_tbl: [(c7TKq,
                       label: GHC.Event.IntTable.delete1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TKq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TKu; else goto c7TKv;
       c7TKu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.delete1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TKv: // global
           I64[Sp - 16] = block_c7TKn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TKD; else goto c7TKo;
       u7TKD: // global
           call _c7TKn(R1) args: 0, res: 0, upd: 0;
       c7TKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TKn() //  [R1]
         { info_tbl: [(c7TKn,
                       label: block_c7TKn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TKn: // global
           I64[Sp] = block_c7TKt_info;
           _s7T1n::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7T1n::I64;
           if (R1 & 7 != 0) goto u7TKC; else goto c7TKx;
       u7TKC: // global
           call _c7TKt(R1) args: 0, res: 0, upd: 0;
       c7TKx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TKt() //  [R1]
         { info_tbl: [(c7TKt,
                       label: block_c7TKt_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TKt: // global
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 8];
           R2 = GHC.Event.IntTable.delete2_closure+1;
           Sp = Sp + 16;
           call GHC.Event.IntTable.$wupdateWith_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.232676899 UTC

[section ""data" . GHC.Event.IntTable.delete_closure" {
     GHC.Event.IntTable.delete_closure:
         const GHC.Event.IntTable.delete_info;
 },
 GHC.Event.IntTable.delete_entry() //  [R2, R3]
         { info_tbl: [(c7TKV,
                       label: GHC.Event.IntTable.delete_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TKV: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.delete1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.237668018 UTC

[section ""data" . GHC.Event.IntTable.$wgrow_closure" {
     GHC.Event.IntTable.$wgrow_closure:
         const GHC.Event.IntTable.$wgrow_info;
 },
 GHC.Event.IntTable.$wgrow_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TL8,
                       label: GHC.Event.IntTable.$wgrow_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 22} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TL8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c7TL9; else goto c7TLa;
       c7TL9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wgrow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TLa: // global
           I64[Sp - 32] = block_c7TLf_info;
           _s7T1q::P64 = R2;
           _s7T1v::I64 = I64[R2 + 8] << 1;
           R2 = GHC.Event.IntTable.Empty_closure+1;
           R1 = _s7T1v::I64;
           P64[Sp - 24] = _s7T1q::P64;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TLf() //  [R1]
         { info_tbl: [(c7TLf,
                       label: block_c7TLf_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TLf: // global
           I64[Sp - 8] = block_c7TLh_info;
           _s7T1y::P64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp] = _s7T1y::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TLh() //  [R1]
         { info_tbl: [(c7TLh,
                       label: block_c7TLh_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TLh: // global
           I64[Sp - 8] = block_c7TLj_info;
           R2 = 8;
           _s7T1B::P64 = R1;
           R1 = 8;
           P64[Sp] = _s7T1B::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TLj() //  [R1]
         { info_tbl: [(c7TLj,
                       label: block_c7TLj_info
                       rep:StackRep [False, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TLj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7TLp; else goto c7TLo;
       c7TLp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TLo: // global
           _s7T1B::P64 = P64[Sp + 8];
           _s7T1F::I64 = R1 + 16;
           I64[_s7T1F::I64] = 0;
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = _s7T1B::P64;
           _c7TLt::P64 = Hp - 14;
           call MO_Touch(_c7TLt::P64);
           I64[Sp - 16] = 0;
           I64[Sp - 8] = 0;
           I64[Sp] = _s7T1F::I64;
           P64[Sp + 8] = _c7TLt::P64;
           Sp = Sp - 16;
           call _c7TLF() args: 0, res: 0, upd: 0;
     }
 },
 _c7TLF() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TLF: // global
           _s7T1Q::I64 = I64[Sp];
           if (_s7T1Q::I64 == I64[Sp + 56]) goto u7TMy; else goto c7TMd;
       u7TMy: // global
           Sp = Sp + 8;
           call _c7TLy() args: 0, res: 0, upd: 0;
       c7TMd: // global
           P64[Sp - 8] = P64[P64[Sp + 40] + ((I64[Sp + 8] << 3) + 24)];
           I64[Sp] = _s7T1Q::I64;
           Sp = Sp - 8;
           call _c7TLU() args: 0, res: 0, upd: 0;
     }
 },
 _c7TLy() //  []
         { info_tbl: [(c7TLy,
                       label: block_c7TLy_info
                       rep:StackRep [True, False, False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TLy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TLC; else goto c7TLB;
       c7TLC: // global
           HpAlloc = 32;
           I64[Sp] = block_c7TLy_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7TLB: // global
           _c7TLt::P64 = P64[Sp + 16];
           _s7T1r::P64 = P64[Sp + 40];
           _s7T1y::P64 = P64[Sp + 24];
           _s7T1F::I64 = I64[Sp + 8];
           I64[_s7T1F::I64] = I64[Sp + 48];
           call MO_Touch(_c7TLt::P64);
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = _s7T1y::P64;
           P64[Hp - 8] = _c7TLt::P64;
           I64[Hp] = _s7T1F::I64;
           call MO_WriteBarrier();
           P64[_s7T1r::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7T1r::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7TLU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TLU: // global
           _s7T23::P64 = P64[Sp];
           I64[Sp] = block_c7TLX_info;
           R1 = _s7T23::P64;
           if (R1 & 7 != 0) goto u7TMF; else goto c7TLZ;
       u7TMF: // global
           call _c7TLX(R1) args: 0, res: 0, upd: 0;
       c7TLZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TLX() //  [R1]
         { info_tbl: [(c7TLX,
                       label: block_c7TLX_info
                       rep:StackRep [True, True, True, False, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TLX: // global
           _s7T22::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c7TM5; else goto c7TM6;
       c7TM5: // global
           I64[Sp + 8] = _s7T22::I64;
           I64[Sp + 16] = I64[Sp + 16] + 1;
           Sp = Sp + 8;
           call _c7TLF() args: 0, res: 0, upd: 0;
       c7TM6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TMb; else goto c7TMa;
       c7TMb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TMa: // global
           _s7T1y::P64 = P64[Sp + 40];
           _s7T27::P64 = P64[R1 + 6];
           _s7T28::P64 = P64[R1 + 14];
           _s7T26::I64 = I64[R1 + 22];
           _s7T29::I64 = _s7T26::I64 & (I64[_s7T1y::P64 + 8] - 1);
           _s7T2e::P64 = P64[(_s7T1y::P64 + 24) + (_s7T29::I64 << 3)];
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7T27::P64;
           P64[Hp - 8] = _s7T2e::P64;
           I64[Hp] = _s7T26::I64;
           call MO_WriteBarrier();
           P64[(_s7T1y::P64 + 24) + (_s7T29::I64 << 3)] = Hp - 22;
           I64[_s7T1y::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T1y::P64 + 24) + ((I64[_s7T1y::P64 + 8] << 3) + (_s7T29::I64 >> 7))] = 1 :: W8;
           I64[Sp + 8] = _s7T22::I64 + 1;
           P64[Sp] = _s7T28::P64;
           call _c7TLU() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.255588288 UTC

[section ""data" . poly_<>_r7SZ6_closure" {
     poly_<>_r7SZ6_closure:
         const poly_<>_r7SZ6_info;
 },
 sat_s7T2o_entry() //  [R1]
         { info_tbl: [(c7TND,
                       label: sat_s7T2o_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TND: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TNE; else goto c7TNF;
       c7TNE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7TNF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_<>_r7SZ6_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_<>_r7SZ6_entry() //  [R2, R3]
         { info_tbl: [(c7TNK,
                       label: poly_<>_r7SZ6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TNK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TNL; else goto c7TNM;
       c7TNL: // global
           R3 = R3;
           R2 = R2;
           R1 = poly_<>_r7SZ6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TNM: // global
           I64[Sp - 16] = block_c7TNt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TNT; else goto c7TNu;
       u7TNT: // global
           call _c7TNt(R1) args: 0, res: 0, upd: 0;
       c7TNu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TNt() //  [R1]
         { info_tbl: [(c7TNt,
                       label: block_c7TNt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TNt: // global
           _s7T2j::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7TNH; else goto c7TNI;
       c7TNH: // global
           R1 = _s7T2j::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7TNI: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7TNS; else goto c7TNR;
       c7TNS: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TNR: // global
           _s7T2m::P64 = P64[R1 + 6];
           _s7T2n::P64 = P64[R1 + 14];
           _s7T2l::I64 = I64[R1 + 22];
           I64[Hp - 56] = sat_s7T2o_info;
           P64[Hp - 40] = _s7T2j::P64;
           P64[Hp - 32] = _s7T2n::P64;
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7T2m::P64;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = _s7T2l::I64;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.266409575 UTC

[section ""data" . GHC.Event.IntTable.$winsertWith_closure" {
     GHC.Event.IntTable.$winsertWith_closure:
         const GHC.Event.IntTable.$winsertWith_info;
 },
 GHC.Event.IntTable.$winsertWith_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TOe: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$winsertWith_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7TOk,
                       label: GHC.Event.IntTable.$winsertWith_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TOk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TOo; else goto c7TOn;
       c7TOo: // global
           HpAlloc = 32;
           R1 = GHC.Event.IntTable.$winsertWith_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7TOn: // global
           I64[Hp - 24] = GHC.STRef.STRef_con_info;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R3;
           R5 = Hp - 23;
           R4 = R4;
           R3 = Hp - 7;
           R2 = R2;
           call insertWith1_r7SZ8_entry(R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . $winsertWith1_r7SZ7_closure" {
     $winsertWith1_r7SZ7_closure:
         const $winsertWith1_r7SZ7_info;
 },
 $winsertWith1_r7SZ7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TOq: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $winsertWith1_r7SZ7_entry(R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 $winsertWith1_r7SZ7_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7TP1,
                       label: $winsertWith1_r7SZ7_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TP1: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c7TP2; else goto c7TP3;
       c7TP2: // global
           R1 = $winsertWith1_r7SZ7_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7TP3: // global
           I64[Sp - 40] = block_c7TOu_info;
           R1 = P64[R5 + 8];
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7TQk; else goto c7TOv;
       u7TQk: // global
           call _c7TOu(R1) args: 0, res: 0, upd: 0;
       c7TOv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TOu() //  [R1]
         { info_tbl: [(c7TOu,
                       label: block_c7TOu_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TOu: // global
           _s7T2F::P64 = P64[R1 + 7];
           _s7T2I::I64 = I64[Sp + 16] & (I64[_s7T2F::P64 + 8] - 1);
           _s7T3p::P64 = P64[(_s7T2F::P64 + 24) + (_s7T2I::I64 << 3)];
           I64[Sp - 40] = I64[R1 + 23];
           P64[Sp - 32] = P64[R1 + 15];
           I64[Sp - 24] = _s7T2I::I64;
           P64[Sp - 16] = GHC.Event.IntTable.Empty_closure+1;
           P64[Sp - 8] = _s7T3p::P64;
           P64[Sp] = _s7T2F::P64;
           Sp = Sp - 40;
           call _c7TOP() args: 0, res: 0, upd: 0;
     }
 },
 _c7TOP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TOP: // global
           I64[Sp - 8] = block_c7TOR_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TQi; else goto c7TOS;
       u7TQi: // global
           call _c7TOR(R1) args: 0, res: 0, upd: 0;
       c7TOS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TOR() //  [R1]
         { info_tbl: [(c7TOR,
                       label: block_c7TOR_info
                       rep:StackRep [True, False, True, False, True, False, False, True,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TOR: // global
           _s7T3o::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c7TQ0; else goto c7TQ1;
       c7TQ0: // global
           _s7T2F::P64 = P64[Sp + 48];
           _s7T2T::I64 = I64[I64[Sp + 8]];
           if (%MO_S_Lt_W64(_s7T2T::I64 + 1,
                            I64[_s7T2F::P64 + 8] - %MO_S_Shr_W64(I64[_s7T2F::P64 + 8],
                                                                 2))) goto c7TPt; else goto c7TPC;
       c7TPt: // global
           I64[Sp] = block_c7TPr_info;
           R1 = P64[Sp + 72];
           I64[Sp + 72] = _s7T2T::I64;
           P64[Sp + 80] = _s7T3o::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c7TPC: // global
           I64[Sp + 8] = block_c7TPz_info;
           R4 = _s7T2T::I64;
           R3 = P64[Sp + 80];
           R2 = _s7T2F::P64;
           Sp = Sp + 8;
           call GHC.Event.IntTable.$wgrow_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
       c7TQ1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TQ4; else goto c7TQ3;
       c7TQ4: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TQ3: // global
           _s7T3t::P64 = P64[R1 + 6];
           _s7T3u::P64 = P64[R1 + 14];
           _s7T3s::I64 = I64[R1 + 22];
           if (_s7T3s::I64 == I64[Sp + 64]) goto c7TQ7; else goto c7TQ6;
       c7TQ7: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_c7TPJ_info;
           R3 = _s7T3u::P64;
           R2 = _s7T3o::P64;
           P64[Sp + 80] = _s7T3t::P64;
           Sp = Sp + 16;
           call poly_<>_r7SZ6_entry(R3, R2) args: 8, res: 8, upd: 8;
       c7TQ6: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7T3t::P64;
           P64[Hp - 8] = _s7T3o::P64;
           I64[Hp] = _s7T3s::I64;
           P64[Sp + 32] = Hp - 22;
           P64[Sp + 40] = _s7T3u::P64;
           Sp = Sp + 8;
           call _c7TOP() args: 0, res: 0, upd: 0;
     }
 },
 _c7TPr() //  [R1]
         { info_tbl: [(c7TPr,
                       label: block_c7TPr_info
                       rep:StackRep [True, False, True, True, True, False, True, True,
                                     True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TPr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TPx; else goto c7TPw;
       c7TPx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TPw: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 80];
           I64[Hp] = I64[Sp + 64];
           _s7T2F::P64 = P64[Sp + 48];
           _s7T2G::I64 = I64[Sp + 8];
           _s7T2H::P64 = P64[Sp + 16];
           _s7T2I::I64 = I64[Sp + 24];
           _s7T2T::I64 = I64[Sp + 72];
           call MO_WriteBarrier();
           P64[(_s7T2F::P64 + 24) + (_s7T2I::I64 << 3)] = Hp - 22;
           I64[_s7T2F::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T2F::P64 + 24) + ((I64[_s7T2F::P64 + 8] << 3) + (_s7T2I::I64 >> 7))] = 1 :: W8;
           I64[_s7T2G::I64] = _s7T2T::I64 + 1;
           call MO_Touch(_s7T2H::P64);
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7TPz() //  []
         { info_tbl: [(c7TPz,
                       label: block_c7TPz_info
                       rep:StackRep [False, True, True, True, True, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TPz: // global
           I64[Sp] = block_c7TPB_info;
           R5 = P64[Sp + 72];
           R4 = P64[Sp + 64];
           R3 = I64[Sp + 56];
           R2 = P64[Sp + 48];
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7TPB() //  [R1]
         { info_tbl: [(c7TPB,
                       label: block_c7TPB_info
                       rep:StackRep [False, True, True, True, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TPB: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7TPJ() //  [R1]
         { info_tbl: [(c7TPJ,
                       label: block_c7TPJ_info
                       rep:StackRep [True, True, True, False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TPJ: // global
           I64[Sp] = block_c7TPN_info;
           R3 = P64[Sp + 64];
           R2 = P64[Sp + 56];
           _s7T3i::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 56] = _s7T3i::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TPN() //  [R1]
         { info_tbl: [(c7TPN,
                       label: block_c7TPN_info
                       rep:StackRep [True, True, True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TPN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7TPV; else goto c7TPU;
       c7TPV: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TPU: // global
           I64[Hp - 40] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = I64[Sp + 48];
           _s7T2F::P64 = P64[Sp + 32];
           _s7T2I::I64 = I64[Sp + 8];
           _s7T3g::P64 = P64[Sp + 64];
           call MO_WriteBarrier();
           P64[(_s7T2F::P64 + 24) + (_s7T2I::I64 << 3)] = Hp - 38;
           I64[_s7T2F::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T2F::P64 + 24) + ((I64[_s7T2F::P64 + 8] << 3) + (_s7T2I::I64 >> 7))] = 1 :: W8;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T3g::P64;
           R1 = Hp - 6;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . insertWith1_r7SZ8_closure" {
     insertWith1_r7SZ8_closure:
         const insertWith1_r7SZ8_info;
 },
 insertWith1_r7SZ8_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7TQs,
                       label: insertWith1_r7SZ8_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TQs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7TQw; else goto c7TQx;
       c7TQw: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = insertWith1_r7SZ8_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TQx: // global
           I64[Sp - 32] = block_c7TQp_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7TQF; else goto c7TQq;
       u7TQF: // global
           call _c7TQp(R1) args: 0, res: 0, upd: 0;
       c7TQq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TQp() //  [R1]
         { info_tbl: [(c7TQp,
                       label: block_c7TQp_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TQp: // global
           I64[Sp] = block_c7TQv_info;
           _s7T3D::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7T3D::I64;
           if (R1 & 7 != 0) goto u7TQE; else goto c7TQz;
       u7TQE: // global
           call _c7TQv(R1) args: 0, res: 0, upd: 0;
       c7TQz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TQv() //  [R1]
         { info_tbl: [(c7TQv,
                       label: block_c7TQv_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TQv: // global
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call $winsertWith1_r7SZ7_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.300580126 UTC

[section ""data" . insertWith2_r7SZ9_closure" {
     insertWith2_r7SZ9_closure:
         const insertWith2_r7SZ9_info;
 },
 insertWith2_r7SZ9_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7TS7,
                       label: insertWith2_r7SZ9_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TS7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7TSb; else goto c7TSc;
       c7TSb: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = insertWith2_r7SZ9_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TSc: // global
           I64[Sp - 32] = block_c7TS4_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7TSk; else goto c7TS5;
       u7TSk: // global
           call _c7TS4(R1) args: 0, res: 0, upd: 0;
       c7TS5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TS4() //  [R1]
         { info_tbl: [(c7TS4,
                       label: block_c7TS4_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TS4: // global
           I64[Sp] = block_c7TSa_info;
           _s7T3M::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7T3M::I64;
           if (R1 & 7 != 0) goto u7TSj; else goto c7TSe;
       u7TSj: // global
           call _c7TSa(R1) args: 0, res: 0, upd: 0;
       c7TSe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TSa() //  [R1]
         { info_tbl: [(c7TSa,
                       label: block_c7TSa_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TSa: // global
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.308371792 UTC

[section ""data" . GHC.Event.IntTable.insertWith_closure" {
     GHC.Event.IntTable.insertWith_closure:
         const GHC.Event.IntTable.insertWith_info;
 },
 GHC.Event.IntTable.insertWith_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7TSC,
                       label: GHC.Event.IntTable.insertWith_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TSC: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call insertWith2_r7SZ9_entry(R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.313824921 UTC

[section ""data" . GHC.Event.IntTable.$wreset_closure" {
     GHC.Event.IntTable.$wreset_closure:
         const GHC.Event.IntTable.$wreset_info;
 },
 $wgo_s7T47_entry() //  [R1, R2]
         { info_tbl: [(c7TTi,
                       label: $wgo_s7T47_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TTi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7TTj; else goto c7TTk;
       c7TTj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7TTk: // global
           I64[Sp - 24] = block_c7TTb_info;
           _s7T47::P64 = R1;
           _s7T3P::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _s7T3P::I64;
           P64[Sp - 8] = _s7T47::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TTH; else goto c7TTc;
       u7TTH: // global
           call _c7TTb(R1) args: 0, res: 0, upd: 0;
       c7TTc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TTb() //  [R1]
         { info_tbl: [(c7TTb,
                       label: block_c7TTb_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TTb: // global
           if (R1 & 7 == 1) goto c7TTf; else goto c7TTg;
       c7TTf: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TTg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TTs; else goto c7TTr;
       c7TTs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TTr: // global
           _s7T4b::P64 = P64[R1 + 6];
           _s7T4c::P64 = P64[R1 + 14];
           _s7T4a::I64 = I64[R1 + 22];
           if (_s7T4a::I64 == I64[Sp + 8]) goto c7TTG; else goto c7TTA;
       c7TTG: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T4b::P64;
           R3 = _s7T4c::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TTA: // global
           Hp = Hp - 16;
           I64[Sp] = block_c7TTw_info;
           R2 = _s7T4c::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _s7T4b::P64;
           I64[Sp + 16] = _s7T4a::I64;
           call $wgo_s7T47_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TTw() //  [R1, R2, R3]
         { info_tbl: [(c7TTw,
                       label: block_c7TTw_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TTw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TTD; else goto c7TTC;
       c7TTD: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       c7TTC: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$wreset_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TTM,
                       label: GHC.Event.IntTable.$wreset_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TTM: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7TTN; else goto c7TTO;
       c7TTN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wreset_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TTO: // global
           I64[Sp - 24] = block_c7TSN_info;
           R1 = R3;
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TUz; else goto c7TSO;
       u7TUz: // global
           call _c7TSN(R1) args: 0, res: 0, upd: 0;
       c7TSO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TSN() //  [R1]
         { info_tbl: [(c7TSN,
                       label: block_c7TSN_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TSN: // global
           _s7T3R::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7TTJ; else goto c7TTK;
       c7TTJ: // global
           I64[Sp] = block_c7TSS_info;
           R1 = P64[_s7T3R::P64 + 8];
           if (R1 & 7 != 0) goto u7TUy; else goto c7TST;
       u7TUy: // global
           call _c7TSS(R1) args: 0, res: 0, upd: 0;
       c7TST: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7TTK: // global
           I64[Sp + 16] = block_c7TUm_info;
           R5 = _s7T3R::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 16;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7TSS() //  [R1]
         { info_tbl: [(c7TSS,
                       label: block_c7TSS_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TSS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TTS; else goto c7TTR;
       c7TTS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TTR: // global
           _s7T3P::I64 = I64[Sp + 8];
           _s7T3Y::P64 = P64[R1 + 7];
           _s7T40::P64 = P64[R1 + 15];
           _s7T3Z::I64 = I64[R1 + 23];
           _s7T41::I64 = _s7T3P::I64 & (I64[_s7T3Y::P64 + 8] - 1);
           _s7T46::P64 = P64[(_s7T3Y::P64 + 24) + (_s7T41::I64 << 3)];
           I64[Hp - 8] = $wgo_s7T47_info;
           I64[Hp] = _s7T3P::I64;
           I64[Sp - 16] = block_c7TTT_info;
           R2 = _s7T46::P64;
           R1 = Hp - 7;
           I64[Sp - 8] = _s7T41::I64;
           P64[Sp] = _s7T40::P64;
           I64[Sp + 8] = _s7T3Z::I64;
           P64[Sp + 16] = _s7T3Y::P64;
           Sp = Sp - 16;
           call $wgo_s7T47_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TTT() //  [R1, R2, R3]
         { info_tbl: [(c7TTT,
                       label: block_c7TTT_info
                       rep:StackRep [True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TTT: // global
           I64[Sp - 16] = block_c7TTV_info;
           _s7T4l::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _s7T4l::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TUA; else goto c7TTX;
       u7TUA: // global
           call _c7TTV(R1) args: 0, res: 0, upd: 0;
       c7TTX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TTV() //  [R1]
         { info_tbl: [(c7TTV,
                       label: block_c7TTV_info
                       rep:StackRep [False, False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TTV: // global
           if (R1 & 7 == 1) goto u7TUw; else goto c7TU8;
       u7TUw: // global
           Sp = Sp + 56;
           call _c7TUf() args: 0, res: 0, upd: 0;
       c7TU8: // global
           _s7T3Y::P64 = P64[Sp + 48];
           _s7T41::I64 = I64[Sp + 24];
           _s7T4l::P64 = P64[Sp + 16];
           _s7T4n::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s7T3Y::P64 + 24) + (_s7T41::I64 << 3)] = _s7T4n::P64;
           I64[_s7T3Y::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7T3Y::P64 + 24) + ((I64[_s7T3Y::P64 + 8] << 3) + (_s7T41::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_c7TU6_info;
           R1 = _s7T4l::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u7TUB; else goto c7TU9;
       u7TUB: // global
           call _c7TU6(R1) args: 0, res: 0, upd: 0;
       c7TU9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TU6() //  [R1]
         { info_tbl: [(c7TU6,
                       label: block_c7TU6_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TU6: // global
           if (R1 & 7 == 1) goto u7TUx; else goto c7TUj;
       u7TUx: // global
           Sp = Sp + 32;
           call _c7TUf() args: 0, res: 0, upd: 0;
       c7TUj: // global
           _s7T3Z::I64 = I64[Sp + 16];
           _s7T40::P64 = P64[Sp + 8];
           I64[_s7T3Z::I64] = I64[_s7T3Z::I64] - 1;
           call MO_Touch(_s7T40::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7TUf() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TUf: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7TUm() //  []
         { info_tbl: [(c7TUm,
                       label: block_c7TUm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TUm: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.339597438 UTC

[section ""data" . GHC.Event.IntTable.reset1_closure" {
     GHC.Event.IntTable.reset1_closure:
         const GHC.Event.IntTable.reset1_info;
 },
 GHC.Event.IntTable.reset1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TVM,
                       label: GHC.Event.IntTable.reset1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TVM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7TVQ; else goto c7TVR;
       c7TVQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.reset1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TVR: // global
           I64[Sp - 24] = block_c7TVJ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7TVZ; else goto c7TVK;
       u7TVZ: // global
           call _c7TVJ(R1) args: 0, res: 0, upd: 0;
       c7TVK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TVJ() //  [R1]
         { info_tbl: [(c7TVJ,
                       label: block_c7TVJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TVJ: // global
           I64[Sp] = block_c7TVP_info;
           _s7T4H::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7T4H::I64;
           if (R1 & 7 != 0) goto u7TVY; else goto c7TVT;
       u7TVY: // global
           call _c7TVP(R1) args: 0, res: 0, upd: 0;
       c7TVT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TVP() //  [R1]
         { info_tbl: [(c7TVP,
                       label: block_c7TVP_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TVP: // global
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.IntTable.$wreset_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.347415818 UTC

[section ""data" . GHC.Event.IntTable.reset_closure" {
     GHC.Event.IntTable.reset_closure:
         const GHC.Event.IntTable.reset_info;
 },
 GHC.Event.IntTable.reset_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TWh,
                       label: GHC.Event.IntTable.reset_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TWh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.reset1_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.351965354 UTC

[section ""data" . GHC.Event.IntTable.$wlookup_closure" {
     GHC.Event.IntTable.$wlookup_closure:
         const GHC.Event.IntTable.$wlookup_info;
 },
 go_s7T50_entry() //  [R1, R2]
         { info_tbl: [(c7TWS,
                       label: go_s7T50_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TWS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7TWT; else goto u7TXb;
       c7TWT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u7TXb: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c7TWI() args: 0, res: 0, upd: 0;
     }
 },
 _c7TWI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TWI: // global
           _s7T4K::I64 = I64[P64[Sp] + 7];
           I64[Sp - 8] = block_c7TWL_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7T4K::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7TXd; else goto c7TWM;
       u7TXd: // global
           call _c7TWL(R1) args: 0, res: 0, upd: 0;
       c7TWM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TWL() //  [R1]
         { info_tbl: [(c7TWL,
                       label: block_c7TWL_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TWL: // global
           if (R1 & 7 == 1) goto c7TWP; else goto c7TWQ;
       c7TWP: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7TWQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TX2; else goto c7TX1;
       c7TX2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TX1: // global
           if (I64[R1 + 22] == I64[Sp + 16]) goto c7TXa; else goto c7TX6;
       c7TXa: // global
           _s7T54::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7T54::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7TX6: // global
           _s7T55::P64 = P64[R1 + 14];
           Hp = Hp - 16;
           P64[Sp + 16] = _s7T55::P64;
           Sp = Sp + 8;
           call _c7TWI() args: 0, res: 0, upd: 0;
     }
 },
 GHC.Event.IntTable.$wlookup_entry() //  [R2, R3]
         { info_tbl: [(c7TXg,
                       label: GHC.Event.IntTable.$wlookup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TXg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TXi; else goto c7TXj;
       c7TXi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wlookup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TXj: // global
           I64[Sp - 16] = block_c7TWs_info;
           R1 = P64[R3 + 8];
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TXr; else goto c7TWt;
       u7TXr: // global
           call _c7TWs(R1) args: 0, res: 0, upd: 0;
       c7TWt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TWs() //  [R1]
         { info_tbl: [(c7TWs,
                       label: block_c7TWs_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TWs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7TXm; else goto c7TXl;
       c7TXm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7TXl: // global
           _s7T4K::I64 = I64[Sp + 8];
           _s7T4R::P64 = P64[R1 + 7];
           _s7T4Z::P64 = P64[(_s7T4R::P64 + 24) + (_s7T4K::I64 & (I64[_s7T4R::P64 + 8] - 1) << 3)];
           I64[Hp - 8] = go_s7T50_info;
           I64[Hp] = _s7T4K::I64;
           I64[Sp + 8] = block_c7TXh_info;
           R2 = _s7T4Z::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s7T50_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TXh() //  [R1]
         { info_tbl: [(c7TXh,
                       label: block_c7TXh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TXh: // global
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.366757252 UTC

[section ""data" . GHC.Event.IntTable.lookup1_closure" {
     GHC.Event.IntTable.lookup1_closure:
         const GHC.Event.IntTable.lookup1_info;
 },
 GHC.Event.IntTable.lookup1_entry() //  [R2, R3]
         { info_tbl: [(c7TY6,
                       label: GHC.Event.IntTable.lookup1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TY6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7TYa; else goto c7TYb;
       c7TYa: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.lookup1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TYb: // global
           I64[Sp - 16] = block_c7TY3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7TYj; else goto c7TY4;
       u7TYj: // global
           call _c7TY3(R1) args: 0, res: 0, upd: 0;
       c7TY4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TY3() //  [R1]
         { info_tbl: [(c7TY3,
                       label: block_c7TY3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TY3: // global
           I64[Sp] = block_c7TY9_info;
           _s7T5c::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7T5c::I64;
           if (R1 & 7 != 0) goto u7TYi; else goto c7TYd;
       u7TYi: // global
           call _c7TY9(R1) args: 0, res: 0, upd: 0;
       c7TYd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7TY9() //  [R1]
         { info_tbl: [(c7TY9,
                       label: block_c7TY9_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TY9: // global
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.IntTable.$wlookup_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.374543651 UTC

[section ""data" . GHC.Event.IntTable.lookup_closure" {
     GHC.Event.IntTable.lookup_closure:
         const GHC.Event.IntTable.lookup_info;
 },
 GHC.Event.IntTable.lookup_entry() //  [R2, R3]
         { info_tbl: [(c7TYB,
                       label: GHC.Event.IntTable.lookup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TYB: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.lookup1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.377957832 UTC

[section ""cstring" . GHC.Event.IntTable.$trModule4_bytes" {
     GHC.Event.IntTable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.379743514 UTC

[section ""data" . GHC.Event.IntTable.$trModule3_closure" {
     GHC.Event.IntTable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.381709807 UTC

[section ""cstring" . GHC.Event.IntTable.$trModule2_bytes" {
     GHC.Event.IntTable.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.38346715 UTC

[section ""data" . GHC.Event.IntTable.$trModule1_closure" {
     GHC.Event.IntTable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.385228616 UTC

[section ""data" . GHC.Event.IntTable.$trModule_closure" {
     GHC.Event.IntTable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.IntTable.$trModule3_closure+1;
         const GHC.Event.IntTable.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.38711054 UTC

[section ""data" . $krep_r7SZa_closure" {
     $krep_r7SZa_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.388949378 UTC

[section ""data" . $krep1_r7SZb_closure" {
     $krep1_r7SZb_closure:
         const :_con_info;
         const $krep_r7SZa_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.390800265 UTC

[section ""data" . $krep2_r7SZc_closure" {
     $krep2_r7SZc_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep1_r7SZb_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.393696087 UTC

[section ""data" . $krep3_r7SZd_closure" {
     $krep3_r7SZd_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.395521995 UTC

[section ""cstring" . GHC.Event.IntTable.$tcBucket2_bytes" {
     GHC.Event.IntTable.$tcBucket2_bytes:
         I8[] [66,117,99,107,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.397357604 UTC

[section ""data" . GHC.Event.IntTable.$tcBucket1_closure" {
     GHC.Event.IntTable.$tcBucket1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcBucket2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.399092866 UTC

[section ""data" . GHC.Event.IntTable.$tcBucket_closure" {
     GHC.Event.IntTable.$tcBucket_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcBucket1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17735724201551259799;
         const 1580619789810252778;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.400934991 UTC

[section ""data" . $krep4_r7SZe_closure" {
     $krep4_r7SZe_closure:
         const :_con_info;
         const $krep3_r7SZd_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.402776791 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty1_closure" {
     GHC.Event.IntTable.$tc'Empty1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcBucket_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.404538499 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'Empty3_bytes" {
     GHC.Event.IntTable.$tc'Empty3_bytes:
         I8[] [39,69,109,112,116,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.406648402 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty2_closure" {
     GHC.Event.IntTable.$tc'Empty2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'Empty3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.408424089 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty_closure" {
     GHC.Event.IntTable.$tc'Empty_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'Empty2_closure+1;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const 14716594083905147916;
         const 6006296133869125928;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.410328977 UTC

[section ""data" . $krep5_r7SZf_closure" {
     $krep5_r7SZf_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.412088514 UTC

[section ""data" . $krep6_r7SZg_closure" {
     $krep6_r7SZg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7SZd_closure+2;
         const $krep5_r7SZf_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.413862361 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket1_closure" {
     GHC.Event.IntTable.$tc'Bucket1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7SZa_closure+1;
         const $krep6_r7SZg_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.41567892 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'Bucket3_bytes" {
     GHC.Event.IntTable.$tc'Bucket3_bytes:
         I8[] [39,66,117,99,107,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.417397791 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket2_closure" {
     GHC.Event.IntTable.$tc'Bucket2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'Bucket3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.419944722 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket_closure" {
     GHC.Event.IntTable.$tc'Bucket_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'Bucket2_closure+1;
         const GHC.Event.IntTable.$tc'Bucket1_closure+4;
         const 13477734220520722226;
         const 15099239145624852322;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.4222818 UTC

[section ""data" . $krep7_r7SZh_closure" {
     $krep7_r7SZh_closure:
         const :_con_info;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.424069695 UTC

[section ""data" . $krep8_r7SZi_closure" {
     $krep8_r7SZi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Arr.$tcArr_closure;
         const $krep7_r7SZh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.425860389 UTC

[section ""cstring" . GHC.Event.IntTable.$tcIT2_bytes" {
     GHC.Event.IntTable.$tcIT2_bytes:
         I8[] [73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.427668398 UTC

[section ""data" . GHC.Event.IntTable.$tcIT1_closure" {
     GHC.Event.IntTable.$tcIT1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcIT2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.429498698 UTC

[section ""data" . GHC.Event.IntTable.$tcIT_closure" {
     GHC.Event.IntTable.$tcIT_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcIT1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 1485413372890074222;
         const 7871673693356487434;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.431384759 UTC

[section ""data" . $krep9_r7SZj_closure" {
     $krep9_r7SZj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcIT_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.433174081 UTC

[section ""data" . $krep10_r7SZk_closure" {
     $krep10_r7SZk_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r7SZc_closure+1;
         const $krep9_r7SZj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.435422116 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT1_closure" {
     GHC.Event.IntTable.$tc'IT1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7SZi_closure+1;
         const $krep10_r7SZk_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.437273001 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'IT3_bytes" {
     GHC.Event.IntTable.$tc'IT3_bytes:
         I8[] [39,73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.43902473 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT2_closure" {
     GHC.Event.IntTable.$tc'IT2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'IT3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.440792148 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT_closure" {
     GHC.Event.IntTable.$tc'IT_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'IT2_closure+1;
         const GHC.Event.IntTable.$tc'IT1_closure+4;
         const 2061931487051656996;
         const 1303251193055522557;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.442824458 UTC

[section ""data" . $krep11_r7SZl_closure" {
     $krep11_r7SZl_closure:
         const :_con_info;
         const $krep9_r7SZj_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.444657496 UTC

[section ""data" . $krep12_r7SZm_closure" {
     $krep12_r7SZm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep11_r7SZl_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.447206079 UTC

[section ""cstring" . GHC.Event.IntTable.$tcIntTable2_bytes" {
     GHC.Event.IntTable.$tcIntTable2_bytes:
         I8[] [73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.449008223 UTC

[section ""data" . GHC.Event.IntTable.$tcIntTable1_closure" {
     GHC.Event.IntTable.$tcIntTable1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcIntTable2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.451211026 UTC

[section ""data" . GHC.Event.IntTable.$tcIntTable_closure" {
     GHC.Event.IntTable.$tcIntTable_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcIntTable1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 12646307913912198429;
         const 5258607314097228638;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.453169172 UTC

[section ""data" . $krep13_r7SZn_closure" {
     $krep13_r7SZn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcIntTable_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.454966474 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable1_closure" {
     GHC.Event.IntTable.$tc'IntTable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7SZm_closure+1;
         const $krep13_r7SZn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.45679802 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'IntTable3_bytes" {
     GHC.Event.IntTable.$tc'IntTable3_bytes:
         I8[] [39,73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.458499414 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable2_closure" {
     GHC.Event.IntTable.$tc'IntTable2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'IntTable3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.460242033 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable_closure" {
     GHC.Event.IntTable.$tc'IntTable_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'IntTable2_closure+1;
         const GHC.Event.IntTable.$tc'IntTable1_closure+4;
         const 17952658267866828845;
         const 12036984593740445577;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.462249221 UTC

[section ""data" . GHC.Event.IntTable.Empty_closure" {
     GHC.Event.IntTable.Empty_closure:
         const GHC.Event.IntTable.Empty_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.464360118 UTC

[section ""data" . GHC.Event.IntTable.Bucket_closure" {
     GHC.Event.IntTable.Bucket_closure:
         const GHC.Event.IntTable.Bucket_info;
 },
 GHC.Event.IntTable.Bucket_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TZw,
                       label: GHC.Event.IntTable.Bucket_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TZw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TZA; else goto c7TZz;
       c7TZA: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.Bucket_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TZz: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           I64[Hp] = R2;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.468570703 UTC

[section ""data" . GHC.Event.IntTable.IT_closure" {
     GHC.Event.IntTable.IT_closure:
         const GHC.Event.IntTable.IT_info;
 },
 GHC.Event.IntTable.IT_entry() //  [R2, R3, R4]
         { info_tbl: [(c7TZL,
                       label: GHC.Event.IntTable.IT_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TZL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7TZP; else goto c7TZO;
       c7TZP: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.IT_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7TZO: // global
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           I64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.472887858 UTC

[GHC.Event.IntTable.Empty_con_entry() //  [R1]
         { info_tbl: [(c7TZV,
                       label: GHC.Event.IntTable.Empty_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,69,109,112,116,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7TZV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.476919176 UTC

[GHC.Event.IntTable.Bucket_con_entry() //  [R1]
         { info_tbl: [(c7U01,
                       label: GHC.Event.IntTable.Bucket_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,66,117,99,107,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U01: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.4804786 UTC

[GHC.Event.IntTable.IT_con_entry() //  [R1]
         { info_tbl: [(c7U07,
                       label: GHC.Event.IntTable.IT_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,73,84]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U07: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:00.483771805 UTC

[section ""relreadonly" . S7T63_srt" {
     S7T63_srt:
         const Control.Exception.Base.recSelError_closure;
         const GHC.Event.IntTable.bucketNext_closure;
         const GHC.Event.IntTable.bucketNext1_closure;
         const GHC.Event.IntTable.bucketValue_closure;
         const GHC.Event.IntTable.bucketValue1_closure;
         const GHC.Event.IntTable.bucketKey_closure;
         const GHC.Event.IntTable.bucketKey1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.581853667 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:01.583586041 UTC

[section ""data" . GHC.Event.IntTable.$WBucket_closure" {
     GHC.Event.IntTable.$WBucket_closure:
         const GHC.Event.IntTable.$WBucket_info;
 },
 GHC.Event.IntTable.$WBucket_entry() //  [R2, R3, R4]
         { info_tbl: [(c7U6b,
                       label: GHC.Event.IntTable.$WBucket_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U6b: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7U6f; else goto c7U6g;
       c7U6f: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$WBucket_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7U6g: // global
           I64[Sp - 24] = block_c7U68_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7U6k; else goto c7U69;
       u7U6k: // global
           call _c7U68(R1) args: 0, res: 0, upd: 0;
       c7U69: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7U68() //  [R1]
         { info_tbl: [(c7U68,
                       label: block_c7U68_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U68: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7U6j; else goto c7U6i;
       c7U6j: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7U6i: // global
           _s7U0i::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s7U0i::I64;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.590905814 UTC

[section ""data" . GHC.Event.IntTable.$WIT_closure" {
     GHC.Event.IntTable.$WIT_closure:
         const GHC.Event.IntTable.$WIT_info;
 },
 GHC.Event.IntTable.$WIT_entry() //  [R2, R3]
         { info_tbl: [(c7U6G,
                       label: GHC.Event.IntTable.$WIT_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U6G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7U6P; else goto c7U6Q;
       c7U6P: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$WIT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7U6Q: // global
           I64[Sp - 16] = block_c7U6D_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7U6W; else goto c7U6E;
       u7U6W: // global
           call _c7U6D(R1) args: 0, res: 0, upd: 0;
       c7U6E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7U6D() //  [R1]
         { info_tbl: [(c7U6D,
                       label: block_c7U6D_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U6D: // global
           I64[Sp] = block_c7U6J_info;
           _s7U0m::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7U0m::P64;
           if (R1 & 7 != 0) goto u7U6V; else goto c7U6K;
       u7U6V: // global
           call _c7U6J(R1) args: 0, res: 0, upd: 0;
       c7U6K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7U6J() //  [R1]
         { info_tbl: [(c7U6J,
                       label: block_c7U6J_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U6J: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7U6U; else goto c7U6T;
       c7U6U: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7U6T: // global
           _s7U0p::P64 = P64[R1 + 7];
           _s7U0o::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s7U0p::P64;
           I64[Hp] = _s7U0o::I64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.598475182 UTC

[section ""cstring" . lvl_r7SZ3_bytes" {
     lvl_r7SZ3_bytes:
         I8[] [98,117,99,107,101,116,78,101,120,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.600422533 UTC

[section ""data" . GHC.Event.IntTable.bucketNext1_closure" {
     GHC.Event.IntTable.bucketNext1_closure:
         const GHC.Event.IntTable.bucketNext1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketNext1_entry() //  [R1]
         { info_tbl: [(c7U7m,
                       label: GHC.Event.IntTable.bucketNext1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U7m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7U7n; else goto c7U7o;
       c7U7n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7U7o: // global
           (_c7U7j::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7U7j::I64 == 0) goto c7U7l; else goto c7U7k;
       c7U7l: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7U7k: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7U7j::I64;
           R2 = lvl_r7SZ3_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.604948521 UTC

[section ""data" . GHC.Event.IntTable.bucketNext_closure" {
     GHC.Event.IntTable.bucketNext_closure:
         const GHC.Event.IntTable.bucketNext_info;
         const 0;
 },
 GHC.Event.IntTable.bucketNext_entry() //  [R2]
         { info_tbl: [(c7U7J,
                       label: GHC.Event.IntTable.bucketNext_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U7J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7U7K; else goto c7U7L;
       c7U7K: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketNext_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7U7L: // global
           I64[Sp - 8] = block_c7U7C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7U7S; else goto c7U7D;
       u7U7S: // global
           call _c7U7C(R1) args: 0, res: 0, upd: 0;
       c7U7D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7U7C() //  [R1]
         { info_tbl: [(c7U7C,
                       label: block_c7U7C_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U7C: // global
           if (R1 & 7 == 1) goto c7U7G; else goto c7U7H;
       c7U7G: // global
           R1 = GHC.Event.IntTable.bucketNext1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7U7H: // global
           R1 = P64[R1 + 14] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.612955596 UTC

[section ""cstring" . lvl1_r7SZ4_bytes" {
     lvl1_r7SZ4_bytes:
         I8[] [98,117,99,107,101,116,86,97,108,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.61513699 UTC

[section ""data" . GHC.Event.IntTable.bucketValue1_closure" {
     GHC.Event.IntTable.bucketValue1_closure:
         const GHC.Event.IntTable.bucketValue1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketValue1_entry() //  [R1]
         { info_tbl: [(c7U8f,
                       label: GHC.Event.IntTable.bucketValue1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U8f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7U8g; else goto c7U8h;
       c7U8g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7U8h: // global
           (_c7U8c::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7U8c::I64 == 0) goto c7U8e; else goto c7U8d;
       c7U8e: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7U8d: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7U8c::I64;
           R2 = lvl1_r7SZ4_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.620648784 UTC

[section ""data" . GHC.Event.IntTable.bucketValue_closure" {
     GHC.Event.IntTable.bucketValue_closure:
         const GHC.Event.IntTable.bucketValue_info;
         const 0;
 },
 GHC.Event.IntTable.bucketValue_entry() //  [R2]
         { info_tbl: [(c7U8B,
                       label: GHC.Event.IntTable.bucketValue_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U8B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7U8C; else goto c7U8D;
       c7U8C: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketValue_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7U8D: // global
           I64[Sp - 8] = block_c7U8u_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7U8K; else goto c7U8v;
       u7U8K: // global
           call _c7U8u(R1) args: 0, res: 0, upd: 0;
       c7U8v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7U8u() //  [R1]
         { info_tbl: [(c7U8u,
                       label: block_c7U8u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U8u: // global
           if (R1 & 7 == 1) goto c7U8y; else goto c7U8z;
       c7U8y: // global
           R1 = GHC.Event.IntTable.bucketValue1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7U8z: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.626346697 UTC

[section ""cstring" . lvl2_r7SZ5_bytes" {
     lvl2_r7SZ5_bytes:
         I8[] [98,117,99,107,101,116,75,101,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.628337968 UTC

[section ""data" . GHC.Event.IntTable.bucketKey1_closure" {
     GHC.Event.IntTable.bucketKey1_closure:
         const GHC.Event.IntTable.bucketKey1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.IntTable.bucketKey1_entry() //  [R1]
         { info_tbl: [(c7U94,
                       label: GHC.Event.IntTable.bucketKey1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U94: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7U95; else goto c7U96;
       c7U95: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7U96: // global
           (_c7U91::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7U91::I64 == 0) goto c7U93; else goto c7U92;
       c7U93: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7U92: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7U91::I64;
           R2 = lvl2_r7SZ5_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.recSelError_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.63302445 UTC

[section ""data" . GHC.Event.IntTable.bucketKey_closure" {
     GHC.Event.IntTable.bucketKey_closure:
         const GHC.Event.IntTable.bucketKey_info;
         const 0;
 },
 GHC.Event.IntTable.bucketKey_entry() //  [R2]
         { info_tbl: [(c7U9q,
                       label: GHC.Event.IntTable.bucketKey_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U9q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7U9r; else goto c7U9s;
       c7U9r: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.bucketKey_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7U9s: // global
           I64[Sp - 8] = block_c7U9j_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7U9C; else goto c7U9k;
       u7U9C: // global
           call _c7U9j(R1) args: 0, res: 0, upd: 0;
       c7U9k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7U9j() //  [R1]
         { info_tbl: [(c7U9j,
                       label: block_c7U9j_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U9j: // global
           if (R1 & 7 == 1) goto c7U9n; else goto c7U9o;
       c7U9n: // global
           R1 = GHC.Event.IntTable.bucketKey1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7U9o: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7U9B; else goto c7U9A;
       c7U9B: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7U9A: // global
           _s7U0C::I64 = I64[R1 + 22];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7U0C::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.639955574 UTC

[section ""data" . GHC.Event.IntTable.tabSize_closure" {
     GHC.Event.IntTable.tabSize_closure:
         const GHC.Event.IntTable.tabSize_info;
 },
 GHC.Event.IntTable.tabSize_entry() //  [R2]
         { info_tbl: [(c7U9Z,
                       label: GHC.Event.IntTable.tabSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U9Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ua3; else goto c7Ua4;
       c7Ua3: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.tabSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ua4: // global
           I64[Sp - 8] = block_c7U9W_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ua8; else goto c7U9X;
       u7Ua8: // global
           call _c7U9W(R1) args: 0, res: 0, upd: 0;
       c7U9X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7U9W() //  [R1]
         { info_tbl: [(c7U9W,
                       label: block_c7U9W_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7U9W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Ua7; else goto c7Ua6;
       c7Ua7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ua6: // global
           _s7U0J::P64 = P64[R1 + 15];
           _s7U0I::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = _s7U0J::P64;
           I64[Hp] = _s7U0I::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.646133255 UTC

[section ""data" . GHC.Event.IntTable.tabArr_closure" {
     GHC.Event.IntTable.tabArr_closure:
         const GHC.Event.IntTable.tabArr_info;
 },
 GHC.Event.IntTable.tabArr_entry() //  [R2]
         { info_tbl: [(c7Uas,
                       label: GHC.Event.IntTable.tabArr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uas: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Uaw; else goto c7Uax;
       c7Uaw: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.tabArr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Uax: // global
           I64[Sp - 8] = block_c7Uap_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7UaB; else goto c7Uaq;
       u7UaB: // global
           call _c7Uap(R1) args: 0, res: 0, upd: 0;
       c7Uaq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Uap() //  [R1]
         { info_tbl: [(c7Uap,
                       label: block_c7Uap_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uap: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7UaA; else goto c7Uaz;
       c7UaA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Uaz: // global
           _s7U0M::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = _s7U0M::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.653896684 UTC

[section ""data" . GHC.Event.IntTable.$wnew_closure" {
     GHC.Event.IntTable.$wnew_closure:
         const GHC.Event.IntTable.$wnew_info;
 },
 GHC.Event.IntTable.$wnew_entry() //  [R2]
         { info_tbl: [(c7Ub0,
                       label: GHC.Event.IntTable.$wnew_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ub0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Ub8; else goto c7Ub9;
       c7Ub8: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.$wnew_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ub9: // global
           I64[Sp - 8] = block_c7UaS_info;
           _s7U0P::I64 = R2;
           R2 = GHC.Event.IntTable.Empty_closure+1;
           R1 = _s7U0P::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UaS() //  [R1]
         { info_tbl: [(c7UaS,
                       label: block_c7UaS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UaS: // global
           I64[Sp - 8] = block_c7UaU_info;
           _s7U0T::P64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp] = _s7U0T::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UaU() //  [R1]
         { info_tbl: [(c7UaU,
                       label: block_c7UaU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UaU: // global
           I64[Sp - 8] = block_c7UaW_info;
           R2 = 8;
           _s7U0W::P64 = R1;
           R1 = 8;
           P64[Sp] = _s7U0W::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UaW() //  [R1]
         { info_tbl: [(c7UaW,
                       label: block_c7UaW_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UaW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7Ube; else goto c7Ubd;
       c7Ube: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ubd: // global
           _s7U0T::P64 = P64[Sp + 16];
           _s7U0W::P64 = P64[Sp + 8];
           _s7U10::I64 = R1 + 16;
           I64[_s7U10::I64] = 0;
           I64[Hp - 48] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = _s7U0W::P64;
           _c7Ub2::P64 = Hp - 46;
           call MO_Touch(_c7Ub2::P64);
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = _s7U0T::P64;
           P64[Hp - 8] = _c7Ub2::P64;
           I64[Hp] = _s7U10::I64;
           I64[Sp + 16] = block_c7Ub5_info;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ub5() //  [R1]
         { info_tbl: [(c7Ub5,
                       label: block_c7Ub5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ub5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Ubh; else goto c7Ubg;
       c7Ubh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ubg: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.665104583 UTC

[section ""data" . GHC.Event.IntTable.new1_closure" {
     GHC.Event.IntTable.new1_closure:
         const GHC.Event.IntTable.new1_info;
 },
 GHC.Event.IntTable.new1_entry() //  [R2]
         { info_tbl: [(c7UbP,
                       label: GHC.Event.IntTable.new1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UbP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7UbQ; else goto c7UbR;
       c7UbQ: // global
           R2 = R2;
           R1 = GHC.Event.IntTable.new1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7UbR: // global
           I64[Sp - 8] = block_c7UbM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7UbV; else goto c7UbN;
       u7UbV: // global
           call _c7UbM(R1) args: 0, res: 0, upd: 0;
       c7UbN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UbM() //  [R1]
         { info_tbl: [(c7UbM,
                       label: block_c7UbM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UbM: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.IntTable.$wnew_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.670482874 UTC

[section ""data" . GHC.Event.IntTable.new_closure" {
     GHC.Event.IntTable.new_closure:
         const GHC.Event.IntTable.new_info;
 },
 GHC.Event.IntTable.new_entry() //  [R2]
         { info_tbl: [(c7Uca,
                       label: GHC.Event.IntTable.new_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uca: // global
           R2 = R2;
           call GHC.Event.IntTable.new1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.676076777 UTC

[section ""data" . GHC.Event.IntTable.$wupdateWith_closure" {
     GHC.Event.IntTable.$wupdateWith_closure:
         const GHC.Event.IntTable.$wupdateWith_info;
 },
 $wgo_s7U1u_entry() //  [R1, R2]
         { info_tbl: [(c7UcL,
                       label: $wgo_s7U1u_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UcL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7UcM; else goto c7UcN;
       c7UcM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7UcN: // global
           I64[Sp - 32] = block_c7UcE_info;
           _s7U1u::P64 = R1;
           _s7U1d::P64 = P64[R1 + 7];
           _s7U1e::I64 = I64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s7U1d::P64;
           I64[Sp - 16] = _s7U1e::I64;
           P64[Sp - 8] = _s7U1u::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7Udq; else goto c7UcF;
       u7Udq: // global
           call _c7UcE(R1) args: 0, res: 0, upd: 0;
       c7UcF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UcE() //  [R1]
         { info_tbl: [(c7UcE,
                       label: block_c7UcE_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UcE: // global
           if (R1 & 7 == 1) goto c7UcI; else goto c7UcJ;
       c7UcI: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7UcJ: // global
           _s7U1y::P64 = P64[R1 + 6];
           _s7U1z::P64 = P64[R1 + 14];
           _s7U1x::I64 = I64[R1 + 22];
           if (_s7U1x::I64 == I64[Sp + 16]) goto c7Ud7; else goto c7Ud1;
       c7Ud7: // global
           I64[Sp] = block_c7Ud6_info;
           R2 = _s7U1y::P64;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7U1z::P64;
           P64[Sp + 16] = _s7U1y::P64;
           I64[Sp + 24] = _s7U1x::I64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c7Ud1: // global
           I64[Sp + 8] = block_c7UcX_info;
           R2 = _s7U1z::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _s7U1y::P64;
           I64[Sp + 24] = _s7U1x::I64;
           Sp = Sp + 8;
           call $wgo_s7U1u_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ud6() //  [R1]
         { info_tbl: [(c7Ud6,
                       label: block_c7Ud6_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ud6: // global
           _s7U1y::P64 = P64[Sp + 16];
           _s7U1z::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7Udd; else goto c7Udl;
       c7Udd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Udg; else goto c7Udf;
       c7Udg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Udf: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7U1y::P64;
           R3 = _s7U1z::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Udl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7Udo; else goto c7Udn;
       c7Udo: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Udn: // global
           _s7U1I::P64 = P64[R1 + 6];
           I64[Hp - 40] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 32] = _s7U1I::P64;
           P64[Hp - 24] = _s7U1z::P64;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7U1y::P64;
           R3 = Hp - 38;
           R2 = Hp - 6;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7UcX() //  [R1, R2, R3]
         { info_tbl: [(c7UcX,
                       label: block_c7UcX_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UcX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Ud4; else goto c7Ud3;
       c7Ud4: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       c7Ud3: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$wupdateWith_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Udr,
                       label: GHC.Event.IntTable.$wupdateWith_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Udr: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7Uds; else goto c7Udt;
       c7Uds: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wupdateWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Udt: // global
           I64[Sp - 24] = block_c7Ucl_info;
           R1 = P64[R4 + 8];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Ue4; else goto c7Ucm;
       u7Ue4: // global
           call _c7Ucl(R1) args: 0, res: 0, upd: 0;
       c7Ucm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ucl() //  [R1]
         { info_tbl: [(c7Ucl,
                       label: block_c7Ucl_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ucl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Udw; else goto c7Udv;
       c7Udw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Udv: // global
           _s7U1e::I64 = I64[Sp + 16];
           _s7U1l::P64 = P64[R1 + 7];
           _s7U1n::P64 = P64[R1 + 15];
           _s7U1m::I64 = I64[R1 + 23];
           _s7U1o::I64 = _s7U1e::I64 & (I64[_s7U1l::P64 + 8] - 1);
           _s7U1t::P64 = P64[(_s7U1l::P64 + 24) + (_s7U1o::I64 << 3)];
           I64[Hp - 16] = $wgo_s7U1u_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s7U1e::I64;
           I64[Sp - 16] = block_c7Udx_info;
           R2 = _s7U1t::P64;
           R1 = Hp - 15;
           I64[Sp - 8] = _s7U1o::I64;
           P64[Sp] = _s7U1n::P64;
           I64[Sp + 8] = _s7U1m::I64;
           P64[Sp + 16] = _s7U1l::P64;
           Sp = Sp - 16;
           call $wgo_s7U1u_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Udx() //  [R1, R2, R3]
         { info_tbl: [(c7Udx,
                       label: block_c7Udx_info
                       rep:StackRep [True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Udx: // global
           I64[Sp - 16] = block_c7Udz_info;
           _s7U1M::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _s7U1M::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Ue5; else goto c7UdB;
       u7Ue5: // global
           call _c7Udz(R1) args: 0, res: 0, upd: 0;
       c7UdB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Udz() //  [R1]
         { info_tbl: [(c7Udz,
                       label: block_c7Udz_info
                       rep:StackRep [False, False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Udz: // global
           if (R1 & 7 == 1) goto c7UdH; else goto c7UdM;
       c7UdH: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7UdM: // global
           _s7U1l::P64 = P64[Sp + 48];
           _s7U1o::I64 = I64[Sp + 24];
           _s7U1M::P64 = P64[Sp + 16];
           _s7U1O::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s7U1l::P64 + 24) + (_s7U1o::I64 << 3)] = _s7U1O::P64;
           I64[_s7U1l::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7U1l::P64 + 24) + ((I64[_s7U1l::P64 + 8] << 3) + (_s7U1o::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_c7UdK_info;
           _s7U1P::P64 = R1;
           R1 = _s7U1M::P64;
           P64[Sp + 48] = _s7U1P::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u7Ue6; else goto c7UdN;
       u7Ue6: // global
           call _c7UdK(R1) args: 0, res: 0, upd: 0;
       c7UdN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UdK() //  [R1]
         { info_tbl: [(c7UdK,
                       label: block_c7UdK_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UdK: // global
           _s7U1P::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c7UdT; else goto c7UdX;
       c7UdT: // global
           R1 = _s7U1P::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7UdX: // global
           _s7U1m::I64 = I64[Sp + 16];
           _s7U1n::P64 = P64[Sp + 8];
           I64[_s7U1m::I64] = I64[_s7U1m::I64] - 1;
           call MO_Touch(_s7U1n::P64);
           R1 = _s7U1P::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.700701241 UTC

[section ""data" . GHC.Event.IntTable.delete3_closure" {
     GHC.Event.IntTable.delete3_closure:
         const GHC.Event.IntTable.delete3_info;
 },
 GHC.Event.IntTable.delete3_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Ufu,
                       label: GHC.Event.IntTable.delete3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ufu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Ufy; else goto c7Ufz;
       c7Ufy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.delete3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ufz: // global
           I64[Sp - 24] = block_c7Ufr_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7UfH; else goto c7Ufs;
       u7UfH: // global
           call _c7Ufr(R1) args: 0, res: 0, upd: 0;
       c7Ufs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ufr() //  [R1]
         { info_tbl: [(c7Ufr,
                       label: block_c7Ufr_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ufr: // global
           I64[Sp] = block_c7Ufx_info;
           _s7U24::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7U24::I64;
           if (R1 & 7 != 0) goto u7UfG; else goto c7UfB;
       u7UfG: // global
           call _c7Ufx(R1) args: 0, res: 0, upd: 0;
       c7UfB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ufx() //  [R1]
         { info_tbl: [(c7Ufx,
                       label: block_c7Ufx_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ufx: // global
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.IntTable.$wupdateWith_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.709924136 UTC

[section ""data" . GHC.Event.IntTable.updateWith_closure" {
     GHC.Event.IntTable.updateWith_closure:
         const GHC.Event.IntTable.updateWith_info;
 },
 GHC.Event.IntTable.updateWith_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Ug1,
                       label: GHC.Event.IntTable.updateWith_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ug1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.delete3_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.713421298 UTC

[section ""data" . GHC.Event.IntTable.delete2_closure" {
     GHC.Event.IntTable.delete2_closure:
         const GHC.Event.IntTable.delete2_info;
 },
 GHC.Event.IntTable.delete2_entry() //  []
         { info_tbl: [(c7Ugc,
                       label: GHC.Event.IntTable.delete2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ugc: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.717607183 UTC

[section ""data" . GHC.Event.IntTable.delete1_closure" {
     GHC.Event.IntTable.delete1_closure:
         const GHC.Event.IntTable.delete1_info;
 },
 GHC.Event.IntTable.delete1_entry() //  [R2, R3]
         { info_tbl: [(c7Ugs,
                       label: GHC.Event.IntTable.delete1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ugs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Ugw; else goto c7Ugx;
       c7Ugw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.delete1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ugx: // global
           I64[Sp - 16] = block_c7Ugp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7UgF; else goto c7Ugq;
       u7UgF: // global
           call _c7Ugp(R1) args: 0, res: 0, upd: 0;
       c7Ugq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ugp() //  [R1]
         { info_tbl: [(c7Ugp,
                       label: block_c7Ugp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ugp: // global
           I64[Sp] = block_c7Ugv_info;
           _s7U2c::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7U2c::I64;
           if (R1 & 7 != 0) goto u7UgE; else goto c7Ugz;
       u7UgE: // global
           call _c7Ugv(R1) args: 0, res: 0, upd: 0;
       c7Ugz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ugv() //  [R1]
         { info_tbl: [(c7Ugv,
                       label: block_c7Ugv_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ugv: // global
           R4 = P64[R1 + 7];
           R3 = I64[Sp + 8];
           R2 = GHC.Event.IntTable.delete2_closure+1;
           Sp = Sp + 16;
           call GHC.Event.IntTable.$wupdateWith_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.726079526 UTC

[section ""data" . GHC.Event.IntTable.delete_closure" {
     GHC.Event.IntTable.delete_closure:
         const GHC.Event.IntTable.delete_info;
 },
 GHC.Event.IntTable.delete_entry() //  [R2, R3]
         { info_tbl: [(c7UgZ,
                       label: GHC.Event.IntTable.delete_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UgZ: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.delete1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.734549439 UTC

[section ""data" . GHC.Event.IntTable.$wgrow_closure" {
     GHC.Event.IntTable.$wgrow_closure:
         const GHC.Event.IntTable.$wgrow_info;
 },
 GHC.Event.IntTable.$wgrow_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Uhc,
                       label: GHC.Event.IntTable.$wgrow_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 22} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uhc: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c7Uhd; else goto c7Uhe;
       c7Uhd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wgrow_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Uhe: // global
           I64[Sp - 32] = block_c7Uhj_info;
           _s7U2f::P64 = R2;
           _s7U2k::I64 = I64[R2 + 8] << 1;
           R2 = GHC.Event.IntTable.Empty_closure+1;
           R1 = _s7U2k::I64;
           P64[Sp - 24] = _s7U2f::P64;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Uhj() //  [R1]
         { info_tbl: [(c7Uhj,
                       label: block_c7Uhj_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uhj: // global
           I64[Sp - 8] = block_c7Uhl_info;
           _s7U2n::P64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp] = _s7U2n::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Uhl() //  [R1]
         { info_tbl: [(c7Uhl,
                       label: block_c7Uhl_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uhl: // global
           I64[Sp - 8] = block_c7Uhn_info;
           R2 = 8;
           _s7U2q::P64 = R1;
           R1 = 8;
           P64[Sp] = _s7U2q::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Uhn() //  [R1]
         { info_tbl: [(c7Uhn,
                       label: block_c7Uhn_info
                       rep:StackRep [False, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uhn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Uht; else goto c7Uhs;
       c7Uht: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Uhs: // global
           _s7U2q::P64 = P64[Sp + 8];
           _s7U2u::I64 = R1 + 16;
           I64[_s7U2u::I64] = 0;
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = _s7U2q::P64;
           _c7Uhx::P64 = Hp - 14;
           call MO_Touch(_c7Uhx::P64);
           I64[Sp - 16] = 0;
           I64[Sp - 8] = 0;
           I64[Sp] = _s7U2u::I64;
           P64[Sp + 8] = _c7Uhx::P64;
           Sp = Sp - 16;
           call _c7UhJ() args: 0, res: 0, upd: 0;
     }
 },
 _c7UhJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UhJ: // global
           _s7U2F::I64 = I64[Sp];
           if (_s7U2F::I64 == I64[Sp + 56]) goto u7UiC; else goto c7Uih;
       u7UiC: // global
           Sp = Sp + 8;
           call _c7UhC() args: 0, res: 0, upd: 0;
       c7Uih: // global
           P64[Sp - 8] = P64[P64[Sp + 40] + ((I64[Sp + 8] << 3) + 24)];
           I64[Sp] = _s7U2F::I64;
           Sp = Sp - 8;
           call _c7UhY() args: 0, res: 0, upd: 0;
     }
 },
 _c7UhC() //  []
         { info_tbl: [(c7UhC,
                       label: block_c7UhC_info
                       rep:StackRep [True, False, False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UhC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7UhG; else goto c7UhF;
       c7UhG: // global
           HpAlloc = 32;
           I64[Sp] = block_c7UhC_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7UhF: // global
           _c7Uhx::P64 = P64[Sp + 16];
           _s7U2g::P64 = P64[Sp + 40];
           _s7U2n::P64 = P64[Sp + 24];
           _s7U2u::I64 = I64[Sp + 8];
           I64[_s7U2u::I64] = I64[Sp + 48];
           call MO_Touch(_c7Uhx::P64);
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = _s7U2n::P64;
           P64[Hp - 8] = _c7Uhx::P64;
           I64[Hp] = _s7U2u::I64;
           call MO_WriteBarrier();
           P64[_s7U2g::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7U2g::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7UhY() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UhY: // global
           _s7U2S::P64 = P64[Sp];
           I64[Sp] = block_c7Ui1_info;
           R1 = _s7U2S::P64;
           if (R1 & 7 != 0) goto u7UiJ; else goto c7Ui3;
       u7UiJ: // global
           call _c7Ui1(R1) args: 0, res: 0, upd: 0;
       c7Ui3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ui1() //  [R1]
         { info_tbl: [(c7Ui1,
                       label: block_c7Ui1_info
                       rep:StackRep [True, True, True, False, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ui1: // global
           _s7U2R::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto c7Ui9; else goto c7Uia;
       c7Ui9: // global
           I64[Sp + 8] = _s7U2R::I64;
           I64[Sp + 16] = I64[Sp + 16] + 1;
           Sp = Sp + 8;
           call _c7UhJ() args: 0, res: 0, upd: 0;
       c7Uia: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Uif; else goto c7Uie;
       c7Uif: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Uie: // global
           _s7U2n::P64 = P64[Sp + 40];
           _s7U2W::P64 = P64[R1 + 6];
           _s7U2X::P64 = P64[R1 + 14];
           _s7U2V::I64 = I64[R1 + 22];
           _s7U2Y::I64 = _s7U2V::I64 & (I64[_s7U2n::P64 + 8] - 1);
           _s7U33::P64 = P64[(_s7U2n::P64 + 24) + (_s7U2Y::I64 << 3)];
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7U2W::P64;
           P64[Hp - 8] = _s7U33::P64;
           I64[Hp] = _s7U2V::I64;
           call MO_WriteBarrier();
           P64[(_s7U2n::P64 + 24) + (_s7U2Y::I64 << 3)] = Hp - 22;
           I64[_s7U2n::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7U2n::P64 + 24) + ((I64[_s7U2n::P64 + 8] << 3) + (_s7U2Y::I64 >> 7))] = 1 :: W8;
           I64[Sp + 8] = _s7U2R::I64 + 1;
           P64[Sp] = _s7U2X::P64;
           call _c7UhY() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.756972445 UTC

[section ""data" . poly_<>_r7SZ6_closure" {
     poly_<>_r7SZ6_closure:
         const poly_<>_r7SZ6_info;
 },
 sat_s7U3d_entry() //  [R1]
         { info_tbl: [(c7UjS,
                       label: sat_s7U3d_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UjS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7UjT; else goto c7UjU;
       c7UjT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7UjU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call poly_<>_r7SZ6_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_<>_r7SZ6_entry() //  [R2, R3]
         { info_tbl: [(c7UjZ,
                       label: poly_<>_r7SZ6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UjZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Uk0; else goto c7Uk1;
       c7Uk0: // global
           R3 = R3;
           R2 = R2;
           R1 = poly_<>_r7SZ6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Uk1: // global
           I64[Sp - 16] = block_c7UjI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Uk8; else goto c7UjJ;
       u7Uk8: // global
           call _c7UjI(R1) args: 0, res: 0, upd: 0;
       c7UjJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UjI() //  [R1]
         { info_tbl: [(c7UjI,
                       label: block_c7UjI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UjI: // global
           _s7U38::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7UjW; else goto c7UjX;
       c7UjW: // global
           R1 = _s7U38::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7UjX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7Uk7; else goto c7Uk6;
       c7Uk7: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Uk6: // global
           _s7U3b::P64 = P64[R1 + 6];
           _s7U3c::P64 = P64[R1 + 14];
           _s7U3a::I64 = I64[R1 + 22];
           I64[Hp - 56] = sat_s7U3d_info;
           P64[Hp - 40] = _s7U38::P64;
           P64[Hp - 32] = _s7U3c::P64;
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7U3b::P64;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = _s7U3a::I64;
           R1 = Hp - 22;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.774984275 UTC

[section ""data" . GHC.Event.IntTable.$winsertWith_closure" {
     GHC.Event.IntTable.$winsertWith_closure:
         const GHC.Event.IntTable.$winsertWith_info;
 },
 GHC.Event.IntTable.$winsertWith_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ukx: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$winsertWith_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7UkD,
                       label: GHC.Event.IntTable.$winsertWith_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UkD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7UkH; else goto c7UkG;
       c7UkH: // global
           HpAlloc = 32;
           R1 = GHC.Event.IntTable.$winsertWith_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7UkG: // global
           I64[Hp - 24] = GHC.STRef.STRef_con_info;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R3;
           R5 = Hp - 23;
           R4 = R4;
           R3 = Hp - 7;
           R2 = R2;
           call insertWith1_r7SZ8_entry(R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . $winsertWith1_r7SZ7_closure" {
     $winsertWith1_r7SZ7_closure:
         const $winsertWith1_r7SZ7_info;
 },
 $winsertWith1_r7SZ7_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UkJ: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $winsertWith1_r7SZ7_entry(R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 $winsertWith1_r7SZ7_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7Ulk,
                       label: $winsertWith1_r7SZ7_info
                       rep:HeapRep static {
                             Fun {arity: 5 fun_type: ArgGen [False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ulk: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c7Ull; else goto c7Ulm;
       c7Ull: // global
           R1 = $winsertWith1_r7SZ7_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7Ulm: // global
           I64[Sp - 40] = block_c7UkN_info;
           R1 = P64[R5 + 8];
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7UmD; else goto c7UkO;
       u7UmD: // global
           call _c7UkN(R1) args: 0, res: 0, upd: 0;
       c7UkO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UkN() //  [R1]
         { info_tbl: [(c7UkN,
                       label: block_c7UkN_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UkN: // global
           _s7U3u::P64 = P64[R1 + 7];
           _s7U3x::I64 = I64[Sp + 16] & (I64[_s7U3u::P64 + 8] - 1);
           _s7U4e::P64 = P64[(_s7U3u::P64 + 24) + (_s7U3x::I64 << 3)];
           I64[Sp - 40] = I64[R1 + 23];
           P64[Sp - 32] = P64[R1 + 15];
           I64[Sp - 24] = _s7U3x::I64;
           P64[Sp - 16] = GHC.Event.IntTable.Empty_closure+1;
           P64[Sp - 8] = _s7U4e::P64;
           P64[Sp] = _s7U3u::P64;
           Sp = Sp - 40;
           call _c7Ul8() args: 0, res: 0, upd: 0;
     }
 },
 _c7Ul8() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ul8: // global
           I64[Sp - 8] = block_c7Ula_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7UmB; else goto c7Ulb;
       u7UmB: // global
           call _c7Ula(R1) args: 0, res: 0, upd: 0;
       c7Ulb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Ula() //  [R1]
         { info_tbl: [(c7Ula,
                       label: block_c7Ula_info
                       rep:StackRep [True, False, True, False, True, False, False, True,
                                     False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ula: // global
           _s7U4d::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto c7Umj; else goto c7Umk;
       c7Umj: // global
           _s7U3u::P64 = P64[Sp + 48];
           _s7U3I::I64 = I64[I64[Sp + 8]];
           if (%MO_S_Lt_W64(_s7U3I::I64 + 1,
                            I64[_s7U3u::P64 + 8] - %MO_S_Shr_W64(I64[_s7U3u::P64 + 8],
                                                                 2))) goto c7UlM; else goto c7UlV;
       c7UlM: // global
           I64[Sp] = block_c7UlK_info;
           R1 = P64[Sp + 72];
           I64[Sp + 72] = _s7U3I::I64;
           P64[Sp + 80] = _s7U4d::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c7UlV: // global
           I64[Sp + 8] = block_c7UlS_info;
           R4 = _s7U3I::I64;
           R3 = P64[Sp + 80];
           R2 = _s7U3u::P64;
           Sp = Sp + 8;
           call GHC.Event.IntTable.$wgrow_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
       c7Umk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Umn; else goto c7Umm;
       c7Umn: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Umm: // global
           _s7U4i::P64 = P64[R1 + 6];
           _s7U4j::P64 = P64[R1 + 14];
           _s7U4h::I64 = I64[R1 + 22];
           if (_s7U4h::I64 == I64[Sp + 64]) goto c7Umq; else goto c7Ump;
       c7Umq: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_c7Um2_info;
           R3 = _s7U4j::P64;
           R2 = _s7U4d::P64;
           P64[Sp + 80] = _s7U4i::P64;
           Sp = Sp + 16;
           call poly_<>_r7SZ6_entry(R3, R2) args: 8, res: 8, upd: 8;
       c7Ump: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = _s7U4i::P64;
           P64[Hp - 8] = _s7U4d::P64;
           I64[Hp] = _s7U4h::I64;
           P64[Sp + 32] = Hp - 22;
           P64[Sp + 40] = _s7U4j::P64;
           Sp = Sp + 8;
           call _c7Ul8() args: 0, res: 0, upd: 0;
     }
 },
 _c7UlK() //  [R1]
         { info_tbl: [(c7UlK,
                       label: block_c7UlK_info
                       rep:StackRep [True, False, True, True, True, False, True, True,
                                     True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UlK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7UlQ; else goto c7UlP;
       c7UlQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7UlP: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 80];
           I64[Hp] = I64[Sp + 64];
           _s7U3u::P64 = P64[Sp + 48];
           _s7U3v::I64 = I64[Sp + 8];
           _s7U3w::P64 = P64[Sp + 16];
           _s7U3x::I64 = I64[Sp + 24];
           _s7U3I::I64 = I64[Sp + 72];
           call MO_WriteBarrier();
           P64[(_s7U3u::P64 + 24) + (_s7U3x::I64 << 3)] = Hp - 22;
           I64[_s7U3u::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7U3u::P64 + 24) + ((I64[_s7U3u::P64 + 8] << 3) + (_s7U3x::I64 >> 7))] = 1 :: W8;
           I64[_s7U3v::I64] = _s7U3I::I64 + 1;
           call MO_Touch(_s7U3w::P64);
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7UlS() //  []
         { info_tbl: [(c7UlS,
                       label: block_c7UlS_info
                       rep:StackRep [False, True, True, True, True, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UlS: // global
           I64[Sp] = block_c7UlU_info;
           R5 = P64[Sp + 72];
           R4 = P64[Sp + 64];
           R3 = I64[Sp + 56];
           R2 = P64[Sp + 48];
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7UlU() //  [R1]
         { info_tbl: [(c7UlU,
                       label: block_c7UlU_info
                       rep:StackRep [False, True, True, True, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UlU: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Um2() //  [R1]
         { info_tbl: [(c7Um2,
                       label: block_c7Um2_info
                       rep:StackRep [True, True, True, False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Um2: // global
           I64[Sp] = block_c7Um6_info;
           R3 = P64[Sp + 64];
           R2 = P64[Sp + 56];
           _s7U47::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 56] = _s7U47::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Um6() //  [R1]
         { info_tbl: [(c7Um6,
                       label: block_c7Um6_info
                       rep:StackRep [True, True, True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Um6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7Ume; else goto c7Umd;
       c7Ume: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Umd: // global
           I64[Hp - 40] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 56];
           I64[Hp - 16] = I64[Sp + 48];
           _s7U3u::P64 = P64[Sp + 32];
           _s7U3x::I64 = I64[Sp + 8];
           _s7U45::P64 = P64[Sp + 64];
           call MO_WriteBarrier();
           P64[(_s7U3u::P64 + 24) + (_s7U3x::I64 << 3)] = Hp - 38;
           I64[_s7U3u::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7U3u::P64 + 24) + ((I64[_s7U3u::P64 + 8] << 3) + (_s7U3x::I64 >> 7))] = 1 :: W8;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7U45::P64;
           R1 = Hp - 6;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . insertWith1_r7SZ8_closure" {
     insertWith1_r7SZ8_closure:
         const insertWith1_r7SZ8_info;
 },
 insertWith1_r7SZ8_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7UmL,
                       label: insertWith1_r7SZ8_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UmL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7UmP; else goto c7UmQ;
       c7UmP: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = insertWith1_r7SZ8_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7UmQ: // global
           I64[Sp - 32] = block_c7UmI_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7UmY; else goto c7UmJ;
       u7UmY: // global
           call _c7UmI(R1) args: 0, res: 0, upd: 0;
       c7UmJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UmI() //  [R1]
         { info_tbl: [(c7UmI,
                       label: block_c7UmI_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UmI: // global
           I64[Sp] = block_c7UmO_info;
           _s7U4s::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7U4s::I64;
           if (R1 & 7 != 0) goto u7UmX; else goto c7UmS;
       u7UmX: // global
           call _c7UmO(R1) args: 0, res: 0, upd: 0;
       c7UmS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UmO() //  [R1]
         { info_tbl: [(c7UmO,
                       label: block_c7UmO_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UmO: // global
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call $winsertWith1_r7SZ7_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.809758747 UTC

[section ""data" . insertWith2_r7SZ9_closure" {
     insertWith2_r7SZ9_closure:
         const insertWith2_r7SZ9_info;
 },
 insertWith2_r7SZ9_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7UoJ,
                       label: insertWith2_r7SZ9_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UoJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7UoN; else goto c7UoO;
       c7UoN: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = insertWith2_r7SZ9_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7UoO: // global
           I64[Sp - 32] = block_c7UoG_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7UoW; else goto c7UoH;
       u7UoW: // global
           call _c7UoG(R1) args: 0, res: 0, upd: 0;
       c7UoH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UoG() //  [R1]
         { info_tbl: [(c7UoG,
                       label: block_c7UoG_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UoG: // global
           I64[Sp] = block_c7UoM_info;
           _s7U4B::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7U4B::I64;
           if (R1 & 7 != 0) goto u7UoV; else goto c7UoQ;
       u7UoV: // global
           call _c7UoM(R1) args: 0, res: 0, upd: 0;
       c7UoQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UoM() //  [R1]
         { info_tbl: [(c7UoM,
                       label: block_c7UoM_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UoM: // global
           R5 = P64[R1 + 7];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.817641418 UTC

[section ""data" . GHC.Event.IntTable.insertWith_closure" {
     GHC.Event.IntTable.insertWith_closure:
         const GHC.Event.IntTable.insertWith_info;
 },
 GHC.Event.IntTable.insertWith_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c7Upg,
                       label: GHC.Event.IntTable.insertWith_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Upg: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call insertWith2_r7SZ9_entry(R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.822620236 UTC

[section ""data" . GHC.Event.IntTable.$wreset_closure" {
     GHC.Event.IntTable.$wreset_closure:
         const GHC.Event.IntTable.$wreset_info;
 },
 $wgo_s7U4W_entry() //  [R1, R2]
         { info_tbl: [(c7UpW,
                       label: $wgo_s7U4W_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UpW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7UpX; else goto c7UpY;
       c7UpX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7UpY: // global
           I64[Sp - 24] = block_c7UpP_info;
           _s7U4W::P64 = R1;
           _s7U4E::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _s7U4E::I64;
           P64[Sp - 8] = _s7U4W::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Uql; else goto c7UpQ;
       u7Uql: // global
           call _c7UpP(R1) args: 0, res: 0, upd: 0;
       c7UpQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UpP() //  [R1]
         { info_tbl: [(c7UpP,
                       label: block_c7UpP_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UpP: // global
           if (R1 & 7 == 1) goto c7UpT; else goto c7UpU;
       c7UpT: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7UpU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Uq6; else goto c7Uq5;
       c7Uq6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Uq5: // global
           _s7U50::P64 = P64[R1 + 6];
           _s7U51::P64 = P64[R1 + 14];
           _s7U4Z::I64 = I64[R1 + 22];
           if (_s7U4Z::I64 == I64[Sp + 8]) goto c7Uqk; else goto c7Uqe;
       c7Uqk: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7U50::P64;
           R3 = _s7U51::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Uqe: // global
           Hp = Hp - 16;
           I64[Sp] = block_c7Uqa_info;
           R2 = _s7U51::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _s7U50::P64;
           I64[Sp + 16] = _s7U4Z::I64;
           call $wgo_s7U4W_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Uqa() //  [R1, R2, R3]
         { info_tbl: [(c7Uqa,
                       label: block_c7Uqa_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uqa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Uqh; else goto c7Uqg;
       c7Uqh: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       c7Uqg: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.IntTable.$wreset_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Uqq,
                       label: GHC.Event.IntTable.$wreset_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uqq: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7Uqr; else goto c7Uqs;
       c7Uqr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wreset_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Uqs: // global
           I64[Sp - 24] = block_c7Upr_info;
           R1 = R3;
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Urd; else goto c7Ups;
       u7Urd: // global
           call _c7Upr(R1) args: 0, res: 0, upd: 0;
       c7Ups: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Upr() //  [R1]
         { info_tbl: [(c7Upr,
                       label: block_c7Upr_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Upr: // global
           _s7U4G::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7Uqn; else goto c7Uqo;
       c7Uqn: // global
           I64[Sp] = block_c7Upw_info;
           R1 = P64[_s7U4G::P64 + 8];
           if (R1 & 7 != 0) goto u7Urc; else goto c7Upx;
       u7Urc: // global
           call _c7Upw(R1) args: 0, res: 0, upd: 0;
       c7Upx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Uqo: // global
           I64[Sp + 16] = block_c7Ur0_info;
           R5 = _s7U4G::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 16;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c7Upw() //  [R1]
         { info_tbl: [(c7Upw,
                       label: block_c7Upw_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Upw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Uqw; else goto c7Uqv;
       c7Uqw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Uqv: // global
           _s7U4E::I64 = I64[Sp + 8];
           _s7U4N::P64 = P64[R1 + 7];
           _s7U4P::P64 = P64[R1 + 15];
           _s7U4O::I64 = I64[R1 + 23];
           _s7U4Q::I64 = _s7U4E::I64 & (I64[_s7U4N::P64 + 8] - 1);
           _s7U4V::P64 = P64[(_s7U4N::P64 + 24) + (_s7U4Q::I64 << 3)];
           I64[Hp - 8] = $wgo_s7U4W_info;
           I64[Hp] = _s7U4E::I64;
           I64[Sp - 16] = block_c7Uqx_info;
           R2 = _s7U4V::P64;
           R1 = Hp - 7;
           I64[Sp - 8] = _s7U4Q::I64;
           P64[Sp] = _s7U4P::P64;
           I64[Sp + 8] = _s7U4O::I64;
           P64[Sp + 16] = _s7U4N::P64;
           Sp = Sp - 16;
           call $wgo_s7U4W_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Uqx() //  [R1, R2, R3]
         { info_tbl: [(c7Uqx,
                       label: block_c7Uqx_info
                       rep:StackRep [True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uqx: // global
           I64[Sp - 16] = block_c7Uqz_info;
           _s7U5a::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _s7U5a::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Ure; else goto c7UqB;
       u7Ure: // global
           call _c7Uqz(R1) args: 0, res: 0, upd: 0;
       c7UqB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Uqz() //  [R1]
         { info_tbl: [(c7Uqz,
                       label: block_c7Uqz_info
                       rep:StackRep [False, False, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uqz: // global
           if (R1 & 7 == 1) goto u7Ura; else goto c7UqM;
       u7Ura: // global
           Sp = Sp + 56;
           call _c7UqT() args: 0, res: 0, upd: 0;
       c7UqM: // global
           _s7U4N::P64 = P64[Sp + 48];
           _s7U4Q::I64 = I64[Sp + 24];
           _s7U5a::P64 = P64[Sp + 16];
           _s7U5c::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s7U4N::P64 + 24) + (_s7U4Q::I64 << 3)] = _s7U5c::P64;
           I64[_s7U4N::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s7U4N::P64 + 24) + ((I64[_s7U4N::P64 + 8] << 3) + (_s7U4Q::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_c7UqK_info;
           R1 = _s7U5a::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u7Urf; else goto c7UqN;
       u7Urf: // global
           call _c7UqK(R1) args: 0, res: 0, upd: 0;
       c7UqN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UqK() //  [R1]
         { info_tbl: [(c7UqK,
                       label: block_c7UqK_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UqK: // global
           if (R1 & 7 == 1) goto u7Urb; else goto c7UqX;
       u7Urb: // global
           Sp = Sp + 32;
           call _c7UqT() args: 0, res: 0, upd: 0;
       c7UqX: // global
           _s7U4O::I64 = I64[Sp + 16];
           _s7U4P::P64 = P64[Sp + 8];
           I64[_s7U4O::I64] = I64[_s7U4O::I64] - 1;
           call MO_Touch(_s7U4P::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7UqT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UqT: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Ur0() //  []
         { info_tbl: [(c7Ur0,
                       label: block_c7Ur0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ur0: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.847435761 UTC

[section ""data" . GHC.Event.IntTable.reset1_closure" {
     GHC.Event.IntTable.reset1_closure:
         const GHC.Event.IntTable.reset1_info;
 },
 GHC.Event.IntTable.reset1_entry() //  [R2, R3, R4]
         { info_tbl: [(c7UsJ,
                       label: GHC.Event.IntTable.reset1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UsJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7UsN; else goto c7UsO;
       c7UsN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.reset1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7UsO: // global
           I64[Sp - 24] = block_c7UsG_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7UsW; else goto c7UsH;
       u7UsW: // global
           call _c7UsG(R1) args: 0, res: 0, upd: 0;
       c7UsH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UsG() //  [R1]
         { info_tbl: [(c7UsG,
                       label: block_c7UsG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UsG: // global
           I64[Sp] = block_c7UsM_info;
           _s7U5w::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7U5w::I64;
           if (R1 & 7 != 0) goto u7UsV; else goto c7UsQ;
       u7UsV: // global
           call _c7UsM(R1) args: 0, res: 0, upd: 0;
       c7UsQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UsM() //  [R1]
         { info_tbl: [(c7UsM,
                       label: block_c7UsM_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UsM: // global
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.IntTable.$wreset_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.855199506 UTC

[section ""data" . GHC.Event.IntTable.reset_closure" {
     GHC.Event.IntTable.reset_closure:
         const GHC.Event.IntTable.reset_info;
 },
 GHC.Event.IntTable.reset_entry() //  [R2, R3, R4]
         { info_tbl: [(c7Utg,
                       label: GHC.Event.IntTable.reset_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Utg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.reset1_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.859746 UTC

[section ""data" . GHC.Event.IntTable.$wlookup_closure" {
     GHC.Event.IntTable.$wlookup_closure:
         const GHC.Event.IntTable.$wlookup_info;
 },
 go_s7U5P_entry() //  [R1, R2]
         { info_tbl: [(c7UtR,
                       label: go_s7U5P_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UtR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7UtS; else goto u7Uua;
       c7UtS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u7Uua: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _c7UtH() args: 0, res: 0, upd: 0;
     }
 },
 _c7UtH() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UtH: // global
           _s7U5z::I64 = I64[P64[Sp] + 7];
           I64[Sp - 8] = block_c7UtK_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7U5z::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Uuc; else goto c7UtL;
       u7Uuc: // global
           call _c7UtK(R1) args: 0, res: 0, upd: 0;
       c7UtL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7UtK() //  [R1]
         { info_tbl: [(c7UtK,
                       label: block_c7UtK_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UtK: // global
           if (R1 & 7 == 1) goto c7UtO; else goto c7UtP;
       c7UtO: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7UtP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Uu1; else goto c7Uu0;
       c7Uu1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Uu0: // global
           if (I64[R1 + 22] == I64[Sp + 16]) goto c7Uu9; else goto c7Uu5;
       c7Uu9: // global
           _s7U5T::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _s7U5T::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Uu5: // global
           _s7U5U::P64 = P64[R1 + 14];
           Hp = Hp - 16;
           P64[Sp + 16] = _s7U5U::P64;
           Sp = Sp + 8;
           call _c7UtH() args: 0, res: 0, upd: 0;
     }
 },
 GHC.Event.IntTable.$wlookup_entry() //  [R2, R3]
         { info_tbl: [(c7Uuf,
                       label: GHC.Event.IntTable.$wlookup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uuf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Uuh; else goto c7Uui;
       c7Uuh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.$wlookup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Uui: // global
           I64[Sp - 16] = block_c7Utr_info;
           R1 = P64[R3 + 8];
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Uuq; else goto c7Uts;
       u7Uuq: // global
           call _c7Utr(R1) args: 0, res: 0, upd: 0;
       c7Uts: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Utr() //  [R1]
         { info_tbl: [(c7Utr,
                       label: block_c7Utr_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Utr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Uul; else goto c7Uuk;
       c7Uul: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Uuk: // global
           _s7U5z::I64 = I64[Sp + 8];
           _s7U5G::P64 = P64[R1 + 7];
           _s7U5O::P64 = P64[(_s7U5G::P64 + 24) + (_s7U5z::I64 & (I64[_s7U5G::P64 + 8] - 1) << 3)];
           I64[Hp - 8] = go_s7U5P_info;
           I64[Hp] = _s7U5z::I64;
           I64[Sp + 8] = block_c7Uug_info;
           R2 = _s7U5O::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s7U5P_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Uug() //  [R1]
         { info_tbl: [(c7Uug,
                       label: block_c7Uug_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uug: // global
           R1 = R1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.873888336 UTC

[section ""data" . GHC.Event.IntTable.lookup1_closure" {
     GHC.Event.IntTable.lookup1_closure:
         const GHC.Event.IntTable.lookup1_info;
 },
 GHC.Event.IntTable.lookup1_entry() //  [R2, R3]
         { info_tbl: [(c7Uvb,
                       label: GHC.Event.IntTable.lookup1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uvb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Uvf; else goto c7Uvg;
       c7Uvf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.lookup1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Uvg: // global
           I64[Sp - 16] = block_c7Uv8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Uvo; else goto c7Uv9;
       u7Uvo: // global
           call _c7Uv8(R1) args: 0, res: 0, upd: 0;
       c7Uv9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Uv8() //  [R1]
         { info_tbl: [(c7Uv8,
                       label: block_c7Uv8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uv8: // global
           I64[Sp] = block_c7Uve_info;
           _s7U61::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7U61::I64;
           if (R1 & 7 != 0) goto u7Uvn; else goto c7Uvi;
       u7Uvn: // global
           call _c7Uve(R1) args: 0, res: 0, upd: 0;
       c7Uvi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7Uve() //  [R1]
         { info_tbl: [(c7Uve,
                       label: block_c7Uve_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uve: // global
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.IntTable.$wlookup_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.88081043 UTC

[section ""data" . GHC.Event.IntTable.lookup_closure" {
     GHC.Event.IntTable.lookup_closure:
         const GHC.Event.IntTable.lookup_info;
 },
 GHC.Event.IntTable.lookup_entry() //  [R2, R3]
         { info_tbl: [(c7UvI,
                       label: GHC.Event.IntTable.lookup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UvI: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.IntTable.lookup1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.883909533 UTC

[section ""cstring" . GHC.Event.IntTable.$trModule4_bytes" {
     GHC.Event.IntTable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.885974601 UTC

[section ""data" . GHC.Event.IntTable.$trModule3_closure" {
     GHC.Event.IntTable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.887662903 UTC

[section ""cstring" . GHC.Event.IntTable.$trModule2_bytes" {
     GHC.Event.IntTable.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.889377078 UTC

[section ""data" . GHC.Event.IntTable.$trModule1_closure" {
     GHC.Event.IntTable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.891060167 UTC

[section ""data" . GHC.Event.IntTable.$trModule_closure" {
     GHC.Event.IntTable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.IntTable.$trModule3_closure+1;
         const GHC.Event.IntTable.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.892868916 UTC

[section ""data" . $krep_r7SZa_closure" {
     $krep_r7SZa_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.894794436 UTC

[section ""data" . $krep1_r7SZb_closure" {
     $krep1_r7SZb_closure:
         const :_con_info;
         const $krep_r7SZa_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.897017241 UTC

[section ""data" . $krep2_r7SZc_closure" {
     $krep2_r7SZc_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep1_r7SZb_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.901828216 UTC

[section ""data" . $krep3_r7SZd_closure" {
     $krep3_r7SZd_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.903951048 UTC

[section ""cstring" . GHC.Event.IntTable.$tcBucket2_bytes" {
     GHC.Event.IntTable.$tcBucket2_bytes:
         I8[] [66,117,99,107,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.906069343 UTC

[section ""data" . GHC.Event.IntTable.$tcBucket1_closure" {
     GHC.Event.IntTable.$tcBucket1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcBucket2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.908337722 UTC

[section ""data" . GHC.Event.IntTable.$tcBucket_closure" {
     GHC.Event.IntTable.$tcBucket_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcBucket1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 17735724201551259799;
         const 1580619789810252778;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.910933674 UTC

[section ""data" . $krep4_r7SZe_closure" {
     $krep4_r7SZe_closure:
         const :_con_info;
         const $krep3_r7SZd_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.91328322 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty1_closure" {
     GHC.Event.IntTable.$tc'Empty1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcBucket_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.915587271 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'Empty3_bytes" {
     GHC.Event.IntTable.$tc'Empty3_bytes:
         I8[] [39,69,109,112,116,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.917985173 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty2_closure" {
     GHC.Event.IntTable.$tc'Empty2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'Empty3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.920167998 UTC

[section ""data" . GHC.Event.IntTable.$tc'Empty_closure" {
     GHC.Event.IntTable.$tc'Empty_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'Empty2_closure+1;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const 14716594083905147916;
         const 6006296133869125928;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.923239668 UTC

[section ""data" . $krep5_r7SZf_closure" {
     $krep5_r7SZf_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.925655332 UTC

[section ""data" . $krep6_r7SZg_closure" {
     $krep6_r7SZg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7SZd_closure+2;
         const $krep5_r7SZf_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.928104091 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket1_closure" {
     GHC.Event.IntTable.$tc'Bucket1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7SZa_closure+1;
         const $krep6_r7SZg_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.930464336 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'Bucket3_bytes" {
     GHC.Event.IntTable.$tc'Bucket3_bytes:
         I8[] [39,66,117,99,107,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.93346625 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket2_closure" {
     GHC.Event.IntTable.$tc'Bucket2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'Bucket3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.935275318 UTC

[section ""data" . GHC.Event.IntTable.$tc'Bucket_closure" {
     GHC.Event.IntTable.$tc'Bucket_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'Bucket2_closure+1;
         const GHC.Event.IntTable.$tc'Bucket1_closure+4;
         const 13477734220520722226;
         const 15099239145624852322;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.936939166 UTC

[section ""data" . $krep7_r7SZh_closure" {
     $krep7_r7SZh_closure:
         const :_con_info;
         const GHC.Event.IntTable.$tc'Empty1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.938607827 UTC

[section ""data" . $krep8_r7SZi_closure" {
     $krep8_r7SZi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Arr.$tcArr_closure;
         const $krep7_r7SZh_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.940274665 UTC

[section ""cstring" . GHC.Event.IntTable.$tcIT2_bytes" {
     GHC.Event.IntTable.$tcIT2_bytes:
         I8[] [73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.942487887 UTC

[section ""data" . GHC.Event.IntTable.$tcIT1_closure" {
     GHC.Event.IntTable.$tcIT1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcIT2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.944187134 UTC

[section ""data" . GHC.Event.IntTable.$tcIT_closure" {
     GHC.Event.IntTable.$tcIT_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcIT1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 1485413372890074222;
         const 7871673693356487434;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.946030788 UTC

[section ""data" . $krep9_r7SZj_closure" {
     $krep9_r7SZj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcIT_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.947869274 UTC

[section ""data" . $krep10_r7SZk_closure" {
     $krep10_r7SZk_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r7SZc_closure+1;
         const $krep9_r7SZj_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.949688876 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT1_closure" {
     GHC.Event.IntTable.$tc'IT1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7SZi_closure+1;
         const $krep10_r7SZk_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.951515547 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'IT3_bytes" {
     GHC.Event.IntTable.$tc'IT3_bytes:
         I8[] [39,73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.953205992 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT2_closure" {
     GHC.Event.IntTable.$tc'IT2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'IT3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.955506741 UTC

[section ""data" . GHC.Event.IntTable.$tc'IT_closure" {
     GHC.Event.IntTable.$tc'IT_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'IT2_closure+1;
         const GHC.Event.IntTable.$tc'IT1_closure+4;
         const 2061931487051656996;
         const 1303251193055522557;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.957469772 UTC

[section ""data" . $krep11_r7SZl_closure" {
     $krep11_r7SZl_closure:
         const :_con_info;
         const $krep9_r7SZj_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.959362096 UTC

[section ""data" . $krep12_r7SZm_closure" {
     $krep12_r7SZm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep11_r7SZl_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.961813794 UTC

[section ""cstring" . GHC.Event.IntTable.$tcIntTable2_bytes" {
     GHC.Event.IntTable.$tcIntTable2_bytes:
         I8[] [73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.963441183 UTC

[section ""data" . GHC.Event.IntTable.$tcIntTable1_closure" {
     GHC.Event.IntTable.$tcIntTable1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tcIntTable2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.965099095 UTC

[section ""data" . GHC.Event.IntTable.$tcIntTable_closure" {
     GHC.Event.IntTable.$tcIntTable_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tcIntTable1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 12646307913912198429;
         const 5258607314097228638;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.967344729 UTC

[section ""data" . $krep13_r7SZn_closure" {
     $krep13_r7SZn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcIntTable_closure+1;
         const $krep4_r7SZe_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.969044723 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable1_closure" {
     GHC.Event.IntTable.$tc'IntTable1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7SZm_closure+1;
         const $krep13_r7SZn_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.97074888 UTC

[section ""cstring" . GHC.Event.IntTable.$tc'IntTable3_bytes" {
     GHC.Event.IntTable.$tc'IntTable3_bytes:
         I8[] [39,73,110,116,84,97,98,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.972337476 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable2_closure" {
     GHC.Event.IntTable.$tc'IntTable2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.IntTable.$tc'IntTable3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.974035245 UTC

[section ""data" . GHC.Event.IntTable.$tc'IntTable_closure" {
     GHC.Event.IntTable.$tc'IntTable_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.IntTable.$trModule_closure+1;
         const GHC.Event.IntTable.$tc'IntTable2_closure+1;
         const GHC.Event.IntTable.$tc'IntTable1_closure+4;
         const 17952658267866828845;
         const 12036984593740445577;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.975830616 UTC

[section ""data" . GHC.Event.IntTable.Empty_closure" {
     GHC.Event.IntTable.Empty_closure:
         const GHC.Event.IntTable.Empty_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.9778078 UTC

[section ""data" . GHC.Event.IntTable.Bucket_closure" {
     GHC.Event.IntTable.Bucket_closure:
         const GHC.Event.IntTable.Bucket_info;
 },
 GHC.Event.IntTable.Bucket_entry() //  [R2, R3, R4]
         { info_tbl: [(c7UwD,
                       label: GHC.Event.IntTable.Bucket_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UwD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7UwH; else goto c7UwG;
       c7UwH: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.Bucket_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7UwG: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           I64[Hp] = R2;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.982135361 UTC

[section ""data" . GHC.Event.IntTable.IT_closure" {
     GHC.Event.IntTable.IT_closure:
         const GHC.Event.IntTable.IT_info;
 },
 GHC.Event.IntTable.IT_entry() //  [R2, R3, R4]
         { info_tbl: [(c7UwT,
                       label: GHC.Event.IntTable.IT_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7UwT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7UwX; else goto c7UwW;
       c7UwX: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.IntTable.IT_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7UwW: // global
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           I64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.985822884 UTC

[GHC.Event.IntTable.Empty_con_entry() //  [R1]
         { info_tbl: [(c7Ux4,
                       label: GHC.Event.IntTable.Empty_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,69,109,112,116,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Ux4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.989665343 UTC

[GHC.Event.IntTable.Bucket_con_entry() //  [R1]
         { info_tbl: [(c7Uxb,
                       label: GHC.Event.IntTable.Bucket_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,66,117,99,107,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uxb: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.992702264 UTC

[GHC.Event.IntTable.IT_con_entry() //  [R1]
         { info_tbl: [(c7Uxi,
                       label: GHC.Event.IntTable.IT_con_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,73,110,116,84,97,98,108,101,46,73,84]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c7Uxi: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:01.995677741 UTC

[section ""relreadonly" . S7U7p_srt" {
     S7U7p_srt:
         const Control.Exception.Base.recSelError_closure;
         const GHC.Event.IntTable.bucketNext_closure;
         const GHC.Event.IntTable.bucketNext1_closure;
         const GHC.Event.IntTable.bucketValue_closure;
         const GHC.Event.IntTable.bucketValue1_closure;
         const GHC.Event.IntTable.bucketKey_closure;
         const GHC.Event.IntTable.bucketKey1_closure;
 }]

