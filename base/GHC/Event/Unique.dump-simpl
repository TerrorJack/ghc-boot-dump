
==================== Tidy Core ====================
2018-03-16 15:55:34.904969957 UTC

Result size of Tidy Core
  = {terms: 225, types: 192, coercions: 124, joins: 0/0}

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
GHC.Event.Unique.$fNumUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: Num Unique
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: Unique
                     GHC.Num.$fNumInt_$c+
                     `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                             ->_R Sym (GHC.Event.Unique.N:Unique[0])
                             ->_R Sym (GHC.Event.Unique.N:Unique[0])
                             :: (Int -> Int -> Int :: *) ~R# (Unique -> Unique -> Unique :: *))
                     GHC.Num.$fNumInt_$c-
                     `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                             ->_R Sym (GHC.Event.Unique.N:Unique[0])
                             ->_R Sym (GHC.Event.Unique.N:Unique[0])
                             :: (Int -> Int -> Int :: *) ~R# (Unique -> Unique -> Unique :: *))
                     GHC.Num.$fNumInt_$c*
                     `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                             ->_R Sym (GHC.Event.Unique.N:Unique[0])
                             ->_R Sym (GHC.Event.Unique.N:Unique[0])
                             :: (Int -> Int -> Int :: *) ~R# (Unique -> Unique -> Unique :: *))
                     GHC.Num.$fNumInt_$cnegate
                     `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                             ->_R Sym (GHC.Event.Unique.N:Unique[0])
                             :: (Int -> Int :: *) ~R# (Unique -> Unique :: *))
                     GHC.Num.$fNumInt_$cabs
                     `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                             ->_R Sym (GHC.Event.Unique.N:Unique[0])
                             :: (Int -> Int :: *) ~R# (Unique -> Unique :: *))
                     GHC.Num.$fNumInt_$csignum
                     `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                             ->_R Sym (GHC.Event.Unique.N:Unique[0])
                             :: (Int -> Int :: *) ~R# (Unique -> Unique :: *))
                     GHC.Num.$fNumInt_$cfromInteger
                     `cast` (<integer-simple-0.1.1.1:GHC.Integer.Type.Integer>_R
                             ->_R Sym (GHC.Event.Unique.N:Unique[0])
                             :: (integer-simple-0.1.1.1:GHC.Integer.Type.Integer -> Int :: *)
                                ~R# (integer-simple-0.1.1.1:GHC.Integer.Type.Integer
                                     -> Unique :: *))]
GHC.Event.Unique.$fNumUnique
  = GHC.Num.C:Num
      @ Unique
      (GHC.Num.$fNumInt_$c+
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               :: (Int -> Int -> Int :: *) ~R# (Unique -> Unique -> Unique :: *)))
      (GHC.Num.$fNumInt_$c-
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               :: (Int -> Int -> Int :: *) ~R# (Unique -> Unique -> Unique :: *)))
      (GHC.Num.$fNumInt_$c*
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               :: (Int -> Int -> Int :: *) ~R# (Unique -> Unique -> Unique :: *)))
      (GHC.Num.$fNumInt_$cnegate
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               :: (Int -> Int :: *) ~R# (Unique -> Unique :: *)))
      (GHC.Num.$fNumInt_$cabs
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               :: (Int -> Int :: *) ~R# (Unique -> Unique :: *)))
      (GHC.Num.$fNumInt_$csignum
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               :: (Int -> Int :: *) ~R# (Unique -> Unique :: *)))
      (GHC.Num.$fNumInt_$cfromInteger
       `cast` (<integer-simple-0.1.1.1:GHC.Integer.Type.Integer>_R
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               :: (integer-simple-0.1.1.1:GHC.Integer.Type.Integer -> Int :: *)
                  ~R# (integer-simple-0.1.1.1:GHC.Integer.Type.Integer
                       -> Unique :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
GHC.Event.Unique.$fEqUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Unique
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Unique
                        eqInt
                        `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                                ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                ->_R <Bool>_R
                                :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *))
                        neInt
                        `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                                ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                ->_R <Bool>_R
                                :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *))]
GHC.Event.Unique.$fEqUnique
  = GHC.Classes.C:Eq
      @ Unique
      (eqInt
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R <Bool>_R
               :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *)))
      (neInt
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R <Bool>_R
               :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
GHC.Event.Unique.$fOrdUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord Unique
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: Unique
                         GHC.Event.Unique.$fEqUnique
                         compareInt
                         `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R <Ordering>_R
                                 :: (Int -> Int -> Ordering :: *)
                                    ~R# (Unique -> Unique -> Ordering :: *))
                         ltInt
                         `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R <Bool>_R
                                 :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *))
                         leInt
                         `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R <Bool>_R
                                 :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *))
                         gtInt
                         `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R <Bool>_R
                                 :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *))
                         geInt
                         `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R <Bool>_R
                                 :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *))
                         GHC.Classes.$fOrdInt_$cmax
                         `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                 :: (Int -> Int -> Int :: *) ~R# (Unique -> Unique -> Unique :: *))
                         GHC.Classes.$fOrdInt_$cmin
                         `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                 ->_R Sym (GHC.Event.Unique.N:Unique[0])
                                 :: (Int -> Int -> Int :: *) ~R# (Unique -> Unique -> Unique :: *))]
GHC.Event.Unique.$fOrdUnique
  = GHC.Classes.C:Ord
      @ Unique
      GHC.Event.Unique.$fEqUnique
      (compareInt
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R <Ordering>_R
               :: (Int -> Int -> Ordering :: *)
                  ~R# (Unique -> Unique -> Ordering :: *)))
      (ltInt
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R <Bool>_R
               :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *)))
      (leInt
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R <Bool>_R
               :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *)))
      (gtInt
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R <Bool>_R
               :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *)))
      (geInt
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R <Bool>_R
               :: (Int -> Int -> Bool :: *) ~R# (Unique -> Unique -> Bool :: *)))
      (GHC.Classes.$fOrdInt_$cmax
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               :: (Int -> Int -> Int :: *) ~R# (Unique -> Unique -> Unique :: *)))
      (GHC.Classes.$fOrdInt_$cmin
       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               ->_R Sym (GHC.Event.Unique.N:Unique[0])
               :: (Int -> Int -> Int :: *) ~R# (Unique -> Unique -> Unique :: *)))

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Unique.asInt1 :: Unique -> Unique
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (ds_dPOo [Occ=Once] :: Unique) -> ds_dPOo}]
GHC.Event.Unique.asInt1 = \ (ds_dPOo :: Unique) -> ds_dPOo

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
asInt :: Unique -> Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.Unique.asInt1
               `cast` (<Unique>_R ->_R GHC.Event.Unique.N:Unique[0]
                       :: (Unique -> Unique :: *) ~R# (Unique -> Int :: *))}]
asInt
  = GHC.Event.Unique.asInt1
    `cast` (<Unique>_R ->_R GHC.Event.Unique.N:Unique[0]
            :: (Unique -> Unique :: *) ~R# (Unique -> Int :: *))

-- RHS size: {terms: 13, types: 14, coercions: 1, joins: 0/0}
GHC.Event.Unique.$fShowUnique_$cshow :: Unique -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_inLI [Occ=Once] :: Unique) ->
                 case x_inLI
                      `cast` (GHC.Event.Unique.N:Unique[0]
                              :: (Unique :: *) ~R# (Int :: *))
                 of
                 { I# ww3_sB52 [Occ=Once] ->
                 case GHC.Show.$wshowSignedInt 0# ww3_sB52 (GHC.Types.[] @ Char) of
                 { (# ww5_sBh6 [Occ=Once], ww6_sBh7 [Occ=Once] #) ->
                 GHC.Types.: @ Char ww5_sBh6 ww6_sBh7
                 }
                 }}]
GHC.Event.Unique.$fShowUnique_$cshow
  = \ (x_inLI :: Unique) ->
      case x_inLI
           `cast` (GHC.Event.Unique.N:Unique[0]
                   :: (Unique :: *) ~R# (Int :: *))
      of
      { I# ww3_sB52 ->
      case GHC.Show.$wshowSignedInt 0# ww3_sB52 (GHC.Types.[] @ Char) of
      { (# ww5_sBh6, ww6_sBh7 #) ->
      GHC.Types.: @ Char ww5_sBh6 ww6_sBh7
      }
      }

-- RHS size: {terms: 17, types: 17, coercions: 1, joins: 0/0}
GHC.Event.Unique.$fShowUnique_$cshowsPrec
  :: Int -> Unique -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S(S),1*U(U)><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (x_az3l [Occ=Once] :: Unique)
                 (s_az3m [Occ=Once] :: String) ->
                 case x_az3l
                      `cast` (GHC.Event.Unique.N:Unique[0]
                              :: (Unique :: *) ~R# (Int :: *))
                 of
                 { I# ww3_sB52 [Occ=Once] ->
                 case GHC.Show.$wshowSignedInt 0# ww3_sB52 (GHC.Types.[] @ Char) of
                 { (# ww5_sBh6 [Occ=Once], ww6_sBh7 [Occ=Once] #) ->
                 augment
                   @ Char
                   (\ (@ b_it1L)
                      (c_it1M [Occ=Once, OS=OneShot] :: Char -> b_it1L -> b_it1L)
                      (n_it1N [Occ=Once, OS=OneShot] :: b_it1L) ->
                      foldr
                        @ Char
                        @ b_it1L
                        c_it1M
                        n_it1N
                        (GHC.Types.: @ Char ww5_sBh6 ww6_sBh7))
                   s_az3m
                 }
                 }}]
GHC.Event.Unique.$fShowUnique_$cshowsPrec
  = \ _ [Occ=Dead] (x_az3l :: Unique) (s_az3m :: String) ->
      case x_az3l
           `cast` (GHC.Event.Unique.N:Unique[0]
                   :: (Unique :: *) ~R# (Int :: *))
      of
      { I# ww3_sB52 ->
      case GHC.Show.$wshowSignedInt 0# ww3_sB52 (GHC.Types.[] @ Char) of
      { (# ww5_sBh6, ww6_sBh7 #) ->
      ++ @ Char (GHC.Types.: @ Char ww5_sBh6 ww6_sBh7) s_az3m
      }
      }

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
GHC.Event.Unique.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: Int# -> String -> [Char]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 90 0}]
GHC.Event.Unique.$wlvl
  = \ (ww_sPQz :: Int#) (w_sPQw :: String) ->
      case GHC.Show.$wshowSignedInt 0# ww_sPQz (GHC.Types.[] @ Char) of
      { (# ww5_sBh6, ww6_sBh7 #) ->
      ++ @ Char (GHC.Types.: @ Char ww5_sBh6 ww6_sBh7) w_sPQw
      }

-- RHS size: {terms: 8, types: 4, coercions: 1, joins: 0/0}
GHC.Event.Unique.$fShowUnique1 [InlPrag=NOUSERINLINE[0]]
  :: Unique -> String -> [Char]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sPQv [Occ=Once] :: Unique)
                 (w1_sPQw [Occ=Once] :: String) ->
                 case w_sPQv
                      `cast` (GHC.Event.Unique.N:Unique[0]
                              :: (Unique :: *) ~R# (Int :: *))
                 of
                 { I# ww1_sPQz [Occ=Once] ->
                 GHC.Event.Unique.$wlvl ww1_sPQz w1_sPQw
                 }}]
GHC.Event.Unique.$fShowUnique1
  = \ (w_sPQv :: Unique) (w1_sPQw :: String) ->
      case w_sPQv
           `cast` (GHC.Event.Unique.N:Unique[0]
                   :: (Unique :: *) ~R# (Int :: *))
      of
      { I# ww1_sPQz ->
      GHC.Event.Unique.$wlvl ww1_sPQz w1_sPQw
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Event.Unique.$fShowUnique_$cshowList
  :: [Unique] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_az3o [Occ=Once] :: [Unique])
                 (s_az3p [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ Unique GHC.Event.Unique.$fShowUnique1 ls_az3o s_az3p}]
GHC.Event.Unique.$fShowUnique_$cshowList
  = \ (ls_az3o :: [Unique]) (s_az3p :: String) ->
      GHC.Show.showList__
        @ Unique GHC.Event.Unique.$fShowUnique1 ls_az3o s_az3p

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Unique.$fShowUnique [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Unique
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Unique
                       GHC.Event.Unique.$fShowUnique_$cshowsPrec
                       GHC.Event.Unique.$fShowUnique_$cshow
                       GHC.Event.Unique.$fShowUnique_$cshowList]
GHC.Event.Unique.$fShowUnique
  = GHC.Show.C:Show
      @ Unique
      GHC.Event.Unique.$fShowUnique_$cshowsPrec
      GHC.Event.Unique.$fShowUnique_$cshow
      GHC.Event.Unique.$fShowUnique_$cshowList

-- RHS size: {terms: 10, types: 23, coercions: 0, joins: 0/0}
GHC.Event.Unique.newSource1
  :: State# RealWorld -> (# State# RealWorld, UniqueSource #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_aPFb [Occ=Once] :: State# RealWorld) ->
                 case newByteArray# @ RealWorld 8# s_aPFb of
                 { (# ipv_sPOQ [Occ=Once], ipv1_sPOR [Occ=Once] #) ->
                 (# ipv_sPOQ, GHC.Event.Unique.US ipv1_sPOR #)
                 }}]
GHC.Event.Unique.newSource1
  = \ (s_aPFb :: State# RealWorld) ->
      case newByteArray# @ RealWorld 8# s_aPFb of
      { (# ipv_sPOQ, ipv1_sPOR #) ->
      (# ipv_sPOQ, GHC.Event.Unique.US ipv1_sPOR #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
newSource :: IO UniqueSource
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.Unique.newSource1
               `cast` (Sym (GHC.Types.N:IO[0] <UniqueSource>_R)
                       :: (State# RealWorld -> (# State# RealWorld, UniqueSource #) :: *)
                          ~R# (IO UniqueSource :: *))}]
newSource
  = GHC.Event.Unique.newSource1
    `cast` (Sym (GHC.Types.N:IO[0] <UniqueSource>_R)
            :: (State# RealWorld -> (# State# RealWorld, UniqueSource #) :: *)
               ~R# (IO UniqueSource :: *))

-- RHS size: {terms: 16, types: 25, coercions: 2, joins: 0/0}
newUnique1_rPRX
  :: UniqueSource
     -> State# RealWorld -> (# State# RealWorld, Unique #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []]
newUnique1_rPRX
  = \ (ds_dPO5 :: UniqueSource) (eta_B1 :: State# RealWorld) ->
      case ds_dPO5 of { US mba_aPFe ->
      case fetchAddIntArray# @ RealWorld mba_aPFe 0# 1# eta_B1 of
      { (# ipv_sPOW, ipv1_sPOX #) ->
      (# ipv_sPOW,
         (GHC.Types.I# ipv1_sPOX)
         `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                 :: (Int :: *) ~R# (Unique :: *)) #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
newUnique [InlPrag=INLINE (sat-args=1)]
  :: UniqueSource -> IO Unique
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
         Tmpl= \ (ds_XPOU [Occ=Once!] :: UniqueSource) ->
                 case ds_XPOU of { US mba_aPFe [Occ=Once] ->
                 (\ (s_aPFf [Occ=Once] :: State# RealWorld) ->
                    case fetchAddIntArray# @ RealWorld mba_aPFe 0# 1# s_aPFf of
                    { (# ipv_sPP1 [Occ=Once], ipv1_sPP2 [Occ=Once] #) ->
                    (# ipv_sPP1,
                       (GHC.Types.I# ipv1_sPP2)
                       `cast` (Sym (GHC.Event.Unique.N:Unique[0])
                               :: (Int :: *) ~R# (Unique :: *)) #)
                    })
                 `cast` (Sym (GHC.Types.N:IO[0] <Unique>_R)
                         :: (State# RealWorld -> (# State# RealWorld, Unique #) :: *)
                            ~R# (IO Unique :: *))
                 }}]
newUnique
  = newUnique1_rPRX
    `cast` (<UniqueSource>_R ->_R Sym (GHC.Types.N:IO[0] <Unique>_R)
            :: (UniqueSource
                -> State# RealWorld -> (# State# RealWorld, Unique #) :: *)
               ~R# (UniqueSource -> IO Unique :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Unique.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Unique.$trModule3
  = GHC.Types.TrNameS GHC.Event.Unique.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Event.Unique.$trModule2 = "GHC.Event.Unique"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Unique.$trModule1
  = GHC.Types.TrNameS GHC.Event.Unique.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Event.Unique.$trModule
  = GHC.Types.Module
      GHC.Event.Unique.$trModule3 GHC.Event.Unique.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rPRY :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_rPRY
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcRealWorld (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rPRZ :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_rPRZ
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep2_rPS0 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep2_rPS0
  = GHC.Types.: @ KindRep $krep_rPRY (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_rPS1 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_rPS1
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcMutableByteArray# $krep2_rPS0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tcUniqueSource2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.Unique.$tcUniqueSource2 = "UniqueSource"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tcUniqueSource1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Unique.$tcUniqueSource1
  = GHC.Types.TrNameS GHC.Event.Unique.$tcUniqueSource2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tcUniqueSource :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Unique.$tcUniqueSource
  = GHC.Types.TyCon
      4153085541241292635##
      12084617229254679210##
      GHC.Event.Unique.$trModule
      GHC.Event.Unique.$tcUniqueSource1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_rPS2 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_rPS2
  = GHC.Types.KindRepTyConApp
      GHC.Event.Unique.$tcUniqueSource (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tc'US1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.Unique.$tc'US1
  = GHC.Types.KindRepFun $krep3_rPS1 $krep4_rPS2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tc'US3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Unique.$tc'US3 = "'US"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tc'US2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Unique.$tc'US2
  = GHC.Types.TrNameS GHC.Event.Unique.$tc'US3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tc'US :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Unique.$tc'US
  = GHC.Types.TyCon
      4499588508574223981##
      1978788649827446467##
      GHC.Event.Unique.$trModule
      GHC.Event.Unique.$tc'US2
      0#
      GHC.Event.Unique.$tc'US1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tcUnique2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Unique.$tcUnique2 = "Unique"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tcUnique1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Unique.$tcUnique1
  = GHC.Types.TrNameS GHC.Event.Unique.$tcUnique2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tcUnique :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Unique.$tcUnique
  = GHC.Types.TyCon
      11671042124547125297##
      8473916739967459963##
      GHC.Event.Unique.$trModule
      GHC.Event.Unique.$tcUnique1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_rPS3 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep5_rPS3
  = GHC.Types.KindRepTyConApp
      GHC.Event.Unique.$tcUnique (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tc'Unique1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.Unique.$tc'Unique1
  = GHC.Types.KindRepFun $krep1_rPRZ $krep5_rPS3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tc'Unique3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Unique.$tc'Unique3 = "'Unique"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tc'Unique2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Unique.$tc'Unique2
  = GHC.Types.TrNameS GHC.Event.Unique.$tc'Unique3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Unique.$tc'Unique :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Unique.$tc'Unique
  = GHC.Types.TyCon
      12818822519571632458##
      6073026296752955496##
      GHC.Event.Unique.$trModule
      GHC.Event.Unique.$tc'Unique2
      0#
      GHC.Event.Unique.$tc'Unique1


