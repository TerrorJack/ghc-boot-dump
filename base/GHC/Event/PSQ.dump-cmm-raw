
==================== Raw Cmm ====================
2018-03-16 15:57:56.986195842 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:57:56.990772071 UTC

[section ""data" . GHC.Event.PSQ.$WBin_closure" {
     GHC.Event.PSQ.$WBin_closure:
         const GHC.Event.PSQ.$WBin_info;
 },
 GHC.Event.PSQ.$WBin_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3lqH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3lr7; else goto c3lr8;
       c3lr7: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WBin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3lr8: // global
           I64[Sp - 40] = block_c3lqE_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3lri; else goto c3lqF;
       u3lri: // global
           call _c3lqE(R1) args: 0, res: 0, upd: 0;
       c3lqF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$WBin_info" {
     GHC.Event.PSQ.$WBin_info:
         const GHC.Event.PSQ.$WBin_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c3lqE() //  [R1]
         { []
         }
     {offset
       c3lqE: // global
           I64[Sp] = block_c3lqK_info;
           _s3kdh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdh::I64;
           if (R1 & 7 != 0) goto u3lrh; else goto c3lqL;
       u3lrh: // global
           call _c3lqK(R1) args: 0, res: 0, upd: 0;
       c3lqL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lqE_info" {
     block_c3lqE_info:
         const _c3lqE;
         const 5;
         const 30;
 },
 _c3lqK() //  [R1]
         { []
         }
     {offset
       c3lqK: // global
           I64[Sp] = block_c3lqP_info;
           _s3kdj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3kdj::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lqK_info" {
     block_c3lqK_info:
         const _c3lqK;
         const 69;
         const 30;
 },
 _c3lqP() //  [R1]
         { []
         }
     {offset
       c3lqP: // global
           I64[Sp] = block_c3lqR_info;
           _s3kdk::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3kdk::P64;
           if (R1 & 7 != 0) goto u3lrj; else goto c3lqS;
       u3lrj: // global
           call _c3lqR(R1) args: 0, res: 0, upd: 0;
       c3lqS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lqP_info" {
     block_c3lqP_info:
         const _c3lqP;
         const 197;
         const 30;
 },
 _c3lqR() //  [R1]
         { []
         }
     {offset
       c3lqR: // global
           I64[Sp] = block_c3lqW_info;
           _s3kdm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3kdm::I64;
           if (R1 & 7 != 0) goto u3lrk; else goto c3lqX;
       u3lrk: // global
           call _c3lqW(R1) args: 0, res: 0, upd: 0;
       c3lqX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lqR_info" {
     block_c3lqR_info:
         const _c3lqR;
         const 197;
         const 30;
 },
 _c3lqW() //  [R1]
         { []
         }
     {offset
       c3lqW: // global
           I64[Sp] = block_c3lr1_info;
           _s3kdn::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 40] = _s3kdn::P64;
           if (R1 & 7 != 0) goto u3lrl; else goto c3lr2;
       u3lrl: // global
           call _c3lr1(R1) args: 0, res: 0, upd: 0;
       c3lr2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lqW_info" {
     block_c3lqW_info:
         const _c3lqW;
         const 709;
         const 30;
 },
 _c3lr1() //  [R1]
         { []
         }
     {offset
       c3lr1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lrg; else goto c3lrf;
       c3lrg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lrf: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 32];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lr1_info" {
     block_c3lr1_info:
         const _c3lr1;
         const 709;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.008168414 UTC

[section ""data" . GHC.Event.PSQ.$WTip_closure" {
     GHC.Event.PSQ.$WTip_closure:
         const GHC.Event.PSQ.$WTip_info;
 },
 GHC.Event.PSQ.$WTip_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3ls1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3lsc; else goto c3lsd;
       c3lsc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WTip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lsd: // global
           I64[Sp - 24] = block_c3lrY_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lsk; else goto c3lrZ;
       u3lsk: // global
           call _c3lrY(R1) args: 0, res: 0, upd: 0;
       c3lrZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$WTip_info" {
     GHC.Event.PSQ.$WTip_info:
         const GHC.Event.PSQ.$WTip_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3lrY() //  [R1]
         { []
         }
     {offset
       c3lrY: // global
           I64[Sp] = block_c3ls4_info;
           _s3kdt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdt::I64;
           if (R1 & 7 != 0) goto u3lsj; else goto c3ls5;
       u3lsj: // global
           call _c3ls4(R1) args: 0, res: 0, upd: 0;
       c3ls5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lrY_info" {
     block_c3lrY_info:
         const _c3lrY;
         const 2;
         const 30;
 },
 _c3ls4() //  [R1]
         { []
         }
     {offset
       c3ls4: // global
           I64[Sp] = block_c3ls9_info;
           _s3kdv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3kdv::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ls4_info" {
     block_c3ls4_info:
         const _c3ls4;
         const 66;
         const 30;
 },
 _c3ls9() //  [R1]
         { []
         }
     {offset
       c3ls9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lsi; else goto c3lsh;
       c3lsi: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lsh: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ls9_info" {
     block_c3ls9_info:
         const _c3ls9;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.018209975 UTC

[section ""data" . GHC.Event.PSQ.$WE_closure" {
     GHC.Event.PSQ.$WE_closure:
         const GHC.Event.PSQ.$WE_info;
 },
 GHC.Event.PSQ.$WE_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3lsL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3lsU; else goto c3lsV;
       c3lsU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WE_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lsV: // global
           I64[Sp - 24] = block_c3lsI_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lt1; else goto c3lsJ;
       u3lt1: // global
           call _c3lsI(R1) args: 0, res: 0, upd: 0;
       c3lsJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$WE_info" {
     GHC.Event.PSQ.$WE_info:
         const GHC.Event.PSQ.$WE_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3lsI() //  [R1]
         { []
         }
     {offset
       c3lsI: // global
           I64[Sp] = block_c3lsO_info;
           _s3kdB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdB::I64;
           if (R1 & 7 != 0) goto u3lt0; else goto c3lsP;
       u3lt0: // global
           call _c3lsO(R1) args: 0, res: 0, upd: 0;
       c3lsP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lsI_info" {
     block_c3lsI_info:
         const _c3lsI;
         const 2;
         const 30;
 },
 _c3lsO() //  [R1]
         { []
         }
     {offset
       c3lsO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lsZ; else goto c3lsY;
       c3lsZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lsY: // global
           _s3kdD::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kdD::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lsO_info" {
     block_c3lsO_info:
         const _c3lsO;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.026070135 UTC

[section ""data" . GHC.Event.PSQ.value_closure" {
     GHC.Event.PSQ.value_closure:
         const GHC.Event.PSQ.value_info;
 },
 GHC.Event.PSQ.value_entry() //  [R2]
         { []
         }
     {offset
       c3ltp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ltq; else goto c3ltr;
       c3ltq: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.value_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ltr: // global
           I64[Sp - 8] = block_c3ltm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ltv; else goto c3ltn;
       u3ltv: // global
           call _c3ltm(R1) args: 0, res: 0, upd: 0;
       c3ltn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.value_info" {
     GHC.Event.PSQ.value_info:
         const GHC.Event.PSQ.value_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ltm() //  [R1]
         { []
         }
     {offset
       c3ltm: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ltm_info" {
     block_c3ltm_info:
         const _c3ltm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.031760436 UTC

[section ""data" . GHC.Event.PSQ.prio_closure" {
     GHC.Event.PSQ.prio_closure:
         const GHC.Event.PSQ.prio_info;
 },
 GHC.Event.PSQ.prio_entry() //  [R2]
         { []
         }
     {offset
       c3ltM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ltQ; else goto c3ltR;
       c3ltQ: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.prio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ltR: // global
           I64[Sp - 8] = block_c3ltJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ltV; else goto c3ltK;
       u3ltV: // global
           call _c3ltJ(R1) args: 0, res: 0, upd: 0;
       c3ltK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.prio_info" {
     GHC.Event.PSQ.prio_info:
         const GHC.Event.PSQ.prio_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3ltJ() //  [R1]
         { []
         }
     {offset
       c3ltJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ltU; else goto c3ltT;
       c3ltU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ltT: // global
           _s3kdM::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s3kdM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ltJ_info" {
     block_c3ltJ_info:
         const _c3ltJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.039601892 UTC

[section ""data" . GHC.Event.PSQ.key_closure" {
     GHC.Event.PSQ.key_closure:
         const GHC.Event.PSQ.key_info;
 },
 GHC.Event.PSQ.key_entry() //  [R2]
         { []
         }
     {offset
       c3lud: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3luh; else goto c3lui;
       c3luh: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.key_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lui: // global
           I64[Sp - 8] = block_c3lua_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lum; else goto c3lub;
       u3lum: // global
           call _c3lua(R1) args: 0, res: 0, upd: 0;
       c3lub: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.key_info" {
     GHC.Event.PSQ.key_info:
         const GHC.Event.PSQ.key_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3lua() //  [R1]
         { []
         }
     {offset
       c3lua: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lul; else goto c3luk;
       c3lul: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3luk: // global
           _s3kdQ::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kdQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lua_info" {
     block_c3lua_info:
         const _c3lua;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.046541727 UTC

[section ""data" . GHC.Event.PSQ.null_closure" {
     GHC.Event.PSQ.null_closure:
         const GHC.Event.PSQ.null_info;
 },
 GHC.Event.PSQ.null_entry() //  [R2]
         { []
         }
     {offset
       c3luI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3luJ; else goto c3luK;
       c3luJ: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.null_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3luK: // global
           I64[Sp - 8] = block_c3luB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3luR; else goto c3luC;
       u3luR: // global
           call _c3luB(R1) args: 0, res: 0, upd: 0;
       c3luC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.null_info" {
     GHC.Event.PSQ.null_info:
         const GHC.Event.PSQ.null_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3luB() //  [R1]
         { []
         }
     {offset
       c3luB: // global
           if (R1 & 7 == 3) goto c3luG; else goto c3luF;
       c3luG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3luF: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3luB_info" {
     block_c3luB_info:
         const _c3luB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.053141708 UTC

[section ""data" . GHC.Event.PSQ.findMin_closure" {
     GHC.Event.PSQ.findMin_closure:
         const GHC.Event.PSQ.findMin_info;
 },
 GHC.Event.PSQ.findMin_entry() //  [R2]
         { []
         }
     {offset
       c3lvh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lvi; else goto c3lvj;
       c3lvi: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.findMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lvj: // global
           I64[Sp - 8] = block_c3lv9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lvC; else goto c3lva;
       u3lvC: // global
           call _c3lv9(R1) args: 0, res: 0, upd: 0;
       c3lva: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.findMin_info" {
     GHC.Event.PSQ.findMin_info:
         const GHC.Event.PSQ.findMin_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3lv9() //  [R1]
         { []
         }
     {offset
       c3lv9: // global
           _c3lvg::P64 = R1 & 7;
           if (_c3lvg::P64 < 3) goto u3lvB; else goto c3lvf;
       u3lvB: // global
           if (_c3lvg::P64 < 2) goto c3lvd; else goto c3lve;
       c3lvd: // global
           Hp = Hp + 48;
           _s3kdW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3lvx; else goto c3lvp;
       c3lvp: // global
           _s3kdZ::P64 = P64[_s3kdW::P64 + 7];
           _s3kdX::I64 = I64[_s3kdW::P64 + 31];
           _s3kdY::I64 = I64[_s3kdW::P64 + 39];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3kdZ::P64;
           I64[Hp - 24] = _s3kdX::I64;
           I64[Hp - 16] = _s3kdY::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lve: // global
           Hp = Hp + 48;
           _s3kdW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3lvx; else goto c3lvw;
       c3lvx: // global
           HpAlloc = 48;
           R1 = _s3kdW::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lvw: // global
           _s3ke6::P64 = P64[_s3kdW::P64 + 6];
           _s3ke4::I64 = I64[_s3kdW::P64 + 14];
           _s3ke5::I64 = I64[_s3kdW::P64 + 22];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3ke6::P64;
           I64[Hp - 24] = _s3ke4::I64;
           I64[Hp - 16] = _s3ke5::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lvf: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lv9_info" {
     block_c3lv9_info:
         const _c3lv9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.059319288 UTC

[section ""data" . GHC.Event.PSQ.empty_closure" {
     GHC.Event.PSQ.empty_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.061471333 UTC

[section ""data" . GHC.Event.PSQ.singleton_closure" {
     GHC.Event.PSQ.singleton_closure:
         const GHC.Event.PSQ.singleton_info;
 },
 GHC.Event.PSQ.singleton_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3lvX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.PSQ.$WTip_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.singleton_info" {
     GHC.Event.PSQ.singleton_info:
         const GHC.Event.PSQ.singleton_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.067424301 UTC

[section ""data" . GHC.Event.PSQ.toList_go_closure" {
     GHC.Event.PSQ.toList_go_closure:
         const GHC.Event.PSQ.toList_go_info;
 },
 sat_s3kei_entry() //  [R1]
         { []
         }
     {offset
       c3lwl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3lwm; else goto c3lwn;
       c3lwm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lwn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3kei_info" {
     sat_s3kei_info:
         const sat_s3kei_entry;
         const 2;
         const 18;
 },
 sat_s3kej_entry() //  [R1]
         { []
         }
     {offset
       c3lwo: // global
           _s3kej::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3lwp; else goto c3lwq;
       c3lwq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lws; else goto c3lwr;
       c3lws: // global
           HpAlloc = 32;
           goto c3lwp;
       c3lwp: // global
           R1 = _s3kej::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lwr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kej::P64;
           _s3ke8::P64 = P64[_s3kej::P64 + 16];
           _s3kef::P64 = P64[_s3kej::P64 + 24];
           _s3keg::P64 = P64[_s3kej::P64 + 32];
           I64[Hp - 24] = sat_s3kei_info;
           P64[Hp - 8] = _s3ke8::P64;
           P64[Hp] = _s3keg::P64;
           R3 = _s3kef::P64;
           R2 = Hp - 24;
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3kej_info" {
     sat_s3kej_info:
         const sat_s3kej_entry;
         const 3;
         const 15;
 },
 GHC.Event.PSQ.toList_go_entry() //  [R2, R3]
         { []
         }
     {offset
       c3lwy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3lwz; else goto c3lwA;
       c3lwz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.toList_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lwA: // global
           I64[Sp - 16] = block_c3lw8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3lwR; else goto c3lw9;
       u3lwR: // global
           call _c3lw8(R1) args: 0, res: 0, upd: 0;
       c3lw9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.toList_go_info" {
     GHC.Event.PSQ.toList_go_info:
         const GHC.Event.PSQ.toList_go_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3lw8() //  [R1]
         { []
         }
     {offset
       c3lw8: // global
           _s3ke8::P64 = P64[Sp + 8];
           _c3lwx::P64 = R1 & 7;
           if (_c3lwx::P64 < 3) goto u3lwQ; else goto c3lww;
       u3lwQ: // global
           if (_c3lwx::P64 < 2) goto c3lwu; else goto c3lwv;
       c3lwu: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3lwF; else goto c3lwE;
       c3lwF: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lwE: // global
           _s3ked::P64 = P64[R1 + 7];
           _s3kef::P64 = P64[R1 + 15];
           _s3keg::P64 = P64[R1 + 23];
           _s3keb::I64 = I64[R1 + 31];
           _s3kec::I64 = I64[R1 + 39];
           I64[Hp - 88] = sat_s3kej_info;
           P64[Hp - 72] = _s3ke8::P64;
           P64[Hp - 64] = _s3kef::P64;
           P64[Hp - 56] = _s3keg::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3ked::P64;
           I64[Hp - 32] = _s3keb::I64;
           I64[Hp - 24] = _s3kec::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lwv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lwM; else goto c3lwL;
       c3lwM: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lwL: // global
           _s3kem::P64 = P64[R1 + 6];
           _s3kek::I64 = I64[R1 + 14];
           _s3kel::I64 = I64[R1 + 22];
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3kem::P64;
           I64[Hp - 32] = _s3kek::I64;
           I64[Hp - 24] = _s3kel::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3ke8::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lww: // global
           R1 = _s3ke8::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lw8_info" {
     block_c3lw8_info:
         const _c3lw8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.081051459 UTC

[section ""data" . GHC.Event.PSQ.toList_closure" {
     GHC.Event.PSQ.toList_closure:
         const GHC.Event.PSQ.toList_info;
 },
 GHC.Event.PSQ.toList_entry() //  [R2]
         { []
         }
     {offset
       c3lxl: // global
           R3 = R2;
           R2 = GHC.Types.[]_closure+1;
           call GHC.Event.PSQ.toList_go_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.toList_info" {
     GHC.Event.PSQ.toList_info:
         const GHC.Event.PSQ.toList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.103925289 UTC

[section ""data" . GHC.Event.PSQ.merge_closure" {
     GHC.Event.PSQ.merge_closure:
         const GHC.Event.PSQ.merge_info;
 },
 GHC.Event.PSQ.merge_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3lxE: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3lxF; else goto c3lxG;
       c3lxF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.merge_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lxG: // global
           I64[Sp - 24] = block_c3lxw_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lCp; else goto c3lxx;
       u3lCp: // global
           call _c3lxw(R1) args: 0, res: 0, upd: 0;
       c3lxx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.merge_info" {
     GHC.Event.PSQ.merge_info:
         const GHC.Event.PSQ.merge_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3lxw() //  [R1]
         { []
         }
     {offset
       c3lxw: // global
           _s3keq::P64 = P64[Sp + 16];
           _c3lxD::P64 = R1 & 7;
           if (_c3lxD::P64 < 3) goto u3lCi; else goto c3lxC;
       u3lCi: // global
           if (_c3lxD::P64 < 2) goto c3lxA; else goto c3lxB;
       c3lxA: // global
           I64[Sp - 48] = block_c3lxJ_info;
           _s3ker::P64 = R1;
           _s3keu::P64 = P64[R1 + 7];
           _s3kew::P64 = P64[R1 + 15];
           _s3kex::P64 = P64[R1 + 23];
           _s3kes::I64 = I64[R1 + 31];
           _s3ket::I64 = I64[R1 + 39];
           _s3kev::I64 = I64[R1 + 47];
           R1 = _s3keq::P64;
           I64[Sp - 40] = _s3ket::I64;
           P64[Sp - 32] = _s3keu::P64;
           I64[Sp - 24] = _s3kev::I64;
           P64[Sp - 16] = _s3kew::P64;
           P64[Sp - 8] = _s3kex::P64;
           I64[Sp] = _s3kes::I64;
           P64[Sp + 16] = _s3ker::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3lCn; else goto c3lxL;
       u3lCn: // global
           call _c3lxJ(R1) args: 0, res: 0, upd: 0;
       c3lxL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lxB: // global
           I64[Sp - 24] = block_c3lA1_info;
           _s3ker::P64 = R1;
           _s3kf9::P64 = P64[R1 + 6];
           _s3kf7::I64 = I64[R1 + 14];
           _s3kf8::I64 = I64[R1 + 22];
           R1 = _s3keq::P64;
           I64[Sp - 16] = _s3kf8::I64;
           P64[Sp - 8] = _s3kf9::P64;
           I64[Sp] = _s3kf7::I64;
           P64[Sp + 16] = _s3ker::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lCo; else goto c3lA3;
       u3lCo: // global
           call _c3lA1(R1) args: 0, res: 0, upd: 0;
       c3lA3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lxC: // global
           R1 = _s3keq::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lxw_info" {
     block_c3lxw_info:
         const _c3lxw;
         const 2;
         const 30;
 },
 _c3lxJ() //  [R1]
         { []
         }
     {offset
       c3lxJ: // global
           _c3lCh::P64 = R1 & 7;
           if (_c3lCh::P64 < 3) goto u3lCj; else goto u3lCl;
       u3lCj: // global
           _s3keo::P64 = P64[Sp + 56];
           _s3kes::I64 = I64[Sp + 48];
           _s3ket::I64 = I64[Sp + 8];
           if (_c3lCh::P64 < 2) goto c3lyS; else goto c3lzU;
       c3lyS: // global
           _s3keB::P64 = P64[R1 + 7];
           _s3keD::P64 = P64[R1 + 15];
           _s3keE::P64 = P64[R1 + 23];
           _s3kez::I64 = I64[R1 + 31];
           _s3keA::I64 = I64[R1 + 39];
           _s3keC::I64 = I64[R1 + 47];
           if (_s3ket::I64 == _s3keA::I64) goto c3lyQ; else goto c3lyJ;
       c3lyQ: // global
           _s3key::P64 = R1;
           if (%MO_S_Ge_W64(_s3kes::I64,
                            _s3kez::I64)) goto s3keF; else goto s3keK;
       c3lyJ: // global
           _s3key::P64 = R1;
           if (_s3ket::I64 > _s3keA::I64) goto s3keF; else goto s3keK;
       s3keF: // global
           I64[Sp + 8] = block_c3lxV_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3keE::P64;
           P64[Sp + 24] = _s3keD::P64;
           I64[Sp + 32] = _s3keC::I64;
           P64[Sp + 40] = _s3keB::P64;
           I64[Sp + 48] = _s3keA::I64;
           I64[Sp + 56] = _s3kez::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3lCs; else goto c3lxW;
       u3lCs: // global
           call _c3lxV(R1) args: 0, res: 0, upd: 0;
       c3lxW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       s3keK: // global
           I64[Sp] = block_c3lyi_info;
           R1 = _s3keo::P64;
           P64[Sp + 64] = _s3key::P64;
           if (R1 & 7 != 0) goto u3lCt; else goto c3lyj;
       u3lCt: // global
           call _c3lyi(R1) args: 0, res: 0, upd: 0;
       c3lyj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lzU: // global
           _s3keU::P64 = P64[R1 + 6];
           _s3keS::I64 = I64[R1 + 14];
           _s3keT::I64 = I64[R1 + 22];
           if (_s3ket::I64 == _s3keT::I64) goto c3lzT; else goto c3lzC;
       c3lzT: // global
           _s3key::P64 = R1;
           if (%MO_S_Lt_W64(_s3kes::I64,
                            _s3keS::I64)) goto s3keV; else goto c3lzO;
       c3lzO: // global
           I64[Sp + 32] = block_c3lzH_info;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3keU::P64;
           I64[Sp + 48] = _s3keT::I64;
           I64[Sp + 56] = _s3keS::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3lCr; else goto c3lzI;
       u3lCr: // global
           call _c3lzH(R1) args: 0, res: 0, upd: 0;
       c3lzI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lzC: // global
           _s3key::P64 = R1;
           if (_s3ket::I64 <= _s3keT::I64) goto s3keV; else goto c3lzw;
       s3keV: // global
           I64[Sp] = block_c3lz1_info;
           R1 = _s3keo::P64;
           P64[Sp + 64] = _s3key::P64;
           if (R1 & 7 != 0) goto u3lCu; else goto c3lz2;
       u3lCu: // global
           call _c3lz1(R1) args: 0, res: 0, upd: 0;
       c3lz2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lzw: // global
           I64[Sp + 32] = block_c3lzp_info;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3keU::P64;
           I64[Sp + 48] = _s3keT::I64;
           I64[Sp + 56] = _s3keS::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3lCq; else goto c3lzq;
       u3lCq: // global
           call _c3lzp(R1) args: 0, res: 0, upd: 0;
       c3lzq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3lCl: // global
           Sp = Sp + 64;
           call _c3lCc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3lxJ_info" {
     block_c3lxJ_info:
         const _c3lxJ;
         const 2376;
         const 30;
 },
 _c3lxV() //  [R1]
         { []
         }
     {offset
       c3lxV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ly9; else goto c3ly8;
       c3ly9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ly8: // global
           _s3keH::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3keD::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3ly1_info;
           R4 = P64[Sp + 8];
           R3 = _s3keD::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3keH::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lxV_info" {
     block_c3lxV_info:
         const _c3lxV;
         const 3335;
         const 30;
 },
 _c3ly1() //  [R1]
         { []
         }
     {offset
       c3ly1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lyc; else goto c3lyb;
       c3lyc: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lyb: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ly1_info" {
     block_c3ly1_info:
         const _c3ly1;
         const 837;
         const 30;
 },
 _c3lyi() //  [R1]
         { []
         }
     {offset
       c3lyi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lyw; else goto c3lyv;
       c3lyw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lyv: // global
           _s3keM::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3lyo_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3keM::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lyi_info" {
     block_c3lyi_info:
         const _c3lyi;
         const 6472;
         const 30;
 },
 _c3lyo() //  [R1]
         { []
         }
     {offset
       c3lyo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lyz; else goto c3lyy;
       c3lyz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lyy: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lyo_info" {
     block_c3lyo_info:
         const _c3lyo;
         const 8008;
         const 30;
 },
 _c3lzH() //  [R1]
         { []
         }
     {offset
       c3lzH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lzR; else goto c3lzQ;
       c3lzR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lzQ: // global
           _s3kf6::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kf6::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lzH_info" {
     block_c3lzH_info:
         const _c3lzH;
         const 388;
         const 30;
 },
 _c3lzp() //  [R1]
         { []
         }
     {offset
       c3lzp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lzz; else goto c3lzy;
       c3lzz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lzy: // global
           _s3kf3::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kf3::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lzp_info" {
     block_c3lzp_info:
         const _c3lzp;
         const 388;
         const 30;
 },
 _c3lz1() //  [R1]
         { []
         }
     {offset
       c3lz1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lzf; else goto c3lze;
       c3lzf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lze: // global
           _s3keX::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3lz7_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3keX::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lz1_info" {
     block_c3lz1_info:
         const _c3lz1;
         const 6472;
         const 30;
 },
 _c3lz7() //  [R1]
         { []
         }
     {offset
       c3lz7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lzi; else goto c3lzh;
       c3lzi: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lzh: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lz7_info" {
     block_c3lz7_info:
         const _c3lz7;
         const 8008;
         const 30;
 },
 _c3lA1() //  [R1]
         { []
         }
     {offset
       c3lA1: // global
           _c3lCg::P64 = R1 & 7;
           if (_c3lCg::P64 < 3) goto u3lCk; else goto u3lCm;
       u3lCk: // global
           _s3keo::P64 = P64[Sp + 32];
           _s3kf7::I64 = I64[Sp + 24];
           _s3kf8::I64 = I64[Sp + 8];
           if (_c3lCg::P64 < 2) goto c3lB9; else goto c3lC8;
       c3lB9: // global
           _s3kfd::P64 = P64[R1 + 7];
           _s3kff::P64 = P64[R1 + 15];
           _s3kfg::P64 = P64[R1 + 23];
           _s3kfb::I64 = I64[R1 + 31];
           _s3kfc::I64 = I64[R1 + 39];
           _s3kfe::I64 = I64[R1 + 47];
           if (_s3kf8::I64 == _s3kfc::I64) goto c3lB7; else goto c3lAP;
       c3lB7: // global
           if (%MO_S_Ge_W64(_s3kf7::I64,
                            _s3kfb::I64)) goto s3kfh; else goto c3lB3;
       c3lB3: // global
           I64[Sp] = block_c3lAX_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3lCx; else goto c3lAY;
       u3lCx: // global
           call _c3lAX(R1) args: 0, res: 0, upd: 0;
       c3lAY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lAP: // global
           if (_s3kf8::I64 > _s3kfc::I64) goto s3kfh; else goto c3lAK;
       s3kfh: // global
           I64[Sp - 16] = block_c3lAd_info;
           R1 = _s3keo::P64;
           P64[Sp - 8] = _s3kfg::P64;
           P64[Sp] = _s3kff::P64;
           I64[Sp + 8] = _s3kfe::I64;
           P64[Sp + 16] = _s3kfd::P64;
           I64[Sp + 24] = _s3kfc::I64;
           I64[Sp + 32] = _s3kfb::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3lCC; else goto c3lAe;
       u3lCC: // global
           call _c3lAd(R1) args: 0, res: 0, upd: 0;
       c3lAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lAK: // global
           I64[Sp] = block_c3lAE_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3lCw; else goto c3lAF;
       u3lCw: // global
           call _c3lAE(R1) args: 0, res: 0, upd: 0;
       c3lAF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lC8: // global
           _s3kfv::P64 = P64[R1 + 6];
           _s3kft::I64 = I64[R1 + 14];
           _s3kfu::I64 = I64[R1 + 22];
           if (_s3kf8::I64 == _s3kfu::I64) goto c3lC7; else goto c3lBG;
       c3lC7: // global
           if (%MO_S_Ge_W64(_s3kf7::I64,
                            _s3kft::I64)) goto c3lBS; else goto c3lC3;
       c3lBS: // global
           I64[Sp + 8] = block_c3lBL_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3kfv::P64;
           I64[Sp + 24] = _s3kfu::I64;
           I64[Sp + 32] = _s3kft::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3lCA; else goto c3lBM;
       u3lCA: // global
           call _c3lBL(R1) args: 0, res: 0, upd: 0;
       c3lBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lC3: // global
           I64[Sp] = block_c3lBX_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3lCB; else goto c3lBY;
       u3lCB: // global
           call _c3lBX(R1) args: 0, res: 0, upd: 0;
       c3lBY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lBG: // global
           if (_s3kf8::I64 > _s3kfu::I64) goto c3lBq; else goto c3lBB;
       c3lBq: // global
           I64[Sp + 8] = block_c3lBj_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3kfv::P64;
           I64[Sp + 24] = _s3kfu::I64;
           I64[Sp + 32] = _s3kft::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3lCy; else goto c3lBk;
       u3lCy: // global
           call _c3lBj(R1) args: 0, res: 0, upd: 0;
       c3lBk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lBB: // global
           I64[Sp] = block_c3lBv_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3lCz; else goto c3lBw;
       u3lCz: // global
           call _c3lBv(R1) args: 0, res: 0, upd: 0;
       c3lBw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3lCm: // global
           Sp = Sp + 40;
           call _c3lCc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3lA1_info" {
     block_c3lA1_info:
         const _c3lA1;
         const 325;
         const 30;
 },
 _c3lAX() //  [R1]
         { []
         }
     {offset
       c3lAX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lB6; else goto c3lB5;
       c3lB6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lB5: // global
           _s3kfs::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfs::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lAX_info" {
     block_c3lAX_info:
         const _c3lAX;
         const 837;
         const 30;
 },
 _c3lAd() //  [R1]
         { []
         }
     {offset
       c3lAd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lAr; else goto c3lAq;
       c3lAr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lAq: // global
           _s3kfj::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3kff::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3lAj_info;
           R4 = P64[Sp + 8];
           R3 = _s3kff::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3kfj::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lAd_info" {
     block_c3lAd_info:
         const _c3lAd;
         const 3335;
         const 30;
 },
 _c3lAj() //  [R1]
         { []
         }
     {offset
       c3lAj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lAu; else goto c3lAt;
       c3lAu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lAt: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lAj_info" {
     block_c3lAj_info:
         const _c3lAj;
         const 837;
         const 30;
 },
 _c3lAE() //  [R1]
         { []
         }
     {offset
       c3lAE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lAN; else goto c3lAM;
       c3lAN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lAM: // global
           _s3kfp::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfp::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lAE_info" {
     block_c3lAE_info:
         const _c3lAE;
         const 837;
         const 30;
 },
 _c3lBL() //  [R1]
         { []
         }
     {offset
       c3lBL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lBV; else goto c3lBU;
       c3lBV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lBU: // global
           _s3kfE::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kfE::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lBL_info" {
     block_c3lBL_info:
         const _c3lBL;
         const 388;
         const 30;
 },
 _c3lBX() //  [R1]
         { []
         }
     {offset
       c3lBX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lC6; else goto c3lC5;
       c3lC6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lC5: // global
           _s3kfG::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfG::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lBX_info" {
     block_c3lBX_info:
         const _c3lBX;
         const 837;
         const 30;
 },
 _c3lBj() //  [R1]
         { []
         }
     {offset
       c3lBj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lBt; else goto c3lBs;
       c3lBt: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lBs: // global
           _s3kfz::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kfz::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lBj_info" {
     block_c3lBj_info:
         const _c3lBj;
         const 388;
         const 30;
 },
 _c3lBv() //  [R1]
         { []
         }
     {offset
       c3lBv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lBE; else goto c3lBD;
       c3lBE: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lBD: // global
           _s3kfB::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfB::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lBv_info" {
     block_c3lBv_info:
         const _c3lBv;
         const 837;
         const 30;
 },
 _c3lCc() //  []
         { []
         }
     {offset
       c3lCc: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.157072352 UTC

[section ""data" . GHC.Event.PSQ.$watMost_closure" {
     GHC.Event.PSQ.$watMost_closure:
         const GHC.Event.PSQ.$watMost_info;
 },
 ds_s3kfW_entry() //  [R1]
         { []
         }
     {offset
       c3lFB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3lFC; else goto c3lFD;
       c3lFC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lFD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3lFy_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s3kfW_info" {
     ds_s3kfW_info:
         const ds_s3kfW_entry;
         const 3;
         const 15;
 },
 _c3lFy() //  [R1, R2]
         { []
         }
     {offset
       c3lFy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3lFG; else goto c3lFF;
       c3lFG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3lFF: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3lFy_info" {
     block_c3lFy_info:
         const _c3lFy;
         const 0;
         const 30;
 },
 ds1_s3kg0_entry() //  [R1]
         { []
         }
     {offset
       c3lFP: // global
           _s3kg0::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3lFQ; else goto c3lFR;
       c3lFR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3lFT; else goto c3lFS;
       c3lFT: // global
           HpAlloc = 24;
           goto c3lFQ;
       c3lFQ: // global
           R1 = _s3kg0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lFS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kg0::P64;
           _s3kfJ::P64 = P64[_s3kg0::P64 + 16];
           _s3kfS::P64 = P64[_s3kg0::P64 + 24];
           _s3kfW::P64 = P64[_s3kg0::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s3kfW::P64;
           I64[Sp - 24] = block_c3lFM_info;
           R3 = _s3kfS::P64;
           R2 = Hp - 16;
           R1 = _s3kfJ::P64;
           Sp = Sp - 24;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3kg0_info" {
     ds1_s3kg0_info:
         const ds1_s3kg0_entry;
         const 3;
         const 15;
 },
 _c3lFM() //  [R1, R2]
         { []
         }
     {offset
       c3lFM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3lFW; else goto c3lFV;
       c3lFW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3lFV: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3lFM_info" {
     block_c3lFM_info:
         const _c3lFM;
         const 0;
         const 30;
 },
 sat_s3kgl_entry() //  [R1]
         { []
         }
     {offset
       c3lG4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3lGd; else goto c3lGe;
       c3lGd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lGe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3lG1_info;
           _s3kg0::P64 = P64[R1 + 24];
           _s3kfQ::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s3kfQ::I64;
           P64[Sp - 24] = _s3kg0::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3lGk; else goto c3lG2;
       u3lGk: // global
           call _c3lG1(R1) args: 0, res: 0, upd: 0;
       c3lG2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3kgl_info" {
     sat_s3kgl_info:
         const sat_s3kgl_entry;
         const 4294967298;
         const 15;
 },
 _c3lG1() //  [R1]
         { []
         }
     {offset
       c3lG1: // global
           I64[Sp] = block_c3lG7_info;
           _s3kgg::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3kgg::P64;
           if (R1 & 7 != 0) goto u3lGj; else goto c3lG8;
       u3lGj: // global
           call _c3lG7(R1) args: 0, res: 0, upd: 0;
       c3lG8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3lG1_info" {
     block_c3lG1_info:
         const _c3lG1;
         const 66;
         const 30;
 },
 _c3lG7() //  [R1]
         { []
         }
     {offset
       c3lG7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lGi; else goto c3lGh;
       c3lGi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3lGh: // global
           _s3kgj::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           R4 = _s3kgj::P64;
           R3 = P64[Sp + 16];
           R2 = Hp - 7;
           Sp = Sp + 24;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3lG7_info" {
     block_c3lG7_info:
         const _c3lG7;
         const 66;
         const 30;
 },
 $wgo_s3kfJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3lGq: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3lGr; else goto c3lGs;
       c3lGr: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lGs: // global
           I64[Sp - 32] = block_c3lFh_info;
           _s3kfJ::P64 = R1;
           _s3kfH::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s3kfH::P64;
           P64[Sp - 16] = _s3kfJ::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3lH2; else goto c3lFi;
       u3lH2: // global
           call _c3lFh(R1) args: 0, res: 0, upd: 0;
       c3lFi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s3kfJ_info" {
     $wgo_s3kfJ_info:
         const $wgo_s3kfJ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3lFh() //  [R1]
         { []
         }
     {offset
       c3lFh: // global
           _c3lGp::P64 = R1 & 7;
           if (_c3lGp::P64 < 3) goto u3lGZ; else goto c3lGo;
       u3lGZ: // global
           _s3kfH::P64 = P64[Sp + 8];
           if (_c3lGp::P64 < 2) goto c3lGm; else goto c3lGn;
       c3lGm: // global
           I64[Sp - 48] = block_c3lFm_info;
           _s3kfM::P64 = R1;
           _s3kfP::P64 = P64[R1 + 7];
           _s3kfR::P64 = P64[R1 + 15];
           _s3kfS::P64 = P64[R1 + 23];
           _s3kfN::I64 = I64[R1 + 31];
           _s3kfO::I64 = I64[R1 + 39];
           _s3kfQ::I64 = I64[R1 + 47];
           R1 = _s3kfH::P64;
           I64[Sp - 40] = _s3kfO::I64;
           P64[Sp - 32] = _s3kfP::P64;
           I64[Sp - 24] = _s3kfQ::I64;
           P64[Sp - 16] = _s3kfR::P64;
           P64[Sp - 8] = _s3kfS::P64;
           I64[Sp] = _s3kfN::I64;
           P64[Sp + 8] = _s3kfM::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3lH0; else goto c3lFn;
       u3lH0: // global
           call _c3lFm(R1) args: 0, res: 0, upd: 0;
       c3lFn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lGn: // global
           I64[Sp - 16] = block_c3lGF_info;
           _s3kfM::P64 = R1;
           _s3kgo::P64 = P64[R1 + 6];
           _s3kgm::I64 = I64[R1 + 14];
           _s3kgn::I64 = I64[R1 + 22];
           R1 = _s3kfH::P64;
           P64[Sp - 8] = _s3kgo::P64;
           I64[Sp] = _s3kgn::I64;
           I64[Sp + 8] = _s3kgm::I64;
           P64[Sp + 16] = _s3kfM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3lH1; else goto c3lGH;
       u3lH1: // global
           call _c3lGF(R1) args: 0, res: 0, upd: 0;
       c3lGH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lGo: // global
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lFh_info" {
     block_c3lFh_info:
         const _c3lFh;
         const 3;
         const 30;
 },
 _c3lFm() //  [R1]
         { []
         }
     {offset
       c3lFm: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c3lGw; else goto c3lGv;
       c3lGw: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lGv: // global
           _s3kfK::P64 = P64[Sp + 72];
           _s3kfO::I64 = I64[Sp + 8];
           if (_s3kfO::I64 <= I64[R1 + 7]) goto c3lGB; else goto c3lGC;
       c3lGB: // global
           I64[Hp - 192] = ds_s3kfW_info;
           _s3kfJ::P64 = P64[Sp + 64];
           P64[Hp - 176] = _s3kfJ::P64;
           P64[Hp - 168] = _s3kfK::P64;
           P64[Hp - 160] = P64[Sp + 32];
           I64[Hp - 152] = ds1_s3kg0_info;
           P64[Hp - 136] = _s3kfJ::P64;
           P64[Hp - 128] = P64[Sp + 40];
           _c3lFu::P64 = Hp - 192;
           P64[Hp - 120] = _c3lFu::P64;
           I64[Hp - 112] = sat_s3kgl_info;
           P64[Hp - 96] = _c3lFu::P64;
           _c3lFH::P64 = Hp - 152;
           P64[Hp - 88] = _c3lFH::P64;
           I64[Hp - 80] = I64[Sp + 24];
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _c3lFH::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = I64[Sp + 48];
           I64[Hp - 24] = _s3kfO::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 72;
           R2 = Hp - 112;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lGC: // global
           Hp = Hp - 200;
           R2 = P64[Sp + 56];
           R1 = _s3kfK::P64;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lFm_info" {
     block_c3lFm_info:
         const _c3lFm;
         const 2377;
         const 30;
 },
 _c3lGF() //  [R1]
         { []
         }
     {offset
       c3lGF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lGN; else goto c3lGM;
       c3lGN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lGM: // global
           _s3kfK::P64 = P64[Sp + 40];
           _s3kgn::I64 = I64[Sp + 16];
           if (_s3kgn::I64 <= I64[R1 + 7]) goto c3lGU; else goto c3lGV;
       c3lGU: // global
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = I64[Sp + 24];
           I64[Hp - 24] = _s3kgn::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3kfK::P64;
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lGV: // global
           Hp = Hp - 56;
           R2 = P64[Sp + 32];
           R1 = _s3kfK::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lGF_info" {
     block_c3lGF_info:
         const _c3lGF;
         const 389;
         const 30;
 },
 GHC.Event.PSQ.$watMost_entry() //  [R2, R3]
         { []
         }
     {offset
       c3lH3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lH7; else goto c3lH6;
       c3lH7: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$watMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lH6: // global
           I64[Hp - 8] = $wgo_s3kfJ_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 6;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$watMost_info" {
     GHC.Event.PSQ.$watMost_info:
         const GHC.Event.PSQ.$watMost_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.182793598 UTC

[section ""data" . GHC.Event.PSQ.atMost_closure" {
     GHC.Event.PSQ.atMost_closure:
         const GHC.Event.PSQ.atMost_info;
 },
 GHC.Event.PSQ.atMost_entry() //  [R2, R3]
         { []
         }
     {offset
       c3lIi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lIj; else goto c3lIk;
       c3lIj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.atMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lIk: // global
           I64[Sp - 8] = block_c3lIf_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$watMost_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.atMost_info" {
     GHC.Event.PSQ.atMost_info:
         const GHC.Event.PSQ.atMost_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3lIf() //  [R1, R2]
         { []
         }
     {offset
       c3lIf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3lIn; else goto c3lIm;
       c3lIn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3lIm: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lIf_info" {
     block_c3lIf_info:
         const _c3lIf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.190616302 UTC

[section ""data" . GHC.Event.PSQ.minView_closure" {
     GHC.Event.PSQ.minView_closure:
         const GHC.Event.PSQ.minView_info;
 },
 sat_s3kgJ_entry() //  [R1]
         { []
         }
     {offset
       c3lIL: // global
           _s3kgJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3lIM; else goto c3lIN;
       c3lIN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lIP; else goto c3lIO;
       c3lIP: // global
           HpAlloc = 16;
           goto c3lIM;
       c3lIM: // global
           R1 = _s3kgJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lIO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kgJ::P64;
           _s3kgF::P64 = P64[_s3kgJ::P64 + 16];
           _s3kgG::P64 = P64[_s3kgJ::P64 + 24];
           _s3kgE::I64 = I64[_s3kgJ::P64 + 32];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kgE::I64;
           R4 = _s3kgG::P64;
           R3 = _s3kgF::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3kgJ_info" {
     sat_s3kgJ_info:
         const sat_s3kgJ_entry;
         const 4294967298;
         const 15;
 },
 GHC.Event.PSQ.minView_entry() //  [R2]
         { []
         }
     {offset
       c3lIV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lIW; else goto c3lIX;
       c3lIW: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.minView_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lIX: // global
           I64[Sp - 8] = block_c3lIB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lJg; else goto c3lIC;
       u3lJg: // global
           call _c3lIB(R1) args: 0, res: 0, upd: 0;
       c3lIC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.minView_info" {
     GHC.Event.PSQ.minView_info:
         const GHC.Event.PSQ.minView_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3lIB() //  [R1]
         { []
         }
     {offset
       c3lIB: // global
           _c3lIU::P64 = R1 & 7;
           if (_c3lIU::P64 < 3) goto u3lJf; else goto c3lIT;
       u3lJf: // global
           if (_c3lIU::P64 < 2) goto c3lIR; else goto c3lIS;
       c3lIR: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3lJ3; else goto c3lJ2;
       c3lJ3: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lJ2: // global
           _s3kgD::P64 = P64[R1 + 7];
           _s3kgF::P64 = P64[R1 + 15];
           _s3kgG::P64 = P64[R1 + 23];
           _s3kgB::I64 = I64[R1 + 31];
           _s3kgC::I64 = I64[R1 + 39];
           _s3kgE::I64 = I64[R1 + 47];
           I64[Hp - 104] = sat_s3kgJ_info;
           P64[Hp - 88] = _s3kgF::P64;
           P64[Hp - 80] = _s3kgG::P64;
           I64[Hp - 72] = _s3kgE::I64;
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3kgD::P64;
           I64[Hp - 48] = _s3kgB::I64;
           I64[Hp - 40] = _s3kgC::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lIS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3lJb; else goto c3lJa;
       c3lJb: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lJa: // global
           _s3kgN::P64 = P64[R1 + 6];
           _s3kgL::I64 = I64[R1 + 14];
           _s3kgM::I64 = I64[R1 + 22];
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3kgN::P64;
           I64[Hp - 48] = _s3kgL::I64;
           I64[Hp - 40] = _s3kgM::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lIT: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lIB_info" {
     block_c3lIB_info:
         const _c3lIB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.20090344 UTC

[section ""data" . GHC.Event.PSQ.deleteMin_closure" {
     GHC.Event.PSQ.deleteMin_closure:
         const GHC.Event.PSQ.deleteMin_info;
 },
 GHC.Event.PSQ.deleteMin_entry() //  [R2]
         { []
         }
     {offset
       c3lJP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lJQ; else goto c3lJR;
       c3lJQ: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.deleteMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lJR: // global
           I64[Sp - 8] = block_c3lJH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lK5; else goto c3lJI;
       u3lK5: // global
           call _c3lJH(R1) args: 0, res: 0, upd: 0;
       c3lJI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.deleteMin_info" {
     GHC.Event.PSQ.deleteMin_info:
         const GHC.Event.PSQ.deleteMin_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3lJH() //  [R1]
         { []
         }
     {offset
       c3lJH: // global
           _c3lJO::P64 = R1 & 7;
           if (_c3lJO::P64 >= 3) goto c3lJN; else goto u3lK4;
       u3lK4: // global
           if (_c3lJO::P64 >= 2) goto c3lJN; else goto c3lJL;
       c3lJN: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lJL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lJX; else goto c3lJW;
       c3lJX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lJW: // global
           _s3kgW::P64 = P64[R1 + 15];
           _s3kgX::P64 = P64[R1 + 23];
           _s3kgV::I64 = I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kgV::I64;
           R4 = _s3kgX::P64;
           R3 = _s3kgW::P64;
           R2 = Hp - 7;
           Sp = Sp + 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lJH_info" {
     block_c3lJH_info:
         const _c3lJH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.207091857 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule4_bytes" {
     GHC.Event.PSQ.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.208782894 UTC

[section ""data" . GHC.Event.PSQ.$trModule3_closure" {
     GHC.Event.PSQ.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.210629951 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule2_bytes" {
     GHC.Event.PSQ.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,80,83,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.212354774 UTC

[section ""data" . GHC.Event.PSQ.$trModule1_closure" {
     GHC.Event.PSQ.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.214265185 UTC

[section ""data" . GHC.Event.PSQ.$trModule_closure" {
     GHC.Event.PSQ.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.PSQ.$trModule3_closure+1;
         const GHC.Event.PSQ.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.216073696 UTC

[section ""data" . $krep_r3kcT_closure" {
     $krep_r3kcT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.218086017 UTC

[section ""data" . $krep1_r3kcU_closure" {
     $krep1_r3kcU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.219931434 UTC

[section ""data" . $krep2_r3kcV_closure" {
     $krep2_r3kcV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.221712908 UTC

[section ""data" . $krep3_r3kcW_closure" {
     $krep3_r3kcW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.223425265 UTC

[section ""cstring" . GHC.Event.PSQ.$tcElem2_bytes" {
     GHC.Event.PSQ.$tcElem2_bytes:
         I8[] [69,108,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.225974025 UTC

[section ""data" . GHC.Event.PSQ.$tcElem1_closure" {
     GHC.Event.PSQ.$tcElem1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcElem2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.22772502 UTC

[section ""data" . GHC.Event.PSQ.$tcElem_closure" {
     GHC.Event.PSQ.$tcElem_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcElem1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15044414420558834066;
         const 12198171511156299872;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.230182924 UTC

[section ""data" . $krep4_r3kcX_closure" {
     $krep4_r3kcX_closure:
         const :_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.231909647 UTC

[section ""data" . $krep5_r3kcY_closure" {
     $krep5_r3kcY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcElem_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.233775836 UTC

[section ""data" . $krep6_r3kcZ_closure" {
     $krep6_r3kcZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep5_r3kcY_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.235565531 UTC

[section ""data" . $krep7_r3kd0_closure" {
     $krep7_r3kd0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep6_r3kcZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.237414702 UTC

[section ""data" . GHC.Event.PSQ.$tc'E1_closure" {
     GHC.Event.PSQ.$tc'E1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep7_r3kd0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.239257072 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'E3_bytes" {
     GHC.Event.PSQ.$tc'E3_bytes:
         I8[] [39,69]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.240914428 UTC

[section ""data" . GHC.Event.PSQ.$tc'E2_closure" {
     GHC.Event.PSQ.$tc'E2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'E3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.242911831 UTC

[section ""data" . GHC.Event.PSQ.$tc'E_closure" {
     GHC.Event.PSQ.$tc'E_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'E2_closure+1;
         const GHC.Event.PSQ.$tc'E1_closure+4;
         const 11813029942800942247;
         const 17450377919573390885;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.244748817 UTC

[section ""cstring" . GHC.Event.PSQ.$tcIntPSQ2_bytes" {
     GHC.Event.PSQ.$tcIntPSQ2_bytes:
         I8[] [73,110,116,80,83,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.246581723 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ1_closure" {
     GHC.Event.PSQ.$tcIntPSQ1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcIntPSQ2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.248339585 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ_closure" {
     GHC.Event.PSQ.$tcIntPSQ_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcIntPSQ1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15246681906271547396;
         const 11594704564387731780;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.250302883 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil1_closure" {
     GHC.Event.PSQ.$tc'Nil1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcIntPSQ_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.252542284 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Nil3_bytes" {
     GHC.Event.PSQ.$tc'Nil3_bytes:
         I8[] [39,78,105,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.254386091 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil2_closure" {
     GHC.Event.PSQ.$tc'Nil2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Nil3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.256239663 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil_closure" {
     GHC.Event.PSQ.$tc'Nil_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Nil2_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 9632868263130136899;
         const 16639248836205398404;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.258194383 UTC

[section ""data" . $krep8_r3kd1_closure" {
     $krep8_r3kd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.26002853 UTC

[section ""data" . $krep9_r3kd2_closure" {
     $krep9_r3kd2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep8_r3kd1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.26190856 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip1_closure" {
     GHC.Event.PSQ.$tc'Tip1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep9_r3kd2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.263581756 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Tip3_bytes" {
     GHC.Event.PSQ.$tc'Tip3_bytes:
         I8[] [39,84,105,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.265979392 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip2_closure" {
     GHC.Event.PSQ.$tc'Tip2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Tip3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.26768505 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip_closure" {
     GHC.Event.PSQ.$tc'Tip_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Tip2_closure+1;
         const GHC.Event.PSQ.$tc'Tip1_closure+4;
         const 4235936270888684142;
         const 17098834253377543597;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.269542264 UTC

[section ""data" . $krep10_r3kd3_closure" {
     $krep10_r3kd3_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.271301079 UTC

[section ""data" . $krep11_r3kd4_closure" {
     $krep11_r3kd4_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const $krep10_r3kd3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.273016381 UTC

[section ""data" . $krep12_r3kd5_closure" {
     $krep12_r3kd5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3kcT_closure+1;
         const $krep11_r3kd4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.274850512 UTC

[section ""data" . $krep13_r3kd6_closure" {
     $krep13_r3kd6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep12_r3kd5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.276645762 UTC

[section ""data" . $krep14_r3kd7_closure" {
     $krep14_r3kd7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep13_r3kd6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.279161831 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin1_closure" {
     GHC.Event.PSQ.$tc'Bin1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep14_r3kd7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.281037441 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Bin3_bytes" {
     GHC.Event.PSQ.$tc'Bin3_bytes:
         I8[] [39,66,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.282877907 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin2_closure" {
     GHC.Event.PSQ.$tc'Bin2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Bin3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.284720867 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin_closure" {
     GHC.Event.PSQ.$tc'Bin_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Bin2_closure+1;
         const GHC.Event.PSQ.$tc'Bin1_closure+4;
         const 8835322380894053498;
         const 4329944662539077627;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.290950206 UTC

[section ""data" . GHC.Event.PSQ.lookup_closure" {
     GHC.Event.PSQ.lookup_closure:
         const GHC.Event.PSQ.lookup_info;
 },
 GHC.Event.PSQ.lookup_entry() //  [R2, R3]
         { []
         }
     {offset
       c3lL5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3lL6; else goto c3lL7;
       c3lL6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.lookup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lL7: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3lLv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.lookup_info" {
     GHC.Event.PSQ.lookup_info:
         const GHC.Event.PSQ.lookup_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3lLv() //  []
         { []
         }
     {offset
       c3lLv: // global
           I64[Sp - 8] = block_c3lLx_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lN1; else goto c3lLz;
       u3lN1: // global
           call _c3lLx(R1) args: 0, res: 0, upd: 0;
       c3lLz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lLx() //  [R1]
         { []
         }
     {offset
       c3lLx: // global
           _c3lMS::P64 = R1 & 7;
           if (_c3lMS::P64 < 3) goto u3lMT; else goto c3lMR;
       u3lMT: // global
           _s3kh2::P64 = P64[Sp + 8];
           if (_c3lMS::P64 < 2) goto c3lLG; else goto c3lMN;
       c3lLG: // global
           I64[Sp - 40] = block_c3lLD_info;
           _s3khi::P64 = P64[R1 + 7];
           _s3khk::P64 = P64[R1 + 15];
           _s3khl::P64 = P64[R1 + 23];
           _s3khg::I64 = I64[R1 + 31];
           _s3khh::I64 = I64[R1 + 39];
           _s3khj::I64 = I64[R1 + 47];
           R1 = _s3kh2::P64;
           P64[Sp - 32] = _s3khi::P64;
           I64[Sp - 24] = _s3khj::I64;
           P64[Sp - 16] = _s3khk::P64;
           P64[Sp - 8] = _s3khl::P64;
           I64[Sp] = _s3khh::I64;
           I64[Sp + 16] = _s3khg::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3lN2; else goto c3lLH;
       u3lN2: // global
           call _c3lLD(R1) args: 0, res: 0, upd: 0;
       c3lLH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lMN: // global
           I64[Sp - 8] = block_c3lLb_info;
           _s3kh7::P64 = P64[R1 + 6];
           _s3kh6::I64 = I64[R1 + 22];
           _s3kh5::I64 = I64[R1 + 14];
           R1 = _s3kh2::P64;
           P64[Sp] = _s3kh7::P64;
           I64[Sp + 8] = _s3kh6::I64;
           I64[Sp + 16] = _s3kh5::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lN3; else goto c3lLd;
       u3lN3: // global
           call _c3lLb(R1) args: 0, res: 0, upd: 0;
       c3lLd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lMR: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lLx_info" {
     block_c3lLx_info:
         const _c3lLx;
         const 130;
         const 30;
 },
 _c3lLD() //  [R1]
         { []
         }
     {offset
       c3lLD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lLN; else goto c3lLM;
       c3lLN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lLM: // global
           _s3khg::I64 = I64[Sp + 56];
           _s3khn::I64 = I64[R1 + 7];
           _s3kho::I64 = I64[Sp + 16];
           _s3khp::I64 = (_s3kho::I64 + -1) ^ _s3kho::I64 ^ 18446744073709551615;
           if (_s3khn::I64 & _s3khp::I64 == _s3khg::I64 & _s3khp::I64) goto c3lMI; else goto u3lMV;
       c3lMI: // global
           if (_s3khn::I64 == _s3khg::I64) goto c3lMG; else goto c3lMB;
       c3lMG: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 40];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lMB: // global
           Hp = Hp - 56;
           if (_s3khn::I64 & _s3kho::I64 == 0) goto c3lMw; else goto c3lMq;
       c3lMw: // global
           P64[Sp + 56] = P64[Sp + 24];
           Sp = Sp + 48;
           goto u3lN6;
       c3lMq: // global
           P64[Sp + 56] = P64[Sp + 32];
           Sp = Sp + 48;
           goto u3lN6;
       u3lN6: // global
           call _c3lLv() args: 0, res: 0, upd: 0;
       u3lMV: // global
           Sp = Sp + 64;
           call _c3lLn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3lLD_info" {
     block_c3lLD_info:
         const _c3lLD;
         const 5255;
         const 30;
 },
 _c3lLb() //  [R1]
         { []
         }
     {offset
       c3lLb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lLj; else goto c3lLi;
       c3lLj: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lLi: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3lLt; else goto u3lMY;
       c3lLt: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3lMY: // global
           Sp = Sp + 32;
           call _c3lLn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3lLb_info" {
     block_c3lLb_info:
         const _c3lLb;
         const 387;
         const 30;
 },
 _c3lLn() //  []
         { []
         }
     {offset
       c3lLn: // global
           Hp = Hp - 56;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.311367987 UTC

[section ""data" . GHC.Event.PSQ.delete_closure" {
     GHC.Event.PSQ.delete_closure:
         const GHC.Event.PSQ.delete_info;
 },
 go1_s3khH_entry() //  [R1, R2]
         { []
         }
     {offset
       c3lO8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3lO9; else goto c3lOa;
       c3lO9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lOa: // global
           I64[Sp - 24] = block_c3lO0_info;
           _s3khH::P64 = R1;
           _s3khF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3khF::P64;
           P64[Sp - 8] = _s3khH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lQJ; else goto c3lO1;
       u3lQJ: // global
           call _c3lO0(R1) args: 0, res: 0, upd: 0;
       c3lO1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s3khH_info" {
     go1_s3khH_info:
         const go1_s3khH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3lO0() //  [R1]
         { []
         }
     {offset
       c3lO0: // global
           _c3lO7::P64 = R1 & 7;
           if (_c3lO7::P64 < 3) goto u3lQD; else goto u3lQE;
       u3lQD: // global
           _s3khF::P64 = P64[Sp + 8];
           if (_c3lO7::P64 < 2) goto c3lO4; else goto c3lO5;
       c3lO4: // global
           I64[Sp - 48] = block_c3lOd_info;
           _s3khJ::P64 = R1;
           _s3khM::P64 = P64[R1 + 7];
           _s3khO::P64 = P64[R1 + 15];
           _s3khP::P64 = P64[R1 + 23];
           _s3khK::I64 = I64[R1 + 31];
           _s3khL::I64 = I64[R1 + 39];
           _s3khN::I64 = I64[R1 + 47];
           R1 = _s3khF::P64;
           I64[Sp - 40] = _s3khL::I64;
           P64[Sp - 32] = _s3khM::P64;
           I64[Sp - 24] = _s3khN::I64;
           P64[Sp - 16] = _s3khO::P64;
           P64[Sp - 8] = _s3khP::P64;
           I64[Sp] = _s3khK::I64;
           P64[Sp + 8] = _s3khJ::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3lQG; else goto c3lOf;
       u3lQG: // global
           call _c3lOd(R1) args: 0, res: 0, upd: 0;
       c3lOf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lO5: // global
           I64[Sp] = block_c3lQk_info;
           _s3khJ::P64 = R1;
           _s3ki9::I64 = I64[R1 + 14];
           R1 = _s3khF::P64;
           I64[Sp + 8] = _s3ki9::I64;
           P64[Sp + 16] = _s3khJ::P64;
           if (R1 & 7 != 0) goto u3lQH; else goto c3lQm;
       u3lQH: // global
           call _c3lQk(R1) args: 0, res: 0, upd: 0;
       c3lQm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3lQE: // global
           Sp = Sp + 24;
           call _c3lO6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3lO0_info" {
     block_c3lO0_info:
         const _c3lO0;
         const 2;
         const 30;
 },
 _c3lOd() //  [R1]
         { []
         }
     {offset
       c3lOd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lOl; else goto c3lOk;
       c3lOl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lOk: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khN::I64 = I64[Sp + 24];
           _s3khR::I64 = I64[R1 + 7];
           _s3khT::I64 = (_s3khN::I64 + -1) ^ _s3khN::I64 ^ 18446744073709551615;
           if (_s3khR::I64 & _s3khT::I64 == _s3khK::I64 & _s3khT::I64) goto c3lQg; else goto c3lQh;
       c3lQg: // global
           _s3khO::P64 = P64[Sp + 32];
           _s3khP::P64 = P64[Sp + 40];
           if (_s3khR::I64 == _s3khK::I64) goto c3lQe; else goto c3lQb;
       c3lQe: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3khN::I64;
           R4 = _s3khP::P64;
           R3 = _s3khO::P64;
           R2 = Hp - 7;
           Sp = Sp + 72;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3lQb: // global
           Hp = Hp - 16;
           _s3khH::P64 = P64[Sp + 64];
           if (_s3khR::I64 & _s3khN::I64 == 0) goto c3lPD; else goto c3lP1;
       c3lPD: // global
           I64[Sp] = block_c3lPC_info;
           R2 = _s3khO::P64;
           R1 = _s3khH::P64;
           call go1_s3khH_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3lP1: // global
           I64[Sp] = block_c3lOZ_info;
           R2 = _s3khP::P64;
           R1 = _s3khH::P64;
           call go1_s3khH_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3lQh: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 72;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lOd_info" {
     block_c3lOd_info:
         const _c3lOd;
         const 2376;
         const 30;
 },
 _c3lPC() //  [R1]
         { []
         }
     {offset
       c3lPC: // global
           _s3khP::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3lPS; else goto c3lPK;
       c3lPS: // global
           I64[Sp] = block_c3lPQ_info;
           R1 = _s3khP::P64;
           if (R1 & 7 != 0) goto u3lQL; else goto c3lPT;
       u3lQL: // global
           call _c3lPQ(R1) args: 0, res: 0, upd: 0;
       c3lPT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lPK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lPN; else goto c3lPM;
       c3lPN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lPM: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3khP::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lPC_info" {
     block_c3lPC_info:
         const _c3lPC;
         const 15176;
         const 30;
 },
 _c3lPQ() //  [R1]
         { []
         }
     {offset
       c3lPQ: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khL::I64 = I64[Sp + 8];
           _s3khM::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3lQ6; else goto c3lPZ;
       c3lQ6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lQ9; else goto c3lQ8;
       c3lQ9: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lQ8: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3khM::P64;
           I64[Hp - 8] = _s3khK::I64;
           I64[Hp] = _s3khL::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lPZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lQ2; else goto c3lQ1;
       c3lQ2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lQ1: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3khM::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3khK::I64;
           I64[Hp - 8] = _s3khL::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lPQ_info" {
     block_c3lPQ_info:
         const _c3lPQ;
         const 16200;
         const 30;
 },
 _c3lOZ() //  [R1]
         { []
         }
     {offset
       c3lOZ: // global
           _s3khO::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3lPg; else goto c3lP8;
       c3lPg: // global
           I64[Sp] = block_c3lPe_info;
           R1 = _s3khO::P64;
           if (R1 & 7 != 0) goto u3lQK; else goto c3lPh;
       u3lQK: // global
           call _c3lPe(R1) args: 0, res: 0, upd: 0;
       c3lPh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lP8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lPb; else goto c3lPa;
       c3lPb: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lPa: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3khO::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lOZ_info" {
     block_c3lOZ_info:
         const _c3lOZ;
         const 15688;
         const 30;
 },
 _c3lPe() //  [R1]
         { []
         }
     {offset
       c3lPe: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khL::I64 = I64[Sp + 8];
           _s3khM::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3lPu; else goto c3lPn;
       c3lPu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lPx; else goto c3lPw;
       c3lPx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lPw: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3khM::P64;
           I64[Hp - 8] = _s3khK::I64;
           I64[Hp] = _s3khL::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lPn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lPq; else goto c3lPp;
       c3lPq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lPp: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3khM::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3khK::I64;
           I64[Hp - 8] = _s3khL::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lPe_info" {
     block_c3lPe_info:
         const _c3lPe;
         const 16200;
         const 30;
 },
 _c3lQk() //  [R1]
         { []
         }
     {offset
       c3lQk: // global
           if (I64[R1 + 7] == I64[Sp + 8]) goto u3lQF; else goto c3lQu;
       u3lQF: // global
           Sp = Sp + 24;
           call _c3lO6() args: 0, res: 0, upd: 0;
       c3lQu: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lQk_info" {
     block_c3lQk_info:
         const _c3lQk;
         const 66;
         const 30;
 },
 _c3lO6() //  []
         { []
         }
     {offset
       c3lO6: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.delete_entry() //  [R2, R3]
         { []
         }
     {offset
       c3lQN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lQR; else goto c3lQQ;
       c3lQR: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.delete_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lQQ: // global
           I64[Hp - 8] = go1_s3khH_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go1_s3khH_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.delete_info" {
     GHC.Event.PSQ.delete_info:
         const GHC.Event.PSQ.delete_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.352926996 UTC

[section ""data" . GHC.Event.PSQ.deleteView_closure" {
     GHC.Event.PSQ.deleteView_closure:
         const GHC.Event.PSQ.deleteView_info;
 },
 delFrom_s3kih_entry() //  [R1, R2]
         { []
         }
     {offset
       c3lSn: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3lSo; else goto c3lSp;
       c3lSo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lSp: // global
           I64[Sp - 24] = block_c3lSf_info;
           _s3kih::P64 = R1;
           _s3kif::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3kif::P64;
           P64[Sp - 8] = _s3kih::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lVk; else goto c3lSg;
       u3lVk: // global
           call _c3lSf(R1) args: 0, res: 0, upd: 0;
       c3lSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . delFrom_s3kih_info" {
     delFrom_s3kih_info:
         const delFrom_s3kih_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3lSf() //  [R1]
         { []
         }
     {offset
       c3lSf: // global
           _c3lSm::P64 = R1 & 7;
           if (_c3lSm::P64 < 3) goto u3lVh; else goto c3lSl;
       u3lVh: // global
           _s3kif::P64 = P64[Sp + 8];
           if (_c3lSm::P64 < 2) goto c3lSj; else goto c3lSk;
       c3lSj: // global
           I64[Sp - 48] = block_c3lSs_info;
           _s3kij::P64 = R1;
           _s3kim::P64 = P64[R1 + 7];
           _s3kio::P64 = P64[R1 + 15];
           _s3kip::P64 = P64[R1 + 23];
           _s3kik::I64 = I64[R1 + 31];
           _s3kil::I64 = I64[R1 + 39];
           _s3kin::I64 = I64[R1 + 47];
           R1 = _s3kif::P64;
           I64[Sp - 40] = _s3kil::I64;
           P64[Sp - 32] = _s3kim::P64;
           I64[Sp - 24] = _s3kin::I64;
           P64[Sp - 16] = _s3kio::P64;
           P64[Sp - 8] = _s3kip::P64;
           I64[Sp] = _s3kik::I64;
           P64[Sp + 8] = _s3kij::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3lVi; else goto c3lSu;
       u3lVi: // global
           call _c3lSs(R1) args: 0, res: 0, upd: 0;
       c3lSu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lSk: // global
           I64[Sp - 16] = block_c3lUR_info;
           _s3kij::P64 = R1;
           _s3kj1::P64 = P64[R1 + 6];
           _s3kiZ::I64 = I64[R1 + 14];
           _s3kj0::I64 = I64[R1 + 22];
           R1 = _s3kif::P64;
           P64[Sp - 8] = _s3kj1::P64;
           I64[Sp] = _s3kj0::I64;
           I64[Sp + 8] = _s3kiZ::I64;
           P64[Sp + 16] = _s3kij::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3lVj; else goto c3lUT;
       u3lVj: // global
           call _c3lUR(R1) args: 0, res: 0, upd: 0;
       c3lUT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lSl: // global
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lSf_info" {
     block_c3lSf_info:
         const _c3lSf;
         const 2;
         const 30;
 },
 _c3lSs() //  [R1]
         { []
         }
     {offset
       c3lSs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lSA; else goto c3lSz;
       c3lSA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lSz: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kin::I64 = I64[Sp + 24];
           _s3kir::I64 = I64[R1 + 7];
           _s3kit::I64 = (_s3kin::I64 + -1) ^ _s3kin::I64 ^ 18446744073709551615;
           if (_s3kir::I64 & _s3kit::I64 == _s3kik::I64 & _s3kit::I64) goto c3lUN; else goto c3lUO;
       c3lUN: // global
           _s3kio::P64 = P64[Sp + 32];
           _s3kip::P64 = P64[Sp + 40];
           if (_s3kir::I64 == _s3kik::I64) goto c3lUI; else goto c3lUy;
       c3lUI: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kin::I64;
           I64[Sp] = block_c3lUB_info;
           R4 = _s3kip::P64;
           R3 = _s3kio::P64;
           R2 = Hp - 7;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c3lUy: // global
           Hp = Hp - 16;
           _s3kih::P64 = P64[Sp + 64];
           if (_s3kir::I64 & _s3kin::I64 == 0) goto c3lTY; else goto c3lTi;
       c3lTY: // global
           I64[Sp] = block_c3lTV_info;
           R2 = _s3kio::P64;
           R1 = _s3kih::P64;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3lTi: // global
           I64[Sp] = block_c3lTe_info;
           R2 = _s3kip::P64;
           R1 = _s3kih::P64;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3lUO: // global
           Hp = Hp - 16;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 56];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lSs_info" {
     block_c3lSs_info:
         const _c3lSs;
         const 2376;
         const 30;
 },
 _c3lUB() //  [R1]
         { []
         }
     {offset
       c3lUB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lUL; else goto c3lUK;
       c3lUL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lUK: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = R1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lUB_info" {
     block_c3lUB_info:
         const _c3lUB;
         const 16200;
         const 30;
 },
 _c3lTV() //  [R1, R2]
         { []
         }
     {offset
       c3lTV: // global
           I64[Sp] = block_c3lTX_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3lVn; else goto c3lU1;
       u3lVn: // global
           call _c3lTX(R1) args: 0, res: 0, upd: 0;
       c3lU1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lTV_info" {
     block_c3lTV_info:
         const _c3lTV;
         const 15176;
         const 30;
 },
 _c3lTX() //  [R1]
         { []
         }
     {offset
       c3lTX: // global
           _s3kip::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3lUf; else goto c3lU7;
       c3lUf: // global
           I64[Sp] = block_c3lUd_info;
           R1 = _s3kip::P64;
           if (R1 & 7 != 0) goto u3lVo; else goto c3lUg;
       u3lVo: // global
           call _c3lUd(R1) args: 0, res: 0, upd: 0;
       c3lUg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lU7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lUa; else goto c3lU9;
       c3lUa: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lU9: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3kip::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lTX_info" {
     block_c3lTX_info:
         const _c3lTX;
         const 6984;
         const 30;
 },
 _c3lUd() //  [R1]
         { []
         }
     {offset
       c3lUd: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kil::I64 = I64[Sp + 8];
           _s3kim::P64 = P64[Sp + 16];
           _s3kiO::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3lUt; else goto c3lUm;
       c3lUt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lUw; else goto c3lUv;
       c3lUw: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lUv: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3kim::P64;
           I64[Hp - 8] = _s3kik::I64;
           I64[Hp] = _s3kil::I64;
           R2 = _s3kiO::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lUm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lUp; else goto c3lUo;
       c3lUp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lUo: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3kim::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3kik::I64;
           I64[Hp - 8] = _s3kil::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3kiO::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lUd_info" {
     block_c3lUd_info:
         const _c3lUd;
         const 8008;
         const 30;
 },
 _c3lTe() //  [R1, R2]
         { []
         }
     {offset
       c3lTe: // global
           I64[Sp] = block_c3lTg_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3lVl; else goto c3lTl;
       u3lVl: // global
           call _c3lTg(R1) args: 0, res: 0, upd: 0;
       c3lTl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lTe_info" {
     block_c3lTe_info:
         const _c3lTe;
         const 15688;
         const 30;
 },
 _c3lTg() //  [R1]
         { []
         }
     {offset
       c3lTg: // global
           _s3kio::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3lTz; else goto c3lTr;
       c3lTz: // global
           I64[Sp] = block_c3lTx_info;
           R1 = _s3kio::P64;
           if (R1 & 7 != 0) goto u3lVm; else goto c3lTA;
       u3lVm: // global
           call _c3lTx(R1) args: 0, res: 0, upd: 0;
       c3lTA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lTr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lTu; else goto c3lTt;
       c3lTu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lTt: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3kio::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lTg_info" {
     block_c3lTg_info:
         const _c3lTg;
         const 7496;
         const 30;
 },
 _c3lTx() //  [R1]
         { []
         }
     {offset
       c3lTx: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kil::I64 = I64[Sp + 8];
           _s3kim::P64 = P64[Sp + 16];
           _s3kiG::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3lTN; else goto c3lTG;
       c3lTN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lTQ; else goto c3lTP;
       c3lTQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lTP: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3kim::P64;
           I64[Hp - 8] = _s3kik::I64;
           I64[Hp] = _s3kil::I64;
           R2 = _s3kiG::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lTG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lTJ; else goto c3lTI;
       c3lTJ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lTI: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3kim::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3kik::I64;
           I64[Hp - 8] = _s3kil::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3kiG::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lTx_info" {
     block_c3lTx_info:
         const _c3lTx;
         const 8008;
         const 30;
 },
 _c3lUR() //  [R1]
         { []
         }
     {offset
       c3lUR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lUZ; else goto c3lUY;
       c3lUZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lUY: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3lV9; else goto c3lV3;
       c3lV9: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lV3: // global
           Hp = Hp - 56;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lUR_info" {
     block_c3lUR_info:
         const _c3lUR;
         const 388;
         const 30;
 },
 GHC.Event.PSQ.deleteView_entry() //  [R2, R3]
         { []
         }
     {offset
       c3lVy: // global
           _s3kig::P64 = R3;
           _s3kif::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3lVz; else goto c3lVA;
       c3lVA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lVC; else goto c3lVB;
       c3lVC: // global
           HpAlloc = 16;
           goto c3lVz;
       c3lVz: // global
           R3 = _s3kig::P64;
           R2 = _s3kif::P64;
           R1 = GHC.Event.PSQ.deleteView_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lVB: // global
           I64[Hp - 8] = delFrom_s3kih_info;
           P64[Hp] = _s3kif::P64;
           I64[Sp - 8] = block_c3lVp_info;
           R2 = _s3kig::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.deleteView_info" {
     GHC.Event.PSQ.deleteView_info:
         const GHC.Event.PSQ.deleteView_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3lVp() //  [R1, R2]
         { []
         }
     {offset
       c3lVp: // global
           I64[Sp - 8] = block_c3lVr_info;
           _s3kj9::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3kj9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lVU; else goto c3lVs;
       u3lVU: // global
           call _c3lVr(R1) args: 0, res: 0, upd: 0;
       c3lVs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lVp_info" {
     block_c3lVp_info:
         const _c3lVp;
         const 0;
         const 30;
 },
 _c3lVr() //  [R1]
         { []
         }
     {offset
       c3lVr: // global
           if (R1 & 7 == 1) goto c3lVv; else goto c3lVw;
       c3lVv: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lVw: // global
           I64[Sp] = block_c3lVJ_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3lVV; else goto c3lVK;
       u3lVV: // global
           call _c3lVJ(R1) args: 0, res: 0, upd: 0;
       c3lVK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lVr_info" {
     block_c3lVr_info:
         const _c3lVr;
         const 1;
         const 30;
 },
 _c3lVJ() //  [R1]
         { []
         }
     {offset
       c3lVJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3lVT; else goto c3lVS;
       c3lVT: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lVS: // global
           _s3kje::P64 = P64[R1 + 7];
           _s3kjf::P64 = P64[R1 + 15];
           I64[Hp - 40] = (,,)_con_info;
           P64[Hp - 32] = _s3kje::P64;
           P64[Hp - 24] = _s3kjf::P64;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lVJ_info" {
     block_c3lVJ_info:
         const _c3lVJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.392845022 UTC

[section ""data" . GHC.Event.PSQ.$wsize_closure" {
     GHC.Event.PSQ.$wsize_closure:
         const GHC.Event.PSQ.$wsize_info;
 },
 GHC.Event.PSQ.$wsize_entry() //  [R2]
         { []
         }
     {offset
       c3lXV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3lXW; else goto c3lXX;
       c3lXW: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.$wsize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lXX: // global
           I64[Sp - 8] = block_c3lXN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lYm; else goto c3lXO;
       u3lYm: // global
           call _c3lXN(R1) args: 0, res: 0, upd: 0;
       c3lXO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$wsize_info" {
     GHC.Event.PSQ.$wsize_info:
         const GHC.Event.PSQ.$wsize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3lXN() //  [R1]
         { []
         }
     {offset
       c3lXN: // global
           _c3lXU::P64 = R1 & 7;
           if (_c3lXU::P64 < 3) goto u3lYl; else goto c3lXT;
       u3lYl: // global
           if (_c3lXU::P64 < 2) goto c3lXR; else goto c3lXS;
       c3lXR: // global
           I64[Sp - 8] = block_c3lY0_info;
           R2 = P64[R1 + 15];
           P64[Sp] = P64[R1 + 23];
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
       c3lXS: // global
           R1 = 1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lXT: // global
           R1 = 0;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lXN_info" {
     block_c3lXN_info:
         const _c3lXN;
         const 0;
         const 30;
 },
 _c3lY0() //  [R1]
         { []
         }
     {offset
       c3lY0: // global
           I64[Sp] = block_c3lY4_info;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = R1;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lY0_info" {
     block_c3lY0_info:
         const _c3lY0;
         const 1;
         const 30;
 },
 _c3lY4() //  [R1]
         { []
         }
     {offset
       c3lY4: // global
           R1 = I64[Sp + 8] + (R1 + 1);
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lY4_info" {
     block_c3lY4_info:
         const _c3lY4;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.403220501 UTC

[section ""data" . GHC.Event.PSQ.size_closure" {
     GHC.Event.PSQ.size_closure:
         const GHC.Event.PSQ.size_info;
 },
 GHC.Event.PSQ.size_entry() //  [R2]
         { []
         }
     {offset
       c3lYP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lYT; else goto c3lYU;
       c3lYT: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.size_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lYU: // global
           I64[Sp - 8] = block_c3lYN_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.size_info" {
     GHC.Event.PSQ.size_info:
         const GHC.Event.PSQ.size_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3lYN() //  [R1]
         { []
         }
     {offset
       c3lYN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lYX; else goto c3lYW;
       c3lYX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3lYW: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lYN_info" {
     block_c3lYN_info:
         const _c3lYN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.421862899 UTC

[section ""data" . GHC.Event.PSQ.$wunsafeInsertNew_closure" {
     GHC.Event.PSQ.$wunsafeInsertNew_closure:
         const GHC.Event.PSQ.$wunsafeInsertNew_info;
 },
 GHC.Event.PSQ.$wunsafeInsertNew_slow() //  [R1]
         { []
         }
     {offset
       c3lZ8: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.$wunsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3lZk: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3lZl; else goto c3lZm;
       c3lZl: // global
           R1 = GHC.Event.PSQ.$wunsafeInsertNew_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3lZm: // global
           I64[Sp - 32] = block_c3lZc_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3m6Q; else goto c3lZd;
       u3m6Q: // global
           call _c3lZc(R1) args: 0, res: 0, upd: 0;
       c3lZd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$wunsafeInsertNew_info" {
     GHC.Event.PSQ.$wunsafeInsertNew_info:
         const GHC.Event.PSQ.$wunsafeInsertNew_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 196;
         const GHC.Event.PSQ.$wunsafeInsertNew_slow;
 },
 _c3lZc() //  [R1]
         { []
         }
     {offset
       c3lZc: // global
           _s3kjz::P64 = P64[Sp + 24];
           _c3lZj::P64 = R1 & 7;
           if (_c3lZj::P64 < 3) goto u3m6M; else goto c3lZi;
       u3m6M: // global
           _s3kjx::I64 = I64[Sp + 8];
           _s3kjy::I64 = I64[Sp + 16];
           if (_c3lZj::P64 < 2) goto c3lZg; else goto c3lZh;
       c3lZg: // global
           _s3kjE::P64 = P64[R1 + 7];
           _s3kjG::P64 = P64[R1 + 15];
           _s3kjH::P64 = P64[R1 + 23];
           _s3kjC::I64 = I64[R1 + 31];
           _s3kjD::I64 = I64[R1 + 39];
           _s3kjF::I64 = I64[R1 + 47];
           _s3kjJ::I64 = (_s3kjF::I64 + -1) ^ _s3kjF::I64 ^ 18446744073709551615;
           if (_s3kjx::I64 & _s3kjJ::I64 == _s3kjC::I64 & _s3kjJ::I64) goto c3m1x; else goto c3m4c;
       c3m1x: // global
           if (_s3kjy::I64 == _s3kjD::I64) goto c3m1v; else goto c3m1o;
       c3m1v: // global
           _s3kjI::I64 = _s3kjF::I64;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kjC::I64)) goto s3kjR; else goto s3kjW;
       c3m1o: // global
           _s3kjI::I64 = _s3kjF::I64;
           if (_s3kjy::I64 > _s3kjD::I64) goto s3kjR; else goto s3kjW;
       s3kjR: // global
           if (_s3kjx::I64 & _s3kjI::I64 == 0) goto c3m0q; else goto c3m0c;
       c3m0q: // global
           I64[Sp - 16] = block_c3m0l_info;
           R5 = _s3kjG::P64;
           R4 = _s3kjz::P64;
           R3 = _s3kjy::I64;
           R2 = _s3kjx::I64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjF::I64;
           P64[Sp + 8] = _s3kjE::P64;
           I64[Sp + 16] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       c3m0c: // global
           I64[Sp - 16] = block_c3m06_info;
           R5 = _s3kjH::P64;
           R4 = _s3kjz::P64;
           R3 = _s3kjy::I64;
           R2 = _s3kjx::I64;
           P64[Sp - 8] = _s3kjG::P64;
           I64[Sp] = _s3kjF::I64;
           P64[Sp + 8] = _s3kjE::P64;
           I64[Sp + 16] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       s3kjW: // global
           if (_s3kjC::I64 & _s3kjI::I64 == 0) goto c3m19; else goto c3m0S;
       c3m19: // global
           I64[Sp - 40] = block_c3m12_info;
           R1 = _s3kjz::P64;
           P64[Sp - 32] = _s3kjE::P64;
           I64[Sp - 24] = _s3kjF::I64;
           P64[Sp - 16] = _s3kjG::P64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3m0S: // global
           I64[Sp - 40] = block_c3m0K_info;
           R1 = _s3kjz::P64;
           P64[Sp - 32] = _s3kjE::P64;
           I64[Sp - 24] = _s3kjF::I64;
           P64[Sp - 16] = _s3kjG::P64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3m4c: // global
           if (_s3kjy::I64 == _s3kjD::I64) goto c3m4b; else goto c3m44;
       c3m4b: // global
           _s3kjB::P64 = R1;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kjC::I64)) goto s3kk6; else goto s3kkq;
       c3m44: // global
           _s3kjB::P64 = R1;
           if (_s3kjy::I64 > _s3kjD::I64) goto s3kk6; else goto s3kkq;
       s3kk6: // global
           (_c3m1O::I64) = call MO_Clz W64(_s3kjC::I64 ^ _s3kjx::I64);
           _s3kk7::I64 = 1 << 63 - _c3m1O::I64;
           _s3kkh::I64 = _s3kk7::I64 & _s3kjx::I64;
           if (_s3kkh::I64 != 0) goto u3m6N; else goto c3m2L;
       u3m6N: // global
           I64[Sp - 56] = _s3kjD::I64;
           P64[Sp - 48] = _s3kjE::P64;
           I64[Sp - 40] = _s3kjF::I64;
           P64[Sp - 32] = _s3kjG::P64;
           P64[Sp - 24] = _s3kjH::P64;
           I64[Sp - 16] = _s3kk7::I64;
           I64[Sp - 8] = _s3kkh::I64;
           I64[Sp] = _s3kjC::I64;
           Sp = Sp - 56;
           call _c3m2e() args: 0, res: 0, upd: 0;
       c3m2L: // global
           I64[Sp - 48] = block_c3m2C_info;
           R1 = _s3kjz::P64;
           P64[Sp - 40] = _s3kjE::P64;
           I64[Sp - 32] = _s3kjF::I64;
           P64[Sp - 24] = _s3kjG::P64;
           P64[Sp - 16] = _s3kjH::P64;
           I64[Sp - 8] = _s3kk7::I64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3kkq: // global
           (_c3m38::I64) = call MO_Clz W64(_s3kjx::I64 ^ _s3kjC::I64);
           _s3kkr::I64 = 1 << 63 - _c3m38::I64;
           if (_s3kkr::I64 & _s3kjC::I64 == 0) goto c3m3Q; else goto c3m3E;
       c3m3Q: // global
           I64[Sp - 8] = block_c3m3N_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kkr::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3m3E: // global
           I64[Sp - 8] = block_c3m3A_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kkr::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3lZh: // global
           _s3kkJ::P64 = P64[R1 + 6];
           _s3kkH::I64 = I64[R1 + 14];
           _s3kkI::I64 = I64[R1 + 22];
           if (_s3kjy::I64 == _s3kkI::I64) goto c3m6C; else goto c3m6v;
       c3m6C: // global
           _s3kjB::P64 = R1;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kkH::I64)) goto s3kkK; else goto s3kl0;
       c3m6v: // global
           _s3kjB::P64 = R1;
           if (_s3kjy::I64 > _s3kkI::I64) goto s3kkK; else goto s3kl0;
       s3kkK: // global
           (_c3m4v::I64) = call MO_Clz W64(_s3kkH::I64 ^ _s3kjx::I64);
           _s3kkL::I64 = 1 << 63 - _c3m4v::I64;
           if (_s3kkL::I64 & _s3kjx::I64 == 0) goto c3m5f; else goto c3m52;
       c3m5f: // global
           I64[Sp - 24] = block_c3m5b_info;
           R1 = _s3kjz::P64;
           P64[Sp - 16] = _s3kkJ::P64;
           I64[Sp - 8] = _s3kkL::I64;
           I64[Sp] = _s3kkI::I64;
           I64[Sp + 24] = _s3kkH::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3m52: // global
           I64[Sp - 24] = block_c3m4X_info;
           R1 = _s3kjz::P64;
           P64[Sp - 16] = _s3kkJ::P64;
           I64[Sp - 8] = _s3kkL::I64;
           I64[Sp] = _s3kkI::I64;
           I64[Sp + 24] = _s3kkH::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3kl0: // global
           (_c3m5z::I64) = call MO_Clz W64(_s3kjx::I64 ^ _s3kkH::I64);
           _s3kl1::I64 = 1 << 63 - _c3m5z::I64;
           if (_s3kl1::I64 & _s3kkH::I64 == 0) goto c3m6h; else goto c3m65;
       c3m6h: // global
           I64[Sp - 8] = block_c3m6e_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kl1::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3m65: // global
           I64[Sp - 8] = block_c3m61_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kl1::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3lZi: // global
           I64[Sp] = block_c3m6F_info;
           R1 = _s3kjz::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3lZc_info" {
     block_c3lZc_info:
         const _c3lZc;
         const 195;
         const 30;
 },
 _c3m0l() //  [R1]
         { []
         }
     {offset
       c3m0l: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m0u; else goto c3m0t;
       c3m0u: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m0t: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m0l_info" {
     block_c3m0l_info:
         const _c3m0l;
         const 1669;
         const 30;
 },
 _c3m06() //  [R1]
         { []
         }
     {offset
       c3m06: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m0g; else goto c3m0f;
       c3m0g: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m0f: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m06_info" {
     block_c3m06_info:
         const _c3m06;
         const 1669;
         const 30;
 },
 _c3m12() //  [R1]
         { []
         }
     {offset
       c3m12: // global
           _s3kjE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3m14_info;
           R5 = P64[Sp + 24];
           R4 = _s3kjE::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m12_info" {
     block_c3m12_info:
         const _c3m12;
         const 15496;
         const 30;
 },
 _c3m14() //  [R1]
         { []
         }
     {offset
       c3m14: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m1e; else goto c3m1d;
       c3m1e: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m1d: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m14_info" {
     block_c3m14_info:
         const _c3m14;
         const 3783;
         const 30;
 },
 _c3m0K() //  [R1]
         { []
         }
     {offset
       c3m0K: // global
           _s3kjE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3m0M_info;
           R5 = P64[Sp + 32];
           R4 = _s3kjE::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m0K_info" {
     block_c3m0K_info:
         const _c3m0K;
         const 15496;
         const 30;
 },
 _c3m0M() //  [R1]
         { []
         }
     {offset
       c3m0M: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m0X; else goto c3m0W;
       c3m0X: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m0W: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m0M_info" {
     block_c3m0M_info:
         const _c3m0M;
         const 3911;
         const 30;
 },
 _c3m2e() //  []
         { []
         }
     {offset
       c3m2e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3m2t; else goto c3m2s;
       c3m2t: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c3m2d_info;
           R1 = I64[Sp + 48];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3m2s: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp - 8] = block_c3m2h_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           Sp = Sp - 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3m2d() //  [R1]
         { []
         }
     {offset
       c3m2d: // global
           I64[Sp + 56] = R1;
           Sp = Sp + 8;
           call _c3m2e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3m2d_info" {
     block_c3m2d_info:
         const _c3m2d;
         const 63819;
         const 30;
 },
 _c3m2h() //  [R1]
         { []
         }
     {offset
       c3m2h: // global
           I64[Sp] = block_c3m2l_info;
           _s3kkj::P64 = R1;
           R1 = P64[Sp + 88];
           P64[Sp + 88] = _s3kkj::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m2h_info" {
     block_c3m2h_info:
         const _c3m2h;
         const 65355;
         const 30;
 },
 _c3m2l() //  [R1]
         { []
         }
     {offset
       c3m2l: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3m2x; else goto c3m2w;
       c3m2x: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m2w: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 80];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 64];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m2l_info" {
     block_c3m2l_info:
         const _c3m2l;
         const 65355;
         const 30;
 },
 _c3m2C() //  [R1]
         { []
         }
     {offset
       c3m2C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3m2P; else goto c3m2O;
       c3m2P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m2O: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp] = block_c3m2F_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           P64[Sp + 32] = R1;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m2C_info" {
     block_c3m2C_info:
         const _c3m2C;
         const 31881;
         const 30;
 },
 _c3m2F() //  [R1]
         { []
         }
     {offset
       c3m2F: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3m2S; else goto c3m2R;
       c3m2S: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m2R: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = P64[Sp + 32];
           I64[Hp - 64] = I64[Sp + 56];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m2F_info" {
     block_c3m2F_info:
         const _c3m2F;
         const 32137;
         const 30;
 },
 _c3m3N() //  [R1]
         { []
         }
     {offset
       c3m3N: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m3U; else goto c3m3T;
       c3m3U: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m3T: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m3N_info" {
     block_c3m3N_info:
         const _c3m3N;
         const 452;
         const 30;
 },
 _c3m3A() //  [R1]
         { []
         }
     {offset
       c3m3A: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m3I; else goto c3m3H;
       c3m3I: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m3H: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m3A_info" {
     block_c3m3A_info:
         const _c3m3A;
         const 452;
         const 30;
 },
 _c3m5b() //  [R1]
         { []
         }
     {offset
       c3m5b: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3m5j; else goto c3m5i;
       c3m5j: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m5i: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m5b_info" {
     block_c3m5b_info:
         const _c3m5b;
         const 3974;
         const 30;
 },
 _c3m4X() //  [R1]
         { []
         }
     {offset
       c3m4X: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3m56; else goto c3m55;
       c3m56: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m55: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m4X_info" {
     block_c3m4X_info:
         const _c3m4X;
         const 3974;
         const 30;
 },
 _c3m6e() //  [R1]
         { []
         }
     {offset
       c3m6e: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m6l; else goto c3m6k;
       c3m6l: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m6k: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m6e_info" {
     block_c3m6e_info:
         const _c3m6e;
         const 452;
         const 30;
 },
 _c3m61() //  [R1]
         { []
         }
     {offset
       c3m61: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m69; else goto c3m68;
       c3m69: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m68: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m61_info" {
     block_c3m61_info:
         const _c3m61;
         const 452;
         const 30;
 },
 _c3m6F() //  [R1]
         { []
         }
     {offset
       c3m6F: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3m6L; else goto c3m6K;
       c3m6L: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m6K: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3m6F_info" {
     block_c3m6F_info:
         const _c3m6F;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.470769127 UTC

[section ""data" . GHC.Event.PSQ.unsafeInsertNew_closure" {
     GHC.Event.PSQ.unsafeInsertNew_closure:
         const GHC.Event.PSQ.unsafeInsertNew_info;
 },
 GHC.Event.PSQ.unsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3ma5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3ma9; else goto c3maa;
       c3ma9: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.unsafeInsertNew_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3maa: // global
           I64[Sp - 32] = block_c3ma2_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3mai; else goto c3ma3;
       u3mai: // global
           call _c3ma2(R1) args: 0, res: 0, upd: 0;
       c3ma3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.unsafeInsertNew_info" {
     GHC.Event.PSQ.unsafeInsertNew_info:
         const GHC.Event.PSQ.unsafeInsertNew_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c3ma2() //  [R1]
         { []
         }
     {offset
       c3ma2: // global
           I64[Sp] = block_c3ma8_info;
           _s3kln::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kln::I64;
           if (R1 & 7 != 0) goto u3mah; else goto c3mac;
       u3mah: // global
           call _c3ma8(R1) args: 0, res: 0, upd: 0;
       c3mac: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ma2_info" {
     block_c3ma2_info:
         const _c3ma2;
         const 3;
         const 30;
 },
 _c3ma8() //  [R1]
         { []
         }
     {offset
       c3ma8: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ma8_info" {
     block_c3ma8_info:
         const _c3ma8;
         const 67;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.479101859 UTC

[section ""data" . GHC.Event.PSQ.insert_closure" {
     GHC.Event.PSQ.insert_closure:
         const GHC.Event.PSQ.insert_info;
 },
 GHC.Event.PSQ.insert_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3maD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3maM; else goto c3maN;
       c3maM: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.insert_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3maN: // global
           I64[Sp - 32] = block_c3maA_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3maV; else goto c3maB;
       u3maV: // global
           call _c3maA(R1) args: 0, res: 0, upd: 0;
       c3maB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.insert_info" {
     GHC.Event.PSQ.insert_info:
         const GHC.Event.PSQ.insert_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c3maA() //  [R1]
         { []
         }
     {offset
       c3maA: // global
           I64[Sp - 8] = block_c3maG_info;
           _s3klu::P64 = R1;
           _s3klv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s3klv::I64;
           P64[Sp + 8] = _s3klu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3maU; else goto c3maH;
       u3maU: // global
           call _c3maG(R1) args: 0, res: 0, upd: 0;
       c3maH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3maA_info" {
     block_c3maA_info:
         const _c3maA;
         const 3;
         const 30;
 },
 _c3maG() //  [R1]
         { []
         }
     {offset
       c3maG: // global
           I64[Sp] = block_c3maL_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 16];
           I64[Sp + 32] = I64[R1 + 7];
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3maG_info" {
     block_c3maG_info:
         const _c3maG;
         const 68;
         const 30;
 },
 _c3maL() //  [R1]
         { []
         }
     {offset
       c3maL: // global
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = I64[Sp + 32];
           R2 = I64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3maL_info" {
     block_c3maL_info:
         const _c3maL;
         const 708;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.488570464 UTC

[section ""data" . go_r3kd8_closure" {
     go_r3kd8_closure:
         const go_r3kd8_info;
 },
 go_r3kd8_entry() //  [R2]
         { []
         }
     {offset
       c3mbo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3mbp; else goto c3mbq;
       c3mbp: // global
           R2 = R2;
           R1 = go_r3kd8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mbq: // global
           I64[Sp - 8] = block_c3mbh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mbR; else goto c3mbi;
       u3mbR: // global
           call _c3mbh(R1) args: 0, res: 0, upd: 0;
       c3mbi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_r3kd8_info" {
     go_r3kd8_info:
         const go_r3kd8_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3mbh() //  [R1]
         { []
         }
     {offset
       c3mbh: // global
           if (R1 & 7 == 1) goto c3mbl; else goto c3mbm;
       c3mbl: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mbm: // global
           I64[Sp - 8] = block_c3mbw_info;
           _s3klC::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3klC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mbQ; else goto c3mbx;
       u3mbQ: // global
           call _c3mbw(R1) args: 0, res: 0, upd: 0;
       c3mbx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mbh_info" {
     block_c3mbh_info:
         const _c3mbh;
         const 0;
         const 30;
 },
 _c3mbw() //  [R1]
         { []
         }
     {offset
       c3mbw: // global
           I64[Sp - 16] = block_c3mbB_info;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 7];
           I64[Sp] = I64[R1 + 23];
           I64[Sp + 8] = I64[R1 + 15];
           Sp = Sp - 16;
           call go_r3kd8_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mbw_info" {
     block_c3mbw_info:
         const _c3mbw;
         const 1;
         const 30;
 },
 _c3mbB() //  [R1]
         { []
         }
     {offset
       c3mbB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mbL; else goto c3mbK;
       c3mbL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mbK: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3mbG_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mbB_info" {
     block_c3mbB_info:
         const _c3mbB;
         const 387;
         const 30;
 },
 _c3mbG() //  [R1]
         { []
         }
     {offset
       c3mbG: // global
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mbG_info" {
     block_c3mbG_info:
         const _c3mbG;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.501425201 UTC

[section ""data" . GHC.Event.PSQ.fromList_closure" {
     GHC.Event.PSQ.fromList_closure:
         const GHC.Event.PSQ.fromList_info;
 },
 GHC.Event.PSQ.fromList_entry() //  [R2]
         { []
         }
     {offset
       c3mcm: // global
           R2 = R2;
           call go_r3kd8_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.fromList_info" {
     GHC.Event.PSQ.fromList_info:
         const GHC.Event.PSQ.fromList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.50793555 UTC

[section ""data" . GHC.Event.PSQ.adjust_closure" {
     GHC.Event.PSQ.adjust_closure:
         const GHC.Event.PSQ.adjust_info;
 },
 GHC.Event.PSQ.adjust_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3mcD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3mcE; else goto c3mcF;
       c3mcE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.adjust_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mcF: // global
           I64[Sp - 32] = block_c3mcx_info;
           _s3klL::P64 = R3;
           R3 = R4;
           _s3klK::P64 = R2;
           R2 = _s3klL::P64;
           P64[Sp - 24] = _s3klK::P64;
           P64[Sp - 16] = _s3klL::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Event.PSQ.deleteView_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.adjust_info" {
     GHC.Event.PSQ.adjust_info:
         const GHC.Event.PSQ.adjust_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3mcx() //  [R1]
         { []
         }
     {offset
       c3mcx: // global
           if (R1 & 7 == 1) goto c3mcA; else goto c3mcB;
       c3mcA: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3mcB: // global
           I64[Sp] = block_c3mcL_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3md3; else goto c3mcM;
       u3md3: // global
           call _c3mcL(R1) args: 0, res: 0, upd: 0;
       c3mcM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mcx_info" {
     block_c3mcx_info:
         const _c3mcx;
         const 3;
         const 30;
 },
 _c3mcL() //  [R1]
         { []
         }
     {offset
       c3mcL: // global
           I64[Sp - 8] = block_c3mcQ_info;
           _s3klQ::P64 = P64[R1 + 7];
           _s3klR::P64 = P64[R1 + 15];
           _s3klS::P64 = P64[R1 + 23];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3klS::P64;
           P64[Sp + 16] = _s3klR::P64;
           P64[Sp + 24] = _s3klQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3md4; else goto c3mcR;
       u3md4: // global
           call _c3mcQ(R1) args: 0, res: 0, upd: 0;
       c3mcR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mcL_info" {
     block_c3mcL_info:
         const _c3mcL;
         const 259;
         const 30;
 },
 _c3mcQ() //  [R1]
         { []
         }
     {offset
       c3mcQ: // global
           I64[Sp] = block_c3mcV_info;
           R2 = P64[Sp + 32];
           _s3klU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s3klU::I64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mcQ_info" {
     block_c3mcQ_info:
         const _c3mcQ;
         const 4;
         const 30;
 },
 _c3mcV() //  [R1]
         { []
         }
     {offset
       c3mcV: // global
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 32];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mcV_info" {
     block_c3mcV_info:
         const _c3mcV;
         const 644;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.518641259 UTC

[section ""data" . GHC.Event.PSQ.Bin_closure" {
     GHC.Event.PSQ.Bin_closure:
         const GHC.Event.PSQ.Bin_info;
 },
 GHC.Event.PSQ.Bin_slow() //  [R1]
         { []
         }
     {offset
       c3mdt: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.PSQ.Bin_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.Bin_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3mdy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mdC; else goto c3mdB;
       c3mdC: // global
           HpAlloc = 56;
           R1 = GHC.Event.PSQ.Bin_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c3mdB: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R5;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.Bin_info" {
     GHC.Event.PSQ.Bin_info:
         const GHC.Event.PSQ.Bin_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 710;
         const GHC.Event.PSQ.Bin_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.523646655 UTC

[section ""data" . GHC.Event.PSQ.Tip_closure" {
     GHC.Event.PSQ.Tip_closure:
         const GHC.Event.PSQ.Tip_info;
 },
 GHC.Event.PSQ.Tip_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3mdQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mdU; else goto c3mdT;
       c3mdU: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.Tip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mdT: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.Tip_info" {
     GHC.Event.PSQ.Tip_info:
         const GHC.Event.PSQ.Tip_entry;
         const 0;
         const 14;
         const 12884901905;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.527265558 UTC

[section ""data" . GHC.Event.PSQ.Nil_closure" {
     GHC.Event.PSQ.Nil_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.529578769 UTC

[section ""data" . GHC.Event.PSQ.E_closure" {
     GHC.Event.PSQ.E_closure:
         const GHC.Event.PSQ.E_info;
 },
 GHC.Event.PSQ.E_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3me6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mea; else goto c3me9;
       c3mea: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.E_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3me9: // global
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.E_info" {
     GHC.Event.PSQ.E_info:
         const GHC.Event.PSQ.E_entry;
         const 0;
         const 14;
         const 12884901905;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.533926377 UTC

[section ""cstring" . i3lqt_str" {
     i3lqt_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,66,105,110]
 },
 GHC.Event.PSQ.Bin_con_entry() //  [R1]
         { []
         }
     {offset
       c3meg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.Bin_con_info" {
     GHC.Event.PSQ.Bin_con_info:
         const GHC.Event.PSQ.Bin_con_entry;
         const 12884901891;
         const 1;
         const i3lqt_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.538239273 UTC

[section ""cstring" . i3lqv_str" {
     i3lqv_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,84,105,112]
 },
 GHC.Event.PSQ.Tip_con_entry() //  [R1]
         { []
         }
     {offset
       c3mem: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.Tip_con_info" {
     GHC.Event.PSQ.Tip_con_info:
         const GHC.Event.PSQ.Tip_con_entry;
         const 8589934593;
         const 4294967297;
         const i3lqv_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.542849812 UTC

[section ""cstring" . i3lqx_str" {
     i3lqx_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,78,105,108]
 },
 GHC.Event.PSQ.Nil_con_entry() //  [R1]
         { []
         }
     {offset
       c3mes: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.Nil_con_info" {
     GHC.Event.PSQ.Nil_con_info:
         const GHC.Event.PSQ.Nil_con_entry;
         const 4294967296;
         const 8589934595;
         const i3lqx_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.547143886 UTC

[section ""cstring" . i3lqz_str" {
     i3lqz_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,69]
 },
 GHC.Event.PSQ.E_con_entry() //  [R1]
         { []
         }
     {offset
       c3mey: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.E_con_info" {
     GHC.Event.PSQ.E_con_info:
         const GHC.Event.PSQ.E_con_entry;
         const 8589934593;
         const 1;
         const i3lqz_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:57.551282944 UTC

[section ""relreadonly" . S3kTe_srt" { S3kTe_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.399300303 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:57:59.404129998 UTC

[section ""data" . GHC.Event.PSQ.$WBin_closure" {
     GHC.Event.PSQ.$WBin_closure:
         const GHC.Event.PSQ.$WBin_info;
 },
 GHC.Event.PSQ.$WBin_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3mnz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3mnZ; else goto c3mo0;
       c3mnZ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WBin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3mo0: // global
           I64[Sp - 40] = block_c3mnw_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3moa; else goto c3mnx;
       u3moa: // global
           call _c3mnw(R1) args: 0, res: 0, upd: 0;
       c3mnx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$WBin_info" {
     GHC.Event.PSQ.$WBin_info:
         const GHC.Event.PSQ.$WBin_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c3mnw() //  [R1]
         { []
         }
     {offset
       c3mnw: // global
           I64[Sp] = block_c3mnC_info;
           _s3meM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3meM::I64;
           if (R1 & 7 != 0) goto u3mo9; else goto c3mnD;
       u3mo9: // global
           call _c3mnC(R1) args: 0, res: 0, upd: 0;
       c3mnD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mnw_info" {
     block_c3mnw_info:
         const _c3mnw;
         const 5;
         const 30;
 },
 _c3mnC() //  [R1]
         { []
         }
     {offset
       c3mnC: // global
           I64[Sp] = block_c3mnH_info;
           _s3meO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3meO::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mnC_info" {
     block_c3mnC_info:
         const _c3mnC;
         const 69;
         const 30;
 },
 _c3mnH() //  [R1]
         { []
         }
     {offset
       c3mnH: // global
           I64[Sp] = block_c3mnJ_info;
           _s3meP::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3meP::P64;
           if (R1 & 7 != 0) goto u3mob; else goto c3mnK;
       u3mob: // global
           call _c3mnJ(R1) args: 0, res: 0, upd: 0;
       c3mnK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mnH_info" {
     block_c3mnH_info:
         const _c3mnH;
         const 197;
         const 30;
 },
 _c3mnJ() //  [R1]
         { []
         }
     {offset
       c3mnJ: // global
           I64[Sp] = block_c3mnO_info;
           _s3meR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3meR::I64;
           if (R1 & 7 != 0) goto u3moc; else goto c3mnP;
       u3moc: // global
           call _c3mnO(R1) args: 0, res: 0, upd: 0;
       c3mnP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mnJ_info" {
     block_c3mnJ_info:
         const _c3mnJ;
         const 197;
         const 30;
 },
 _c3mnO() //  [R1]
         { []
         }
     {offset
       c3mnO: // global
           I64[Sp] = block_c3mnT_info;
           _s3meS::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 40] = _s3meS::P64;
           if (R1 & 7 != 0) goto u3mod; else goto c3mnU;
       u3mod: // global
           call _c3mnT(R1) args: 0, res: 0, upd: 0;
       c3mnU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mnO_info" {
     block_c3mnO_info:
         const _c3mnO;
         const 709;
         const 30;
 },
 _c3mnT() //  [R1]
         { []
         }
     {offset
       c3mnT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mo8; else goto c3mo7;
       c3mo8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mo7: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 32];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mnT_info" {
     block_c3mnT_info:
         const _c3mnT;
         const 709;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.420524865 UTC

[section ""data" . GHC.Event.PSQ.$WTip_closure" {
     GHC.Event.PSQ.$WTip_closure:
         const GHC.Event.PSQ.$WTip_info;
 },
 GHC.Event.PSQ.$WTip_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3mp0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3mpb; else goto c3mpc;
       c3mpb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WTip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mpc: // global
           I64[Sp - 24] = block_c3moX_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mpj; else goto c3moY;
       u3mpj: // global
           call _c3moX(R1) args: 0, res: 0, upd: 0;
       c3moY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$WTip_info" {
     GHC.Event.PSQ.$WTip_info:
         const GHC.Event.PSQ.$WTip_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3moX() //  [R1]
         { []
         }
     {offset
       c3moX: // global
           I64[Sp] = block_c3mp3_info;
           _s3meY::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3meY::I64;
           if (R1 & 7 != 0) goto u3mpi; else goto c3mp4;
       u3mpi: // global
           call _c3mp3(R1) args: 0, res: 0, upd: 0;
       c3mp4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3moX_info" {
     block_c3moX_info:
         const _c3moX;
         const 2;
         const 30;
 },
 _c3mp3() //  [R1]
         { []
         }
     {offset
       c3mp3: // global
           I64[Sp] = block_c3mp8_info;
           _s3mf0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3mf0::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mp3_info" {
     block_c3mp3_info:
         const _c3mp3;
         const 66;
         const 30;
 },
 _c3mp8() //  [R1]
         { []
         }
     {offset
       c3mp8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mph; else goto c3mpg;
       c3mph: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mpg: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mp8_info" {
     block_c3mp8_info:
         const _c3mp8;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.431818549 UTC

[section ""data" . GHC.Event.PSQ.$WE_closure" {
     GHC.Event.PSQ.$WE_closure:
         const GHC.Event.PSQ.$WE_info;
 },
 GHC.Event.PSQ.$WE_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3mpO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3mpX; else goto c3mpY;
       c3mpX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WE_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mpY: // global
           I64[Sp - 24] = block_c3mpL_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mq4; else goto c3mpM;
       u3mq4: // global
           call _c3mpL(R1) args: 0, res: 0, upd: 0;
       c3mpM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$WE_info" {
     GHC.Event.PSQ.$WE_info:
         const GHC.Event.PSQ.$WE_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3mpL() //  [R1]
         { []
         }
     {offset
       c3mpL: // global
           I64[Sp] = block_c3mpR_info;
           _s3mf6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3mf6::I64;
           if (R1 & 7 != 0) goto u3mq3; else goto c3mpS;
       u3mq3: // global
           call _c3mpR(R1) args: 0, res: 0, upd: 0;
       c3mpS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mpL_info" {
     block_c3mpL_info:
         const _c3mpL;
         const 2;
         const 30;
 },
 _c3mpR() //  [R1]
         { []
         }
     {offset
       c3mpR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mq2; else goto c3mq1;
       c3mq2: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mq1: // global
           _s3mf8::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3mf8::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mpR_info" {
     block_c3mpR_info:
         const _c3mpR;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.440185404 UTC

[section ""data" . GHC.Event.PSQ.value_closure" {
     GHC.Event.PSQ.value_closure:
         const GHC.Event.PSQ.value_info;
 },
 GHC.Event.PSQ.value_entry() //  [R2]
         { []
         }
     {offset
       c3mqv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mqw; else goto c3mqx;
       c3mqw: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.value_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mqx: // global
           I64[Sp - 8] = block_c3mqs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mqB; else goto c3mqt;
       u3mqB: // global
           call _c3mqs(R1) args: 0, res: 0, upd: 0;
       c3mqt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.value_info" {
     GHC.Event.PSQ.value_info:
         const GHC.Event.PSQ.value_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3mqs() //  [R1]
         { []
         }
     {offset
       c3mqs: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mqs_info" {
     block_c3mqs_info:
         const _c3mqs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.449052767 UTC

[section ""data" . GHC.Event.PSQ.prio_closure" {
     GHC.Event.PSQ.prio_closure:
         const GHC.Event.PSQ.prio_info;
 },
 GHC.Event.PSQ.prio_entry() //  [R2]
         { []
         }
     {offset
       c3mqT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mqX; else goto c3mqY;
       c3mqX: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.prio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mqY: // global
           I64[Sp - 8] = block_c3mqQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mr2; else goto c3mqR;
       u3mr2: // global
           call _c3mqQ(R1) args: 0, res: 0, upd: 0;
       c3mqR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.prio_info" {
     GHC.Event.PSQ.prio_info:
         const GHC.Event.PSQ.prio_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3mqQ() //  [R1]
         { []
         }
     {offset
       c3mqQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mr1; else goto c3mr0;
       c3mr1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mr0: // global
           _s3mfh::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s3mfh::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mqQ_info" {
     block_c3mqQ_info:
         const _c3mqQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.455324198 UTC

[section ""data" . GHC.Event.PSQ.key_closure" {
     GHC.Event.PSQ.key_closure:
         const GHC.Event.PSQ.key_info;
 },
 GHC.Event.PSQ.key_entry() //  [R2]
         { []
         }
     {offset
       c3mrm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mrq; else goto c3mrr;
       c3mrq: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.key_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mrr: // global
           I64[Sp - 8] = block_c3mrj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mrv; else goto c3mrk;
       u3mrv: // global
           call _c3mrj(R1) args: 0, res: 0, upd: 0;
       c3mrk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.key_info" {
     GHC.Event.PSQ.key_info:
         const GHC.Event.PSQ.key_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3mrj() //  [R1]
         { []
         }
     {offset
       c3mrj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mru; else goto c3mrt;
       c3mru: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mrt: // global
           _s3mfl::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3mfl::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mrj_info" {
     block_c3mrj_info:
         const _c3mrj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.461739491 UTC

[section ""data" . GHC.Event.PSQ.null_closure" {
     GHC.Event.PSQ.null_closure:
         const GHC.Event.PSQ.null_info;
 },
 GHC.Event.PSQ.null_entry() //  [R2]
         { []
         }
     {offset
       c3mrT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mrU; else goto c3mrV;
       c3mrU: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.null_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mrV: // global
           I64[Sp - 8] = block_c3mrM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ms2; else goto c3mrN;
       u3ms2: // global
           call _c3mrM(R1) args: 0, res: 0, upd: 0;
       c3mrN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.null_info" {
     GHC.Event.PSQ.null_info:
         const GHC.Event.PSQ.null_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3mrM() //  [R1]
         { []
         }
     {offset
       c3mrM: // global
           if (R1 & 7 == 3) goto c3mrR; else goto c3mrQ;
       c3mrR: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mrQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mrM_info" {
     block_c3mrM_info:
         const _c3mrM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.468614228 UTC

[section ""data" . GHC.Event.PSQ.findMin_closure" {
     GHC.Event.PSQ.findMin_closure:
         const GHC.Event.PSQ.findMin_info;
 },
 GHC.Event.PSQ.findMin_entry() //  [R2]
         { []
         }
     {offset
       c3msv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3msw; else goto c3msx;
       c3msw: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.findMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3msx: // global
           I64[Sp - 8] = block_c3msn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3msQ; else goto c3mso;
       u3msQ: // global
           call _c3msn(R1) args: 0, res: 0, upd: 0;
       c3mso: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.findMin_info" {
     GHC.Event.PSQ.findMin_info:
         const GHC.Event.PSQ.findMin_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3msn() //  [R1]
         { []
         }
     {offset
       c3msn: // global
           _c3msu::P64 = R1 & 7;
           if (_c3msu::P64 < 3) goto u3msP; else goto c3mst;
       u3msP: // global
           if (_c3msu::P64 < 2) goto c3msr; else goto c3mss;
       c3msr: // global
           Hp = Hp + 48;
           _s3mfr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3msL; else goto c3msD;
       c3msD: // global
           _s3mfu::P64 = P64[_s3mfr::P64 + 7];
           _s3mfs::I64 = I64[_s3mfr::P64 + 31];
           _s3mft::I64 = I64[_s3mfr::P64 + 39];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3mfu::P64;
           I64[Hp - 24] = _s3mfs::I64;
           I64[Hp - 16] = _s3mft::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mss: // global
           Hp = Hp + 48;
           _s3mfr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3msL; else goto c3msK;
       c3msL: // global
           HpAlloc = 48;
           R1 = _s3mfr::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3msK: // global
           _s3mfB::P64 = P64[_s3mfr::P64 + 6];
           _s3mfz::I64 = I64[_s3mfr::P64 + 14];
           _s3mfA::I64 = I64[_s3mfr::P64 + 22];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3mfB::P64;
           I64[Hp - 24] = _s3mfz::I64;
           I64[Hp - 16] = _s3mfA::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mst: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3msn_info" {
     block_c3msn_info:
         const _c3msn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.475702934 UTC

[section ""data" . GHC.Event.PSQ.empty_closure" {
     GHC.Event.PSQ.empty_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.478025324 UTC

[section ""data" . GHC.Event.PSQ.singleton_closure" {
     GHC.Event.PSQ.singleton_closure:
         const GHC.Event.PSQ.singleton_info;
 },
 GHC.Event.PSQ.singleton_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3mth: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.PSQ.$WTip_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.singleton_info" {
     GHC.Event.PSQ.singleton_info:
         const GHC.Event.PSQ.singleton_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.483921141 UTC

[section ""data" . GHC.Event.PSQ.toList_go_closure" {
     GHC.Event.PSQ.toList_go_closure:
         const GHC.Event.PSQ.toList_go_info;
 },
 sat_s3mfN_entry() //  [R1]
         { []
         }
     {offset
       c3mtF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3mtG; else goto c3mtH;
       c3mtG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mtH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3mfN_info" {
     sat_s3mfN_info:
         const sat_s3mfN_entry;
         const 2;
         const 18;
 },
 sat_s3mfO_entry() //  [R1]
         { []
         }
     {offset
       c3mtI: // global
           _s3mfO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3mtJ; else goto c3mtK;
       c3mtK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mtM; else goto c3mtL;
       c3mtM: // global
           HpAlloc = 32;
           goto c3mtJ;
       c3mtJ: // global
           R1 = _s3mfO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mtL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3mfO::P64;
           _s3mfD::P64 = P64[_s3mfO::P64 + 16];
           _s3mfK::P64 = P64[_s3mfO::P64 + 24];
           _s3mfL::P64 = P64[_s3mfO::P64 + 32];
           I64[Hp - 24] = sat_s3mfN_info;
           P64[Hp - 8] = _s3mfD::P64;
           P64[Hp] = _s3mfL::P64;
           R3 = _s3mfK::P64;
           R2 = Hp - 24;
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3mfO_info" {
     sat_s3mfO_info:
         const sat_s3mfO_entry;
         const 3;
         const 15;
 },
 GHC.Event.PSQ.toList_go_entry() //  [R2, R3]
         { []
         }
     {offset
       c3mtS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3mtT; else goto c3mtU;
       c3mtT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.toList_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mtU: // global
           I64[Sp - 16] = block_c3mts_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3mub; else goto c3mtt;
       u3mub: // global
           call _c3mts(R1) args: 0, res: 0, upd: 0;
       c3mtt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.toList_go_info" {
     GHC.Event.PSQ.toList_go_info:
         const GHC.Event.PSQ.toList_go_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3mts() //  [R1]
         { []
         }
     {offset
       c3mts: // global
           _s3mfD::P64 = P64[Sp + 8];
           _c3mtR::P64 = R1 & 7;
           if (_c3mtR::P64 < 3) goto u3mua; else goto c3mtQ;
       u3mua: // global
           if (_c3mtR::P64 < 2) goto c3mtO; else goto c3mtP;
       c3mtO: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3mtZ; else goto c3mtY;
       c3mtZ: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mtY: // global
           _s3mfI::P64 = P64[R1 + 7];
           _s3mfK::P64 = P64[R1 + 15];
           _s3mfL::P64 = P64[R1 + 23];
           _s3mfG::I64 = I64[R1 + 31];
           _s3mfH::I64 = I64[R1 + 39];
           I64[Hp - 88] = sat_s3mfO_info;
           P64[Hp - 72] = _s3mfD::P64;
           P64[Hp - 64] = _s3mfK::P64;
           P64[Hp - 56] = _s3mfL::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3mfI::P64;
           I64[Hp - 32] = _s3mfG::I64;
           I64[Hp - 24] = _s3mfH::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mtP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mu6; else goto c3mu5;
       c3mu6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mu5: // global
           _s3mfR::P64 = P64[R1 + 6];
           _s3mfP::I64 = I64[R1 + 14];
           _s3mfQ::I64 = I64[R1 + 22];
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3mfR::P64;
           I64[Hp - 32] = _s3mfP::I64;
           I64[Hp - 24] = _s3mfQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3mfD::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mtQ: // global
           R1 = _s3mfD::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mts_info" {
     block_c3mts_info:
         const _c3mts;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.494046688 UTC

[section ""data" . GHC.Event.PSQ.toList_closure" {
     GHC.Event.PSQ.toList_closure:
         const GHC.Event.PSQ.toList_info;
 },
 GHC.Event.PSQ.toList_entry() //  [R2]
         { []
         }
     {offset
       c3muO: // global
           R3 = R2;
           R2 = GHC.Types.[]_closure+1;
           call GHC.Event.PSQ.toList_go_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.toList_info" {
     GHC.Event.PSQ.toList_info:
         const GHC.Event.PSQ.toList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.511230765 UTC

[section ""data" . GHC.Event.PSQ.merge_closure" {
     GHC.Event.PSQ.merge_closure:
         const GHC.Event.PSQ.merge_info;
 },
 GHC.Event.PSQ.merge_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3mv8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3mv9; else goto c3mva;
       c3mv9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.merge_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mva: // global
           I64[Sp - 24] = block_c3mv0_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mzT; else goto c3mv1;
       u3mzT: // global
           call _c3mv0(R1) args: 0, res: 0, upd: 0;
       c3mv1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.merge_info" {
     GHC.Event.PSQ.merge_info:
         const GHC.Event.PSQ.merge_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3mv0() //  [R1]
         { []
         }
     {offset
       c3mv0: // global
           _s3mfV::P64 = P64[Sp + 16];
           _c3mv7::P64 = R1 & 7;
           if (_c3mv7::P64 < 3) goto u3mzM; else goto c3mv6;
       u3mzM: // global
           if (_c3mv7::P64 < 2) goto c3mv4; else goto c3mv5;
       c3mv4: // global
           I64[Sp - 48] = block_c3mvd_info;
           _s3mfW::P64 = R1;
           _s3mfZ::P64 = P64[R1 + 7];
           _s3mg1::P64 = P64[R1 + 15];
           _s3mg2::P64 = P64[R1 + 23];
           _s3mfX::I64 = I64[R1 + 31];
           _s3mfY::I64 = I64[R1 + 39];
           _s3mg0::I64 = I64[R1 + 47];
           R1 = _s3mfV::P64;
           I64[Sp - 40] = _s3mfY::I64;
           P64[Sp - 32] = _s3mfZ::P64;
           I64[Sp - 24] = _s3mg0::I64;
           P64[Sp - 16] = _s3mg1::P64;
           P64[Sp - 8] = _s3mg2::P64;
           I64[Sp] = _s3mfX::I64;
           P64[Sp + 16] = _s3mfW::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3mzR; else goto c3mvf;
       u3mzR: // global
           call _c3mvd(R1) args: 0, res: 0, upd: 0;
       c3mvf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mv5: // global
           I64[Sp - 24] = block_c3mxv_info;
           _s3mfW::P64 = R1;
           _s3mgE::P64 = P64[R1 + 6];
           _s3mgC::I64 = I64[R1 + 14];
           _s3mgD::I64 = I64[R1 + 22];
           R1 = _s3mfV::P64;
           I64[Sp - 16] = _s3mgD::I64;
           P64[Sp - 8] = _s3mgE::P64;
           I64[Sp] = _s3mgC::I64;
           P64[Sp + 16] = _s3mfW::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mzS; else goto c3mxx;
       u3mzS: // global
           call _c3mxv(R1) args: 0, res: 0, upd: 0;
       c3mxx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mv6: // global
           R1 = _s3mfV::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mv0_info" {
     block_c3mv0_info:
         const _c3mv0;
         const 2;
         const 30;
 },
 _c3mvd() //  [R1]
         { []
         }
     {offset
       c3mvd: // global
           _c3mzL::P64 = R1 & 7;
           if (_c3mzL::P64 < 3) goto u3mzN; else goto u3mzP;
       u3mzN: // global
           _s3mfT::P64 = P64[Sp + 56];
           _s3mfX::I64 = I64[Sp + 48];
           _s3mfY::I64 = I64[Sp + 8];
           if (_c3mzL::P64 < 2) goto c3mwm; else goto c3mxo;
       c3mwm: // global
           _s3mg6::P64 = P64[R1 + 7];
           _s3mg8::P64 = P64[R1 + 15];
           _s3mg9::P64 = P64[R1 + 23];
           _s3mg4::I64 = I64[R1 + 31];
           _s3mg5::I64 = I64[R1 + 39];
           _s3mg7::I64 = I64[R1 + 47];
           if (_s3mfY::I64 == _s3mg5::I64) goto c3mwk; else goto c3mwd;
       c3mwk: // global
           _s3mg3::P64 = R1;
           if (%MO_S_Ge_W64(_s3mfX::I64,
                            _s3mg4::I64)) goto s3mga; else goto s3mgf;
       c3mwd: // global
           _s3mg3::P64 = R1;
           if (_s3mfY::I64 > _s3mg5::I64) goto s3mga; else goto s3mgf;
       s3mga: // global
           I64[Sp + 8] = block_c3mvp_info;
           R1 = _s3mfT::P64;
           P64[Sp + 16] = _s3mg9::P64;
           P64[Sp + 24] = _s3mg8::P64;
           I64[Sp + 32] = _s3mg7::I64;
           P64[Sp + 40] = _s3mg6::P64;
           I64[Sp + 48] = _s3mg5::I64;
           I64[Sp + 56] = _s3mg4::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3mzW; else goto c3mvq;
       u3mzW: // global
           call _c3mvp(R1) args: 0, res: 0, upd: 0;
       c3mvq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       s3mgf: // global
           I64[Sp] = block_c3mvM_info;
           R1 = _s3mfT::P64;
           P64[Sp + 64] = _s3mg3::P64;
           if (R1 & 7 != 0) goto u3mzX; else goto c3mvN;
       u3mzX: // global
           call _c3mvM(R1) args: 0, res: 0, upd: 0;
       c3mvN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mxo: // global
           _s3mgp::P64 = P64[R1 + 6];
           _s3mgn::I64 = I64[R1 + 14];
           _s3mgo::I64 = I64[R1 + 22];
           if (_s3mfY::I64 == _s3mgo::I64) goto c3mxn; else goto c3mx6;
       c3mxn: // global
           _s3mg3::P64 = R1;
           if (%MO_S_Lt_W64(_s3mfX::I64,
                            _s3mgn::I64)) goto s3mgq; else goto c3mxi;
       c3mxi: // global
           I64[Sp + 32] = block_c3mxb_info;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgp::P64;
           I64[Sp + 48] = _s3mgo::I64;
           I64[Sp + 56] = _s3mgn::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3mzV; else goto c3mxc;
       u3mzV: // global
           call _c3mxb(R1) args: 0, res: 0, upd: 0;
       c3mxc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mx6: // global
           _s3mg3::P64 = R1;
           if (_s3mfY::I64 <= _s3mgo::I64) goto s3mgq; else goto c3mx0;
       s3mgq: // global
           I64[Sp] = block_c3mwv_info;
           R1 = _s3mfT::P64;
           P64[Sp + 64] = _s3mg3::P64;
           if (R1 & 7 != 0) goto u3mzY; else goto c3mww;
       u3mzY: // global
           call _c3mwv(R1) args: 0, res: 0, upd: 0;
       c3mww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mx0: // global
           I64[Sp + 32] = block_c3mwT_info;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgp::P64;
           I64[Sp + 48] = _s3mgo::I64;
           I64[Sp + 56] = _s3mgn::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3mzU; else goto c3mwU;
       u3mzU: // global
           call _c3mwT(R1) args: 0, res: 0, upd: 0;
       c3mwU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3mzP: // global
           Sp = Sp + 64;
           call _c3mzG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3mvd_info" {
     block_c3mvd_info:
         const _c3mvd;
         const 2376;
         const 30;
 },
 _c3mvp() //  [R1]
         { []
         }
     {offset
       c3mvp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mvD; else goto c3mvC;
       c3mvD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mvC: // global
           _s3mgc::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3mg8::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3mvv_info;
           R4 = P64[Sp + 8];
           R3 = _s3mg8::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3mgc::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mvp_info" {
     block_c3mvp_info:
         const _c3mvp;
         const 3335;
         const 30;
 },
 _c3mvv() //  [R1]
         { []
         }
     {offset
       c3mvv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mvG; else goto c3mvF;
       c3mvG: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mvF: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mvv_info" {
     block_c3mvv_info:
         const _c3mvv;
         const 837;
         const 30;
 },
 _c3mvM() //  [R1]
         { []
         }
     {offset
       c3mvM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mw0; else goto c3mvZ;
       c3mw0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mvZ: // global
           _s3mgh::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3mvS_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3mgh::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mvM_info" {
     block_c3mvM_info:
         const _c3mvM;
         const 6472;
         const 30;
 },
 _c3mvS() //  [R1]
         { []
         }
     {offset
       c3mvS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mw3; else goto c3mw2;
       c3mw3: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mw2: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mvS_info" {
     block_c3mvS_info:
         const _c3mvS;
         const 8008;
         const 30;
 },
 _c3mxb() //  [R1]
         { []
         }
     {offset
       c3mxb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mxl; else goto c3mxk;
       c3mxl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mxk: // global
           _s3mgB::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3mgB::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mxb_info" {
     block_c3mxb_info:
         const _c3mxb;
         const 388;
         const 30;
 },
 _c3mwT() //  [R1]
         { []
         }
     {offset
       c3mwT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mx3; else goto c3mx2;
       c3mx3: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mx2: // global
           _s3mgy::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3mgy::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mwT_info" {
     block_c3mwT_info:
         const _c3mwT;
         const 388;
         const 30;
 },
 _c3mwv() //  [R1]
         { []
         }
     {offset
       c3mwv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mwJ; else goto c3mwI;
       c3mwJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mwI: // global
           _s3mgs::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3mwB_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3mgs::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mwv_info" {
     block_c3mwv_info:
         const _c3mwv;
         const 6472;
         const 30;
 },
 _c3mwB() //  [R1]
         { []
         }
     {offset
       c3mwB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mwM; else goto c3mwL;
       c3mwM: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mwL: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mwB_info" {
     block_c3mwB_info:
         const _c3mwB;
         const 8008;
         const 30;
 },
 _c3mxv() //  [R1]
         { []
         }
     {offset
       c3mxv: // global
           _c3mzK::P64 = R1 & 7;
           if (_c3mzK::P64 < 3) goto u3mzO; else goto u3mzQ;
       u3mzO: // global
           _s3mfT::P64 = P64[Sp + 32];
           _s3mgC::I64 = I64[Sp + 24];
           _s3mgD::I64 = I64[Sp + 8];
           if (_c3mzK::P64 < 2) goto c3myD; else goto c3mzC;
       c3myD: // global
           _s3mgI::P64 = P64[R1 + 7];
           _s3mgK::P64 = P64[R1 + 15];
           _s3mgL::P64 = P64[R1 + 23];
           _s3mgG::I64 = I64[R1 + 31];
           _s3mgH::I64 = I64[R1 + 39];
           _s3mgJ::I64 = I64[R1 + 47];
           if (_s3mgD::I64 == _s3mgH::I64) goto c3myB; else goto c3myj;
       c3myB: // global
           if (%MO_S_Ge_W64(_s3mgC::I64,
                            _s3mgG::I64)) goto s3mgM; else goto c3myx;
       c3myx: // global
           I64[Sp] = block_c3myr_info;
           _s3mgF::P64 = R1;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgF::P64;
           if (R1 & 7 != 0) goto u3mA1; else goto c3mys;
       u3mA1: // global
           call _c3myr(R1) args: 0, res: 0, upd: 0;
       c3mys: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3myj: // global
           if (_s3mgD::I64 > _s3mgH::I64) goto s3mgM; else goto c3mye;
       s3mgM: // global
           I64[Sp - 16] = block_c3mxH_info;
           R1 = _s3mfT::P64;
           P64[Sp - 8] = _s3mgL::P64;
           P64[Sp] = _s3mgK::P64;
           I64[Sp + 8] = _s3mgJ::I64;
           P64[Sp + 16] = _s3mgI::P64;
           I64[Sp + 24] = _s3mgH::I64;
           I64[Sp + 32] = _s3mgG::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3mA6; else goto c3mxI;
       u3mA6: // global
           call _c3mxH(R1) args: 0, res: 0, upd: 0;
       c3mxI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mye: // global
           I64[Sp] = block_c3my8_info;
           _s3mgF::P64 = R1;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgF::P64;
           if (R1 & 7 != 0) goto u3mA0; else goto c3my9;
       u3mA0: // global
           call _c3my8(R1) args: 0, res: 0, upd: 0;
       c3my9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mzC: // global
           _s3mh0::P64 = P64[R1 + 6];
           _s3mgY::I64 = I64[R1 + 14];
           _s3mgZ::I64 = I64[R1 + 22];
           if (_s3mgD::I64 == _s3mgZ::I64) goto c3mzB; else goto c3mza;
       c3mzB: // global
           if (%MO_S_Ge_W64(_s3mgC::I64,
                            _s3mgY::I64)) goto c3mzm; else goto c3mzx;
       c3mzm: // global
           I64[Sp + 8] = block_c3mzf_info;
           R1 = _s3mfT::P64;
           P64[Sp + 16] = _s3mh0::P64;
           I64[Sp + 24] = _s3mgZ::I64;
           I64[Sp + 32] = _s3mgY::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3mA4; else goto c3mzg;
       u3mA4: // global
           call _c3mzf(R1) args: 0, res: 0, upd: 0;
       c3mzg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mzx: // global
           I64[Sp] = block_c3mzr_info;
           _s3mgF::P64 = R1;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgF::P64;
           if (R1 & 7 != 0) goto u3mA5; else goto c3mzs;
       u3mA5: // global
           call _c3mzr(R1) args: 0, res: 0, upd: 0;
       c3mzs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mza: // global
           if (_s3mgD::I64 > _s3mgZ::I64) goto c3myU; else goto c3mz5;
       c3myU: // global
           I64[Sp + 8] = block_c3myN_info;
           R1 = _s3mfT::P64;
           P64[Sp + 16] = _s3mh0::P64;
           I64[Sp + 24] = _s3mgZ::I64;
           I64[Sp + 32] = _s3mgY::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3mA2; else goto c3myO;
       u3mA2: // global
           call _c3myN(R1) args: 0, res: 0, upd: 0;
       c3myO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mz5: // global
           I64[Sp] = block_c3myZ_info;
           _s3mgF::P64 = R1;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgF::P64;
           if (R1 & 7 != 0) goto u3mA3; else goto c3mz0;
       u3mA3: // global
           call _c3myZ(R1) args: 0, res: 0, upd: 0;
       c3mz0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3mzQ: // global
           Sp = Sp + 40;
           call _c3mzG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3mxv_info" {
     block_c3mxv_info:
         const _c3mxv;
         const 325;
         const 30;
 },
 _c3myr() //  [R1]
         { []
         }
     {offset
       c3myr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3myA; else goto c3myz;
       c3myA: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3myz: // global
           _s3mgX::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3mgX::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3myr_info" {
     block_c3myr_info:
         const _c3myr;
         const 837;
         const 30;
 },
 _c3mxH() //  [R1]
         { []
         }
     {offset
       c3mxH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mxV; else goto c3mxU;
       c3mxV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mxU: // global
           _s3mgO::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3mgK::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3mxN_info;
           R4 = P64[Sp + 8];
           R3 = _s3mgK::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3mgO::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mxH_info" {
     block_c3mxH_info:
         const _c3mxH;
         const 3335;
         const 30;
 },
 _c3mxN() //  [R1]
         { []
         }
     {offset
       c3mxN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mxY; else goto c3mxX;
       c3mxY: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mxX: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mxN_info" {
     block_c3mxN_info:
         const _c3mxN;
         const 837;
         const 30;
 },
 _c3my8() //  [R1]
         { []
         }
     {offset
       c3my8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3myh; else goto c3myg;
       c3myh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3myg: // global
           _s3mgU::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3mgU::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3my8_info" {
     block_c3my8_info:
         const _c3my8;
         const 837;
         const 30;
 },
 _c3mzf() //  [R1]
         { []
         }
     {offset
       c3mzf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mzp; else goto c3mzo;
       c3mzp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mzo: // global
           _s3mh9::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3mh9::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mzf_info" {
     block_c3mzf_info:
         const _c3mzf;
         const 388;
         const 30;
 },
 _c3mzr() //  [R1]
         { []
         }
     {offset
       c3mzr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mzA; else goto c3mzz;
       c3mzA: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mzz: // global
           _s3mhb::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3mhb::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mzr_info" {
     block_c3mzr_info:
         const _c3mzr;
         const 837;
         const 30;
 },
 _c3myN() //  [R1]
         { []
         }
     {offset
       c3myN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3myX; else goto c3myW;
       c3myX: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3myW: // global
           _s3mh4::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3mh4::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3myN_info" {
     block_c3myN_info:
         const _c3myN;
         const 388;
         const 30;
 },
 _c3myZ() //  [R1]
         { []
         }
     {offset
       c3myZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mz8; else goto c3mz7;
       c3mz8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mz7: // global
           _s3mh6::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3mh6::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3myZ_info" {
     block_c3myZ_info:
         const _c3myZ;
         const 837;
         const 30;
 },
 _c3mzG() //  []
         { []
         }
     {offset
       c3mzG: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.562847897 UTC

[section ""data" . GHC.Event.PSQ.$watMost_closure" {
     GHC.Event.PSQ.$watMost_closure:
         const GHC.Event.PSQ.$watMost_info;
 },
 ds_s3mhr_entry() //  [R1]
         { []
         }
     {offset
       c3mDM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3mDN; else goto c3mDO;
       c3mDN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mDO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3mDJ_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_s3mhe_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_s3mhr_info" {
     ds_s3mhr_info:
         const ds_s3mhr_entry;
         const 3;
         const 15;
 },
 _c3mDJ() //  [R1, R2]
         { []
         }
     {offset
       c3mDJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3mDR; else goto c3mDQ;
       c3mDR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3mDQ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3mDJ_info" {
     block_c3mDJ_info:
         const _c3mDJ;
         const 0;
         const 30;
 },
 ds1_s3mhv_entry() //  [R1]
         { []
         }
     {offset
       c3mE0: // global
           _s3mhv::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3mE1; else goto c3mE2;
       c3mE2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3mE4; else goto c3mE3;
       c3mE4: // global
           HpAlloc = 24;
           goto c3mE1;
       c3mE1: // global
           R1 = _s3mhv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mE3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3mhv::P64;
           _s3mhe::P64 = P64[_s3mhv::P64 + 16];
           _s3mhn::P64 = P64[_s3mhv::P64 + 24];
           _s3mhr::P64 = P64[_s3mhv::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s3mhr::P64;
           I64[Sp - 24] = block_c3mDX_info;
           R3 = _s3mhn::P64;
           R2 = Hp - 16;
           R1 = _s3mhe::P64;
           Sp = Sp - 24;
           call $wgo_s3mhe_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_s3mhv_info" {
     ds1_s3mhv_info:
         const ds1_s3mhv_entry;
         const 3;
         const 15;
 },
 _c3mDX() //  [R1, R2]
         { []
         }
     {offset
       c3mDX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3mE7; else goto c3mE6;
       c3mE7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3mE6: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3mDX_info" {
     block_c3mDX_info:
         const _c3mDX;
         const 0;
         const 30;
 },
 sat_s3mhQ_entry() //  [R1]
         { []
         }
     {offset
       c3mEf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3mEo; else goto c3mEp;
       c3mEo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mEp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3mEc_info;
           _s3mhv::P64 = P64[R1 + 24];
           _s3mhl::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s3mhl::I64;
           P64[Sp - 24] = _s3mhv::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3mEv; else goto c3mEd;
       u3mEv: // global
           call _c3mEc(R1) args: 0, res: 0, upd: 0;
       c3mEd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3mhQ_info" {
     sat_s3mhQ_info:
         const sat_s3mhQ_entry;
         const 4294967298;
         const 15;
 },
 _c3mEc() //  [R1]
         { []
         }
     {offset
       c3mEc: // global
           I64[Sp] = block_c3mEi_info;
           _s3mhL::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3mhL::P64;
           if (R1 & 7 != 0) goto u3mEu; else goto c3mEj;
       u3mEu: // global
           call _c3mEi(R1) args: 0, res: 0, upd: 0;
       c3mEj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c3mEc_info" {
     block_c3mEc_info:
         const _c3mEc;
         const 66;
         const 30;
 },
 _c3mEi() //  [R1]
         { []
         }
     {offset
       c3mEi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mEt; else goto c3mEs;
       c3mEt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3mEs: // global
           _s3mhO::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           R4 = _s3mhO::P64;
           R3 = P64[Sp + 16];
           R2 = Hp - 7;
           Sp = Sp + 24;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c3mEi_info" {
     block_c3mEi_info:
         const _c3mEi;
         const 66;
         const 30;
 },
 $wgo_s3mhe_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c3mEB: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3mEC; else goto c3mED;
       c3mEC: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mED: // global
           I64[Sp - 32] = block_c3mDs_info;
           _s3mhe::P64 = R1;
           _s3mhc::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s3mhc::P64;
           P64[Sp - 16] = _s3mhe::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3mFd; else goto c3mDt;
       u3mFd: // global
           call _c3mDs(R1) args: 0, res: 0, upd: 0;
       c3mDt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s3mhe_info" {
     $wgo_s3mhe_info:
         const $wgo_s3mhe_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 _c3mDs() //  [R1]
         { []
         }
     {offset
       c3mDs: // global
           _c3mEA::P64 = R1 & 7;
           if (_c3mEA::P64 < 3) goto u3mFa; else goto c3mEz;
       u3mFa: // global
           _s3mhc::P64 = P64[Sp + 8];
           if (_c3mEA::P64 < 2) goto c3mEx; else goto c3mEy;
       c3mEx: // global
           I64[Sp - 48] = block_c3mDx_info;
           _s3mhh::P64 = R1;
           _s3mhk::P64 = P64[R1 + 7];
           _s3mhm::P64 = P64[R1 + 15];
           _s3mhn::P64 = P64[R1 + 23];
           _s3mhi::I64 = I64[R1 + 31];
           _s3mhj::I64 = I64[R1 + 39];
           _s3mhl::I64 = I64[R1 + 47];
           R1 = _s3mhc::P64;
           I64[Sp - 40] = _s3mhj::I64;
           P64[Sp - 32] = _s3mhk::P64;
           I64[Sp - 24] = _s3mhl::I64;
           P64[Sp - 16] = _s3mhm::P64;
           P64[Sp - 8] = _s3mhn::P64;
           I64[Sp] = _s3mhi::I64;
           P64[Sp + 8] = _s3mhh::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3mFb; else goto c3mDy;
       u3mFb: // global
           call _c3mDx(R1) args: 0, res: 0, upd: 0;
       c3mDy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mEy: // global
           I64[Sp - 16] = block_c3mEQ_info;
           _s3mhh::P64 = R1;
           _s3mhT::P64 = P64[R1 + 6];
           _s3mhR::I64 = I64[R1 + 14];
           _s3mhS::I64 = I64[R1 + 22];
           R1 = _s3mhc::P64;
           P64[Sp - 8] = _s3mhT::P64;
           I64[Sp] = _s3mhS::I64;
           I64[Sp + 8] = _s3mhR::I64;
           P64[Sp + 16] = _s3mhh::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3mFc; else goto c3mES;
       u3mFc: // global
           call _c3mEQ(R1) args: 0, res: 0, upd: 0;
       c3mES: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mEz: // global
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mDs_info" {
     block_c3mDs_info:
         const _c3mDs;
         const 3;
         const 30;
 },
 _c3mDx() //  [R1]
         { []
         }
     {offset
       c3mDx: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c3mEH; else goto c3mEG;
       c3mEH: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mEG: // global
           _s3mhf::P64 = P64[Sp + 72];
           _s3mhj::I64 = I64[Sp + 8];
           if (_s3mhj::I64 <= I64[R1 + 7]) goto c3mEM; else goto c3mEN;
       c3mEM: // global
           I64[Hp - 192] = ds_s3mhr_info;
           _s3mhe::P64 = P64[Sp + 64];
           P64[Hp - 176] = _s3mhe::P64;
           P64[Hp - 168] = _s3mhf::P64;
           P64[Hp - 160] = P64[Sp + 32];
           I64[Hp - 152] = ds1_s3mhv_info;
           P64[Hp - 136] = _s3mhe::P64;
           P64[Hp - 128] = P64[Sp + 40];
           _c3mDF::P64 = Hp - 192;
           P64[Hp - 120] = _c3mDF::P64;
           I64[Hp - 112] = sat_s3mhQ_info;
           P64[Hp - 96] = _c3mDF::P64;
           _c3mDS::P64 = Hp - 152;
           P64[Hp - 88] = _c3mDS::P64;
           I64[Hp - 80] = I64[Sp + 24];
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _c3mDS::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = I64[Sp + 48];
           I64[Hp - 24] = _s3mhj::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 72;
           R2 = Hp - 112;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3mEN: // global
           Hp = Hp - 200;
           R2 = P64[Sp + 56];
           R1 = _s3mhf::P64;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mDx_info" {
     block_c3mDx_info:
         const _c3mDx;
         const 2377;
         const 30;
 },
 _c3mEQ() //  [R1]
         { []
         }
     {offset
       c3mEQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mEY; else goto c3mEX;
       c3mEY: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mEX: // global
           _s3mhf::P64 = P64[Sp + 40];
           _s3mhS::I64 = I64[Sp + 16];
           if (_s3mhS::I64 <= I64[R1 + 7]) goto c3mF5; else goto c3mF6;
       c3mF5: // global
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = I64[Sp + 24];
           I64[Hp - 24] = _s3mhS::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3mhf::P64;
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3mF6: // global
           Hp = Hp - 56;
           R2 = P64[Sp + 32];
           R1 = _s3mhf::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mEQ_info" {
     block_c3mEQ_info:
         const _c3mEQ;
         const 389;
         const 30;
 },
 GHC.Event.PSQ.$watMost_entry() //  [R2, R3]
         { []
         }
     {offset
       c3mFe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mFi; else goto c3mFh;
       c3mFi: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$watMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mFh: // global
           I64[Hp - 8] = $wgo_s3mhe_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 6;
           call $wgo_s3mhe_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$watMost_info" {
     GHC.Event.PSQ.$watMost_info:
         const GHC.Event.PSQ.$watMost_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.58951783 UTC

[section ""data" . GHC.Event.PSQ.atMost_closure" {
     GHC.Event.PSQ.atMost_closure:
         const GHC.Event.PSQ.atMost_info;
 },
 GHC.Event.PSQ.atMost_entry() //  [R2, R3]
         { []
         }
     {offset
       c3mGR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mGS; else goto c3mGT;
       c3mGS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.atMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mGT: // global
           I64[Sp - 8] = block_c3mGO_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$watMost_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.atMost_info" {
     GHC.Event.PSQ.atMost_info:
         const GHC.Event.PSQ.atMost_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3mGO() //  [R1, R2]
         { []
         }
     {offset
       c3mGO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3mGW; else goto c3mGV;
       c3mGW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3mGV: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mGO_info" {
     block_c3mGO_info:
         const _c3mGO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.597367194 UTC

[section ""data" . GHC.Event.PSQ.minView_closure" {
     GHC.Event.PSQ.minView_closure:
         const GHC.Event.PSQ.minView_info;
 },
 sat_s3mie_entry() //  [R1]
         { []
         }
     {offset
       c3mHm: // global
           _s3mie::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3mHn; else goto c3mHo;
       c3mHo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mHq; else goto c3mHp;
       c3mHq: // global
           HpAlloc = 16;
           goto c3mHn;
       c3mHn: // global
           R1 = _s3mie::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mHp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3mie::P64;
           _s3mia::P64 = P64[_s3mie::P64 + 16];
           _s3mib::P64 = P64[_s3mie::P64 + 24];
           _s3mi9::I64 = I64[_s3mie::P64 + 32];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3mi9::I64;
           R4 = _s3mib::P64;
           R3 = _s3mia::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s3mie_info" {
     sat_s3mie_info:
         const sat_s3mie_entry;
         const 4294967298;
         const 15;
 },
 GHC.Event.PSQ.minView_entry() //  [R2]
         { []
         }
     {offset
       c3mHw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mHx; else goto c3mHy;
       c3mHx: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.minView_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mHy: // global
           I64[Sp - 8] = block_c3mHc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mHR; else goto c3mHd;
       u3mHR: // global
           call _c3mHc(R1) args: 0, res: 0, upd: 0;
       c3mHd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.minView_info" {
     GHC.Event.PSQ.minView_info:
         const GHC.Event.PSQ.minView_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3mHc() //  [R1]
         { []
         }
     {offset
       c3mHc: // global
           _c3mHv::P64 = R1 & 7;
           if (_c3mHv::P64 < 3) goto u3mHQ; else goto c3mHu;
       u3mHQ: // global
           if (_c3mHv::P64 < 2) goto c3mHs; else goto c3mHt;
       c3mHs: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3mHE; else goto c3mHD;
       c3mHE: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mHD: // global
           _s3mi8::P64 = P64[R1 + 7];
           _s3mia::P64 = P64[R1 + 15];
           _s3mib::P64 = P64[R1 + 23];
           _s3mi6::I64 = I64[R1 + 31];
           _s3mi7::I64 = I64[R1 + 39];
           _s3mi9::I64 = I64[R1 + 47];
           I64[Hp - 104] = sat_s3mie_info;
           P64[Hp - 88] = _s3mia::P64;
           P64[Hp - 80] = _s3mib::P64;
           I64[Hp - 72] = _s3mi9::I64;
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3mi8::P64;
           I64[Hp - 48] = _s3mi6::I64;
           I64[Hp - 40] = _s3mi7::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mHt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3mHM; else goto c3mHL;
       c3mHM: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mHL: // global
           _s3mii::P64 = P64[R1 + 6];
           _s3mig::I64 = I64[R1 + 14];
           _s3mih::I64 = I64[R1 + 22];
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3mii::P64;
           I64[Hp - 48] = _s3mig::I64;
           I64[Hp - 40] = _s3mih::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mHu: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mHc_info" {
     block_c3mHc_info:
         const _c3mHc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.610123556 UTC

[section ""data" . GHC.Event.PSQ.deleteMin_closure" {
     GHC.Event.PSQ.deleteMin_closure:
         const GHC.Event.PSQ.deleteMin_info;
 },
 GHC.Event.PSQ.deleteMin_entry() //  [R2]
         { []
         }
     {offset
       c3mIC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mID; else goto c3mIE;
       c3mID: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.deleteMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mIE: // global
           I64[Sp - 8] = block_c3mIu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mIS; else goto c3mIv;
       u3mIS: // global
           call _c3mIu(R1) args: 0, res: 0, upd: 0;
       c3mIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.deleteMin_info" {
     GHC.Event.PSQ.deleteMin_info:
         const GHC.Event.PSQ.deleteMin_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3mIu() //  [R1]
         { []
         }
     {offset
       c3mIu: // global
           _c3mIB::P64 = R1 & 7;
           if (_c3mIB::P64 >= 3) goto c3mIA; else goto u3mIR;
       u3mIR: // global
           if (_c3mIB::P64 >= 2) goto c3mIA; else goto c3mIy;
       c3mIA: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mIy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mIK; else goto c3mIJ;
       c3mIK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mIJ: // global
           _s3mir::P64 = P64[R1 + 15];
           _s3mis::P64 = P64[R1 + 23];
           _s3miq::I64 = I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3miq::I64;
           R4 = _s3mis::P64;
           R3 = _s3mir::P64;
           R2 = Hp - 7;
           Sp = Sp + 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mIu_info" {
     block_c3mIu_info:
         const _c3mIu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.61987583 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule4_bytes" {
     GHC.Event.PSQ.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.621642464 UTC

[section ""data" . GHC.Event.PSQ.$trModule3_closure" {
     GHC.Event.PSQ.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.623367385 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule2_bytes" {
     GHC.Event.PSQ.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,80,83,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.625056737 UTC

[section ""data" . GHC.Event.PSQ.$trModule1_closure" {
     GHC.Event.PSQ.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.626826021 UTC

[section ""data" . GHC.Event.PSQ.$trModule_closure" {
     GHC.Event.PSQ.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.PSQ.$trModule3_closure+1;
         const GHC.Event.PSQ.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.628606681 UTC

[section ""data" . $krep_r3kcT_closure" {
     $krep_r3kcT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.630367224 UTC

[section ""data" . $krep1_r3kcU_closure" {
     $krep1_r3kcU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.632218846 UTC

[section ""data" . $krep2_r3kcV_closure" {
     $krep2_r3kcV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.633986299 UTC

[section ""data" . $krep3_r3kcW_closure" {
     $krep3_r3kcW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.635726822 UTC

[section ""cstring" . GHC.Event.PSQ.$tcElem2_bytes" {
     GHC.Event.PSQ.$tcElem2_bytes:
         I8[] [69,108,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.637459676 UTC

[section ""data" . GHC.Event.PSQ.$tcElem1_closure" {
     GHC.Event.PSQ.$tcElem1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcElem2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.639261527 UTC

[section ""data" . GHC.Event.PSQ.$tcElem_closure" {
     GHC.Event.PSQ.$tcElem_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcElem1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15044414420558834066;
         const 12198171511156299872;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.641779988 UTC

[section ""data" . $krep4_r3kcX_closure" {
     $krep4_r3kcX_closure:
         const :_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.643506167 UTC

[section ""data" . $krep5_r3kcY_closure" {
     $krep5_r3kcY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcElem_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.645282479 UTC

[section ""data" . $krep6_r3kcZ_closure" {
     $krep6_r3kcZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep5_r3kcY_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.647058511 UTC

[section ""data" . $krep7_r3kd0_closure" {
     $krep7_r3kd0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep6_r3kcZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.64876606 UTC

[section ""data" . GHC.Event.PSQ.$tc'E1_closure" {
     GHC.Event.PSQ.$tc'E1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep7_r3kd0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.650711784 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'E3_bytes" {
     GHC.Event.PSQ.$tc'E3_bytes:
         I8[] [39,69]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.652423162 UTC

[section ""data" . GHC.Event.PSQ.$tc'E2_closure" {
     GHC.Event.PSQ.$tc'E2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'E3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.654229076 UTC

[section ""data" . GHC.Event.PSQ.$tc'E_closure" {
     GHC.Event.PSQ.$tc'E_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'E2_closure+1;
         const GHC.Event.PSQ.$tc'E1_closure+4;
         const 11813029942800942247;
         const 17450377919573390885;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.6559695 UTC

[section ""cstring" . GHC.Event.PSQ.$tcIntPSQ2_bytes" {
     GHC.Event.PSQ.$tcIntPSQ2_bytes:
         I8[] [73,110,116,80,83,81]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.658485426 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ1_closure" {
     GHC.Event.PSQ.$tcIntPSQ1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcIntPSQ2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.660315898 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ_closure" {
     GHC.Event.PSQ.$tcIntPSQ_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcIntPSQ1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15246681906271547396;
         const 11594704564387731780;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.66211459 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil1_closure" {
     GHC.Event.PSQ.$tc'Nil1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcIntPSQ_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.663789709 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Nil3_bytes" {
     GHC.Event.PSQ.$tc'Nil3_bytes:
         I8[] [39,78,105,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.6666253 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil2_closure" {
     GHC.Event.PSQ.$tc'Nil2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Nil3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.668276108 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil_closure" {
     GHC.Event.PSQ.$tc'Nil_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Nil2_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 9632868263130136899;
         const 16639248836205398404;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.670105266 UTC

[section ""data" . $krep8_r3kd1_closure" {
     $krep8_r3kd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.671774255 UTC

[section ""data" . $krep9_r3kd2_closure" {
     $krep9_r3kd2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep8_r3kd1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.673717209 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip1_closure" {
     GHC.Event.PSQ.$tc'Tip1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep9_r3kd2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.675421954 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Tip3_bytes" {
     GHC.Event.PSQ.$tc'Tip3_bytes:
         I8[] [39,84,105,112]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.677085187 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip2_closure" {
     GHC.Event.PSQ.$tc'Tip2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Tip3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.678866347 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip_closure" {
     GHC.Event.PSQ.$tc'Tip_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Tip2_closure+1;
         const GHC.Event.PSQ.$tc'Tip1_closure+4;
         const 4235936270888684142;
         const 17098834253377543597;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.680671106 UTC

[section ""data" . $krep10_r3kd3_closure" {
     $krep10_r3kd3_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.68237617 UTC

[section ""data" . $krep11_r3kd4_closure" {
     $krep11_r3kd4_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const $krep10_r3kd3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.684116681 UTC

[section ""data" . $krep12_r3kd5_closure" {
     $krep12_r3kd5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3kcT_closure+1;
         const $krep11_r3kd4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.685952742 UTC

[section ""data" . $krep13_r3kd6_closure" {
     $krep13_r3kd6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep12_r3kd5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.687722923 UTC

[section ""data" . $krep14_r3kd7_closure" {
     $krep14_r3kd7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep13_r3kd6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.690154572 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin1_closure" {
     GHC.Event.PSQ.$tc'Bin1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep14_r3kd7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.691806761 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Bin3_bytes" {
     GHC.Event.PSQ.$tc'Bin3_bytes:
         I8[] [39,66,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.6938303 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin2_closure" {
     GHC.Event.PSQ.$tc'Bin2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Bin3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.695516544 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin_closure" {
     GHC.Event.PSQ.$tc'Bin_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Bin2_closure+1;
         const GHC.Event.PSQ.$tc'Bin1_closure+4;
         const 8835322380894053498;
         const 4329944662539077627;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.701045148 UTC

[section ""data" . GHC.Event.PSQ.lookup_closure" {
     GHC.Event.PSQ.lookup_closure:
         const GHC.Event.PSQ.lookup_info;
 },
 GHC.Event.PSQ.lookup_entry() //  [R2, R3]
         { []
         }
     {offset
       c3mJU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3mJV; else goto c3mJW;
       c3mJV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.lookup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mJW: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3mKk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.lookup_info" {
     GHC.Event.PSQ.lookup_info:
         const GHC.Event.PSQ.lookup_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3mKk() //  []
         { []
         }
     {offset
       c3mKk: // global
           I64[Sp - 8] = block_c3mKm_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mLQ; else goto c3mKo;
       u3mLQ: // global
           call _c3mKm(R1) args: 0, res: 0, upd: 0;
       c3mKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mKm() //  [R1]
         { []
         }
     {offset
       c3mKm: // global
           _c3mLH::P64 = R1 & 7;
           if (_c3mLH::P64 < 3) goto u3mLI; else goto c3mLG;
       u3mLI: // global
           _s3mix::P64 = P64[Sp + 8];
           if (_c3mLH::P64 < 2) goto c3mKv; else goto c3mLC;
       c3mKv: // global
           I64[Sp - 40] = block_c3mKs_info;
           _s3miN::P64 = P64[R1 + 7];
           _s3miP::P64 = P64[R1 + 15];
           _s3miQ::P64 = P64[R1 + 23];
           _s3miL::I64 = I64[R1 + 31];
           _s3miM::I64 = I64[R1 + 39];
           _s3miO::I64 = I64[R1 + 47];
           R1 = _s3mix::P64;
           P64[Sp - 32] = _s3miN::P64;
           I64[Sp - 24] = _s3miO::I64;
           P64[Sp - 16] = _s3miP::P64;
           P64[Sp - 8] = _s3miQ::P64;
           I64[Sp] = _s3miM::I64;
           I64[Sp + 16] = _s3miL::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3mLR; else goto c3mKw;
       u3mLR: // global
           call _c3mKs(R1) args: 0, res: 0, upd: 0;
       c3mKw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mLC: // global
           I64[Sp - 8] = block_c3mK0_info;
           _s3miC::P64 = P64[R1 + 6];
           _s3miB::I64 = I64[R1 + 22];
           _s3miA::I64 = I64[R1 + 14];
           R1 = _s3mix::P64;
           P64[Sp] = _s3miC::P64;
           I64[Sp + 8] = _s3miB::I64;
           I64[Sp + 16] = _s3miA::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mLS; else goto c3mK2;
       u3mLS: // global
           call _c3mK0(R1) args: 0, res: 0, upd: 0;
       c3mK2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mLG: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mKm_info" {
     block_c3mKm_info:
         const _c3mKm;
         const 130;
         const 30;
 },
 _c3mKs() //  [R1]
         { []
         }
     {offset
       c3mKs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mKC; else goto c3mKB;
       c3mKC: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mKB: // global
           _s3miL::I64 = I64[Sp + 56];
           _s3miS::I64 = I64[R1 + 7];
           _s3miT::I64 = I64[Sp + 16];
           _s3miU::I64 = (_s3miT::I64 + -1) ^ _s3miT::I64 ^ 18446744073709551615;
           if (_s3miS::I64 & _s3miU::I64 == _s3miL::I64 & _s3miU::I64) goto c3mLx; else goto u3mLK;
       c3mLx: // global
           if (_s3miS::I64 == _s3miL::I64) goto c3mLv; else goto c3mLq;
       c3mLv: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 40];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mLq: // global
           Hp = Hp - 56;
           if (_s3miS::I64 & _s3miT::I64 == 0) goto c3mLl; else goto c3mLf;
       c3mLl: // global
           P64[Sp + 56] = P64[Sp + 24];
           Sp = Sp + 48;
           goto u3mLV;
       c3mLf: // global
           P64[Sp + 56] = P64[Sp + 32];
           Sp = Sp + 48;
           goto u3mLV;
       u3mLV: // global
           call _c3mKk() args: 0, res: 0, upd: 0;
       u3mLK: // global
           Sp = Sp + 64;
           call _c3mKc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3mKs_info" {
     block_c3mKs_info:
         const _c3mKs;
         const 5255;
         const 30;
 },
 _c3mK0() //  [R1]
         { []
         }
     {offset
       c3mK0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mK8; else goto c3mK7;
       c3mK8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mK7: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3mKi; else goto u3mLN;
       c3mKi: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3mLN: // global
           Sp = Sp + 32;
           call _c3mKc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3mK0_info" {
     block_c3mK0_info:
         const _c3mK0;
         const 387;
         const 30;
 },
 _c3mKc() //  []
         { []
         }
     {offset
       c3mKc: // global
           Hp = Hp - 56;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.721042514 UTC

[section ""data" . GHC.Event.PSQ.delete_closure" {
     GHC.Event.PSQ.delete_closure:
         const GHC.Event.PSQ.delete_info;
 },
 go1_s3mjc_entry() //  [R1, R2]
         { []
         }
     {offset
       c3mN8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3mN9; else goto c3mNa;
       c3mN9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mNa: // global
           I64[Sp - 24] = block_c3mN0_info;
           _s3mjc::P64 = R1;
           _s3mja::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3mja::P64;
           P64[Sp - 8] = _s3mjc::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mPJ; else goto c3mN1;
       u3mPJ: // global
           call _c3mN0(R1) args: 0, res: 0, upd: 0;
       c3mN1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s3mjc_info" {
     go1_s3mjc_info:
         const go1_s3mjc_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3mN0() //  [R1]
         { []
         }
     {offset
       c3mN0: // global
           _c3mN7::P64 = R1 & 7;
           if (_c3mN7::P64 < 3) goto u3mPD; else goto u3mPE;
       u3mPD: // global
           _s3mja::P64 = P64[Sp + 8];
           if (_c3mN7::P64 < 2) goto c3mN4; else goto c3mN5;
       c3mN4: // global
           I64[Sp - 48] = block_c3mNd_info;
           _s3mje::P64 = R1;
           _s3mjh::P64 = P64[R1 + 7];
           _s3mjj::P64 = P64[R1 + 15];
           _s3mjk::P64 = P64[R1 + 23];
           _s3mjf::I64 = I64[R1 + 31];
           _s3mjg::I64 = I64[R1 + 39];
           _s3mji::I64 = I64[R1 + 47];
           R1 = _s3mja::P64;
           I64[Sp - 40] = _s3mjg::I64;
           P64[Sp - 32] = _s3mjh::P64;
           I64[Sp - 24] = _s3mji::I64;
           P64[Sp - 16] = _s3mjj::P64;
           P64[Sp - 8] = _s3mjk::P64;
           I64[Sp] = _s3mjf::I64;
           P64[Sp + 8] = _s3mje::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3mPG; else goto c3mNf;
       u3mPG: // global
           call _c3mNd(R1) args: 0, res: 0, upd: 0;
       c3mNf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mN5: // global
           I64[Sp] = block_c3mPk_info;
           _s3mje::P64 = R1;
           _s3mjE::I64 = I64[R1 + 14];
           R1 = _s3mja::P64;
           I64[Sp + 8] = _s3mjE::I64;
           P64[Sp + 16] = _s3mje::P64;
           if (R1 & 7 != 0) goto u3mPH; else goto c3mPm;
       u3mPH: // global
           call _c3mPk(R1) args: 0, res: 0, upd: 0;
       c3mPm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3mPE: // global
           Sp = Sp + 24;
           call _c3mN6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3mN0_info" {
     block_c3mN0_info:
         const _c3mN0;
         const 2;
         const 30;
 },
 _c3mNd() //  [R1]
         { []
         }
     {offset
       c3mNd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mNl; else goto c3mNk;
       c3mNl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mNk: // global
           _s3mjf::I64 = I64[Sp + 48];
           _s3mji::I64 = I64[Sp + 24];
           _s3mjm::I64 = I64[R1 + 7];
           _s3mjo::I64 = (_s3mji::I64 + -1) ^ _s3mji::I64 ^ 18446744073709551615;
           if (_s3mjm::I64 & _s3mjo::I64 == _s3mjf::I64 & _s3mjo::I64) goto c3mPg; else goto c3mPh;
       c3mPg: // global
           _s3mjj::P64 = P64[Sp + 32];
           _s3mjk::P64 = P64[Sp + 40];
           if (_s3mjm::I64 == _s3mjf::I64) goto c3mPe; else goto c3mPb;
       c3mPe: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3mji::I64;
           R4 = _s3mjk::P64;
           R3 = _s3mjj::P64;
           R2 = Hp - 7;
           Sp = Sp + 72;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3mPb: // global
           Hp = Hp - 16;
           _s3mjc::P64 = P64[Sp + 64];
           if (_s3mjm::I64 & _s3mji::I64 == 0) goto c3mOD; else goto c3mO1;
       c3mOD: // global
           I64[Sp] = block_c3mOC_info;
           R2 = _s3mjj::P64;
           R1 = _s3mjc::P64;
           call go1_s3mjc_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3mO1: // global
           I64[Sp] = block_c3mNZ_info;
           R2 = _s3mjk::P64;
           R1 = _s3mjc::P64;
           call go1_s3mjc_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3mPh: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 72;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mNd_info" {
     block_c3mNd_info:
         const _c3mNd;
         const 2376;
         const 30;
 },
 _c3mOC() //  [R1]
         { []
         }
     {offset
       c3mOC: // global
           _s3mjk::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3mOS; else goto c3mOK;
       c3mOS: // global
           I64[Sp] = block_c3mOQ_info;
           R1 = _s3mjk::P64;
           if (R1 & 7 != 0) goto u3mPL; else goto c3mOT;
       u3mPL: // global
           call _c3mOQ(R1) args: 0, res: 0, upd: 0;
       c3mOT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mOK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mON; else goto c3mOM;
       c3mON: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mOM: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3mjk::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mOC_info" {
     block_c3mOC_info:
         const _c3mOC;
         const 15176;
         const 30;
 },
 _c3mOQ() //  [R1]
         { []
         }
     {offset
       c3mOQ: // global
           _s3mjf::I64 = I64[Sp + 48];
           _s3mjg::I64 = I64[Sp + 8];
           _s3mjh::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3mP6; else goto c3mOZ;
       c3mP6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mP9; else goto c3mP8;
       c3mP9: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mP8: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3mjh::P64;
           I64[Hp - 8] = _s3mjf::I64;
           I64[Hp] = _s3mjg::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mOZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mP2; else goto c3mP1;
       c3mP2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mP1: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3mjh::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3mjf::I64;
           I64[Hp - 8] = _s3mjg::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mOQ_info" {
     block_c3mOQ_info:
         const _c3mOQ;
         const 16200;
         const 30;
 },
 _c3mNZ() //  [R1]
         { []
         }
     {offset
       c3mNZ: // global
           _s3mjj::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3mOg; else goto c3mO8;
       c3mOg: // global
           I64[Sp] = block_c3mOe_info;
           R1 = _s3mjj::P64;
           if (R1 & 7 != 0) goto u3mPK; else goto c3mOh;
       u3mPK: // global
           call _c3mOe(R1) args: 0, res: 0, upd: 0;
       c3mOh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mO8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mOb; else goto c3mOa;
       c3mOb: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mOa: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3mjj::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mNZ_info" {
     block_c3mNZ_info:
         const _c3mNZ;
         const 15688;
         const 30;
 },
 _c3mOe() //  [R1]
         { []
         }
     {offset
       c3mOe: // global
           _s3mjf::I64 = I64[Sp + 48];
           _s3mjg::I64 = I64[Sp + 8];
           _s3mjh::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3mOu; else goto c3mOn;
       c3mOu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mOx; else goto c3mOw;
       c3mOx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mOw: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3mjh::P64;
           I64[Hp - 8] = _s3mjf::I64;
           I64[Hp] = _s3mjg::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mOn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mOq; else goto c3mOp;
       c3mOq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mOp: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3mjh::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3mjf::I64;
           I64[Hp - 8] = _s3mjg::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mOe_info" {
     block_c3mOe_info:
         const _c3mOe;
         const 16200;
         const 30;
 },
 _c3mPk() //  [R1]
         { []
         }
     {offset
       c3mPk: // global
           if (I64[R1 + 7] == I64[Sp + 8]) goto u3mPF; else goto c3mPu;
       u3mPF: // global
           Sp = Sp + 24;
           call _c3mN6() args: 0, res: 0, upd: 0;
       c3mPu: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mPk_info" {
     block_c3mPk_info:
         const _c3mPk;
         const 66;
         const 30;
 },
 _c3mN6() //  []
         { []
         }
     {offset
       c3mN6: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.delete_entry() //  [R2, R3]
         { []
         }
     {offset
       c3mPN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mPR; else goto c3mPQ;
       c3mPR: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.delete_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mPQ: // global
           I64[Hp - 8] = go1_s3mjc_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go1_s3mjc_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.delete_info" {
     GHC.Event.PSQ.delete_info:
         const GHC.Event.PSQ.delete_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.751858286 UTC

[section ""data" . GHC.Event.PSQ.deleteView_closure" {
     GHC.Event.PSQ.deleteView_closure:
         const GHC.Event.PSQ.deleteView_info;
 },
 delFrom_s3mjM_entry() //  [R1, R2]
         { []
         }
     {offset
       c3mRE: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3mRF; else goto c3mRG;
       c3mRF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mRG: // global
           I64[Sp - 24] = block_c3mRw_info;
           _s3mjM::P64 = R1;
           _s3mjK::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3mjK::P64;
           P64[Sp - 8] = _s3mjM::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mUB; else goto c3mRx;
       u3mUB: // global
           call _c3mRw(R1) args: 0, res: 0, upd: 0;
       c3mRx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . delFrom_s3mjM_info" {
     delFrom_s3mjM_info:
         const delFrom_s3mjM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c3mRw() //  [R1]
         { []
         }
     {offset
       c3mRw: // global
           _c3mRD::P64 = R1 & 7;
           if (_c3mRD::P64 < 3) goto u3mUy; else goto c3mRC;
       u3mUy: // global
           _s3mjK::P64 = P64[Sp + 8];
           if (_c3mRD::P64 < 2) goto c3mRA; else goto c3mRB;
       c3mRA: // global
           I64[Sp - 48] = block_c3mRJ_info;
           _s3mjO::P64 = R1;
           _s3mjR::P64 = P64[R1 + 7];
           _s3mjT::P64 = P64[R1 + 15];
           _s3mjU::P64 = P64[R1 + 23];
           _s3mjP::I64 = I64[R1 + 31];
           _s3mjQ::I64 = I64[R1 + 39];
           _s3mjS::I64 = I64[R1 + 47];
           R1 = _s3mjK::P64;
           I64[Sp - 40] = _s3mjQ::I64;
           P64[Sp - 32] = _s3mjR::P64;
           I64[Sp - 24] = _s3mjS::I64;
           P64[Sp - 16] = _s3mjT::P64;
           P64[Sp - 8] = _s3mjU::P64;
           I64[Sp] = _s3mjP::I64;
           P64[Sp + 8] = _s3mjO::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3mUz; else goto c3mRL;
       u3mUz: // global
           call _c3mRJ(R1) args: 0, res: 0, upd: 0;
       c3mRL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mRB: // global
           I64[Sp - 16] = block_c3mU8_info;
           _s3mjO::P64 = R1;
           _s3mkw::P64 = P64[R1 + 6];
           _s3mku::I64 = I64[R1 + 14];
           _s3mkv::I64 = I64[R1 + 22];
           R1 = _s3mjK::P64;
           P64[Sp - 8] = _s3mkw::P64;
           I64[Sp] = _s3mkv::I64;
           I64[Sp + 8] = _s3mku::I64;
           P64[Sp + 16] = _s3mjO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3mUA; else goto c3mUa;
       u3mUA: // global
           call _c3mU8(R1) args: 0, res: 0, upd: 0;
       c3mUa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mRC: // global
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mRw_info" {
     block_c3mRw_info:
         const _c3mRw;
         const 2;
         const 30;
 },
 _c3mRJ() //  [R1]
         { []
         }
     {offset
       c3mRJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mRR; else goto c3mRQ;
       c3mRR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mRQ: // global
           _s3mjP::I64 = I64[Sp + 48];
           _s3mjS::I64 = I64[Sp + 24];
           _s3mjW::I64 = I64[R1 + 7];
           _s3mjY::I64 = (_s3mjS::I64 + -1) ^ _s3mjS::I64 ^ 18446744073709551615;
           if (_s3mjW::I64 & _s3mjY::I64 == _s3mjP::I64 & _s3mjY::I64) goto c3mU4; else goto c3mU5;
       c3mU4: // global
           _s3mjT::P64 = P64[Sp + 32];
           _s3mjU::P64 = P64[Sp + 40];
           if (_s3mjW::I64 == _s3mjP::I64) goto c3mTZ; else goto c3mTP;
       c3mTZ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3mjS::I64;
           I64[Sp] = block_c3mTS_info;
           R4 = _s3mjU::P64;
           R3 = _s3mjT::P64;
           R2 = Hp - 7;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c3mTP: // global
           Hp = Hp - 16;
           _s3mjM::P64 = P64[Sp + 64];
           if (_s3mjW::I64 & _s3mjS::I64 == 0) goto c3mTf; else goto c3mSz;
       c3mTf: // global
           I64[Sp] = block_c3mTc_info;
           R2 = _s3mjT::P64;
           R1 = _s3mjM::P64;
           call delFrom_s3mjM_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3mSz: // global
           I64[Sp] = block_c3mSv_info;
           R2 = _s3mjU::P64;
           R1 = _s3mjM::P64;
           call delFrom_s3mjM_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3mU5: // global
           Hp = Hp - 16;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 56];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mRJ_info" {
     block_c3mRJ_info:
         const _c3mRJ;
         const 2376;
         const 30;
 },
 _c3mTS() //  [R1]
         { []
         }
     {offset
       c3mTS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mU2; else goto c3mU1;
       c3mU2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mU1: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = R1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mTS_info" {
     block_c3mTS_info:
         const _c3mTS;
         const 16200;
         const 30;
 },
 _c3mTc() //  [R1, R2]
         { []
         }
     {offset
       c3mTc: // global
           I64[Sp] = block_c3mTe_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3mUE; else goto c3mTi;
       u3mUE: // global
           call _c3mTe(R1) args: 0, res: 0, upd: 0;
       c3mTi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mTc_info" {
     block_c3mTc_info:
         const _c3mTc;
         const 15176;
         const 30;
 },
 _c3mTe() //  [R1]
         { []
         }
     {offset
       c3mTe: // global
           _s3mjU::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3mTw; else goto c3mTo;
       c3mTw: // global
           I64[Sp] = block_c3mTu_info;
           R1 = _s3mjU::P64;
           if (R1 & 7 != 0) goto u3mUF; else goto c3mTx;
       u3mUF: // global
           call _c3mTu(R1) args: 0, res: 0, upd: 0;
       c3mTx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mTo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mTr; else goto c3mTq;
       c3mTr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mTq: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3mjU::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mTe_info" {
     block_c3mTe_info:
         const _c3mTe;
         const 6984;
         const 30;
 },
 _c3mTu() //  [R1]
         { []
         }
     {offset
       c3mTu: // global
           _s3mjP::I64 = I64[Sp + 48];
           _s3mjQ::I64 = I64[Sp + 8];
           _s3mjR::P64 = P64[Sp + 16];
           _s3mkj::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3mTK; else goto c3mTD;
       c3mTK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mTN; else goto c3mTM;
       c3mTN: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mTM: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3mjR::P64;
           I64[Hp - 8] = _s3mjP::I64;
           I64[Hp] = _s3mjQ::I64;
           R2 = _s3mkj::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3mTD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mTG; else goto c3mTF;
       c3mTG: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mTF: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3mjR::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3mjP::I64;
           I64[Hp - 8] = _s3mjQ::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3mkj::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mTu_info" {
     block_c3mTu_info:
         const _c3mTu;
         const 8008;
         const 30;
 },
 _c3mSv() //  [R1, R2]
         { []
         }
     {offset
       c3mSv: // global
           I64[Sp] = block_c3mSx_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3mUC; else goto c3mSC;
       u3mUC: // global
           call _c3mSx(R1) args: 0, res: 0, upd: 0;
       c3mSC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mSv_info" {
     block_c3mSv_info:
         const _c3mSv;
         const 15688;
         const 30;
 },
 _c3mSx() //  [R1]
         { []
         }
     {offset
       c3mSx: // global
           _s3mjT::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3mSQ; else goto c3mSI;
       c3mSQ: // global
           I64[Sp] = block_c3mSO_info;
           R1 = _s3mjT::P64;
           if (R1 & 7 != 0) goto u3mUD; else goto c3mSR;
       u3mUD: // global
           call _c3mSO(R1) args: 0, res: 0, upd: 0;
       c3mSR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mSI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mSL; else goto c3mSK;
       c3mSL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mSK: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3mjT::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mSx_info" {
     block_c3mSx_info:
         const _c3mSx;
         const 7496;
         const 30;
 },
 _c3mSO() //  [R1]
         { []
         }
     {offset
       c3mSO: // global
           _s3mjP::I64 = I64[Sp + 48];
           _s3mjQ::I64 = I64[Sp + 8];
           _s3mjR::P64 = P64[Sp + 16];
           _s3mkb::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3mT4; else goto c3mSX;
       c3mT4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mT7; else goto c3mT6;
       c3mT7: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mT6: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3mjR::P64;
           I64[Hp - 8] = _s3mjP::I64;
           I64[Hp] = _s3mjQ::I64;
           R2 = _s3mkb::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3mSX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mT0; else goto c3mSZ;
       c3mT0: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mSZ: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3mjR::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3mjP::I64;
           I64[Hp - 8] = _s3mjQ::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3mkb::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mSO_info" {
     block_c3mSO_info:
         const _c3mSO;
         const 8008;
         const 30;
 },
 _c3mU8() //  [R1]
         { []
         }
     {offset
       c3mU8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mUg; else goto c3mUf;
       c3mUg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mUf: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3mUq; else goto c3mUk;
       c3mUq: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3mUk: // global
           Hp = Hp - 56;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mU8_info" {
     block_c3mU8_info:
         const _c3mU8;
         const 388;
         const 30;
 },
 GHC.Event.PSQ.deleteView_entry() //  [R2, R3]
         { []
         }
     {offset
       c3mUP: // global
           _s3mjL::P64 = R3;
           _s3mjK::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3mUQ; else goto c3mUR;
       c3mUR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mUT; else goto c3mUS;
       c3mUT: // global
           HpAlloc = 16;
           goto c3mUQ;
       c3mUQ: // global
           R3 = _s3mjL::P64;
           R2 = _s3mjK::P64;
           R1 = GHC.Event.PSQ.deleteView_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mUS: // global
           I64[Hp - 8] = delFrom_s3mjM_info;
           P64[Hp] = _s3mjK::P64;
           I64[Sp - 8] = block_c3mUG_info;
           R2 = _s3mjL::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call delFrom_s3mjM_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.deleteView_info" {
     GHC.Event.PSQ.deleteView_info:
         const GHC.Event.PSQ.deleteView_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c3mUG() //  [R1, R2]
         { []
         }
     {offset
       c3mUG: // global
           I64[Sp - 8] = block_c3mUI_info;
           _s3mkE::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3mkE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mVb; else goto c3mUJ;
       u3mVb: // global
           call _c3mUI(R1) args: 0, res: 0, upd: 0;
       c3mUJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mUG_info" {
     block_c3mUG_info:
         const _c3mUG;
         const 0;
         const 30;
 },
 _c3mUI() //  [R1]
         { []
         }
     {offset
       c3mUI: // global
           if (R1 & 7 == 1) goto c3mUM; else goto c3mUN;
       c3mUM: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mUN: // global
           I64[Sp] = block_c3mV0_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3mVc; else goto c3mV1;
       u3mVc: // global
           call _c3mV0(R1) args: 0, res: 0, upd: 0;
       c3mV1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mUI_info" {
     block_c3mUI_info:
         const _c3mUI;
         const 1;
         const 30;
 },
 _c3mV0() //  [R1]
         { []
         }
     {offset
       c3mV0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3mVa; else goto c3mV9;
       c3mVa: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mV9: // global
           _s3mkJ::P64 = P64[R1 + 7];
           _s3mkK::P64 = P64[R1 + 15];
           I64[Hp - 40] = (,,)_con_info;
           P64[Hp - 32] = _s3mkJ::P64;
           P64[Hp - 24] = _s3mkK::P64;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mV0_info" {
     block_c3mV0_info:
         const _c3mV0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.785806982 UTC

[section ""data" . GHC.Event.PSQ.$wsize_closure" {
     GHC.Event.PSQ.$wsize_closure:
         const GHC.Event.PSQ.$wsize_info;
 },
 GHC.Event.PSQ.$wsize_entry() //  [R2]
         { []
         }
     {offset
       c3mXL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3mXM; else goto c3mXN;
       c3mXM: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.$wsize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mXN: // global
           I64[Sp - 8] = block_c3mXD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mYc; else goto c3mXE;
       u3mYc: // global
           call _c3mXD(R1) args: 0, res: 0, upd: 0;
       c3mXE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$wsize_info" {
     GHC.Event.PSQ.$wsize_info:
         const GHC.Event.PSQ.$wsize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3mXD() //  [R1]
         { []
         }
     {offset
       c3mXD: // global
           _c3mXK::P64 = R1 & 7;
           if (_c3mXK::P64 < 3) goto u3mYb; else goto c3mXJ;
       u3mYb: // global
           if (_c3mXK::P64 < 2) goto c3mXH; else goto c3mXI;
       c3mXH: // global
           I64[Sp - 8] = block_c3mXQ_info;
           R2 = P64[R1 + 15];
           P64[Sp] = P64[R1 + 23];
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
       c3mXI: // global
           R1 = 1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mXJ: // global
           R1 = 0;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mXD_info" {
     block_c3mXD_info:
         const _c3mXD;
         const 0;
         const 30;
 },
 _c3mXQ() //  [R1]
         { []
         }
     {offset
       c3mXQ: // global
           I64[Sp] = block_c3mXU_info;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = R1;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mXQ_info" {
     block_c3mXQ_info:
         const _c3mXQ;
         const 1;
         const 30;
 },
 _c3mXU() //  [R1]
         { []
         }
     {offset
       c3mXU: // global
           R1 = I64[Sp + 8] + (R1 + 1);
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mXU_info" {
     block_c3mXU_info:
         const _c3mXU;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.799919323 UTC

[section ""data" . GHC.Event.PSQ.size_closure" {
     GHC.Event.PSQ.size_closure:
         const GHC.Event.PSQ.size_info;
 },
 GHC.Event.PSQ.size_entry() //  [R2]
         { []
         }
     {offset
       c3mYI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mYM; else goto c3mYN;
       c3mYM: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.size_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mYN: // global
           I64[Sp - 8] = block_c3mYG_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.size_info" {
     GHC.Event.PSQ.size_info:
         const GHC.Event.PSQ.size_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3mYG() //  [R1]
         { []
         }
     {offset
       c3mYG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mYQ; else goto c3mYP;
       c3mYQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3mYP: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mYG_info" {
     block_c3mYG_info:
         const _c3mYG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.832045179 UTC

[section ""data" . GHC.Event.PSQ.$wunsafeInsertNew_closure" {
     GHC.Event.PSQ.$wunsafeInsertNew_closure:
         const GHC.Event.PSQ.$wunsafeInsertNew_info;
 },
 GHC.Event.PSQ.$wunsafeInsertNew_slow() //  [R1]
         { []
         }
     {offset
       c3mZ3: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.$wunsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3mZf: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3mZg; else goto c3mZh;
       c3mZg: // global
           R1 = GHC.Event.PSQ.$wunsafeInsertNew_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3mZh: // global
           I64[Sp - 32] = block_c3mZ7_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3n6L; else goto c3mZ8;
       u3n6L: // global
           call _c3mZ7(R1) args: 0, res: 0, upd: 0;
       c3mZ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.$wunsafeInsertNew_info" {
     GHC.Event.PSQ.$wunsafeInsertNew_info:
         const GHC.Event.PSQ.$wunsafeInsertNew_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 196;
         const GHC.Event.PSQ.$wunsafeInsertNew_slow;
 },
 _c3mZ7() //  [R1]
         { []
         }
     {offset
       c3mZ7: // global
           _s3ml4::P64 = P64[Sp + 24];
           _c3mZe::P64 = R1 & 7;
           if (_c3mZe::P64 < 3) goto u3n6H; else goto c3mZd;
       u3n6H: // global
           _s3ml2::I64 = I64[Sp + 8];
           _s3ml3::I64 = I64[Sp + 16];
           if (_c3mZe::P64 < 2) goto c3mZb; else goto c3mZc;
       c3mZb: // global
           _s3ml9::P64 = P64[R1 + 7];
           _s3mlb::P64 = P64[R1 + 15];
           _s3mlc::P64 = P64[R1 + 23];
           _s3ml7::I64 = I64[R1 + 31];
           _s3ml8::I64 = I64[R1 + 39];
           _s3mla::I64 = I64[R1 + 47];
           _s3mle::I64 = (_s3mla::I64 + -1) ^ _s3mla::I64 ^ 18446744073709551615;
           if (_s3ml2::I64 & _s3mle::I64 == _s3ml7::I64 & _s3mle::I64) goto c3n1s; else goto c3n47;
       c3n1s: // global
           if (_s3ml3::I64 == _s3ml8::I64) goto c3n1q; else goto c3n1j;
       c3n1q: // global
           _s3mld::I64 = _s3mla::I64;
           if (%MO_S_Ge_W64(_s3ml2::I64,
                            _s3ml7::I64)) goto s3mlm; else goto s3mlr;
       c3n1j: // global
           _s3mld::I64 = _s3mla::I64;
           if (_s3ml3::I64 > _s3ml8::I64) goto s3mlm; else goto s3mlr;
       s3mlm: // global
           if (_s3ml2::I64 & _s3mld::I64 == 0) goto c3n0l; else goto c3n07;
       c3n0l: // global
           I64[Sp - 16] = block_c3n0g_info;
           R5 = _s3mlb::P64;
           R4 = _s3ml4::P64;
           R3 = _s3ml3::I64;
           R2 = _s3ml2::I64;
           P64[Sp - 8] = _s3mlc::P64;
           I64[Sp] = _s3mla::I64;
           P64[Sp + 8] = _s3ml9::P64;
           I64[Sp + 16] = _s3ml8::I64;
           I64[Sp + 24] = _s3ml7::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       c3n07: // global
           I64[Sp - 16] = block_c3n01_info;
           R5 = _s3mlc::P64;
           R4 = _s3ml4::P64;
           R3 = _s3ml3::I64;
           R2 = _s3ml2::I64;
           P64[Sp - 8] = _s3mlb::P64;
           I64[Sp] = _s3mla::I64;
           P64[Sp + 8] = _s3ml9::P64;
           I64[Sp + 16] = _s3ml8::I64;
           I64[Sp + 24] = _s3ml7::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       s3mlr: // global
           if (_s3ml7::I64 & _s3mld::I64 == 0) goto c3n14; else goto c3n0N;
       c3n14: // global
           I64[Sp - 40] = block_c3n0X_info;
           R1 = _s3ml4::P64;
           P64[Sp - 32] = _s3ml9::P64;
           I64[Sp - 24] = _s3mla::I64;
           P64[Sp - 16] = _s3mlb::P64;
           P64[Sp - 8] = _s3mlc::P64;
           I64[Sp] = _s3ml8::I64;
           I64[Sp + 24] = _s3ml7::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3n0N: // global
           I64[Sp - 40] = block_c3n0F_info;
           R1 = _s3ml4::P64;
           P64[Sp - 32] = _s3ml9::P64;
           I64[Sp - 24] = _s3mla::I64;
           P64[Sp - 16] = _s3mlb::P64;
           P64[Sp - 8] = _s3mlc::P64;
           I64[Sp] = _s3ml8::I64;
           I64[Sp + 24] = _s3ml7::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3n47: // global
           if (_s3ml3::I64 == _s3ml8::I64) goto c3n46; else goto c3n3Z;
       c3n46: // global
           _s3ml6::P64 = R1;
           if (%MO_S_Ge_W64(_s3ml2::I64,
                            _s3ml7::I64)) goto s3mlB; else goto s3mlV;
       c3n3Z: // global
           _s3ml6::P64 = R1;
           if (_s3ml3::I64 > _s3ml8::I64) goto s3mlB; else goto s3mlV;
       s3mlB: // global
           (_c3n1J::I64) = call MO_Clz W64(_s3ml7::I64 ^ _s3ml2::I64);
           _s3mlC::I64 = 1 << 63 - _c3n1J::I64;
           _s3mlM::I64 = _s3mlC::I64 & _s3ml2::I64;
           if (_s3mlM::I64 != 0) goto u3n6I; else goto c3n2G;
       u3n6I: // global
           I64[Sp - 56] = _s3ml8::I64;
           P64[Sp - 48] = _s3ml9::P64;
           I64[Sp - 40] = _s3mla::I64;
           P64[Sp - 32] = _s3mlb::P64;
           P64[Sp - 24] = _s3mlc::P64;
           I64[Sp - 16] = _s3mlC::I64;
           I64[Sp - 8] = _s3mlM::I64;
           I64[Sp] = _s3ml7::I64;
           Sp = Sp - 56;
           call _c3n29() args: 0, res: 0, upd: 0;
       c3n2G: // global
           I64[Sp - 48] = block_c3n2x_info;
           R1 = _s3ml4::P64;
           P64[Sp - 40] = _s3ml9::P64;
           I64[Sp - 32] = _s3mla::I64;
           P64[Sp - 24] = _s3mlb::P64;
           P64[Sp - 16] = _s3mlc::P64;
           I64[Sp - 8] = _s3mlC::I64;
           I64[Sp] = _s3ml8::I64;
           I64[Sp + 24] = _s3ml7::I64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3mlV: // global
           (_c3n33::I64) = call MO_Clz W64(_s3ml2::I64 ^ _s3ml7::I64);
           _s3mlW::I64 = 1 << 63 - _c3n33::I64;
           if (_s3mlW::I64 & _s3ml7::I64 == 0) goto c3n3L; else goto c3n3z;
       c3n3L: // global
           I64[Sp - 8] = block_c3n3I_info;
           R1 = _s3ml4::P64;
           I64[Sp] = _s3mlW::I64;
           P64[Sp + 24] = _s3ml6::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3n3z: // global
           I64[Sp - 8] = block_c3n3v_info;
           R1 = _s3ml4::P64;
           I64[Sp] = _s3mlW::I64;
           P64[Sp + 24] = _s3ml6::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3mZc: // global
           _s3mme::P64 = P64[R1 + 6];
           _s3mmc::I64 = I64[R1 + 14];
           _s3mmd::I64 = I64[R1 + 22];
           if (_s3ml3::I64 == _s3mmd::I64) goto c3n6x; else goto c3n6q;
       c3n6x: // global
           _s3ml6::P64 = R1;
           if (%MO_S_Ge_W64(_s3ml2::I64,
                            _s3mmc::I64)) goto s3mmf; else goto s3mmv;
       c3n6q: // global
           _s3ml6::P64 = R1;
           if (_s3ml3::I64 > _s3mmd::I64) goto s3mmf; else goto s3mmv;
       s3mmf: // global
           (_c3n4q::I64) = call MO_Clz W64(_s3mmc::I64 ^ _s3ml2::I64);
           _s3mmg::I64 = 1 << 63 - _c3n4q::I64;
           if (_s3mmg::I64 & _s3ml2::I64 == 0) goto c3n5a; else goto c3n4X;
       c3n5a: // global
           I64[Sp - 24] = block_c3n56_info;
           R1 = _s3ml4::P64;
           P64[Sp - 16] = _s3mme::P64;
           I64[Sp - 8] = _s3mmg::I64;
           I64[Sp] = _s3mmd::I64;
           I64[Sp + 24] = _s3mmc::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3n4X: // global
           I64[Sp - 24] = block_c3n4S_info;
           R1 = _s3ml4::P64;
           P64[Sp - 16] = _s3mme::P64;
           I64[Sp - 8] = _s3mmg::I64;
           I64[Sp] = _s3mmd::I64;
           I64[Sp + 24] = _s3mmc::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3mmv: // global
           (_c3n5u::I64) = call MO_Clz W64(_s3ml2::I64 ^ _s3mmc::I64);
           _s3mmw::I64 = 1 << 63 - _c3n5u::I64;
           if (_s3mmw::I64 & _s3mmc::I64 == 0) goto c3n6c; else goto c3n60;
       c3n6c: // global
           I64[Sp - 8] = block_c3n69_info;
           R1 = _s3ml4::P64;
           I64[Sp] = _s3mmw::I64;
           P64[Sp + 24] = _s3ml6::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3n60: // global
           I64[Sp - 8] = block_c3n5W_info;
           R1 = _s3ml4::P64;
           I64[Sp] = _s3mmw::I64;
           P64[Sp + 24] = _s3ml6::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3mZd: // global
           I64[Sp] = block_c3n6A_info;
           R1 = _s3ml4::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3mZ7_info" {
     block_c3mZ7_info:
         const _c3mZ7;
         const 195;
         const 30;
 },
 _c3n0g() //  [R1]
         { []
         }
     {offset
       c3n0g: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n0p; else goto c3n0o;
       c3n0p: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n0o: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n0g_info" {
     block_c3n0g_info:
         const _c3n0g;
         const 1669;
         const 30;
 },
 _c3n01() //  [R1]
         { []
         }
     {offset
       c3n01: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n0b; else goto c3n0a;
       c3n0b: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n0a: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n01_info" {
     block_c3n01_info:
         const _c3n01;
         const 1669;
         const 30;
 },
 _c3n0X() //  [R1]
         { []
         }
     {offset
       c3n0X: // global
           _s3ml9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3n0Z_info;
           R5 = P64[Sp + 24];
           R4 = _s3ml9::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n0X_info" {
     block_c3n0X_info:
         const _c3n0X;
         const 15496;
         const 30;
 },
 _c3n0Z() //  [R1]
         { []
         }
     {offset
       c3n0Z: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n19; else goto c3n18;
       c3n19: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n18: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n0Z_info" {
     block_c3n0Z_info:
         const _c3n0Z;
         const 3783;
         const 30;
 },
 _c3n0F() //  [R1]
         { []
         }
     {offset
       c3n0F: // global
           _s3ml9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3n0H_info;
           R5 = P64[Sp + 32];
           R4 = _s3ml9::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n0F_info" {
     block_c3n0F_info:
         const _c3n0F;
         const 15496;
         const 30;
 },
 _c3n0H() //  [R1]
         { []
         }
     {offset
       c3n0H: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n0S; else goto c3n0R;
       c3n0S: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n0R: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n0H_info" {
     block_c3n0H_info:
         const _c3n0H;
         const 3911;
         const 30;
 },
 _c3n29() //  []
         { []
         }
     {offset
       c3n29: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3n2o; else goto c3n2n;
       c3n2o: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c3n28_info;
           R1 = I64[Sp + 48];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3n2n: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp - 8] = block_c3n2c_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           Sp = Sp - 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3n28() //  [R1]
         { []
         }
     {offset
       c3n28: // global
           I64[Sp + 56] = R1;
           Sp = Sp + 8;
           call _c3n29() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c3n28_info" {
     block_c3n28_info:
         const _c3n28;
         const 63819;
         const 30;
 },
 _c3n2c() //  [R1]
         { []
         }
     {offset
       c3n2c: // global
           I64[Sp] = block_c3n2g_info;
           _s3mlO::P64 = R1;
           R1 = P64[Sp + 88];
           P64[Sp + 88] = _s3mlO::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n2c_info" {
     block_c3n2c_info:
         const _c3n2c;
         const 65355;
         const 30;
 },
 _c3n2g() //  [R1]
         { []
         }
     {offset
       c3n2g: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3n2s; else goto c3n2r;
       c3n2s: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n2r: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 80];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 64];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n2g_info" {
     block_c3n2g_info:
         const _c3n2g;
         const 65355;
         const 30;
 },
 _c3n2x() //  [R1]
         { []
         }
     {offset
       c3n2x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3n2K; else goto c3n2J;
       c3n2K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n2J: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp] = block_c3n2A_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           P64[Sp + 32] = R1;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n2x_info" {
     block_c3n2x_info:
         const _c3n2x;
         const 31881;
         const 30;
 },
 _c3n2A() //  [R1]
         { []
         }
     {offset
       c3n2A: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3n2N; else goto c3n2M;
       c3n2N: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n2M: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = P64[Sp + 32];
           I64[Hp - 64] = I64[Sp + 56];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n2A_info" {
     block_c3n2A_info:
         const _c3n2A;
         const 32137;
         const 30;
 },
 _c3n3I() //  [R1]
         { []
         }
     {offset
       c3n3I: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n3P; else goto c3n3O;
       c3n3P: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n3O: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n3I_info" {
     block_c3n3I_info:
         const _c3n3I;
         const 452;
         const 30;
 },
 _c3n3v() //  [R1]
         { []
         }
     {offset
       c3n3v: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n3D; else goto c3n3C;
       c3n3D: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n3C: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n3v_info" {
     block_c3n3v_info:
         const _c3n3v;
         const 452;
         const 30;
 },
 _c3n56() //  [R1]
         { []
         }
     {offset
       c3n56: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3n5e; else goto c3n5d;
       c3n5e: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n5d: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n56_info" {
     block_c3n56_info:
         const _c3n56;
         const 3974;
         const 30;
 },
 _c3n4S() //  [R1]
         { []
         }
     {offset
       c3n4S: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3n51; else goto c3n50;
       c3n51: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n50: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n4S_info" {
     block_c3n4S_info:
         const _c3n4S;
         const 3974;
         const 30;
 },
 _c3n69() //  [R1]
         { []
         }
     {offset
       c3n69: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n6g; else goto c3n6f;
       c3n6g: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n6f: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n69_info" {
     block_c3n69_info:
         const _c3n69;
         const 452;
         const 30;
 },
 _c3n5W() //  [R1]
         { []
         }
     {offset
       c3n5W: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n64; else goto c3n63;
       c3n64: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n63: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n5W_info" {
     block_c3n5W_info:
         const _c3n5W;
         const 452;
         const 30;
 },
 _c3n6A() //  [R1]
         { []
         }
     {offset
       c3n6A: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3n6G; else goto c3n6F;
       c3n6G: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n6F: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3n6A_info" {
     block_c3n6A_info:
         const _c3n6A;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.879425286 UTC

[section ""data" . GHC.Event.PSQ.unsafeInsertNew_closure" {
     GHC.Event.PSQ.unsafeInsertNew_closure:
         const GHC.Event.PSQ.unsafeInsertNew_info;
 },
 GHC.Event.PSQ.unsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3naI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3naM; else goto c3naN;
       c3naM: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.unsafeInsertNew_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3naN: // global
           I64[Sp - 32] = block_c3naF_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3naV; else goto c3naG;
       u3naV: // global
           call _c3naF(R1) args: 0, res: 0, upd: 0;
       c3naG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.unsafeInsertNew_info" {
     GHC.Event.PSQ.unsafeInsertNew_info:
         const GHC.Event.PSQ.unsafeInsertNew_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c3naF() //  [R1]
         { []
         }
     {offset
       c3naF: // global
           I64[Sp] = block_c3naL_info;
           _s3mmS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3mmS::I64;
           if (R1 & 7 != 0) goto u3naU; else goto c3naP;
       u3naU: // global
           call _c3naL(R1) args: 0, res: 0, upd: 0;
       c3naP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3naF_info" {
     block_c3naF_info:
         const _c3naF;
         const 3;
         const 30;
 },
 _c3naL() //  [R1]
         { []
         }
     {offset
       c3naL: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3naL_info" {
     block_c3naL_info:
         const _c3naL;
         const 67;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.887157924 UTC

[section ""data" . GHC.Event.PSQ.insert_closure" {
     GHC.Event.PSQ.insert_closure:
         const GHC.Event.PSQ.insert_info;
 },
 GHC.Event.PSQ.insert_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c3nbi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3nbr; else goto c3nbs;
       c3nbr: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.insert_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3nbs: // global
           I64[Sp - 32] = block_c3nbf_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3nbA; else goto c3nbg;
       u3nbA: // global
           call _c3nbf(R1) args: 0, res: 0, upd: 0;
       c3nbg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.insert_info" {
     GHC.Event.PSQ.insert_info:
         const GHC.Event.PSQ.insert_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c3nbf() //  [R1]
         { []
         }
     {offset
       c3nbf: // global
           I64[Sp - 8] = block_c3nbl_info;
           _s3mmZ::P64 = R1;
           _s3mn0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s3mn0::I64;
           P64[Sp + 8] = _s3mmZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3nbz; else goto c3nbm;
       u3nbz: // global
           call _c3nbl(R1) args: 0, res: 0, upd: 0;
       c3nbm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3nbf_info" {
     block_c3nbf_info:
         const _c3nbf;
         const 3;
         const 30;
 },
 _c3nbl() //  [R1]
         { []
         }
     {offset
       c3nbl: // global
           I64[Sp] = block_c3nbq_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 16];
           I64[Sp + 32] = I64[R1 + 7];
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3nbl_info" {
     block_c3nbl_info:
         const _c3nbl;
         const 68;
         const 30;
 },
 _c3nbq() //  [R1]
         { []
         }
     {offset
       c3nbq: // global
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = I64[Sp + 32];
           R2 = I64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3nbq_info" {
     block_c3nbq_info:
         const _c3nbq;
         const 708;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.89746307 UTC

[section ""data" . go_r3kd8_closure" {
     go_r3kd8_closure:
         const go_r3kd8_info;
 },
 go_r3kd8_entry() //  [R2]
         { []
         }
     {offset
       c3nc6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3nc7; else goto c3nc8;
       c3nc7: // global
           R2 = R2;
           R1 = go_r3kd8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3nc8: // global
           I64[Sp - 8] = block_c3nbZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ncz; else goto c3nc0;
       u3ncz: // global
           call _c3nbZ(R1) args: 0, res: 0, upd: 0;
       c3nc0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_r3kd8_info" {
     go_r3kd8_info:
         const go_r3kd8_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c3nbZ() //  [R1]
         { []
         }
     {offset
       c3nbZ: // global
           if (R1 & 7 == 1) goto c3nc3; else goto c3nc4;
       c3nc3: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3nc4: // global
           I64[Sp - 8] = block_c3nce_info;
           _s3mn7::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3mn7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ncy; else goto c3ncf;
       u3ncy: // global
           call _c3nce(R1) args: 0, res: 0, upd: 0;
       c3ncf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3nbZ_info" {
     block_c3nbZ_info:
         const _c3nbZ;
         const 0;
         const 30;
 },
 _c3nce() //  [R1]
         { []
         }
     {offset
       c3nce: // global
           I64[Sp - 16] = block_c3ncj_info;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 7];
           I64[Sp] = I64[R1 + 23];
           I64[Sp + 8] = I64[R1 + 15];
           Sp = Sp - 16;
           call go_r3kd8_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3nce_info" {
     block_c3nce_info:
         const _c3nce;
         const 1;
         const 30;
 },
 _c3ncj() //  [R1]
         { []
         }
     {offset
       c3ncj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3nct; else goto c3ncs;
       c3nct: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ncs: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3nco_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ncj_info" {
     block_c3ncj_info:
         const _c3ncj;
         const 387;
         const 30;
 },
 _c3nco() //  [R1]
         { []
         }
     {offset
       c3nco: // global
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3nco_info" {
     block_c3nco_info:
         const _c3nco;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.908275626 UTC

[section ""data" . GHC.Event.PSQ.fromList_closure" {
     GHC.Event.PSQ.fromList_closure:
         const GHC.Event.PSQ.fromList_info;
 },
 GHC.Event.PSQ.fromList_entry() //  [R2]
         { []
         }
     {offset
       c3nd9: // global
           R2 = R2;
           call go_r3kd8_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.fromList_info" {
     GHC.Event.PSQ.fromList_info:
         const GHC.Event.PSQ.fromList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.913183804 UTC

[section ""data" . GHC.Event.PSQ.adjust_closure" {
     GHC.Event.PSQ.adjust_closure:
         const GHC.Event.PSQ.adjust_info;
 },
 GHC.Event.PSQ.adjust_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3ndq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ndr; else goto c3nds;
       c3ndr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.adjust_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3nds: // global
           I64[Sp - 32] = block_c3ndk_info;
           _s3mng::P64 = R3;
           R3 = R4;
           _s3mnf::P64 = R2;
           R2 = _s3mng::P64;
           P64[Sp - 24] = _s3mnf::P64;
           P64[Sp - 16] = _s3mng::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Event.PSQ.deleteView_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.adjust_info" {
     GHC.Event.PSQ.adjust_info:
         const GHC.Event.PSQ.adjust_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c3ndk() //  [R1]
         { []
         }
     {offset
       c3ndk: // global
           if (R1 & 7 == 1) goto c3ndn; else goto c3ndo;
       c3ndn: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3ndo: // global
           I64[Sp] = block_c3ndy_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3ndQ; else goto c3ndz;
       u3ndQ: // global
           call _c3ndy(R1) args: 0, res: 0, upd: 0;
       c3ndz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ndk_info" {
     block_c3ndk_info:
         const _c3ndk;
         const 3;
         const 30;
 },
 _c3ndy() //  [R1]
         { []
         }
     {offset
       c3ndy: // global
           I64[Sp - 8] = block_c3ndD_info;
           _s3mnl::P64 = P64[R1 + 7];
           _s3mnm::P64 = P64[R1 + 15];
           _s3mnn::P64 = P64[R1 + 23];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3mnn::P64;
           P64[Sp + 16] = _s3mnm::P64;
           P64[Sp + 24] = _s3mnl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ndR; else goto c3ndE;
       u3ndR: // global
           call _c3ndD(R1) args: 0, res: 0, upd: 0;
       c3ndE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ndy_info" {
     block_c3ndy_info:
         const _c3ndy;
         const 259;
         const 30;
 },
 _c3ndD() //  [R1]
         { []
         }
     {offset
       c3ndD: // global
           I64[Sp] = block_c3ndI_info;
           R2 = P64[Sp + 32];
           _s3mnp::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s3mnp::I64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ndD_info" {
     block_c3ndD_info:
         const _c3ndD;
         const 4;
         const 30;
 },
 _c3ndI() //  [R1]
         { []
         }
     {offset
       c3ndI: // global
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 32];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c3ndI_info" {
     block_c3ndI_info:
         const _c3ndI;
         const 644;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.924357341 UTC

[section ""data" . GHC.Event.PSQ.Bin_closure" {
     GHC.Event.PSQ.Bin_closure:
         const GHC.Event.PSQ.Bin_info;
 },
 GHC.Event.PSQ.Bin_slow() //  [R1]
         { []
         }
     {offset
       c3nek: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.PSQ.Bin_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.Bin_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c3nep: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3net; else goto c3nes;
       c3net: // global
           HpAlloc = 56;
           R1 = GHC.Event.PSQ.Bin_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c3nes: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R5;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.Bin_info" {
     GHC.Event.PSQ.Bin_info:
         const GHC.Event.PSQ.Bin_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 710;
         const GHC.Event.PSQ.Bin_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.930121699 UTC

[section ""data" . GHC.Event.PSQ.Tip_closure" {
     GHC.Event.PSQ.Tip_closure:
         const GHC.Event.PSQ.Tip_info;
 },
 GHC.Event.PSQ.Tip_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3neI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3neM; else goto c3neL;
       c3neM: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.Tip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3neL: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.Tip_info" {
     GHC.Event.PSQ.Tip_info:
         const GHC.Event.PSQ.Tip_entry;
         const 0;
         const 14;
         const 12884901905;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.933658094 UTC

[section ""data" . GHC.Event.PSQ.Nil_closure" {
     GHC.Event.PSQ.Nil_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.936090212 UTC

[section ""data" . GHC.Event.PSQ.E_closure" {
     GHC.Event.PSQ.E_closure:
         const GHC.Event.PSQ.E_info;
 },
 GHC.Event.PSQ.E_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c3neZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3nf3; else goto c3nf2;
       c3nf3: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.E_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3nf2: // global
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.E_info" {
     GHC.Event.PSQ.E_info:
         const GHC.Event.PSQ.E_entry;
         const 0;
         const 14;
         const 12884901905;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.940154595 UTC

[section ""cstring" . i3nfb_str" {
     i3nfb_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,66,105,110]
 },
 GHC.Event.PSQ.Bin_con_entry() //  [R1]
         { []
         }
     {offset
       c3nfa: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.Bin_con_info" {
     GHC.Event.PSQ.Bin_con_info:
         const GHC.Event.PSQ.Bin_con_entry;
         const 12884901891;
         const 1;
         const i3nfb_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.943421218 UTC

[section ""cstring" . i3nfi_str" {
     i3nfi_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,84,105,112]
 },
 GHC.Event.PSQ.Tip_con_entry() //  [R1]
         { []
         }
     {offset
       c3nfh: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.Tip_con_info" {
     GHC.Event.PSQ.Tip_con_info:
         const GHC.Event.PSQ.Tip_con_entry;
         const 8589934593;
         const 4294967297;
         const i3nfi_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.947069009 UTC

[section ""cstring" . i3nfp_str" {
     i3nfp_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,78,105,108]
 },
 GHC.Event.PSQ.Nil_con_entry() //  [R1]
         { []
         }
     {offset
       c3nfo: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.Nil_con_info" {
     GHC.Event.PSQ.Nil_con_info:
         const GHC.Event.PSQ.Nil_con_entry;
         const 4294967296;
         const 8589934595;
         const i3nfp_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.950691411 UTC

[section ""cstring" . i3nfw_str" {
     i3nfw_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,69]
 },
 GHC.Event.PSQ.E_con_entry() //  [R1]
         { []
         }
     {offset
       c3nfv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.PSQ.E_con_info" {
     GHC.Event.PSQ.E_con_info:
         const GHC.Event.PSQ.E_con_entry;
         const 8589934593;
         const 1;
         const i3nfw_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:59.95493681 UTC

[section ""relreadonly" . S3nfC_srt" { S3nfC_srt:
 }]

