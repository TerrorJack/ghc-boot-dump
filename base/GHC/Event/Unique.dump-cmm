
==================== Output Cmm ====================
2018-03-16 15:55:35.021347196 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:35.022218013 UTC

[section ""data" . GHC.Event.Unique.$fNumUnique_closure" {
     GHC.Event.Unique.$fNumUnique_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.022856009 UTC

[section ""data" . GHC.Event.Unique.$fEqUnique_closure" {
     GHC.Event.Unique.$fEqUnique_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.023646889 UTC

[section ""data" . GHC.Event.Unique.$fOrdUnique_closure" {
     GHC.Event.Unique.$fOrdUnique_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Event.Unique.$fEqUnique_closure+1;
         const GHC.Classes.compareInt_closure+2;
         const GHC.Classes.ltInt_closure+2;
         const GHC.Classes.leInt_closure+2;
         const GHC.Classes.gtInt_closure+2;
         const GHC.Classes.geInt_closure+2;
         const GHC.Classes.$fOrdInt_$cmax_closure+2;
         const GHC.Classes.$fOrdInt_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.024716855 UTC

[section ""data" . GHC.Event.Unique.asInt1_closure" {
     GHC.Event.Unique.asInt1_closure:
         const GHC.Event.Unique.asInt1_info;
 },
 GHC.Event.Unique.asInt1_entry() //  [R2]
         { info_tbl: [(cPSO,
                       label: GHC.Event.Unique.asInt1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPSO: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.025678362 UTC

[section ""data" . GHC.Event.Unique.asInt_closure" {
     GHC.Event.Unique.asInt_closure:
         const GHC.Event.Unique.asInt_info;
 },
 GHC.Event.Unique.asInt_entry() //  [R2]
         { info_tbl: [(cPSV,
                       label: GHC.Event.Unique.asInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPSV: // global
           R2 = R2;
           call GHC.Event.Unique.asInt1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.027319478 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshow_closure" {
     GHC.Event.Unique.$fShowUnique_$cshow_closure:
         const GHC.Event.Unique.$fShowUnique_$cshow_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshow_entry() //  [R2]
         { info_tbl: [(cPT5,
                       label: GHC.Event.Unique.$fShowUnique_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPT5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cPTb; else goto cPTc;
       cPTb: // global
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPTc: // global
           I64[Sp - 8] = block_cPT2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uPTh; else goto cPT3;
       uPTh: // global
           call _cPT2(R1) args: 0, res: 0, upd: 0;
       cPT3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPT2() //  [R1]
         { info_tbl: [(cPT2,
                       label: block_cPT2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPT2: // global
           I64[Sp] = block_cPT8_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cPT8() //  [R1, R2]
         { info_tbl: [(cPT8,
                       label: block_cPT8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPT8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPTg; else goto cPTf;
       cPTg: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPTf: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.029936522 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure" {
     GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure:
         const GHC.Event.Unique.$fShowUnique_$cshowsPrec_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(cPTp,
                       label: GHC.Event.Unique.$fShowUnique_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPTp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPTv; else goto cPTw;
       cPTv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cPTw: // global
           I64[Sp - 16] = block_cPTm_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPTB; else goto cPTn;
       uPTB: // global
           call _cPTm(R1) args: 0, res: 0, upd: 0;
       cPTn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPTm() //  [R1]
         { info_tbl: [(cPTm,
                       label: block_cPTm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPTm: // global
           I64[Sp] = block_cPTs_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cPTs() //  [R1, R2]
         { info_tbl: [(cPTs,
                       label: block_cPTs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPTs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPTA; else goto cPTz;
       cPTA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPTz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = P64[Sp + 8];
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.033038896 UTC

[section ""data" . GHC.Event.Unique.$wlvl_closure" {
     GHC.Event.Unique.$wlvl_closure:
         const GHC.Event.Unique.$wlvl_info;
 },
 GHC.Event.Unique.$wlvl_entry() //  [R2, R3]
         { info_tbl: [(cPTJ,
                       label: GHC.Event.Unique.$wlvl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPTJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPTK; else goto cPTL;
       cPTK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$wlvl_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPTL: // global
           I64[Sp - 16] = block_cPTG_info;
           R4 = GHC.Types.[]_closure+1;
           _sPSm::P64 = R3;
           R3 = R2;
           R2 = 0;
           P64[Sp - 8] = _sPSm::P64;
           Sp = Sp - 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cPTG() //  [R1, R2]
         { info_tbl: [(cPTG,
                       label: block_cPTG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPTG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPTO; else goto cPTN;
       cPTO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPTN: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = P64[Sp + 8];
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.035481124 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique1_closure" {
     GHC.Event.Unique.$fShowUnique1_closure:
         const GHC.Event.Unique.$fShowUnique1_info;
 },
 GHC.Event.Unique.$fShowUnique1_entry() //  [R2, R3]
         { info_tbl: [(cPTW,
                       label: GHC.Event.Unique.$fShowUnique1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPTW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPTX; else goto cPTY;
       cPTX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPTY: // global
           I64[Sp - 16] = block_cPTT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPU2; else goto cPTU;
       uPU2: // global
           call _cPTT(R1) args: 0, res: 0, upd: 0;
       cPTU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPTT() //  [R1]
         { info_tbl: [(cPTT,
                       label: block_cPTT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPTT: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Event.Unique.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.037110773 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshowList_closure" {
     GHC.Event.Unique.$fShowUnique_$cshowList_closure:
         const GHC.Event.Unique.$fShowUnique_$cshowList_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(cPU7,
                       label: GHC.Event.Unique.$fShowUnique_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPU7: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Unique.$fShowUnique1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.038309448 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_closure" {
     GHC.Event.Unique.$fShowUnique_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure+3;
         const GHC.Event.Unique.$fShowUnique_$cshow_closure+1;
         const GHC.Event.Unique.$fShowUnique_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.039479676 UTC

[section ""data" . GHC.Event.Unique.newSource1_closure" {
     GHC.Event.Unique.newSource1_closure:
         const GHC.Event.Unique.newSource1_info;
 },
 GHC.Event.Unique.newSource1_entry() //  []
         { info_tbl: [(cPUf,
                       label: GHC.Event.Unique.newSource1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPUf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cPUj; else goto cPUi;
       cPUj: // global
           HpAlloc = 40;
           R1 = GHC.Event.Unique.newSource1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cPUi: // global
           I64[Hp - 32] = stg_ARR_WORDS_info;
           I64[Hp - 24] = 8;
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.040653968 UTC

[section ""data" . GHC.Event.Unique.newSource_closure" {
     GHC.Event.Unique.newSource_closure:
         const GHC.Event.Unique.newSource_info;
 },
 GHC.Event.Unique.newSource_entry() //  []
         { info_tbl: [(cPUo,
                       label: GHC.Event.Unique.newSource_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPUo: // global
           call GHC.Event.Unique.newSource1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.042083047 UTC

[section ""data" . newUnique1_rPRX_closure" {
     newUnique1_rPRX_closure:
         const newUnique1_rPRX_info;
 },
 newUnique1_rPRX_entry() //  [R2]
         { info_tbl: [(cPUy,
                       label: newUnique1_rPRX_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPUy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cPUE; else goto cPUF;
       cPUE: // global
           R2 = R2;
           R1 = newUnique1_rPRX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPUF: // global
           I64[Sp - 8] = block_cPUv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uPUJ; else goto cPUw;
       uPUJ: // global
           call _cPUv(R1) args: 0, res: 0, upd: 0;
       cPUw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPUv() //  [R1]
         { info_tbl: [(cPUv,
                       label: block_cPUv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPUv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cPUI; else goto cPUH;
       cPUI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPUH: // global
           (_sPSI::I64) = call MO_AtomicRMW W64 AMO_Add(P64[R1 + 7] + 16, 1);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sPSI::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.04359919 UTC

[section ""data" . GHC.Event.Unique.newUnique_closure" {
     GHC.Event.Unique.newUnique_closure:
         const GHC.Event.Unique.newUnique_info;
 },
 GHC.Event.Unique.newUnique_entry() //  [R2]
         { info_tbl: [(cPUO,
                       label: GHC.Event.Unique.newUnique_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPUO: // global
           R2 = R2;
           call newUnique1_rPRX_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.044317986 UTC

[section ""cstring" . GHC.Event.Unique.$trModule4_bytes" {
     GHC.Event.Unique.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.044869019 UTC

[section ""data" . GHC.Event.Unique.$trModule3_closure" {
     GHC.Event.Unique.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.045748387 UTC

[section ""cstring" . GHC.Event.Unique.$trModule2_bytes" {
     GHC.Event.Unique.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.046294639 UTC

[section ""data" . GHC.Event.Unique.$trModule1_closure" {
     GHC.Event.Unique.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.046870028 UTC

[section ""data" . GHC.Event.Unique.$trModule_closure" {
     GHC.Event.Unique.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Unique.$trModule3_closure+1;
         const GHC.Event.Unique.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.047452441 UTC

[section ""data" . $krep_rPRY_closure" {
     $krep_rPRY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.04802977 UTC

[section ""data" . $krep1_rPRZ_closure" {
     $krep1_rPRZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.04860766 UTC

[section ""data" . $krep2_rPS0_closure" {
     $krep2_rPS0_closure:
         const :_con_info;
         const $krep_rPRY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.049205489 UTC

[section ""data" . $krep3_rPS1_closure" {
     $krep3_rPS1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep2_rPS0_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.049846638 UTC

[section ""cstring" . GHC.Event.Unique.$tcUniqueSource2_bytes" {
     GHC.Event.Unique.$tcUniqueSource2_bytes:
         I8[] [85,110,105,113,117,101,83,111,117,114,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.05042152 UTC

[section ""data" . GHC.Event.Unique.$tcUniqueSource1_closure" {
     GHC.Event.Unique.$tcUniqueSource1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tcUniqueSource2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.05097866 UTC

[section ""data" . GHC.Event.Unique.$tcUniqueSource_closure" {
     GHC.Event.Unique.$tcUniqueSource_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tcUniqueSource1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4153085541241292635;
         const 12084617229254679210;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.051592055 UTC

[section ""data" . $krep4_rPS2_closure" {
     $krep4_rPS2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUniqueSource_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.052157877 UTC

[section ""data" . GHC.Event.Unique.$tc'US1_closure" {
     GHC.Event.Unique.$tc'US1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rPS1_closure+1;
         const $krep4_rPS2_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.052763591 UTC

[section ""cstring" . GHC.Event.Unique.$tc'US3_bytes" {
     GHC.Event.Unique.$tc'US3_bytes:
         I8[] [39,85,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.053391852 UTC

[section ""data" . GHC.Event.Unique.$tc'US2_closure" {
     GHC.Event.Unique.$tc'US2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tc'US3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.053985534 UTC

[section ""data" . GHC.Event.Unique.$tc'US_closure" {
     GHC.Event.Unique.$tc'US_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tc'US2_closure+1;
         const GHC.Event.Unique.$tc'US1_closure+4;
         const 4499588508574223981;
         const 1978788649827446467;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.054629707 UTC

[section ""cstring" . GHC.Event.Unique.$tcUnique2_bytes" {
     GHC.Event.Unique.$tcUnique2_bytes:
         I8[] [85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.055242062 UTC

[section ""data" . GHC.Event.Unique.$tcUnique1_closure" {
     GHC.Event.Unique.$tcUnique1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tcUnique2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.055854931 UTC

[section ""data" . GHC.Event.Unique.$tcUnique_closure" {
     GHC.Event.Unique.$tcUnique_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tcUnique1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11671042124547125297;
         const 8473916739967459963;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.056503302 UTC

[section ""data" . $krep5_rPS3_closure" {
     $krep5_rPS3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.057077997 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique1_closure" {
     GHC.Event.Unique.$tc'Unique1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rPRZ_closure+1;
         const $krep5_rPS3_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.057718116 UTC

[section ""cstring" . GHC.Event.Unique.$tc'Unique3_bytes" {
     GHC.Event.Unique.$tc'Unique3_bytes:
         I8[] [39,85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.058237009 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique2_closure" {
     GHC.Event.Unique.$tc'Unique2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tc'Unique3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.059809814 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique_closure" {
     GHC.Event.Unique.$tc'Unique_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tc'Unique2_closure+1;
         const GHC.Event.Unique.$tc'Unique1_closure+4;
         const 12818822519571632458;
         const 6073026296752955496;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.061012583 UTC

[section ""data" . GHC.Event.Unique.US_closure" {
     GHC.Event.Unique.US_closure:
         const GHC.Event.Unique.US_info;
 },
 GHC.Event.Unique.US_entry() //  [R2]
         { info_tbl: [(cPUW,
                       label: GHC.Event.Unique.US_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPUW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cPV0; else goto cPUZ;
       cPV0: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Event.Unique.US_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPUZ: // global
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.062095188 UTC

[GHC.Event.Unique.US_con_entry() //  [R1]
         { info_tbl: [(cPV1,
                       label: GHC.Event.Unique.US_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,85,110,105,113,117,101,46,85,83]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPV1: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.06278706 UTC

[section ""relreadonly" . SPV2_srt" { SPV2_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.063315109 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:35.063840764 UTC

[section ""data" . GHC.Event.Unique.$fNumUnique_closure" {
     GHC.Event.Unique.$fNumUnique_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.064459806 UTC

[section ""data" . GHC.Event.Unique.$fEqUnique_closure" {
     GHC.Event.Unique.$fEqUnique_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.065053459 UTC

[section ""data" . GHC.Event.Unique.$fOrdUnique_closure" {
     GHC.Event.Unique.$fOrdUnique_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Event.Unique.$fEqUnique_closure+1;
         const GHC.Classes.compareInt_closure+2;
         const GHC.Classes.ltInt_closure+2;
         const GHC.Classes.leInt_closure+2;
         const GHC.Classes.gtInt_closure+2;
         const GHC.Classes.geInt_closure+2;
         const GHC.Classes.$fOrdInt_$cmax_closure+2;
         const GHC.Classes.$fOrdInt_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.066274691 UTC

[section ""data" . GHC.Event.Unique.asInt1_closure" {
     GHC.Event.Unique.asInt1_closure:
         const GHC.Event.Unique.asInt1_info;
 },
 GHC.Event.Unique.asInt1_entry() //  [R2]
         { info_tbl: [(cPV7,
                       label: GHC.Event.Unique.asInt1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPV7: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.067112993 UTC

[section ""data" . GHC.Event.Unique.asInt_closure" {
     GHC.Event.Unique.asInt_closure:
         const GHC.Event.Unique.asInt_info;
 },
 GHC.Event.Unique.asInt_entry() //  [R2]
         { info_tbl: [(cPVe,
                       label: GHC.Event.Unique.asInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPVe: // global
           R2 = R2;
           call GHC.Event.Unique.asInt1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.068229644 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshow_closure" {
     GHC.Event.Unique.$fShowUnique_$cshow_closure:
         const GHC.Event.Unique.$fShowUnique_$cshow_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshow_entry() //  [R2]
         { info_tbl: [(cPVo,
                       label: GHC.Event.Unique.$fShowUnique_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPVo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cPVu; else goto cPVv;
       cPVu: // global
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPVv: // global
           I64[Sp - 8] = block_cPVl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uPVA; else goto cPVm;
       uPVA: // global
           call _cPVl(R1) args: 0, res: 0, upd: 0;
       cPVm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPVl() //  [R1]
         { info_tbl: [(cPVl,
                       label: block_cPVl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPVl: // global
           I64[Sp] = block_cPVr_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cPVr() //  [R1, R2]
         { info_tbl: [(cPVr,
                       label: block_cPVr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPVr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPVz; else goto cPVy;
       cPVz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPVy: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.069971627 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure" {
     GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure:
         const GHC.Event.Unique.$fShowUnique_$cshowsPrec_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(cPVI,
                       label: GHC.Event.Unique.$fShowUnique_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPVI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPVO; else goto cPVP;
       cPVO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cPVP: // global
           I64[Sp - 16] = block_cPVF_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPVU; else goto cPVG;
       uPVU: // global
           call _cPVF(R1) args: 0, res: 0, upd: 0;
       cPVG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPVF() //  [R1]
         { info_tbl: [(cPVF,
                       label: block_cPVF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPVF: // global
           I64[Sp] = block_cPVL_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cPVL() //  [R1, R2]
         { info_tbl: [(cPVL,
                       label: block_cPVL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPVL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPVT; else goto cPVS;
       cPVT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPVS: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = P64[Sp + 8];
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.072397584 UTC

[section ""data" . GHC.Event.Unique.$wlvl_closure" {
     GHC.Event.Unique.$wlvl_closure:
         const GHC.Event.Unique.$wlvl_info;
 },
 GHC.Event.Unique.$wlvl_entry() //  [R2, R3]
         { info_tbl: [(cPW2,
                       label: GHC.Event.Unique.$wlvl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPW2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPW3; else goto cPW4;
       cPW3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$wlvl_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPW4: // global
           I64[Sp - 16] = block_cPVZ_info;
           R4 = GHC.Types.[]_closure+1;
           _sPSm::P64 = R3;
           R3 = R2;
           R2 = 0;
           P64[Sp - 8] = _sPSm::P64;
           Sp = Sp - 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cPVZ() //  [R1, R2]
         { info_tbl: [(cPVZ,
                       label: block_cPVZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPVZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPW7; else goto cPW6;
       cPW7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPW6: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = P64[Sp + 8];
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.074297264 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique1_closure" {
     GHC.Event.Unique.$fShowUnique1_closure:
         const GHC.Event.Unique.$fShowUnique1_info;
 },
 GHC.Event.Unique.$fShowUnique1_entry() //  [R2, R3]
         { info_tbl: [(cPWf,
                       label: GHC.Event.Unique.$fShowUnique1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPWf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPWg; else goto cPWh;
       cPWg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPWh: // global
           I64[Sp - 16] = block_cPWc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPWl; else goto cPWd;
       uPWl: // global
           call _cPWc(R1) args: 0, res: 0, upd: 0;
       cPWd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPWc() //  [R1]
         { info_tbl: [(cPWc,
                       label: block_cPWc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPWc: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Event.Unique.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.075397707 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshowList_closure" {
     GHC.Event.Unique.$fShowUnique_$cshowList_closure:
         const GHC.Event.Unique.$fShowUnique_$cshowList_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(cPWq,
                       label: GHC.Event.Unique.$fShowUnique_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPWq: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Unique.$fShowUnique1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.076123766 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_closure" {
     GHC.Event.Unique.$fShowUnique_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure+3;
         const GHC.Event.Unique.$fShowUnique_$cshow_closure+1;
         const GHC.Event.Unique.$fShowUnique_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.076913322 UTC

[section ""data" . GHC.Event.Unique.newSource1_closure" {
     GHC.Event.Unique.newSource1_closure:
         const GHC.Event.Unique.newSource1_info;
 },
 GHC.Event.Unique.newSource1_entry() //  []
         { info_tbl: [(cPWy,
                       label: GHC.Event.Unique.newSource1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPWy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cPWC; else goto cPWB;
       cPWC: // global
           HpAlloc = 40;
           R1 = GHC.Event.Unique.newSource1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cPWB: // global
           I64[Hp - 32] = stg_ARR_WORDS_info;
           I64[Hp - 24] = 8;
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.077859454 UTC

[section ""data" . GHC.Event.Unique.newSource_closure" {
     GHC.Event.Unique.newSource_closure:
         const GHC.Event.Unique.newSource_info;
 },
 GHC.Event.Unique.newSource_entry() //  []
         { info_tbl: [(cPWH,
                       label: GHC.Event.Unique.newSource_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPWH: // global
           call GHC.Event.Unique.newSource1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.078855783 UTC

[section ""data" . newUnique1_rPRX_closure" {
     newUnique1_rPRX_closure:
         const newUnique1_rPRX_info;
 },
 newUnique1_rPRX_entry() //  [R2]
         { info_tbl: [(cPWR,
                       label: newUnique1_rPRX_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPWR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cPWX; else goto cPWY;
       cPWX: // global
           R2 = R2;
           R1 = newUnique1_rPRX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPWY: // global
           I64[Sp - 8] = block_cPWO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uPX2; else goto cPWP;
       uPX2: // global
           call _cPWO(R1) args: 0, res: 0, upd: 0;
       cPWP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPWO() //  [R1]
         { info_tbl: [(cPWO,
                       label: block_cPWO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPWO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cPX1; else goto cPX0;
       cPX1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cPX0: // global
           (_sPSI::I64) = call MO_AtomicRMW W64 AMO_Add(P64[R1 + 7] + 16, 1);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sPSI::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.0801518 UTC

[section ""data" . GHC.Event.Unique.newUnique_closure" {
     GHC.Event.Unique.newUnique_closure:
         const GHC.Event.Unique.newUnique_info;
 },
 GHC.Event.Unique.newUnique_entry() //  [R2]
         { info_tbl: [(cPX7,
                       label: GHC.Event.Unique.newUnique_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPX7: // global
           R2 = R2;
           call newUnique1_rPRX_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.080858232 UTC

[section ""cstring" . GHC.Event.Unique.$trModule4_bytes" {
     GHC.Event.Unique.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.081503836 UTC

[section ""data" . GHC.Event.Unique.$trModule3_closure" {
     GHC.Event.Unique.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.082083106 UTC

[section ""cstring" . GHC.Event.Unique.$trModule2_bytes" {
     GHC.Event.Unique.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.082640832 UTC

[section ""data" . GHC.Event.Unique.$trModule1_closure" {
     GHC.Event.Unique.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.083181446 UTC

[section ""data" . GHC.Event.Unique.$trModule_closure" {
     GHC.Event.Unique.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Unique.$trModule3_closure+1;
         const GHC.Event.Unique.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.083794017 UTC

[section ""data" . $krep_rPRY_closure" {
     $krep_rPRY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.084380224 UTC

[section ""data" . $krep1_rPRZ_closure" {
     $krep1_rPRZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.084933052 UTC

[section ""data" . $krep2_rPS0_closure" {
     $krep2_rPS0_closure:
         const :_con_info;
         const $krep_rPRY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.085615557 UTC

[section ""data" . $krep3_rPS1_closure" {
     $krep3_rPS1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep2_rPS0_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.086187257 UTC

[section ""cstring" . GHC.Event.Unique.$tcUniqueSource2_bytes" {
     GHC.Event.Unique.$tcUniqueSource2_bytes:
         I8[] [85,110,105,113,117,101,83,111,117,114,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.086777138 UTC

[section ""data" . GHC.Event.Unique.$tcUniqueSource1_closure" {
     GHC.Event.Unique.$tcUniqueSource1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tcUniqueSource2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.087328707 UTC

[section ""data" . GHC.Event.Unique.$tcUniqueSource_closure" {
     GHC.Event.Unique.$tcUniqueSource_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tcUniqueSource1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4153085541241292635;
         const 12084617229254679210;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.087942127 UTC

[section ""data" . $krep4_rPS2_closure" {
     $krep4_rPS2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUniqueSource_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.088545535 UTC

[section ""data" . GHC.Event.Unique.$tc'US1_closure" {
     GHC.Event.Unique.$tc'US1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rPS1_closure+1;
         const $krep4_rPS2_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.089089944 UTC

[section ""cstring" . GHC.Event.Unique.$tc'US3_bytes" {
     GHC.Event.Unique.$tc'US3_bytes:
         I8[] [39,85,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.090264707 UTC

[section ""data" . GHC.Event.Unique.$tc'US2_closure" {
     GHC.Event.Unique.$tc'US2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tc'US3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.090795317 UTC

[section ""data" . GHC.Event.Unique.$tc'US_closure" {
     GHC.Event.Unique.$tc'US_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tc'US2_closure+1;
         const GHC.Event.Unique.$tc'US1_closure+4;
         const 4499588508574223981;
         const 1978788649827446467;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.091375484 UTC

[section ""cstring" . GHC.Event.Unique.$tcUnique2_bytes" {
     GHC.Event.Unique.$tcUnique2_bytes:
         I8[] [85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.091943024 UTC

[section ""data" . GHC.Event.Unique.$tcUnique1_closure" {
     GHC.Event.Unique.$tcUnique1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tcUnique2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.092512476 UTC

[section ""data" . GHC.Event.Unique.$tcUnique_closure" {
     GHC.Event.Unique.$tcUnique_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tcUnique1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11671042124547125297;
         const 8473916739967459963;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.093151104 UTC

[section ""data" . $krep5_rPS3_closure" {
     $krep5_rPS3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.093777526 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique1_closure" {
     GHC.Event.Unique.$tc'Unique1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rPRZ_closure+1;
         const $krep5_rPS3_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.095322189 UTC

[section ""cstring" . GHC.Event.Unique.$tc'Unique3_bytes" {
     GHC.Event.Unique.$tc'Unique3_bytes:
         I8[] [39,85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.095913462 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique2_closure" {
     GHC.Event.Unique.$tc'Unique2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tc'Unique3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.096594813 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique_closure" {
     GHC.Event.Unique.$tc'Unique_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tc'Unique2_closure+1;
         const GHC.Event.Unique.$tc'Unique1_closure+4;
         const 12818822519571632458;
         const 6073026296752955496;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.098279329 UTC

[section ""data" . GHC.Event.Unique.US_closure" {
     GHC.Event.Unique.US_closure:
         const GHC.Event.Unique.US_info;
 },
 GHC.Event.Unique.US_entry() //  [R2]
         { info_tbl: [(cPXf,
                       label: GHC.Event.Unique.US_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPXf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cPXj; else goto cPXi;
       cPXj: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Event.Unique.US_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPXi: // global
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.099726361 UTC

[GHC.Event.Unique.US_con_entry() //  [R1]
         { info_tbl: [(cPXk,
                       label: GHC.Event.Unique.US_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,85,110,105,113,117,101,46,85,83]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPXk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.100485638 UTC

[section ""relreadonly" . SPV2_srt" { SPV2_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.101468605 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:35.102673215 UTC

[section ""data" . GHC.Event.Unique.$fNumUnique_closure" {
     GHC.Event.Unique.$fNumUnique_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.104759744 UTC

[section ""data" . GHC.Event.Unique.$fEqUnique_closure" {
     GHC.Event.Unique.$fEqUnique_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.106581828 UTC

[section ""data" . GHC.Event.Unique.$fOrdUnique_closure" {
     GHC.Event.Unique.$fOrdUnique_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Event.Unique.$fEqUnique_closure+1;
         const GHC.Classes.compareInt_closure+2;
         const GHC.Classes.ltInt_closure+2;
         const GHC.Classes.leInt_closure+2;
         const GHC.Classes.gtInt_closure+2;
         const GHC.Classes.geInt_closure+2;
         const GHC.Classes.$fOrdInt_$cmax_closure+2;
         const GHC.Classes.$fOrdInt_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.108699191 UTC

[section ""data" . GHC.Event.Unique.asInt1_closure" {
     GHC.Event.Unique.asInt1_closure:
         const GHC.Event.Unique.asInt1_info;
 },
 GHC.Event.Unique.asInt1_entry() //  [R2]
         { info_tbl: [(cPXt,
                       label: GHC.Event.Unique.asInt1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPXt: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.112288946 UTC

[section ""data" . GHC.Event.Unique.asInt_closure" {
     GHC.Event.Unique.asInt_closure:
         const GHC.Event.Unique.asInt_info;
 },
 GHC.Event.Unique.asInt_entry() //  [R2]
         { info_tbl: [(cPXG,
                       label: GHC.Event.Unique.asInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPXG: // global
           R2 = R2;
           call GHC.Event.Unique.asInt1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.116360038 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshow_closure" {
     GHC.Event.Unique.$fShowUnique_$cshow_closure:
         const GHC.Event.Unique.$fShowUnique_$cshow_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshow_entry() //  [R2]
         { info_tbl: [(cPXU,
                       label: GHC.Event.Unique.$fShowUnique_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPXU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cPY0; else goto cPY1;
       cPY0: // global
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cPY1: // global
           I64[Sp - 8] = block_cPXR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uPY6; else goto cPXS;
       uPY6: // global
           call _cPXR(R1) args: 0, res: 0, upd: 0;
       cPXS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPXR() //  [R1]
         { info_tbl: [(cPXR,
                       label: block_cPXR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPXR: // global
           I64[Sp] = block_cPXX_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cPXX() //  [R1, R2]
         { info_tbl: [(cPXX,
                       label: block_cPXX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPXX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPY5; else goto cPY4;
       cPY5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPY4: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.124996675 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure" {
     GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure:
         const GHC.Event.Unique.$fShowUnique_$cshowsPrec_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(cPYr,
                       label: GHC.Event.Unique.$fShowUnique_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPYr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPYx; else goto cPYy;
       cPYx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cPYy: // global
           I64[Sp - 16] = block_cPYo_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPYD; else goto cPYp;
       uPYD: // global
           call _cPYo(R1) args: 0, res: 0, upd: 0;
       cPYp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPYo() //  [R1]
         { info_tbl: [(cPYo,
                       label: block_cPYo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPYo: // global
           I64[Sp] = block_cPYu_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cPYu() //  [R1, R2]
         { info_tbl: [(cPYu,
                       label: block_cPYu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPYu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPYC; else goto cPYB;
       cPYC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPYB: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = P64[Sp + 8];
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.134298708 UTC

[section ""data" . GHC.Event.Unique.$wlvl_closure" {
     GHC.Event.Unique.$wlvl_closure:
         const GHC.Event.Unique.$wlvl_info;
 },
 GHC.Event.Unique.$wlvl_entry() //  [R2, R3]
         { info_tbl: [(cPYX,
                       label: GHC.Event.Unique.$wlvl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPYX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPYY; else goto cPYZ;
       cPYY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$wlvl_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPYZ: // global
           I64[Sp - 16] = block_cPYU_info;
           R4 = GHC.Types.[]_closure+1;
           _sPSm::P64 = R3;
           R3 = R2;
           R2 = 0;
           P64[Sp - 8] = _sPSm::P64;
           Sp = Sp - 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cPYU() //  [R1, R2]
         { info_tbl: [(cPYU,
                       label: block_cPYU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPYU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cPZ2; else goto cPZ1;
       cPZ2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cPZ1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = P64[Sp + 8];
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.140518473 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique1_closure" {
     GHC.Event.Unique.$fShowUnique1_closure:
         const GHC.Event.Unique.$fShowUnique1_info;
 },
 GHC.Event.Unique.$fShowUnique1_entry() //  [R2, R3]
         { info_tbl: [(cPZi,
                       label: GHC.Event.Unique.$fShowUnique1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPZi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cPZj; else goto cPZk;
       cPZj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cPZk: // global
           I64[Sp - 16] = block_cPZf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uPZo; else goto cPZg;
       uPZo: // global
           call _cPZf(R1) args: 0, res: 0, upd: 0;
       cPZg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cPZf() //  [R1]
         { info_tbl: [(cPZf,
                       label: block_cPZf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPZf: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Event.Unique.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.14642946 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshowList_closure" {
     GHC.Event.Unique.$fShowUnique_$cshowList_closure:
         const GHC.Event.Unique.$fShowUnique_$cshowList_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(cPZC,
                       label: GHC.Event.Unique.$fShowUnique_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPZC: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Unique.$fShowUnique1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.149891823 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_closure" {
     GHC.Event.Unique.$fShowUnique_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure+3;
         const GHC.Event.Unique.$fShowUnique_$cshow_closure+1;
         const GHC.Event.Unique.$fShowUnique_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.151977609 UTC

[section ""data" . GHC.Event.Unique.newSource1_closure" {
     GHC.Event.Unique.newSource1_closure:
         const GHC.Event.Unique.newSource1_info;
 },
 GHC.Event.Unique.newSource1_entry() //  []
         { info_tbl: [(cPZP,
                       label: GHC.Event.Unique.newSource1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cPZP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cPZT; else goto cPZS;
       cPZT: // global
           HpAlloc = 40;
           R1 = GHC.Event.Unique.newSource1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cPZS: // global
           I64[Hp - 32] = stg_ARR_WORDS_info;
           I64[Hp - 24] = 8;
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.15596612 UTC

[section ""data" . GHC.Event.Unique.newSource_closure" {
     GHC.Event.Unique.newSource_closure:
         const GHC.Event.Unique.newSource_info;
 },
 GHC.Event.Unique.newSource_entry() //  []
         { info_tbl: [(cQ04,
                       label: GHC.Event.Unique.newSource_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ04: // global
           call GHC.Event.Unique.newSource1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.159931268 UTC

[section ""data" . newUnique1_rPRX_closure" {
     newUnique1_rPRX_closure:
         const newUnique1_rPRX_info;
 },
 newUnique1_rPRX_entry() //  [R2]
         { info_tbl: [(cQ0i,
                       label: newUnique1_rPRX_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ0i: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cQ0o; else goto cQ0p;
       cQ0o: // global
           R2 = R2;
           R1 = newUnique1_rPRX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQ0p: // global
           I64[Sp - 8] = block_cQ0f_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uQ0t; else goto cQ0g;
       uQ0t: // global
           call _cQ0f(R1) args: 0, res: 0, upd: 0;
       cQ0g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cQ0f() //  [R1]
         { info_tbl: [(cQ0f,
                       label: block_cQ0f_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ0f: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cQ0s; else goto cQ0r;
       cQ0s: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cQ0r: // global
           (_sPSI::I64) = call MO_AtomicRMW W64 AMO_Add(P64[R1 + 7] + 16, 1);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sPSI::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.165945527 UTC

[section ""data" . GHC.Event.Unique.newUnique_closure" {
     GHC.Event.Unique.newUnique_closure:
         const GHC.Event.Unique.newUnique_info;
 },
 GHC.Event.Unique.newUnique_entry() //  [R2]
         { info_tbl: [(cQ0K,
                       label: GHC.Event.Unique.newUnique_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ0K: // global
           R2 = R2;
           call newUnique1_rPRX_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.169866732 UTC

[section ""cstring" . GHC.Event.Unique.$trModule4_bytes" {
     GHC.Event.Unique.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.17161098 UTC

[section ""data" . GHC.Event.Unique.$trModule3_closure" {
     GHC.Event.Unique.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.174012279 UTC

[section ""cstring" . GHC.Event.Unique.$trModule2_bytes" {
     GHC.Event.Unique.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.175716788 UTC

[section ""data" . GHC.Event.Unique.$trModule1_closure" {
     GHC.Event.Unique.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.177457758 UTC

[section ""data" . GHC.Event.Unique.$trModule_closure" {
     GHC.Event.Unique.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Unique.$trModule3_closure+1;
         const GHC.Event.Unique.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.179267434 UTC

[section ""data" . $krep_rPRY_closure" {
     $krep_rPRY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.181059705 UTC

[section ""data" . $krep1_rPRZ_closure" {
     $krep1_rPRZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.182864671 UTC

[section ""data" . $krep2_rPS0_closure" {
     $krep2_rPS0_closure:
         const :_con_info;
         const $krep_rPRY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.184677085 UTC

[section ""data" . $krep3_rPS1_closure" {
     $krep3_rPS1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep2_rPS0_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.186509709 UTC

[section ""cstring" . GHC.Event.Unique.$tcUniqueSource2_bytes" {
     GHC.Event.Unique.$tcUniqueSource2_bytes:
         I8[] [85,110,105,113,117,101,83,111,117,114,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.188237162 UTC

[section ""data" . GHC.Event.Unique.$tcUniqueSource1_closure" {
     GHC.Event.Unique.$tcUniqueSource1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tcUniqueSource2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.190393593 UTC

[section ""data" . GHC.Event.Unique.$tcUniqueSource_closure" {
     GHC.Event.Unique.$tcUniqueSource_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tcUniqueSource1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4153085541241292635;
         const 12084617229254679210;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.192304473 UTC

[section ""data" . $krep4_rPS2_closure" {
     $krep4_rPS2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUniqueSource_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.194579105 UTC

[section ""data" . GHC.Event.Unique.$tc'US1_closure" {
     GHC.Event.Unique.$tc'US1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rPS1_closure+1;
         const $krep4_rPS2_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.196478649 UTC

[section ""cstring" . GHC.Event.Unique.$tc'US3_bytes" {
     GHC.Event.Unique.$tc'US3_bytes:
         I8[] [39,85,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.198235904 UTC

[section ""data" . GHC.Event.Unique.$tc'US2_closure" {
     GHC.Event.Unique.$tc'US2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tc'US3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.199907446 UTC

[section ""data" . GHC.Event.Unique.$tc'US_closure" {
     GHC.Event.Unique.$tc'US_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tc'US2_closure+1;
         const GHC.Event.Unique.$tc'US1_closure+4;
         const 4499588508574223981;
         const 1978788649827446467;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.201751106 UTC

[section ""cstring" . GHC.Event.Unique.$tcUnique2_bytes" {
     GHC.Event.Unique.$tcUnique2_bytes:
         I8[] [85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.203500356 UTC

[section ""data" . GHC.Event.Unique.$tcUnique1_closure" {
     GHC.Event.Unique.$tcUnique1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tcUnique2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.205219532 UTC

[section ""data" . GHC.Event.Unique.$tcUnique_closure" {
     GHC.Event.Unique.$tcUnique_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tcUnique1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11671042124547125297;
         const 8473916739967459963;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.207440376 UTC

[section ""data" . $krep5_rPS3_closure" {
     $krep5_rPS3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.209359748 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique1_closure" {
     GHC.Event.Unique.$tc'Unique1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rPRZ_closure+1;
         const $krep5_rPS3_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.2111157 UTC

[section ""cstring" . GHC.Event.Unique.$tc'Unique3_bytes" {
     GHC.Event.Unique.$tc'Unique3_bytes:
         I8[] [39,85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.212836475 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique2_closure" {
     GHC.Event.Unique.$tc'Unique2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tc'Unique3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.214668239 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique_closure" {
     GHC.Event.Unique.$tc'Unique_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tc'Unique2_closure+1;
         const GHC.Event.Unique.$tc'Unique1_closure+4;
         const 12818822519571632458;
         const 6073026296752955496;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.216909371 UTC

[section ""data" . GHC.Event.Unique.US_closure" {
     GHC.Event.Unique.US_closure:
         const GHC.Event.Unique.US_info;
 },
 GHC.Event.Unique.US_entry() //  [R2]
         { info_tbl: [(cQ1l,
                       label: GHC.Event.Unique.US_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ1l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cQ1p; else goto cQ1o;
       cQ1p: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Event.Unique.US_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQ1o: // global
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.220815733 UTC

[GHC.Event.Unique.US_con_entry() //  [R1]
         { info_tbl: [(cQ1v,
                       label: GHC.Event.Unique.US_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,85,110,105,113,117,101,46,85,83]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ1v: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.224727761 UTC

[section ""relreadonly" . SPV2_srt" { SPV2_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.451903177 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:35.452996539 UTC

[section ""data" . GHC.Event.Unique.$fNumUnique_closure" {
     GHC.Event.Unique.$fNumUnique_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.454910085 UTC

[section ""data" . GHC.Event.Unique.$fEqUnique_closure" {
     GHC.Event.Unique.$fEqUnique_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.456612854 UTC

[section ""data" . GHC.Event.Unique.$fOrdUnique_closure" {
     GHC.Event.Unique.$fOrdUnique_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Event.Unique.$fEqUnique_closure+1;
         const GHC.Classes.compareInt_closure+2;
         const GHC.Classes.ltInt_closure+2;
         const GHC.Classes.leInt_closure+2;
         const GHC.Classes.gtInt_closure+2;
         const GHC.Classes.geInt_closure+2;
         const GHC.Classes.$fOrdInt_$cmax_closure+2;
         const GHC.Classes.$fOrdInt_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.458736392 UTC

[section ""data" . GHC.Event.Unique.asInt1_closure" {
     GHC.Event.Unique.asInt1_closure:
         const GHC.Event.Unique.asInt1_info;
 },
 GHC.Event.Unique.asInt1_entry() //  [R2]
         { info_tbl: [(cQ2o,
                       label: GHC.Event.Unique.asInt1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ2o: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.462262634 UTC

[section ""data" . GHC.Event.Unique.asInt_closure" {
     GHC.Event.Unique.asInt_closure:
         const GHC.Event.Unique.asInt_info;
 },
 GHC.Event.Unique.asInt_entry() //  [R2]
         { info_tbl: [(cQ2B,
                       label: GHC.Event.Unique.asInt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ2B: // global
           R2 = R2;
           call GHC.Event.Unique.asInt1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.46588624 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshow_closure" {
     GHC.Event.Unique.$fShowUnique_$cshow_closure:
         const GHC.Event.Unique.$fShowUnique_$cshow_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshow_entry() //  [R2]
         { info_tbl: [(cQ2P,
                       label: GHC.Event.Unique.$fShowUnique_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ2P: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cQ2V; else goto cQ2W;
       cQ2V: // global
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQ2W: // global
           I64[Sp - 8] = block_cQ2M_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uQ31; else goto cQ2N;
       uQ31: // global
           call _cQ2M(R1) args: 0, res: 0, upd: 0;
       cQ2N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cQ2M() //  [R1]
         { info_tbl: [(cQ2M,
                       label: block_cQ2M_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ2M: // global
           I64[Sp] = block_cQ2S_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cQ2S() //  [R1, R2]
         { info_tbl: [(cQ2S,
                       label: block_cQ2S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ2S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cQ30; else goto cQ2Z;
       cQ30: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cQ2Z: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.474758985 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure" {
     GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure:
         const GHC.Event.Unique.$fShowUnique_$cshowsPrec_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(cQ3q,
                       label: GHC.Event.Unique.$fShowUnique_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ3q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cQ3w; else goto cQ3x;
       cQ3w: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cQ3x: // global
           I64[Sp - 16] = block_cQ3n_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uQ3C; else goto cQ3o;
       uQ3C: // global
           call _cQ3n(R1) args: 0, res: 0, upd: 0;
       cQ3o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cQ3n() //  [R1]
         { info_tbl: [(cQ3n,
                       label: block_cQ3n_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ3n: // global
           I64[Sp] = block_cQ3t_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cQ3t() //  [R1, R2]
         { info_tbl: [(cQ3t,
                       label: block_cQ3t_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ3t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cQ3B; else goto cQ3A;
       cQ3B: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cQ3A: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = P64[Sp + 8];
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.483267395 UTC

[section ""data" . GHC.Event.Unique.$wlvl_closure" {
     GHC.Event.Unique.$wlvl_closure:
         const GHC.Event.Unique.$wlvl_info;
 },
 GHC.Event.Unique.$wlvl_entry() //  [R2, R3]
         { info_tbl: [(cQ40,
                       label: GHC.Event.Unique.$wlvl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ40: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cQ41; else goto cQ42;
       cQ41: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$wlvl_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cQ42: // global
           I64[Sp - 16] = block_cQ3X_info;
           R4 = GHC.Types.[]_closure+1;
           _sQ1T::P64 = R3;
           R3 = R2;
           R2 = 0;
           P64[Sp - 8] = _sQ1T::P64;
           Sp = Sp - 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _cQ3X() //  [R1, R2]
         { info_tbl: [(cQ3X,
                       label: block_cQ3X_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ3X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cQ45; else goto cQ44;
       cQ45: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cQ44: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = P64[Sp + 8];
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.489652575 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique1_closure" {
     GHC.Event.Unique.$fShowUnique1_closure:
         const GHC.Event.Unique.$fShowUnique1_info;
 },
 GHC.Event.Unique.$fShowUnique1_entry() //  [R2, R3]
         { info_tbl: [(cQ4o,
                       label: GHC.Event.Unique.$fShowUnique1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ4o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cQ4p; else goto cQ4q;
       cQ4p: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Unique.$fShowUnique1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cQ4q: // global
           I64[Sp - 16] = block_cQ4l_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uQ4u; else goto cQ4m;
       uQ4u: // global
           call _cQ4l(R1) args: 0, res: 0, upd: 0;
       cQ4m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cQ4l() //  [R1]
         { info_tbl: [(cQ4l,
                       label: block_cQ4l_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ4l: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Event.Unique.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.495181425 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_$cshowList_closure" {
     GHC.Event.Unique.$fShowUnique_$cshowList_closure:
         const GHC.Event.Unique.$fShowUnique_$cshowList_info;
 },
 GHC.Event.Unique.$fShowUnique_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(cQ4J,
                       label: GHC.Event.Unique.$fShowUnique_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ4J: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Unique.$fShowUnique1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.498555077 UTC

[section ""data" . GHC.Event.Unique.$fShowUnique_closure" {
     GHC.Event.Unique.$fShowUnique_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Unique.$fShowUnique_$cshowsPrec_closure+3;
         const GHC.Event.Unique.$fShowUnique_$cshow_closure+1;
         const GHC.Event.Unique.$fShowUnique_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.500574375 UTC

[section ""data" . GHC.Event.Unique.newSource1_closure" {
     GHC.Event.Unique.newSource1_closure:
         const GHC.Event.Unique.newSource1_info;
 },
 GHC.Event.Unique.newSource1_entry() //  []
         { info_tbl: [(cQ4W,
                       label: GHC.Event.Unique.newSource1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ4W: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cQ50; else goto cQ4Z;
       cQ50: // global
           HpAlloc = 40;
           R1 = GHC.Event.Unique.newSource1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cQ4Z: // global
           I64[Hp - 32] = stg_ARR_WORDS_info;
           I64[Hp - 24] = 8;
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.505298864 UTC

[section ""data" . GHC.Event.Unique.newSource_closure" {
     GHC.Event.Unique.newSource_closure:
         const GHC.Event.Unique.newSource_info;
 },
 GHC.Event.Unique.newSource_entry() //  []
         { info_tbl: [(cQ5d,
                       label: GHC.Event.Unique.newSource_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ5d: // global
           call GHC.Event.Unique.newSource1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.508849788 UTC

[section ""data" . newUnique1_rPRX_closure" {
     newUnique1_rPRX_closure:
         const newUnique1_rPRX_info;
 },
 newUnique1_rPRX_entry() //  [R2]
         { info_tbl: [(cQ5r,
                       label: newUnique1_rPRX_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ5r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cQ5x; else goto cQ5y;
       cQ5x: // global
           R2 = R2;
           R1 = newUnique1_rPRX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQ5y: // global
           I64[Sp - 8] = block_cQ5o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uQ5C; else goto cQ5p;
       uQ5C: // global
           call _cQ5o(R1) args: 0, res: 0, upd: 0;
       cQ5p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cQ5o() //  [R1]
         { info_tbl: [(cQ5o,
                       label: block_cQ5o_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ5o: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cQ5B; else goto cQ5A;
       cQ5B: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cQ5A: // global
           (_sQ2f::I64) = call MO_AtomicRMW W64 AMO_Add(P64[R1 + 7] + 16, 1);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sQ2f::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.518224721 UTC

[section ""data" . GHC.Event.Unique.newUnique_closure" {
     GHC.Event.Unique.newUnique_closure:
         const GHC.Event.Unique.newUnique_info;
 },
 GHC.Event.Unique.newUnique_entry() //  [R2]
         { info_tbl: [(cQ5V,
                       label: GHC.Event.Unique.newUnique_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ5V: // global
           R2 = R2;
           call newUnique1_rPRX_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.523309822 UTC

[section ""cstring" . GHC.Event.Unique.$trModule4_bytes" {
     GHC.Event.Unique.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.526015794 UTC

[section ""data" . GHC.Event.Unique.$trModule3_closure" {
     GHC.Event.Unique.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.528565233 UTC

[section ""cstring" . GHC.Event.Unique.$trModule2_bytes" {
     GHC.Event.Unique.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.531570045 UTC

[section ""data" . GHC.Event.Unique.$trModule1_closure" {
     GHC.Event.Unique.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.534247216 UTC

[section ""data" . GHC.Event.Unique.$trModule_closure" {
     GHC.Event.Unique.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Unique.$trModule3_closure+1;
         const GHC.Event.Unique.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.536878956 UTC

[section ""data" . $krep_rPRY_closure" {
     $krep_rPRY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.539594717 UTC

[section ""data" . $krep1_rPRZ_closure" {
     $krep1_rPRZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.542811608 UTC

[section ""data" . $krep2_rPS0_closure" {
     $krep2_rPS0_closure:
         const :_con_info;
         const $krep_rPRY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.544618497 UTC

[section ""data" . $krep3_rPS1_closure" {
     $krep3_rPS1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep2_rPS0_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.546926765 UTC

[section ""cstring" . GHC.Event.Unique.$tcUniqueSource2_bytes" {
     GHC.Event.Unique.$tcUniqueSource2_bytes:
         I8[] [85,110,105,113,117,101,83,111,117,114,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.548680229 UTC

[section ""data" . GHC.Event.Unique.$tcUniqueSource1_closure" {
     GHC.Event.Unique.$tcUniqueSource1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tcUniqueSource2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.550602622 UTC

[section ""data" . GHC.Event.Unique.$tcUniqueSource_closure" {
     GHC.Event.Unique.$tcUniqueSource_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tcUniqueSource1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4153085541241292635;
         const 12084617229254679210;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.552517761 UTC

[section ""data" . $krep4_rPS2_closure" {
     $krep4_rPS2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUniqueSource_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.554674815 UTC

[section ""data" . GHC.Event.Unique.$tc'US1_closure" {
     GHC.Event.Unique.$tc'US1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rPS1_closure+1;
         const $krep4_rPS2_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.556388317 UTC

[section ""cstring" . GHC.Event.Unique.$tc'US3_bytes" {
     GHC.Event.Unique.$tc'US3_bytes:
         I8[] [39,85,83]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.558046568 UTC

[section ""data" . GHC.Event.Unique.$tc'US2_closure" {
     GHC.Event.Unique.$tc'US2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tc'US3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.559828165 UTC

[section ""data" . GHC.Event.Unique.$tc'US_closure" {
     GHC.Event.Unique.$tc'US_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tc'US2_closure+1;
         const GHC.Event.Unique.$tc'US1_closure+4;
         const 4499588508574223981;
         const 1978788649827446467;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.56171053 UTC

[section ""cstring" . GHC.Event.Unique.$tcUnique2_bytes" {
     GHC.Event.Unique.$tcUnique2_bytes:
         I8[] [85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.563882589 UTC

[section ""data" . GHC.Event.Unique.$tcUnique1_closure" {
     GHC.Event.Unique.$tcUnique1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tcUnique2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.566535293 UTC

[section ""data" . GHC.Event.Unique.$tcUnique_closure" {
     GHC.Event.Unique.$tcUnique_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tcUnique1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11671042124547125297;
         const 8473916739967459963;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.570140898 UTC

[section ""data" . $krep5_rPS3_closure" {
     $krep5_rPS3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.572730025 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique1_closure" {
     GHC.Event.Unique.$tc'Unique1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rPRZ_closure+1;
         const $krep5_rPS3_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.575426572 UTC

[section ""cstring" . GHC.Event.Unique.$tc'Unique3_bytes" {
     GHC.Event.Unique.$tc'Unique3_bytes:
         I8[] [39,85,110,105,113,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.578765329 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique2_closure" {
     GHC.Event.Unique.$tc'Unique2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Unique.$tc'Unique3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.581447789 UTC

[section ""data" . GHC.Event.Unique.$tc'Unique_closure" {
     GHC.Event.Unique.$tc'Unique_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Unique.$trModule_closure+1;
         const GHC.Event.Unique.$tc'Unique2_closure+1;
         const GHC.Event.Unique.$tc'Unique1_closure+4;
         const 12818822519571632458;
         const 6073026296752955496;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.584825042 UTC

[section ""data" . GHC.Event.Unique.US_closure" {
     GHC.Event.Unique.US_closure:
         const GHC.Event.Unique.US_info;
 },
 GHC.Event.Unique.US_entry() //  [R2]
         { info_tbl: [(cQ6w,
                       label: GHC.Event.Unique.US_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ6w: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cQ6A; else goto cQ6z;
       cQ6A: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Event.Unique.US_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cQ6z: // global
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.590830287 UTC

[GHC.Event.Unique.US_con_entry() //  [R1]
         { info_tbl: [(cQ6H,
                       label: GHC.Event.Unique.US_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,85,110,105,113,117,101,46,85,83]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cQ6H: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:35.596463858 UTC

[section ""relreadonly" . SQ6O_srt" { SQ6O_srt:
 }]

