
==================== Output Cmm ====================
2018-03-16 16:05:24.291800316 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:05:24.293264625 UTC

[section ""data" . GHC.Event.Control.$WW_closure" {
     GHC.Event.Control.$WW_closure:
         const GHC.Event.Control.$WW_info;
 },
 GHC.Event.Control.$WW_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(cap58,
                       label: GHC.Event.Control.$WW_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap58: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cap5w; else goto cap5x;
       cap5w: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$WW_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cap5x: // global
           I64[Sp - 40] = block_cap55_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uap5G; else goto cap56;
       uap5G: // global
           call _cap55(R1) args: 0, res: 0, upd: 0;
       cap56: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap55() //  [R1]
         { info_tbl: [(cap55,
                       label: block_cap55_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap55: // global
           I64[Sp] = block_cap5b_info;
           _saoXb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saoXb::I64;
           if (R1 & 7 != 0) goto uap5F; else goto cap5c;
       uap5F: // global
           call _cap5b(R1) args: 0, res: 0, upd: 0;
       cap5c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap5b() //  [R1]
         { info_tbl: [(cap5b,
                       label: block_cap5b_info
                       rep:StackRep [True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap5b: // global
           I64[Sp] = block_cap5g_info;
           _saoXd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saoXd::I64;
           if (R1 & 7 != 0) goto uap5H; else goto cap5h;
       uap5H: // global
           call _cap5g(R1) args: 0, res: 0, upd: 0;
       cap5h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap5g() //  [R1]
         { info_tbl: [(cap5g,
                       label: block_cap5g_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap5g: // global
           I64[Sp] = block_cap5l_info;
           _saoXf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _saoXf::I64;
           if (R1 & 7 != 0) goto uap5I; else goto cap5m;
       uap5I: // global
           call _cap5l(R1) args: 0, res: 0, upd: 0;
       cap5m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap5l() //  [R1]
         { info_tbl: [(cap5l,
                       label: block_cap5l_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap5l: // global
           I64[Sp] = block_cap5q_info;
           _saoXg::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _saoXg::P64;
           if (R1 & 7 != 0) goto uap5J; else goto cap5r;
       uap5J: // global
           call _cap5q(R1) args: 0, res: 0, upd: 0;
       cap5r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap5q() //  [R1]
         { info_tbl: [(cap5q,
                       label: block_cap5q_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap5q: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cap5E; else goto cap5D;
       cap5E: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cap5D: // global
           _saoXi::P64 = P64[R1 + 7];
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _saoXi::P64;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 39;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.295738479 UTC

[section ""data" . GHC.Event.Control.$WCMsgSignal_closure" {
     GHC.Event.Control.$WCMsgSignal_closure:
         const GHC.Event.Control.$WCMsgSignal_info;
 },
 GHC.Event.Control.$WCMsgSignal_entry() //  [R2, R3]
         { info_tbl: [(cap5R,
                       label: GHC.Event.Control.$WCMsgSignal_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap5R: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cap60; else goto cap61;
       cap60: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$WCMsgSignal_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cap61: // global
           I64[Sp - 16] = block_cap5O_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uap67; else goto cap5P;
       uap67: // global
           call _cap5O(R1) args: 0, res: 0, upd: 0;
       cap5P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap5O() //  [R1]
         { info_tbl: [(cap5O,
                       label: block_cap5O_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap5O: // global
           I64[Sp - 8] = block_cap5U_info;
           _saoXn::P64 = P64[R1 + 7];
           _saoXm::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _saoXn::P64;
           I64[Sp + 8] = _saoXm::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uap66; else goto cap5V;
       uap66: // global
           call _cap5U(R1) args: 0, res: 0, upd: 0;
       cap5V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap5U() //  [R1]
         { info_tbl: [(cap5U,
                       label: block_cap5U_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap5U: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cap65; else goto cap64;
       cap65: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cap64: // global
           _saoXp::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _saoXp::I64;
           R1 = Hp - 21;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.297131569 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage8_bytes" {
     GHC.Event.Control.$fShowControlMessage8_bytes:
         I8[] [67,77,115,103,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.297971829 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage7_closure" {
     GHC.Event.Control.$fShowControlMessage7_closure:
         const GHC.Event.Control.$fShowControlMessage7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage7_entry() //  [R1]
         { info_tbl: [(cap6e,
                       label: GHC.Event.Control.$fShowControlMessage7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap6e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cap6f; else goto cap6g;
       cap6f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cap6g: // global
           (_cap6b::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cap6b::I64 == 0) goto cap6d; else goto cap6c;
       cap6d: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cap6c: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cap6b::I64;
           R2 = GHC.Event.Control.$fShowControlMessage8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.298884586 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage6_bytes" {
     GHC.Event.Control.$fShowControlMessage6_bytes:
         I8[] [67,77,115,103,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.299631278 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage5_closure" {
     GHC.Event.Control.$fShowControlMessage5_closure:
         const GHC.Event.Control.$fShowControlMessage5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage5_entry() //  [R1]
         { info_tbl: [(cap6n,
                       label: GHC.Event.Control.$fShowControlMessage5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap6n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cap6o; else goto cap6p;
       cap6o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cap6p: // global
           (_cap6k::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cap6k::I64 == 0) goto cap6m; else goto cap6l;
       cap6m: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cap6l: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cap6k::I64;
           R2 = GHC.Event.Control.$fShowControlMessage6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.30054314 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage4_bytes" {
     GHC.Event.Control.$fShowControlMessage4_bytes:
         I8[] [67,77,115,103,83,105,103,110,97,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.30130671 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage3_closure" {
     GHC.Event.Control.$fShowControlMessage3_closure:
         const GHC.Event.Control.$fShowControlMessage3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage3_entry() //  [R1]
         { info_tbl: [(cap6w,
                       label: GHC.Event.Control.$fShowControlMessage3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap6w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cap6x; else goto cap6y;
       cap6x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cap6y: // global
           (_cap6t::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cap6t::I64 == 0) goto cap6v; else goto cap6u;
       cap6v: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cap6u: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cap6t::I64;
           R2 = GHC.Event.Control.$fShowControlMessage4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.304110359 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_info;
         const 0;
 },
 sat_saoXD_entry() //  [R1]
         { info_tbl: [(cap73,
                       label: sat_saoXD_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap73: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cap74; else goto cap75;
       cap74: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cap75: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cap70_info;
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 24];
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cap70() //  [R1, R2]
         { info_tbl: [(cap70,
                       label: block_cap70_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap70: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cap78; else goto cap77;
       cap78: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cap77: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saoXI_entry() //  [R1]
         { info_tbl: [(cap7d,
                       label: sat_saoXI_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap7d: // global
           _saoXI::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cap7e; else goto cap7f;
       cap7f: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cap7h; else goto cap7g;
       cap7h: // global
           HpAlloc = 56;
           goto cap7e;
       cap7e: // global
           R1 = _saoXI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cap7g: // global
           _saoXs::P64 = P64[_saoXI::P64 + 16];
           _saoXu::I64 = I64[_saoXI::P64 + 24];
           _saoXw::I64 = I64[_saoXI::P64 + 32];
           I64[Hp - 48] = sat_saoXD_info;
           P64[Hp - 32] = _saoXs::P64;
           I64[Hp - 24] = _saoXw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp - 8] = block_cap7a_info;
           R3 = Hp - 14;
           R2 = _saoXu::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cap7a() //  [R1, R2]
         { info_tbl: [(cap7a,
                       label: block_cap7a_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap7a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cap7k; else goto cap7j;
       cap7k: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cap7j: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saoXN_entry() //  [R1]
         { info_tbl: [(cap7C,
                       label: sat_saoXN_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap7C: // global
           _saoXN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cap7D; else goto cap7E;
       cap7E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cap7G; else goto cap7F;
       cap7G: // global
           HpAlloc = 24;
           goto cap7D;
       cap7D: // global
           R1 = _saoXN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cap7F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saoXN::P64;
           _saoXs::P64 = P64[_saoXN::P64 + 16];
           _saoXw::I64 = I64[_saoXN::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _saoXs::P64;
           I64[Sp - 24] = block_cap7z_info;
           R4 = Hp - 14;
           R3 = _saoXw::I64;
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cap7z() //  [R1, R2]
         { info_tbl: [(cap7z,
                       label: block_cap7z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap7z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cap7J; else goto cap7I;
       cap7J: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cap7I: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saoXS_entry() //  [R1]
         { info_tbl: [(cap7O,
                       label: sat_saoXS_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap7O: // global
           _saoXS::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cap7P; else goto cap7Q;
       cap7Q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cap7S; else goto cap7R;
       cap7S: // global
           HpAlloc = 56;
           goto cap7P;
       cap7P: // global
           R1 = _saoXS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cap7R: // global
           _saoXs::P64 = P64[_saoXS::P64 + 16];
           _saoXu::I64 = I64[_saoXS::P64 + 24];
           _saoXw::I64 = I64[_saoXS::P64 + 32];
           I64[Hp - 48] = sat_saoXN_info;
           P64[Hp - 32] = _saoXs::P64;
           I64[Hp - 24] = _saoXw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp - 8] = block_cap7L_info;
           R3 = Hp - 14;
           R2 = _saoXu::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cap7L() //  [R1, R2]
         { info_tbl: [(cap7L,
                       label: block_cap7L_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap7L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cap7V; else goto cap7U;
       cap7V: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cap7U: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saoXT_entry() //  [R1]
         { info_tbl: [(cap7W,
                       label: sat_saoXT_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap7W: // global
           _saoXT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cap7X; else goto cap7Y;
       cap7Y: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cap80; else goto cap7Z;
       cap80: // global
           HpAlloc = 40;
           goto cap7X;
       cap7X: // global
           R1 = _saoXT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cap7Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saoXT::P64;
           _saoXs::P64 = P64[_saoXT::P64 + 16];
           _saoXu::I64 = I64[_saoXT::P64 + 24];
           _saoXw::I64 = I64[_saoXT::P64 + 32];
           I64[Hp - 32] = sat_saoXS_info;
           P64[Hp - 16] = _saoXs::P64;
           I64[Hp - 8] = _saoXu::I64;
           I64[Hp] = _saoXw::I64;
           R3 = Hp - 32;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.Control.$fShowControlMessage_$cshowsPrec_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(cap86,
                       label: GHC.Event.Control.$fShowControlMessage_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap86: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cap87; else goto cap88;
       cap87: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cap88: // global
           I64[Sp - 24] = block_cap6D_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uap8n; else goto cap6E;
       uap8n: // global
           call _cap6D(R1) args: 0, res: 0, upd: 0;
       cap6E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap6D() //  [R1]
         { info_tbl: [(cap6D,
                       label: block_cap6D_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap6D: // global
           _cap85::P64 = R1 & 7;
           if (_cap85::P64 < 3) goto uap8l; else goto cap84;
       uap8l: // global
           _saoXs::P64 = P64[Sp + 16];
           if (_cap85::P64 < 2) goto cap82; else goto cap83;
       cap82: // global
           R3 = _saoXs::P64;
           R2 = GHC.Event.Control.$fShowControlMessage7_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cap83: // global
           R3 = _saoXs::P64;
           R2 = GHC.Event.Control.$fShowControlMessage5_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cap84: // global
           I64[Sp - 8] = block_cap6K_info;
           _saoXu::I64 = I64[R1 + 13];
           _saoXw::I64 = I64[R1 + 21];
           R1 = P64[Sp + 8];
           I64[Sp] = _saoXw::I64;
           I64[Sp + 8] = _saoXu::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uap8m; else goto cap6L;
       uap8m: // global
           call _cap6K(R1) args: 0, res: 0, upd: 0;
       cap6L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap6K() //  [R1]
         { info_tbl: [(cap6K,
                       label: block_cap6K_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap6K: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cap8g; else goto cap8f;
       cap8g: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cap8f: // global
           _saoXs::P64 = P64[Sp + 24];
           _saoXu::I64 = I64[Sp + 16];
           _saoXw::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto cap8i; else goto cap8k;
       cap8i: // global
           I64[Hp - 56] = sat_saoXI_info;
           P64[Hp - 40] = _saoXs::P64;
           I64[Hp - 32] = _saoXu::I64;
           I64[Hp - 24] = _saoXw::I64;
           _cap6S::P64 = Hp - 56;
           Hp = Hp - 24;
           R3 = _cap6S::P64;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cap8k: // global
           I64[Hp - 56] = sat_saoXT_info;
           P64[Hp - 40] = _saoXs::P64;
           I64[Hp - 32] = _saoXu::I64;
           I64[Hp - 24] = _saoXw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.309878926 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshow_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshow_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshow_info;
         const 0;
 },
 sat_saoY2_entry() //  [R1]
         { info_tbl: [(cap8L,
                       label: sat_saoY2_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap8L: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cap8M; else goto cap8N;
       cap8M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cap8N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cap8I_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cap8I() //  [R1, R2]
         { info_tbl: [(cap8I,
                       label: block_cap8I_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap8I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cap8Q; else goto cap8P;
       cap8Q: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cap8P: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saoY7_entry() //  [R1]
         { info_tbl: [(cap8V,
                       label: sat_saoY7_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap8V: // global
           _saoY7::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cap8W; else goto cap8X;
       cap8X: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cap8Z; else goto cap8Y;
       cap8Z: // global
           HpAlloc = 48;
           goto cap8W;
       cap8W: // global
           R1 = _saoY7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cap8Y: // global
           _saoXW::I64 = I64[_saoY7::P64 + 16];
           _saoXY::I64 = I64[_saoY7::P64 + 24];
           I64[Hp - 40] = sat_saoY2_info;
           I64[Hp - 24] = _saoXY::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_cap8S_info;
           R3 = Hp - 14;
           R2 = _saoXW::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cap8S() //  [R1, R2]
         { info_tbl: [(cap8S,
                       label: block_cap8S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap8S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cap92; else goto cap91;
       cap92: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cap91: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.$fShowControlMessage_$cshow_entry() //  [R2]
         { info_tbl: [(cap98,
                       label: GHC.Event.Control.$fShowControlMessage_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap98: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cap99; else goto cap9a;
       cap99: // global
           R2 = R2;
           R1 = GHC.Event.Control.$fShowControlMessage_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cap9a: // global
           I64[Sp - 8] = block_cap8t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uap9j; else goto cap8u;
       uap9j: // global
           call _cap8t(R1) args: 0, res: 0, upd: 0;
       cap8u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap8t() //  [R1]
         { info_tbl: [(cap8t,
                       label: block_cap8t_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap8t: // global
           _cap97::P64 = R1 & 7;
           if (_cap97::P64 < 3) goto uap9i; else goto cap96;
       uap9i: // global
           if (_cap97::P64 < 2) goto cap94; else goto cap95;
       cap94: // global
           R1 = GHC.Event.Control.$fShowControlMessage7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cap95: // global
           R1 = GHC.Event.Control.$fShowControlMessage5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cap96: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cap9h; else goto cap9g;
       cap9h: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cap9g: // global
           _saoXW::I64 = I64[R1 + 13];
           _saoXY::I64 = I64[R1 + 21];
           I64[Hp - 24] = sat_saoY7_info;
           I64[Hp - 8] = _saoXW::I64;
           I64[Hp] = _saoXY::I64;
           R3 = Hp - 24;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.313700931 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage2_closure" {
     GHC.Event.Control.$fShowControlMessage2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.31439905 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage1_closure" {
     GHC.Event.Control.$fShowControlMessage1_closure:
         const GHC.Event.Control.$fShowControlMessage1_info;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage1_entry() //  [R2, R3]
         { info_tbl: [(cap9o,
                       label: GHC.Event.Control.$fShowControlMessage1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap9o: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Control.$fShowControlMessage2_closure+1;
           call GHC.Event.Control.$fShowControlMessage_$cshowsPrec_entry(R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.315248085 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshowList_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshowList_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshowList_info;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage_$cshowList_entry() //  [R2,
                                                                R3]
         { info_tbl: [(cap9v,
                       label: GHC.Event.Control.$fShowControlMessage_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap9v: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Control.$fShowControlMessage1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.31596299 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_closure" {
     GHC.Event.Control.$fShowControlMessage_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure+3;
         const GHC.Event.Control.$fShowControlMessage_$cshow_closure+1;
         const GHC.Event.Control.$fShowControlMessage_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.316785455 UTC

[section ""data" . GHC.Event.Control.controlIsDead_closure" {
     GHC.Event.Control.controlIsDead_closure:
         const GHC.Event.Control.controlIsDead_info;
 },
 GHC.Event.Control.controlIsDead_entry() //  [R2]
         { info_tbl: [(cap9F,
                       label: GHC.Event.Control.controlIsDead_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap9F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cap9J; else goto cap9K;
       cap9J: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlIsDead_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cap9K: // global
           I64[Sp - 8] = block_cap9C_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uap9O; else goto cap9D;
       uap9O: // global
           call _cap9C(R1) args: 0, res: 0, upd: 0;
       cap9D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap9C() //  [R1]
         { info_tbl: [(cap9C,
                       label: block_cap9C_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap9C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cap9N; else goto cap9M;
       cap9N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cap9M: // global
           _saoYg::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _saoYg::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.318046061 UTC

[section ""data" . GHC.Event.Control.didRegisterWakeupFd_closure" {
     GHC.Event.Control.didRegisterWakeupFd_closure:
         const GHC.Event.Control.didRegisterWakeupFd_info;
 },
 GHC.Event.Control.didRegisterWakeupFd_entry() //  [R2]
         { info_tbl: [(cap9W,
                       label: GHC.Event.Control.didRegisterWakeupFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap9W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cap9X; else goto cap9Y;
       cap9X: // global
           R2 = R2;
           R1 = GHC.Event.Control.didRegisterWakeupFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cap9Y: // global
           I64[Sp - 8] = block_cap9T_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapa2; else goto cap9U;
       uapa2: // global
           call _cap9T(R1) args: 0, res: 0, upd: 0;
       cap9U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cap9T() //  [R1]
         { info_tbl: [(cap9T,
                       label: block_cap9T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cap9T: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.319197714 UTC

[section ""data" . GHC.Event.Control.controlEventFd_closure" {
     GHC.Event.Control.controlEventFd_closure:
         const GHC.Event.Control.controlEventFd_info;
 },
 GHC.Event.Control.controlEventFd_entry() //  [R2]
         { info_tbl: [(capaa,
                       label: GHC.Event.Control.controlEventFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capaa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capae; else goto capaf;
       capae: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlEventFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capaf: // global
           I64[Sp - 8] = block_capa7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapaj; else goto capa8;
       uapaj: // global
           call _capa7(R1) args: 0, res: 0, upd: 0;
       capa8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capa7() //  [R1]
         { info_tbl: [(capa7,
                       label: block_capa7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capa7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capai; else goto capah;
       capai: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capah: // global
           _saoYs::I64 = I64[R1 + 39];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saoYs::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.320496839 UTC

[section ""data" . GHC.Event.Control.controlWriteFd_closure" {
     GHC.Event.Control.controlWriteFd_closure:
         const GHC.Event.Control.controlWriteFd_info;
 },
 GHC.Event.Control.controlWriteFd_entry() //  [R2]
         { info_tbl: [(capar,
                       label: GHC.Event.Control.controlWriteFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capar: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capav; else goto capaw;
       capav: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlWriteFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capaw: // global
           I64[Sp - 8] = block_capao_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapaA; else goto capap;
       uapaA: // global
           call _capao(R1) args: 0, res: 0, upd: 0;
       capap: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capao() //  [R1]
         { info_tbl: [(capao,
                       label: block_capao_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capao: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capaz; else goto capay;
       capaz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capay: // global
           _saoYy::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saoYy::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.321838477 UTC

[section ""data" . GHC.Event.Control.controlReadFd_closure" {
     GHC.Event.Control.controlReadFd_closure:
         const GHC.Event.Control.controlReadFd_info;
 },
 GHC.Event.Control.controlReadFd_entry() //  [R2]
         { info_tbl: [(capaI,
                       label: GHC.Event.Control.controlReadFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capaI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capaM; else goto capaN;
       capaM: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlReadFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capaN: // global
           I64[Sp - 8] = block_capaF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapaR; else goto capaG;
       uapaR: // global
           call _capaF(R1) args: 0, res: 0, upd: 0;
       capaG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capaF() //  [R1]
         { info_tbl: [(capaF,
                       label: block_capaF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capaF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capaQ; else goto capaP;
       capaQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capaP: // global
           _saoYE::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saoYE::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.322989008 UTC

[section ""data" . GHC.Event.Control.wakeupReadFd_closure" {
     GHC.Event.Control.wakeupReadFd_closure:
         const GHC.Event.Control.wakeupReadFd_info;
 },
 GHC.Event.Control.wakeupReadFd_entry() //  [R2]
         { info_tbl: [(capaW,
                       label: GHC.Event.Control.wakeupReadFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capaW: // global
           R2 = R2;
           call GHC.Event.Control.controlEventFd_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.323659634 UTC

[section ""cstring" . GHC.Event.Control.$trModule4_bytes" {
     GHC.Event.Control.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.324206561 UTC

[section ""data" . GHC.Event.Control.$trModule3_closure" {
     GHC.Event.Control.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.324763994 UTC

[section ""cstring" . GHC.Event.Control.$trModule2_bytes" {
     GHC.Event.Control.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.325319674 UTC

[section ""data" . GHC.Event.Control.$trModule1_closure" {
     GHC.Event.Control.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.325836921 UTC

[section ""data" . GHC.Event.Control.$trModule_closure" {
     GHC.Event.Control.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Control.$trModule3_closure+1;
         const GHC.Event.Control.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.326400628 UTC

[section ""data" . $krep_raoWE_closure" {
     $krep_raoWE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.326975816 UTC

[section ""data" . $krep1_raoWF_closure" {
     $krep1_raoWF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.32750768 UTC

[section ""data" . $krep2_raoWG_closure" {
     $krep2_raoWG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.328062244 UTC

[section ""data" . $krep3_raoWH_closure" {
     $krep3_raoWH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.328642283 UTC

[section ""data" . $krep4_raoWI_closure" {
     $krep4_raoWI_closure:
         const :_con_info;
         const $krep1_raoWF_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.329193642 UTC

[section ""data" . $krep5_raoWJ_closure" {
     $krep5_raoWJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep4_raoWI_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.330062872 UTC

[section ""data" . $krep6_raoWK_closure" {
     $krep6_raoWK_closure:
         const :_con_info;
         const $krep2_raoWG_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.330672877 UTC

[section ""data" . $krep7_raoWL_closure" {
     $krep7_raoWL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep6_raoWK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.33124562 UTC

[section ""cstring" . GHC.Event.Control.$tcControlMessage2_bytes" {
     GHC.Event.Control.$tcControlMessage2_bytes:
         I8[] [67,111,110,116,114,111,108,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.331764755 UTC

[section ""data" . GHC.Event.Control.$tcControlMessage1_closure" {
     GHC.Event.Control.$tcControlMessage1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tcControlMessage2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.332289769 UTC

[section ""data" . GHC.Event.Control.$tcControlMessage_closure" {
     GHC.Event.Control.$tcControlMessage_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tcControlMessage1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13490094119359668037;
         const 2953272121777407512;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.332895969 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie1_closure" {
     GHC.Event.Control.$tc'CMsgDie1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControlMessage_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.333473723 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgWakeup2_bytes" {
     GHC.Event.Control.$tc'CMsgWakeup2_bytes:
         I8[] [39,67,77,115,103,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.33401288 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgWakeup1_closure" {
     GHC.Event.Control.$tc'CMsgWakeup1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgWakeup2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.33455717 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgWakeup_closure" {
     GHC.Event.Control.$tc'CMsgWakeup_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgWakeup1_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 7148775915826095055;
         const 6381666496233651559;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.335094372 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgDie3_bytes" {
     GHC.Event.Control.$tc'CMsgDie3_bytes:
         I8[] [39,67,77,115,103,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.335611021 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie2_closure" {
     GHC.Event.Control.$tc'CMsgDie2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgDie3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.33619932 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie_closure" {
     GHC.Event.Control.$tc'CMsgDie_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgDie2_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 2337574862383861426;
         const 4640161931169225929;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.336793284 UTC

[section ""data" . $krep8_raoWM_closure" {
     $krep8_raoWM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_raoWE_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.337584716 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal1_closure" {
     GHC.Event.Control.$tc'CMsgSignal1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_raoWJ_closure+1;
         const $krep8_raoWM_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.338165644 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgSignal3_bytes" {
     GHC.Event.Control.$tc'CMsgSignal3_bytes:
         I8[] [39,67,77,115,103,83,105,103,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.338687442 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal2_closure" {
     GHC.Event.Control.$tc'CMsgSignal2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgSignal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.339265244 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal_closure" {
     GHC.Event.Control.$tc'CMsgSignal_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgSignal2_closure+1;
         const GHC.Event.Control.$tc'CMsgSignal1_closure+4;
         const 14616621783190690564;
         const 9307773026781339016;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.33985647 UTC

[section ""cstring" . GHC.Event.Control.$tcControl2_bytes" {
     GHC.Event.Control.$tcControl2_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.340399449 UTC

[section ""data" . GHC.Event.Control.$tcControl1_closure" {
     GHC.Event.Control.$tcControl1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tcControl2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.3409676 UTC

[section ""data" . GHC.Event.Control.$tcControl_closure" {
     GHC.Event.Control.$tcControl_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tcControl1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10901861211350082240;
         const 15092011187582559326;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.341588766 UTC

[section ""data" . $krep9_raoWN_closure" {
     $krep9_raoWN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControl_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.343295868 UTC

[section ""data" . $krep10_raoWO_closure" {
     $krep10_raoWO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_raoWL_closure+1;
         const $krep9_raoWN_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.343902689 UTC

[section ""data" . $krep11_raoWP_closure" {
     $krep11_raoWP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_raoWG_closure+1;
         const $krep10_raoWO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.344480883 UTC

[section ""data" . $krep12_raoWQ_closure" {
     $krep12_raoWQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep11_raoWP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.345077365 UTC

[section ""data" . $krep13_raoWR_closure" {
     $krep13_raoWR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep12_raoWQ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.345705674 UTC

[section ""data" . GHC.Event.Control.$tc'W1_closure" {
     GHC.Event.Control.$tc'W1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep13_raoWR_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.34628661 UTC

[section ""cstring" . GHC.Event.Control.$tc'W3_bytes" {
     GHC.Event.Control.$tc'W3_bytes:
         I8[] [39,87]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.346829082 UTC

[section ""data" . GHC.Event.Control.$tc'W2_closure" {
     GHC.Event.Control.$tc'W2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'W3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.347407839 UTC

[section ""data" . GHC.Event.Control.$tc'W_closure" {
     GHC.Event.Control.$tc'W_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'W2_closure+1;
         const GHC.Event.Control.$tc'W1_closure+4;
         const 17903566110422877322;
         const 1788372901503945479;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.349021884 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_$c==_closure" {
     GHC.Event.Control.$fEqControlMessage_$c==_closure:
         const GHC.Event.Control.$fEqControlMessage_$c==_info;
 },
 GHC.Event.Control.$fEqControlMessage_$c==_entry() //  [R2, R3]
         { info_tbl: [(capbb,
                       label: GHC.Event.Control.$fEqControlMessage_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capbb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capbc; else goto capbd;
       capbc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fEqControlMessage_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capbd: // global
           I64[Sp - 16] = block_capb3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapci; else goto capb4;
       uapci: // global
           call _capb3(R1) args: 0, res: 0, upd: 0;
       capb4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capb3() //  [R1]
         { info_tbl: [(capb3,
                       label: block_capb3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capb3: // global
           _saoYK::P64 = P64[Sp + 8];
           _capba::P64 = R1 & 7;
           if (_capba::P64 < 3) goto uapc8; else goto capb9;
       uapc8: // global
           if (_capba::P64 < 2) goto capb7; else goto capb8;
       capb7: // global
           I64[Sp + 8] = block_capbg_info;
           R1 = _saoYK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapcf; else goto capbi;
       uapcf: // global
           call _capbg(R1) args: 0, res: 0, upd: 0;
       capbi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capb8: // global
           I64[Sp + 8] = block_capbv_info;
           R1 = _saoYK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapcg; else goto capbx;
       uapcg: // global
           call _capbv(R1) args: 0, res: 0, upd: 0;
       capbx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capb9: // global
           I64[Sp - 8] = block_capbK_info;
           _saoYO::I64 = I64[R1 + 13];
           _saoYQ::I64 = I64[R1 + 21];
           R1 = _saoYK::P64;
           I64[Sp] = _saoYQ::I64;
           I64[Sp + 8] = _saoYO::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapch; else goto capbM;
       uapch: // global
           call _capbK(R1) args: 0, res: 0, upd: 0;
       capbM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capbg() //  [R1]
         { info_tbl: [(capbg,
                       label: block_capbg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capbg: // global
           if (R1 & 7 == 1) goto uapc9; else goto uapca;
       uapc9: // global
           Sp = Sp + 8;
           call _capbH() args: 0, res: 0, upd: 0;
       uapca: // global
           Sp = Sp + 8;
           call _capbZ() args: 0, res: 0, upd: 0;
     }
 },
 _capbv() //  [R1]
         { info_tbl: [(capbv,
                       label: block_capbv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capbv: // global
           if (R1 & 7 == 2) goto uapcb; else goto uapcc;
       uapcb: // global
           Sp = Sp + 8;
           call _capbH() args: 0, res: 0, upd: 0;
       uapcc: // global
           Sp = Sp + 8;
           call _capbZ() args: 0, res: 0, upd: 0;
     }
 },
 _capbH() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capbH: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _capbK() //  [R1]
         { info_tbl: [(capbK,
                       label: block_capbK_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capbK: // global
           if (R1 & 7 == 3) goto capc1; else goto uapcd;
       capc1: // global
           if (I64[Sp + 16] == I64[R1 + 13]) goto capc0; else goto uapce;
       capc0: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 21]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uapce: // global
           Sp = Sp + 24;
           goto uapco;
       uapcd: // global
           Sp = Sp + 24;
           goto uapco;
       uapco: // global
           call _capbZ() args: 0, res: 0, upd: 0;
     }
 },
 _capbZ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capbZ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.352200886 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_$c/=_closure" {
     GHC.Event.Control.$fEqControlMessage_$c/=_closure:
         const GHC.Event.Control.$fEqControlMessage_$c/=_info;
 },
 GHC.Event.Control.$fEqControlMessage_$c/=_entry() //  [R2, R3]
         { info_tbl: [(capcB,
                       label: GHC.Event.Control.$fEqControlMessage_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capcB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capcC; else goto capcD;
       capcC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fEqControlMessage_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capcD: // global
           I64[Sp - 16] = block_capct_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapdO; else goto capcu;
       uapdO: // global
           call _capct(R1) args: 0, res: 0, upd: 0;
       capcu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capct() //  [R1]
         { info_tbl: [(capct,
                       label: block_capct_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capct: // global
           _saoYY::P64 = P64[Sp + 8];
           _capcA::P64 = R1 & 7;
           if (_capcA::P64 < 3) goto uapdC; else goto capcz;
       uapdC: // global
           if (_capcA::P64 < 2) goto capcx; else goto capcy;
       capcx: // global
           I64[Sp + 8] = block_capcG_info;
           R1 = _saoYY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapdL; else goto capcI;
       uapdL: // global
           call _capcG(R1) args: 0, res: 0, upd: 0;
       capcI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capcy: // global
           I64[Sp + 8] = block_capcV_info;
           R1 = _saoYY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapdM; else goto capcX;
       uapdM: // global
           call _capcV(R1) args: 0, res: 0, upd: 0;
       capcX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capcz: // global
           I64[Sp - 8] = block_capda_info;
           _saoZ2::I64 = I64[R1 + 13];
           _saoZ4::I64 = I64[R1 + 21];
           R1 = _saoYY::P64;
           I64[Sp] = _saoZ4::I64;
           I64[Sp + 8] = _saoZ2::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapdN; else goto capdc;
       uapdN: // global
           call _capda(R1) args: 0, res: 0, upd: 0;
       capdc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capcG() //  [R1]
         { info_tbl: [(capcG,
                       label: block_capcG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capcG: // global
           if (R1 & 7 == 1) goto uapdD; else goto uapdE;
       uapdD: // global
           Sp = Sp + 8;
           call _capdw() args: 0, res: 0, upd: 0;
       uapdE: // global
           Sp = Sp + 8;
           call _capdv() args: 0, res: 0, upd: 0;
     }
 },
 _capcV() //  [R1]
         { info_tbl: [(capcV,
                       label: block_capcV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capcV: // global
           if (R1 & 7 == 2) goto uapdF; else goto uapdG;
       uapdF: // global
           Sp = Sp + 8;
           call _capdw() args: 0, res: 0, upd: 0;
       uapdG: // global
           Sp = Sp + 8;
           call _capdv() args: 0, res: 0, upd: 0;
     }
 },
 _capda() //  [R1]
         { info_tbl: [(capda,
                       label: block_capda_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capda: // global
           if (R1 & 7 == 3) goto capdy; else goto uapdH;
       capdy: // global
           if (I64[Sp + 16] == I64[R1 + 13]) goto capdx; else goto uapdI;
       capdx: // global
           if (I64[Sp + 8] == I64[R1 + 21]) goto uapdJ; else goto uapdK;
       uapdJ: // global
           Sp = Sp + 24;
           call _capdw() args: 0, res: 0, upd: 0;
       uapdK: // global
           Sp = Sp + 24;
           goto uapdW;
       uapdI: // global
           Sp = Sp + 24;
           goto uapdW;
       uapdH: // global
           Sp = Sp + 24;
           goto uapdW;
       uapdW: // global
           call _capdv() args: 0, res: 0, upd: 0;
     }
 },
 _capdw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capdw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _capdv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capdv: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.354235731 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_closure" {
     GHC.Event.Control.$fEqControlMessage_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Event.Control.$fEqControlMessage_$c==_closure+2;
         const GHC.Event.Control.$fEqControlMessage_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.354825352 UTC

[section ""cstring" . GHC.Event.Control.sendWakeup3_bytes" {
     GHC.Event.Control.sendWakeup3_bytes:
         I8[] [115,101,110,100,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.355562713 UTC

[section ""data" . GHC.Event.Control.sendWakeup2_closure" {
     GHC.Event.Control.sendWakeup2_closure:
         const GHC.Event.Control.sendWakeup2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.sendWakeup2_entry() //  [R1]
         { info_tbl: [(cape3,
                       label: GHC.Event.Control.sendWakeup2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cape3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cape4; else goto cape5;
       cape4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cape5: // global
           (_cape0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cape0::I64 == 0) goto cape2; else goto cape1;
       cape2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cape1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cape0::I64;
           R2 = GHC.Event.Control.sendWakeup3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.356969497 UTC

[section ""data" . GHC.Event.Control.$wsendWakeup_closure" {
     GHC.Event.Control.$wsendWakeup_closure:
         const GHC.Event.Control.$wsendWakeup_info;
         const 0;
 },
 GHC.Event.Control.$wsendWakeup_entry() //  [R2, R3]
         { info_tbl: [(capec,
                       label: GHC.Event.Control.$wsendWakeup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capec: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caped; else goto capee;
       caped: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wsendWakeup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capee: // global
           _saoZc::P64 = R3;
           (_saoZi::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2)), 1);
           if (%MO_SS_Conv_W64_W32(_saoZi::I64) == 0 :: W32) goto uapf2; else goto capes;
       uapf2: // global
           call _capeW() args: 0, res: 0, upd: 0;
       capes: // global
           (_saoZn::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp - 16] = block_capeq_info;
           R1 = P64[_saoZc::P64 + 8];
           I64[Sp - 8] = _saoZn::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapf3; else goto capeu;
       uapf3: // global
           call _capeq(R1) args: 0, res: 0, upd: 0;
       capeu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capeq() //  [R1]
         { info_tbl: [(capeq,
                       label: block_capeq_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capeq: // global
           if (R1 & 7 == 1) goto capeJ; else goto capeT;
       capeT: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) != 9 :: W32) goto capeJ; else goto uapf1;
       capeJ: // global
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 16;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 0, upd: 8;
       uapf1: // global
           Sp = Sp + 16;
           call _capeW() args: 0, res: 0, upd: 0;
     }
 },
 _capeW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capeW: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.358579686 UTC

[section ""data" . GHC.Event.Control.sendWakeup1_closure" {
     GHC.Event.Control.sendWakeup1_closure:
         const GHC.Event.Control.sendWakeup1_info;
         const 0;
 },
 GHC.Event.Control.sendWakeup1_entry() //  [R2]
         { info_tbl: [(capfc,
                       label: GHC.Event.Control.sendWakeup1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capfc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capfd; else goto capfe;
       capfd: // global
           R2 = R2;
           R1 = GHC.Event.Control.sendWakeup1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capfe: // global
           I64[Sp - 8] = block_capf9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapfi; else goto capfa;
       uapfi: // global
           call _capf9(R1) args: 0, res: 0, upd: 0;
       capfa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capf9() //  [R1]
         { info_tbl: [(capf9,
                       label: block_capf9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capf9: // global
           R3 = P64[R1 + 15];
           R2 = I64[R1 + 39];
           Sp = Sp + 8;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.359676607 UTC

[section ""data" . GHC.Event.Control.sendWakeup_closure" {
     GHC.Event.Control.sendWakeup_closure:
         const GHC.Event.Control.sendWakeup_info;
         const 0;
 },
 GHC.Event.Control.sendWakeup_entry() //  [R2]
         { info_tbl: [(capfn,
                       label: GHC.Event.Control.sendWakeup_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capfn: // global
           R2 = R2;
           call GHC.Event.Control.sendWakeup1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.360389374 UTC

[section ""cstring" . lvl_raoWS_bytes" {
     lvl_raoWS_bytes:
         I8[] [115,101,110,100,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.361091819 UTC

[section ""data" . lvl1_raoWT_closure" {
     lvl1_raoWT_closure:
         const lvl1_raoWT_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_raoWT_entry() //  [R1]
         { info_tbl: [(capfw,
                       label: lvl1_raoWT_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capfw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capfx; else goto capfy;
       capfx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capfy: // global
           (_capft::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capft::I64 == 0) goto capfv; else goto capfu;
       capfv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capfu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capft::I64;
           R2 = lvl_raoWS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.36243907 UTC

[section ""data" . GHC.Event.Control.sendDie2_closure" {
     GHC.Event.Control.sendDie2_closure:
         const GHC.Event.Control.sendDie2_info;
         const 0;
 },
 GHC.Event.Control.sendDie2_entry() //  [R2]
         { info_tbl: [(capfF,
                       label: GHC.Event.Control.sendDie2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capfF: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_raoWT_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.36353839 UTC

[section ""data" . GHC.Event.Control.$wsendDie_closure" {
     GHC.Event.Control.$wsendDie_closure:
         const GHC.Event.Control.$wsendDie_info;
         const 0;
 },
 GHC.Event.Control.$wsendDie_entry() //  [R2, R3]
         { info_tbl: [(capfQ,
                       label: GHC.Event.Control.$wsendDie_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capfQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capfR; else goto capfS;
       capfR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wsendDie_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capfS: // global
           I64[Sp - 16] = block_capfM_info;
           _saoZE::I64 = R2;
           R2 = 1;
           R1 = 1;
           I64[Sp - 8] = _saoZE::I64;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _capfM() //  [R1]
         { info_tbl: [(capfM,
                       label: block_capfM_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capfM: // global
           _saoZE::I64 = I64[Sp + 8];
           _saoZN::I64 = R1 + 16;
           I8[_saoZN::I64] = 254 :: W8;
           (_saoZT::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC20ZCbaseZCSystemziPosixziInternalsZCwrite(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saoZE::I64)), _saoZN::I64, 1);
           call MO_Touch(R1);
           if (_saoZT::I64 == (-1)) goto capg6; else goto capg5;
       capg6: // global
           (_saoZZ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _saoZZ::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.sendDie2_entry(R2) args: 8, res: 0, upd: 8;
       capg5: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.364897175 UTC

[section ""data" . GHC.Event.Control.sendDie1_closure" {
     GHC.Event.Control.sendDie1_closure:
         const GHC.Event.Control.sendDie1_info;
         const 0;
 },
 GHC.Event.Control.sendDie1_entry() //  [R2]
         { info_tbl: [(capgh,
                       label: GHC.Event.Control.sendDie1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capgh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capgi; else goto capgj;
       capgi: // global
           R2 = R2;
           R1 = GHC.Event.Control.sendDie1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capgj: // global
           I64[Sp - 8] = block_capge_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapgn; else goto capgf;
       uapgn: // global
           call _capge(R1) args: 0, res: 0, upd: 0;
       capgf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capge() //  [R1]
         { info_tbl: [(capge,
                       label: block_capge_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capge: // global
           R3 = P64[R1 + 15];
           R2 = I64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Event.Control.$wsendDie_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.365994863 UTC

[section ""data" . GHC.Event.Control.sendDie_closure" {
     GHC.Event.Control.sendDie_closure:
         const GHC.Event.Control.sendDie_info;
         const 0;
 },
 GHC.Event.Control.sendDie_entry() //  [R2]
         { info_tbl: [(capgs,
                       label: GHC.Event.Control.sendDie_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capgs: // global
           R2 = R2;
           call GHC.Event.Control.sendDie1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.366689923 UTC

[section ""data" . GHC.Event.Control.closeControl3_closure" {
     GHC.Event.Control.closeControl3_closure:
         const (,)_con_info;
         const GHC.Types.True_closure+2;
         const GHC.Tuple.()_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.367377363 UTC

[section ""data" . GHC.Event.Control.closeControl2_closure" {
     GHC.Event.Control.closeControl2_closure:
         const GHC.Event.Control.closeControl2_info;
 },
 GHC.Event.Control.closeControl2_entry() //  []
         { info_tbl: [(capgz,
                       label: GHC.Event.Control.closeControl2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capgz: // global
           R1 = GHC.Event.Control.closeControl3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.368601702 UTC

[section ""data" . GHC.Event.Control.closeControl1_closure" {
     GHC.Event.Control.closeControl1_closure:
         const GHC.Event.Control.closeControl1_info;
 },
 GHC.Event.Control.closeControl1_entry() //  [R2]
         { info_tbl: [(capgJ,
                       label: GHC.Event.Control.closeControl1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capgJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto capgK; else goto capgL;
       capgK: // global
           R2 = R2;
           R1 = GHC.Event.Control.closeControl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capgL: // global
           I64[Sp - 8] = block_capgG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaphr; else goto capgH;
       uaphr: // global
           call _capgG(R1) args: 0, res: 0, upd: 0;
       capgH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capgG() //  [R1]
         { info_tbl: [(capgG,
                       label: block_capgG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capgG: // global
           I64[Sp - 32] = block_capgO_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           _sap0g::P64 = P64[R1 + 7];
           _sap0d::I64 = I64[R1 + 23];
           _sap0e::I64 = I64[R1 + 31];
           _sap0f::I64 = I64[R1 + 39];
           R1 = P64[R1 + 15];
           I64[Sp - 24] = _sap0e::I64;
           I64[Sp - 16] = _sap0f::I64;
           P64[Sp - 8] = _sap0g::P64;
           I64[Sp] = _sap0d::I64;
           Sp = Sp - 32;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _capgO() //  []
         { info_tbl: [(capgO,
                       label: block_capgO_info
                       rep:StackRep [True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capgO: // global
           _sap0e::I64 = I64[Sp + 8];
           _sap0g::P64 = P64[Sp + 24];
           (_sap0p::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 32])));
           (_sap0u::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0e::I64)));
           I64[Sp + 8] = block_caph2_info;
           R1 = _sap0g::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaphs; else goto caph3;
       uaphs: // global
           call _caph2(R1) args: 0, res: 0, upd: 0;
       caph3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caph2() //  [R1]
         { info_tbl: [(caph2,
                       label: block_caph2_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caph2: // global
           _sap0f::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caph9; else goto caphd;
       caph9: // global
           (_sap0A::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0f::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caphd: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sap0I::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0f::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.370792924 UTC

[section ""data" . GHC.Event.Control.closeControl_closure" {
     GHC.Event.Control.closeControl_closure:
         const GHC.Event.Control.closeControl_info;
 },
 GHC.Event.Control.closeControl_entry() //  [R2]
         { info_tbl: [(caphx,
                       label: GHC.Event.Control.closeControl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caphx: // global
           R2 = R2;
           call GHC.Event.Control.closeControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.371477793 UTC

[section ""cstring" . lvl2_raoWU_bytes" {
     lvl2_raoWU_bytes:
         I8[] [101,118,101,110,116,102,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.372200923 UTC

[section ""data" . lvl3_raoWV_closure" {
     lvl3_raoWV_closure:
         const lvl3_raoWV_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_raoWV_entry() //  [R1]
         { info_tbl: [(caphG,
                       label: lvl3_raoWV_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caphG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caphH; else goto caphI;
       caphH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caphI: // global
           (_caphD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caphD::I64 == 0) goto caphF; else goto caphE;
       caphF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caphE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caphD::I64;
           R2 = lvl2_raoWU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.373072579 UTC

[section ""cstring" . lvl4_raoWW_bytes" {
     lvl4_raoWW_bytes:
         I8[] [112,105,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.373797878 UTC

[section ""data" . lvl5_raoWX_closure" {
     lvl5_raoWX_closure:
         const lvl5_raoWX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_raoWX_entry() //  [R1]
         { info_tbl: [(caphP,
                       label: lvl5_raoWX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caphP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caphQ; else goto caphR;
       caphQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caphR: // global
           (_caphM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caphM::I64 == 0) goto caphO; else goto caphN;
       caphO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caphN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caphM::I64;
           R2 = lvl4_raoWW_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.374843473 UTC

[section ""data" . lvl6_raoWY_closure" {
     lvl6_raoWY_closure:
         const lvl6_raoWY_info;
         const 0;
 },
 lvl6_raoWY_entry() //  [R2]
         { info_tbl: [(caphY,
                       label: lvl6_raoWY_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caphY: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl5_raoWX_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.380287569 UTC

[section ""data" . GHC.Event.Control.newControl1_closure" {
     GHC.Event.Control.newControl1_closure:
         const GHC.Event.Control.newControl1_info;
         const 0;
 },
 sat_sap1i_entry() //  [R1]
         { info_tbl: [(capiq,
                       label: sat_sap1i_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capiq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capiC; else goto capiB;
       capiC: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       capiB: // global
           (_sap1f::I64) = call "capi" arg hints:  [‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC17ZCbaseZCSystemziPosixziInternalsZCfcntl(I64[R1 + 7], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 15])));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1f::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sap28_entry() //  [R1]
         { info_tbl: [(capjM,
                       label: sat_sap28_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capjM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capjY; else goto capjX;
       capjY: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       capjX: // global
           (_sap25::I64) = call "capi" arg hints:  [‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC17ZCbaseZCSystemziPosixziInternalsZCfcntl(I64[R1 + 15], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 7])));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap25::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.newControl1_entry() //  [R2]
         { info_tbl: [(capjZ,
                       label: GHC.Event.Control.newControl1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capjZ: // global
           if ((Sp + -80) < SpLim) (likely: False) goto capk0; else goto capk1;
       capk0: // global
           R2 = R2;
           R1 = GHC.Event.Control.newControl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capk1: // global
           I64[Sp - 16] = block_capi5_info;
           _sap0M::P64 = R2;
           R2 = 4;
           R1 = 8;
           P64[Sp - 8] = _sap0M::P64;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _capi5() //  [R1]
         { info_tbl: [(capi5,
                       label: block_capi5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capi5: // global
           _sap0U::I64 = R1 + 16;
           (_sap0Y::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] pipe(_sap0U::I64);
           _sap0Z::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0Y::I64));
           if (_sap0Z::I64 == (-1)) goto capmG; else goto uapn9;
       capmG: // global
           (_sap3t::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap3t::I64;
           Sp = Sp + 16;
           call lvl6_raoWY_entry(R2) args: 8, res: 0, upd: 8;
       uapn9: // global
           I64[Sp - 16] = _sap0U::I64;
           I64[Sp - 8] = _sap0Z::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _capig() args: 0, res: 0, upd: 0;
     }
 },
 _capig() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capig: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capk7; else goto capk6;
       capk7: // global
           HpAlloc = 24;
           I64[Sp - 8] = block_capif_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       capk6: // global
           _sap0U::I64 = I64[Sp];
           _sap12::I64 = %MO_SS_Conv_W32_W64(I32[_sap0U::I64]);
           _sap15::I64 = %MO_SS_Conv_W32_W64(I32[_sap0U::I64 + 4]);
           (_sap19::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_getfl();
           I64[Hp - 16] = sat_sap1i_info;
           I64[Hp - 8] = _sap15::I64;
           I64[Hp] = _sap19::I64;
           I64[Sp - 16] = block_capiD_info;
           R4 = Hp - 15;
           R3 = System.Posix.Internals.setNonBlockingFD3_closure;
           R2 = System.Posix.Internals.fdFileSize_pred_closure+1;
           I64[Sp - 8] = _sap19::I64;
           I64[Sp] = _sap15::I64;
           I64[Sp + 8] = _sap12::I64;
           Sp = Sp - 16;
           call Foreign.C.Error.throwErrnoIfMinus1Retry2_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _capif() //  [R1]
         { info_tbl: [(capif,
                       label: block_capif_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capif: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _capig() args: 0, res: 0, upd: 0;
     }
 },
 _capiD() //  [R1]
         { info_tbl: [(capiD,
                       label: block_capiD_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capiD: // global
           I64[Sp] = block_capiF_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uapng; else goto capiG;
       uapng: // global
           call _capiF(R1) args: 0, res: 0, upd: 0;
       capiG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capiF() //  [R1]
         { info_tbl: [(capiF,
                       label: block_capiF_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capiF: // global
           _sap12::I64 = I64[Sp + 24];
           _sap15::I64 = I64[Sp + 16];
           _sap1n::I64 = I64[R1 + 7];
           (_sap1r::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_nonblock();
           _sap1s::I64 = _sap1n::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1r::I64));
           if (_sap1n::I64 == _sap1s::I64) goto sap1x; else goto capmD;
       capmD: // global
           (_sap3k::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfl();
           (_sap3p::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap15::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap3k::I64)), _sap1s::I64);
           goto sap1x;
       sap1x: // global
           (_sap1C::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfd();
           (_sap1G::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_fd_cloexec();
           (_sap1L::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap12::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1C::I64)), _sap1G::I64);
           if (%MO_SS_Conv_W64_W32(_sap1L::I64) == (-1) :: W32) goto capmv; else goto capkc;
       capmv: // global
           (_sap3e::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap3e::I64;
           Sp = Sp + 48;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       capkc: // global
           (_sap1R::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap15::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1C::I64)), _sap1G::I64);
           if (%MO_SS_Conv_W64_W32(_sap1R::I64) == (-1) :: W32) goto capmp; else goto capkf;
       capmp: // global
           (_sap39::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap39::I64;
           Sp = Sp + 48;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       capkf: // global
           (_sap1W::I64) = call "ccall" arg hints:  [‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] eventfd(0, 0);
           _sap30::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1W::I64));
           if (_sap30::I64 != (-1)) goto capm4; else goto capmf;
       capm4: // global
           I64[Sp - 24] = _sap1C::I64;
           I64[Sp - 16] = _sap1G::I64;
           I64[Sp - 8] = _sap30::I64;
           I64[Sp] = _sap1r::I64;
           Sp = Sp - 24;
           call _capjD() args: 0, res: 0, upd: 0;
       capmf: // global
           I64[Sp - 24] = block_capmc_info;
           R2 = lvl3_raoWV_closure;
           I64[Sp - 16] = _sap1C::I64;
           I64[Sp - 8] = _sap1G::I64;
           I64[Sp] = _sap1r::I64;
           Sp = Sp - 24;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _capmc() //  [R1]
         { info_tbl: [(capmc,
                       label: block_capmc_info
                       rep:StackRep [True, True, True, True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capmc: // global
           I64[Sp] = block_capme_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uapnl; else goto capmi;
       uapnl: // global
           call _capme(R1) args: 0, res: 0, upd: 0;
       capmi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capme() //  [R1]
         { info_tbl: [(capme,
                       label: block_capme_info
                       rep:StackRep [True, True, True, True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capme: // global
           I64[Sp] = I64[Sp + 8];
           I64[Sp + 8] = I64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           call _capjD() args: 0, res: 0, upd: 0;
     }
 },
 _capjD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capjD: // global
           Hp = Hp + 24;
           _sap1Z::I64 = I64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto capkm; else goto capkl;
       capkm: // global
           HpAlloc = 24;
           I64[Sp - 8] = block_capjC_info;
           R1 = _sap1Z::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       capkl: // global
           I64[Hp - 16] = sat_sap28_info;
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = _sap1Z::I64;
           I64[Sp - 8] = block_capkh_info;
           R4 = Hp - 15;
           R3 = System.Posix.Internals.setNonBlockingFD3_closure;
           R2 = System.Posix.Internals.fdFileSize_pred_closure+1;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrnoIfMinus1Retry2_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _capjC() //  [R1]
         { info_tbl: [(capjC,
                       label: block_capjC_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capjC: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _capjD() args: 0, res: 0, upd: 0;
     }
 },
 _capkh() //  [R1]
         { info_tbl: [(capkh,
                       label: block_capkh_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capkh: // global
           I64[Sp] = block_capkj_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uapnj; else goto capko;
       uapnj: // global
           call _capkj(R1) args: 0, res: 0, upd: 0;
       capko: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capkj() //  [R1]
         { info_tbl: [(capkj,
                       label: block_capkj_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capkj: // global
           _sap0M::P64 = P64[Sp + 72];
           _sap1C::I64 = I64[Sp + 8];
           _sap1G::I64 = I64[Sp + 16];
           _sap1Z::I64 = I64[Sp + 24];
           _sap2d::I64 = I64[R1 + 7];
           _sap2e::I64 = _sap2d::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 32]));
           if (_sap2d::I64 == _sap2e::I64) goto sap2j; else goto caplY;
       caplY: // global
           (_sap2U::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfl();
           (_sap2Z::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap1Z::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap2U::I64)), _sap2e::I64);
           goto sap2j;
       sap2j: // global
           (_sap2p::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap1Z::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1C::I64)), _sap1G::I64);
           if (%MO_SS_Conv_W64_W32(_sap2p::I64) == (-1) :: W32) goto caplQ; else goto capl3;
       caplQ: // global
           (_sap2O::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap2O::I64;
           Sp = Sp + 80;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       capl3: // global
           I64[Sp + 16] = block_capl1_info;
           R1 = _sap0M::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uapnk; else goto capl5;
       uapnk: // global
           call _capl1(R1) args: 0, res: 0, upd: 0;
       capl5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capl1() //  [R1]
         { info_tbl: [(capl1,
                       label: block_capl1_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capl1: // global
           if (R1 & 7 == 1) goto caplo; else goto caplK;
       caplo: // global
           I64[Sp] = block_capl9_info;
           R1 = GHC.Types.False_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       caplK: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd(I64[Sp + 8]);
           I64[Sp] = block_caplw_info;
           R1 = GHC.Types.False_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capl9() //  [R1]
         { info_tbl: [(capl9,
                       label: block_capl9_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capl9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caplr; else goto caplq;
       caplr: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caplq: // global
           _sap12::I64 = I64[Sp + 40];
           _sap15::I64 = I64[Sp + 32];
           _sap1Z::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 48]);
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = GHC.Types.False_closure+1;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap12::I64));
           I64[Hp - 8] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap15::I64));
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1Z::I64));
           R1 = Hp - 39;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caplw() //  [R1]
         { info_tbl: [(caplw,
                       label: block_caplw_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caplw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caplN; else goto caplM;
       caplN: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caplM: // global
           _sap12::I64 = I64[Sp + 40];
           _sap15::I64 = I64[Sp + 32];
           _sap1Z::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 48]);
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = GHC.Types.True_closure+2;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap12::I64));
           I64[Hp - 8] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap15::I64));
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1Z::I64));
           R1 = Hp - 39;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.388271029 UTC

[section ""data" . GHC.Event.Control.newControl_closure" {
     GHC.Event.Control.newControl_closure:
         const GHC.Event.Control.newControl_info;
         const 0;
 },
 GHC.Event.Control.newControl_entry() //  [R2]
         { info_tbl: [(capnr,
                       label: GHC.Event.Control.newControl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capnr: // global
           R2 = R2;
           call GHC.Event.Control.newControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.389172687 UTC

[section ""cstring" . lvl7_raoWZ_bytes" {
     lvl7_raoWZ_bytes:
         I8[] [102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,115,105,103,105,110,102,111,95,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.39010477 UTC

[section ""data" . GHC.Event.Control.readControlMessage4_closure" {
     GHC.Event.Control.readControlMessage4_closure:
         const GHC.Event.Control.readControlMessage4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.readControlMessage4_entry() //  [R1]
         { info_tbl: [(capnC,
                       label: GHC.Event.Control.readControlMessage4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capnC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capnD; else goto capnE;
       capnD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capnE: // global
           (_capnx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capnx::I64 == 0) goto capnz; else goto capny;
       capnz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capny: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capnx::I64;
           I64[Sp - 24] = block_capnA_info;
           R2 = lvl7_raoWZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _capnA() //  [R1]
         { info_tbl: [(capnA,
                       label: block_capnA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capnA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.391289994 UTC

[section ""cstring" . lvl8_raoX0_bytes" {
     lvl8_raoX0_bytes:
         I8[] [114,101,97,100,67,111,110,116,114,111,108,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.392136203 UTC

[section ""data" . lvl9_raoX1_closure" {
     lvl9_raoX1_closure:
         const lvl9_raoX1_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_raoX1_entry() //  [R1]
         { info_tbl: [(capnO,
                       label: lvl9_raoX1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capnO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capnP; else goto capnQ;
       capnP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capnQ: // global
           (_capnL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capnL::I64 == 0) goto capnN; else goto capnM;
       capnN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capnM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capnL::I64;
           R2 = lvl8_raoX0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.393450489 UTC

[section ""data" . GHC.Event.Control.readControlMessage3_closure" {
     GHC.Event.Control.readControlMessage3_closure:
         const GHC.Event.Control.readControlMessage3_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage3_entry() //  [R2]
         { info_tbl: [(capnX,
                       label: GHC.Event.Control.readControlMessage3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capnX: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl9_raoX1_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.394362901 UTC

[section ""cstring" . lvl10_raoX2_bytes" {
     lvl10_raoX2_bytes:
         I8[] [114,101,97,100,87,97,107,101,117,112,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.395276451 UTC

[section ""data" . lvl11_raoX3_closure" {
     lvl11_raoX3_closure:
         const lvl11_raoX3_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_raoX3_entry() //  [R1]
         { info_tbl: [(capo6,
                       label: lvl11_raoX3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capo6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capo7; else goto capo8;
       capo7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capo8: // global
           (_capo3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capo3::I64 == 0) goto capo5; else goto capo4;
       capo5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capo4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capo3::I64;
           R2 = lvl10_raoX2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.396520634 UTC

[section ""data" . GHC.Event.Control.readControlMessage2_closure" {
     GHC.Event.Control.readControlMessage2_closure:
         const GHC.Event.Control.readControlMessage2_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage2_entry() //  [R2]
         { info_tbl: [(capof,
                       label: GHC.Event.Control.readControlMessage2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capof: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl11_raoX3_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.399045726 UTC

[section ""data" . GHC.Event.Control.$wreadControlMessage_closure" {
     GHC.Event.Control.$wreadControlMessage_closure:
         const GHC.Event.Control.$wreadControlMessage_info;
         const 0;
 },
 GHC.Event.Control.$wreadControlMessage_entry() //  [R2, R3, R4]
         { info_tbl: [(capor,
                       label: GHC.Event.Control.$wreadControlMessage_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 18} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capor: // global
           if ((Sp + -56) < SpLim) (likely: False) goto capos; else goto capot;
       capos: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wreadControlMessage_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       capot: // global
           if (R4 == R2) goto capoq; else goto capop;
       capoq: // global
           I64[Sp - 16] = block_cappM_info;
           R1 = 8;
           I64[Sp - 8] = R4;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       capop: // global
           I64[Sp - 16] = block_capov_info;
           R2 = 1;
           R1 = 1;
           I64[Sp - 8] = R4;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _cappM() //  [R1]
         { info_tbl: [(cappM,
                       label: block_cappM_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cappM: // global
           (_sap4I::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), R1 + 16, 8);
           if (_sap4I::I64 == (-1)) goto capq2; else goto capq1;
       capq2: // global
           (_sap4O::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap4O::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.readControlMessage2_entry(R2) args: 8, res: 0, upd: 8;
       capq1: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgWakeup_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _capov() //  [R1]
         { info_tbl: [(capov,
                       label: block_capov_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capov: // global
           _sap3N::I64 = R1 + 16;
           (_sap3S::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), _sap3N::I64, 1);
           if (_sap3S::I64 == (-1)) goto cappK; else goto cappJ;
       cappK: // global
           (_sap4v::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap4v::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.readControlMessage3_entry(R2) args: 8, res: 0, upd: 8;
       cappJ: // global
           _sap3X::I64 = %MO_UU_Conv_W8_W64(I8[_sap3N::I64]);
           if (_sap3X::I64 == 254) goto cappG; else goto uapqd;
       cappG: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgDie_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uapqd: // global
           if (_sap3X::I64 == 255) goto cappH; else goto capoM;
       cappH: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgWakeup_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       capoM: // global
           I64[Sp - 16] = block_capoP_info;
           I64[Sp - 8] = _sap3X::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           _uapqg::P64 = CurrentTSO;
           I64[I64[_uapqg::P64 + 24] + 16] = Sp;
           _uapqh::I64 = CurrentNursery;
           P64[_uapqh::I64 + 8] = Hp + 8;
           I64[_uapqg::P64 + 104] = I64[_uapqg::P64 + 104] - ((Hp + 8) - I64[_uapqh::I64]);
           (_uapqe::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_sap41::I64) = call "ccall" arg hints:  []  result hints:  [] __hscore_sizeof_siginfo_t();
           (_uapqf::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_uapqe::I64);
           BaseReg = _uapqf::I64;
           _uapqi::P64 = CurrentTSO;
           _uapqj::P64 = I64[_uapqi::P64 + 24];
           Sp = I64[_uapqj::P64 + 16];
           SpLim = _uapqj::P64 + 192;
           HpAlloc = 0;
           _uapqk::I64 = CurrentNursery;
           _uapql::I64 = I64[_uapqk::I64 + 8];
           Hp = _uapql::I64 - 8;
           _uapqm::I64 = I64[_uapqk::I64];
           HpLim = _uapqm::I64 + ((%MO_SS_Conv_W32_W64(I32[_uapqk::I64 + 48]) << 12) - 1);
           I64[_uapqi::P64 + 104] = I64[_uapqi::P64 + 104] + (_uapql::I64 - _uapqm::I64);
           R1 = _sap41::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capoP() //  [R1]
         { info_tbl: [(capoP,
                       label: block_capoP_info
                       rep:StackRep [True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capoP: // global
           if (%MO_S_Ge_W64(R1, 0)) goto cappi; else goto cappF;
       cappi: // global
           I64[Sp - 16] = block_capoY_info;
           _sap41::I64 = R1;
           _sap42::I64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sap42::I64;
           I64[Sp] = _sap41::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       cappF: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _capoY() //  [R1]
         { info_tbl: [(capoY,
                       label: block_capoY_info
                       rep:StackRep [True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capoY: // global
           I64[Sp] = block_capp0_info;
           _sap46::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _sap46::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capp0() //  [R1]
         { info_tbl: [(capp0,
                       label: block_capp0_info
                       rep:StackRep [False, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capp0: // global
           _sap41::I64 = I64[Sp + 16];
           _sap4a::I64 = R1 + 16;
           (_sap4f::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 40])), _sap4a::I64, _sap41::I64);
           I64[Sp - 8] = block_cappc_info;
           R2 = _sap41::I64;
           I64[Sp] = _sap4f::I64;
           I64[Sp + 16] = _sap4a::I64;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cappc() //  [R1]
         { info_tbl: [(cappc,
                       label: block_cappc_info
                       rep:StackRep [True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cappc: // global
           I64[Sp] = block_cappg_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cappg() //  [R1]
         { info_tbl: [(cappg,
                       label: block_cappg_info
                       rep:StackRep [True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cappg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cappr; else goto cappq;
       cappr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cappq: // global
           if (I64[Sp + 8] == R1) goto cappD; else goto cappE;
       cappD: // global
           I64[Hp - 48] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 16];
           _sap3M::P64 = P64[Sp + 40];
           _sap3X::I64 = I64[Sp + 32];
           _sap4a::I64 = I64[Sp + 24];
           _cappv::P64 = Hp - 46;
           call MO_Touch(_cappv::P64);
           call MO_Touch(_sap3M::P64);
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = _cappv::P64;
           I64[Hp - 8] = _sap4a::I64;
           I64[Hp] = _sap3X::I64;
           R1 = Hp - 21;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cappE: // global
           Hp = Hp - 56;
           R1 = GHC.Event.Control.readControlMessage4_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.403545952 UTC

[section ""data" . GHC.Event.Control.readControlMessage1_closure" {
     GHC.Event.Control.readControlMessage1_closure:
         const GHC.Event.Control.readControlMessage1_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage1_entry() //  [R2, R3]
         { info_tbl: [(capqv,
                       label: GHC.Event.Control.readControlMessage1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capqv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capqz; else goto capqA;
       capqz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.readControlMessage1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capqA: // global
           I64[Sp - 16] = block_capqs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapqI; else goto capqt;
       uapqI: // global
           call _capqs(R1) args: 0, res: 0, upd: 0;
       capqt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capqs() //  [R1]
         { info_tbl: [(capqs,
                       label: block_capqs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capqs: // global
           I64[Sp - 8] = block_capqy_info;
           _sap4Y::P64 = P64[R1 + 15];
           _sap4W::I64 = I64[R1 + 39];
           R1 = P64[Sp + 8];
           P64[Sp] = _sap4Y::P64;
           I64[Sp + 8] = _sap4W::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapqH; else goto capqC;
       uapqH: // global
           call _capqy(R1) args: 0, res: 0, upd: 0;
       capqC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capqy() //  [R1]
         { info_tbl: [(capqy,
                       label: block_capqy_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capqy: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wreadControlMessage_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.407506686 UTC

[section ""data" . GHC.Event.Control.readControlMessage_closure" {
     GHC.Event.Control.readControlMessage_closure:
         const GHC.Event.Control.readControlMessage_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage_entry() //  [R2, R3]
         { info_tbl: [(capqN,
                       label: GHC.Event.Control.readControlMessage_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capqN: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Control.readControlMessage1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.408675732 UTC

[section ""data" . GHC.Event.Control.W_closure" {
     GHC.Event.Control.W_closure:
         const GHC.Event.Control.W_info;
 },
 GHC.Event.Control.W_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capqR: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.Control.W_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.W_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(capqW,
                       label: GHC.Event.Control.W_info
                       rep:HeapRep static {
                             Fun {arity: 5
                                  fun_type: ArgGen [True, True, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capqW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto capr0; else goto capqZ;
       capr0: // global
           HpAlloc = 48;
           R1 = GHC.Event.Control.W_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       capqZ: // global
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.410053137 UTC

[section ""data" . GHC.Event.Control.CMsgWakeup_closure" {
     GHC.Event.Control.CMsgWakeup_closure:
         const GHC.Event.Control.CMsgWakeup_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.410711644 UTC

[section ""data" . GHC.Event.Control.CMsgDie_closure" {
     GHC.Event.Control.CMsgDie_closure:
         const GHC.Event.Control.CMsgDie_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.411522773 UTC

[section ""data" . GHC.Event.Control.CMsgSignal_closure" {
     GHC.Event.Control.CMsgSignal_closure:
         const GHC.Event.Control.CMsgSignal_info;
 },
 GHC.Event.Control.CMsgSignal_entry() //  [R2, R3, R4]
         { info_tbl: [(capr6,
                       label: GHC.Event.Control.CMsgSignal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 18} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capr6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto capra; else goto capr9;
       capra: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.CMsgSignal_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       capr9: // global
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = R2;
           I64[Hp] = R4;
           R1 = Hp - 21;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.41255926 UTC

[GHC.Event.Control.W_con_entry() //  [R1]
         { info_tbl: [(caprb,
                       label: GHC.Event.Control.W_con_info
                       rep:HeapRep 2 ptrs 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,87]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caprb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.413503418 UTC

[GHC.Event.Control.CMsgWakeup_con_entry() //  [R1]
         { info_tbl: [(caprc,
                       label: GHC.Event.Control.CMsgWakeup_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,87,97,107,101,117,112]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caprc: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.414293839 UTC

[GHC.Event.Control.CMsgDie_con_entry() //  [R1]
         { info_tbl: [(caprd,
                       label: GHC.Event.Control.CMsgDie_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,68,105,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caprd: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.415111555 UTC

[GHC.Event.Control.CMsgSignal_con_entry() //  [R1]
         { info_tbl: [(capre,
                       label: GHC.Event.Control.CMsgSignal_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,83,105,103,110,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capre: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.415946165 UTC

[section ""relreadonly" . Sap8o_srt" {
     Sap8o_srt:
         const GHC.Ptr.$w$cshowsPrec_closure;
         const GHC.Event.Control.$fShowControlMessage3_closure;
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure;
         const GHC.Event.Control.$fShowControlMessage5_closure;
         const GHC.Event.Control.$fShowControlMessage7_closure;
         const GHC.Event.Control.$fShowControlMessage_$cshow_closure;
         const GHC.Event.Control.$fShowControlMessage1_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Control.$wsendWakeup_closure;
         const GHC.Event.Control.sendWakeup2_closure;
         const GHC.Event.Control.sendWakeup1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_raoWT_closure;
         const GHC.Event.Control.$wsendDie_closure;
         const GHC.Event.Control.sendDie2_closure;
         const GHC.Event.Control.sendDie1_closure;
         const lvl5_raoWX_closure;
         const Foreign.C.Error.throwErrnoIfMinus1Retry2_closure;
         const System.Posix.Internals.setCloseOnExec2_closure;
         const System.Posix.Internals.setNonBlockingFD3_closure;
         const GHC.Event.Control.newControl1_closure;
         const lvl3_raoWV_closure;
         const lvl6_raoWY_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl9_raoX1_closure;
         const lvl11_raoX3_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const GHC.Event.Control.$wreadControlMessage_closure;
         const GHC.Event.Control.readControlMessage2_closure;
         const GHC.Event.Control.readControlMessage3_closure;
         const GHC.Event.Control.readControlMessage4_closure;
         const GHC.Event.Control.readControlMessage1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.416882393 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:05:24.418488717 UTC

[section ""data" . GHC.Event.Control.$WW_closure" {
     GHC.Event.Control.$WW_closure:
         const GHC.Event.Control.$WW_info;
 },
 GHC.Event.Control.$WW_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(caprm,
                       label: GHC.Event.Control.$WW_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caprm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caprK; else goto caprL;
       caprK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$WW_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caprL: // global
           I64[Sp - 40] = block_caprj_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaprU; else goto caprk;
       uaprU: // global
           call _caprj(R1) args: 0, res: 0, upd: 0;
       caprk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caprj() //  [R1]
         { info_tbl: [(caprj,
                       label: block_caprj_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caprj: // global
           I64[Sp] = block_caprp_info;
           _saoXb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saoXb::I64;
           if (R1 & 7 != 0) goto uaprT; else goto caprq;
       uaprT: // global
           call _caprp(R1) args: 0, res: 0, upd: 0;
       caprq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caprp() //  [R1]
         { info_tbl: [(caprp,
                       label: block_caprp_info
                       rep:StackRep [True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caprp: // global
           I64[Sp] = block_capru_info;
           _saoXd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saoXd::I64;
           if (R1 & 7 != 0) goto uaprV; else goto caprv;
       uaprV: // global
           call _capru(R1) args: 0, res: 0, upd: 0;
       caprv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capru() //  [R1]
         { info_tbl: [(capru,
                       label: block_capru_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capru: // global
           I64[Sp] = block_caprz_info;
           _saoXf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _saoXf::I64;
           if (R1 & 7 != 0) goto uaprW; else goto caprA;
       uaprW: // global
           call _caprz(R1) args: 0, res: 0, upd: 0;
       caprA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caprz() //  [R1]
         { info_tbl: [(caprz,
                       label: block_caprz_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caprz: // global
           I64[Sp] = block_caprE_info;
           _saoXg::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _saoXg::P64;
           if (R1 & 7 != 0) goto uaprX; else goto caprF;
       uaprX: // global
           call _caprE(R1) args: 0, res: 0, upd: 0;
       caprF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caprE() //  [R1]
         { info_tbl: [(caprE,
                       label: block_caprE_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caprE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caprS; else goto caprR;
       caprS: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caprR: // global
           _saoXi::P64 = P64[R1 + 7];
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _saoXi::P64;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 39;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.421345013 UTC

[section ""data" . GHC.Event.Control.$WCMsgSignal_closure" {
     GHC.Event.Control.$WCMsgSignal_closure:
         const GHC.Event.Control.$WCMsgSignal_info;
 },
 GHC.Event.Control.$WCMsgSignal_entry() //  [R2, R3]
         { info_tbl: [(caps5,
                       label: GHC.Event.Control.$WCMsgSignal_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caps5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capse; else goto capsf;
       capse: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$WCMsgSignal_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capsf: // global
           I64[Sp - 16] = block_caps2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapsl; else goto caps3;
       uapsl: // global
           call _caps2(R1) args: 0, res: 0, upd: 0;
       caps3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caps2() //  [R1]
         { info_tbl: [(caps2,
                       label: block_caps2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caps2: // global
           I64[Sp - 8] = block_caps8_info;
           _saoXn::P64 = P64[R1 + 7];
           _saoXm::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _saoXn::P64;
           I64[Sp + 8] = _saoXm::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapsk; else goto caps9;
       uapsk: // global
           call _caps8(R1) args: 0, res: 0, upd: 0;
       caps9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caps8() //  [R1]
         { info_tbl: [(caps8,
                       label: block_caps8_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caps8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto capsj; else goto capsi;
       capsj: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capsi: // global
           _saoXp::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _saoXp::I64;
           R1 = Hp - 21;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.423026971 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage8_bytes" {
     GHC.Event.Control.$fShowControlMessage8_bytes:
         I8[] [67,77,115,103,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.42395243 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage7_closure" {
     GHC.Event.Control.$fShowControlMessage7_closure:
         const GHC.Event.Control.$fShowControlMessage7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage7_entry() //  [R1]
         { info_tbl: [(capss,
                       label: GHC.Event.Control.$fShowControlMessage7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capss: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capst; else goto capsu;
       capst: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capsu: // global
           (_capsp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capsp::I64 == 0) goto capsr; else goto capsq;
       capsr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capsq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capsp::I64;
           R2 = GHC.Event.Control.$fShowControlMessage8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.425044735 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage6_bytes" {
     GHC.Event.Control.$fShowControlMessage6_bytes:
         I8[] [67,77,115,103,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.425962667 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage5_closure" {
     GHC.Event.Control.$fShowControlMessage5_closure:
         const GHC.Event.Control.$fShowControlMessage5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage5_entry() //  [R1]
         { info_tbl: [(capsB,
                       label: GHC.Event.Control.$fShowControlMessage5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capsB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capsC; else goto capsD;
       capsC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capsD: // global
           (_capsy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capsy::I64 == 0) goto capsA; else goto capsz;
       capsA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capsz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capsy::I64;
           R2 = GHC.Event.Control.$fShowControlMessage6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.427053105 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage4_bytes" {
     GHC.Event.Control.$fShowControlMessage4_bytes:
         I8[] [67,77,115,103,83,105,103,110,97,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.427918392 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage3_closure" {
     GHC.Event.Control.$fShowControlMessage3_closure:
         const GHC.Event.Control.$fShowControlMessage3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage3_entry() //  [R1]
         { info_tbl: [(capsK,
                       label: GHC.Event.Control.$fShowControlMessage3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capsK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capsL; else goto capsM;
       capsL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capsM: // global
           (_capsH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capsH::I64 == 0) goto capsJ; else goto capsI;
       capsJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capsI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capsH::I64;
           R2 = GHC.Event.Control.$fShowControlMessage4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.431200601 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_info;
         const 0;
 },
 sat_saoXD_entry() //  [R1]
         { info_tbl: [(capth,
                       label: sat_saoXD_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capth: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capti; else goto captj;
       capti: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       captj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_capte_info;
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 24];
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _capte() //  [R1, R2]
         { info_tbl: [(capte,
                       label: block_capte_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capte: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto captm; else goto captl;
       captm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       captl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saoXI_entry() //  [R1]
         { info_tbl: [(captr,
                       label: sat_saoXI_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       captr: // global
           _saoXI::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto capts; else goto captt;
       captt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto captv; else goto captu;
       captv: // global
           HpAlloc = 56;
           goto capts;
       capts: // global
           R1 = _saoXI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       captu: // global
           _saoXs::P64 = P64[_saoXI::P64 + 16];
           _saoXu::I64 = I64[_saoXI::P64 + 24];
           _saoXw::I64 = I64[_saoXI::P64 + 32];
           I64[Hp - 48] = sat_saoXD_info;
           P64[Hp - 32] = _saoXs::P64;
           I64[Hp - 24] = _saoXw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp - 8] = block_capto_info;
           R3 = Hp - 14;
           R2 = _saoXu::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _capto() //  [R1, R2]
         { info_tbl: [(capto,
                       label: block_capto_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capto: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capty; else goto captx;
       capty: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       captx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saoXN_entry() //  [R1]
         { info_tbl: [(captQ,
                       label: sat_saoXN_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       captQ: // global
           _saoXN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto captR; else goto captS;
       captS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto captU; else goto captT;
       captU: // global
           HpAlloc = 24;
           goto captR;
       captR: // global
           R1 = _saoXN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       captT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saoXN::P64;
           _saoXs::P64 = P64[_saoXN::P64 + 16];
           _saoXw::I64 = I64[_saoXN::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _saoXs::P64;
           I64[Sp - 24] = block_captN_info;
           R4 = Hp - 14;
           R3 = _saoXw::I64;
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _captN() //  [R1, R2]
         { info_tbl: [(captN,
                       label: block_captN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       captN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto captX; else goto captW;
       captX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       captW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saoXS_entry() //  [R1]
         { info_tbl: [(capu2,
                       label: sat_saoXS_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capu2: // global
           _saoXS::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto capu3; else goto capu4;
       capu4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto capu6; else goto capu5;
       capu6: // global
           HpAlloc = 56;
           goto capu3;
       capu3: // global
           R1 = _saoXS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capu5: // global
           _saoXs::P64 = P64[_saoXS::P64 + 16];
           _saoXu::I64 = I64[_saoXS::P64 + 24];
           _saoXw::I64 = I64[_saoXS::P64 + 32];
           I64[Hp - 48] = sat_saoXN_info;
           P64[Hp - 32] = _saoXs::P64;
           I64[Hp - 24] = _saoXw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp - 8] = block_captZ_info;
           R3 = Hp - 14;
           R2 = _saoXu::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _captZ() //  [R1, R2]
         { info_tbl: [(captZ,
                       label: block_captZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       captZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capu9; else goto capu8;
       capu9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       capu8: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saoXT_entry() //  [R1]
         { info_tbl: [(capua,
                       label: sat_saoXT_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capua: // global
           _saoXT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto capub; else goto capuc;
       capuc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto capue; else goto capud;
       capue: // global
           HpAlloc = 40;
           goto capub;
       capub: // global
           R1 = _saoXT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capud: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saoXT::P64;
           _saoXs::P64 = P64[_saoXT::P64 + 16];
           _saoXu::I64 = I64[_saoXT::P64 + 24];
           _saoXw::I64 = I64[_saoXT::P64 + 32];
           I64[Hp - 32] = sat_saoXS_info;
           P64[Hp - 16] = _saoXs::P64;
           I64[Hp - 8] = _saoXu::I64;
           I64[Hp] = _saoXw::I64;
           R3 = Hp - 32;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.Control.$fShowControlMessage_$cshowsPrec_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(capuk,
                       label: GHC.Event.Control.$fShowControlMessage_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capuk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto capul; else goto capum;
       capul: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       capum: // global
           I64[Sp - 24] = block_capsR_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uapuB; else goto capsS;
       uapuB: // global
           call _capsR(R1) args: 0, res: 0, upd: 0;
       capsS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capsR() //  [R1]
         { info_tbl: [(capsR,
                       label: block_capsR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capsR: // global
           _capuj::P64 = R1 & 7;
           if (_capuj::P64 < 3) goto uapuz; else goto capui;
       uapuz: // global
           _saoXs::P64 = P64[Sp + 16];
           if (_capuj::P64 < 2) goto capug; else goto capuh;
       capug: // global
           R3 = _saoXs::P64;
           R2 = GHC.Event.Control.$fShowControlMessage7_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       capuh: // global
           R3 = _saoXs::P64;
           R2 = GHC.Event.Control.$fShowControlMessage5_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       capui: // global
           I64[Sp - 8] = block_capsY_info;
           _saoXu::I64 = I64[R1 + 13];
           _saoXw::I64 = I64[R1 + 21];
           R1 = P64[Sp + 8];
           I64[Sp] = _saoXw::I64;
           I64[Sp + 8] = _saoXu::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapuA; else goto capsZ;
       uapuA: // global
           call _capsY(R1) args: 0, res: 0, upd: 0;
       capsZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capsY() //  [R1]
         { info_tbl: [(capsY,
                       label: block_capsY_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capsY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto capuu; else goto caput;
       capuu: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caput: // global
           _saoXs::P64 = P64[Sp + 24];
           _saoXu::I64 = I64[Sp + 16];
           _saoXw::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto capuw; else goto capuy;
       capuw: // global
           I64[Hp - 56] = sat_saoXI_info;
           P64[Hp - 40] = _saoXs::P64;
           I64[Hp - 32] = _saoXu::I64;
           I64[Hp - 24] = _saoXw::I64;
           _capt6::P64 = Hp - 56;
           Hp = Hp - 24;
           R3 = _capt6::P64;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       capuy: // global
           I64[Hp - 56] = sat_saoXT_info;
           P64[Hp - 40] = _saoXs::P64;
           I64[Hp - 32] = _saoXu::I64;
           I64[Hp - 24] = _saoXw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.438144968 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshow_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshow_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshow_info;
         const 0;
 },
 sat_saoY2_entry() //  [R1]
         { info_tbl: [(capuY,
                       label: sat_saoY2_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capuY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capuZ; else goto capv0;
       capuZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capv0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_capuV_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _capuV() //  [R1, R2]
         { info_tbl: [(capuV,
                       label: block_capuV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capuV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capv3; else goto capv2;
       capv3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       capv2: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saoY7_entry() //  [R1]
         { info_tbl: [(capv8,
                       label: sat_saoY7_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capv8: // global
           _saoY7::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto capv9; else goto capva;
       capva: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto capvc; else goto capvb;
       capvc: // global
           HpAlloc = 48;
           goto capv9;
       capv9: // global
           R1 = _saoY7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capvb: // global
           _saoXW::I64 = I64[_saoY7::P64 + 16];
           _saoXY::I64 = I64[_saoY7::P64 + 24];
           I64[Hp - 40] = sat_saoY2_info;
           I64[Hp - 24] = _saoXY::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_capv5_info;
           R3 = Hp - 14;
           R2 = _saoXW::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _capv5() //  [R1, R2]
         { info_tbl: [(capv5,
                       label: block_capv5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capv5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capvf; else goto capve;
       capvf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       capve: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.$fShowControlMessage_$cshow_entry() //  [R2]
         { info_tbl: [(capvl,
                       label: GHC.Event.Control.$fShowControlMessage_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capvl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capvm; else goto capvn;
       capvm: // global
           R2 = R2;
           R1 = GHC.Event.Control.$fShowControlMessage_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capvn: // global
           I64[Sp - 8] = block_capuG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapvw; else goto capuH;
       uapvw: // global
           call _capuG(R1) args: 0, res: 0, upd: 0;
       capuH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capuG() //  [R1]
         { info_tbl: [(capuG,
                       label: block_capuG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capuG: // global
           _capvk::P64 = R1 & 7;
           if (_capvk::P64 < 3) goto uapvv; else goto capvj;
       uapvv: // global
           if (_capvk::P64 < 2) goto capvh; else goto capvi;
       capvh: // global
           R1 = GHC.Event.Control.$fShowControlMessage7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       capvi: // global
           R1 = GHC.Event.Control.$fShowControlMessage5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       capvj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto capvu; else goto capvt;
       capvu: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capvt: // global
           _saoXW::I64 = I64[R1 + 13];
           _saoXY::I64 = I64[R1 + 21];
           I64[Hp - 24] = sat_saoY7_info;
           I64[Hp - 8] = _saoXW::I64;
           I64[Hp] = _saoXY::I64;
           R3 = Hp - 24;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.441036201 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage2_closure" {
     GHC.Event.Control.$fShowControlMessage2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.441871016 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage1_closure" {
     GHC.Event.Control.$fShowControlMessage1_closure:
         const GHC.Event.Control.$fShowControlMessage1_info;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage1_entry() //  [R2, R3]
         { info_tbl: [(capvB,
                       label: GHC.Event.Control.$fShowControlMessage1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capvB: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Control.$fShowControlMessage2_closure+1;
           call GHC.Event.Control.$fShowControlMessage_$cshowsPrec_entry(R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.442902176 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshowList_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshowList_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshowList_info;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage_$cshowList_entry() //  [R2,
                                                                R3]
         { info_tbl: [(capvI,
                       label: GHC.Event.Control.$fShowControlMessage_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capvI: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Control.$fShowControlMessage1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.443763006 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_closure" {
     GHC.Event.Control.$fShowControlMessage_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure+3;
         const GHC.Event.Control.$fShowControlMessage_$cshow_closure+1;
         const GHC.Event.Control.$fShowControlMessage_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.444838816 UTC

[section ""data" . GHC.Event.Control.controlIsDead_closure" {
     GHC.Event.Control.controlIsDead_closure:
         const GHC.Event.Control.controlIsDead_info;
 },
 GHC.Event.Control.controlIsDead_entry() //  [R2]
         { info_tbl: [(capvS,
                       label: GHC.Event.Control.controlIsDead_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capvS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capvW; else goto capvX;
       capvW: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlIsDead_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capvX: // global
           I64[Sp - 8] = block_capvP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapw1; else goto capvQ;
       uapw1: // global
           call _capvP(R1) args: 0, res: 0, upd: 0;
       capvQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capvP() //  [R1]
         { info_tbl: [(capvP,
                       label: block_capvP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capvP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capw0; else goto capvZ;
       capw0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capvZ: // global
           _saoYg::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _saoYg::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.446259008 UTC

[section ""data" . GHC.Event.Control.didRegisterWakeupFd_closure" {
     GHC.Event.Control.didRegisterWakeupFd_closure:
         const GHC.Event.Control.didRegisterWakeupFd_info;
 },
 GHC.Event.Control.didRegisterWakeupFd_entry() //  [R2]
         { info_tbl: [(capw9,
                       label: GHC.Event.Control.didRegisterWakeupFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capw9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capwa; else goto capwb;
       capwa: // global
           R2 = R2;
           R1 = GHC.Event.Control.didRegisterWakeupFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capwb: // global
           I64[Sp - 8] = block_capw6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapwf; else goto capw7;
       uapwf: // global
           call _capw6(R1) args: 0, res: 0, upd: 0;
       capw7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capw6() //  [R1]
         { info_tbl: [(capw6,
                       label: block_capw6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capw6: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.447541682 UTC

[section ""data" . GHC.Event.Control.controlEventFd_closure" {
     GHC.Event.Control.controlEventFd_closure:
         const GHC.Event.Control.controlEventFd_info;
 },
 GHC.Event.Control.controlEventFd_entry() //  [R2]
         { info_tbl: [(capwn,
                       label: GHC.Event.Control.controlEventFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capwn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capwr; else goto capws;
       capwr: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlEventFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capws: // global
           I64[Sp - 8] = block_capwk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapww; else goto capwl;
       uapww: // global
           call _capwk(R1) args: 0, res: 0, upd: 0;
       capwl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capwk() //  [R1]
         { info_tbl: [(capwk,
                       label: block_capwk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capwk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capwv; else goto capwu;
       capwv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capwu: // global
           _saoYs::I64 = I64[R1 + 39];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saoYs::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.448880206 UTC

[section ""data" . GHC.Event.Control.controlWriteFd_closure" {
     GHC.Event.Control.controlWriteFd_closure:
         const GHC.Event.Control.controlWriteFd_info;
 },
 GHC.Event.Control.controlWriteFd_entry() //  [R2]
         { info_tbl: [(capwE,
                       label: GHC.Event.Control.controlWriteFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capwE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capwI; else goto capwJ;
       capwI: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlWriteFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capwJ: // global
           I64[Sp - 8] = block_capwB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapwN; else goto capwC;
       uapwN: // global
           call _capwB(R1) args: 0, res: 0, upd: 0;
       capwC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capwB() //  [R1]
         { info_tbl: [(capwB,
                       label: block_capwB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capwB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capwM; else goto capwL;
       capwM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capwL: // global
           _saoYy::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saoYy::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.450379946 UTC

[section ""data" . GHC.Event.Control.controlReadFd_closure" {
     GHC.Event.Control.controlReadFd_closure:
         const GHC.Event.Control.controlReadFd_info;
 },
 GHC.Event.Control.controlReadFd_entry() //  [R2]
         { info_tbl: [(capwV,
                       label: GHC.Event.Control.controlReadFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capwV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capwZ; else goto capx0;
       capwZ: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlReadFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capx0: // global
           I64[Sp - 8] = block_capwS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapx4; else goto capwT;
       uapx4: // global
           call _capwS(R1) args: 0, res: 0, upd: 0;
       capwT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capwS() //  [R1]
         { info_tbl: [(capwS,
                       label: block_capwS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capwS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capx3; else goto capx2;
       capx3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capx2: // global
           _saoYE::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saoYE::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.451554717 UTC

[section ""data" . GHC.Event.Control.wakeupReadFd_closure" {
     GHC.Event.Control.wakeupReadFd_closure:
         const GHC.Event.Control.wakeupReadFd_info;
 },
 GHC.Event.Control.wakeupReadFd_entry() //  [R2]
         { info_tbl: [(capx9,
                       label: GHC.Event.Control.wakeupReadFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capx9: // global
           R2 = R2;
           call GHC.Event.Control.controlEventFd_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.452288593 UTC

[section ""cstring" . GHC.Event.Control.$trModule4_bytes" {
     GHC.Event.Control.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.452882451 UTC

[section ""data" . GHC.Event.Control.$trModule3_closure" {
     GHC.Event.Control.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.453513189 UTC

[section ""cstring" . GHC.Event.Control.$trModule2_bytes" {
     GHC.Event.Control.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.454066544 UTC

[section ""data" . GHC.Event.Control.$trModule1_closure" {
     GHC.Event.Control.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.454626149 UTC

[section ""data" . GHC.Event.Control.$trModule_closure" {
     GHC.Event.Control.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Control.$trModule3_closure+1;
         const GHC.Event.Control.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.45519265 UTC

[section ""data" . $krep_raoWE_closure" {
     $krep_raoWE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.455762635 UTC

[section ""data" . $krep1_raoWF_closure" {
     $krep1_raoWF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.456362592 UTC

[section ""data" . $krep2_raoWG_closure" {
     $krep2_raoWG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.456947625 UTC

[section ""data" . $krep3_raoWH_closure" {
     $krep3_raoWH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.45754518 UTC

[section ""data" . $krep4_raoWI_closure" {
     $krep4_raoWI_closure:
         const :_con_info;
         const $krep1_raoWF_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.458128807 UTC

[section ""data" . $krep5_raoWJ_closure" {
     $krep5_raoWJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep4_raoWI_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.458699629 UTC

[section ""data" . $krep6_raoWK_closure" {
     $krep6_raoWK_closure:
         const :_con_info;
         const $krep2_raoWG_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.460895102 UTC

[section ""data" . $krep7_raoWL_closure" {
     $krep7_raoWL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep6_raoWK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.461721569 UTC

[section ""cstring" . GHC.Event.Control.$tcControlMessage2_bytes" {
     GHC.Event.Control.$tcControlMessage2_bytes:
         I8[] [67,111,110,116,114,111,108,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.462276911 UTC

[section ""data" . GHC.Event.Control.$tcControlMessage1_closure" {
     GHC.Event.Control.$tcControlMessage1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tcControlMessage2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.46285202 UTC

[section ""data" . GHC.Event.Control.$tcControlMessage_closure" {
     GHC.Event.Control.$tcControlMessage_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tcControlMessage1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13490094119359668037;
         const 2953272121777407512;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.463465257 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie1_closure" {
     GHC.Event.Control.$tc'CMsgDie1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControlMessage_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.464005825 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgWakeup2_bytes" {
     GHC.Event.Control.$tc'CMsgWakeup2_bytes:
         I8[] [39,67,77,115,103,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.464529006 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgWakeup1_closure" {
     GHC.Event.Control.$tc'CMsgWakeup1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgWakeup2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.465099629 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgWakeup_closure" {
     GHC.Event.Control.$tc'CMsgWakeup_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgWakeup1_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 7148775915826095055;
         const 6381666496233651559;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.465760457 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgDie3_bytes" {
     GHC.Event.Control.$tc'CMsgDie3_bytes:
         I8[] [39,67,77,115,103,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.466311937 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie2_closure" {
     GHC.Event.Control.$tc'CMsgDie2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgDie3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.466876309 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie_closure" {
     GHC.Event.Control.$tc'CMsgDie_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgDie2_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 2337574862383861426;
         const 4640161931169225929;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.467476696 UTC

[section ""data" . $krep8_raoWM_closure" {
     $krep8_raoWM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_raoWE_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.468042619 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal1_closure" {
     GHC.Event.Control.$tc'CMsgSignal1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_raoWJ_closure+1;
         const $krep8_raoWM_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.468608058 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgSignal3_bytes" {
     GHC.Event.Control.$tc'CMsgSignal3_bytes:
         I8[] [39,67,77,115,103,83,105,103,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.469151853 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal2_closure" {
     GHC.Event.Control.$tc'CMsgSignal2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgSignal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.469771105 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal_closure" {
     GHC.Event.Control.$tc'CMsgSignal_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgSignal2_closure+1;
         const GHC.Event.Control.$tc'CMsgSignal1_closure+4;
         const 14616621783190690564;
         const 9307773026781339016;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.470380066 UTC

[section ""cstring" . GHC.Event.Control.$tcControl2_bytes" {
     GHC.Event.Control.$tcControl2_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.470945257 UTC

[section ""data" . GHC.Event.Control.$tcControl1_closure" {
     GHC.Event.Control.$tcControl1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tcControl2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.471486654 UTC

[section ""data" . GHC.Event.Control.$tcControl_closure" {
     GHC.Event.Control.$tcControl_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tcControl1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10901861211350082240;
         const 15092011187582559326;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.472111506 UTC

[section ""data" . $krep9_raoWN_closure" {
     $krep9_raoWN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControl_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.472664052 UTC

[section ""data" . $krep10_raoWO_closure" {
     $krep10_raoWO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_raoWL_closure+1;
         const $krep9_raoWN_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.473233737 UTC

[section ""data" . $krep11_raoWP_closure" {
     $krep11_raoWP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_raoWG_closure+1;
         const $krep10_raoWO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.473828003 UTC

[section ""data" . $krep12_raoWQ_closure" {
     $krep12_raoWQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep11_raoWP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.474428955 UTC

[section ""data" . $krep13_raoWR_closure" {
     $krep13_raoWR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep12_raoWQ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.475001771 UTC

[section ""data" . GHC.Event.Control.$tc'W1_closure" {
     GHC.Event.Control.$tc'W1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep13_raoWR_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.475577977 UTC

[section ""cstring" . GHC.Event.Control.$tc'W3_bytes" {
     GHC.Event.Control.$tc'W3_bytes:
         I8[] [39,87]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.476192841 UTC

[section ""data" . GHC.Event.Control.$tc'W2_closure" {
     GHC.Event.Control.$tc'W2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'W3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.476749375 UTC

[section ""data" . GHC.Event.Control.$tc'W_closure" {
     GHC.Event.Control.$tc'W_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'W2_closure+1;
         const GHC.Event.Control.$tc'W1_closure+4;
         const 17903566110422877322;
         const 1788372901503945479;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.478359823 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_$c==_closure" {
     GHC.Event.Control.$fEqControlMessage_$c==_closure:
         const GHC.Event.Control.$fEqControlMessage_$c==_info;
 },
 GHC.Event.Control.$fEqControlMessage_$c==_entry() //  [R2, R3]
         { info_tbl: [(capxo,
                       label: GHC.Event.Control.$fEqControlMessage_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capxo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capxp; else goto capxq;
       capxp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fEqControlMessage_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capxq: // global
           I64[Sp - 16] = block_capxg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapyv; else goto capxh;
       uapyv: // global
           call _capxg(R1) args: 0, res: 0, upd: 0;
       capxh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capxg() //  [R1]
         { info_tbl: [(capxg,
                       label: block_capxg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capxg: // global
           _saoYK::P64 = P64[Sp + 8];
           _capxn::P64 = R1 & 7;
           if (_capxn::P64 < 3) goto uapyl; else goto capxm;
       uapyl: // global
           if (_capxn::P64 < 2) goto capxk; else goto capxl;
       capxk: // global
           I64[Sp + 8] = block_capxt_info;
           R1 = _saoYK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapys; else goto capxv;
       uapys: // global
           call _capxt(R1) args: 0, res: 0, upd: 0;
       capxv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capxl: // global
           I64[Sp + 8] = block_capxI_info;
           R1 = _saoYK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapyt; else goto capxK;
       uapyt: // global
           call _capxI(R1) args: 0, res: 0, upd: 0;
       capxK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capxm: // global
           I64[Sp - 8] = block_capxX_info;
           _saoYO::I64 = I64[R1 + 13];
           _saoYQ::I64 = I64[R1 + 21];
           R1 = _saoYK::P64;
           I64[Sp] = _saoYQ::I64;
           I64[Sp + 8] = _saoYO::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapyu; else goto capxZ;
       uapyu: // global
           call _capxX(R1) args: 0, res: 0, upd: 0;
       capxZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capxt() //  [R1]
         { info_tbl: [(capxt,
                       label: block_capxt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capxt: // global
           if (R1 & 7 == 1) goto uapym; else goto uapyn;
       uapym: // global
           Sp = Sp + 8;
           call _capxU() args: 0, res: 0, upd: 0;
       uapyn: // global
           Sp = Sp + 8;
           call _capyc() args: 0, res: 0, upd: 0;
     }
 },
 _capxI() //  [R1]
         { info_tbl: [(capxI,
                       label: block_capxI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capxI: // global
           if (R1 & 7 == 2) goto uapyo; else goto uapyp;
       uapyo: // global
           Sp = Sp + 8;
           call _capxU() args: 0, res: 0, upd: 0;
       uapyp: // global
           Sp = Sp + 8;
           call _capyc() args: 0, res: 0, upd: 0;
     }
 },
 _capxU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capxU: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _capxX() //  [R1]
         { info_tbl: [(capxX,
                       label: block_capxX_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capxX: // global
           if (R1 & 7 == 3) goto capye; else goto uapyq;
       capye: // global
           if (I64[Sp + 16] == I64[R1 + 13]) goto capyd; else goto uapyr;
       capyd: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 21]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uapyr: // global
           Sp = Sp + 24;
           goto uapyB;
       uapyq: // global
           Sp = Sp + 24;
           goto uapyB;
       uapyB: // global
           call _capyc() args: 0, res: 0, upd: 0;
     }
 },
 _capyc() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capyc: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.481335057 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_$c/=_closure" {
     GHC.Event.Control.$fEqControlMessage_$c/=_closure:
         const GHC.Event.Control.$fEqControlMessage_$c/=_info;
 },
 GHC.Event.Control.$fEqControlMessage_$c/=_entry() //  [R2, R3]
         { info_tbl: [(capyO,
                       label: GHC.Event.Control.$fEqControlMessage_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capyO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capyP; else goto capyQ;
       capyP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fEqControlMessage_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capyQ: // global
           I64[Sp - 16] = block_capyG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapA1; else goto capyH;
       uapA1: // global
           call _capyG(R1) args: 0, res: 0, upd: 0;
       capyH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capyG() //  [R1]
         { info_tbl: [(capyG,
                       label: block_capyG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capyG: // global
           _saoYY::P64 = P64[Sp + 8];
           _capyN::P64 = R1 & 7;
           if (_capyN::P64 < 3) goto uapzP; else goto capyM;
       uapzP: // global
           if (_capyN::P64 < 2) goto capyK; else goto capyL;
       capyK: // global
           I64[Sp + 8] = block_capyT_info;
           R1 = _saoYY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapzY; else goto capyV;
       uapzY: // global
           call _capyT(R1) args: 0, res: 0, upd: 0;
       capyV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capyL: // global
           I64[Sp + 8] = block_capz8_info;
           R1 = _saoYY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapzZ; else goto capza;
       uapzZ: // global
           call _capz8(R1) args: 0, res: 0, upd: 0;
       capza: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capyM: // global
           I64[Sp - 8] = block_capzn_info;
           _saoZ2::I64 = I64[R1 + 13];
           _saoZ4::I64 = I64[R1 + 21];
           R1 = _saoYY::P64;
           I64[Sp] = _saoZ4::I64;
           I64[Sp + 8] = _saoZ2::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapA0; else goto capzp;
       uapA0: // global
           call _capzn(R1) args: 0, res: 0, upd: 0;
       capzp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capyT() //  [R1]
         { info_tbl: [(capyT,
                       label: block_capyT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capyT: // global
           if (R1 & 7 == 1) goto uapzQ; else goto uapzR;
       uapzQ: // global
           Sp = Sp + 8;
           call _capzJ() args: 0, res: 0, upd: 0;
       uapzR: // global
           Sp = Sp + 8;
           call _capzI() args: 0, res: 0, upd: 0;
     }
 },
 _capz8() //  [R1]
         { info_tbl: [(capz8,
                       label: block_capz8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capz8: // global
           if (R1 & 7 == 2) goto uapzS; else goto uapzT;
       uapzS: // global
           Sp = Sp + 8;
           call _capzJ() args: 0, res: 0, upd: 0;
       uapzT: // global
           Sp = Sp + 8;
           call _capzI() args: 0, res: 0, upd: 0;
     }
 },
 _capzn() //  [R1]
         { info_tbl: [(capzn,
                       label: block_capzn_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capzn: // global
           if (R1 & 7 == 3) goto capzL; else goto uapzU;
       capzL: // global
           if (I64[Sp + 16] == I64[R1 + 13]) goto capzK; else goto uapzV;
       capzK: // global
           if (I64[Sp + 8] == I64[R1 + 21]) goto uapzW; else goto uapzX;
       uapzW: // global
           Sp = Sp + 24;
           call _capzJ() args: 0, res: 0, upd: 0;
       uapzX: // global
           Sp = Sp + 24;
           goto uapA9;
       uapzV: // global
           Sp = Sp + 24;
           goto uapA9;
       uapzU: // global
           Sp = Sp + 24;
           goto uapA9;
       uapA9: // global
           call _capzI() args: 0, res: 0, upd: 0;
     }
 },
 _capzJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capzJ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _capzI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capzI: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.483377117 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_closure" {
     GHC.Event.Control.$fEqControlMessage_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Event.Control.$fEqControlMessage_$c==_closure+2;
         const GHC.Event.Control.$fEqControlMessage_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.483963416 UTC

[section ""cstring" . GHC.Event.Control.sendWakeup3_bytes" {
     GHC.Event.Control.sendWakeup3_bytes:
         I8[] [115,101,110,100,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.48473592 UTC

[section ""data" . GHC.Event.Control.sendWakeup2_closure" {
     GHC.Event.Control.sendWakeup2_closure:
         const GHC.Event.Control.sendWakeup2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.sendWakeup2_entry() //  [R1]
         { info_tbl: [(capAg,
                       label: GHC.Event.Control.sendWakeup2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capAg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capAh; else goto capAi;
       capAh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capAi: // global
           (_capAd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capAd::I64 == 0) goto capAf; else goto capAe;
       capAf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capAe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capAd::I64;
           R2 = GHC.Event.Control.sendWakeup3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.486611445 UTC

[section ""data" . GHC.Event.Control.$wsendWakeup_closure" {
     GHC.Event.Control.$wsendWakeup_closure:
         const GHC.Event.Control.$wsendWakeup_info;
         const 0;
 },
 GHC.Event.Control.$wsendWakeup_entry() //  [R2, R3]
         { info_tbl: [(capAp,
                       label: GHC.Event.Control.$wsendWakeup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capAp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capAq; else goto capAr;
       capAq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wsendWakeup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capAr: // global
           _saoZc::P64 = R3;
           (_saoZi::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2)), 1);
           if (%MO_SS_Conv_W64_W32(_saoZi::I64) == 0 :: W32) goto uapBf; else goto capAF;
       uapBf: // global
           call _capB9() args: 0, res: 0, upd: 0;
       capAF: // global
           (_saoZn::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp - 16] = block_capAD_info;
           R1 = P64[_saoZc::P64 + 8];
           I64[Sp - 8] = _saoZn::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapBg; else goto capAH;
       uapBg: // global
           call _capAD(R1) args: 0, res: 0, upd: 0;
       capAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capAD() //  [R1]
         { info_tbl: [(capAD,
                       label: block_capAD_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capAD: // global
           if (R1 & 7 == 1) goto capAW; else goto capB6;
       capB6: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) != 9 :: W32) goto capAW; else goto uapBe;
       capAW: // global
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 16;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 0, upd: 8;
       uapBe: // global
           Sp = Sp + 16;
           call _capB9() args: 0, res: 0, upd: 0;
     }
 },
 _capB9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capB9: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.488185644 UTC

[section ""data" . GHC.Event.Control.sendWakeup1_closure" {
     GHC.Event.Control.sendWakeup1_closure:
         const GHC.Event.Control.sendWakeup1_info;
         const 0;
 },
 GHC.Event.Control.sendWakeup1_entry() //  [R2]
         { info_tbl: [(capBp,
                       label: GHC.Event.Control.sendWakeup1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capBp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capBq; else goto capBr;
       capBq: // global
           R2 = R2;
           R1 = GHC.Event.Control.sendWakeup1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capBr: // global
           I64[Sp - 8] = block_capBm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapBv; else goto capBn;
       uapBv: // global
           call _capBm(R1) args: 0, res: 0, upd: 0;
       capBn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capBm() //  [R1]
         { info_tbl: [(capBm,
                       label: block_capBm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capBm: // global
           R3 = P64[R1 + 15];
           R2 = I64[R1 + 39];
           Sp = Sp + 8;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.489280295 UTC

[section ""data" . GHC.Event.Control.sendWakeup_closure" {
     GHC.Event.Control.sendWakeup_closure:
         const GHC.Event.Control.sendWakeup_info;
         const 0;
 },
 GHC.Event.Control.sendWakeup_entry() //  [R2]
         { info_tbl: [(capBA,
                       label: GHC.Event.Control.sendWakeup_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capBA: // global
           R2 = R2;
           call GHC.Event.Control.sendWakeup1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.489964044 UTC

[section ""cstring" . lvl_raoWS_bytes" {
     lvl_raoWS_bytes:
         I8[] [115,101,110,100,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.490674999 UTC

[section ""data" . lvl1_raoWT_closure" {
     lvl1_raoWT_closure:
         const lvl1_raoWT_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_raoWT_entry() //  [R1]
         { info_tbl: [(capBJ,
                       label: lvl1_raoWT_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capBJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capBK; else goto capBL;
       capBK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capBL: // global
           (_capBG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capBG::I64 == 0) goto capBI; else goto capBH;
       capBI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capBH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capBG::I64;
           R2 = lvl_raoWS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.491694116 UTC

[section ""data" . GHC.Event.Control.sendDie2_closure" {
     GHC.Event.Control.sendDie2_closure:
         const GHC.Event.Control.sendDie2_info;
         const 0;
 },
 GHC.Event.Control.sendDie2_entry() //  [R2]
         { info_tbl: [(capBS,
                       label: GHC.Event.Control.sendDie2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capBS: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_raoWT_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.49279804 UTC

[section ""data" . GHC.Event.Control.$wsendDie_closure" {
     GHC.Event.Control.$wsendDie_closure:
         const GHC.Event.Control.$wsendDie_info;
         const 0;
 },
 GHC.Event.Control.$wsendDie_entry() //  [R2, R3]
         { info_tbl: [(capC3,
                       label: GHC.Event.Control.$wsendDie_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capC3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capC4; else goto capC5;
       capC4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wsendDie_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capC5: // global
           I64[Sp - 16] = block_capBZ_info;
           _saoZE::I64 = R2;
           R2 = 1;
           R1 = 1;
           I64[Sp - 8] = _saoZE::I64;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _capBZ() //  [R1]
         { info_tbl: [(capBZ,
                       label: block_capBZ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capBZ: // global
           _saoZE::I64 = I64[Sp + 8];
           _saoZN::I64 = R1 + 16;
           I8[_saoZN::I64] = 254 :: W8;
           (_saoZT::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC20ZCbaseZCSystemziPosixziInternalsZCwrite(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saoZE::I64)), _saoZN::I64, 1);
           call MO_Touch(R1);
           if (_saoZT::I64 == (-1)) goto capCj; else goto capCi;
       capCj: // global
           (_saoZZ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _saoZZ::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.sendDie2_entry(R2) args: 8, res: 0, upd: 8;
       capCi: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.494195896 UTC

[section ""data" . GHC.Event.Control.sendDie1_closure" {
     GHC.Event.Control.sendDie1_closure:
         const GHC.Event.Control.sendDie1_info;
         const 0;
 },
 GHC.Event.Control.sendDie1_entry() //  [R2]
         { info_tbl: [(capCu,
                       label: GHC.Event.Control.sendDie1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capCu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capCv; else goto capCw;
       capCv: // global
           R2 = R2;
           R1 = GHC.Event.Control.sendDie1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capCw: // global
           I64[Sp - 8] = block_capCr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapCA; else goto capCs;
       uapCA: // global
           call _capCr(R1) args: 0, res: 0, upd: 0;
       capCs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capCr() //  [R1]
         { info_tbl: [(capCr,
                       label: block_capCr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capCr: // global
           R3 = P64[R1 + 15];
           R2 = I64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Event.Control.$wsendDie_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.495279652 UTC

[section ""data" . GHC.Event.Control.sendDie_closure" {
     GHC.Event.Control.sendDie_closure:
         const GHC.Event.Control.sendDie_info;
         const 0;
 },
 GHC.Event.Control.sendDie_entry() //  [R2]
         { info_tbl: [(capCF,
                       label: GHC.Event.Control.sendDie_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capCF: // global
           R2 = R2;
           call GHC.Event.Control.sendDie1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.497114238 UTC

[section ""data" . GHC.Event.Control.closeControl3_closure" {
     GHC.Event.Control.closeControl3_closure:
         const (,)_con_info;
         const GHC.Types.True_closure+2;
         const GHC.Tuple.()_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.498518539 UTC

[section ""data" . GHC.Event.Control.closeControl2_closure" {
     GHC.Event.Control.closeControl2_closure:
         const GHC.Event.Control.closeControl2_info;
 },
 GHC.Event.Control.closeControl2_entry() //  []
         { info_tbl: [(capCM,
                       label: GHC.Event.Control.closeControl2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capCM: // global
           R1 = GHC.Event.Control.closeControl3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.499761738 UTC

[section ""data" . GHC.Event.Control.closeControl1_closure" {
     GHC.Event.Control.closeControl1_closure:
         const GHC.Event.Control.closeControl1_info;
 },
 GHC.Event.Control.closeControl1_entry() //  [R2]
         { info_tbl: [(capCW,
                       label: GHC.Event.Control.closeControl1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capCW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto capCX; else goto capCY;
       capCX: // global
           R2 = R2;
           R1 = GHC.Event.Control.closeControl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capCY: // global
           I64[Sp - 8] = block_capCT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapDE; else goto capCU;
       uapDE: // global
           call _capCT(R1) args: 0, res: 0, upd: 0;
       capCU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capCT() //  [R1]
         { info_tbl: [(capCT,
                       label: block_capCT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capCT: // global
           I64[Sp - 32] = block_capD1_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           _sap0g::P64 = P64[R1 + 7];
           _sap0d::I64 = I64[R1 + 23];
           _sap0e::I64 = I64[R1 + 31];
           _sap0f::I64 = I64[R1 + 39];
           R1 = P64[R1 + 15];
           I64[Sp - 24] = _sap0e::I64;
           I64[Sp - 16] = _sap0f::I64;
           P64[Sp - 8] = _sap0g::P64;
           I64[Sp] = _sap0d::I64;
           Sp = Sp - 32;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _capD1() //  []
         { info_tbl: [(capD1,
                       label: block_capD1_info
                       rep:StackRep [True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capD1: // global
           _sap0e::I64 = I64[Sp + 8];
           _sap0g::P64 = P64[Sp + 24];
           (_sap0p::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 32])));
           (_sap0u::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0e::I64)));
           I64[Sp + 8] = block_capDf_info;
           R1 = _sap0g::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapDF; else goto capDg;
       uapDF: // global
           call _capDf(R1) args: 0, res: 0, upd: 0;
       capDg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capDf() //  [R1]
         { info_tbl: [(capDf,
                       label: block_capDf_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capDf: // global
           _sap0f::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto capDm; else goto capDq;
       capDm: // global
           (_sap0A::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0f::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       capDq: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sap0I::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0f::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.501543837 UTC

[section ""data" . GHC.Event.Control.closeControl_closure" {
     GHC.Event.Control.closeControl_closure:
         const GHC.Event.Control.closeControl_info;
 },
 GHC.Event.Control.closeControl_entry() //  [R2]
         { info_tbl: [(capDK,
                       label: GHC.Event.Control.closeControl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capDK: // global
           R2 = R2;
           call GHC.Event.Control.closeControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.502228888 UTC

[section ""cstring" . lvl2_raoWU_bytes" {
     lvl2_raoWU_bytes:
         I8[] [101,118,101,110,116,102,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.502950733 UTC

[section ""data" . lvl3_raoWV_closure" {
     lvl3_raoWV_closure:
         const lvl3_raoWV_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_raoWV_entry() //  [R1]
         { info_tbl: [(capDT,
                       label: lvl3_raoWV_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capDT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capDU; else goto capDV;
       capDU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capDV: // global
           (_capDQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capDQ::I64 == 0) goto capDS; else goto capDR;
       capDS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capDR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capDQ::I64;
           R2 = lvl2_raoWU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.503837145 UTC

[section ""cstring" . lvl4_raoWW_bytes" {
     lvl4_raoWW_bytes:
         I8[] [112,105,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.504529296 UTC

[section ""data" . lvl5_raoWX_closure" {
     lvl5_raoWX_closure:
         const lvl5_raoWX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_raoWX_entry() //  [R1]
         { info_tbl: [(capE2,
                       label: lvl5_raoWX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capE2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capE3; else goto capE4;
       capE3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capE4: // global
           (_capDZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capDZ::I64 == 0) goto capE1; else goto capE0;
       capE1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capE0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capDZ::I64;
           R2 = lvl4_raoWW_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.505557979 UTC

[section ""data" . lvl6_raoWY_closure" {
     lvl6_raoWY_closure:
         const lvl6_raoWY_info;
         const 0;
 },
 lvl6_raoWY_entry() //  [R2]
         { info_tbl: [(capEb,
                       label: lvl6_raoWY_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capEb: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl5_raoWX_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.509205914 UTC

[section ""data" . GHC.Event.Control.newControl1_closure" {
     GHC.Event.Control.newControl1_closure:
         const GHC.Event.Control.newControl1_info;
         const 0;
 },
 sat_sap1i_entry() //  [R1]
         { info_tbl: [(capED,
                       label: sat_sap1i_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capED: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capEP; else goto capEO;
       capEP: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       capEO: // global
           (_sap1f::I64) = call "capi" arg hints:  [‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC17ZCbaseZCSystemziPosixziInternalsZCfcntl(I64[R1 + 7], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 15])));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1f::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sap28_entry() //  [R1]
         { info_tbl: [(capFZ,
                       label: sat_sap28_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capFZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capGb; else goto capGa;
       capGb: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       capGa: // global
           (_sap25::I64) = call "capi" arg hints:  [‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC17ZCbaseZCSystemziPosixziInternalsZCfcntl(I64[R1 + 15], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 7])));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap25::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.newControl1_entry() //  [R2]
         { info_tbl: [(capGc,
                       label: GHC.Event.Control.newControl1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capGc: // global
           if ((Sp + -80) < SpLim) (likely: False) goto capGd; else goto capGe;
       capGd: // global
           R2 = R2;
           R1 = GHC.Event.Control.newControl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capGe: // global
           I64[Sp - 16] = block_capEi_info;
           _sap0M::P64 = R2;
           R2 = 4;
           R1 = 8;
           P64[Sp - 8] = _sap0M::P64;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _capEi() //  [R1]
         { info_tbl: [(capEi,
                       label: block_capEi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capEi: // global
           _sap0U::I64 = R1 + 16;
           (_sap0Y::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] pipe(_sap0U::I64);
           _sap0Z::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0Y::I64));
           if (_sap0Z::I64 == (-1)) goto capIT; else goto uapJm;
       capIT: // global
           (_sap3t::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap3t::I64;
           Sp = Sp + 16;
           call lvl6_raoWY_entry(R2) args: 8, res: 0, upd: 8;
       uapJm: // global
           I64[Sp - 16] = _sap0U::I64;
           I64[Sp - 8] = _sap0Z::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _capEt() args: 0, res: 0, upd: 0;
     }
 },
 _capEt() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capEt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capGk; else goto capGj;
       capGk: // global
           HpAlloc = 24;
           I64[Sp - 8] = block_capEs_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       capGj: // global
           _sap0U::I64 = I64[Sp];
           _sap12::I64 = %MO_SS_Conv_W32_W64(I32[_sap0U::I64]);
           _sap15::I64 = %MO_SS_Conv_W32_W64(I32[_sap0U::I64 + 4]);
           (_sap19::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_getfl();
           I64[Hp - 16] = sat_sap1i_info;
           I64[Hp - 8] = _sap15::I64;
           I64[Hp] = _sap19::I64;
           I64[Sp - 16] = block_capEQ_info;
           R4 = Hp - 15;
           R3 = System.Posix.Internals.setNonBlockingFD3_closure;
           R2 = System.Posix.Internals.fdFileSize_pred_closure+1;
           I64[Sp - 8] = _sap19::I64;
           I64[Sp] = _sap15::I64;
           I64[Sp + 8] = _sap12::I64;
           Sp = Sp - 16;
           call Foreign.C.Error.throwErrnoIfMinus1Retry2_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _capEs() //  [R1]
         { info_tbl: [(capEs,
                       label: block_capEs_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capEs: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _capEt() args: 0, res: 0, upd: 0;
     }
 },
 _capEQ() //  [R1]
         { info_tbl: [(capEQ,
                       label: block_capEQ_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capEQ: // global
           I64[Sp] = block_capES_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uapJt; else goto capET;
       uapJt: // global
           call _capES(R1) args: 0, res: 0, upd: 0;
       capET: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capES() //  [R1]
         { info_tbl: [(capES,
                       label: block_capES_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capES: // global
           _sap12::I64 = I64[Sp + 24];
           _sap15::I64 = I64[Sp + 16];
           _sap1n::I64 = I64[R1 + 7];
           (_sap1r::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_nonblock();
           _sap1s::I64 = _sap1n::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1r::I64));
           if (_sap1n::I64 == _sap1s::I64) goto sap1x; else goto capIQ;
       capIQ: // global
           (_sap3k::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfl();
           (_sap3p::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap15::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap3k::I64)), _sap1s::I64);
           goto sap1x;
       sap1x: // global
           (_sap1C::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfd();
           (_sap1G::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_fd_cloexec();
           (_sap1L::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap12::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1C::I64)), _sap1G::I64);
           if (%MO_SS_Conv_W64_W32(_sap1L::I64) == (-1) :: W32) goto capII; else goto capGp;
       capII: // global
           (_sap3e::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap3e::I64;
           Sp = Sp + 48;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       capGp: // global
           (_sap1R::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap15::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1C::I64)), _sap1G::I64);
           if (%MO_SS_Conv_W64_W32(_sap1R::I64) == (-1) :: W32) goto capIC; else goto capGs;
       capIC: // global
           (_sap39::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap39::I64;
           Sp = Sp + 48;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       capGs: // global
           (_sap1W::I64) = call "ccall" arg hints:  [‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] eventfd(0, 0);
           _sap30::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1W::I64));
           if (_sap30::I64 != (-1)) goto capIh; else goto capIs;
       capIh: // global
           I64[Sp - 24] = _sap1C::I64;
           I64[Sp - 16] = _sap1G::I64;
           I64[Sp - 8] = _sap30::I64;
           I64[Sp] = _sap1r::I64;
           Sp = Sp - 24;
           call _capFQ() args: 0, res: 0, upd: 0;
       capIs: // global
           I64[Sp - 24] = block_capIp_info;
           R2 = lvl3_raoWV_closure;
           I64[Sp - 16] = _sap1C::I64;
           I64[Sp - 8] = _sap1G::I64;
           I64[Sp] = _sap1r::I64;
           Sp = Sp - 24;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _capIp() //  [R1]
         { info_tbl: [(capIp,
                       label: block_capIp_info
                       rep:StackRep [True, True, True, True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capIp: // global
           I64[Sp] = block_capIr_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uapJy; else goto capIv;
       uapJy: // global
           call _capIr(R1) args: 0, res: 0, upd: 0;
       capIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capIr() //  [R1]
         { info_tbl: [(capIr,
                       label: block_capIr_info
                       rep:StackRep [True, True, True, True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capIr: // global
           I64[Sp] = I64[Sp + 8];
           I64[Sp + 8] = I64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           call _capFQ() args: 0, res: 0, upd: 0;
     }
 },
 _capFQ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capFQ: // global
           Hp = Hp + 24;
           _sap1Z::I64 = I64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto capGz; else goto capGy;
       capGz: // global
           HpAlloc = 24;
           I64[Sp - 8] = block_capFP_info;
           R1 = _sap1Z::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       capGy: // global
           I64[Hp - 16] = sat_sap28_info;
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = _sap1Z::I64;
           I64[Sp - 8] = block_capGu_info;
           R4 = Hp - 15;
           R3 = System.Posix.Internals.setNonBlockingFD3_closure;
           R2 = System.Posix.Internals.fdFileSize_pred_closure+1;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrnoIfMinus1Retry2_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _capFP() //  [R1]
         { info_tbl: [(capFP,
                       label: block_capFP_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capFP: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _capFQ() args: 0, res: 0, upd: 0;
     }
 },
 _capGu() //  [R1]
         { info_tbl: [(capGu,
                       label: block_capGu_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capGu: // global
           I64[Sp] = block_capGw_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uapJw; else goto capGB;
       uapJw: // global
           call _capGw(R1) args: 0, res: 0, upd: 0;
       capGB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capGw() //  [R1]
         { info_tbl: [(capGw,
                       label: block_capGw_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capGw: // global
           _sap0M::P64 = P64[Sp + 72];
           _sap1C::I64 = I64[Sp + 8];
           _sap1G::I64 = I64[Sp + 16];
           _sap1Z::I64 = I64[Sp + 24];
           _sap2d::I64 = I64[R1 + 7];
           _sap2e::I64 = _sap2d::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 32]));
           if (_sap2d::I64 == _sap2e::I64) goto sap2j; else goto capIb;
       capIb: // global
           (_sap2U::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfl();
           (_sap2Z::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap1Z::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap2U::I64)), _sap2e::I64);
           goto sap2j;
       sap2j: // global
           (_sap2p::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap1Z::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1C::I64)), _sap1G::I64);
           if (%MO_SS_Conv_W64_W32(_sap2p::I64) == (-1) :: W32) goto capI3; else goto capHg;
       capI3: // global
           (_sap2O::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap2O::I64;
           Sp = Sp + 80;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       capHg: // global
           I64[Sp + 16] = block_capHe_info;
           R1 = _sap0M::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uapJx; else goto capHi;
       uapJx: // global
           call _capHe(R1) args: 0, res: 0, upd: 0;
       capHi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capHe() //  [R1]
         { info_tbl: [(capHe,
                       label: block_capHe_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capHe: // global
           if (R1 & 7 == 1) goto capHB; else goto capHX;
       capHB: // global
           I64[Sp] = block_capHm_info;
           R1 = GHC.Types.False_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       capHX: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd(I64[Sp + 8]);
           I64[Sp] = block_capHJ_info;
           R1 = GHC.Types.False_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capHm() //  [R1]
         { info_tbl: [(capHm,
                       label: block_capHm_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capHm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto capHE; else goto capHD;
       capHE: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capHD: // global
           _sap12::I64 = I64[Sp + 40];
           _sap15::I64 = I64[Sp + 32];
           _sap1Z::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 48]);
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = GHC.Types.False_closure+1;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap12::I64));
           I64[Hp - 8] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap15::I64));
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1Z::I64));
           R1 = Hp - 39;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _capHJ() //  [R1]
         { info_tbl: [(capHJ,
                       label: block_capHJ_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capHJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto capI0; else goto capHZ;
       capI0: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capHZ: // global
           _sap12::I64 = I64[Sp + 40];
           _sap15::I64 = I64[Sp + 32];
           _sap1Z::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 48]);
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = GHC.Types.True_closure+2;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap12::I64));
           I64[Hp - 8] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap15::I64));
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1Z::I64));
           R1 = Hp - 39;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.515139897 UTC

[section ""data" . GHC.Event.Control.newControl_closure" {
     GHC.Event.Control.newControl_closure:
         const GHC.Event.Control.newControl_info;
         const 0;
 },
 GHC.Event.Control.newControl_entry() //  [R2]
         { info_tbl: [(capJE,
                       label: GHC.Event.Control.newControl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capJE: // global
           R2 = R2;
           call GHC.Event.Control.newControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.515805286 UTC

[section ""cstring" . lvl7_raoWZ_bytes" {
     lvl7_raoWZ_bytes:
         I8[] [102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,115,105,103,105,110,102,111,95,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.516589741 UTC

[section ""data" . GHC.Event.Control.readControlMessage4_closure" {
     GHC.Event.Control.readControlMessage4_closure:
         const GHC.Event.Control.readControlMessage4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.readControlMessage4_entry() //  [R1]
         { info_tbl: [(capJP,
                       label: GHC.Event.Control.readControlMessage4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capJP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capJQ; else goto capJR;
       capJQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capJR: // global
           (_capJK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capJK::I64 == 0) goto capJM; else goto capJL;
       capJM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capJL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capJK::I64;
           I64[Sp - 24] = block_capJN_info;
           R2 = lvl7_raoWZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _capJN() //  [R1]
         { info_tbl: [(capJN,
                       label: block_capJN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capJN: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.517649699 UTC

[section ""cstring" . lvl8_raoX0_bytes" {
     lvl8_raoX0_bytes:
         I8[] [114,101,97,100,67,111,110,116,114,111,108,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.51831824 UTC

[section ""data" . lvl9_raoX1_closure" {
     lvl9_raoX1_closure:
         const lvl9_raoX1_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_raoX1_entry() //  [R1]
         { info_tbl: [(capK1,
                       label: lvl9_raoX1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capK1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capK2; else goto capK3;
       capK2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capK3: // global
           (_capJY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capJY::I64 == 0) goto capK0; else goto capJZ;
       capK0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capJZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capJY::I64;
           R2 = lvl8_raoX0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.519306611 UTC

[section ""data" . GHC.Event.Control.readControlMessage3_closure" {
     GHC.Event.Control.readControlMessage3_closure:
         const GHC.Event.Control.readControlMessage3_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage3_entry() //  [R2]
         { info_tbl: [(capKa,
                       label: GHC.Event.Control.readControlMessage3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capKa: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl9_raoX1_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.520016124 UTC

[section ""cstring" . lvl10_raoX2_bytes" {
     lvl10_raoX2_bytes:
         I8[] [114,101,97,100,87,97,107,101,117,112,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.52073524 UTC

[section ""data" . lvl11_raoX3_closure" {
     lvl11_raoX3_closure:
         const lvl11_raoX3_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_raoX3_entry() //  [R1]
         { info_tbl: [(capKj,
                       label: lvl11_raoX3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capKj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capKk; else goto capKl;
       capKk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capKl: // global
           (_capKg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capKg::I64 == 0) goto capKi; else goto capKh;
       capKi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capKh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capKg::I64;
           R2 = lvl10_raoX2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.522150277 UTC

[section ""data" . GHC.Event.Control.readControlMessage2_closure" {
     GHC.Event.Control.readControlMessage2_closure:
         const GHC.Event.Control.readControlMessage2_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage2_entry() //  [R2]
         { info_tbl: [(capKs,
                       label: GHC.Event.Control.readControlMessage2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capKs: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl11_raoX3_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.524299552 UTC

[section ""data" . GHC.Event.Control.$wreadControlMessage_closure" {
     GHC.Event.Control.$wreadControlMessage_closure:
         const GHC.Event.Control.$wreadControlMessage_info;
         const 0;
 },
 GHC.Event.Control.$wreadControlMessage_entry() //  [R2, R3, R4]
         { info_tbl: [(capKE,
                       label: GHC.Event.Control.$wreadControlMessage_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 18} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capKE: // global
           if ((Sp + -56) < SpLim) (likely: False) goto capKF; else goto capKG;
       capKF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wreadControlMessage_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       capKG: // global
           if (R4 == R2) goto capKD; else goto capKC;
       capKD: // global
           I64[Sp - 16] = block_capLZ_info;
           R1 = 8;
           I64[Sp - 8] = R4;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       capKC: // global
           I64[Sp - 16] = block_capKI_info;
           R2 = 1;
           R1 = 1;
           I64[Sp - 8] = R4;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _capLZ() //  [R1]
         { info_tbl: [(capLZ,
                       label: block_capLZ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capLZ: // global
           (_sap4I::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), R1 + 16, 8);
           if (_sap4I::I64 == (-1)) goto capMf; else goto capMe;
       capMf: // global
           (_sap4O::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap4O::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.readControlMessage2_entry(R2) args: 8, res: 0, upd: 8;
       capMe: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgWakeup_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _capKI() //  [R1]
         { info_tbl: [(capKI,
                       label: block_capKI_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capKI: // global
           _sap3N::I64 = R1 + 16;
           (_sap3S::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), _sap3N::I64, 1);
           if (_sap3S::I64 == (-1)) goto capLX; else goto capLW;
       capLX: // global
           (_sap4v::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap4v::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.readControlMessage3_entry(R2) args: 8, res: 0, upd: 8;
       capLW: // global
           _sap3X::I64 = %MO_UU_Conv_W8_W64(I8[_sap3N::I64]);
           if (_sap3X::I64 == 254) goto capLT; else goto uapMq;
       capLT: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgDie_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uapMq: // global
           if (_sap3X::I64 == 255) goto capLU; else goto capKZ;
       capLU: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgWakeup_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       capKZ: // global
           I64[Sp - 16] = block_capL2_info;
           I64[Sp - 8] = _sap3X::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           _uapMt::P64 = CurrentTSO;
           I64[I64[_uapMt::P64 + 24] + 16] = Sp;
           _uapMu::I64 = CurrentNursery;
           P64[_uapMu::I64 + 8] = Hp + 8;
           I64[_uapMt::P64 + 104] = I64[_uapMt::P64 + 104] - ((Hp + 8) - I64[_uapMu::I64]);
           (_uapMr::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_sap41::I64) = call "ccall" arg hints:  []  result hints:  [] __hscore_sizeof_siginfo_t();
           (_uapMs::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_uapMr::I64);
           BaseReg = _uapMs::I64;
           _uapMv::P64 = CurrentTSO;
           _uapMw::P64 = I64[_uapMv::P64 + 24];
           Sp = I64[_uapMw::P64 + 16];
           SpLim = _uapMw::P64 + 192;
           HpAlloc = 0;
           _uapMx::I64 = CurrentNursery;
           _uapMy::I64 = I64[_uapMx::I64 + 8];
           Hp = _uapMy::I64 - 8;
           _uapMz::I64 = I64[_uapMx::I64];
           HpLim = _uapMz::I64 + ((%MO_SS_Conv_W32_W64(I32[_uapMx::I64 + 48]) << 12) - 1);
           I64[_uapMv::P64 + 104] = I64[_uapMv::P64 + 104] + (_uapMy::I64 - _uapMz::I64);
           R1 = _sap41::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capL2() //  [R1]
         { info_tbl: [(capL2,
                       label: block_capL2_info
                       rep:StackRep [True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capL2: // global
           if (%MO_S_Ge_W64(R1, 0)) goto capLv; else goto capLS;
       capLv: // global
           I64[Sp - 16] = block_capLb_info;
           _sap41::I64 = R1;
           _sap42::I64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sap42::I64;
           I64[Sp] = _sap41::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       capLS: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _capLb() //  [R1]
         { info_tbl: [(capLb,
                       label: block_capLb_info
                       rep:StackRep [True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capLb: // global
           I64[Sp] = block_capLd_info;
           _sap46::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _sap46::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capLd() //  [R1]
         { info_tbl: [(capLd,
                       label: block_capLd_info
                       rep:StackRep [False, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capLd: // global
           _sap41::I64 = I64[Sp + 16];
           _sap4a::I64 = R1 + 16;
           (_sap4f::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 40])), _sap4a::I64, _sap41::I64);
           I64[Sp - 8] = block_capLp_info;
           R2 = _sap41::I64;
           I64[Sp] = _sap4f::I64;
           I64[Sp + 16] = _sap4a::I64;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _capLp() //  [R1]
         { info_tbl: [(capLp,
                       label: block_capLp_info
                       rep:StackRep [True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capLp: // global
           I64[Sp] = block_capLt_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _capLt() //  [R1]
         { info_tbl: [(capLt,
                       label: block_capLt_info
                       rep:StackRep [True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capLt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto capLE; else goto capLD;
       capLE: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       capLD: // global
           if (I64[Sp + 8] == R1) goto capLQ; else goto capLR;
       capLQ: // global
           I64[Hp - 48] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 16];
           _sap3M::P64 = P64[Sp + 40];
           _sap3X::I64 = I64[Sp + 32];
           _sap4a::I64 = I64[Sp + 24];
           _capLI::P64 = Hp - 46;
           call MO_Touch(_capLI::P64);
           call MO_Touch(_sap3M::P64);
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = _capLI::P64;
           I64[Hp - 8] = _sap4a::I64;
           I64[Hp] = _sap3X::I64;
           R1 = Hp - 21;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       capLR: // global
           Hp = Hp - 56;
           R1 = GHC.Event.Control.readControlMessage4_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.527886298 UTC

[section ""data" . GHC.Event.Control.readControlMessage1_closure" {
     GHC.Event.Control.readControlMessage1_closure:
         const GHC.Event.Control.readControlMessage1_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage1_entry() //  [R2, R3]
         { info_tbl: [(capMI,
                       label: GHC.Event.Control.readControlMessage1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capMI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capMM; else goto capMN;
       capMM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.readControlMessage1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capMN: // global
           I64[Sp - 16] = block_capMF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapMV; else goto capMG;
       uapMV: // global
           call _capMF(R1) args: 0, res: 0, upd: 0;
       capMG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capMF() //  [R1]
         { info_tbl: [(capMF,
                       label: block_capMF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capMF: // global
           I64[Sp - 8] = block_capML_info;
           _sap4Y::P64 = P64[R1 + 15];
           _sap4W::I64 = I64[R1 + 39];
           R1 = P64[Sp + 8];
           P64[Sp] = _sap4Y::P64;
           I64[Sp + 8] = _sap4W::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapMU; else goto capMP;
       uapMU: // global
           call _capML(R1) args: 0, res: 0, upd: 0;
       capMP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capML() //  [R1]
         { info_tbl: [(capML,
                       label: block_capML_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capML: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wreadControlMessage_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.529315471 UTC

[section ""data" . GHC.Event.Control.readControlMessage_closure" {
     GHC.Event.Control.readControlMessage_closure:
         const GHC.Event.Control.readControlMessage_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage_entry() //  [R2, R3]
         { info_tbl: [(capN0,
                       label: GHC.Event.Control.readControlMessage_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capN0: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Control.readControlMessage1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.530346861 UTC

[section ""data" . GHC.Event.Control.W_closure" {
     GHC.Event.Control.W_closure:
         const GHC.Event.Control.W_info;
 },
 GHC.Event.Control.W_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capN4: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.Control.W_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.W_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(capN9,
                       label: GHC.Event.Control.W_info
                       rep:HeapRep static {
                             Fun {arity: 5
                                  fun_type: ArgGen [True, True, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capN9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto capNd; else goto capNc;
       capNd: // global
           HpAlloc = 48;
           R1 = GHC.Event.Control.W_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       capNc: // global
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.531432641 UTC

[section ""data" . GHC.Event.Control.CMsgWakeup_closure" {
     GHC.Event.Control.CMsgWakeup_closure:
         const GHC.Event.Control.CMsgWakeup_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.532019632 UTC

[section ""data" . GHC.Event.Control.CMsgDie_closure" {
     GHC.Event.Control.CMsgDie_closure:
         const GHC.Event.Control.CMsgDie_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.532706396 UTC

[section ""data" . GHC.Event.Control.CMsgSignal_closure" {
     GHC.Event.Control.CMsgSignal_closure:
         const GHC.Event.Control.CMsgSignal_info;
 },
 GHC.Event.Control.CMsgSignal_entry() //  [R2, R3, R4]
         { info_tbl: [(capNj,
                       label: GHC.Event.Control.CMsgSignal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 18} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capNj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto capNn; else goto capNm;
       capNn: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.CMsgSignal_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       capNm: // global
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = R2;
           I64[Hp] = R4;
           R1 = Hp - 21;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.533621668 UTC

[GHC.Event.Control.W_con_entry() //  [R1]
         { info_tbl: [(capNo,
                       label: GHC.Event.Control.W_con_info
                       rep:HeapRep 2 ptrs 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,87]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capNo: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.53433993 UTC

[GHC.Event.Control.CMsgWakeup_con_entry() //  [R1]
         { info_tbl: [(capNq,
                       label: GHC.Event.Control.CMsgWakeup_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,87,97,107,101,117,112]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capNq: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.535065973 UTC

[GHC.Event.Control.CMsgDie_con_entry() //  [R1]
         { info_tbl: [(capNs,
                       label: GHC.Event.Control.CMsgDie_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,68,105,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capNs: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.535803643 UTC

[GHC.Event.Control.CMsgSignal_con_entry() //  [R1]
         { info_tbl: [(capNu,
                       label: GHC.Event.Control.CMsgSignal_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,83,105,103,110,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capNu: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.536523065 UTC

[section ""relreadonly" . Sap8o_srt" {
     Sap8o_srt:
         const GHC.Ptr.$w$cshowsPrec_closure;
         const GHC.Event.Control.$fShowControlMessage3_closure;
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure;
         const GHC.Event.Control.$fShowControlMessage5_closure;
         const GHC.Event.Control.$fShowControlMessage7_closure;
         const GHC.Event.Control.$fShowControlMessage_$cshow_closure;
         const GHC.Event.Control.$fShowControlMessage1_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Control.$wsendWakeup_closure;
         const GHC.Event.Control.sendWakeup2_closure;
         const GHC.Event.Control.sendWakeup1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_raoWT_closure;
         const GHC.Event.Control.$wsendDie_closure;
         const GHC.Event.Control.sendDie2_closure;
         const GHC.Event.Control.sendDie1_closure;
         const lvl5_raoWX_closure;
         const Foreign.C.Error.throwErrnoIfMinus1Retry2_closure;
         const System.Posix.Internals.setCloseOnExec2_closure;
         const System.Posix.Internals.setNonBlockingFD3_closure;
         const GHC.Event.Control.newControl1_closure;
         const lvl3_raoWV_closure;
         const lvl6_raoWY_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl9_raoX1_closure;
         const lvl11_raoX3_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const GHC.Event.Control.$wreadControlMessage_closure;
         const GHC.Event.Control.readControlMessage2_closure;
         const GHC.Event.Control.readControlMessage3_closure;
         const GHC.Event.Control.readControlMessage4_closure;
         const GHC.Event.Control.readControlMessage1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.537783686 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:05:24.539472634 UTC

[section ""data" . GHC.Event.Control.$WW_closure" {
     GHC.Event.Control.$WW_closure:
         const GHC.Event.Control.$WW_info;
 },
 GHC.Event.Control.$WW_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(capND,
                       label: GHC.Event.Control.$WW_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capND: // global
           if ((Sp + -40) < SpLim) (likely: False) goto capO1; else goto capO2;
       capO1: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$WW_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       capO2: // global
           I64[Sp - 40] = block_capNA_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uapOb; else goto capNB;
       uapOb: // global
           call _capNA(R1) args: 0, res: 0, upd: 0;
       capNB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capNA() //  [R1]
         { info_tbl: [(capNA,
                       label: block_capNA_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capNA: // global
           I64[Sp] = block_capNG_info;
           _saoXb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saoXb::I64;
           if (R1 & 7 != 0) goto uapOa; else goto capNH;
       uapOa: // global
           call _capNG(R1) args: 0, res: 0, upd: 0;
       capNH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capNG() //  [R1]
         { info_tbl: [(capNG,
                       label: block_capNG_info
                       rep:StackRep [True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capNG: // global
           I64[Sp] = block_capNL_info;
           _saoXd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saoXd::I64;
           if (R1 & 7 != 0) goto uapOc; else goto capNM;
       uapOc: // global
           call _capNL(R1) args: 0, res: 0, upd: 0;
       capNM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capNL() //  [R1]
         { info_tbl: [(capNL,
                       label: block_capNL_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capNL: // global
           I64[Sp] = block_capNQ_info;
           _saoXf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _saoXf::I64;
           if (R1 & 7 != 0) goto uapOd; else goto capNR;
       uapOd: // global
           call _capNQ(R1) args: 0, res: 0, upd: 0;
       capNR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capNQ() //  [R1]
         { info_tbl: [(capNQ,
                       label: block_capNQ_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capNQ: // global
           I64[Sp] = block_capNV_info;
           _saoXg::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _saoXg::P64;
           if (R1 & 7 != 0) goto uapOe; else goto capNW;
       uapOe: // global
           call _capNV(R1) args: 0, res: 0, upd: 0;
       capNW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capNV() //  [R1]
         { info_tbl: [(capNV,
                       label: block_capNV_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capNV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto capO9; else goto capO8;
       capO9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capO8: // global
           _saoXi::P64 = P64[R1 + 7];
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _saoXi::P64;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 39;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.554127195 UTC

[section ""data" . GHC.Event.Control.$WCMsgSignal_closure" {
     GHC.Event.Control.$WCMsgSignal_closure:
         const GHC.Event.Control.$WCMsgSignal_info;
 },
 GHC.Event.Control.$WCMsgSignal_entry() //  [R2, R3]
         { info_tbl: [(capOQ,
                       label: GHC.Event.Control.$WCMsgSignal_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capOQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capOZ; else goto capP0;
       capOZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$WCMsgSignal_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capP0: // global
           I64[Sp - 16] = block_capON_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapP6; else goto capOO;
       uapP6: // global
           call _capON(R1) args: 0, res: 0, upd: 0;
       capOO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capON() //  [R1]
         { info_tbl: [(capON,
                       label: block_capON_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capON: // global
           I64[Sp - 8] = block_capOT_info;
           _saoXn::P64 = P64[R1 + 7];
           _saoXm::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _saoXn::P64;
           I64[Sp + 8] = _saoXm::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapP5; else goto capOU;
       uapP5: // global
           call _capOT(R1) args: 0, res: 0, upd: 0;
       capOU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capOT() //  [R1]
         { info_tbl: [(capOT,
                       label: block_capOT_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capOT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto capP4; else goto capP3;
       capP4: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capP3: // global
           _saoXp::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _saoXp::I64;
           R1 = Hp - 21;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.561770017 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage8_bytes" {
     GHC.Event.Control.$fShowControlMessage8_bytes:
         I8[] [67,77,115,103,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.563722355 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage7_closure" {
     GHC.Event.Control.$fShowControlMessage7_closure:
         const GHC.Event.Control.$fShowControlMessage7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage7_entry() //  [R1]
         { info_tbl: [(capPu,
                       label: GHC.Event.Control.$fShowControlMessage7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capPu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capPv; else goto capPw;
       capPv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capPw: // global
           (_capPr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capPr::I64 == 0) goto capPt; else goto capPs;
       capPt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capPs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capPr::I64;
           R2 = GHC.Event.Control.$fShowControlMessage8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.567576557 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage6_bytes" {
     GHC.Event.Control.$fShowControlMessage6_bytes:
         I8[] [67,77,115,103,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.569938214 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage5_closure" {
     GHC.Event.Control.$fShowControlMessage5_closure:
         const GHC.Event.Control.$fShowControlMessage5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage5_entry() //  [R1]
         { info_tbl: [(capPL,
                       label: GHC.Event.Control.$fShowControlMessage5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capPL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capPM; else goto capPN;
       capPM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capPN: // global
           (_capPI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capPI::I64 == 0) goto capPK; else goto capPJ;
       capPK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capPJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capPI::I64;
           R2 = GHC.Event.Control.$fShowControlMessage6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.573818755 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage4_bytes" {
     GHC.Event.Control.$fShowControlMessage4_bytes:
         I8[] [67,77,115,103,83,105,103,110,97,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.575670668 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage3_closure" {
     GHC.Event.Control.$fShowControlMessage3_closure:
         const GHC.Event.Control.$fShowControlMessage3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage3_entry() //  [R1]
         { info_tbl: [(capQ2,
                       label: GHC.Event.Control.$fShowControlMessage3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capQ2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto capQ3; else goto capQ4;
       capQ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capQ4: // global
           (_capPZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_capPZ::I64 == 0) goto capQ1; else goto capQ0;
       capQ1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       capQ0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _capPZ::I64;
           R2 = GHC.Event.Control.$fShowControlMessage4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.581452584 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_info;
         const 0;
 },
 sat_saoXD_entry() //  [R1]
         { info_tbl: [(capQG,
                       label: sat_saoXD_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capQG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capQH; else goto capQI;
       capQH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capQI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_capQD_info;
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 24];
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _capQD() //  [R1, R2]
         { info_tbl: [(capQD,
                       label: block_capQD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capQD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capQL; else goto capQK;
       capQL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       capQK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saoXI_entry() //  [R1]
         { info_tbl: [(capQQ,
                       label: sat_saoXI_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capQQ: // global
           _saoXI::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto capQR; else goto capQS;
       capQS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto capQU; else goto capQT;
       capQU: // global
           HpAlloc = 56;
           goto capQR;
       capQR: // global
           R1 = _saoXI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capQT: // global
           _saoXs::P64 = P64[_saoXI::P64 + 16];
           _saoXu::I64 = I64[_saoXI::P64 + 24];
           _saoXw::I64 = I64[_saoXI::P64 + 32];
           I64[Hp - 48] = sat_saoXD_info;
           P64[Hp - 32] = _saoXs::P64;
           I64[Hp - 24] = _saoXw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp - 8] = block_capQN_info;
           R3 = Hp - 14;
           R2 = _saoXu::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _capQN() //  [R1, R2]
         { info_tbl: [(capQN,
                       label: block_capQN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capQN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capQX; else goto capQW;
       capQX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       capQW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saoXN_entry() //  [R1]
         { info_tbl: [(capRf,
                       label: sat_saoXN_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capRf: // global
           _saoXN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto capRg; else goto capRh;
       capRh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capRj; else goto capRi;
       capRj: // global
           HpAlloc = 24;
           goto capRg;
       capRg: // global
           R1 = _saoXN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capRi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saoXN::P64;
           _saoXs::P64 = P64[_saoXN::P64 + 16];
           _saoXw::I64 = I64[_saoXN::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _saoXs::P64;
           I64[Sp - 24] = block_capRc_info;
           R4 = Hp - 14;
           R3 = _saoXw::I64;
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _capRc() //  [R1, R2]
         { info_tbl: [(capRc,
                       label: block_capRc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capRc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capRm; else goto capRl;
       capRm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       capRl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saoXS_entry() //  [R1]
         { info_tbl: [(capRr,
                       label: sat_saoXS_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capRr: // global
           _saoXS::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto capRs; else goto capRt;
       capRt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto capRv; else goto capRu;
       capRv: // global
           HpAlloc = 56;
           goto capRs;
       capRs: // global
           R1 = _saoXS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capRu: // global
           _saoXs::P64 = P64[_saoXS::P64 + 16];
           _saoXu::I64 = I64[_saoXS::P64 + 24];
           _saoXw::I64 = I64[_saoXS::P64 + 32];
           I64[Hp - 48] = sat_saoXN_info;
           P64[Hp - 32] = _saoXs::P64;
           I64[Hp - 24] = _saoXw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp - 8] = block_capRo_info;
           R3 = Hp - 14;
           R2 = _saoXu::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _capRo() //  [R1, R2]
         { info_tbl: [(capRo,
                       label: block_capRo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capRo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capRy; else goto capRx;
       capRy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       capRx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saoXT_entry() //  [R1]
         { info_tbl: [(capRz,
                       label: sat_saoXT_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capRz: // global
           _saoXT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto capRA; else goto capRB;
       capRB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto capRD; else goto capRC;
       capRD: // global
           HpAlloc = 40;
           goto capRA;
       capRA: // global
           R1 = _saoXT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capRC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saoXT::P64;
           _saoXs::P64 = P64[_saoXT::P64 + 16];
           _saoXu::I64 = I64[_saoXT::P64 + 24];
           _saoXw::I64 = I64[_saoXT::P64 + 32];
           I64[Hp - 32] = sat_saoXS_info;
           P64[Hp - 16] = _saoXs::P64;
           I64[Hp - 8] = _saoXu::I64;
           I64[Hp] = _saoXw::I64;
           R3 = Hp - 32;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.Control.$fShowControlMessage_$cshowsPrec_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(capRJ,
                       label: GHC.Event.Control.$fShowControlMessage_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capRJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto capRK; else goto capRL;
       capRK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       capRL: // global
           I64[Sp - 24] = block_capQg_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uapS0; else goto capQh;
       uapS0: // global
           call _capQg(R1) args: 0, res: 0, upd: 0;
       capQh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capQg() //  [R1]
         { info_tbl: [(capQg,
                       label: block_capQg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capQg: // global
           _capRI::P64 = R1 & 7;
           if (_capRI::P64 < 3) goto uapRY; else goto capRH;
       uapRY: // global
           _saoXs::P64 = P64[Sp + 16];
           if (_capRI::P64 < 2) goto capRF; else goto capRG;
       capRF: // global
           R3 = _saoXs::P64;
           R2 = GHC.Event.Control.$fShowControlMessage7_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       capRG: // global
           R3 = _saoXs::P64;
           R2 = GHC.Event.Control.$fShowControlMessage5_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       capRH: // global
           I64[Sp - 8] = block_capQn_info;
           _saoXu::I64 = I64[R1 + 13];
           _saoXw::I64 = I64[R1 + 21];
           R1 = P64[Sp + 8];
           I64[Sp] = _saoXw::I64;
           I64[Sp + 8] = _saoXu::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapRZ; else goto capQo;
       uapRZ: // global
           call _capQn(R1) args: 0, res: 0, upd: 0;
       capQo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capQn() //  [R1]
         { info_tbl: [(capQn,
                       label: block_capQn_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capQn: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto capRT; else goto capRS;
       capRT: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capRS: // global
           _saoXs::P64 = P64[Sp + 24];
           _saoXu::I64 = I64[Sp + 16];
           _saoXw::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto capRV; else goto capRX;
       capRV: // global
           I64[Hp - 56] = sat_saoXI_info;
           P64[Hp - 40] = _saoXs::P64;
           I64[Hp - 32] = _saoXu::I64;
           I64[Hp - 24] = _saoXw::I64;
           _capQv::P64 = Hp - 56;
           Hp = Hp - 24;
           R3 = _capQv::P64;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       capRX: // global
           I64[Hp - 56] = sat_saoXT_info;
           P64[Hp - 40] = _saoXs::P64;
           I64[Hp - 32] = _saoXu::I64;
           I64[Hp - 24] = _saoXw::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.61109678 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshow_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshow_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshow_info;
         const 0;
 },
 sat_saoY2_entry() //  [R1]
         { info_tbl: [(capTf,
                       label: sat_saoY2_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capTf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capTg; else goto capTh;
       capTg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capTh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_capTc_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _capTc() //  [R1, R2]
         { info_tbl: [(capTc,
                       label: block_capTc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capTc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capTk; else goto capTj;
       capTk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       capTj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saoY7_entry() //  [R1]
         { info_tbl: [(capTp,
                       label: sat_saoY7_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capTp: // global
           _saoY7::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto capTq; else goto capTr;
       capTr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto capTt; else goto capTs;
       capTt: // global
           HpAlloc = 48;
           goto capTq;
       capTq: // global
           R1 = _saoY7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       capTs: // global
           _saoXW::I64 = I64[_saoY7::P64 + 16];
           _saoXY::I64 = I64[_saoY7::P64 + 24];
           I64[Hp - 40] = sat_saoY2_info;
           I64[Hp - 24] = _saoXY::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_capTm_info;
           R3 = Hp - 14;
           R2 = _saoXW::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _capTm() //  [R1, R2]
         { info_tbl: [(capTm,
                       label: block_capTm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capTm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto capTw; else goto capTv;
       capTw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       capTv: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.$fShowControlMessage_$cshow_entry() //  [R2]
         { info_tbl: [(capTC,
                       label: GHC.Event.Control.$fShowControlMessage_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capTC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capTD; else goto capTE;
       capTD: // global
           R2 = R2;
           R1 = GHC.Event.Control.$fShowControlMessage_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capTE: // global
           I64[Sp - 8] = block_capSX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapTN; else goto capSY;
       uapTN: // global
           call _capSX(R1) args: 0, res: 0, upd: 0;
       capSY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capSX() //  [R1]
         { info_tbl: [(capSX,
                       label: block_capSX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capSX: // global
           _capTB::P64 = R1 & 7;
           if (_capTB::P64 < 3) goto uapTM; else goto capTA;
       uapTM: // global
           if (_capTB::P64 < 2) goto capTy; else goto capTz;
       capTy: // global
           R1 = GHC.Event.Control.$fShowControlMessage7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       capTz: // global
           R1 = GHC.Event.Control.$fShowControlMessage5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       capTA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto capTL; else goto capTK;
       capTL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capTK: // global
           _saoXW::I64 = I64[R1 + 13];
           _saoXY::I64 = I64[R1 + 21];
           I64[Hp - 24] = sat_saoY7_info;
           I64[Hp - 8] = _saoXW::I64;
           I64[Hp] = _saoXY::I64;
           R3 = Hp - 24;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.625532087 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage2_closure" {
     GHC.Event.Control.$fShowControlMessage2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.62747034 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage1_closure" {
     GHC.Event.Control.$fShowControlMessage1_closure:
         const GHC.Event.Control.$fShowControlMessage1_info;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage1_entry() //  [R2, R3]
         { info_tbl: [(capUm,
                       label: GHC.Event.Control.$fShowControlMessage1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capUm: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Control.$fShowControlMessage2_closure+1;
           call GHC.Event.Control.$fShowControlMessage_$cshowsPrec_entry(R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.631481881 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshowList_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshowList_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshowList_info;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage_$cshowList_entry() //  [R2,
                                                                R3]
         { info_tbl: [(capUx,
                       label: GHC.Event.Control.$fShowControlMessage_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capUx: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Control.$fShowControlMessage1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.635122482 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_closure" {
     GHC.Event.Control.$fShowControlMessage_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure+3;
         const GHC.Event.Control.$fShowControlMessage_$cshow_closure+1;
         const GHC.Event.Control.$fShowControlMessage_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.637180267 UTC

[section ""data" . GHC.Event.Control.controlIsDead_closure" {
     GHC.Event.Control.controlIsDead_closure:
         const GHC.Event.Control.controlIsDead_info;
 },
 GHC.Event.Control.controlIsDead_entry() //  [R2]
         { info_tbl: [(capUM,
                       label: GHC.Event.Control.controlIsDead_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capUM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capUQ; else goto capUR;
       capUQ: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlIsDead_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capUR: // global
           I64[Sp - 8] = block_capUJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapUV; else goto capUK;
       uapUV: // global
           call _capUJ(R1) args: 0, res: 0, upd: 0;
       capUK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capUJ() //  [R1]
         { info_tbl: [(capUJ,
                       label: block_capUJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capUJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capUU; else goto capUT;
       capUU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capUT: // global
           _saoYg::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _saoYg::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.642983936 UTC

[section ""data" . GHC.Event.Control.didRegisterWakeupFd_closure" {
     GHC.Event.Control.didRegisterWakeupFd_closure:
         const GHC.Event.Control.didRegisterWakeupFd_info;
 },
 GHC.Event.Control.didRegisterWakeupFd_entry() //  [R2]
         { info_tbl: [(capVd,
                       label: GHC.Event.Control.didRegisterWakeupFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capVd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capVe; else goto capVf;
       capVe: // global
           R2 = R2;
           R1 = GHC.Event.Control.didRegisterWakeupFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capVf: // global
           I64[Sp - 8] = block_capVa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapVj; else goto capVb;
       uapVj: // global
           call _capVa(R1) args: 0, res: 0, upd: 0;
       capVb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capVa() //  [R1]
         { info_tbl: [(capVa,
                       label: block_capVa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capVa: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.64834238 UTC

[section ""data" . GHC.Event.Control.controlEventFd_closure" {
     GHC.Event.Control.controlEventFd_closure:
         const GHC.Event.Control.controlEventFd_info;
 },
 GHC.Event.Control.controlEventFd_entry() //  [R2]
         { info_tbl: [(capVC,
                       label: GHC.Event.Control.controlEventFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capVC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capVG; else goto capVH;
       capVG: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlEventFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capVH: // global
           I64[Sp - 8] = block_capVz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapVL; else goto capVA;
       uapVL: // global
           call _capVz(R1) args: 0, res: 0, upd: 0;
       capVA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capVz() //  [R1]
         { info_tbl: [(capVz,
                       label: block_capVz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capVz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capVK; else goto capVJ;
       capVK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capVJ: // global
           _saoYs::I64 = I64[R1 + 39];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saoYs::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.6546665 UTC

[section ""data" . GHC.Event.Control.controlWriteFd_closure" {
     GHC.Event.Control.controlWriteFd_closure:
         const GHC.Event.Control.controlWriteFd_info;
 },
 GHC.Event.Control.controlWriteFd_entry() //  [R2]
         { info_tbl: [(capW3,
                       label: GHC.Event.Control.controlWriteFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capW3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capW7; else goto capW8;
       capW7: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlWriteFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capW8: // global
           I64[Sp - 8] = block_capW0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapWc; else goto capW1;
       uapWc: // global
           call _capW0(R1) args: 0, res: 0, upd: 0;
       capW1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capW0() //  [R1]
         { info_tbl: [(capW0,
                       label: block_capW0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capW0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capWb; else goto capWa;
       capWb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capWa: // global
           _saoYy::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saoYy::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.660287834 UTC

[section ""data" . GHC.Event.Control.controlReadFd_closure" {
     GHC.Event.Control.controlReadFd_closure:
         const GHC.Event.Control.controlReadFd_info;
 },
 GHC.Event.Control.controlReadFd_entry() //  [R2]
         { info_tbl: [(capWu,
                       label: GHC.Event.Control.controlReadFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capWu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto capWy; else goto capWz;
       capWy: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlReadFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       capWz: // global
           I64[Sp - 8] = block_capWr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapWD; else goto capWs;
       uapWD: // global
           call _capWr(R1) args: 0, res: 0, upd: 0;
       capWs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capWr() //  [R1]
         { info_tbl: [(capWr,
                       label: block_capWr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capWr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto capWC; else goto capWB;
       capWC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       capWB: // global
           _saoYE::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saoYE::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.666523771 UTC

[section ""data" . GHC.Event.Control.wakeupReadFd_closure" {
     GHC.Event.Control.wakeupReadFd_closure:
         const GHC.Event.Control.wakeupReadFd_info;
 },
 GHC.Event.Control.wakeupReadFd_entry() //  [R2]
         { info_tbl: [(capWS,
                       label: GHC.Event.Control.wakeupReadFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capWS: // global
           R2 = R2;
           call GHC.Event.Control.controlEventFd_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.669677441 UTC

[section ""cstring" . GHC.Event.Control.$trModule4_bytes" {
     GHC.Event.Control.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.671246023 UTC

[section ""data" . GHC.Event.Control.$trModule3_closure" {
     GHC.Event.Control.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.672918212 UTC

[section ""cstring" . GHC.Event.Control.$trModule2_bytes" {
     GHC.Event.Control.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.674525719 UTC

[section ""data" . GHC.Event.Control.$trModule1_closure" {
     GHC.Event.Control.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.676157095 UTC

[section ""data" . GHC.Event.Control.$trModule_closure" {
     GHC.Event.Control.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Control.$trModule3_closure+1;
         const GHC.Event.Control.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.67833283 UTC

[section ""data" . $krep_raoWE_closure" {
     $krep_raoWE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.679994696 UTC

[section ""data" . $krep1_raoWF_closure" {
     $krep1_raoWF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.681686794 UTC

[section ""data" . $krep2_raoWG_closure" {
     $krep2_raoWG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.683407321 UTC

[section ""data" . $krep3_raoWH_closure" {
     $krep3_raoWH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.685102139 UTC

[section ""data" . $krep4_raoWI_closure" {
     $krep4_raoWI_closure:
         const :_con_info;
         const $krep1_raoWF_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.68720975 UTC

[section ""data" . $krep5_raoWJ_closure" {
     $krep5_raoWJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep4_raoWI_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.688926196 UTC

[section ""data" . $krep6_raoWK_closure" {
     $krep6_raoWK_closure:
         const :_con_info;
         const $krep2_raoWG_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.691177544 UTC

[section ""data" . $krep7_raoWL_closure" {
     $krep7_raoWL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep6_raoWK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.69281081 UTC

[section ""cstring" . GHC.Event.Control.$tcControlMessage2_bytes" {
     GHC.Event.Control.$tcControlMessage2_bytes:
         I8[] [67,111,110,116,114,111,108,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.69443444 UTC

[section ""data" . GHC.Event.Control.$tcControlMessage1_closure" {
     GHC.Event.Control.$tcControlMessage1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tcControlMessage2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.696092906 UTC

[section ""data" . GHC.Event.Control.$tcControlMessage_closure" {
     GHC.Event.Control.$tcControlMessage_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tcControlMessage1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13490094119359668037;
         const 2953272121777407512;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.698201799 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie1_closure" {
     GHC.Event.Control.$tc'CMsgDie1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControlMessage_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.699946283 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgWakeup2_bytes" {
     GHC.Event.Control.$tc'CMsgWakeup2_bytes:
         I8[] [39,67,77,115,103,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.701560719 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgWakeup1_closure" {
     GHC.Event.Control.$tc'CMsgWakeup1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgWakeup2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.703235376 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgWakeup_closure" {
     GHC.Event.Control.$tc'CMsgWakeup_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgWakeup1_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 7148775915826095055;
         const 6381666496233651559;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.705034368 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgDie3_bytes" {
     GHC.Event.Control.$tc'CMsgDie3_bytes:
         I8[] [39,67,77,115,103,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.707036813 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie2_closure" {
     GHC.Event.Control.$tc'CMsgDie2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgDie3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.708721231 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie_closure" {
     GHC.Event.Control.$tc'CMsgDie_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgDie2_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 2337574862383861426;
         const 4640161931169225929;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.710843125 UTC

[section ""data" . $krep8_raoWM_closure" {
     $krep8_raoWM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_raoWE_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.71247341 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal1_closure" {
     GHC.Event.Control.$tc'CMsgSignal1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_raoWJ_closure+1;
         const $krep8_raoWM_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.714224407 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgSignal3_bytes" {
     GHC.Event.Control.$tc'CMsgSignal3_bytes:
         I8[] [39,67,77,115,103,83,105,103,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.716388755 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal2_closure" {
     GHC.Event.Control.$tc'CMsgSignal2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgSignal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.718201646 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal_closure" {
     GHC.Event.Control.$tc'CMsgSignal_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgSignal2_closure+1;
         const GHC.Event.Control.$tc'CMsgSignal1_closure+4;
         const 14616621783190690564;
         const 9307773026781339016;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.72006077 UTC

[section ""cstring" . GHC.Event.Control.$tcControl2_bytes" {
     GHC.Event.Control.$tcControl2_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.721781411 UTC

[section ""data" . GHC.Event.Control.$tcControl1_closure" {
     GHC.Event.Control.$tcControl1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tcControl2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.723562641 UTC

[section ""data" . GHC.Event.Control.$tcControl_closure" {
     GHC.Event.Control.$tcControl_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tcControl1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10901861211350082240;
         const 15092011187582559326;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.725390075 UTC

[section ""data" . $krep9_raoWN_closure" {
     $krep9_raoWN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControl_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.727169625 UTC

[section ""data" . $krep10_raoWO_closure" {
     $krep10_raoWO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_raoWL_closure+1;
         const $krep9_raoWN_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.728871206 UTC

[section ""data" . $krep11_raoWP_closure" {
     $krep11_raoWP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_raoWG_closure+1;
         const $krep10_raoWO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.730892107 UTC

[section ""data" . $krep12_raoWQ_closure" {
     $krep12_raoWQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep11_raoWP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.732631622 UTC

[section ""data" . $krep13_raoWR_closure" {
     $krep13_raoWR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep12_raoWQ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.734355936 UTC

[section ""data" . GHC.Event.Control.$tc'W1_closure" {
     GHC.Event.Control.$tc'W1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep13_raoWR_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.73607424 UTC

[section ""cstring" . GHC.Event.Control.$tc'W3_bytes" {
     GHC.Event.Control.$tc'W3_bytes:
         I8[] [39,87]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.73809553 UTC

[section ""data" . GHC.Event.Control.$tc'W2_closure" {
     GHC.Event.Control.$tc'W2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'W3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.739787497 UTC

[section ""data" . GHC.Event.Control.$tc'W_closure" {
     GHC.Event.Control.$tc'W_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'W2_closure+1;
         const GHC.Event.Control.$tc'W1_closure+4;
         const 17903566110422877322;
         const 1788372901503945479;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.743196786 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_$c==_closure" {
     GHC.Event.Control.$fEqControlMessage_$c==_closure:
         const GHC.Event.Control.$fEqControlMessage_$c==_info;
 },
 GHC.Event.Control.$fEqControlMessage_$c==_entry() //  [R2, R3]
         { info_tbl: [(capXP,
                       label: GHC.Event.Control.$fEqControlMessage_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capXP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capXQ; else goto capXR;
       capXQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fEqControlMessage_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capXR: // global
           I64[Sp - 16] = block_capXH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uapYW; else goto capXI;
       uapYW: // global
           call _capXH(R1) args: 0, res: 0, upd: 0;
       capXI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capXH() //  [R1]
         { info_tbl: [(capXH,
                       label: block_capXH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capXH: // global
           _saoYK::P64 = P64[Sp + 8];
           _capXO::P64 = R1 & 7;
           if (_capXO::P64 < 3) goto uapYM; else goto capXN;
       uapYM: // global
           if (_capXO::P64 < 2) goto capXL; else goto capXM;
       capXL: // global
           I64[Sp + 8] = block_capXU_info;
           R1 = _saoYK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapYT; else goto capXW;
       uapYT: // global
           call _capXU(R1) args: 0, res: 0, upd: 0;
       capXW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capXM: // global
           I64[Sp + 8] = block_capY9_info;
           R1 = _saoYK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uapYU; else goto capYb;
       uapYU: // global
           call _capY9(R1) args: 0, res: 0, upd: 0;
       capYb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capXN: // global
           I64[Sp - 8] = block_capYo_info;
           _saoYO::I64 = I64[R1 + 13];
           _saoYQ::I64 = I64[R1 + 21];
           R1 = _saoYK::P64;
           I64[Sp] = _saoYQ::I64;
           I64[Sp + 8] = _saoYO::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uapYV; else goto capYq;
       uapYV: // global
           call _capYo(R1) args: 0, res: 0, upd: 0;
       capYq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capXU() //  [R1]
         { info_tbl: [(capXU,
                       label: block_capXU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capXU: // global
           if (R1 & 7 == 1) goto uapYN; else goto uapYO;
       uapYN: // global
           Sp = Sp + 8;
           call _capYl() args: 0, res: 0, upd: 0;
       uapYO: // global
           Sp = Sp + 8;
           call _capYD() args: 0, res: 0, upd: 0;
     }
 },
 _capY9() //  [R1]
         { info_tbl: [(capY9,
                       label: block_capY9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capY9: // global
           if (R1 & 7 == 2) goto uapYP; else goto uapYQ;
       uapYP: // global
           Sp = Sp + 8;
           call _capYl() args: 0, res: 0, upd: 0;
       uapYQ: // global
           Sp = Sp + 8;
           call _capYD() args: 0, res: 0, upd: 0;
     }
 },
 _capYl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capYl: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _capYo() //  [R1]
         { info_tbl: [(capYo,
                       label: block_capYo_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capYo: // global
           if (R1 & 7 == 3) goto capYF; else goto uapYR;
       capYF: // global
           if (I64[Sp + 16] == I64[R1 + 13]) goto capYE; else goto uapYS;
       capYE: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 21]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uapYS: // global
           Sp = Sp + 24;
           goto uapZ2;
       uapYR: // global
           Sp = Sp + 24;
           goto uapZ2;
       uapZ2: // global
           call _capYD() args: 0, res: 0, upd: 0;
     }
 },
 _capYD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capYD: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.757327935 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_$c/=_closure" {
     GHC.Event.Control.$fEqControlMessage_$c/=_closure:
         const GHC.Event.Control.$fEqControlMessage_$c/=_info;
 },
 GHC.Event.Control.$fEqControlMessage_$c/=_entry() //  [R2, R3]
         { info_tbl: [(capZS,
                       label: GHC.Event.Control.$fEqControlMessage_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capZS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto capZT; else goto capZU;
       capZT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fEqControlMessage_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       capZU: // global
           I64[Sp - 16] = block_capZK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaq15; else goto capZL;
       uaq15: // global
           call _capZK(R1) args: 0, res: 0, upd: 0;
       capZL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capZK() //  [R1]
         { info_tbl: [(capZK,
                       label: block_capZK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capZK: // global
           _saoYY::P64 = P64[Sp + 8];
           _capZR::P64 = R1 & 7;
           if (_capZR::P64 < 3) goto uaq0T; else goto capZQ;
       uaq0T: // global
           if (_capZR::P64 < 2) goto capZO; else goto capZP;
       capZO: // global
           I64[Sp + 8] = block_capZX_info;
           R1 = _saoYY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaq12; else goto capZZ;
       uaq12: // global
           call _capZX(R1) args: 0, res: 0, upd: 0;
       capZZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capZP: // global
           I64[Sp + 8] = block_caq0c_info;
           R1 = _saoYY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaq13; else goto caq0e;
       uaq13: // global
           call _caq0c(R1) args: 0, res: 0, upd: 0;
       caq0e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       capZQ: // global
           I64[Sp - 8] = block_caq0r_info;
           _saoZ2::I64 = I64[R1 + 13];
           _saoZ4::I64 = I64[R1 + 21];
           R1 = _saoYY::P64;
           I64[Sp] = _saoZ4::I64;
           I64[Sp + 8] = _saoZ2::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaq14; else goto caq0t;
       uaq14: // global
           call _caq0r(R1) args: 0, res: 0, upd: 0;
       caq0t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _capZX() //  [R1]
         { info_tbl: [(capZX,
                       label: block_capZX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       capZX: // global
           if (R1 & 7 == 1) goto uaq0U; else goto uaq0V;
       uaq0U: // global
           Sp = Sp + 8;
           call _caq0N() args: 0, res: 0, upd: 0;
       uaq0V: // global
           Sp = Sp + 8;
           call _caq0M() args: 0, res: 0, upd: 0;
     }
 },
 _caq0c() //  [R1]
         { info_tbl: [(caq0c,
                       label: block_caq0c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq0c: // global
           if (R1 & 7 == 2) goto uaq0W; else goto uaq0X;
       uaq0W: // global
           Sp = Sp + 8;
           call _caq0N() args: 0, res: 0, upd: 0;
       uaq0X: // global
           Sp = Sp + 8;
           call _caq0M() args: 0, res: 0, upd: 0;
     }
 },
 _caq0r() //  [R1]
         { info_tbl: [(caq0r,
                       label: block_caq0r_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq0r: // global
           if (R1 & 7 == 3) goto caq0P; else goto uaq0Y;
       caq0P: // global
           if (I64[Sp + 16] == I64[R1 + 13]) goto caq0O; else goto uaq0Z;
       caq0O: // global
           if (I64[Sp + 8] == I64[R1 + 21]) goto uaq10; else goto uaq11;
       uaq10: // global
           Sp = Sp + 24;
           call _caq0N() args: 0, res: 0, upd: 0;
       uaq11: // global
           Sp = Sp + 24;
           goto uaq1d;
       uaq0Z: // global
           Sp = Sp + 24;
           goto uaq1d;
       uaq0Y: // global
           Sp = Sp + 24;
           goto uaq1d;
       uaq1d: // global
           call _caq0M() args: 0, res: 0, upd: 0;
     }
 },
 _caq0N() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq0N: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caq0M() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq0M: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.770441944 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_closure" {
     GHC.Event.Control.$fEqControlMessage_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Event.Control.$fEqControlMessage_$c==_closure+2;
         const GHC.Event.Control.$fEqControlMessage_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.772197195 UTC

[section ""cstring" . GHC.Event.Control.sendWakeup3_bytes" {
     GHC.Event.Control.sendWakeup3_bytes:
         I8[] [115,101,110,100,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.774667507 UTC

[section ""data" . GHC.Event.Control.sendWakeup2_closure" {
     GHC.Event.Control.sendWakeup2_closure:
         const GHC.Event.Control.sendWakeup2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.sendWakeup2_entry() //  [R1]
         { info_tbl: [(caq1W,
                       label: GHC.Event.Control.sendWakeup2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq1W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caq1X; else goto caq1Y;
       caq1X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caq1Y: // global
           (_caq1T::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caq1T::I64 == 0) goto caq1V; else goto caq1U;
       caq1V: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caq1U: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caq1T::I64;
           R2 = GHC.Event.Control.sendWakeup3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.779229539 UTC

[section ""data" . GHC.Event.Control.$wsendWakeup_closure" {
     GHC.Event.Control.$wsendWakeup_closure:
         const GHC.Event.Control.$wsendWakeup_info;
         const 0;
 },
 GHC.Event.Control.$wsendWakeup_entry() //  [R2, R3]
         { info_tbl: [(caq2c,
                       label: GHC.Event.Control.$wsendWakeup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq2c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caq2d; else goto caq2e;
       caq2d: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wsendWakeup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caq2e: // global
           _saoZc::P64 = R3;
           (_saoZi::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2)), 1);
           if (%MO_SS_Conv_W64_W32(_saoZi::I64) == 0 :: W32) goto uaq32; else goto caq2s;
       uaq32: // global
           call _caq2W() args: 0, res: 0, upd: 0;
       caq2s: // global
           (_saoZn::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp - 16] = block_caq2q_info;
           R1 = P64[_saoZc::P64 + 8];
           I64[Sp - 8] = _saoZn::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaq33; else goto caq2u;
       uaq33: // global
           call _caq2q(R1) args: 0, res: 0, upd: 0;
       caq2u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caq2q() //  [R1]
         { info_tbl: [(caq2q,
                       label: block_caq2q_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq2q: // global
           if (R1 & 7 == 1) goto caq2J; else goto caq2T;
       caq2T: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) != 9 :: W32) goto caq2J; else goto uaq31;
       caq2J: // global
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 16;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 0, upd: 8;
       uaq31: // global
           Sp = Sp + 16;
           call _caq2W() args: 0, res: 0, upd: 0;
     }
 },
 _caq2W() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq2W: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.787152028 UTC

[section ""data" . GHC.Event.Control.sendWakeup1_closure" {
     GHC.Event.Control.sendWakeup1_closure:
         const GHC.Event.Control.sendWakeup1_info;
         const 0;
 },
 GHC.Event.Control.sendWakeup1_entry() //  [R2]
         { info_tbl: [(caq3r,
                       label: GHC.Event.Control.sendWakeup1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq3r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caq3s; else goto caq3t;
       caq3s: // global
           R2 = R2;
           R1 = GHC.Event.Control.sendWakeup1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caq3t: // global
           I64[Sp - 8] = block_caq3o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaq3x; else goto caq3p;
       uaq3x: // global
           call _caq3o(R1) args: 0, res: 0, upd: 0;
       caq3p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caq3o() //  [R1]
         { info_tbl: [(caq3o,
                       label: block_caq3o_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq3o: // global
           R3 = P64[R1 + 15];
           R2 = I64[R1 + 39];
           Sp = Sp + 8;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.792635979 UTC

[section ""data" . GHC.Event.Control.sendWakeup_closure" {
     GHC.Event.Control.sendWakeup_closure:
         const GHC.Event.Control.sendWakeup_info;
         const 0;
 },
 GHC.Event.Control.sendWakeup_entry() //  [R2]
         { info_tbl: [(caq3L,
                       label: GHC.Event.Control.sendWakeup_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq3L: // global
           R2 = R2;
           call GHC.Event.Control.sendWakeup1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.796085509 UTC

[section ""cstring" . lvl_raoWS_bytes" {
     lvl_raoWS_bytes:
         I8[] [115,101,110,100,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.798009827 UTC

[section ""data" . lvl1_raoWT_closure" {
     lvl1_raoWT_closure:
         const lvl1_raoWT_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_raoWT_entry() //  [R1]
         { info_tbl: [(caq3Z,
                       label: lvl1_raoWT_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq3Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caq40; else goto caq41;
       caq40: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caq41: // global
           (_caq3W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caq3W::I64 == 0) goto caq3Y; else goto caq3X;
       caq3Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caq3X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caq3W::I64;
           R2 = lvl_raoWS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.801890714 UTC

[section ""data" . GHC.Event.Control.sendDie2_closure" {
     GHC.Event.Control.sendDie2_closure:
         const GHC.Event.Control.sendDie2_info;
         const 0;
 },
 GHC.Event.Control.sendDie2_entry() //  [R2]
         { info_tbl: [(caq4f,
                       label: GHC.Event.Control.sendDie2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq4f: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_raoWT_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.805605607 UTC

[section ""data" . GHC.Event.Control.$wsendDie_closure" {
     GHC.Event.Control.$wsendDie_closure:
         const GHC.Event.Control.$wsendDie_info;
         const 0;
 },
 GHC.Event.Control.$wsendDie_entry() //  [R2, R3]
         { info_tbl: [(caq4u,
                       label: GHC.Event.Control.$wsendDie_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq4u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caq4v; else goto caq4w;
       caq4v: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wsendDie_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caq4w: // global
           I64[Sp - 16] = block_caq4q_info;
           _saoZE::I64 = R2;
           R2 = 1;
           R1 = 1;
           I64[Sp - 8] = _saoZE::I64;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _caq4q() //  [R1]
         { info_tbl: [(caq4q,
                       label: block_caq4q_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq4q: // global
           _saoZE::I64 = I64[Sp + 8];
           _saoZN::I64 = R1 + 16;
           I8[_saoZN::I64] = 254 :: W8;
           (_saoZT::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC20ZCbaseZCSystemziPosixziInternalsZCwrite(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saoZE::I64)), _saoZN::I64, 1);
           call MO_Touch(R1);
           if (_saoZT::I64 == (-1)) goto caq4K; else goto caq4J;
       caq4K: // global
           (_saoZZ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _saoZZ::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.sendDie2_entry(R2) args: 8, res: 0, upd: 8;
       caq4J: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.812063655 UTC

[section ""data" . GHC.Event.Control.sendDie1_closure" {
     GHC.Event.Control.sendDie1_closure:
         const GHC.Event.Control.sendDie1_info;
         const 0;
 },
 GHC.Event.Control.sendDie1_entry() //  [R2]
         { info_tbl: [(caq55,
                       label: GHC.Event.Control.sendDie1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq55: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caq56; else goto caq57;
       caq56: // global
           R2 = R2;
           R1 = GHC.Event.Control.sendDie1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caq57: // global
           I64[Sp - 8] = block_caq52_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaq5b; else goto caq53;
       uaq5b: // global
           call _caq52(R1) args: 0, res: 0, upd: 0;
       caq53: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caq52() //  [R1]
         { info_tbl: [(caq52,
                       label: block_caq52_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq52: // global
           R3 = P64[R1 + 15];
           R2 = I64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Event.Control.$wsendDie_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.817997085 UTC

[section ""data" . GHC.Event.Control.sendDie_closure" {
     GHC.Event.Control.sendDie_closure:
         const GHC.Event.Control.sendDie_info;
         const 0;
 },
 GHC.Event.Control.sendDie_entry() //  [R2]
         { info_tbl: [(caq5p,
                       label: GHC.Event.Control.sendDie_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq5p: // global
           R2 = R2;
           call GHC.Event.Control.sendDie1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.821784734 UTC

[section ""data" . GHC.Event.Control.closeControl3_closure" {
     GHC.Event.Control.closeControl3_closure:
         const (,)_con_info;
         const GHC.Types.True_closure+2;
         const GHC.Tuple.()_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.823612871 UTC

[section ""data" . GHC.Event.Control.closeControl2_closure" {
     GHC.Event.Control.closeControl2_closure:
         const GHC.Event.Control.closeControl2_info;
 },
 GHC.Event.Control.closeControl2_entry() //  []
         { info_tbl: [(caq5B,
                       label: GHC.Event.Control.closeControl2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq5B: // global
           R1 = GHC.Event.Control.closeControl3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.827496785 UTC

[section ""data" . GHC.Event.Control.closeControl1_closure" {
     GHC.Event.Control.closeControl1_closure:
         const GHC.Event.Control.closeControl1_info;
 },
 GHC.Event.Control.closeControl1_entry() //  [R2]
         { info_tbl: [(caq5Q,
                       label: GHC.Event.Control.closeControl1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq5Q: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caq5R; else goto caq5S;
       caq5R: // global
           R2 = R2;
           R1 = GHC.Event.Control.closeControl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caq5S: // global
           I64[Sp - 8] = block_caq5N_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaq6y; else goto caq5O;
       uaq6y: // global
           call _caq5N(R1) args: 0, res: 0, upd: 0;
       caq5O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caq5N() //  [R1]
         { info_tbl: [(caq5N,
                       label: block_caq5N_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq5N: // global
           I64[Sp - 32] = block_caq5V_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           _sap0g::P64 = P64[R1 + 7];
           _sap0d::I64 = I64[R1 + 23];
           _sap0e::I64 = I64[R1 + 31];
           _sap0f::I64 = I64[R1 + 39];
           R1 = P64[R1 + 15];
           I64[Sp - 24] = _sap0e::I64;
           I64[Sp - 16] = _sap0f::I64;
           P64[Sp - 8] = _sap0g::P64;
           I64[Sp] = _sap0d::I64;
           Sp = Sp - 32;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _caq5V() //  []
         { info_tbl: [(caq5V,
                       label: block_caq5V_info
                       rep:StackRep [True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq5V: // global
           _sap0e::I64 = I64[Sp + 8];
           _sap0g::P64 = P64[Sp + 24];
           (_sap0p::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 32])));
           (_sap0u::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0e::I64)));
           I64[Sp + 8] = block_caq69_info;
           R1 = _sap0g::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaq6z; else goto caq6a;
       uaq6z: // global
           call _caq69(R1) args: 0, res: 0, upd: 0;
       caq6a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caq69() //  [R1]
         { info_tbl: [(caq69,
                       label: block_caq69_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq69: // global
           _sap0f::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caq6g; else goto caq6k;
       caq6g: // global
           (_sap0A::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0f::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caq6k: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sap0I::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0f::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.83740216 UTC

[section ""data" . GHC.Event.Control.closeControl_closure" {
     GHC.Event.Control.closeControl_closure:
         const GHC.Event.Control.closeControl_info;
 },
 GHC.Event.Control.closeControl_entry() //  [R2]
         { info_tbl: [(caq6Z,
                       label: GHC.Event.Control.closeControl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq6Z: // global
           R2 = R2;
           call GHC.Event.Control.closeControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.840578961 UTC

[section ""cstring" . lvl2_raoWU_bytes" {
     lvl2_raoWU_bytes:
         I8[] [101,118,101,110,116,102,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.842786961 UTC

[section ""data" . lvl3_raoWV_closure" {
     lvl3_raoWV_closure:
         const lvl3_raoWV_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_raoWV_entry() //  [R1]
         { info_tbl: [(caq7d,
                       label: lvl3_raoWV_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq7d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caq7e; else goto caq7f;
       caq7e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caq7f: // global
           (_caq7a::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caq7a::I64 == 0) goto caq7c; else goto caq7b;
       caq7c: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caq7b: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caq7a::I64;
           R2 = lvl2_raoWU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.846642987 UTC

[section ""cstring" . lvl4_raoWW_bytes" {
     lvl4_raoWW_bytes:
         I8[] [112,105,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.848962042 UTC

[section ""data" . lvl5_raoWX_closure" {
     lvl5_raoWX_closure:
         const lvl5_raoWX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_raoWX_entry() //  [R1]
         { info_tbl: [(caq7u,
                       label: lvl5_raoWX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq7u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caq7v; else goto caq7w;
       caq7v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caq7w: // global
           (_caq7r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caq7r::I64 == 0) goto caq7t; else goto caq7s;
       caq7t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caq7s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caq7r::I64;
           R2 = lvl4_raoWW_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.852863287 UTC

[section ""data" . lvl6_raoWY_closure" {
     lvl6_raoWY_closure:
         const lvl6_raoWY_info;
         const 0;
 },
 lvl6_raoWY_entry() //  [R2]
         { info_tbl: [(caq7K,
                       label: lvl6_raoWY_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq7K: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl5_raoWX_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.85914714 UTC

[section ""data" . GHC.Event.Control.newControl1_closure" {
     GHC.Event.Control.newControl1_closure:
         const GHC.Event.Control.newControl1_info;
         const 0;
 },
 sat_sap1i_entry() //  [R1]
         { info_tbl: [(caq8g,
                       label: sat_sap1i_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq8g: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caq8s; else goto caq8r;
       caq8s: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caq8r: // global
           (_sap1f::I64) = call "capi" arg hints:  [‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC17ZCbaseZCSystemziPosixziInternalsZCfcntl(I64[R1 + 7], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 15])));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1f::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sap28_entry() //  [R1]
         { info_tbl: [(caq9C,
                       label: sat_sap28_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq9C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caq9O; else goto caq9N;
       caq9O: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caq9N: // global
           (_sap25::I64) = call "capi" arg hints:  [‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC17ZCbaseZCSystemziPosixziInternalsZCfcntl(I64[R1 + 15], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 7])));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap25::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.newControl1_entry() //  [R2]
         { info_tbl: [(caq9P,
                       label: GHC.Event.Control.newControl1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq9P: // global
           if ((Sp + -80) < SpLim) (likely: False) goto caq9Q; else goto caq9R;
       caq9Q: // global
           R2 = R2;
           R1 = GHC.Event.Control.newControl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caq9R: // global
           I64[Sp - 16] = block_caq7V_info;
           _sap0M::P64 = R2;
           R2 = 4;
           R1 = 8;
           P64[Sp - 8] = _sap0M::P64;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _caq7V() //  [R1]
         { info_tbl: [(caq7V,
                       label: block_caq7V_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq7V: // global
           _sap0U::I64 = R1 + 16;
           (_sap0Y::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] pipe(_sap0U::I64);
           _sap0Z::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap0Y::I64));
           if (_sap0Z::I64 == (-1)) goto caqcw; else goto uaqcZ;
       caqcw: // global
           (_sap3t::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap3t::I64;
           Sp = Sp + 16;
           call lvl6_raoWY_entry(R2) args: 8, res: 0, upd: 8;
       uaqcZ: // global
           I64[Sp - 16] = _sap0U::I64;
           I64[Sp - 8] = _sap0Z::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _caq86() args: 0, res: 0, upd: 0;
     }
 },
 _caq86() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq86: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caq9X; else goto caq9W;
       caq9X: // global
           HpAlloc = 24;
           I64[Sp - 8] = block_caq85_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caq9W: // global
           _sap0U::I64 = I64[Sp];
           _sap12::I64 = %MO_SS_Conv_W32_W64(I32[_sap0U::I64]);
           _sap15::I64 = %MO_SS_Conv_W32_W64(I32[_sap0U::I64 + 4]);
           (_sap19::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_getfl();
           I64[Hp - 16] = sat_sap1i_info;
           I64[Hp - 8] = _sap15::I64;
           I64[Hp] = _sap19::I64;
           I64[Sp - 16] = block_caq8t_info;
           R4 = Hp - 15;
           R3 = System.Posix.Internals.setNonBlockingFD3_closure;
           R2 = System.Posix.Internals.fdFileSize_pred_closure+1;
           I64[Sp - 8] = _sap19::I64;
           I64[Sp] = _sap15::I64;
           I64[Sp + 8] = _sap12::I64;
           Sp = Sp - 16;
           call Foreign.C.Error.throwErrnoIfMinus1Retry2_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _caq85() //  [R1]
         { info_tbl: [(caq85,
                       label: block_caq85_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq85: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _caq86() args: 0, res: 0, upd: 0;
     }
 },
 _caq8t() //  [R1]
         { info_tbl: [(caq8t,
                       label: block_caq8t_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq8t: // global
           I64[Sp] = block_caq8v_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaqd6; else goto caq8w;
       uaqd6: // global
           call _caq8v(R1) args: 0, res: 0, upd: 0;
       caq8w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caq8v() //  [R1]
         { info_tbl: [(caq8v,
                       label: block_caq8v_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq8v: // global
           _sap12::I64 = I64[Sp + 24];
           _sap15::I64 = I64[Sp + 16];
           _sap1n::I64 = I64[R1 + 7];
           (_sap1r::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_nonblock();
           _sap1s::I64 = _sap1n::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1r::I64));
           if (_sap1n::I64 == _sap1s::I64) goto sap1x; else goto caqct;
       caqct: // global
           (_sap3k::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfl();
           (_sap3p::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap15::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap3k::I64)), _sap1s::I64);
           goto sap1x;
       sap1x: // global
           (_sap1C::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfd();
           (_sap1G::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_fd_cloexec();
           (_sap1L::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap12::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1C::I64)), _sap1G::I64);
           if (%MO_SS_Conv_W64_W32(_sap1L::I64) == (-1) :: W32) goto caqcl; else goto caqa2;
       caqcl: // global
           (_sap3e::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap3e::I64;
           Sp = Sp + 48;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       caqa2: // global
           (_sap1R::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap15::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1C::I64)), _sap1G::I64);
           if (%MO_SS_Conv_W64_W32(_sap1R::I64) == (-1) :: W32) goto caqcf; else goto caqa5;
       caqcf: // global
           (_sap39::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap39::I64;
           Sp = Sp + 48;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       caqa5: // global
           (_sap1W::I64) = call "ccall" arg hints:  [‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] eventfd(0, 0);
           _sap30::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1W::I64));
           if (_sap30::I64 != (-1)) goto caqbU; else goto caqc5;
       caqbU: // global
           I64[Sp - 24] = _sap1C::I64;
           I64[Sp - 16] = _sap1G::I64;
           I64[Sp - 8] = _sap30::I64;
           I64[Sp] = _sap1r::I64;
           Sp = Sp - 24;
           call _caq9t() args: 0, res: 0, upd: 0;
       caqc5: // global
           I64[Sp - 24] = block_caqc2_info;
           R2 = lvl3_raoWV_closure;
           I64[Sp - 16] = _sap1C::I64;
           I64[Sp - 8] = _sap1G::I64;
           I64[Sp] = _sap1r::I64;
           Sp = Sp - 24;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqc2() //  [R1]
         { info_tbl: [(caqc2,
                       label: block_caqc2_info
                       rep:StackRep [True, True, True, True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqc2: // global
           I64[Sp] = block_caqc4_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaqdb; else goto caqc8;
       uaqdb: // global
           call _caqc4(R1) args: 0, res: 0, upd: 0;
       caqc8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqc4() //  [R1]
         { info_tbl: [(caqc4,
                       label: block_caqc4_info
                       rep:StackRep [True, True, True, True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqc4: // global
           I64[Sp] = I64[Sp + 8];
           I64[Sp + 8] = I64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           call _caq9t() args: 0, res: 0, upd: 0;
     }
 },
 _caq9t() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq9t: // global
           Hp = Hp + 24;
           _sap1Z::I64 = I64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto caqac; else goto caqab;
       caqac: // global
           HpAlloc = 24;
           I64[Sp - 8] = block_caq9s_info;
           R1 = _sap1Z::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caqab: // global
           I64[Hp - 16] = sat_sap28_info;
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = _sap1Z::I64;
           I64[Sp - 8] = block_caqa7_info;
           R4 = Hp - 15;
           R3 = System.Posix.Internals.setNonBlockingFD3_closure;
           R2 = System.Posix.Internals.fdFileSize_pred_closure+1;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrnoIfMinus1Retry2_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _caq9s() //  [R1]
         { info_tbl: [(caq9s,
                       label: block_caq9s_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caq9s: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _caq9t() args: 0, res: 0, upd: 0;
     }
 },
 _caqa7() //  [R1]
         { info_tbl: [(caqa7,
                       label: block_caqa7_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqa7: // global
           I64[Sp] = block_caqa9_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaqd9; else goto caqae;
       uaqd9: // global
           call _caqa9(R1) args: 0, res: 0, upd: 0;
       caqae: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqa9() //  [R1]
         { info_tbl: [(caqa9,
                       label: block_caqa9_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqa9: // global
           _sap0M::P64 = P64[Sp + 72];
           _sap1C::I64 = I64[Sp + 8];
           _sap1G::I64 = I64[Sp + 16];
           _sap1Z::I64 = I64[Sp + 24];
           _sap2d::I64 = I64[R1 + 7];
           _sap2e::I64 = _sap2d::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 32]));
           if (_sap2d::I64 == _sap2e::I64) goto sap2j; else goto caqbO;
       caqbO: // global
           (_sap2U::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfl();
           (_sap2Z::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap1Z::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap2U::I64)), _sap2e::I64);
           goto sap2j;
       sap2j: // global
           (_sap2p::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_sap1Z::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1C::I64)), _sap1G::I64);
           if (%MO_SS_Conv_W64_W32(_sap2p::I64) == (-1) :: W32) goto caqbG; else goto caqaT;
       caqbG: // global
           (_sap2O::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap2O::I64;
           Sp = Sp + 80;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       caqaT: // global
           I64[Sp + 16] = block_caqaR_info;
           R1 = _sap0M::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaqda; else goto caqaV;
       uaqda: // global
           call _caqaR(R1) args: 0, res: 0, upd: 0;
       caqaV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqaR() //  [R1]
         { info_tbl: [(caqaR,
                       label: block_caqaR_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqaR: // global
           if (R1 & 7 == 1) goto caqbe; else goto caqbA;
       caqbe: // global
           I64[Sp] = block_caqaZ_info;
           R1 = GHC.Types.False_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       caqbA: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd(I64[Sp + 8]);
           I64[Sp] = block_caqbm_info;
           R1 = GHC.Types.False_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqaZ() //  [R1]
         { info_tbl: [(caqaZ,
                       label: block_caqaZ_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqaZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caqbh; else goto caqbg;
       caqbh: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqbg: // global
           _sap12::I64 = I64[Sp + 40];
           _sap15::I64 = I64[Sp + 32];
           _sap1Z::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 48]);
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = GHC.Types.False_closure+1;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap12::I64));
           I64[Hp - 8] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap15::I64));
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1Z::I64));
           R1 = Hp - 39;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caqbm() //  [R1]
         { info_tbl: [(caqbm,
                       label: block_caqbm_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqbm: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caqbD; else goto caqbC;
       caqbD: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqbC: // global
           _sap12::I64 = I64[Sp + 40];
           _sap15::I64 = I64[Sp + 32];
           _sap1Z::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 48]);
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = GHC.Types.True_closure+2;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap12::I64));
           I64[Hp - 8] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap15::I64));
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sap1Z::I64));
           R1 = Hp - 39;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.896757316 UTC

[section ""data" . GHC.Event.Control.newControl_closure" {
     GHC.Event.Control.newControl_closure:
         const GHC.Event.Control.newControl_info;
         const 0;
 },
 GHC.Event.Control.newControl_entry() //  [R2]
         { info_tbl: [(caqeL,
                       label: GHC.Event.Control.newControl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqeL: // global
           R2 = R2;
           call GHC.Event.Control.newControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.900036744 UTC

[section ""cstring" . lvl7_raoWZ_bytes" {
     lvl7_raoWZ_bytes:
         I8[] [102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,115,105,103,105,110,102,111,95,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.902277092 UTC

[section ""data" . GHC.Event.Control.readControlMessage4_closure" {
     GHC.Event.Control.readControlMessage4_closure:
         const GHC.Event.Control.readControlMessage4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.readControlMessage4_entry() //  [R1]
         { info_tbl: [(caqf1,
                       label: GHC.Event.Control.readControlMessage4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqf1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caqf2; else goto caqf3;
       caqf2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqf3: // global
           (_caqeW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqeW::I64 == 0) goto caqeY; else goto caqeX;
       caqeY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqeX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqeW::I64;
           I64[Sp - 24] = block_caqeZ_info;
           R2 = lvl7_raoWZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _caqeZ() //  [R1]
         { info_tbl: [(caqeZ,
                       label: block_caqeZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqeZ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.907644687 UTC

[section ""cstring" . lvl8_raoX0_bytes" {
     lvl8_raoX0_bytes:
         I8[] [114,101,97,100,67,111,110,116,114,111,108,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.909525553 UTC

[section ""data" . lvl9_raoX1_closure" {
     lvl9_raoX1_closure:
         const lvl9_raoX1_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_raoX1_entry() //  [R1]
         { info_tbl: [(caqfo,
                       label: lvl9_raoX1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqfo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqfp; else goto caqfq;
       caqfp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqfq: // global
           (_caqfl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqfl::I64 == 0) goto caqfn; else goto caqfm;
       caqfn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqfm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqfl::I64;
           R2 = lvl8_raoX0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.913810504 UTC

[section ""data" . GHC.Event.Control.readControlMessage3_closure" {
     GHC.Event.Control.readControlMessage3_closure:
         const GHC.Event.Control.readControlMessage3_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage3_entry() //  [R2]
         { info_tbl: [(caqfE,
                       label: GHC.Event.Control.readControlMessage3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqfE: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl9_raoX1_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.917151011 UTC

[section ""cstring" . lvl10_raoX2_bytes" {
     lvl10_raoX2_bytes:
         I8[] [114,101,97,100,87,97,107,101,117,112,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.919042483 UTC

[section ""data" . lvl11_raoX3_closure" {
     lvl11_raoX3_closure:
         const lvl11_raoX3_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_raoX3_entry() //  [R1]
         { info_tbl: [(caqfS,
                       label: lvl11_raoX3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqfS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqfT; else goto caqfU;
       caqfT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqfU: // global
           (_caqfP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqfP::I64 == 0) goto caqfR; else goto caqfQ;
       caqfR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqfQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqfP::I64;
           R2 = lvl10_raoX2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.922998778 UTC

[section ""data" . GHC.Event.Control.readControlMessage2_closure" {
     GHC.Event.Control.readControlMessage2_closure:
         const GHC.Event.Control.readControlMessage2_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage2_entry() //  [R2]
         { info_tbl: [(caqg8,
                       label: GHC.Event.Control.readControlMessage2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqg8: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl11_raoX3_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.928167574 UTC

[section ""data" . GHC.Event.Control.$wreadControlMessage_closure" {
     GHC.Event.Control.$wreadControlMessage_closure:
         const GHC.Event.Control.$wreadControlMessage_info;
         const 0;
 },
 GHC.Event.Control.$wreadControlMessage_entry() //  [R2, R3, R4]
         { info_tbl: [(caqgo,
                       label: GHC.Event.Control.$wreadControlMessage_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 18} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqgo: // global
           if ((Sp + -56) < SpLim) (likely: False) goto caqgp; else goto caqgq;
       caqgp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wreadControlMessage_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caqgq: // global
           if (R4 == R2) goto caqgn; else goto caqgm;
       caqgn: // global
           I64[Sp - 16] = block_caqhJ_info;
           R1 = 8;
           I64[Sp - 8] = R4;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       caqgm: // global
           I64[Sp - 16] = block_caqgs_info;
           R2 = 1;
           R1 = 1;
           I64[Sp - 8] = R4;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqhJ() //  [R1]
         { info_tbl: [(caqhJ,
                       label: block_caqhJ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqhJ: // global
           (_sap4I::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), R1 + 16, 8);
           if (_sap4I::I64 == (-1)) goto caqhZ; else goto caqhY;
       caqhZ: // global
           (_sap4O::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap4O::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.readControlMessage2_entry(R2) args: 8, res: 0, upd: 8;
       caqhY: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgWakeup_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caqgs() //  [R1]
         { info_tbl: [(caqgs,
                       label: block_caqgs_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqgs: // global
           _sap3N::I64 = R1 + 16;
           (_sap3S::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), _sap3N::I64, 1);
           if (_sap3S::I64 == (-1)) goto caqhH; else goto caqhG;
       caqhH: // global
           (_sap4v::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _sap4v::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.readControlMessage3_entry(R2) args: 8, res: 0, upd: 8;
       caqhG: // global
           _sap3X::I64 = %MO_UU_Conv_W8_W64(I8[_sap3N::I64]);
           if (_sap3X::I64 == 254) goto caqhD; else goto uaqia;
       caqhD: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgDie_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uaqia: // global
           if (_sap3X::I64 == 255) goto caqhE; else goto caqgJ;
       caqhE: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgWakeup_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caqgJ: // global
           I64[Sp - 16] = block_caqgM_info;
           I64[Sp - 8] = _sap3X::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           _uaqid::P64 = CurrentTSO;
           I64[I64[_uaqid::P64 + 24] + 16] = Sp;
           _uaqie::I64 = CurrentNursery;
           P64[_uaqie::I64 + 8] = Hp + 8;
           I64[_uaqid::P64 + 104] = I64[_uaqid::P64 + 104] - ((Hp + 8) - I64[_uaqie::I64]);
           (_uaqib::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_sap41::I64) = call "ccall" arg hints:  []  result hints:  [] __hscore_sizeof_siginfo_t();
           (_uaqic::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_uaqib::I64);
           BaseReg = _uaqic::I64;
           _uaqif::P64 = CurrentTSO;
           _uaqig::P64 = I64[_uaqif::P64 + 24];
           Sp = I64[_uaqig::P64 + 16];
           SpLim = _uaqig::P64 + 192;
           HpAlloc = 0;
           _uaqih::I64 = CurrentNursery;
           _uaqii::I64 = I64[_uaqih::I64 + 8];
           Hp = _uaqii::I64 - 8;
           _uaqij::I64 = I64[_uaqih::I64];
           HpLim = _uaqij::I64 + ((%MO_SS_Conv_W32_W64(I32[_uaqih::I64 + 48]) << 12) - 1);
           I64[_uaqif::P64 + 104] = I64[_uaqif::P64 + 104] + (_uaqii::I64 - _uaqij::I64);
           R1 = _sap41::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqgM() //  [R1]
         { info_tbl: [(caqgM,
                       label: block_caqgM_info
                       rep:StackRep [True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqgM: // global
           if (%MO_S_Ge_W64(R1, 0)) goto caqhf; else goto caqhC;
       caqhf: // global
           I64[Sp - 16] = block_caqgV_info;
           _sap41::I64 = R1;
           _sap42::I64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sap42::I64;
           I64[Sp] = _sap41::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       caqhC: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caqgV() //  [R1]
         { info_tbl: [(caqgV,
                       label: block_caqgV_info
                       rep:StackRep [True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqgV: // global
           I64[Sp] = block_caqgX_info;
           _sap46::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _sap46::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqgX() //  [R1]
         { info_tbl: [(caqgX,
                       label: block_caqgX_info
                       rep:StackRep [False, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqgX: // global
           _sap41::I64 = I64[Sp + 16];
           _sap4a::I64 = R1 + 16;
           (_sap4f::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 40])), _sap4a::I64, _sap41::I64);
           I64[Sp - 8] = block_caqh9_info;
           R2 = _sap41::I64;
           I64[Sp] = _sap4f::I64;
           I64[Sp + 16] = _sap4a::I64;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqh9() //  [R1]
         { info_tbl: [(caqh9,
                       label: block_caqh9_info
                       rep:StackRep [True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqh9: // global
           I64[Sp] = block_caqhd_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqhd() //  [R1]
         { info_tbl: [(caqhd,
                       label: block_caqhd_info
                       rep:StackRep [True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqhd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caqho; else goto caqhn;
       caqho: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caqhn: // global
           if (I64[Sp + 8] == R1) goto caqhA; else goto caqhB;
       caqhA: // global
           I64[Hp - 48] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 16];
           _sap3M::P64 = P64[Sp + 40];
           _sap3X::I64 = I64[Sp + 32];
           _sap4a::I64 = I64[Sp + 24];
           _caqhs::P64 = Hp - 46;
           call MO_Touch(_caqhs::P64);
           call MO_Touch(_sap3M::P64);
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = _caqhs::P64;
           I64[Hp - 8] = _sap4a::I64;
           I64[Hp] = _sap3X::I64;
           R1 = Hp - 21;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caqhB: // global
           Hp = Hp - 56;
           R1 = GHC.Event.Control.readControlMessage4_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.948001216 UTC

[section ""data" . GHC.Event.Control.readControlMessage1_closure" {
     GHC.Event.Control.readControlMessage1_closure:
         const GHC.Event.Control.readControlMessage1_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage1_entry() //  [R2, R3]
         { info_tbl: [(caqjk,
                       label: GHC.Event.Control.readControlMessage1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqjk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caqjo; else goto caqjp;
       caqjo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.readControlMessage1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caqjp: // global
           I64[Sp - 16] = block_caqjh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaqjx; else goto caqji;
       uaqjx: // global
           call _caqjh(R1) args: 0, res: 0, upd: 0;
       caqji: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqjh() //  [R1]
         { info_tbl: [(caqjh,
                       label: block_caqjh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqjh: // global
           I64[Sp - 8] = block_caqjn_info;
           _sap4Y::P64 = P64[R1 + 15];
           _sap4W::I64 = I64[R1 + 39];
           R1 = P64[Sp + 8];
           P64[Sp] = _sap4Y::P64;
           I64[Sp + 8] = _sap4W::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqjw; else goto caqjr;
       uaqjw: // global
           call _caqjn(R1) args: 0, res: 0, upd: 0;
       caqjr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqjn() //  [R1]
         { info_tbl: [(caqjn,
                       label: block_caqjn_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqjn: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wreadControlMessage_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.955254153 UTC

[section ""data" . GHC.Event.Control.readControlMessage_closure" {
     GHC.Event.Control.readControlMessage_closure:
         const GHC.Event.Control.readControlMessage_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage_entry() //  [R2, R3]
         { info_tbl: [(caqjP,
                       label: GHC.Event.Control.readControlMessage_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqjP: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Control.readControlMessage1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.959338988 UTC

[section ""data" . GHC.Event.Control.W_closure" {
     GHC.Event.Control.W_closure:
         const GHC.Event.Control.W_info;
 },
 GHC.Event.Control.W_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqjX: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.Control.W_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.W_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(caqk2,
                       label: GHC.Event.Control.W_info
                       rep:HeapRep static {
                             Fun {arity: 5
                                  fun_type: ArgGen [True, True, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqk2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caqk6; else goto caqk5;
       caqk6: // global
           HpAlloc = 48;
           R1 = GHC.Event.Control.W_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       caqk5: // global
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.964247964 UTC

[section ""data" . GHC.Event.Control.CMsgWakeup_closure" {
     GHC.Event.Control.CMsgWakeup_closure:
         const GHC.Event.Control.CMsgWakeup_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.966436422 UTC

[section ""data" . GHC.Event.Control.CMsgDie_closure" {
     GHC.Event.Control.CMsgDie_closure:
         const GHC.Event.Control.CMsgDie_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.968344678 UTC

[section ""data" . GHC.Event.Control.CMsgSignal_closure" {
     GHC.Event.Control.CMsgSignal_closure:
         const GHC.Event.Control.CMsgSignal_info;
 },
 GHC.Event.Control.CMsgSignal_entry() //  [R2, R3, R4]
         { info_tbl: [(caqkl,
                       label: GHC.Event.Control.CMsgSignal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 18} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqkl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caqkp; else goto caqko;
       caqkp: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.CMsgSignal_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caqko: // global
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = R2;
           I64[Hp] = R4;
           R1 = Hp - 21;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.972048246 UTC

[GHC.Event.Control.W_con_entry() //  [R1]
         { info_tbl: [(caqkv,
                       label: GHC.Event.Control.W_con_info
                       rep:HeapRep 2 ptrs 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,87]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqkv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.975194687 UTC

[GHC.Event.Control.CMsgWakeup_con_entry() //  [R1]
         { info_tbl: [(caqkB,
                       label: GHC.Event.Control.CMsgWakeup_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,87,97,107,101,117,112]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqkB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.978365762 UTC

[GHC.Event.Control.CMsgDie_con_entry() //  [R1]
         { info_tbl: [(caqkH,
                       label: GHC.Event.Control.CMsgDie_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,68,105,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqkH: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.981554472 UTC

[GHC.Event.Control.CMsgSignal_con_entry() //  [R1]
         { info_tbl: [(caqkN,
                       label: GHC.Event.Control.CMsgSignal_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,83,105,103,110,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqkN: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:24.98455123 UTC

[section ""relreadonly" . Sap8o_srt" {
     Sap8o_srt:
         const GHC.Ptr.$w$cshowsPrec_closure;
         const GHC.Event.Control.$fShowControlMessage3_closure;
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure;
         const GHC.Event.Control.$fShowControlMessage5_closure;
         const GHC.Event.Control.$fShowControlMessage7_closure;
         const GHC.Event.Control.$fShowControlMessage_$cshow_closure;
         const GHC.Event.Control.$fShowControlMessage1_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Control.$wsendWakeup_closure;
         const GHC.Event.Control.sendWakeup2_closure;
         const GHC.Event.Control.sendWakeup1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_raoWT_closure;
         const GHC.Event.Control.$wsendDie_closure;
         const GHC.Event.Control.sendDie2_closure;
         const GHC.Event.Control.sendDie1_closure;
         const lvl5_raoWX_closure;
         const Foreign.C.Error.throwErrnoIfMinus1Retry2_closure;
         const System.Posix.Internals.setCloseOnExec2_closure;
         const System.Posix.Internals.setNonBlockingFD3_closure;
         const GHC.Event.Control.newControl1_closure;
         const lvl3_raoWV_closure;
         const lvl6_raoWY_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl9_raoX1_closure;
         const lvl11_raoX3_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const GHC.Event.Control.$wreadControlMessage_closure;
         const GHC.Event.Control.readControlMessage2_closure;
         const GHC.Event.Control.readControlMessage3_closure;
         const GHC.Event.Control.readControlMessage4_closure;
         const GHC.Event.Control.readControlMessage1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.379978761 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:05:26.382334021 UTC

[section ""data" . GHC.Event.Control.$WW_closure" {
     GHC.Event.Control.$WW_closure:
         const GHC.Event.Control.$WW_info;
 },
 GHC.Event.Control.$WW_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(caqsX,
                       label: GHC.Event.Control.$WW_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 25} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqsX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caqtl; else goto caqtm;
       caqtl: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$WW_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caqtm: // global
           I64[Sp - 40] = block_caqsU_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaqtv; else goto caqsV;
       uaqtv: // global
           call _caqsU(R1) args: 0, res: 0, upd: 0;
       caqsV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqsU() //  [R1]
         { info_tbl: [(caqsU,
                       label: block_caqsU_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqsU: // global
           I64[Sp] = block_caqt0_info;
           _saql0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saql0::I64;
           if (R1 & 7 != 0) goto uaqtu; else goto caqt1;
       uaqtu: // global
           call _caqt0(R1) args: 0, res: 0, upd: 0;
       caqt1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqt0() //  [R1]
         { info_tbl: [(caqt0,
                       label: block_caqt0_info
                       rep:StackRep [True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqt0: // global
           I64[Sp] = block_caqt5_info;
           _saql2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saql2::I64;
           if (R1 & 7 != 0) goto uaqtw; else goto caqt6;
       uaqtw: // global
           call _caqt5(R1) args: 0, res: 0, upd: 0;
       caqt6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqt5() //  [R1]
         { info_tbl: [(caqt5,
                       label: block_caqt5_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqt5: // global
           I64[Sp] = block_caqta_info;
           _saql4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _saql4::I64;
           if (R1 & 7 != 0) goto uaqtx; else goto caqtb;
       uaqtx: // global
           call _caqta(R1) args: 0, res: 0, upd: 0;
       caqtb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqta() //  [R1]
         { info_tbl: [(caqta,
                       label: block_caqta_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqta: // global
           I64[Sp] = block_caqtf_info;
           _saql5::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _saql5::P64;
           if (R1 & 7 != 0) goto uaqty; else goto caqtg;
       uaqty: // global
           call _caqtf(R1) args: 0, res: 0, upd: 0;
       caqtg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqtf() //  [R1]
         { info_tbl: [(caqtf,
                       label: block_caqtf_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqtf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caqtt; else goto caqts;
       caqtt: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqts: // global
           _saql7::P64 = P64[R1 + 7];
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _saql7::P64;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 39;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.397673748 UTC

[section ""data" . GHC.Event.Control.$WCMsgSignal_closure" {
     GHC.Event.Control.$WCMsgSignal_closure:
         const GHC.Event.Control.$WCMsgSignal_info;
 },
 GHC.Event.Control.$WCMsgSignal_entry() //  [R2, R3]
         { info_tbl: [(caqug,
                       label: GHC.Event.Control.$WCMsgSignal_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqug: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caqup; else goto caquq;
       caqup: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$WCMsgSignal_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caquq: // global
           I64[Sp - 16] = block_caqud_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaquw; else goto caque;
       uaquw: // global
           call _caqud(R1) args: 0, res: 0, upd: 0;
       caque: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqud() //  [R1]
         { info_tbl: [(caqud,
                       label: block_caqud_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqud: // global
           I64[Sp - 8] = block_caquj_info;
           _saqlc::P64 = P64[R1 + 7];
           _saqlb::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _saqlc::P64;
           I64[Sp + 8] = _saqlb::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaquv; else goto caquk;
       uaquv: // global
           call _caquj(R1) args: 0, res: 0, upd: 0;
       caquk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caquj() //  [R1]
         { info_tbl: [(caquj,
                       label: block_caquj_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caquj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caquu; else goto caqut;
       caquu: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqut: // global
           _saqle::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _saqle::I64;
           R1 = Hp - 21;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.405940259 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage8_bytes" {
     GHC.Event.Control.$fShowControlMessage8_bytes:
         I8[] [67,77,115,103,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.407896492 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage7_closure" {
     GHC.Event.Control.$fShowControlMessage7_closure:
         const GHC.Event.Control.$fShowControlMessage7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage7_entry() //  [R1]
         { info_tbl: [(caquX,
                       label: GHC.Event.Control.$fShowControlMessage7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caquX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caquY; else goto caquZ;
       caquY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caquZ: // global
           (_caquU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caquU::I64 == 0) goto caquW; else goto caquV;
       caquW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caquV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caquU::I64;
           R2 = GHC.Event.Control.$fShowControlMessage8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.411904476 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage6_bytes" {
     GHC.Event.Control.$fShowControlMessage6_bytes:
         I8[] [67,77,115,103,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.414196552 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage5_closure" {
     GHC.Event.Control.$fShowControlMessage5_closure:
         const GHC.Event.Control.$fShowControlMessage5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage5_entry() //  [R1]
         { info_tbl: [(caqvf,
                       label: GHC.Event.Control.$fShowControlMessage5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqvf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqvg; else goto caqvh;
       caqvg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqvh: // global
           (_caqvc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqvc::I64 == 0) goto caqve; else goto caqvd;
       caqve: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqvd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqvc::I64;
           R2 = GHC.Event.Control.$fShowControlMessage6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.422769409 UTC

[section ""cstring" . GHC.Event.Control.$fShowControlMessage4_bytes" {
     GHC.Event.Control.$fShowControlMessage4_bytes:
         I8[] [67,77,115,103,83,105,103,110,97,108,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.424605986 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage3_closure" {
     GHC.Event.Control.$fShowControlMessage3_closure:
         const GHC.Event.Control.$fShowControlMessage3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage3_entry() //  [R1]
         { info_tbl: [(caqvx,
                       label: GHC.Event.Control.$fShowControlMessage3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqvx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqvy; else goto caqvz;
       caqvy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqvz: // global
           (_caqvu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqvu::I64 == 0) goto caqvw; else goto caqvv;
       caqvw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqvv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqvu::I64;
           R2 = GHC.Event.Control.$fShowControlMessage4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.431109047 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_info;
         const 0;
 },
 sat_saqls_entry() //  [R1]
         { info_tbl: [(caqwc,
                       label: sat_saqls_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqwc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caqwd; else goto caqwe;
       caqwd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqwe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caqw9_info;
           R4 = P64[R1 + 16];
           R3 = I64[R1 + 24];
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _caqw9() //  [R1, R2]
         { info_tbl: [(caqw9,
                       label: block_caqw9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqw9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caqwh; else goto caqwg;
       caqwh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caqwg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saqlx_entry() //  [R1]
         { info_tbl: [(caqwm,
                       label: sat_saqlx_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqwm: // global
           _saqlx::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caqwn; else goto caqwo;
       caqwo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caqwq; else goto caqwp;
       caqwq: // global
           HpAlloc = 56;
           goto caqwn;
       caqwn: // global
           R1 = _saqlx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqwp: // global
           _saqlh::P64 = P64[_saqlx::P64 + 16];
           _saqlj::I64 = I64[_saqlx::P64 + 24];
           _saqll::I64 = I64[_saqlx::P64 + 32];
           I64[Hp - 48] = sat_saqls_info;
           P64[Hp - 32] = _saqlh::P64;
           I64[Hp - 24] = _saqll::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp - 8] = block_caqwj_info;
           R3 = Hp - 14;
           R2 = _saqlj::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqwj() //  [R1, R2]
         { info_tbl: [(caqwj,
                       label: block_caqwj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqwj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caqwt; else goto caqws;
       caqwt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       caqws: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saqlC_entry() //  [R1]
         { info_tbl: [(caqwL,
                       label: sat_saqlC_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqwL: // global
           _saqlC::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto caqwM; else goto caqwN;
       caqwN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caqwP; else goto caqwO;
       caqwP: // global
           HpAlloc = 24;
           goto caqwM;
       caqwM: // global
           R1 = _saqlC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqwO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saqlC::P64;
           _saqlh::P64 = P64[_saqlC::P64 + 16];
           _saqll::I64 = I64[_saqlC::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _saqlh::P64;
           I64[Sp - 24] = block_caqwI_info;
           R4 = Hp - 14;
           R3 = _saqll::I64;
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _caqwI() //  [R1, R2]
         { info_tbl: [(caqwI,
                       label: block_caqwI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqwI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caqwS; else goto caqwR;
       caqwS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caqwR: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saqlH_entry() //  [R1]
         { info_tbl: [(caqwX,
                       label: sat_saqlH_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqwX: // global
           _saqlH::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caqwY; else goto caqwZ;
       caqwZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caqx1; else goto caqx0;
       caqx1: // global
           HpAlloc = 56;
           goto caqwY;
       caqwY: // global
           R1 = _saqlH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqx0: // global
           _saqlh::P64 = P64[_saqlH::P64 + 16];
           _saqlj::I64 = I64[_saqlH::P64 + 24];
           _saqll::I64 = I64[_saqlH::P64 + 32];
           I64[Hp - 48] = sat_saqlC_info;
           P64[Hp - 32] = _saqlh::P64;
           I64[Hp - 24] = _saqll::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 48;
           I64[Sp - 8] = block_caqwU_info;
           R3 = Hp - 14;
           R2 = _saqlj::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqwU() //  [R1, R2]
         { info_tbl: [(caqwU,
                       label: block_caqwU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqwU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caqx4; else goto caqx3;
       caqx4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       caqx3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saqlI_entry() //  [R1]
         { info_tbl: [(caqx5,
                       label: sat_saqlI_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqx5: // global
           _saqlI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caqx6; else goto caqx7;
       caqx7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caqx9; else goto caqx8;
       caqx9: // global
           HpAlloc = 40;
           goto caqx6;
       caqx6: // global
           R1 = _saqlI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqx8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saqlI::P64;
           _saqlh::P64 = P64[_saqlI::P64 + 16];
           _saqlj::I64 = I64[_saqlI::P64 + 24];
           _saqll::I64 = I64[_saqlI::P64 + 32];
           I64[Hp - 32] = sat_saqlH_info;
           P64[Hp - 16] = _saqlh::P64;
           I64[Hp - 8] = _saqlj::I64;
           I64[Hp] = _saqll::I64;
           R3 = Hp - 32;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.Control.$fShowControlMessage_$cshowsPrec_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(caqxf,
                       label: GHC.Event.Control.$fShowControlMessage_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqxf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caqxg; else goto caqxh;
       caqxg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caqxh: // global
           I64[Sp - 24] = block_caqvM_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaqxw; else goto caqvN;
       uaqxw: // global
           call _caqvM(R1) args: 0, res: 0, upd: 0;
       caqvN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqvM() //  [R1]
         { info_tbl: [(caqvM,
                       label: block_caqvM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqvM: // global
           _caqxe::P64 = R1 & 7;
           if (_caqxe::P64 < 3) goto uaqxu; else goto caqxd;
       uaqxu: // global
           _saqlh::P64 = P64[Sp + 16];
           if (_caqxe::P64 < 2) goto caqxb; else goto caqxc;
       caqxb: // global
           R3 = _saqlh::P64;
           R2 = GHC.Event.Control.$fShowControlMessage7_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       caqxc: // global
           R3 = _saqlh::P64;
           R2 = GHC.Event.Control.$fShowControlMessage5_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       caqxd: // global
           I64[Sp - 8] = block_caqvT_info;
           _saqlj::I64 = I64[R1 + 13];
           _saqll::I64 = I64[R1 + 21];
           R1 = P64[Sp + 8];
           I64[Sp] = _saqll::I64;
           I64[Sp + 8] = _saqlj::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqxv; else goto caqvU;
       uaqxv: // global
           call _caqvT(R1) args: 0, res: 0, upd: 0;
       caqvU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqvT() //  [R1]
         { info_tbl: [(caqvT,
                       label: block_caqvT_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqvT: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caqxp; else goto caqxo;
       caqxp: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqxo: // global
           _saqlh::P64 = P64[Sp + 24];
           _saqlj::I64 = I64[Sp + 16];
           _saqll::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto caqxr; else goto caqxt;
       caqxr: // global
           I64[Hp - 56] = sat_saqlx_info;
           P64[Hp - 40] = _saqlh::P64;
           I64[Hp - 32] = _saqlj::I64;
           I64[Hp - 24] = _saqll::I64;
           _caqw1::P64 = Hp - 56;
           Hp = Hp - 24;
           R3 = _caqw1::P64;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       caqxt: // global
           I64[Hp - 56] = sat_saqlI_info;
           P64[Hp - 40] = _saqlh::P64;
           I64[Hp - 32] = _saqlj::I64;
           I64[Hp - 24] = _saqll::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.460652912 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshow_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshow_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshow_info;
         const 0;
 },
 sat_saqlR_entry() //  [R1]
         { info_tbl: [(caqzc,
                       label: sat_saqlR_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqzc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caqzd; else goto caqze;
       caqzd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqze: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caqz9_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 11;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _caqz9() //  [R1, R2]
         { info_tbl: [(caqz9,
                       label: block_caqz9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqz9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caqzh; else goto caqzg;
       caqzh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caqzg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saqlW_entry() //  [R1]
         { info_tbl: [(caqzm,
                       label: sat_saqlW_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqzm: // global
           _saqlW::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caqzn; else goto caqzo;
       caqzo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caqzq; else goto caqzp;
       caqzq: // global
           HpAlloc = 48;
           goto caqzn;
       caqzn: // global
           R1 = _saqlW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqzp: // global
           _saqlL::I64 = I64[_saqlW::P64 + 16];
           _saqlN::I64 = I64[_saqlW::P64 + 24];
           I64[Hp - 40] = sat_saqlR_info;
           I64[Hp - 24] = _saqlN::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showSpace1_closure;
           P64[Hp] = Hp - 40;
           I64[Sp - 8] = block_caqzj_info;
           R3 = Hp - 14;
           R2 = _saqlL::I64;
           Sp = Sp - 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqzj() //  [R1, R2]
         { info_tbl: [(caqzj,
                       label: block_caqzj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqzj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caqzt; else goto caqzs;
       caqzt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       caqzs: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.$fShowControlMessage_$cshow_entry() //  [R2]
         { info_tbl: [(caqzz,
                       label: GHC.Event.Control.$fShowControlMessage_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqzz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caqzA; else goto caqzB;
       caqzA: // global
           R2 = R2;
           R1 = GHC.Event.Control.$fShowControlMessage_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caqzB: // global
           I64[Sp - 8] = block_caqyU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqzK; else goto caqyV;
       uaqzK: // global
           call _caqyU(R1) args: 0, res: 0, upd: 0;
       caqyV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqyU() //  [R1]
         { info_tbl: [(caqyU,
                       label: block_caqyU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqyU: // global
           _caqzy::P64 = R1 & 7;
           if (_caqzy::P64 < 3) goto uaqzJ; else goto caqzx;
       uaqzJ: // global
           if (_caqzy::P64 < 2) goto caqzv; else goto caqzw;
       caqzv: // global
           R1 = GHC.Event.Control.$fShowControlMessage7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       caqzw: // global
           R1 = GHC.Event.Control.$fShowControlMessage5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       caqzx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caqzI; else goto caqzH;
       caqzI: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqzH: // global
           _saqlL::I64 = I64[R1 + 13];
           _saqlN::I64 = I64[R1 + 21];
           I64[Hp - 24] = sat_saqlW_info;
           I64[Hp - 8] = _saqlL::I64;
           I64[Hp] = _saqlN::I64;
           R3 = Hp - 24;
           R2 = GHC.Event.Control.$fShowControlMessage3_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.475641 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage2_closure" {
     GHC.Event.Control.$fShowControlMessage2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.477454026 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage1_closure" {
     GHC.Event.Control.$fShowControlMessage1_closure:
         const GHC.Event.Control.$fShowControlMessage1_info;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage1_entry() //  [R2, R3]
         { info_tbl: [(caqAu,
                       label: GHC.Event.Control.$fShowControlMessage1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqAu: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Control.$fShowControlMessage2_closure+1;
           call GHC.Event.Control.$fShowControlMessage_$cshowsPrec_entry(R4,
                                                                         R3,
                                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.480821624 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_$cshowList_closure" {
     GHC.Event.Control.$fShowControlMessage_$cshowList_closure:
         const GHC.Event.Control.$fShowControlMessage_$cshowList_info;
         const 0;
 },
 GHC.Event.Control.$fShowControlMessage_$cshowList_entry() //  [R2,
                                                                R3]
         { info_tbl: [(caqAF,
                       label: GHC.Event.Control.$fShowControlMessage_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqAF: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Control.$fShowControlMessage1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.484085399 UTC

[section ""data" . GHC.Event.Control.$fShowControlMessage_closure" {
     GHC.Event.Control.$fShowControlMessage_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure+3;
         const GHC.Event.Control.$fShowControlMessage_$cshow_closure+1;
         const GHC.Event.Control.$fShowControlMessage_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.486272372 UTC

[section ""data" . GHC.Event.Control.controlIsDead_closure" {
     GHC.Event.Control.controlIsDead_closure:
         const GHC.Event.Control.controlIsDead_info;
 },
 GHC.Event.Control.controlIsDead_entry() //  [R2]
         { info_tbl: [(caqAU,
                       label: GHC.Event.Control.controlIsDead_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqAU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caqAY; else goto caqAZ;
       caqAY: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlIsDead_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caqAZ: // global
           I64[Sp - 8] = block_caqAR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqB3; else goto caqAS;
       uaqB3: // global
           call _caqAR(R1) args: 0, res: 0, upd: 0;
       caqAS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqAR() //  [R1]
         { info_tbl: [(caqAR,
                       label: block_caqAR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqAR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caqB2; else goto caqB1;
       caqB2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqB1: // global
           _saqm5::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _saqm5::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.491829076 UTC

[section ""data" . GHC.Event.Control.didRegisterWakeupFd_closure" {
     GHC.Event.Control.didRegisterWakeupFd_closure:
         const GHC.Event.Control.didRegisterWakeupFd_info;
 },
 GHC.Event.Control.didRegisterWakeupFd_entry() //  [R2]
         { info_tbl: [(caqBn,
                       label: GHC.Event.Control.didRegisterWakeupFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqBn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caqBo; else goto caqBp;
       caqBo: // global
           R2 = R2;
           R1 = GHC.Event.Control.didRegisterWakeupFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caqBp: // global
           I64[Sp - 8] = block_caqBk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqBt; else goto caqBl;
       uaqBt: // global
           call _caqBk(R1) args: 0, res: 0, upd: 0;
       caqBl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqBk() //  [R1]
         { info_tbl: [(caqBk,
                       label: block_caqBk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqBk: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.497081203 UTC

[section ""data" . GHC.Event.Control.controlEventFd_closure" {
     GHC.Event.Control.controlEventFd_closure:
         const GHC.Event.Control.controlEventFd_info;
 },
 GHC.Event.Control.controlEventFd_entry() //  [R2]
         { info_tbl: [(caqBN,
                       label: GHC.Event.Control.controlEventFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqBN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caqBR; else goto caqBS;
       caqBR: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlEventFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caqBS: // global
           I64[Sp - 8] = block_caqBK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqBW; else goto caqBL;
       uaqBW: // global
           call _caqBK(R1) args: 0, res: 0, upd: 0;
       caqBL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqBK() //  [R1]
         { info_tbl: [(caqBK,
                       label: block_caqBK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqBK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caqBV; else goto caqBU;
       caqBV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqBU: // global
           _saqmh::I64 = I64[R1 + 39];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saqmh::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.503604678 UTC

[section ""data" . GHC.Event.Control.controlWriteFd_closure" {
     GHC.Event.Control.controlWriteFd_closure:
         const GHC.Event.Control.controlWriteFd_info;
 },
 GHC.Event.Control.controlWriteFd_entry() //  [R2]
         { info_tbl: [(caqCg,
                       label: GHC.Event.Control.controlWriteFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqCg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caqCk; else goto caqCl;
       caqCk: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlWriteFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caqCl: // global
           I64[Sp - 8] = block_caqCd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqCp; else goto caqCe;
       uaqCp: // global
           call _caqCd(R1) args: 0, res: 0, upd: 0;
       caqCe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqCd() //  [R1]
         { info_tbl: [(caqCd,
                       label: block_caqCd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqCd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caqCo; else goto caqCn;
       caqCo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqCn: // global
           _saqmn::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saqmn::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.509747478 UTC

[section ""data" . GHC.Event.Control.controlReadFd_closure" {
     GHC.Event.Control.controlReadFd_closure:
         const GHC.Event.Control.controlReadFd_info;
 },
 GHC.Event.Control.controlReadFd_entry() //  [R2]
         { info_tbl: [(caqCJ,
                       label: GHC.Event.Control.controlReadFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqCJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caqCN; else goto caqCO;
       caqCN: // global
           R2 = R2;
           R1 = GHC.Event.Control.controlReadFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caqCO: // global
           I64[Sp - 8] = block_caqCG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqCS; else goto caqCH;
       uaqCS: // global
           call _caqCG(R1) args: 0, res: 0, upd: 0;
       caqCH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqCG() //  [R1]
         { info_tbl: [(caqCG,
                       label: block_caqCG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqCG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caqCR; else goto caqCQ;
       caqCR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqCQ: // global
           _saqmt::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saqmt::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.515103959 UTC

[section ""data" . GHC.Event.Control.wakeupReadFd_closure" {
     GHC.Event.Control.wakeupReadFd_closure:
         const GHC.Event.Control.wakeupReadFd_info;
 },
 GHC.Event.Control.wakeupReadFd_entry() //  [R2]
         { info_tbl: [(caqD9,
                       label: GHC.Event.Control.wakeupReadFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqD9: // global
           R2 = R2;
           call GHC.Event.Control.controlEventFd_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.518247333 UTC

[section ""cstring" . GHC.Event.Control.$trModule4_bytes" {
     GHC.Event.Control.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.519974117 UTC

[section ""data" . GHC.Event.Control.$trModule3_closure" {
     GHC.Event.Control.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.521677566 UTC

[section ""cstring" . GHC.Event.Control.$trModule2_bytes" {
     GHC.Event.Control.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.523283212 UTC

[section ""data" . GHC.Event.Control.$trModule1_closure" {
     GHC.Event.Control.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.524986019 UTC

[section ""data" . GHC.Event.Control.$trModule_closure" {
     GHC.Event.Control.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Control.$trModule3_closure+1;
         const GHC.Event.Control.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.526754691 UTC

[section ""data" . $krep_raoWE_closure" {
     $krep_raoWE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.528446199 UTC

[section ""data" . $krep1_raoWF_closure" {
     $krep1_raoWF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.530199065 UTC

[section ""data" . $krep2_raoWG_closure" {
     $krep2_raoWG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.532460261 UTC

[section ""data" . $krep3_raoWH_closure" {
     $krep3_raoWH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.53448348 UTC

[section ""data" . $krep4_raoWI_closure" {
     $krep4_raoWI_closure:
         const :_con_info;
         const $krep1_raoWF_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.53613079 UTC

[section ""data" . $krep5_raoWJ_closure" {
     $krep5_raoWJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep4_raoWI_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.537803234 UTC

[section ""data" . $krep6_raoWK_closure" {
     $krep6_raoWK_closure:
         const :_con_info;
         const $krep2_raoWG_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.539441355 UTC

[section ""data" . $krep7_raoWL_closure" {
     $krep7_raoWL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep6_raoWK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.541168821 UTC

[section ""cstring" . GHC.Event.Control.$tcControlMessage2_bytes" {
     GHC.Event.Control.$tcControlMessage2_bytes:
         I8[] [67,111,110,116,114,111,108,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.543609011 UTC

[section ""data" . GHC.Event.Control.$tcControlMessage1_closure" {
     GHC.Event.Control.$tcControlMessage1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tcControlMessage2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.54529158 UTC

[section ""data" . GHC.Event.Control.$tcControlMessage_closure" {
     GHC.Event.Control.$tcControlMessage_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tcControlMessage1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13490094119359668037;
         const 2953272121777407512;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.547107194 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie1_closure" {
     GHC.Event.Control.$tc'CMsgDie1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControlMessage_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.548895501 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgWakeup2_bytes" {
     GHC.Event.Control.$tc'CMsgWakeup2_bytes:
         I8[] [39,67,77,115,103,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.550907693 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgWakeup1_closure" {
     GHC.Event.Control.$tc'CMsgWakeup1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgWakeup2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.552582175 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgWakeup_closure" {
     GHC.Event.Control.$tc'CMsgWakeup_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgWakeup1_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 7148775915826095055;
         const 6381666496233651559;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.554421558 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgDie3_bytes" {
     GHC.Event.Control.$tc'CMsgDie3_bytes:
         I8[] [39,67,77,115,103,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.556093024 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie2_closure" {
     GHC.Event.Control.$tc'CMsgDie2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgDie3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.558184346 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgDie_closure" {
     GHC.Event.Control.$tc'CMsgDie_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgDie2_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 2337574862383861426;
         const 4640161931169225929;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.559992777 UTC

[section ""data" . $krep8_raoWM_closure" {
     $krep8_raoWM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_raoWE_closure+1;
         const GHC.Event.Control.$tc'CMsgDie1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.561917097 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal1_closure" {
     GHC.Event.Control.$tc'CMsgSignal1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_raoWJ_closure+1;
         const $krep8_raoWM_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.563578625 UTC

[section ""cstring" . GHC.Event.Control.$tc'CMsgSignal3_bytes" {
     GHC.Event.Control.$tc'CMsgSignal3_bytes:
         I8[] [39,67,77,115,103,83,105,103,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.565237267 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal2_closure" {
     GHC.Event.Control.$tc'CMsgSignal2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'CMsgSignal3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.566852883 UTC

[section ""data" . GHC.Event.Control.$tc'CMsgSignal_closure" {
     GHC.Event.Control.$tc'CMsgSignal_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'CMsgSignal2_closure+1;
         const GHC.Event.Control.$tc'CMsgSignal1_closure+4;
         const 14616621783190690564;
         const 9307773026781339016;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.568641411 UTC

[section ""cstring" . GHC.Event.Control.$tcControl2_bytes" {
     GHC.Event.Control.$tcControl2_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.570303937 UTC

[section ""data" . GHC.Event.Control.$tcControl1_closure" {
     GHC.Event.Control.$tcControl1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tcControl2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.57195092 UTC

[section ""data" . GHC.Event.Control.$tcControl_closure" {
     GHC.Event.Control.$tcControl_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tcControl1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10901861211350082240;
         const 15092011187582559326;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.573746445 UTC

[section ""data" . $krep9_raoWN_closure" {
     $krep9_raoWN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControl_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.575471958 UTC

[section ""data" . $krep10_raoWO_closure" {
     $krep10_raoWO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_raoWL_closure+1;
         const $krep9_raoWN_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.577208675 UTC

[section ""data" . $krep11_raoWP_closure" {
     $krep11_raoWP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_raoWG_closure+1;
         const $krep10_raoWO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.579385135 UTC

[section ""data" . $krep12_raoWQ_closure" {
     $krep12_raoWQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep11_raoWP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.581100825 UTC

[section ""data" . $krep13_raoWR_closure" {
     $krep13_raoWR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep12_raoWQ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.583387023 UTC

[section ""data" . GHC.Event.Control.$tc'W1_closure" {
     GHC.Event.Control.$tc'W1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raoWH_closure+1;
         const $krep13_raoWR_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.585101899 UTC

[section ""cstring" . GHC.Event.Control.$tc'W3_bytes" {
     GHC.Event.Control.$tc'W3_bytes:
         I8[] [39,87]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.5874457 UTC

[section ""data" . GHC.Event.Control.$tc'W2_closure" {
     GHC.Event.Control.$tc'W2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Control.$tc'W3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.589079105 UTC

[section ""data" . GHC.Event.Control.$tc'W_closure" {
     GHC.Event.Control.$tc'W_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Control.$trModule_closure+1;
         const GHC.Event.Control.$tc'W2_closure+1;
         const GHC.Event.Control.$tc'W1_closure+4;
         const 17903566110422877322;
         const 1788372901503945479;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.591925062 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_$c==_closure" {
     GHC.Event.Control.$fEqControlMessage_$c==_closure:
         const GHC.Event.Control.$fEqControlMessage_$c==_info;
 },
 GHC.Event.Control.$fEqControlMessage_$c==_entry() //  [R2, R3]
         { info_tbl: [(caqE6,
                       label: GHC.Event.Control.$fEqControlMessage_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqE6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caqE7; else goto caqE8;
       caqE7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fEqControlMessage_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caqE8: // global
           I64[Sp - 16] = block_caqDY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaqFd; else goto caqDZ;
       uaqFd: // global
           call _caqDY(R1) args: 0, res: 0, upd: 0;
       caqDZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqDY() //  [R1]
         { info_tbl: [(caqDY,
                       label: block_caqDY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqDY: // global
           _saqmz::P64 = P64[Sp + 8];
           _caqE5::P64 = R1 & 7;
           if (_caqE5::P64 < 3) goto uaqF3; else goto caqE4;
       uaqF3: // global
           if (_caqE5::P64 < 2) goto caqE2; else goto caqE3;
       caqE2: // global
           I64[Sp + 8] = block_caqEb_info;
           R1 = _saqmz::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaqFa; else goto caqEd;
       uaqFa: // global
           call _caqEb(R1) args: 0, res: 0, upd: 0;
       caqEd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caqE3: // global
           I64[Sp + 8] = block_caqEq_info;
           R1 = _saqmz::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaqFb; else goto caqEs;
       uaqFb: // global
           call _caqEq(R1) args: 0, res: 0, upd: 0;
       caqEs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caqE4: // global
           I64[Sp - 8] = block_caqEF_info;
           _saqmD::I64 = I64[R1 + 13];
           _saqmF::I64 = I64[R1 + 21];
           R1 = _saqmz::P64;
           I64[Sp] = _saqmF::I64;
           I64[Sp + 8] = _saqmD::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqFc; else goto caqEH;
       uaqFc: // global
           call _caqEF(R1) args: 0, res: 0, upd: 0;
       caqEH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqEb() //  [R1]
         { info_tbl: [(caqEb,
                       label: block_caqEb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqEb: // global
           if (R1 & 7 == 1) goto uaqF4; else goto uaqF5;
       uaqF4: // global
           Sp = Sp + 8;
           call _caqEC() args: 0, res: 0, upd: 0;
       uaqF5: // global
           Sp = Sp + 8;
           call _caqEU() args: 0, res: 0, upd: 0;
     }
 },
 _caqEq() //  [R1]
         { info_tbl: [(caqEq,
                       label: block_caqEq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqEq: // global
           if (R1 & 7 == 2) goto uaqF6; else goto uaqF7;
       uaqF6: // global
           Sp = Sp + 8;
           call _caqEC() args: 0, res: 0, upd: 0;
       uaqF7: // global
           Sp = Sp + 8;
           call _caqEU() args: 0, res: 0, upd: 0;
     }
 },
 _caqEC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqEC: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caqEF() //  [R1]
         { info_tbl: [(caqEF,
                       label: block_caqEF_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqEF: // global
           if (R1 & 7 == 3) goto caqEW; else goto uaqF8;
       caqEW: // global
           if (I64[Sp + 16] == I64[R1 + 13]) goto caqEV; else goto uaqF9;
       caqEV: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 21]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uaqF9: // global
           Sp = Sp + 24;
           goto uaqFj;
       uaqF8: // global
           Sp = Sp + 24;
           goto uaqFj;
       uaqFj: // global
           call _caqEU() args: 0, res: 0, upd: 0;
     }
 },
 _caqEU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqEU: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.606159857 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_$c/=_closure" {
     GHC.Event.Control.$fEqControlMessage_$c/=_closure:
         const GHC.Event.Control.$fEqControlMessage_$c/=_info;
 },
 GHC.Event.Control.$fEqControlMessage_$c/=_entry() //  [R2, R3]
         { info_tbl: [(caqGg,
                       label: GHC.Event.Control.$fEqControlMessage_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqGg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caqGh; else goto caqGi;
       caqGh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$fEqControlMessage_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caqGi: // global
           I64[Sp - 16] = block_caqG8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaqHt; else goto caqG9;
       uaqHt: // global
           call _caqG8(R1) args: 0, res: 0, upd: 0;
       caqG9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqG8() //  [R1]
         { info_tbl: [(caqG8,
                       label: block_caqG8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqG8: // global
           _saqmN::P64 = P64[Sp + 8];
           _caqGf::P64 = R1 & 7;
           if (_caqGf::P64 < 3) goto uaqHh; else goto caqGe;
       uaqHh: // global
           if (_caqGf::P64 < 2) goto caqGc; else goto caqGd;
       caqGc: // global
           I64[Sp + 8] = block_caqGl_info;
           R1 = _saqmN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaqHq; else goto caqGn;
       uaqHq: // global
           call _caqGl(R1) args: 0, res: 0, upd: 0;
       caqGn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caqGd: // global
           I64[Sp + 8] = block_caqGA_info;
           R1 = _saqmN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaqHr; else goto caqGC;
       uaqHr: // global
           call _caqGA(R1) args: 0, res: 0, upd: 0;
       caqGC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caqGe: // global
           I64[Sp - 8] = block_caqGP_info;
           _saqmR::I64 = I64[R1 + 13];
           _saqmT::I64 = I64[R1 + 21];
           R1 = _saqmN::P64;
           I64[Sp] = _saqmT::I64;
           I64[Sp + 8] = _saqmR::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqHs; else goto caqGR;
       uaqHs: // global
           call _caqGP(R1) args: 0, res: 0, upd: 0;
       caqGR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqGl() //  [R1]
         { info_tbl: [(caqGl,
                       label: block_caqGl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqGl: // global
           if (R1 & 7 == 1) goto uaqHi; else goto uaqHj;
       uaqHi: // global
           Sp = Sp + 8;
           call _caqHb() args: 0, res: 0, upd: 0;
       uaqHj: // global
           Sp = Sp + 8;
           call _caqHa() args: 0, res: 0, upd: 0;
     }
 },
 _caqGA() //  [R1]
         { info_tbl: [(caqGA,
                       label: block_caqGA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqGA: // global
           if (R1 & 7 == 2) goto uaqHk; else goto uaqHl;
       uaqHk: // global
           Sp = Sp + 8;
           call _caqHb() args: 0, res: 0, upd: 0;
       uaqHl: // global
           Sp = Sp + 8;
           call _caqHa() args: 0, res: 0, upd: 0;
     }
 },
 _caqGP() //  [R1]
         { info_tbl: [(caqGP,
                       label: block_caqGP_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqGP: // global
           if (R1 & 7 == 3) goto caqHd; else goto uaqHm;
       caqHd: // global
           if (I64[Sp + 16] == I64[R1 + 13]) goto caqHc; else goto uaqHn;
       caqHc: // global
           if (I64[Sp + 8] == I64[R1 + 21]) goto uaqHo; else goto uaqHp;
       uaqHo: // global
           Sp = Sp + 24;
           call _caqHb() args: 0, res: 0, upd: 0;
       uaqHp: // global
           Sp = Sp + 24;
           goto uaqHB;
       uaqHn: // global
           Sp = Sp + 24;
           goto uaqHB;
       uaqHm: // global
           Sp = Sp + 24;
           goto uaqHB;
       uaqHB: // global
           call _caqHa() args: 0, res: 0, upd: 0;
     }
 },
 _caqHb() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqHb: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caqHa() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqHa: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.61990612 UTC

[section ""data" . GHC.Event.Control.$fEqControlMessage_closure" {
     GHC.Event.Control.$fEqControlMessage_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Event.Control.$fEqControlMessage_$c==_closure+2;
         const GHC.Event.Control.$fEqControlMessage_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.622010209 UTC

[section ""cstring" . GHC.Event.Control.sendWakeup3_bytes" {
     GHC.Event.Control.sendWakeup3_bytes:
         I8[] [115,101,110,100,87,97,107,101,117,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.623984376 UTC

[section ""data" . GHC.Event.Control.sendWakeup2_closure" {
     GHC.Event.Control.sendWakeup2_closure:
         const GHC.Event.Control.sendWakeup2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.sendWakeup2_entry() //  [R1]
         { info_tbl: [(caqIq,
                       label: GHC.Event.Control.sendWakeup2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqIq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqIr; else goto caqIs;
       caqIr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqIs: // global
           (_caqIn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqIn::I64 == 0) goto caqIp; else goto caqIo;
       caqIp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqIo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqIn::I64;
           R2 = GHC.Event.Control.sendWakeup3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.628437421 UTC

[section ""data" . GHC.Event.Control.$wsendWakeup_closure" {
     GHC.Event.Control.$wsendWakeup_closure:
         const GHC.Event.Control.$wsendWakeup_info;
         const 0;
 },
 GHC.Event.Control.$wsendWakeup_entry() //  [R2, R3]
         { info_tbl: [(caqIH,
                       label: GHC.Event.Control.$wsendWakeup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqIH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqII; else goto caqIJ;
       caqII: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wsendWakeup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caqIJ: // global
           _saqn1::P64 = R3;
           (_saqn7::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2)), 1);
           if (%MO_SS_Conv_W64_W32(_saqn7::I64) == 0 :: W32) goto uaqJx; else goto caqIX;
       uaqJx: // global
           call _caqJr() args: 0, res: 0, upd: 0;
       caqIX: // global
           (_saqnc::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp - 16] = block_caqIV_info;
           R1 = P64[_saqn1::P64 + 8];
           I64[Sp - 8] = _saqnc::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaqJy; else goto caqIZ;
       uaqJy: // global
           call _caqIV(R1) args: 0, res: 0, upd: 0;
       caqIZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqIV() //  [R1]
         { info_tbl: [(caqIV,
                       label: block_caqIV_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqIV: // global
           if (R1 & 7 == 1) goto caqJe; else goto caqJo;
       caqJo: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) != 9 :: W32) goto caqJe; else goto uaqJw;
       caqJe: // global
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 16;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 0, upd: 8;
       uaqJw: // global
           Sp = Sp + 16;
           call _caqJr() args: 0, res: 0, upd: 0;
     }
 },
 _caqJr() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqJr: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.635952879 UTC

[section ""data" . GHC.Event.Control.sendWakeup1_closure" {
     GHC.Event.Control.sendWakeup1_closure:
         const GHC.Event.Control.sendWakeup1_info;
         const 0;
 },
 GHC.Event.Control.sendWakeup1_entry() //  [R2]
         { info_tbl: [(caqJY,
                       label: GHC.Event.Control.sendWakeup1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqJY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caqJZ; else goto caqK0;
       caqJZ: // global
           R2 = R2;
           R1 = GHC.Event.Control.sendWakeup1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caqK0: // global
           I64[Sp - 8] = block_caqJV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqK4; else goto caqJW;
       uaqK4: // global
           call _caqJV(R1) args: 0, res: 0, upd: 0;
       caqJW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqJV() //  [R1]
         { info_tbl: [(caqJV,
                       label: block_caqJV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqJV: // global
           R3 = P64[R1 + 15];
           R2 = I64[R1 + 39];
           Sp = Sp + 8;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.641170402 UTC

[section ""data" . GHC.Event.Control.sendWakeup_closure" {
     GHC.Event.Control.sendWakeup_closure:
         const GHC.Event.Control.sendWakeup_info;
         const 0;
 },
 GHC.Event.Control.sendWakeup_entry() //  [R2]
         { info_tbl: [(caqKj,
                       label: GHC.Event.Control.sendWakeup_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqKj: // global
           R2 = R2;
           call GHC.Event.Control.sendWakeup1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.644348683 UTC

[section ""cstring" . lvl_raoWS_bytes" {
     lvl_raoWS_bytes:
         I8[] [115,101,110,100,68,105,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.646528702 UTC

[section ""data" . lvl1_raoWT_closure" {
     lvl1_raoWT_closure:
         const lvl1_raoWT_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_raoWT_entry() //  [R1]
         { info_tbl: [(caqKx,
                       label: lvl1_raoWT_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqKx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqKy; else goto caqKz;
       caqKy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqKz: // global
           (_caqKu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqKu::I64 == 0) goto caqKw; else goto caqKv;
       caqKw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqKv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqKu::I64;
           R2 = lvl_raoWS_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.650438354 UTC

[section ""data" . GHC.Event.Control.sendDie2_closure" {
     GHC.Event.Control.sendDie2_closure:
         const GHC.Event.Control.sendDie2_info;
         const 0;
 },
 GHC.Event.Control.sendDie2_entry() //  [R2]
         { info_tbl: [(caqKO,
                       label: GHC.Event.Control.sendDie2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqKO: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_raoWT_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.654525063 UTC

[section ""data" . GHC.Event.Control.$wsendDie_closure" {
     GHC.Event.Control.$wsendDie_closure:
         const GHC.Event.Control.$wsendDie_info;
         const 0;
 },
 GHC.Event.Control.$wsendDie_entry() //  [R2, R3]
         { info_tbl: [(caqL3,
                       label: GHC.Event.Control.$wsendDie_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqL3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqL4; else goto caqL5;
       caqL4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wsendDie_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caqL5: // global
           I64[Sp - 16] = block_caqKZ_info;
           _saqnt::I64 = R2;
           R2 = 1;
           R1 = 1;
           I64[Sp - 8] = _saqnt::I64;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqKZ() //  [R1]
         { info_tbl: [(caqKZ,
                       label: block_caqKZ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqKZ: // global
           _saqnt::I64 = I64[Sp + 8];
           _saqnC::I64 = R1 + 16;
           I8[_saqnC::I64] = 254 :: W8;
           (_saqnI::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC20ZCbaseZCSystemziPosixziInternalsZCwrite(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqnt::I64)), _saqnC::I64, 1);
           call MO_Touch(R1);
           if (_saqnI::I64 == (-1)) goto caqLj; else goto caqLi;
       caqLj: // global
           (_saqnO::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _saqnO::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.sendDie2_entry(R2) args: 8, res: 0, upd: 8;
       caqLi: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.660823177 UTC

[section ""data" . GHC.Event.Control.sendDie1_closure" {
     GHC.Event.Control.sendDie1_closure:
         const GHC.Event.Control.sendDie1_info;
         const 0;
 },
 GHC.Event.Control.sendDie1_entry() //  [R2]
         { info_tbl: [(caqLG,
                       label: GHC.Event.Control.sendDie1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqLG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caqLH; else goto caqLI;
       caqLH: // global
           R2 = R2;
           R1 = GHC.Event.Control.sendDie1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caqLI: // global
           I64[Sp - 8] = block_caqLD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqLM; else goto caqLE;
       uaqLM: // global
           call _caqLD(R1) args: 0, res: 0, upd: 0;
       caqLE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqLD() //  [R1]
         { info_tbl: [(caqLD,
                       label: block_caqLD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqLD: // global
           R3 = P64[R1 + 15];
           R2 = I64[R1 + 31];
           Sp = Sp + 8;
           call GHC.Event.Control.$wsendDie_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.666009578 UTC

[section ""data" . GHC.Event.Control.sendDie_closure" {
     GHC.Event.Control.sendDie_closure:
         const GHC.Event.Control.sendDie_info;
         const 0;
 },
 GHC.Event.Control.sendDie_entry() //  [R2]
         { info_tbl: [(caqM1,
                       label: GHC.Event.Control.sendDie_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqM1: // global
           R2 = R2;
           call GHC.Event.Control.sendDie1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.66898827 UTC

[section ""data" . GHC.Event.Control.closeControl3_closure" {
     GHC.Event.Control.closeControl3_closure:
         const (,)_con_info;
         const GHC.Types.True_closure+2;
         const GHC.Tuple.()_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.671065874 UTC

[section ""data" . GHC.Event.Control.closeControl2_closure" {
     GHC.Event.Control.closeControl2_closure:
         const GHC.Event.Control.closeControl2_info;
 },
 GHC.Event.Control.closeControl2_entry() //  []
         { info_tbl: [(caqMd,
                       label: GHC.Event.Control.closeControl2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqMd: // global
           R1 = GHC.Event.Control.closeControl3_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.674747105 UTC

[section ""data" . GHC.Event.Control.closeControl1_closure" {
     GHC.Event.Control.closeControl1_closure:
         const GHC.Event.Control.closeControl1_info;
 },
 GHC.Event.Control.closeControl1_entry() //  [R2]
         { info_tbl: [(caqMs,
                       label: GHC.Event.Control.closeControl1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqMs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caqMt; else goto caqMu;
       caqMt: // global
           R2 = R2;
           R1 = GHC.Event.Control.closeControl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caqMu: // global
           I64[Sp - 8] = block_caqMp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaqNa; else goto caqMq;
       uaqNa: // global
           call _caqMp(R1) args: 0, res: 0, upd: 0;
       caqMq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqMp() //  [R1]
         { info_tbl: [(caqMp,
                       label: block_caqMp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqMp: // global
           I64[Sp - 32] = block_caqMx_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           _saqo5::P64 = P64[R1 + 7];
           _saqo2::I64 = I64[R1 + 23];
           _saqo3::I64 = I64[R1 + 31];
           _saqo4::I64 = I64[R1 + 39];
           R1 = P64[R1 + 15];
           I64[Sp - 24] = _saqo3::I64;
           I64[Sp - 16] = _saqo4::I64;
           P64[Sp - 8] = _saqo5::P64;
           I64[Sp] = _saqo2::I64;
           Sp = Sp - 32;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqMx() //  []
         { info_tbl: [(caqMx,
                       label: block_caqMx_info
                       rep:StackRep [True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqMx: // global
           _saqo3::I64 = I64[Sp + 8];
           _saqo5::P64 = P64[Sp + 24];
           (_saqoe::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 32])));
           (_saqoj::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqo3::I64)));
           I64[Sp + 8] = block_caqML_info;
           R1 = _saqo5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaqNb; else goto caqMM;
       uaqNb: // global
           call _caqML(R1) args: 0, res: 0, upd: 0;
       caqMM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqML() //  [R1]
         { info_tbl: [(caqML,
                       label: block_caqML_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqML: // global
           _saqo4::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caqMS; else goto caqMW;
       caqMS: // global
           (_saqop::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqo4::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caqMW: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_saqox::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqo4::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.684821572 UTC

[section ""data" . GHC.Event.Control.closeControl_closure" {
     GHC.Event.Control.closeControl_closure:
         const GHC.Event.Control.closeControl_info;
 },
 GHC.Event.Control.closeControl_entry() //  [R2]
         { info_tbl: [(caqNG,
                       label: GHC.Event.Control.closeControl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqNG: // global
           R2 = R2;
           call GHC.Event.Control.closeControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.688394616 UTC

[section ""cstring" . lvl2_raoWU_bytes" {
     lvl2_raoWU_bytes:
         I8[] [101,118,101,110,116,102,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.690173697 UTC

[section ""data" . lvl3_raoWV_closure" {
     lvl3_raoWV_closure:
         const lvl3_raoWV_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_raoWV_entry() //  [R1]
         { info_tbl: [(caqNU,
                       label: lvl3_raoWV_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqNU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqNV; else goto caqNW;
       caqNV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqNW: // global
           (_caqNR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqNR::I64 == 0) goto caqNT; else goto caqNS;
       caqNT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqNS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqNR::I64;
           R2 = lvl2_raoWU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.694227423 UTC

[section ""cstring" . lvl4_raoWW_bytes" {
     lvl4_raoWW_bytes:
         I8[] [112,105,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.696097635 UTC

[section ""data" . lvl5_raoWX_closure" {
     lvl5_raoWX_closure:
         const lvl5_raoWX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_raoWX_entry() //  [R1]
         { info_tbl: [(caqOc,
                       label: lvl5_raoWX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqOc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqOd; else goto caqOe;
       caqOd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqOe: // global
           (_caqO9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqO9::I64 == 0) goto caqOb; else goto caqOa;
       caqOb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqOa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqO9::I64;
           R2 = lvl4_raoWW_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.699926527 UTC

[section ""data" . lvl6_raoWY_closure" {
     lvl6_raoWY_closure:
         const lvl6_raoWY_info;
         const 0;
 },
 lvl6_raoWY_entry() //  [R2]
         { info_tbl: [(caqOt,
                       label: lvl6_raoWY_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqOt: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl5_raoWX_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.706117943 UTC

[section ""data" . GHC.Event.Control.newControl1_closure" {
     GHC.Event.Control.newControl1_closure:
         const GHC.Event.Control.newControl1_info;
         const 0;
 },
 sat_saqp7_entry() //  [R1]
         { info_tbl: [(caqOZ,
                       label: sat_saqp7_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqOZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caqPb; else goto caqPa;
       caqPb: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caqPa: // global
           (_saqp4::I64) = call "capi" arg hints:  [‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC17ZCbaseZCSystemziPosixziInternalsZCfcntl(I64[R1 + 7], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 15])));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqp4::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saqpX_entry() //  [R1]
         { info_tbl: [(caqQl,
                       label: sat_saqpX_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqQl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caqQx; else goto caqQw;
       caqQx: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caqQw: // global
           (_saqpU::I64) = call "capi" arg hints:  [‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC17ZCbaseZCSystemziPosixziInternalsZCfcntl(I64[R1 + 15], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 7])));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqpU::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.newControl1_entry() //  [R2]
         { info_tbl: [(caqQy,
                       label: GHC.Event.Control.newControl1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqQy: // global
           if ((Sp + -80) < SpLim) (likely: False) goto caqQz; else goto caqQA;
       caqQz: // global
           R2 = R2;
           R1 = GHC.Event.Control.newControl1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caqQA: // global
           I64[Sp - 16] = block_caqOE_info;
           _saqoB::P64 = R2;
           R2 = 4;
           R1 = 8;
           P64[Sp - 8] = _saqoB::P64;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqOE() //  [R1]
         { info_tbl: [(caqOE,
                       label: block_caqOE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqOE: // global
           _saqoJ::I64 = R1 + 16;
           (_saqoN::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] pipe(_saqoJ::I64);
           _saqoO::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqoN::I64));
           if (_saqoO::I64 == (-1)) goto caqTf; else goto uaqTI;
       caqTf: // global
           (_saqri::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _saqri::I64;
           Sp = Sp + 16;
           call lvl6_raoWY_entry(R2) args: 8, res: 0, upd: 8;
       uaqTI: // global
           I64[Sp - 16] = _saqoJ::I64;
           I64[Sp - 8] = _saqoO::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _caqOP() args: 0, res: 0, upd: 0;
     }
 },
 _caqOP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqOP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caqQG; else goto caqQF;
       caqQG: // global
           HpAlloc = 24;
           I64[Sp - 8] = block_caqOO_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caqQF: // global
           _saqoJ::I64 = I64[Sp];
           _saqoR::I64 = %MO_SS_Conv_W32_W64(I32[_saqoJ::I64]);
           _saqoU::I64 = %MO_SS_Conv_W32_W64(I32[_saqoJ::I64 + 4]);
           (_saqoY::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_getfl();
           I64[Hp - 16] = sat_saqp7_info;
           I64[Hp - 8] = _saqoU::I64;
           I64[Hp] = _saqoY::I64;
           I64[Sp - 16] = block_caqPc_info;
           R4 = Hp - 15;
           R3 = System.Posix.Internals.setNonBlockingFD3_closure;
           R2 = System.Posix.Internals.fdFileSize_pred_closure+1;
           I64[Sp - 8] = _saqoY::I64;
           I64[Sp] = _saqoU::I64;
           I64[Sp + 8] = _saqoR::I64;
           Sp = Sp - 16;
           call Foreign.C.Error.throwErrnoIfMinus1Retry2_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqOO() //  [R1]
         { info_tbl: [(caqOO,
                       label: block_caqOO_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqOO: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _caqOP() args: 0, res: 0, upd: 0;
     }
 },
 _caqPc() //  [R1]
         { info_tbl: [(caqPc,
                       label: block_caqPc_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqPc: // global
           I64[Sp] = block_caqPe_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaqTP; else goto caqPf;
       uaqTP: // global
           call _caqPe(R1) args: 0, res: 0, upd: 0;
       caqPf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqPe() //  [R1]
         { info_tbl: [(caqPe,
                       label: block_caqPe_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqPe: // global
           _saqoR::I64 = I64[Sp + 24];
           _saqoU::I64 = I64[Sp + 16];
           _saqpc::I64 = I64[R1 + 7];
           (_saqpg::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_nonblock();
           _saqph::I64 = _saqpc::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqpg::I64));
           if (_saqpc::I64 == _saqph::I64) goto saqpm; else goto caqTc;
       caqTc: // global
           (_saqr9::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfl();
           (_saqre::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_saqoU::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqr9::I64)), _saqph::I64);
           goto saqpm;
       saqpm: // global
           (_saqpr::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfd();
           (_saqpv::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_fd_cloexec();
           (_saqpA::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_saqoR::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqpr::I64)), _saqpv::I64);
           if (%MO_SS_Conv_W64_W32(_saqpA::I64) == (-1) :: W32) goto caqT4; else goto caqQL;
       caqT4: // global
           (_saqr3::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _saqr3::I64;
           Sp = Sp + 48;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       caqQL: // global
           (_saqpG::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_saqoU::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqpr::I64)), _saqpv::I64);
           if (%MO_SS_Conv_W64_W32(_saqpG::I64) == (-1) :: W32) goto caqSY; else goto caqQO;
       caqSY: // global
           (_saqqY::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _saqqY::I64;
           Sp = Sp + 48;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       caqQO: // global
           (_saqpL::I64) = call "ccall" arg hints:  [‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] eventfd(0, 0);
           _saqqP::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqpL::I64));
           if (_saqqP::I64 != (-1)) goto caqSD; else goto caqSO;
       caqSD: // global
           I64[Sp - 24] = _saqpr::I64;
           I64[Sp - 16] = _saqpv::I64;
           I64[Sp - 8] = _saqqP::I64;
           I64[Sp] = _saqpg::I64;
           Sp = Sp - 24;
           call _caqQc() args: 0, res: 0, upd: 0;
       caqSO: // global
           I64[Sp - 24] = block_caqSL_info;
           R2 = lvl3_raoWV_closure;
           I64[Sp - 16] = _saqpr::I64;
           I64[Sp - 8] = _saqpv::I64;
           I64[Sp] = _saqpg::I64;
           Sp = Sp - 24;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqSL() //  [R1]
         { info_tbl: [(caqSL,
                       label: block_caqSL_info
                       rep:StackRep [True, True, True, True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqSL: // global
           I64[Sp] = block_caqSN_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaqTU; else goto caqSR;
       uaqTU: // global
           call _caqSN(R1) args: 0, res: 0, upd: 0;
       caqSR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqSN() //  [R1]
         { info_tbl: [(caqSN,
                       label: block_caqSN_info
                       rep:StackRep [True, True, True, True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqSN: // global
           I64[Sp] = I64[Sp + 8];
           I64[Sp + 8] = I64[Sp + 16];
           I64[Sp + 16] = I64[R1 + 7];
           call _caqQc() args: 0, res: 0, upd: 0;
     }
 },
 _caqQc() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqQc: // global
           Hp = Hp + 24;
           _saqpO::I64 = I64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto caqQV; else goto caqQU;
       caqQV: // global
           HpAlloc = 24;
           I64[Sp - 8] = block_caqQb_info;
           R1 = _saqpO::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caqQU: // global
           I64[Hp - 16] = sat_saqpX_info;
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = _saqpO::I64;
           I64[Sp - 8] = block_caqQQ_info;
           R4 = Hp - 15;
           R3 = System.Posix.Internals.setNonBlockingFD3_closure;
           R2 = System.Posix.Internals.fdFileSize_pred_closure+1;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrnoIfMinus1Retry2_entry(R4,
                                                               R3,
                                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqQb() //  [R1]
         { info_tbl: [(caqQb,
                       label: block_caqQb_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqQb: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _caqQc() args: 0, res: 0, upd: 0;
     }
 },
 _caqQQ() //  [R1]
         { info_tbl: [(caqQQ,
                       label: block_caqQQ_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqQQ: // global
           I64[Sp] = block_caqQS_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaqTS; else goto caqQX;
       uaqTS: // global
           call _caqQS(R1) args: 0, res: 0, upd: 0;
       caqQX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqQS() //  [R1]
         { info_tbl: [(caqQS,
                       label: block_caqQS_info
                       rep:StackRep [True, True, True, True, True, True, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqQS: // global
           _saqoB::P64 = P64[Sp + 72];
           _saqpr::I64 = I64[Sp + 8];
           _saqpv::I64 = I64[Sp + 16];
           _saqpO::I64 = I64[Sp + 24];
           _saqq2::I64 = I64[R1 + 7];
           _saqq3::I64 = _saqq2::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 32]));
           if (_saqq2::I64 == _saqq3::I64) goto saqq8; else goto caqSx;
       caqSx: // global
           (_saqqJ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfl();
           (_saqqO::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_saqpO::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqqJ::I64)), _saqq3::I64);
           goto saqq8;
       saqq8: // global
           (_saqqe::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(_saqpO::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqpr::I64)), _saqpv::I64);
           if (%MO_SS_Conv_W64_W32(_saqqe::I64) == (-1) :: W32) goto caqSp; else goto caqRC;
       caqSp: // global
           (_saqqD::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _saqqD::I64;
           Sp = Sp + 80;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       caqRC: // global
           I64[Sp + 16] = block_caqRA_info;
           R1 = _saqoB::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaqTT; else goto caqRE;
       uaqTT: // global
           call _caqRA(R1) args: 0, res: 0, upd: 0;
       caqRE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqRA() //  [R1]
         { info_tbl: [(caqRA,
                       label: block_caqRA_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqRA: // global
           if (R1 & 7 == 1) goto caqRX; else goto caqSj;
       caqRX: // global
           I64[Sp] = block_caqRI_info;
           R1 = GHC.Types.False_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       caqSj: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd(I64[Sp + 8]);
           I64[Sp] = block_caqS5_info;
           R1 = GHC.Types.False_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqRI() //  [R1]
         { info_tbl: [(caqRI,
                       label: block_caqRI_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqRI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caqS0; else goto caqRZ;
       caqS0: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqRZ: // global
           _saqoR::I64 = I64[Sp + 40];
           _saqoU::I64 = I64[Sp + 32];
           _saqpO::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 48]);
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = GHC.Types.False_closure+1;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqoR::I64));
           I64[Hp - 8] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqoU::I64));
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqpO::I64));
           R1 = Hp - 39;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caqS5() //  [R1]
         { info_tbl: [(caqS5,
                       label: block_caqS5_info
                       rep:StackRep [True, True, True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqS5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caqSm; else goto caqSl;
       caqSm: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caqSl: // global
           _saqoR::I64 = I64[Sp + 40];
           _saqoU::I64 = I64[Sp + 32];
           _saqpO::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 48]);
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = GHC.Types.True_closure+2;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqoR::I64));
           I64[Hp - 8] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqoU::I64));
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saqpO::I64));
           R1 = Hp - 39;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.74362197 UTC

[section ""data" . GHC.Event.Control.newControl_closure" {
     GHC.Event.Control.newControl_closure:
         const GHC.Event.Control.newControl_info;
         const 0;
 },
 GHC.Event.Control.newControl_entry() //  [R2]
         { info_tbl: [(caqVU,
                       label: GHC.Event.Control.newControl_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqVU: // global
           R2 = R2;
           call GHC.Event.Control.newControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.74697535 UTC

[section ""cstring" . lvl7_raoWZ_bytes" {
     lvl7_raoWZ_bytes:
         I8[] [102,97,105,108,101,100,32,116,111,32,114,101,97,100,32,115,105,103,105,110,102,111,95,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.748837786 UTC

[section ""data" . GHC.Event.Control.readControlMessage4_closure" {
     GHC.Event.Control.readControlMessage4_closure:
         const GHC.Event.Control.readControlMessage4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Control.readControlMessage4_entry() //  [R1]
         { info_tbl: [(caqWa,
                       label: GHC.Event.Control.readControlMessage4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqWa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caqWb; else goto caqWc;
       caqWb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqWc: // global
           (_caqW5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqW5::I64 == 0) goto caqW7; else goto caqW6;
       caqW7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqW6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqW5::I64;
           I64[Sp - 24] = block_caqW8_info;
           R2 = lvl7_raoWZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _caqW8() //  [R1]
         { info_tbl: [(caqW8,
                       label: block_caqW8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqW8: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.754274396 UTC

[section ""cstring" . lvl8_raoX0_bytes" {
     lvl8_raoX0_bytes:
         I8[] [114,101,97,100,67,111,110,116,114,111,108,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.756035243 UTC

[section ""data" . lvl9_raoX1_closure" {
     lvl9_raoX1_closure:
         const lvl9_raoX1_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_raoX1_entry() //  [R1]
         { info_tbl: [(caqWz,
                       label: lvl9_raoX1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqWz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqWA; else goto caqWB;
       caqWA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqWB: // global
           (_caqWw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqWw::I64 == 0) goto caqWy; else goto caqWx;
       caqWy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqWx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqWw::I64;
           R2 = lvl8_raoX0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.759926473 UTC

[section ""data" . GHC.Event.Control.readControlMessage3_closure" {
     GHC.Event.Control.readControlMessage3_closure:
         const GHC.Event.Control.readControlMessage3_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage3_entry() //  [R2]
         { info_tbl: [(caqWQ,
                       label: GHC.Event.Control.readControlMessage3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqWQ: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl9_raoX1_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.763799618 UTC

[section ""cstring" . lvl10_raoX2_bytes" {
     lvl10_raoX2_bytes:
         I8[] [114,101,97,100,87,97,107,101,117,112,77,101,115,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.765824375 UTC

[section ""data" . lvl11_raoX3_closure" {
     lvl11_raoX3_closure:
         const lvl11_raoX3_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_raoX3_entry() //  [R1]
         { info_tbl: [(caqX4,
                       label: lvl11_raoX3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqX4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caqX5; else goto caqX6;
       caqX5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caqX6: // global
           (_caqX1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caqX1::I64 == 0) goto caqX3; else goto caqX2;
       caqX3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caqX2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caqX1::I64;
           R2 = lvl10_raoX2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.769599314 UTC

[section ""data" . GHC.Event.Control.readControlMessage2_closure" {
     GHC.Event.Control.readControlMessage2_closure:
         const GHC.Event.Control.readControlMessage2_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage2_entry() //  [R2]
         { info_tbl: [(caqXl,
                       label: GHC.Event.Control.readControlMessage2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqXl: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl11_raoX3_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.774349 UTC

[section ""data" . GHC.Event.Control.$wreadControlMessage_closure" {
     GHC.Event.Control.$wreadControlMessage_closure:
         const GHC.Event.Control.$wreadControlMessage_info;
         const 0;
 },
 GHC.Event.Control.$wreadControlMessage_entry() //  [R2, R3, R4]
         { info_tbl: [(caqXB,
                       label: GHC.Event.Control.$wreadControlMessage_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 18} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqXB: // global
           if ((Sp + -56) < SpLim) (likely: False) goto caqXC; else goto caqXD;
       caqXC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.$wreadControlMessage_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caqXD: // global
           if (R4 == R2) goto caqXA; else goto caqXz;
       caqXA: // global
           I64[Sp - 16] = block_caqYW_info;
           R1 = 8;
           I64[Sp - 8] = R4;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       caqXz: // global
           I64[Sp - 16] = block_caqXF_info;
           R2 = 1;
           R1 = 1;
           I64[Sp - 8] = R4;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqYW() //  [R1]
         { info_tbl: [(caqYW,
                       label: block_caqYW_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqYW: // global
           (_saqsx::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), R1 + 16, 8);
           if (_saqsx::I64 == (-1)) goto caqZc; else goto caqZb;
       caqZc: // global
           (_saqsD::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _saqsD::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.readControlMessage2_entry(R2) args: 8, res: 0, upd: 8;
       caqZb: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgWakeup_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caqXF() //  [R1]
         { info_tbl: [(caqXF,
                       label: block_caqXF_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqXF: // global
           _saqrC::I64 = R1 + 16;
           (_saqrH::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), _saqrC::I64, 1);
           if (_saqrH::I64 == (-1)) goto caqYU; else goto caqYT;
       caqYU: // global
           (_saqsk::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _saqsk::I64;
           Sp = Sp + 16;
           call GHC.Event.Control.readControlMessage3_entry(R2) args: 8, res: 0, upd: 8;
       caqYT: // global
           _saqrM::I64 = %MO_UU_Conv_W8_W64(I8[_saqrC::I64]);
           if (_saqrM::I64 == 254) goto caqYQ; else goto uaqZn;
       caqYQ: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgDie_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uaqZn: // global
           if (_saqrM::I64 == 255) goto caqYR; else goto caqXW;
       caqYR: // global
           call MO_Touch(R1);
           R1 = GHC.Event.Control.CMsgWakeup_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caqXW: // global
           I64[Sp - 16] = block_caqXZ_info;
           I64[Sp - 8] = _saqrM::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           _uaqZq::P64 = CurrentTSO;
           I64[I64[_uaqZq::P64 + 24] + 16] = Sp;
           _uaqZr::I64 = CurrentNursery;
           P64[_uaqZr::I64 + 8] = Hp + 8;
           I64[_uaqZq::P64 + 104] = I64[_uaqZq::P64 + 104] - ((Hp + 8) - I64[_uaqZr::I64]);
           (_uaqZo::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_saqrQ::I64) = call "ccall" arg hints:  []  result hints:  [] __hscore_sizeof_siginfo_t();
           (_uaqZp::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_uaqZo::I64);
           BaseReg = _uaqZp::I64;
           _uaqZs::P64 = CurrentTSO;
           _uaqZt::P64 = I64[_uaqZs::P64 + 24];
           Sp = I64[_uaqZt::P64 + 16];
           SpLim = _uaqZt::P64 + 192;
           HpAlloc = 0;
           _uaqZu::I64 = CurrentNursery;
           _uaqZv::I64 = I64[_uaqZu::I64 + 8];
           Hp = _uaqZv::I64 - 8;
           _uaqZw::I64 = I64[_uaqZu::I64];
           HpLim = _uaqZw::I64 + ((%MO_SS_Conv_W32_W64(I32[_uaqZu::I64 + 48]) << 12) - 1);
           I64[_uaqZs::P64 + 104] = I64[_uaqZs::P64 + 104] + (_uaqZv::I64 - _uaqZw::I64);
           R1 = _saqrQ::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqXZ() //  [R1]
         { info_tbl: [(caqXZ,
                       label: block_caqXZ_info
                       rep:StackRep [True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqXZ: // global
           if (%MO_S_Ge_W64(R1, 0)) goto caqYs; else goto caqYP;
       caqYs: // global
           I64[Sp - 16] = block_caqY8_info;
           _saqrQ::I64 = R1;
           _saqrR::I64 = R1;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _saqrR::I64;
           I64[Sp] = _saqrQ::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       caqYP: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caqY8() //  [R1]
         { info_tbl: [(caqY8,
                       label: block_caqY8_info
                       rep:StackRep [True, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqY8: // global
           I64[Sp] = block_caqYa_info;
           _saqrV::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _saqrV::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caqYa() //  [R1]
         { info_tbl: [(caqYa,
                       label: block_caqYa_info
                       rep:StackRep [False, True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqYa: // global
           _saqrQ::I64 = I64[Sp + 16];
           _saqrZ::I64 = R1 + 16;
           (_saqs4::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint,]  result hints:  [‘signed’] ghczuwrapperZC22ZCbaseZCSystemziPosixziInternalsZCread(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 40])), _saqrZ::I64, _saqrQ::I64);
           I64[Sp - 8] = block_caqYm_info;
           R2 = _saqrQ::I64;
           I64[Sp] = _saqs4::I64;
           I64[Sp + 16] = _saqrZ::I64;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqYm() //  [R1]
         { info_tbl: [(caqYm,
                       label: block_caqYm_info
                       rep:StackRep [True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqYm: // global
           I64[Sp] = block_caqYq_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _caqYq() //  [R1]
         { info_tbl: [(caqYq,
                       label: block_caqYq_info
                       rep:StackRep [True, False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       caqYq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caqYB; else goto caqYA;
       caqYB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caqYA: // global
           if (I64[Sp + 8] == R1) goto caqYN; else goto caqYO;
       caqYN: // global
           I64[Hp - 48] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 16];
           _saqrB::P64 = P64[Sp + 40];
           _saqrM::I64 = I64[Sp + 32];
           _saqrZ::I64 = I64[Sp + 24];
           _caqYF::P64 = Hp - 46;
           call MO_Touch(_caqYF::P64);
           call MO_Touch(_saqrB::P64);
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = _caqYF::P64;
           I64[Hp - 8] = _saqrZ::I64;
           I64[Hp] = _saqrM::I64;
           R1 = Hp - 21;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caqYO: // global
           Hp = Hp - 56;
           R1 = GHC.Event.Control.readControlMessage4_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.794563886 UTC

[section ""data" . GHC.Event.Control.readControlMessage1_closure" {
     GHC.Event.Control.readControlMessage1_closure:
         const GHC.Event.Control.readControlMessage1_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage1_entry() //  [R2, R3]
         { info_tbl: [(car0H,
                       label: GHC.Event.Control.readControlMessage1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car0H: // global
           if ((Sp + -24) < SpLim) (likely: False) goto car0L; else goto car0M;
       car0L: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.readControlMessage1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       car0M: // global
           I64[Sp - 16] = block_car0E_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uar0U; else goto car0F;
       uar0U: // global
           call _car0E(R1) args: 0, res: 0, upd: 0;
       car0F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _car0E() //  [R1]
         { info_tbl: [(car0E,
                       label: block_car0E_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car0E: // global
           I64[Sp - 8] = block_car0K_info;
           _saqsN::P64 = P64[R1 + 15];
           _saqsL::I64 = I64[R1 + 39];
           R1 = P64[Sp + 8];
           P64[Sp] = _saqsN::P64;
           I64[Sp + 8] = _saqsL::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uar0T; else goto car0O;
       uar0T: // global
           call _car0K(R1) args: 0, res: 0, upd: 0;
       car0O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _car0K() //  [R1]
         { info_tbl: [(car0K,
                       label: block_car0K_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car0K: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wreadControlMessage_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.802156352 UTC

[section ""data" . GHC.Event.Control.readControlMessage_closure" {
     GHC.Event.Control.readControlMessage_closure:
         const GHC.Event.Control.readControlMessage_info;
         const 0;
 },
 GHC.Event.Control.readControlMessage_entry() //  [R2, R3]
         { info_tbl: [(car1e,
                       label: GHC.Event.Control.readControlMessage_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car1e: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Control.readControlMessage1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.806173525 UTC

[section ""data" . GHC.Event.Control.W_closure" {
     GHC.Event.Control.W_closure:
         const GHC.Event.Control.W_info;
 },
 GHC.Event.Control.W_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car1m: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.Control.W_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Control.W_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(car1r,
                       label: GHC.Event.Control.W_info
                       rep:HeapRep static {
                             Fun {arity: 5
                                  fun_type: ArgGen [True, True, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car1r: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto car1v; else goto car1u;
       car1v: // global
           HpAlloc = 48;
           R1 = GHC.Event.Control.W_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       car1u: // global
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = R6;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.810872473 UTC

[section ""data" . GHC.Event.Control.CMsgWakeup_closure" {
     GHC.Event.Control.CMsgWakeup_closure:
         const GHC.Event.Control.CMsgWakeup_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.812484537 UTC

[section ""data" . GHC.Event.Control.CMsgDie_closure" {
     GHC.Event.Control.CMsgDie_closure:
         const GHC.Event.Control.CMsgDie_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.814314939 UTC

[section ""data" . GHC.Event.Control.CMsgSignal_closure" {
     GHC.Event.Control.CMsgSignal_closure:
         const GHC.Event.Control.CMsgSignal_info;
 },
 GHC.Event.Control.CMsgSignal_entry() //  [R2, R3, R4]
         { info_tbl: [(car1L,
                       label: GHC.Event.Control.CMsgSignal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 18} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car1L: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto car1P; else goto car1O;
       car1P: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Control.CMsgSignal_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       car1O: // global
           I64[Hp - 24] = GHC.Event.Control.CMsgSignal_con_info;
           P64[Hp - 16] = R3;
           I64[Hp - 8] = R2;
           I64[Hp] = R4;
           R1 = Hp - 21;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.8183866 UTC

[GHC.Event.Control.W_con_entry() //  [R1]
         { info_tbl: [(car1W,
                       label: GHC.Event.Control.W_con_info
                       rep:HeapRep 2 ptrs 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,87]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car1W: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.821583578 UTC

[GHC.Event.Control.CMsgWakeup_con_entry() //  [R1]
         { info_tbl: [(car23,
                       label: GHC.Event.Control.CMsgWakeup_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,87,97,107,101,117,112]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car23: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.824746254 UTC

[GHC.Event.Control.CMsgDie_con_entry() //  [R1]
         { info_tbl: [(car2a,
                       label: GHC.Event.Control.CMsgDie_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,68,105,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car2a: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.827893518 UTC

[GHC.Event.Control.CMsgSignal_con_entry() //  [R1]
         { info_tbl: [(car2h,
                       label: GHC.Event.Control.CMsgSignal_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,67,111,110,116,114,111,108,46,67,77,115,103,83,105,103,110,97,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       car2h: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:26.831494619 UTC

[section ""relreadonly" . Saqxx_srt" {
     Saqxx_srt:
         const GHC.Ptr.$w$cshowsPrec_closure;
         const GHC.Event.Control.$fShowControlMessage3_closure;
         const GHC.Event.Control.$fShowControlMessage_$cshowsPrec_closure;
         const GHC.Event.Control.$fShowControlMessage5_closure;
         const GHC.Event.Control.$fShowControlMessage7_closure;
         const GHC.Event.Control.$fShowControlMessage_$cshow_closure;
         const GHC.Event.Control.$fShowControlMessage1_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Control.$wsendWakeup_closure;
         const GHC.Event.Control.sendWakeup2_closure;
         const GHC.Event.Control.sendWakeup1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_raoWT_closure;
         const GHC.Event.Control.$wsendDie_closure;
         const GHC.Event.Control.sendDie2_closure;
         const GHC.Event.Control.sendDie1_closure;
         const lvl5_raoWX_closure;
         const Foreign.C.Error.throwErrnoIfMinus1Retry2_closure;
         const System.Posix.Internals.setCloseOnExec2_closure;
         const System.Posix.Internals.setNonBlockingFD3_closure;
         const GHC.Event.Control.newControl1_closure;
         const lvl3_raoWV_closure;
         const lvl6_raoWY_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl9_raoX1_closure;
         const lvl11_raoX3_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const GHC.Event.Control.$wreadControlMessage_closure;
         const GHC.Event.Control.readControlMessage2_closure;
         const GHC.Event.Control.readControlMessage3_closure;
         const GHC.Event.Control.readControlMessage4_closure;
         const GHC.Event.Control.readControlMessage1_closure;
 }]

