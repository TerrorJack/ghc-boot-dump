
==================== Output Cmm ====================
2018-03-16 16:04:39.248061881 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:39.249211085 UTC

[section ""data" . GHC.Event.EPoll.$WEPoll_closure" {
     GHC.Event.EPoll.$WEPoll_closure:
         const GHC.Event.EPoll.$WEPoll_info;
 },
 GHC.Event.EPoll.$WEPoll_entry() //  [R2, R3]
         { info_tbl: [(c9y9U,
                       label: GHC.Event.EPoll.$WEPoll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9y9U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9ya3; else goto c9ya4;
       c9ya3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$WEPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9ya4: // global
           I64[Sp - 16] = block_c9y9R_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9yaa; else goto c9y9S;
       u9yaa: // global
           call _c9y9R(R1) args: 0, res: 0, upd: 0;
       c9y9S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9y9R() //  [R1]
         { info_tbl: [(c9y9R,
                       label: block_c9y9R_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9y9R: // global
           I64[Sp] = block_c9y9X_info;
           _s9y0e::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0e::I64;
           if (R1 & 7 != 0) goto u9ya9; else goto c9y9Y;
       u9ya9: // global
           call _c9y9X(R1) args: 0, res: 0, upd: 0;
       c9y9Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9y9X() //  [R1]
         { info_tbl: [(c9y9X,
                       label: block_c9y9X_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9y9X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ya8; else goto c9ya7;
       c9ya8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9ya7: // global
           _s9y0g::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = _s9y0g::P64;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.250668635 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$calignment_closure" {
     GHC.Event.EPoll.$fStorableEvent_$calignment_closure:
         const GHC.Event.EPoll.$fStorableEvent_$calignment_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$calignment_entry() //  []
         { info_tbl: [(c9yaf,
                       label: GHC.Event.EPoll.$fStorableEvent_$calignment_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yaf: // global
           R1 = Foreign.Storable.$fStorableBool7_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.251356987 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent7_closure" {
     GHC.Event.EPoll.$fStorableEvent7_closure:
         const GHC.Types.I#_con_info;
         const 12;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.252020721 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure" {
     GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure:
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$csizeOf_entry() //  []
         { info_tbl: [(c9yam,
                       label: GHC.Event.EPoll.$fStorableEvent_$csizeOf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yam: // global
           R1 = GHC.Event.EPoll.$fStorableEvent7_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.253067566 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent2_closure" {
     GHC.Event.EPoll.$fStorableEvent2_closure:
         const GHC.Event.EPoll.$fStorableEvent2_info;
 },
 GHC.Event.EPoll.$fStorableEvent2_entry() //  [R2]
         { info_tbl: [(c9yaw,
                       label: GHC.Event.EPoll.$fStorableEvent2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yaw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yaF; else goto c9yaG;
       c9yaF: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yaG: // global
           I64[Sp - 8] = block_c9yat_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yaK; else goto c9yau;
       u9yaK: // global
           call _c9yat(R1) args: 0, res: 0, upd: 0;
       c9yau: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yat() //  [R1]
         { info_tbl: [(c9yat,
                       label: block_c9yat_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yat: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9yaJ; else goto c9yaI;
       c9yaJ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yaI: // global
           _s9y0m::I64 = I64[R1 + 7];
           _s9y0p::I64 = %MO_UU_Conv_W32_W64(I32[_s9y0m::I64]);
           _s9y0t::I64 = %MO_SS_Conv_W32_W64(I32[_s9y0m::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y0t::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y0p::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.25468341 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent1_closure" {
     GHC.Event.EPoll.$fStorableEvent1_closure:
         const GHC.Event.EPoll.$fStorableEvent1_info;
 },
 GHC.Event.EPoll.$fStorableEvent1_entry() //  [R2, R3]
         { info_tbl: [(c9yaS,
                       label: GHC.Event.EPoll.$fStorableEvent1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yaS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9yb6; else goto c9yb7;
       c9yb6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yb7: // global
           I64[Sp - 16] = block_c9yaP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9ybi; else goto c9yaQ;
       u9ybi: // global
           call _c9yaP(R1) args: 0, res: 0, upd: 0;
       c9yaQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yaP() //  [R1]
         { info_tbl: [(c9yaP,
                       label: block_c9yaP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yaP: // global
           I64[Sp] = block_c9yaV_info;
           _s9y0B::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0B::I64;
           if (R1 & 7 != 0) goto u9ybh; else goto c9yaW;
       u9ybh: // global
           call _c9yaV(R1) args: 0, res: 0, upd: 0;
       c9yaW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yaV() //  [R1]
         { info_tbl: [(c9yaV,
                       label: block_c9yaV_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yaV: // global
           I64[Sp - 8] = block_c9yb0_info;
           _s9y0E::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y0E::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9ybj; else goto c9yb1;
       u9ybj: // global
           call _c9yb0(R1) args: 0, res: 0, upd: 0;
       c9yb1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yb0() //  [R1]
         { info_tbl: [(c9yb0,
                       label: block_c9yb0_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yb0: // global
           _s9y0E::P64 = P64[Sp + 8];
           I32[I64[Sp + 16]] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 8] = block_c9yb5_info;
           R1 = _s9y0E::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9ybk; else goto c9ybb;
       u9ybk: // global
           call _c9yb5(R1) args: 0, res: 0, upd: 0;
       c9ybb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yb5() //  [R1]
         { info_tbl: [(c9yb5,
                       label: block_c9yb5_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yb5: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.256682149 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent4_closure" {
     GHC.Event.EPoll.$fStorableEvent4_closure:
         const GHC.Event.EPoll.$fStorableEvent4_info;
 },
 GHC.Event.EPoll.$fStorableEvent4_entry() //  [R2, R3]
         { info_tbl: [(c9ybs,
                       label: GHC.Event.EPoll.$fStorableEvent4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ybs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9ybJ; else goto c9ybK;
       c9ybJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9ybK: // global
           I64[Sp - 16] = block_c9ybp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9ybQ; else goto c9ybq;
       u9ybQ: // global
           call _c9ybp(R1) args: 0, res: 0, upd: 0;
       c9ybq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ybp() //  [R1]
         { info_tbl: [(c9ybp,
                       label: block_c9ybp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ybp: // global
           I64[Sp] = block_c9ybv_info;
           _s9y0Q::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0Q::I64;
           if (R1 & 7 != 0) goto u9ybP; else goto c9ybw;
       u9ybP: // global
           call _c9ybv(R1) args: 0, res: 0, upd: 0;
       c9ybw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ybv() //  [R1]
         { info_tbl: [(c9ybv,
                       label: block_c9ybv_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ybv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9ybO; else goto c9ybN;
       c9ybO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9ybN: // global
           _s9y0T::I64 = I64[Sp + 8] + I64[R1 + 7];
           _s9y0W::I64 = %MO_UU_Conv_W32_W64(I32[_s9y0T::I64]);
           _s9y10::I64 = %MO_SS_Conv_W32_W64(I32[_s9y0T::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y10::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y0W::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.258550735 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent6_closure" {
     GHC.Event.EPoll.$fStorableEvent6_closure:
         const GHC.Event.EPoll.$fStorableEvent6_info;
 },
 GHC.Event.EPoll.$fStorableEvent6_entry() //  [R2, R3]
         { info_tbl: [(c9ybY,
                       label: GHC.Event.EPoll.$fStorableEvent6_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ybY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yci; else goto c9ycj;
       c9yci: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9ycj: // global
           I64[Sp - 16] = block_c9ybV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9ycp; else goto c9ybW;
       u9ycp: // global
           call _c9ybV(R1) args: 0, res: 0, upd: 0;
       c9ybW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ybV() //  [R1]
         { info_tbl: [(c9ybV,
                       label: block_c9ybV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ybV: // global
           I64[Sp] = block_c9yc1_info;
           _s9y18::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y18::I64;
           if (R1 & 7 != 0) goto u9yco; else goto c9yc2;
       u9yco: // global
           call _c9yc1(R1) args: 0, res: 0, upd: 0;
       c9yc2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yc1() //  [R1]
         { info_tbl: [(c9yc1,
                       label: block_c9yc1_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yc1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9ycn; else goto c9ycm;
       c9ycn: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9ycm: // global
           _s9y1b::I64 = I64[Sp + 8] + I64[R1 + 7] * 12;
           _s9y1f::I64 = %MO_UU_Conv_W32_W64(I32[_s9y1b::I64]);
           _s9y1j::I64 = %MO_SS_Conv_W32_W64(I32[_s9y1b::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y1j::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y1f::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.260435402 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent3_closure" {
     GHC.Event.EPoll.$fStorableEvent3_closure:
         const GHC.Event.EPoll.$fStorableEvent3_info;
 },
 GHC.Event.EPoll.$fStorableEvent3_entry() //  [R2, R3, R4]
         { info_tbl: [(c9ycx,
                       label: GHC.Event.EPoll.$fStorableEvent3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ycx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9ycT; else goto c9ycU;
       c9ycT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9ycU: // global
           I64[Sp - 24] = block_c9ycu_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yd6; else goto c9ycv;
       u9yd6: // global
           call _c9ycu(R1) args: 0, res: 0, upd: 0;
       c9ycv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ycu() //  [R1]
         { info_tbl: [(c9ycu,
                       label: block_c9ycu_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ycu: // global
           I64[Sp] = block_c9ycA_info;
           _s9y1s::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y1s::I64;
           if (R1 & 7 != 0) goto u9yd5; else goto c9ycB;
       u9yd5: // global
           call _c9ycA(R1) args: 0, res: 0, upd: 0;
       c9ycB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ycA() //  [R1]
         { info_tbl: [(c9ycA,
                       label: block_c9ycA_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ycA: // global
           I64[Sp] = block_c9ycF_info;
           _s9y1u::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9y1u::I64;
           if (R1 & 7 != 0) goto u9yd7; else goto c9ycG;
       u9yd7: // global
           call _c9ycF(R1) args: 0, res: 0, upd: 0;
       c9ycG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ycF() //  [R1]
         { info_tbl: [(c9ycF,
                       label: block_c9ycF_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ycF: // global
           I64[Sp - 8] = block_c9ycK_info;
           _s9y1x::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y1x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yd8; else goto c9ycL;
       u9yd8: // global
           call _c9ycK(R1) args: 0, res: 0, upd: 0;
       c9ycL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ycK() //  [R1]
         { info_tbl: [(c9ycK,
                       label: block_c9ycK_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ycK: // global
           _s9y1x::P64 = P64[Sp + 8];
           _s9y1A::I64 = I64[Sp + 16] + I64[Sp + 24];
           I32[_s9y1A::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9ycS_info;
           R1 = _s9y1x::P64;
           I64[Sp + 24] = _s9y1A::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9yd9; else goto c9ycZ;
       u9yd9: // global
           call _c9ycS(R1) args: 0, res: 0, upd: 0;
       c9ycZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ycS() //  [R1]
         { info_tbl: [(c9ycS,
                       label: block_c9ycS_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ycS: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.262830337 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent5_closure" {
     GHC.Event.EPoll.$fStorableEvent5_closure:
         const GHC.Event.EPoll.$fStorableEvent5_info;
 },
 GHC.Event.EPoll.$fStorableEvent5_entry() //  [R2, R3, R4]
         { info_tbl: [(c9ydh,
                       label: GHC.Event.EPoll.$fStorableEvent5_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ydh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9ydG; else goto c9ydH;
       c9ydG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9ydH: // global
           I64[Sp - 24] = block_c9yde_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9ydT; else goto c9ydf;
       u9ydT: // global
           call _c9yde(R1) args: 0, res: 0, upd: 0;
       c9ydf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yde() //  [R1]
         { info_tbl: [(c9yde,
                       label: block_c9yde_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yde: // global
           I64[Sp] = block_c9ydk_info;
           _s9y1L::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y1L::I64;
           if (R1 & 7 != 0) goto u9ydS; else goto c9ydl;
       u9ydS: // global
           call _c9ydk(R1) args: 0, res: 0, upd: 0;
       c9ydl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ydk() //  [R1]
         { info_tbl: [(c9ydk,
                       label: block_c9ydk_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ydk: // global
           I64[Sp] = block_c9ydp_info;
           _s9y1N::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9y1N::I64;
           if (R1 & 7 != 0) goto u9ydU; else goto c9ydq;
       u9ydU: // global
           call _c9ydp(R1) args: 0, res: 0, upd: 0;
       c9ydq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ydp() //  [R1]
         { info_tbl: [(c9ydp,
                       label: block_c9ydp_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ydp: // global
           I64[Sp - 8] = block_c9ydu_info;
           _s9y1Q::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y1Q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9ydV; else goto c9ydv;
       u9ydV: // global
           call _c9ydu(R1) args: 0, res: 0, upd: 0;
       c9ydv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ydu() //  [R1]
         { info_tbl: [(c9ydu,
                       label: block_c9ydu_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ydu: // global
           _s9y1Q::P64 = P64[Sp + 8];
           _s9y1T::I64 = I64[Sp + 16] + I64[Sp + 24] * 12;
           I32[_s9y1T::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9ydF_info;
           R1 = _s9y1Q::P64;
           I64[Sp + 24] = _s9y1T::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9ydW; else goto c9ydM;
       u9ydW: // global
           call _c9ydF(R1) args: 0, res: 0, upd: 0;
       c9ydM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ydF() //  [R1]
         { info_tbl: [(c9ydF,
                       label: block_c9ydF_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ydF: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.26470686 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_closure" {
     GHC.Event.EPoll.$fStorableEvent_closure:
         const Foreign.Storable.C:Storable_con_info;
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure+1;
         const GHC.Event.EPoll.$fStorableEvent_$calignment_closure+1;
         const GHC.Event.EPoll.$fStorableEvent6_closure+3;
         const GHC.Event.EPoll.$fStorableEvent5_closure+4;
         const GHC.Event.EPoll.$fStorableEvent4_closure+3;
         const GHC.Event.EPoll.$fStorableEvent3_closure+4;
         const GHC.Event.EPoll.$fStorableEvent2_closure+2;
         const GHC.Event.EPoll.$fStorableEvent1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.265461935 UTC

[section ""data" . GHC.Event.EPoll.$fEqEventType_closure" {
     GHC.Event.EPoll.$fEqEventType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Word.eqWord32_closure+2;
         const GHC.Word.neWord32_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.266093484 UTC

[section ""data" . GHC.Event.EPoll.$fBitsEventType_closure" {
     GHC.Event.EPoll.$fBitsEventType_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Event.EPoll.$fEqEventType_closure+1;
         const GHC.Word.$fBitsWord32_$c.&._closure+2;
         const GHC.Word.$fBitsWord32_$c.|._closure+2;
         const GHC.Word.$fBitsWord32_$cxor_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplement_closure+1;
         const GHC.Word.$fBitsWord32_$cshift_closure+2;
         const GHC.Word.$fBitsWord32_$crotate_closure+2;
         const GHC.Word.$fBitsWord32_$cminBound_closure;
         const GHC.Word.$fBitsWord32_$cbit_closure+1;
         const GHC.Word.$fBitsWord32_$csetBit_closure+2;
         const GHC.Word.$fBitsWord32_$cclearBit_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplementBit_closure+2;
         const GHC.Word.$fBitsWord32_$ctestBit_closure+2;
         const GHC.Word.$fBitsWord32_$cbitSizeMaybe_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fBitsWord32_$cisSigned_closure+1;
         const GHC.Word.$fBitsWord32_$cshiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cshiftR_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftR_closure+2;
         const GHC.Word.$fBitsWord32_$crotateL_closure+2;
         const GHC.Word.$fBitsWord32_$crotateR_closure+2;
         const GHC.Word.$fBitsWord32_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.266903623 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd1_closure" {
     GHC.Event.EPoll.fromEPollFd1_closure:
         const GHC.Event.EPoll.fromEPollFd1_info;
 },
 GHC.Event.EPoll.fromEPollFd1_entry() //  [R2]
         { info_tbl: [(c9ye1,
                       label: GHC.Event.EPoll.fromEPollFd1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ye1: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.267717743 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd_closure" {
     GHC.Event.EPoll.fromEPollFd_closure:
         const GHC.Event.EPoll.fromEPollFd_info;
 },
 GHC.Event.EPoll.fromEPollFd_entry() //  [R2]
         { info_tbl: [(c9ye8,
                       label: GHC.Event.EPoll.fromEPollFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ye8: // global
           R2 = R2;
           call GHC.Event.EPoll.fromEPollFd1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.268538777 UTC

[section ""data" . GHC.Event.EPoll.unEventType1_closure" {
     GHC.Event.EPoll.unEventType1_closure:
         const GHC.Event.EPoll.unEventType1_info;
 },
 GHC.Event.EPoll.unEventType1_entry() //  [R2]
         { info_tbl: [(c9yef,
                       label: GHC.Event.EPoll.unEventType1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yef: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.269387902 UTC

[section ""data" . GHC.Event.EPoll.unEventType_closure" {
     GHC.Event.EPoll.unEventType_closure:
         const GHC.Event.EPoll.unEventType_info;
 },
 GHC.Event.EPoll.unEventType_entry() //  [R2]
         { info_tbl: [(c9yem,
                       label: GHC.Event.EPoll.unEventType_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yem: // global
           R2 = R2;
           call GHC.Event.EPoll.unEventType1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.27028646 UTC

[section ""data" . GHC.Event.EPoll.eventFd_closure" {
     GHC.Event.EPoll.eventFd_closure:
         const GHC.Event.EPoll.eventFd_info;
 },
 GHC.Event.EPoll.eventFd_entry() //  [R2]
         { info_tbl: [(c9yew,
                       label: GHC.Event.EPoll.eventFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yew: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yex; else goto c9yey;
       c9yex: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yey: // global
           I64[Sp - 8] = block_c9yet_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yeC; else goto c9yeu;
       u9yeC: // global
           call _c9yet(R1) args: 0, res: 0, upd: 0;
       c9yeu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yet() //  [R1]
         { info_tbl: [(c9yet,
                       label: block_c9yet_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yet: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.271431087 UTC

[section ""data" . GHC.Event.EPoll.eventTypes_closure" {
     GHC.Event.EPoll.eventTypes_closure:
         const GHC.Event.EPoll.eventTypes_info;
 },
 GHC.Event.EPoll.eventTypes_entry() //  [R2]
         { info_tbl: [(c9yeK,
                       label: GHC.Event.EPoll.eventTypes_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yeK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yeL; else goto c9yeM;
       c9yeL: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventTypes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yeM: // global
           I64[Sp - 8] = block_c9yeH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yeQ; else goto c9yeI;
       u9yeQ: // global
           call _c9yeH(R1) args: 0, res: 0, upd: 0;
       c9yeI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yeH() //  [R1]
         { info_tbl: [(c9yeH,
                       label: block_c9yeH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yeH: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.272657733 UTC

[section ""data" . GHC.Event.EPoll.epollEvents_closure" {
     GHC.Event.EPoll.epollEvents_closure:
         const GHC.Event.EPoll.epollEvents_info;
 },
 GHC.Event.EPoll.epollEvents_entry() //  [R2]
         { info_tbl: [(c9yeY,
                       label: GHC.Event.EPoll.epollEvents_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yeY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yf2; else goto c9yf3;
       c9yf2: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollEvents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yf3: // global
           I64[Sp - 8] = block_c9yeV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yf7; else goto c9yeW;
       u9yf7: // global
           call _c9yeV(R1) args: 0, res: 0, upd: 0;
       c9yeW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yeV() //  [R1]
         { info_tbl: [(c9yeV,
                       label: block_c9yeV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yeV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9yf6; else goto c9yf5;
       c9yf6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yf5: // global
           _s9y2d::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s9y2d::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.273988197 UTC

[section ""data" . GHC.Event.EPoll.epollFd_closure" {
     GHC.Event.EPoll.epollFd_closure:
         const GHC.Event.EPoll.epollFd_info;
 },
 GHC.Event.EPoll.epollFd_entry() //  [R2]
         { info_tbl: [(c9yff,
                       label: GHC.Event.EPoll.epollFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yff: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yfj; else goto c9yfk;
       c9yfj: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yfk: // global
           I64[Sp - 8] = block_c9yfc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yfo; else goto c9yfd;
       u9yfo: // global
           call _c9yfc(R1) args: 0, res: 0, upd: 0;
       c9yfd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yfc() //  [R1]
         { info_tbl: [(c9yfc,
                       label: block_c9yfc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yfc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9yfn; else goto c9yfm;
       c9yfn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yfm: // global
           _s9y2g::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9y2g::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.275059272 UTC

[section ""data" . GHC.Event.EPoll.available_closure" {
     GHC.Event.EPoll.available_closure:
         const GHC.Types.True_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.275598033 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule4_bytes" {
     GHC.Event.EPoll.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.276183363 UTC

[section ""data" . GHC.Event.EPoll.$trModule3_closure" {
     GHC.Event.EPoll.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.276779007 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule2_bytes" {
     GHC.Event.EPoll.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.277514542 UTC

[section ""data" . GHC.Event.EPoll.$trModule1_closure" {
     GHC.Event.EPoll.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.278126196 UTC

[section ""data" . GHC.Event.EPoll.$trModule_closure" {
     GHC.Event.EPoll.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.EPoll.$trModule3_closure+1;
         const GHC.Event.EPoll.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.278709802 UTC

[section ""data" . $krep_r9xZP_closure" {
     $krep_r9xZP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.279351007 UTC

[section ""data" . $krep1_r9xZQ_closure" {
     $krep1_r9xZQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord32_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.279936129 UTC

[section ""data" . $krep2_r9xZR_closure" {
     $krep2_r9xZR_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.280528382 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPollFd2_bytes" {
     GHC.Event.EPoll.$tcEPollFd2_bytes:
         I8[] [69,80,111,108,108,70,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.281090012 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd1_closure" {
     GHC.Event.EPoll.$tcEPollFd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPollFd2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.281686102 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd_closure" {
     GHC.Event.EPoll.$tcEPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPollFd1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11408974392712426853;
         const 10860743297622841984;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.282296714 UTC

[section ""data" . $krep3_r9xZS_closure" {
     $krep3_r9xZS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPollFd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.28287657 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd1_closure" {
     GHC.Event.EPoll.$tc'EPollFd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep3_r9xZS_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.283489466 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPollFd3_bytes" {
     GHC.Event.EPoll.$tc'EPollFd3_bytes:
         I8[] [39,69,80,111,108,108,70,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.284060784 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd2_closure" {
     GHC.Event.EPoll.$tc'EPollFd2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPollFd3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.284619486 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd_closure" {
     GHC.Event.EPoll.$tc'EPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd2_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd1_closure+4;
         const 13859366844265277896;
         const 3104986725924328114;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.28522914 UTC

[section ""cstring" . GHC.Event.EPoll.$tcControlOp2_bytes" {
     GHC.Event.EPoll.$tcControlOp2_bytes:
         I8[] [67,111,110,116,114,111,108,79,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.285808345 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp1_closure" {
     GHC.Event.EPoll.$tcControlOp1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcControlOp2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.286362374 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp_closure" {
     GHC.Event.EPoll.$tcControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcControlOp1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16670684287779227039;
         const 7079239768931473179;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.288231044 UTC

[section ""data" . $krep4_r9xZT_closure" {
     $krep4_r9xZT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcControlOp_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.289129239 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp1_closure" {
     GHC.Event.EPoll.$tc'ControlOp1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep4_r9xZT_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.290401392 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'ControlOp3_bytes" {
     GHC.Event.EPoll.$tc'ControlOp3_bytes:
         I8[] [39,67,111,110,116,114,111,108,79,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.291214273 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp2_closure" {
     GHC.Event.EPoll.$tc'ControlOp2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'ControlOp3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.292100549 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp_closure" {
     GHC.Event.EPoll.$tc'ControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp2_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp1_closure+4;
         const 17423659744934710370;
         const 14737300415055323322;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.293061426 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEventType2_bytes" {
     GHC.Event.EPoll.$tcEventType2_bytes:
         I8[] [69,118,101,110,116,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.293989093 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType1_closure" {
     GHC.Event.EPoll.$tcEventType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEventType2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.2948391 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType_closure" {
     GHC.Event.EPoll.$tcEventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEventType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6882131545153803920;
         const 11603224301892798833;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.295702598 UTC

[section ""data" . $krep5_r9xZU_closure" {
     $krep5_r9xZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEventType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.296596878 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType1_closure" {
     GHC.Event.EPoll.$tc'EventType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r9xZQ_closure+1;
         const $krep5_r9xZU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.2974962 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EventType3_bytes" {
     GHC.Event.EPoll.$tc'EventType3_bytes:
         I8[] [39,69,118,101,110,116,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.298296142 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType2_closure" {
     GHC.Event.EPoll.$tc'EventType2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EventType3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.299069296 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType_closure" {
     GHC.Event.EPoll.$tc'EventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EventType2_closure+1;
         const GHC.Event.EPoll.$tc'EventType1_closure+4;
         const 6895099112894632230;
         const 10353865251933672677;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.299702341 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEvent2_bytes" {
     GHC.Event.EPoll.$tcEvent2_bytes:
         I8[] [69,118,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.300273188 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent1_closure" {
     GHC.Event.EPoll.$tcEvent1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEvent2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.300844391 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent_closure" {
     GHC.Event.EPoll.$tcEvent_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEvent1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9768726503562184735;
         const 14932995848660065219;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.301849819 UTC

[section ""data" . $krep6_r9xZV_closure" {
     $krep6_r9xZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEvent_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.302413748 UTC

[section ""data" . $krep7_r9xZW_closure" {
     $krep7_r9xZW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9xZR_closure+1;
         const $krep6_r9xZV_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.302991692 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event1_closure" {
     GHC.Event.EPoll.$tc'Event1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r9xZU_closure+1;
         const $krep7_r9xZW_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.303573626 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'Event3_bytes" {
     GHC.Event.EPoll.$tc'Event3_bytes:
         I8[] [39,69,118,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.304133307 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event2_closure" {
     GHC.Event.EPoll.$tc'Event2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'Event3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.304713444 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event_closure" {
     GHC.Event.EPoll.$tc'Event_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'Event2_closure+1;
         const GHC.Event.EPoll.$tc'Event1_closure+4;
         const 13898227050457859187;
         const 12870286929163337655;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.305332263 UTC

[section ""data" . $krep8_r9xZX_closure" {
     $krep8_r9xZX_closure:
         const :_con_info;
         const $krep6_r9xZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.305944549 UTC

[section ""data" . $krep9_r9xZY_closure" {
     $krep9_r9xZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcArray_closure;
         const $krep8_r9xZX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.306554194 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPoll2_bytes" {
     GHC.Event.EPoll.$tcEPoll2_bytes:
         I8[] [69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.30710154 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll1_closure" {
     GHC.Event.EPoll.$tcEPoll1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPoll2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.307644293 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll_closure" {
     GHC.Event.EPoll.$tcEPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPoll1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16362945812962510240;
         const 15183678187331181316;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.30822701 UTC

[section ""data" . $krep10_r9xZZ_closure" {
     $krep10_r9xZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPoll_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.308791758 UTC

[section ""data" . $krep11_r9y00_closure" {
     $krep11_r9y00_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r9xZY_closure+1;
         const $krep10_r9xZZ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.309392023 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll1_closure" {
     GHC.Event.EPoll.$tc'EPoll1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r9xZS_closure+1;
         const $krep11_r9y00_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.309968932 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPoll3_bytes" {
     GHC.Event.EPoll.$tc'EPoll3_bytes:
         I8[] [39,69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.310484964 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll2_closure" {
     GHC.Event.EPoll.$tc'EPoll2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPoll3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.311008945 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll_closure" {
     GHC.Event.EPoll.$tc'EPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPoll2_closure+1;
         const GHC.Event.EPoll.$tc'EPoll1_closure+4;
         const 11640704659469356468;
         const 11164042648060985378;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.311569861 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd4_bytes" {
     GHC.Event.EPoll.$fShowEPollFd4_bytes:
         I8[] [69,80,111,108,108,70,100,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.312086007 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd3_bytes" {
     GHC.Event.EPoll.$fShowEPollFd3_bytes:
         I8[] [102,114,111,109,69,80,111,108,108,70,100,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.312611923 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd2_bytes" {
     GHC.Event.EPoll.$fShowEPollFd2_bytes:
         I8[] [125]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.31511731 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec_closure" {
     GHC.Event.EPoll.$w$cshowsPrec_closure:
         const GHC.Event.EPoll.$w$cshowsPrec_info;
 },
 sat_s9y2o_entry() //  [R1]
         { info_tbl: [(c9yfN,
                       label: sat_s9y2o_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yfN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yfO; else goto c9yfP;
       c9yfO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yfP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2s_entry() //  [R1]
         { info_tbl: [(c9yfQ,
                       label: sat_s9y2s_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yfQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yfU; else goto c9yfV;
       c9yfU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yfV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9yfE_info;
           _s9y2k::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2k::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9yg2; else goto c9yfF;
       u9yg2: // global
           call _c9yfE(R1) args: 0, res: 0, upd: 0;
       c9yfF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yfE() //  [R1]
         { info_tbl: [(c9yfE,
                       label: block_c9yfE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yfE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yfY; else goto c9yfX;
       c9yfY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9yfX: // global
           _s9y2n::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y2o_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9yfR_info;
           R4 = Hp - 16;
           R3 = _s9y2n::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yfR() //  [R1, R2]
         { info_tbl: [(c9yfR,
                       label: block_c9yfR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yfR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yg1; else goto c9yg0;
       c9yg1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yg0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2t_entry() //  [R1]
         { info_tbl: [(c9yg3,
                       label: sat_s9y2t_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yg3: // global
           _s9y2t::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yg4; else goto c9yg5;
       c9yg5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yg7; else goto c9yg6;
       c9yg7: // global
           HpAlloc = 32;
           goto c9yg4;
       c9yg4: // global
           R1 = _s9y2t::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yg6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2t::P64;
           _s9y2j::P64 = P64[_s9y2t::P64 + 16];
           _s9y2k::P64 = P64[_s9y2t::P64 + 24];
           I64[Hp - 24] = sat_s9y2s_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2x_entry() //  [R1]
         { info_tbl: [(c9ygv,
                       label: sat_s9y2x_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ygv: // global
           _s9y2x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ygw; else goto c9ygx;
       c9ygx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ygz; else goto c9ygy;
       c9ygz: // global
           HpAlloc = 24;
           goto c9ygw;
       c9ygw: // global
           R1 = _s9y2x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ygy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2x::P64;
           _s9y2k::P64 = P64[_s9y2x::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2B_entry() //  [R1]
         { info_tbl: [(c9ygA,
                       label: sat_s9y2B_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ygA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9ygE; else goto c9ygF;
       c9ygE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ygF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9ygl_info;
           _s9y2k::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2k::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9ygM; else goto c9ygm;
       u9ygM: // global
           call _c9ygl(R1) args: 0, res: 0, upd: 0;
       c9ygm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9ygl() //  [R1]
         { info_tbl: [(c9ygl,
                       label: block_c9ygl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ygl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ygI; else goto c9ygH;
       c9ygI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9ygH: // global
           _s9y2v::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y2x_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9ygB_info;
           R4 = Hp - 16;
           R3 = _s9y2v::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9ygB() //  [R1, R2]
         { info_tbl: [(c9ygB,
                       label: block_c9ygB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ygB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ygL; else goto c9ygK;
       c9ygL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9ygK: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2C_entry() //  [R1]
         { info_tbl: [(c9ygN,
                       label: sat_s9y2C_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ygN: // global
           _s9y2C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ygO; else goto c9ygP;
       c9ygP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ygR; else goto c9ygQ;
       c9ygR: // global
           HpAlloc = 32;
           goto c9ygO;
       c9ygO: // global
           R1 = _s9y2C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ygQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2C::P64;
           _s9y2j::P64 = P64[_s9y2C::P64 + 16];
           _s9y2k::P64 = P64[_s9y2C::P64 + 24];
           I64[Hp - 24] = sat_s9y2B_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2D_entry() //  [R1]
         { info_tbl: [(c9ygS,
                       label: sat_s9y2D_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ygS: // global
           _s9y2D::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ygT; else goto c9ygU;
       c9ygU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ygW; else goto c9ygV;
       c9ygW: // global
           HpAlloc = 32;
           goto c9ygT;
       c9ygT: // global
           R1 = _s9y2D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ygV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2D::P64;
           _s9y2j::P64 = P64[_s9y2D::P64 + 16];
           _s9y2k::P64 = P64[_s9y2D::P64 + 24];
           I64[Hp - 24] = sat_s9y2C_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yh0,
                       label: GHC.Event.EPoll.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yh0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9yh4; else goto c9yh3;
       c9yh4: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yh3: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9ygY; else goto c9ygZ;
       c9ygY: // global
           I64[Hp - 48] = sat_s9y2t_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9yfw::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9yfw::P64;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9ygZ: // global
           I64[Hp - 48] = sat_s9y2D_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.319609074 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yhd,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yhd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9yhe; else goto c9yhf;
       c9yhe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yhf: // global
           I64[Sp - 24] = block_c9yha_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yhj; else goto c9yhb;
       u9yhj: // global
           call _c9yha(R1) args: 0, res: 0, upd: 0;
       c9yhb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yha() //  [R1]
         { info_tbl: [(c9yha,
                       label: block_c9yha_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yha: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.320810234 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd5_closure" {
     GHC.Event.EPoll.$fShowEPollFd5_closure:
         const GHC.Event.EPoll.$fShowEPollFd5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEPollFd5_entry() //  [R1]
         { info_tbl: [(c9yhq,
                       label: GHC.Event.EPoll.$fShowEPollFd5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yhq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yhr; else goto c9yhs;
       c9yhr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yhs: // global
           (_c9yhn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9yhn::I64 == 0) goto c9yhp; else goto c9yho;
       c9yhp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9yho: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9yhn::I64;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.322935185 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshow_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshow_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_info;
         const 0;
 },
 sat_s9y2P_entry() //  [R1]
         { info_tbl: [(c9yhI,
                       label: sat_s9y2P_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yhI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9yhO; else goto c9yhP;
       c9yhO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yhP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9yhF_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yhU; else goto c9yhG;
       u9yhU: // global
           call _c9yhF(R1) args: 0, res: 0, upd: 0;
       c9yhG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yhF() //  [R1]
         { info_tbl: [(c9yhF,
                       label: block_c9yhF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yhF: // global
           I64[Sp] = block_c9yhL_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yhL() //  [R1, R2]
         { info_tbl: [(c9yhL,
                       label: block_c9yhL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yhL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yhT; else goto c9yhS;
       c9yhT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yhS: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2Q_entry() //  [R1]
         { info_tbl: [(c9yhV,
                       label: sat_s9y2Q_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yhV: // global
           _s9y2Q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yhW; else goto c9yhX;
       c9yhX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yhZ; else goto c9yhY;
       c9yhZ: // global
           HpAlloc = 24;
           goto c9yhW;
       c9yhW: // global
           R1 = _s9y2Q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yhY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2Q::P64;
           _s9y2J::P64 = P64[_s9y2Q::P64 + 16];
           I64[Hp - 16] = sat_s9y2P_info;
           P64[Hp] = _s9y2J::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshow_entry() //  [R2]
         { info_tbl: [(c9yi0,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yi0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yi4; else goto c9yi3;
       c9yi4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yi3: // global
           I64[Hp - 16] = sat_s9y2Q_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.324848967 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd1_closure" {
     GHC.Event.EPoll.$fShowEPollFd1_closure:
         const GHC.Event.EPoll.$fShowEPollFd1_info;
 },
 GHC.Event.EPoll.$fShowEPollFd1_entry() //  [R2, R3]
         { info_tbl: [(c9yia,
                       label: GHC.Event.EPoll.$fShowEPollFd1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yia: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.32570882 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9yih,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yih: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEPollFd1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.326421214 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_closure" {
     GHC.Event.EPoll.$fShowEPollFd_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.327918363 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent4_bytes" {
     GHC.Event.EPoll.$fShowEvent4_bytes:
         I8[] [69,118,101,110,116,84,121,112,101,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.328491819 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent3_bytes" {
     GHC.Event.EPoll.$fShowEvent3_bytes:
         I8[] [117,110,69,118,101,110,116,84,121,112,101,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.330824756 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec2_closure" {
     GHC.Event.EPoll.$w$cshowsPrec2_closure:
         const GHC.Event.EPoll.$w$cshowsPrec2_info;
 },
 sat_s9y32_entry() //  [R1]
         { info_tbl: [(c9yiI,
                       label: sat_s9y32_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yiI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yiJ; else goto c9yiK;
       c9yiJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yiK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y36_entry() //  [R1]
         { info_tbl: [(c9yiL,
                       label: sat_s9y36_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yiL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yiS; else goto c9yiT;
       c9yiS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yiT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9yiz_info;
           _s9y2X::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2X::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9yj0; else goto c9yiA;
       u9yj0: // global
           call _c9yiz(R1) args: 0, res: 0, upd: 0;
       c9yiA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yiz() //  [R1]
         { info_tbl: [(c9yiz,
                       label: block_c9yiz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yiz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yiW; else goto c9yiV;
       c9yiW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9yiV: // global
           _s9y30::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y32_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9yiP_info;
           R3 = Hp - 16;
           R2 = _s9y30::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yiP() //  [R1, R2]
         { info_tbl: [(c9yiP,
                       label: block_c9yiP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yiP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yiZ; else goto c9yiY;
       c9yiZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yiY: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y37_entry() //  [R1]
         { info_tbl: [(c9yj1,
                       label: sat_s9y37_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yj1: // global
           _s9y37::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yj2; else goto c9yj3;
       c9yj3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yj5; else goto c9yj4;
       c9yj5: // global
           HpAlloc = 32;
           goto c9yj2;
       c9yj2: // global
           R1 = _s9y37::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yj4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y37::P64;
           _s9y2W::P64 = P64[_s9y37::P64 + 16];
           _s9y2X::P64 = P64[_s9y37::P64 + 24];
           I64[Hp - 24] = sat_s9y36_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3c_entry() //  [R1]
         { info_tbl: [(c9yjt,
                       label: sat_s9y3c_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yjt: // global
           _s9y3c::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yju; else goto c9yjv;
       c9yjv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yjx; else goto c9yjw;
       c9yjx: // global
           HpAlloc = 24;
           goto c9yju;
       c9yju: // global
           R1 = _s9y3c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yjw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3c::P64;
           _s9y2X::P64 = P64[_s9y3c::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3g_entry() //  [R1]
         { info_tbl: [(c9yjy,
                       label: sat_s9y3g_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yjy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yjF; else goto c9yjG;
       c9yjF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yjG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9yjj_info;
           _s9y2X::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2X::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9yjN; else goto c9yjk;
       u9yjN: // global
           call _c9yjj(R1) args: 0, res: 0, upd: 0;
       c9yjk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yjj() //  [R1]
         { info_tbl: [(c9yjj,
                       label: block_c9yjj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yjj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yjJ; else goto c9yjI;
       c9yjJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9yjI: // global
           _s9y39::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3c_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9yjC_info;
           R3 = Hp - 16;
           R2 = _s9y39::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yjC() //  [R1, R2]
         { info_tbl: [(c9yjC,
                       label: block_c9yjC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yjC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yjM; else goto c9yjL;
       c9yjM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yjL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3h_entry() //  [R1]
         { info_tbl: [(c9yjO,
                       label: sat_s9y3h_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yjO: // global
           _s9y3h::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yjP; else goto c9yjQ;
       c9yjQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yjS; else goto c9yjR;
       c9yjS: // global
           HpAlloc = 32;
           goto c9yjP;
       c9yjP: // global
           R1 = _s9y3h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yjR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3h::P64;
           _s9y2W::P64 = P64[_s9y3h::P64 + 16];
           _s9y2X::P64 = P64[_s9y3h::P64 + 24];
           I64[Hp - 24] = sat_s9y3g_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3i_entry() //  [R1]
         { info_tbl: [(c9yjT,
                       label: sat_s9y3i_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yjT: // global
           _s9y3i::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yjU; else goto c9yjV;
       c9yjV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yjX; else goto c9yjW;
       c9yjX: // global
           HpAlloc = 32;
           goto c9yjU;
       c9yjU: // global
           R1 = _s9y3i::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yjW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3i::P64;
           _s9y2W::P64 = P64[_s9y3i::P64 + 16];
           _s9y2X::P64 = P64[_s9y3i::P64 + 24];
           I64[Hp - 24] = sat_s9y3h_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yk1,
                       label: GHC.Event.EPoll.$w$cshowsPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yk1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9yk5; else goto c9yk4;
       c9yk5: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yk4: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9yjZ; else goto c9yk0;
       c9yjZ: // global
           I64[Hp - 48] = sat_s9y37_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9yir::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9yir::P64;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9yk0: // global
           I64[Hp - 48] = sat_s9y3i_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.335366962 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(c9yke,
                       label: GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yke: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9ykf; else goto c9ykg;
       c9ykf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9ykg: // global
           I64[Sp - 24] = block_c9ykb_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9ykk; else goto c9ykc;
       u9ykk: // global
           call _c9ykb(R1) args: 0, res: 0, upd: 0;
       c9ykc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ykb() //  [R1]
         { info_tbl: [(c9ykb,
                       label: block_c9ykb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ykb: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.336995169 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshow_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshow_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshow_info;
         const 0;
 },
 sat_s9y3v_entry() //  [R1]
         { info_tbl: [(c9ykA,
                       label: sat_s9y3v_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ykA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9ykJ; else goto c9ykK;
       c9ykJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ykK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9ykx_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9ykP; else goto c9yky;
       u9ykP: // global
           call _c9ykx(R1) args: 0, res: 0, upd: 0;
       c9yky: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9ykx() //  [R1]
         { info_tbl: [(c9ykx,
                       label: block_c9ykx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ykx: // global
           I64[Sp] = block_c9ykG_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9ykG() //  [R1, R2]
         { info_tbl: [(c9ykG,
                       label: block_c9ykG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ykG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ykO; else goto c9ykN;
       c9ykO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9ykN: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3w_entry() //  [R1]
         { info_tbl: [(c9ykQ,
                       label: sat_s9y3w_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ykQ: // global
           _s9y3w::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ykR; else goto c9ykS;
       c9ykS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ykU; else goto c9ykT;
       c9ykU: // global
           HpAlloc = 24;
           goto c9ykR;
       c9ykR: // global
           R1 = _s9y3w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ykT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3w::P64;
           _s9y3o::P64 = P64[_s9y3w::P64 + 16];
           I64[Hp - 16] = sat_s9y3v_info;
           P64[Hp] = _s9y3o::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$fShowEventType_$cshow_entry() //  [R2]
         { info_tbl: [(c9ykV,
                       label: GHC.Event.EPoll.$fShowEventType_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ykV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ykZ; else goto c9ykY;
       c9ykZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9ykY: // global
           I64[Hp - 16] = sat_s9y3w_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.338958851 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType1_closure" {
     GHC.Event.EPoll.$fShowEventType1_closure:
         const GHC.Event.EPoll.$fShowEventType1_info;
 },
 GHC.Event.EPoll.$fShowEventType1_entry() //  [R2, R3]
         { info_tbl: [(c9yl4,
                       label: GHC.Event.EPoll.$fShowEventType1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yl4: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.339800442 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9ylb,
                       label: GHC.Event.EPoll.$fShowEventType_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ylb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEventType1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.340487847 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_closure" {
     GHC.Event.EPoll.$fShowEventType_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEventType_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.341092953 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent7_bytes" {
     GHC.Event.EPoll.$fShowEvent7_bytes:
         I8[] [69,118,101,110,116,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.341855193 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent6_closure" {
     GHC.Event.EPoll.$fShowEvent6_closure:
         const GHC.Event.EPoll.$fShowEvent6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent6_entry() //  [R1]
         { info_tbl: [(c9ylk,
                       label: GHC.Event.EPoll.$fShowEvent6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ylk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yll; else goto c9ylm;
       c9yll: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ylm: // global
           (_c9ylh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9ylh::I64 == 0) goto c9ylj; else goto c9yli;
       c9ylj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9yli: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9ylh::I64;
           R2 = GHC.Event.EPoll.$fShowEvent7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.342719842 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent5_bytes" {
     GHC.Event.EPoll.$fShowEvent5_bytes:
         I8[] [101,118,101,110,116,84,121,112,101,115,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.343269702 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent2_bytes" {
     GHC.Event.EPoll.$fShowEvent2_bytes:
         I8[] [101,118,101,110,116,70,100,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.346494867 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec1_closure" {
     GHC.Event.EPoll.$w$cshowsPrec1_closure:
         const GHC.Event.EPoll.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Event.EPoll.$w$cshowsPrec1_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ylo: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y3I_entry() //  [R1]
         { info_tbl: [(c9ylY,
                       label: sat_s9y3I_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ylY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9ylZ; else goto c9ym0;
       c9ylZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ym0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3M_entry() //  [R1]
         { info_tbl: [(c9ym1,
                       label: sat_s9y3M_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ym1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9ym5; else goto c9ym6;
       c9ym5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ym6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9ylP_info;
           _s9y3E::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y3E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9ymd; else goto c9ylQ;
       u9ymd: // global
           call _c9ylP(R1) args: 0, res: 0, upd: 0;
       c9ylQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9ylP() //  [R1]
         { info_tbl: [(c9ylP,
                       label: block_c9ylP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ylP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ym9; else goto c9ym8;
       c9ym9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9ym8: // global
           _s9y3H::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3I_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9ym2_info;
           R4 = Hp - 16;
           R3 = _s9y3H::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9ym2() //  [R1, R2]
         { info_tbl: [(c9ym2,
                       label: block_c9ym2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ym2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ymc; else goto c9ymb;
       c9ymc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9ymb: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3N_entry() //  [R1]
         { info_tbl: [(c9yme,
                       label: sat_s9y3N_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yme: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ymi; else goto c9ymh;
       c9ymi: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ymh: // global
           _s9y3D::P64 = P64[R1 + 16];
           _s9y3E::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9y3M_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y3O_entry() //  [R1]
         { info_tbl: [(c9ymj,
                       label: sat_s9y3O_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ymj: // global
           _s9y3O::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ymk; else goto c9yml;
       c9yml: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ymn; else goto c9ymm;
       c9ymn: // global
           HpAlloc = 32;
           goto c9ymk;
       c9ymk: // global
           R1 = _s9y3O::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ymm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3O::P64;
           _s9y3D::P64 = P64[_s9y3O::P64 + 16];
           _s9y3E::P64 = P64[_s9y3O::P64 + 24];
           I64[Hp - 24] = sat_s9y3N_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3P_entry() //  [R1]
         { info_tbl: [(c9ymo,
                       label: sat_s9y3P_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ymo: // global
           _s9y3P::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ymp; else goto c9ymq;
       c9ymq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yms; else goto c9ymr;
       c9yms: // global
           HpAlloc = 32;
           goto c9ymp;
       c9ymp: // global
           R1 = _s9y3P::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ymr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3P::P64;
           _s9y3C::P64 = P64[_s9y3P::P64 + 16];
           _s9y3D::P64 = P64[_s9y3P::P64 + 24];
           _s9y3E::P64 = P64[_s9y3P::P64 + 32];
           I64[Hp - 24] = sat_s9y3O_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R4 = Hp - 24;
           R3 = _s9y3C::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3Q_entry() //  [R1]
         { info_tbl: [(c9ymt,
                       label: sat_s9y3Q_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ymt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9ymx; else goto c9ymw;
       c9ymx: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ymw: // global
           _s9y3C::P64 = P64[R1 + 16];
           _s9y3D::P64 = P64[R1 + 24];
           _s9y3E::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9y3P_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y3U_entry() //  [R1]
         { info_tbl: [(c9yn7,
                       label: sat_s9y3U_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yn7: // global
           _s9y3U::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yn8; else goto c9yn9;
       c9yn9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ynb; else goto c9yna;
       c9ynb: // global
           HpAlloc = 24;
           goto c9yn8;
       c9yn8: // global
           R1 = _s9y3U::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yna: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3U::P64;
           _s9y3E::P64 = P64[_s9y3U::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3Y_entry() //  [R1]
         { info_tbl: [(c9ync,
                       label: sat_s9y3Y_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ync: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yng; else goto c9ynh;
       c9yng: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ynh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9ymX_info;
           _s9y3E::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y3E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9yno; else goto c9ymY;
       u9yno: // global
           call _c9ymX(R1) args: 0, res: 0, upd: 0;
       c9ymY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9ymX() //  [R1]
         { info_tbl: [(c9ymX,
                       label: block_c9ymX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ymX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ynk; else goto c9ynj;
       c9ynk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9ynj: // global
           _s9y3S::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3U_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9ynd_info;
           R4 = Hp - 16;
           R3 = _s9y3S::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9ynd() //  [R1, R2]
         { info_tbl: [(c9ynd,
                       label: block_c9ynd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ynd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ynn; else goto c9ynm;
       c9ynn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9ynm: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3Z_entry() //  [R1]
         { info_tbl: [(c9ynp,
                       label: sat_s9y3Z_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ynp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ynt; else goto c9yns;
       c9ynt: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yns: // global
           _s9y3D::P64 = P64[R1 + 16];
           _s9y3E::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9y3Y_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y40_entry() //  [R1]
         { info_tbl: [(c9ynu,
                       label: sat_s9y40_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ynu: // global
           _s9y40::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ynv; else goto c9ynw;
       c9ynw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yny; else goto c9ynx;
       c9yny: // global
           HpAlloc = 32;
           goto c9ynv;
       c9ynv: // global
           R1 = _s9y40::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ynx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y40::P64;
           _s9y3D::P64 = P64[_s9y40::P64 + 16];
           _s9y3E::P64 = P64[_s9y40::P64 + 24];
           I64[Hp - 24] = sat_s9y3Z_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y41_entry() //  [R1]
         { info_tbl: [(c9ynz,
                       label: sat_s9y41_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ynz: // global
           _s9y41::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ynA; else goto c9ynB;
       c9ynB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ynD; else goto c9ynC;
       c9ynD: // global
           HpAlloc = 32;
           goto c9ynA;
       c9ynA: // global
           R1 = _s9y41::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ynC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y41::P64;
           _s9y3C::P64 = P64[_s9y41::P64 + 16];
           _s9y3D::P64 = P64[_s9y41::P64 + 24];
           _s9y3E::P64 = P64[_s9y41::P64 + 32];
           I64[Hp - 24] = sat_s9y40_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R4 = Hp - 24;
           R3 = _s9y3C::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y42_entry() //  [R1]
         { info_tbl: [(c9ynE,
                       label: sat_s9y42_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ynE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9ynI; else goto c9ynH;
       c9ynI: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ynH: // global
           _s9y3C::P64 = P64[R1 + 16];
           _s9y3D::P64 = P64[R1 + 24];
           _s9y3E::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9y41_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y43_entry() //  [R1]
         { info_tbl: [(c9ynJ,
                       label: sat_s9y43_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ynJ: // global
           _s9y43::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ynK; else goto c9ynL;
       c9ynL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9ynN; else goto c9ynM;
       c9ynN: // global
           HpAlloc = 40;
           goto c9ynK;
       c9ynK: // global
           R1 = _s9y43::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ynM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y43::P64;
           _s9y3C::P64 = P64[_s9y43::P64 + 16];
           _s9y3D::P64 = P64[_s9y43::P64 + 24];
           _s9y3E::P64 = P64[_s9y43::P64 + 32];
           I64[Hp - 32] = sat_s9y42_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9ynR,
                       label: GHC.Event.EPoll.$w$cshowsPrec1_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [True, False, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ynR: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c9ynV; else goto c9ynU;
       c9ynV: // global
           HpAlloc = 64;
           R1 = GHC.Event.EPoll.$w$cshowsPrec1_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c9ynU: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9ynP; else goto c9ynQ;
       c9ynP: // global
           I64[Hp - 56] = sat_s9y3Q_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           _c9ylv::P64 = Hp - 56;
           Hp = Hp - 24;
           R3 = _c9ylv::P64;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9ynQ: // global
           I64[Hp - 56] = sat_s9y43_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.353135144 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yo4,
                       label: GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yo4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9yo8; else goto c9yo9;
       c9yo8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yo9: // global
           I64[Sp - 24] = block_c9yo1_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yoh; else goto c9yo2;
       u9yoh: // global
           call _c9yo1(R1) args: 0, res: 0, upd: 0;
       c9yo2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yo1() //  [R1]
         { info_tbl: [(c9yo1,
                       label: block_c9yo1_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yo1: // global
           I64[Sp] = block_c9yo7_info;
           _s9y48::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y48::I64;
           if (R1 & 7 != 0) goto u9yog; else goto c9yob;
       u9yog: // global
           call _c9yo7(R1) args: 0, res: 0, upd: 0;
       c9yob: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yo7() //  [R1]
         { info_tbl: [(c9yo7,
                       label: block_c9yo7_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yo7: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.354387811 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent8_closure" {
     GHC.Event.EPoll.$fShowEvent8_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.355210146 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshow_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshow_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshow_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshow_entry() //  [R2]
         { info_tbl: [(c9yop,
                       label: GHC.Event.EPoll.$fShowEvent_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yop: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yoq; else goto c9yor;
       c9yoq: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yor: // global
           I64[Sp - 8] = block_c9yom_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yov; else goto c9yon;
       u9yov: // global
           call _c9yom(R1) args: 0, res: 0, upd: 0;
       c9yon: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yom() //  [R1]
         { info_tbl: [(c9yom,
                       label: block_c9yom_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yom: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.356425215 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent1_closure" {
     GHC.Event.EPoll.$fShowEvent1_closure:
         const GHC.Event.EPoll.$fShowEvent1_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent1_entry() //  [R2, R3]
         { info_tbl: [(c9yoD,
                       label: GHC.Event.EPoll.$fShowEvent1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yoD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yoE; else goto c9yoF;
       c9yoE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yoF: // global
           I64[Sp - 16] = block_c9yoA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9yoJ; else goto c9yoB;
       u9yoJ: // global
           call _c9yoA(R1) args: 0, res: 0, upd: 0;
       c9yoB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yoA() //  [R1]
         { info_tbl: [(c9yoA,
                       label: block_c9yoA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yoA: // global
           R5 = P64[Sp + 8];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.357573446 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowList_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9yoO,
                       label: GHC.Event.EPoll.$fShowEvent_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yoO: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEvent1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.358330379 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_closure" {
     GHC.Event.EPoll.$fShowEvent_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEvent_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.358950433 UTC

[section ""data" . GHC.Event.EPoll.$fFiniteBitsEventType_closure" {
     GHC.Event.EPoll.$fFiniteBitsEventType_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const GHC.Event.EPoll.$fBitsEventType_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.3595862 UTC

[section ""data" . GHC.Event.EPoll.$fNumEventType_closure" {
     GHC.Event.EPoll.$fNumEventType_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Word.$fNumWord32_$c+_closure+2;
         const GHC.Word.$fNumWord32_$c-_closure+2;
         const GHC.Word.$fNumWord32_$c*_closure+2;
         const GHC.Word.$fNumWord32_$cnegate_closure+1;
         const GHC.Word.$fNumWord32_$cabs_closure+1;
         const GHC.Word.$fNumWord32_$csignum_closure+1;
         const GHC.Word.$fNumWord32_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.360217548 UTC

[section ""data" . GHC.Event.EPoll.$fEqEPollFd_closure" {
     GHC.Event.EPoll.$fEqEPollFd_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Int.eqInt32_closure+2;
         const GHC.Int.neInt32_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.360821368 UTC

[section ""cstring" . lvl_r9y01_bytes" {
     lvl_r9y01_bytes:
         I8[] [101,112,111,108,108,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.361590933 UTC

[section ""data" . lvl1_r9y02_closure" {
     lvl1_r9y02_closure:
         const lvl1_r9y02_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9y02_entry() //  [R1]
         { info_tbl: [(c9yoX,
                       label: lvl1_r9y02_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yoX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yoY; else goto c9yoZ;
       c9yoY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yoZ: // global
           (_c9yoU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9yoU::I64 == 0) goto c9yoW; else goto c9yoV;
       c9yoW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9yoV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9yoU::I64;
           R2 = lvl_r9y01_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.362638019 UTC

[section ""data" . GHC.Event.EPoll.new6_closure" {
     GHC.Event.EPoll.new6_closure:
         const GHC.Event.EPoll.new6_info;
         const 0;
 },
 GHC.Event.EPoll.new6_entry() //  [R2]
         { info_tbl: [(c9yp6,
                       label: GHC.Event.EPoll.new6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yp6: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_r9y02_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.363365738 UTC

[section ""cstring" . lvl2_r9y03_bytes" {
     lvl2_r9y03_bytes:
         I8[] [101,112,111,108,108,87,97,105,116,78,111,110,66,108,111,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.364090274 UTC

[section ""data" . lvl3_r9y04_closure" {
     lvl3_r9y04_closure:
         const lvl3_r9y04_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r9y04_entry() //  [R1]
         { info_tbl: [(c9ypf,
                       label: lvl3_r9y04_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ypf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9ypg; else goto c9yph;
       c9ypg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yph: // global
           (_c9ypc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9ypc::I64 == 0) goto c9ype; else goto c9ypd;
       c9ype: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9ypd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9ypc::I64;
           R2 = lvl2_r9y03_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.364975873 UTC

[section ""cstring" . lvl4_r9y05_bytes" {
     lvl4_r9y05_bytes:
         I8[] [101,112,111,108,108,87,97,105,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.365976913 UTC

[section ""data" . lvl5_r9y06_closure" {
     lvl5_r9y06_closure:
         const lvl5_r9y06_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r9y06_entry() //  [R1]
         { info_tbl: [(c9ypo,
                       label: lvl5_r9y06_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ypo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9ypp; else goto c9ypq;
       c9ypp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ypq: // global
           (_c9ypl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9ypl::I64 == 0) goto c9ypn; else goto c9ypm;
       c9ypn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9ypm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9ypl::I64;
           R2 = lvl4_r9y05_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.3668603 UTC

[section ""cstring" . GHC.Event.EPoll.new8_bytes" {
     GHC.Event.EPoll.new8_bytes:
         I8[] [109,111,100,105,102,121,70,100,79,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.367551206 UTC

[section ""data" . GHC.Event.EPoll.new7_closure" {
     GHC.Event.EPoll.new7_closure:
         const GHC.Event.EPoll.new7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new7_entry() //  [R1]
         { info_tbl: [(c9ypx,
                       label: GHC.Event.EPoll.new7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ypx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9ypy; else goto c9ypz;
       c9ypy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ypz: // global
           (_c9ypu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9ypu::I64 == 0) goto c9ypw; else goto c9ypv;
       c9ypw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9ypv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9ypu::I64;
           R2 = GHC.Event.EPoll.new8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.368458529 UTC

[section ""data" . lvl6_r9y07_closure" {
     lvl6_r9y07_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.369025061 UTC

[section ""data" . lvl7_r9y08_closure" {
     lvl7_r9y08_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.369600209 UTC

[section ""data" . lvl8_r9y09_closure" {
     lvl8_r9y09_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.375027547 UTC

[section ""data" . GHC.Event.EPoll.new10_closure" {
     GHC.Event.EPoll.new10_closure:
         const GHC.Event.EPoll.new10_info;
         const 0;
 },
 sat_s9y6v_entry() //  [R1]
         { info_tbl: [(c9yqJ,
                       label: sat_s9y6v_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yqJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yqK; else goto c9yrp;
       c9yqK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yrp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s9y6m::I64 = I64[R1 + 16];
           if (_s9y6m::I64 & 25 == 0) goto c9yqI; else goto c9yqH;
       c9yqI: // global
           if (_s9y6m::I64 & 28 == 0) goto c9yrl; else goto c9yrf;
       c9yrl: // global
           R1 = GHC.Event.EPoll.$fShowEvent8_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9yrf: // global
           R1 = lvl8_r9y09_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9yqH: // global
           if (_s9y6m::I64 & 28 == 0) goto c9yr1; else goto c9yqV;
       c9yr1: // global
           R1 = lvl7_r9y08_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9yqV: // global
           R1 = lvl6_r9y07_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.new10_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yrq,
                       label: GHC.Event.EPoll.new10_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yrq: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9yrr; else goto c9yrs;
       c9yrr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new10_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yrs: // global
           I64[Sp - 24] = block_c9ypE_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yxu; else goto c9ypF;
       u9yxu: // global
           call _c9ypE(R1) args: 0, res: 0, upd: 0;
       c9ypF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ypE() //  [R1]
         { info_tbl: [(c9ypE,
                       label: block_c9ypE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ypE: // global
           I64[Sp - 16] = block_c9ypJ_info;
           _s9y4w::P64 = P64[R1 + 7];
           _s9y4v::I64 = I64[R1 + 15];
           R1 = P64[_s9y4w::P64 + 8];
           P64[Sp - 8] = _s9y4w::P64;
           I64[Sp] = _s9y4v::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9yxl; else goto c9ypK;
       u9yxl: // global
           call _c9ypJ(R1) args: 0, res: 0, upd: 0;
       c9ypK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ypJ() //  [R1]
         { info_tbl: [(c9ypJ,
                       label: block_c9ypJ_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ypJ: // global
           I64[Sp - 8] = block_c9ypO_info;
           _s9y4D::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9y4D::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yxm; else goto c9ypP;
       u9yxm: // global
           call _c9ypO(R1) args: 0, res: 0, upd: 0;
       c9ypP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ypO() //  [R1]
         { info_tbl: [(c9ypO,
                       label: block_c9ypO_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ypO: // global
           I64[Sp - 16] = block_c9yrv_info;
           _s9y4E::P64 = R1;
           _s9y4G::P64 = P64[R1 + 7];
           _s9y4F::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _s9y4G::P64;
           I64[Sp] = _s9y4F::I64;
           P64[Sp + 32] = _s9y4E::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9yxn; else goto c9yuG;
       u9yxn: // global
           call _c9yrv(R1) args: 0, res: 0, upd: 0;
       c9yuG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yrv() //  [R1]
         { info_tbl: [(c9yrv,
                       label: block_c9yrv_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yrv: // global
           if (R1 & 7 == 1) goto c9yvy; else goto c9ywB;
       c9yvy: // global
           (_s9y6F::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(I64[Sp + 40], I64[Sp + 16], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 24])), 0);
           _s9y6G::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y6F::I64));
           if (_s9y6G::I64 != (-1)) goto c9yuY; else goto c9yv4;
       c9yuY: // global
           I64[Sp + 40] = _s9y6G::I64;
           Sp = Sp + 8;
           call _c9ypW() args: 0, res: 0, upd: 0;
       c9yv4: // global
           (_s9y6K::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y6K::I64) == 4 :: W32) goto u9yx4; else goto c9yvj;
       u9yx4: // global
           Sp = Sp + 8;
           call _c9ywx() args: 0, res: 0, upd: 0;
       c9yvj: // global
           I64[Sp] = block_c9yvf_info;
           R2 = lvl3_r9y04_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       c9ywB: // global
           I64[Sp] = block_c9yvD_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u9yxv; else goto c9ywC;
       u9yxv: // global
           call _c9yvD(R1) args: 0, res: 0, upd: 0;
       c9ywC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yvf() //  [R1]
         { info_tbl: [(c9yvf,
                       label: block_c9yvf_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yvf: // global
           I64[Sp] = block_c9yvh_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9yxB; else goto c9yvm;
       u9yxB: // global
           call _c9yvh(R1) args: 0, res: 0, upd: 0;
       c9yvm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yvh() //  [R1]
         { info_tbl: [(c9yvh,
                       label: block_c9yvh_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yvh: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9ypW() args: 0, res: 0, upd: 0;
     }
 },
 _c9yvD() //  [R1]
         { info_tbl: [(c9yvD,
                       label: block_c9yvD_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yvD: // global
           _s9y4v::I64 = I64[Sp + 40];
           _s9y4D::I64 = I64[Sp + 24];
           _s9y4F::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c9ywI; else goto c9ywM;
       c9ywI: // global
           _s9y6T::I64 = (I64[R1 + 7] + 999999) / 1000000;
           goto s9y6S;
       c9ywM: // global
           _s9y6T::I64 = (-1);
           goto s9y6S;
       s9y6S: // global
           I64[Sp] = block_c9yvU_info;
           _u9yxd::P64 = CurrentTSO;
           I64[I64[_u9yxd::P64 + 24] + 16] = Sp;
           _u9yxe::I64 = CurrentNursery;
           P64[_u9yxe::I64 + 8] = Hp + 8;
           I64[_u9yxd::P64 + 104] = I64[_u9yxd::P64 + 104] - ((Hp + 8) - I64[_u9yxe::I64]);
           (_u9yxb::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_s9y6Z::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(_s9y4v::I64, _s9y4F::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y4D::I64)), %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y6T::I64)));
           (_u9yxc::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_u9yxb::I64);
           BaseReg = _u9yxc::I64;
           _u9yxf::P64 = CurrentTSO;
           _u9yxg::P64 = I64[_u9yxf::P64 + 24];
           Sp = I64[_u9yxg::P64 + 16];
           SpLim = _u9yxg::P64 + 192;
           HpAlloc = 0;
           _u9yxh::I64 = CurrentNursery;
           _u9yxi::I64 = I64[_u9yxh::I64 + 8];
           Hp = _u9yxi::I64 - 8;
           _u9yxj::I64 = I64[_u9yxh::I64];
           HpLim = _u9yxj::I64 + ((%MO_SS_Conv_W32_W64(I32[_u9yxh::I64 + 48]) << 12) - 1);
           I64[_u9yxf::P64 + 104] = I64[_u9yxf::P64 + 104] + (_u9yxi::I64 - _u9yxj::I64);
           R1 = _s9y6Z::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yvU() //  [R1]
         { info_tbl: [(c9yvU,
                       label: block_c9yvU_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yvU: // global
           _s9y70::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R1));
           if (_s9y70::I64 != (-1)) goto c9yw2; else goto c9yw8;
       c9yw2: // global
           I64[Sp + 40] = _s9y70::I64;
           Sp = Sp + 8;
           call _c9ypW() args: 0, res: 0, upd: 0;
       c9yw8: // global
           (_s9y74::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y74::I64) == 4 :: W32) goto u9yx1; else goto c9ywn;
       u9yx1: // global
           Sp = Sp + 8;
           call _c9ywx() args: 0, res: 0, upd: 0;
       c9ywn: // global
           I64[Sp] = block_c9ywj_info;
           R2 = lvl5_r9y06_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9ywx() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ywx: // global
           I64[Sp + 32] = 0;
           call _c9ypW() args: 0, res: 0, upd: 0;
     }
 },
 _c9ywj() //  [R1]
         { info_tbl: [(c9ywj,
                       label: block_c9ywj_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ywj: // global
           I64[Sp] = block_c9ywl_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9yxF; else goto c9ywq;
       u9yxF: // global
           call _c9ywl(R1) args: 0, res: 0, upd: 0;
       c9ywq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ywl() //  [R1]
         { info_tbl: [(c9ywl,
                       label: block_c9ywl_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ywl: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9ypW() args: 0, res: 0, upd: 0;
     }
 },
 _c9ypW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ypW: // global
           Hp = Hp + 48;
           _s9y4J::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c9yrz; else goto c9yry;
       c9yrz: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_c9ypV_info;
           R1 = _s9y4J::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9yry: // global
           _s9y4w::P64 = P64[Sp + 24];
           _s9y4D::I64 = I64[Sp + 16];
           _s9y4E::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = _s9y4E::P64;
           I64[Hp - 24] = _s9y4J::I64;
           I64[Hp - 16] = _s9y4D::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           if (%MO_S_Le_W64(_s9y4J::I64, 0)) goto c9yrC; else goto c9yrD;
       c9yrC: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yrD: // global
           _s9y4R::P64 = P64[_s9y4w::P64 + 8];
           Hp = Hp - 16;
           I64[Sp + 16] = block_c9yq7_info;
           R1 = _s9y4R::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9yxp; else goto c9yq8;
       u9yxp: // global
           call _c9yq7(R1) args: 0, res: 0, upd: 0;
       c9yq8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ypV() //  [R1]
         { info_tbl: [(c9ypV,
                       label: block_c9ypV_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ypV: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c9ypW() args: 0, res: 0, upd: 0;
     }
 },
 _c9yq7() //  [R1]
         { info_tbl: [(c9yq7,
                       label: block_c9yq7_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yq7: // global
           I64[Sp] = block_c9yqc_info;
           _s9y4U::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp + 24] = _s9y4U::I64;
           if (R1 & 7 != 0) goto u9yxq; else goto c9yqd;
       u9yxq: // global
           call _c9yqc(R1) args: 0, res: 0, upd: 0;
       c9yqd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yqc() //  [R1]
         { info_tbl: [(c9yqc,
                       label: block_c9yqc_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yqc: // global
           I64[Sp - 16] = I64[Sp + 24] * 12;
           I64[Sp - 8] = 0;
           P64[Sp] = P64[R1 + 7];
           I64[Sp + 24] = I64[R1 + 15];
           Sp = Sp - 16;
           call _c9yqp() args: 0, res: 0, upd: 0;
     }
 },
 _c9yqp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yqp: // global
           Hp = Hp + 40;
           _s9y6g::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c9yuy; else goto c9yux;
       c9yuy: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c9yqo_info;
           R1 = _s9y6g::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9yux: // global
           if (%MO_S_Lt_W64(_s9y6g::I64,
                            I64[Sp])) goto c9yuC; else goto c9yuF;
       c9yuC: // global
           _s9y6j::I64 = I64[Sp + 40] + _s9y6g::I64;
           _s9y6m::I64 = %MO_UU_Conv_W32_W64(I32[_s9y6j::I64]);
           _s9y6q::I64 = %MO_SS_Conv_W32_W64(I32[_s9y6j::I64 + 4]);
           I64[Hp - 32] = sat_s9y6v_info;
           I64[Hp - 16] = _s9y6m::I64;
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9y6q::I64;
           I64[Sp - 8] = block_c9yuA_info;
           R3 = Hp - 32;
           R2 = Hp - 7;
           R1 = P64[Sp + 48];
           Sp = Sp - 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       c9yuF: // global
           Hp = Hp - 40;
           _s9y4w::P64 = P64[Sp + 24];
           call MO_Touch(P64[Sp + 16]);
           I64[Sp + 16] = block_c9yrK_info;
           R1 = P64[_s9y4w::P64 + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9yxt; else goto c9yrM;
       u9yxt: // global
           call _c9yrK(R1) args: 0, res: 0, upd: 0;
       c9yrM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yqo() //  [R1]
         { info_tbl: [(c9yqo,
                       label: block_c9yqo_info
                       rep:StackRep [True, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yqo: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c9yqp() args: 0, res: 0, upd: 0;
     }
 },
 _c9yuA() //  []
         { info_tbl: [(c9yuA,
                       label: block_c9yuA_info
                       rep:StackRep [True, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yuA: // global
           I64[Sp + 16] = I64[Sp + 16] + 12;
           Sp = Sp + 8;
           call _c9yqp() args: 0, res: 0, upd: 0;
     }
 },
 _c9yrK() //  [R1]
         { info_tbl: [(c9yrK,
                       label: block_c9yrK_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yrK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9yrS; else goto c9yrR;
       c9yrS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yrR: // global
           _s9y4J::I64 = I64[Sp + 16];
           _s9y59::I64 = I64[R1 + 23];
           if (_s9y59::I64 == _s9y4J::I64) goto c9ys6; else goto c9yrY;
       c9ys6: // global
           Hp = Hp - 16;
           _s9y5e::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_c9ys0_info;
           R1 = _s9y5e::P64;
           I64[Sp + 32] = _s9y59::I64;
           if (R1 & 7 != 0) goto u9yxy; else goto c9ys1;
       u9yxy: // global
           call _c9ys0(R1) args: 0, res: 0, upd: 0;
       c9ys1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9yrY: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9ys0() //  [R1]
         { info_tbl: [(c9ys0,
                       label: block_c9ys0_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ys0: // global
           I64[Sp - 8] = block_c9ys5_info;
           _s9y5h::I64 = I64[R1 + 15];
           _s9y5i::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9y5i::I64;
           I64[Sp + 24] = _s9y5h::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yxz; else goto c9ys8;
       u9yxz: // global
           call _c9ys5(R1) args: 0, res: 0, upd: 0;
       c9ys8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ys5() //  [R1]
         { info_tbl: [(c9ys5,
                       label: block_c9ys5_info
                       rep:StackRep [True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ys5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9yse; else goto c9ysd;
       c9yse: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9ysd: // global
           _s9y5m::I64 = I64[Sp + 40] << 1;
           if (%MO_S_Le_W64(_s9y5m::I64,
                            I64[Sp + 8])) goto c9ysn; else goto c9yuv;
       c9ysn: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yuv: // global
           _s9y5p::I64 = _s9y5m::I64 - 1;
           _s9y5q::I64 = _s9y5p::I64 | %MO_S_Shr_W64(_s9y5p::I64, 1);
           _s9y5s::I64 = _s9y5q::I64 | %MO_S_Shr_W64(_s9y5q::I64, 2);
           _s9y5u::I64 = _s9y5s::I64 | %MO_S_Shr_W64(_s9y5s::I64, 4);
           _s9y5w::I64 = _s9y5u::I64 | %MO_S_Shr_W64(_s9y5u::I64, 8);
           _s9y5y::I64 = _s9y5w::I64 | %MO_S_Shr_W64(_s9y5w::I64, 16);
           _s9y5A::I64 = _s9y5y::I64 | %MO_S_Shr_W64(_s9y5y::I64, 32) + 1;
           _s9y5D::I64 = _s9y5A::I64 * 12;
           if (%MO_S_Ge_W64(_s9y5D::I64, 0)) goto c9ytd; else goto c9yuu;
       c9ytd: // global
           _s9y5l::P64 = P64[R1 + 7];
           _s9y5k::I64 = I64[R1 + 15];
           Hp = Hp - 16;
           I64[Sp - 16] = block_c9ytb_info;
           R1 = _s9y5D::I64;
           I64[Sp - 8] = _s9y5A::I64;
           P64[Sp] = _s9y5l::P64;
           I64[Sp + 40] = _s9y5k::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c9yuu: // global
           Hp = Hp - 16;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9ytb() //  [R1]
         { info_tbl: [(c9ytb,
                       label: block_c9ytb_info
                       rep:StackRep [True, False, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ytb: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c9yth; else goto c9ytg;
       c9yth: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9ytg: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 72] = R1;
           _s9y4w::P64 = P64[Sp + 32];
           _s9y4J::I64 = I64[Sp + 40];
           _s9y5h::I64 = I64[Sp + 48];
           _s9y5i::I64 = I64[Sp + 24];
           _s9y5k::I64 = I64[Sp + 56];
           _s9y5l::P64 = P64[Sp + 16];
           _s9y5A::I64 = I64[Sp + 8];
           _s9y5I::I64 = R1 + 16;
           _c9ytl::P64 = Hp - 77;
           if (_s9y5k::I64 == 0) goto c9yut; else goto c9yuc;
       c9yut: // global
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9yuk; else goto c9yus;
       c9yuk: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9yui::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9yui::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yus: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9ytl::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yuc: // global
           if (%MO_S_Le_W64(_s9y5i::I64, 0)) goto c9ytI; else goto c9yua;
       c9ytI: // global
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9yty; else goto c9ytG;
       c9yty: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9ytw::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9ytw::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9ytG: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9ytl::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yua: // global
           (_s9y5Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s9y5I::I64, _s9y5k::I64, _s9y5i::I64 * 12);
           call MO_Touch(_c9ytl::P64);
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9yu1; else goto c9yu9;
       c9yu1: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9ytZ::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9ytZ::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yu9: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9ytl::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.385264959 UTC

[section ""data" . GHC.Event.EPoll.new9_closure" {
     GHC.Event.EPoll.new9_closure:
         const GHC.Event.EPoll.new9_info;
         const 0;
 },
 GHC.Event.EPoll.new9_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9yxR,
                       label: GHC.Event.EPoll.new9_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yxR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9yxS; else goto c9yxT;
       c9yxS: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new9_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yxT: // global
           I64[Sp - 40] = block_c9yxM_info;
           _s9y7h::P64 = R2;
           R2 = 4;
           R1 = 12;
           P64[Sp - 32] = _s9y7h::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yxM() //  [R1]
         { info_tbl: [(c9yxM,
                       label: block_c9yxM_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yxM: // global
           I64[Sp] = block_c9yxO_info;
           _s9y7r::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _s9y7r::P64;
           if (R1 & 7 != 0) goto u9yzM; else goto c9yxP;
       u9yzM: // global
           call _c9yxO(R1) args: 0, res: 0, upd: 0;
       c9yxP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yxO() //  [R1]
         { info_tbl: [(c9yxO,
                       label: block_c9yxO_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yxO: // global
           _s9y7i::P64 = P64[Sp + 16];
           _s9y7r::P64 = P64[Sp + 32];
           _s9y7t::I64 = I64[R1 + 7];
           if (_s9y7t::I64 & 1 == 0) goto c9yzr; else goto c9yz6;
       c9yzr: // global
           if (_s9y7t::I64 & 2 == 0) goto c9yzG; else goto c9yzA;
       c9yzG: // global
           _s9y7v::I64 = 0;
           goto s9y7u;
       c9yzA: // global
           _s9y7v::I64 = 4;
           goto s9y7u;
       c9yz6: // global
           if (_s9y7t::I64 & 2 == 0) goto c9yzl; else goto c9yzf;
       c9yzl: // global
           _s9y7v::I64 = 1;
           goto s9y7u;
       c9yzf: // global
           _s9y7v::I64 = 5;
           goto s9y7u;
       s9y7u: // global
           _s9y7w::I64 = _s9y7r::P64 + 16;
           I32[_s9y7w::I64] = %MO_UU_Conv_W64_W32(_s9y7v::I64);
           I64[Sp - 8] = block_c9yy6_info;
           R1 = _s9y7i::P64;
           I64[Sp] = _s9y7w::I64;
           I64[Sp + 16] = _s9y7t::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yzN; else goto c9yy7;
       u9yzN: // global
           call _c9yy6(R1) args: 0, res: 0, upd: 0;
       c9yy7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yy6() //  [R1]
         { info_tbl: [(c9yy6,
                       label: block_c9yy6_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yy6: // global
           _s9y7h::P64 = P64[Sp + 16];
           _s9y7z::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9y7z::I64);
           I64[Sp] = block_c9yye_info;
           R1 = _s9y7h::P64;
           I64[Sp + 16] = _s9y7z::I64;
           if (R1 & 7 != 0) goto u9yzO; else goto c9yyf;
       u9yzO: // global
           call _c9yye(R1) args: 0, res: 0, upd: 0;
       c9yyf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yye() //  [R1]
         { info_tbl: [(c9yye,
                       label: block_c9yye_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yye: // global
           I64[Sp] = block_c9yyj_info;
           _s9y7D::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s9y7D::I64;
           if (R1 & 7 != 0) goto u9yzP; else goto c9yyn;
       u9yzP: // global
           call _c9yyj(R1) args: 0, res: 0, upd: 0;
       c9yyn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yyj() //  [R1]
         { info_tbl: [(c9yyj,
                       label: block_c9yyj_info
                       rep:StackRep [True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yyj: // global
           _s9y7r::P64 = P64[Sp + 40];
           _s9y7w::I64 = I64[Sp + 8];
           _s9y7z::I64 = I64[Sp + 16];
           _s9y7D::I64 = I64[Sp + 32];
           if (I64[R1 + 7] == 0) goto c9yz0; else goto c9yyZ;
       c9yz0: // global
           _s9y7I::I64 = 1;
           goto s9y7H;
       c9yyZ: // global
           if (I64[Sp + 24] == 0) goto c9yyX; else goto c9yyW;
       c9yyX: // global
           _s9y7I::I64 = 2;
           goto s9y7H;
       c9yyW: // global
           _s9y7I::I64 = 3;
           goto s9y7H;
       s9y7H: // global
           (_s9y7M::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y7D::I64, _s9y7I::I64, _s9y7z::I64, _s9y7w::I64);
           if (%MO_SS_Conv_W64_W32(_s9y7M::I64) == (-1) :: W32) goto c9yyO; else goto c9yyI;
       c9yyO: // global
           (_s9y7S::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y7S::I64;
           Sp = Sp + 48;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9yyI: // global
           call MO_Touch(_s9y7r::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.38890954 UTC

[section ""data" . GHC.Event.EPoll.new5_closure" {
     GHC.Event.EPoll.new5_closure:
         const GHC.Event.EPoll.new5_info;
         const 0;
 },
 GHC.Event.EPoll.new5_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yzX,
                       label: GHC.Event.EPoll.new5_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yzX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9yzY; else goto c9yzZ;
       c9yzY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yzZ: // global
           I64[Sp - 24] = block_c9yzU_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yCm; else goto c9yzV;
       u9yCm: // global
           call _c9yzU(R1) args: 0, res: 0, upd: 0;
       c9yzV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yzU() //  [R1]
         { info_tbl: [(c9yzU,
                       label: block_c9yzU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yzU: // global
           _s9y84::I64 = I64[R1 + 7];
           if (_s9y84::I64 & 1 == 0) goto c9yC1; else goto c9yBG;
       c9yC1: // global
           if (_s9y84::I64 & 2 == 0) goto c9yCg; else goto c9yCa;
       c9yCg: // global
           _s9y86::I64 = 0;
           goto s9y85;
       c9yCa: // global
           _s9y86::I64 = 4;
           goto s9y85;
       c9yBG: // global
           if (_s9y84::I64 & 2 == 0) goto c9yBV; else goto c9yBP;
       c9yBV: // global
           _s9y86::I64 = 1;
           goto s9y85;
       c9yBP: // global
           _s9y86::I64 = 5;
           goto s9y85;
       s9y85: // global
           I64[Sp - 8] = block_c9yA8_info;
           R2 = 4;
           R1 = 12;
           I64[Sp] = _s9y86::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yA8() //  [R1]
         { info_tbl: [(c9yA8,
                       label: block_c9yA8_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yA8: // global
           _s9y80::P64 = P64[Sp + 24];
           _s9y8d::I64 = I64[Sp + 8] | 1073741824;
           _s9y8e::I64 = R1 + 16;
           I32[_s9y8e::I64] = %MO_UU_Conv_W64_W32(_s9y8d::I64);
           I64[Sp - 8] = block_c9yAg_info;
           _s9y8c::P64 = R1;
           R1 = _s9y80::P64;
           I64[Sp] = _s9y8e::I64;
           I64[Sp + 8] = _s9y8d::I64;
           P64[Sp + 24] = _s9y8c::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yCn; else goto c9yAh;
       u9yCn: // global
           call _c9yAg(R1) args: 0, res: 0, upd: 0;
       c9yAh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yAg() //  [R1]
         { info_tbl: [(c9yAg,
                       label: block_c9yAg_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yAg: // global
           _s9y7Z::P64 = P64[Sp + 24];
           _s9y8h::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9y8h::I64);
           I64[Sp] = block_c9yAo_info;
           R1 = _s9y7Z::P64;
           I64[Sp + 24] = _s9y8h::I64;
           if (R1 & 7 != 0) goto u9yCo; else goto c9yAs;
       u9yCo: // global
           call _c9yAo(R1) args: 0, res: 0, upd: 0;
       c9yAs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yAo() //  [R1]
         { info_tbl: [(c9yAo,
                       label: block_c9yAo_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yAo: // global
           _s9y8c::P64 = P64[Sp + 32];
           _s9y8l::I64 = I64[R1 + 15];
           (_s9y8q::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y8l::I64, 3, I64[Sp + 24], I64[Sp + 8]);
           call MO_Touch(_s9y8c::P64);
           if (%MO_SS_Conv_W64_W32(_s9y8q::I64) == 0 :: W32) goto c9yBx; else goto c9yAI;
       c9yBx: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yAI: // global
           (_s9y8w::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y8w::I64) == 2 :: W32) goto c9yB1; else goto c9yAS;
       c9yB1: // global
           I64[Sp + 8] = block_c9yB0_info;
           R2 = 4;
           R1 = 12;
           I64[Sp + 32] = _s9y8l::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c9yAS: // global
           R2 = GHC.Event.EPoll.new7_closure;
           Sp = Sp + 40;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9yB0() //  [R1]
         { info_tbl: [(c9yB0,
                       label: block_c9yB0_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yB0: // global
           _s9y8h::I64 = I64[Sp + 16];
           _s9y8l::I64 = I64[Sp + 24];
           _s9y8E::I64 = R1 + 16;
           I32[_s9y8E::I64] = %MO_UU_Conv_W64_W32(I64[Sp + 8]);
           I32[_s9y8E::I64 + 4] = %MO_UU_Conv_W64_W32(_s9y8h::I64);
           (_s9y8L::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y8l::I64, 1, _s9y8h::I64, _s9y8E::I64);
           if (%MO_SS_Conv_W64_W32(_s9y8L::I64) == (-1) :: W32) goto c9yBr; else goto c9yBl;
       c9yBr: // global
           (_s9y8R::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y8R::I64;
           Sp = Sp + 32;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9yBl: // global
           call MO_Touch(R1);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.391957366 UTC

[section ""data" . GHC.Event.EPoll.new4_closure" {
     GHC.Event.EPoll.new4_closure:
         const GHC.Event.EPoll.new4_info;
 },
 GHC.Event.EPoll.new4_entry() //  [R2]
         { info_tbl: [(c9yCw,
                       label: GHC.Event.EPoll.new4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yCw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yCx; else goto c9yCy;
       c9yCx: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.new4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yCy: // global
           I64[Sp - 8] = block_c9yCt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yCE; else goto c9yCu;
       u9yCE: // global
           call _c9yCt(R1) args: 0, res: 0, upd: 0;
       c9yCu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yCt() //  [R1]
         { info_tbl: [(c9yCt,
                       label: block_c9yCt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yCt: // global
           (_s9y94::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(I64[R1 + 15]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.393593909 UTC

[section ""data" . GHC.Event.EPoll.$w$j_closure" {
     GHC.Event.EPoll.$w$j_closure:
         const GHC.Event.EPoll.$w$j_info;
         const 0;
 },
 GHC.Event.EPoll.$w$j_entry() //  [R2]
         { info_tbl: [(c9yCN,
                       label: GHC.Event.EPoll.$w$j_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yCN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yCO; else goto c9yCP;
       c9yCO: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$j_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yCP: // global
           (_s9y9a::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfd();
           (_s9y9e::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_fd_cloexec();
           (_s9y9j::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(R2, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y9a::I64)), _s9y9e::I64);
           if (%MO_SS_Conv_W64_W32(_s9y9j::I64) == (-1) :: W32) goto c9yDo; else goto c9yDe;
       c9yDo: // global
           (_s9y9A::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y9A::I64;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       c9yDe: // global
           I64[Sp - 16] = block_c9yD1_info;
           R1 = 768;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yD1() //  [R1]
         { info_tbl: [(c9yD1,
                       label: block_c9yD1_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yD1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9yDi; else goto c9yDh;
       c9yDi: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yDh: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 61;
           P64[Hp - 32] = R1 + 16;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 64;
           I64[Sp] = block_c9yD9_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yD9() //  [R1]
         { info_tbl: [(c9yD9,
                       label: block_c9yD9_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yD9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9yDl; else goto c9yDk;
       c9yDl: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yDk: // global
           I64[Hp - 64] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.Event.Internal.Backend_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = GHC.Event.EPoll.new10_closure+4;
           P64[Hp - 16] = GHC.Event.EPoll.new9_closure+5;
           P64[Hp - 8] = GHC.Event.EPoll.new5_closure+4;
           P64[Hp] = GHC.Event.EPoll.new4_closure+2;
           R1 = Hp - 39;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.395278851 UTC

[section ""cstring" . GHC.Event.EPoll.new3_bytes" {
     GHC.Event.EPoll.new3_bytes:
         I8[] [101,112,111,108,108,67,114,101,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.396050125 UTC

[section ""data" . GHC.Event.EPoll.new2_closure" {
     GHC.Event.EPoll.new2_closure:
         const GHC.Event.EPoll.new2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new2_entry() //  [R1]
         { info_tbl: [(c9yDz,
                       label: GHC.Event.EPoll.new2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yDz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yDA; else goto c9yDB;
       c9yDA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yDB: // global
           (_c9yDw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9yDw::I64 == 0) goto c9yDy; else goto c9yDx;
       c9yDy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9yDx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9yDw::I64;
           R2 = GHC.Event.EPoll.new3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.397258007 UTC

[section ""data" . GHC.Event.EPoll.new1_closure" {
     GHC.Event.EPoll.new1_closure:
         const GHC.Event.EPoll.new1_info;
         const 0;
 },
 GHC.Event.EPoll.new1_entry() //  []
         { info_tbl: [(c9yDN,
                       label: GHC.Event.EPoll.new1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yDN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yDO; else goto c9yDP;
       c9yDO: // global
           R1 = GHC.Event.EPoll.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9yDP: // global
           (_s9y9G::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] epoll_create(256);
           _s9y9H::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y9G::I64));
           if (_s9y9H::I64 != (-1)) goto c9yDL; else goto c9yDM;
       c9yDL: // global
           R2 = _s9y9H::I64;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
       c9yDM: // global
           I64[Sp - 8] = block_c9yDZ_info;
           R2 = GHC.Event.EPoll.new2_closure;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9yDZ() //  [R1]
         { info_tbl: [(c9yDZ,
                       label: block_c9yDZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yDZ: // global
           I64[Sp] = block_c9yE1_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9yE9; else goto c9yE4;
       u9yE9: // global
           call _c9yE1(R1) args: 0, res: 0, upd: 0;
       c9yE4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yE1() //  [R1]
         { info_tbl: [(c9yE1,
                       label: block_c9yE1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yE1: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.398592074 UTC

[section ""data" . GHC.Event.EPoll.new_closure" {
     GHC.Event.EPoll.new_closure:
         const GHC.Event.EPoll.new_info;
         const 0;
 },
 GHC.Event.EPoll.new_entry() //  []
         { info_tbl: [(c9yEe,
                       label: GHC.Event.EPoll.new_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yEe: // global
           call GHC.Event.EPoll.new1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.401541333 UTC

[section ""data" . GHC.Event.EPoll.Event_closure" {
     GHC.Event.EPoll.Event_closure:
         const GHC.Event.EPoll.Event_info;
 },
 GHC.Event.EPoll.Event_entry() //  [R2, R3]
         { info_tbl: [(c9yEm,
                       label: GHC.Event.EPoll.Event_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yEm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yEq; else goto c9yEp;
       c9yEq: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.Event_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yEp: // global
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.402551955 UTC

[section ""data" . GHC.Event.EPoll.EPoll_closure" {
     GHC.Event.EPoll.EPoll_closure:
         const GHC.Event.EPoll.EPoll_info;
 },
 GHC.Event.EPoll.EPoll_entry() //  [R2, R3]
         { info_tbl: [(c9yEw,
                       label: GHC.Event.EPoll.EPoll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yEw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yEA; else goto c9yEz;
       c9yEA: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.EPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yEz: // global
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.40343041 UTC

[GHC.Event.EPoll.Event_con_entry() //  [R1]
         { info_tbl: [(c9yEB,
                       label: GHC.Event.EPoll.Event_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,118,101,110,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yEB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.404146654 UTC

[GHC.Event.EPoll.EPoll_con_entry() //  [R1]
         { info_tbl: [(c9yEC,
                       label: GHC.Event.EPoll.EPoll_con_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,80,111,108,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yEC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.404799921 UTC

[section ""relreadonly" . S9yi5_srt" {
     S9yi5_srt:
         const GHC.Event.EPoll.$fShowEPollFd5_closure;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Event.EPoll.$fShowEvent6_closure;
         const GHC.Event.EPoll.$w$cshowsPrec1_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure;
         const GHC.Event.EPoll.$fShowEvent1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_r9y02_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.EPoll.new10_closure;
         const lvl3_r9y04_closure;
         const lvl5_r9y06_closure;
         const GHC.Event.EPoll.new6_closure;
         const GHC.Event.EPoll.new9_closure;
         const GHC.Event.EPoll.new5_closure;
         const GHC.Event.EPoll.new7_closure;
         const System.Posix.Internals.setCloseOnExec2_closure;
         const GHC.Event.EPoll.$w$j_closure;
         const GHC.Event.EPoll.new1_closure;
         const GHC.Event.EPoll.new2_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.405537479 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:39.406379985 UTC

[section ""data" . GHC.Event.EPoll.$WEPoll_closure" {
     GHC.Event.EPoll.$WEPoll_closure:
         const GHC.Event.EPoll.$WEPoll_info;
 },
 GHC.Event.EPoll.$WEPoll_entry() //  [R2, R3]
         { info_tbl: [(c9yEK,
                       label: GHC.Event.EPoll.$WEPoll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yEK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yET; else goto c9yEU;
       c9yET: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$WEPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yEU: // global
           I64[Sp - 16] = block_c9yEH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9yF0; else goto c9yEI;
       u9yF0: // global
           call _c9yEH(R1) args: 0, res: 0, upd: 0;
       c9yEI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yEH() //  [R1]
         { info_tbl: [(c9yEH,
                       label: block_c9yEH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yEH: // global
           I64[Sp] = block_c9yEN_info;
           _s9y0e::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0e::I64;
           if (R1 & 7 != 0) goto u9yEZ; else goto c9yEO;
       u9yEZ: // global
           call _c9yEN(R1) args: 0, res: 0, upd: 0;
       c9yEO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yEN() //  [R1]
         { info_tbl: [(c9yEN,
                       label: block_c9yEN_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yEN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yEY; else goto c9yEX;
       c9yEY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yEX: // global
           _s9y0g::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = _s9y0g::P64;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.407754436 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$calignment_closure" {
     GHC.Event.EPoll.$fStorableEvent_$calignment_closure:
         const GHC.Event.EPoll.$fStorableEvent_$calignment_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$calignment_entry() //  []
         { info_tbl: [(c9yF5,
                       label: GHC.Event.EPoll.$fStorableEvent_$calignment_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yF5: // global
           R1 = Foreign.Storable.$fStorableBool7_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.408431637 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent7_closure" {
     GHC.Event.EPoll.$fStorableEvent7_closure:
         const GHC.Types.I#_con_info;
         const 12;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.409102419 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure" {
     GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure:
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$csizeOf_entry() //  []
         { info_tbl: [(c9yFc,
                       label: GHC.Event.EPoll.$fStorableEvent_$csizeOf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yFc: // global
           R1 = GHC.Event.EPoll.$fStorableEvent7_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.410161355 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent2_closure" {
     GHC.Event.EPoll.$fStorableEvent2_closure:
         const GHC.Event.EPoll.$fStorableEvent2_info;
 },
 GHC.Event.EPoll.$fStorableEvent2_entry() //  [R2]
         { info_tbl: [(c9yFm,
                       label: GHC.Event.EPoll.$fStorableEvent2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yFm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yFv; else goto c9yFw;
       c9yFv: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yFw: // global
           I64[Sp - 8] = block_c9yFj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yFA; else goto c9yFk;
       u9yFA: // global
           call _c9yFj(R1) args: 0, res: 0, upd: 0;
       c9yFk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yFj() //  [R1]
         { info_tbl: [(c9yFj,
                       label: block_c9yFj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yFj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9yFz; else goto c9yFy;
       c9yFz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yFy: // global
           _s9y0m::I64 = I64[R1 + 7];
           _s9y0p::I64 = %MO_UU_Conv_W32_W64(I32[_s9y0m::I64]);
           _s9y0t::I64 = %MO_SS_Conv_W32_W64(I32[_s9y0m::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y0t::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y0p::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.411764968 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent1_closure" {
     GHC.Event.EPoll.$fStorableEvent1_closure:
         const GHC.Event.EPoll.$fStorableEvent1_info;
 },
 GHC.Event.EPoll.$fStorableEvent1_entry() //  [R2, R3]
         { info_tbl: [(c9yFI,
                       label: GHC.Event.EPoll.$fStorableEvent1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yFI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9yFW; else goto c9yFX;
       c9yFW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yFX: // global
           I64[Sp - 16] = block_c9yFF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9yG8; else goto c9yFG;
       u9yG8: // global
           call _c9yFF(R1) args: 0, res: 0, upd: 0;
       c9yFG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yFF() //  [R1]
         { info_tbl: [(c9yFF,
                       label: block_c9yFF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yFF: // global
           I64[Sp] = block_c9yFL_info;
           _s9y0B::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0B::I64;
           if (R1 & 7 != 0) goto u9yG7; else goto c9yFM;
       u9yG7: // global
           call _c9yFL(R1) args: 0, res: 0, upd: 0;
       c9yFM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yFL() //  [R1]
         { info_tbl: [(c9yFL,
                       label: block_c9yFL_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yFL: // global
           I64[Sp - 8] = block_c9yFQ_info;
           _s9y0E::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y0E::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yG9; else goto c9yFR;
       u9yG9: // global
           call _c9yFQ(R1) args: 0, res: 0, upd: 0;
       c9yFR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yFQ() //  [R1]
         { info_tbl: [(c9yFQ,
                       label: block_c9yFQ_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yFQ: // global
           _s9y0E::P64 = P64[Sp + 8];
           I32[I64[Sp + 16]] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 8] = block_c9yFV_info;
           R1 = _s9y0E::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9yGa; else goto c9yG1;
       u9yGa: // global
           call _c9yFV(R1) args: 0, res: 0, upd: 0;
       c9yG1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yFV() //  [R1]
         { info_tbl: [(c9yFV,
                       label: block_c9yFV_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yFV: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.413724955 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent4_closure" {
     GHC.Event.EPoll.$fStorableEvent4_closure:
         const GHC.Event.EPoll.$fStorableEvent4_info;
 },
 GHC.Event.EPoll.$fStorableEvent4_entry() //  [R2, R3]
         { info_tbl: [(c9yGi,
                       label: GHC.Event.EPoll.$fStorableEvent4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yGi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yGz; else goto c9yGA;
       c9yGz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yGA: // global
           I64[Sp - 16] = block_c9yGf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9yGG; else goto c9yGg;
       u9yGG: // global
           call _c9yGf(R1) args: 0, res: 0, upd: 0;
       c9yGg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yGf() //  [R1]
         { info_tbl: [(c9yGf,
                       label: block_c9yGf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yGf: // global
           I64[Sp] = block_c9yGl_info;
           _s9y0Q::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0Q::I64;
           if (R1 & 7 != 0) goto u9yGF; else goto c9yGm;
       u9yGF: // global
           call _c9yGl(R1) args: 0, res: 0, upd: 0;
       c9yGm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yGl() //  [R1]
         { info_tbl: [(c9yGl,
                       label: block_c9yGl_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yGl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9yGE; else goto c9yGD;
       c9yGE: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yGD: // global
           _s9y0T::I64 = I64[Sp + 8] + I64[R1 + 7];
           _s9y0W::I64 = %MO_UU_Conv_W32_W64(I32[_s9y0T::I64]);
           _s9y10::I64 = %MO_SS_Conv_W32_W64(I32[_s9y0T::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y10::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y0W::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.415538418 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent6_closure" {
     GHC.Event.EPoll.$fStorableEvent6_closure:
         const GHC.Event.EPoll.$fStorableEvent6_info;
 },
 GHC.Event.EPoll.$fStorableEvent6_entry() //  [R2, R3]
         { info_tbl: [(c9yGO,
                       label: GHC.Event.EPoll.$fStorableEvent6_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yGO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yH8; else goto c9yH9;
       c9yH8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yH9: // global
           I64[Sp - 16] = block_c9yGL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9yHf; else goto c9yGM;
       u9yHf: // global
           call _c9yGL(R1) args: 0, res: 0, upd: 0;
       c9yGM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yGL() //  [R1]
         { info_tbl: [(c9yGL,
                       label: block_c9yGL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yGL: // global
           I64[Sp] = block_c9yGR_info;
           _s9y18::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y18::I64;
           if (R1 & 7 != 0) goto u9yHe; else goto c9yGS;
       u9yHe: // global
           call _c9yGR(R1) args: 0, res: 0, upd: 0;
       c9yGS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yGR() //  [R1]
         { info_tbl: [(c9yGR,
                       label: block_c9yGR_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yGR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9yHd; else goto c9yHc;
       c9yHd: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yHc: // global
           _s9y1b::I64 = I64[Sp + 8] + I64[R1 + 7] * 12;
           _s9y1f::I64 = %MO_UU_Conv_W32_W64(I32[_s9y1b::I64]);
           _s9y1j::I64 = %MO_SS_Conv_W32_W64(I32[_s9y1b::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y1j::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y1f::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.417727841 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent3_closure" {
     GHC.Event.EPoll.$fStorableEvent3_closure:
         const GHC.Event.EPoll.$fStorableEvent3_info;
 },
 GHC.Event.EPoll.$fStorableEvent3_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yHn,
                       label: GHC.Event.EPoll.$fStorableEvent3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yHn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yHJ; else goto c9yHK;
       c9yHJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yHK: // global
           I64[Sp - 24] = block_c9yHk_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yHW; else goto c9yHl;
       u9yHW: // global
           call _c9yHk(R1) args: 0, res: 0, upd: 0;
       c9yHl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yHk() //  [R1]
         { info_tbl: [(c9yHk,
                       label: block_c9yHk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yHk: // global
           I64[Sp] = block_c9yHq_info;
           _s9y1s::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y1s::I64;
           if (R1 & 7 != 0) goto u9yHV; else goto c9yHr;
       u9yHV: // global
           call _c9yHq(R1) args: 0, res: 0, upd: 0;
       c9yHr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yHq() //  [R1]
         { info_tbl: [(c9yHq,
                       label: block_c9yHq_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yHq: // global
           I64[Sp] = block_c9yHv_info;
           _s9y1u::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9y1u::I64;
           if (R1 & 7 != 0) goto u9yHX; else goto c9yHw;
       u9yHX: // global
           call _c9yHv(R1) args: 0, res: 0, upd: 0;
       c9yHw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yHv() //  [R1]
         { info_tbl: [(c9yHv,
                       label: block_c9yHv_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yHv: // global
           I64[Sp - 8] = block_c9yHA_info;
           _s9y1x::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y1x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yHY; else goto c9yHB;
       u9yHY: // global
           call _c9yHA(R1) args: 0, res: 0, upd: 0;
       c9yHB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yHA() //  [R1]
         { info_tbl: [(c9yHA,
                       label: block_c9yHA_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yHA: // global
           _s9y1x::P64 = P64[Sp + 8];
           _s9y1A::I64 = I64[Sp + 16] + I64[Sp + 24];
           I32[_s9y1A::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9yHI_info;
           R1 = _s9y1x::P64;
           I64[Sp + 24] = _s9y1A::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9yHZ; else goto c9yHP;
       u9yHZ: // global
           call _c9yHI(R1) args: 0, res: 0, upd: 0;
       c9yHP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yHI() //  [R1]
         { info_tbl: [(c9yHI,
                       label: block_c9yHI_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yHI: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.420078918 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent5_closure" {
     GHC.Event.EPoll.$fStorableEvent5_closure:
         const GHC.Event.EPoll.$fStorableEvent5_info;
 },
 GHC.Event.EPoll.$fStorableEvent5_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yI7,
                       label: GHC.Event.EPoll.$fStorableEvent5_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yI7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yIw; else goto c9yIx;
       c9yIw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yIx: // global
           I64[Sp - 24] = block_c9yI4_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yIJ; else goto c9yI5;
       u9yIJ: // global
           call _c9yI4(R1) args: 0, res: 0, upd: 0;
       c9yI5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yI4() //  [R1]
         { info_tbl: [(c9yI4,
                       label: block_c9yI4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yI4: // global
           I64[Sp] = block_c9yIa_info;
           _s9y1L::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y1L::I64;
           if (R1 & 7 != 0) goto u9yII; else goto c9yIb;
       u9yII: // global
           call _c9yIa(R1) args: 0, res: 0, upd: 0;
       c9yIb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yIa() //  [R1]
         { info_tbl: [(c9yIa,
                       label: block_c9yIa_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yIa: // global
           I64[Sp] = block_c9yIf_info;
           _s9y1N::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9y1N::I64;
           if (R1 & 7 != 0) goto u9yIK; else goto c9yIg;
       u9yIK: // global
           call _c9yIf(R1) args: 0, res: 0, upd: 0;
       c9yIg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yIf() //  [R1]
         { info_tbl: [(c9yIf,
                       label: block_c9yIf_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yIf: // global
           I64[Sp - 8] = block_c9yIk_info;
           _s9y1Q::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y1Q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yIL; else goto c9yIl;
       u9yIL: // global
           call _c9yIk(R1) args: 0, res: 0, upd: 0;
       c9yIl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yIk() //  [R1]
         { info_tbl: [(c9yIk,
                       label: block_c9yIk_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yIk: // global
           _s9y1Q::P64 = P64[Sp + 8];
           _s9y1T::I64 = I64[Sp + 16] + I64[Sp + 24] * 12;
           I32[_s9y1T::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9yIv_info;
           R1 = _s9y1Q::P64;
           I64[Sp + 24] = _s9y1T::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9yIM; else goto c9yIC;
       u9yIM: // global
           call _c9yIv(R1) args: 0, res: 0, upd: 0;
       c9yIC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yIv() //  [R1]
         { info_tbl: [(c9yIv,
                       label: block_c9yIv_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yIv: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.421922796 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_closure" {
     GHC.Event.EPoll.$fStorableEvent_closure:
         const Foreign.Storable.C:Storable_con_info;
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure+1;
         const GHC.Event.EPoll.$fStorableEvent_$calignment_closure+1;
         const GHC.Event.EPoll.$fStorableEvent6_closure+3;
         const GHC.Event.EPoll.$fStorableEvent5_closure+4;
         const GHC.Event.EPoll.$fStorableEvent4_closure+3;
         const GHC.Event.EPoll.$fStorableEvent3_closure+4;
         const GHC.Event.EPoll.$fStorableEvent2_closure+2;
         const GHC.Event.EPoll.$fStorableEvent1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.422606602 UTC

[section ""data" . GHC.Event.EPoll.$fEqEventType_closure" {
     GHC.Event.EPoll.$fEqEventType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Word.eqWord32_closure+2;
         const GHC.Word.neWord32_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.423237517 UTC

[section ""data" . GHC.Event.EPoll.$fBitsEventType_closure" {
     GHC.Event.EPoll.$fBitsEventType_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Event.EPoll.$fEqEventType_closure+1;
         const GHC.Word.$fBitsWord32_$c.&._closure+2;
         const GHC.Word.$fBitsWord32_$c.|._closure+2;
         const GHC.Word.$fBitsWord32_$cxor_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplement_closure+1;
         const GHC.Word.$fBitsWord32_$cshift_closure+2;
         const GHC.Word.$fBitsWord32_$crotate_closure+2;
         const GHC.Word.$fBitsWord32_$cminBound_closure;
         const GHC.Word.$fBitsWord32_$cbit_closure+1;
         const GHC.Word.$fBitsWord32_$csetBit_closure+2;
         const GHC.Word.$fBitsWord32_$cclearBit_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplementBit_closure+2;
         const GHC.Word.$fBitsWord32_$ctestBit_closure+2;
         const GHC.Word.$fBitsWord32_$cbitSizeMaybe_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fBitsWord32_$cisSigned_closure+1;
         const GHC.Word.$fBitsWord32_$cshiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cshiftR_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftR_closure+2;
         const GHC.Word.$fBitsWord32_$crotateL_closure+2;
         const GHC.Word.$fBitsWord32_$crotateR_closure+2;
         const GHC.Word.$fBitsWord32_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.424111153 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd1_closure" {
     GHC.Event.EPoll.fromEPollFd1_closure:
         const GHC.Event.EPoll.fromEPollFd1_info;
 },
 GHC.Event.EPoll.fromEPollFd1_entry() //  [R2]
         { info_tbl: [(c9yIR,
                       label: GHC.Event.EPoll.fromEPollFd1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yIR: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.424931515 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd_closure" {
     GHC.Event.EPoll.fromEPollFd_closure:
         const GHC.Event.EPoll.fromEPollFd_info;
 },
 GHC.Event.EPoll.fromEPollFd_entry() //  [R2]
         { info_tbl: [(c9yIY,
                       label: GHC.Event.EPoll.fromEPollFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yIY: // global
           R2 = R2;
           call GHC.Event.EPoll.fromEPollFd1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.425758505 UTC

[section ""data" . GHC.Event.EPoll.unEventType1_closure" {
     GHC.Event.EPoll.unEventType1_closure:
         const GHC.Event.EPoll.unEventType1_info;
 },
 GHC.Event.EPoll.unEventType1_entry() //  [R2]
         { info_tbl: [(c9yJ5,
                       label: GHC.Event.EPoll.unEventType1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yJ5: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.426569795 UTC

[section ""data" . GHC.Event.EPoll.unEventType_closure" {
     GHC.Event.EPoll.unEventType_closure:
         const GHC.Event.EPoll.unEventType_info;
 },
 GHC.Event.EPoll.unEventType_entry() //  [R2]
         { info_tbl: [(c9yJc,
                       label: GHC.Event.EPoll.unEventType_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yJc: // global
           R2 = R2;
           call GHC.Event.EPoll.unEventType1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.427439013 UTC

[section ""data" . GHC.Event.EPoll.eventFd_closure" {
     GHC.Event.EPoll.eventFd_closure:
         const GHC.Event.EPoll.eventFd_info;
 },
 GHC.Event.EPoll.eventFd_entry() //  [R2]
         { info_tbl: [(c9yJm,
                       label: GHC.Event.EPoll.eventFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yJm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yJn; else goto c9yJo;
       c9yJn: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yJo: // global
           I64[Sp - 8] = block_c9yJj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yJs; else goto c9yJk;
       u9yJs: // global
           call _c9yJj(R1) args: 0, res: 0, upd: 0;
       c9yJk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yJj() //  [R1]
         { info_tbl: [(c9yJj,
                       label: block_c9yJj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yJj: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.42855836 UTC

[section ""data" . GHC.Event.EPoll.eventTypes_closure" {
     GHC.Event.EPoll.eventTypes_closure:
         const GHC.Event.EPoll.eventTypes_info;
 },
 GHC.Event.EPoll.eventTypes_entry() //  [R2]
         { info_tbl: [(c9yJA,
                       label: GHC.Event.EPoll.eventTypes_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yJA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yJB; else goto c9yJC;
       c9yJB: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventTypes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yJC: // global
           I64[Sp - 8] = block_c9yJx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yJG; else goto c9yJy;
       u9yJG: // global
           call _c9yJx(R1) args: 0, res: 0, upd: 0;
       c9yJy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yJx() //  [R1]
         { info_tbl: [(c9yJx,
                       label: block_c9yJx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yJx: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.429725516 UTC

[section ""data" . GHC.Event.EPoll.epollEvents_closure" {
     GHC.Event.EPoll.epollEvents_closure:
         const GHC.Event.EPoll.epollEvents_info;
 },
 GHC.Event.EPoll.epollEvents_entry() //  [R2]
         { info_tbl: [(c9yJO,
                       label: GHC.Event.EPoll.epollEvents_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yJO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yJS; else goto c9yJT;
       c9yJS: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollEvents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yJT: // global
           I64[Sp - 8] = block_c9yJL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yJX; else goto c9yJM;
       u9yJX: // global
           call _c9yJL(R1) args: 0, res: 0, upd: 0;
       c9yJM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yJL() //  [R1]
         { info_tbl: [(c9yJL,
                       label: block_c9yJL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yJL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9yJW; else goto c9yJV;
       c9yJW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yJV: // global
           _s9y2d::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s9y2d::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.431022934 UTC

[section ""data" . GHC.Event.EPoll.epollFd_closure" {
     GHC.Event.EPoll.epollFd_closure:
         const GHC.Event.EPoll.epollFd_info;
 },
 GHC.Event.EPoll.epollFd_entry() //  [R2]
         { info_tbl: [(c9yK5,
                       label: GHC.Event.EPoll.epollFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yK5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yK9; else goto c9yKa;
       c9yK9: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yKa: // global
           I64[Sp - 8] = block_c9yK2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yKe; else goto c9yK3;
       u9yKe: // global
           call _c9yK2(R1) args: 0, res: 0, upd: 0;
       c9yK3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yK2() //  [R1]
         { info_tbl: [(c9yK2,
                       label: block_c9yK2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yK2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9yKd; else goto c9yKc;
       c9yKd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yKc: // global
           _s9y2g::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9y2g::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.432084287 UTC

[section ""data" . GHC.Event.EPoll.available_closure" {
     GHC.Event.EPoll.available_closure:
         const GHC.Types.True_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.432597327 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule4_bytes" {
     GHC.Event.EPoll.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.43313053 UTC

[section ""data" . GHC.Event.EPoll.$trModule3_closure" {
     GHC.Event.EPoll.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.433906168 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule2_bytes" {
     GHC.Event.EPoll.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.434425845 UTC

[section ""data" . GHC.Event.EPoll.$trModule1_closure" {
     GHC.Event.EPoll.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.434989726 UTC

[section ""data" . GHC.Event.EPoll.$trModule_closure" {
     GHC.Event.EPoll.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.EPoll.$trModule3_closure+1;
         const GHC.Event.EPoll.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.435555962 UTC

[section ""data" . $krep_r9xZP_closure" {
     $krep_r9xZP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.436123193 UTC

[section ""data" . $krep1_r9xZQ_closure" {
     $krep1_r9xZQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord32_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.43670948 UTC

[section ""data" . $krep2_r9xZR_closure" {
     $krep2_r9xZR_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.437278008 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPollFd2_bytes" {
     GHC.Event.EPoll.$tcEPollFd2_bytes:
         I8[] [69,80,111,108,108,70,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.437821818 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd1_closure" {
     GHC.Event.EPoll.$tcEPollFd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPollFd2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.43840975 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd_closure" {
     GHC.Event.EPoll.$tcEPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPollFd1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11408974392712426853;
         const 10860743297622841984;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.438999788 UTC

[section ""data" . $krep3_r9xZS_closure" {
     $krep3_r9xZS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPollFd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.439607387 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd1_closure" {
     GHC.Event.EPoll.$tc'EPollFd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep3_r9xZS_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.44020294 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPollFd3_bytes" {
     GHC.Event.EPoll.$tc'EPollFd3_bytes:
         I8[] [39,69,80,111,108,108,70,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.442315269 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd2_closure" {
     GHC.Event.EPoll.$tc'EPollFd2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPollFd3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.442904799 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd_closure" {
     GHC.Event.EPoll.$tc'EPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd2_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd1_closure+4;
         const 13859366844265277896;
         const 3104986725924328114;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.443475563 UTC

[section ""cstring" . GHC.Event.EPoll.$tcControlOp2_bytes" {
     GHC.Event.EPoll.$tcControlOp2_bytes:
         I8[] [67,111,110,116,114,111,108,79,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.444016049 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp1_closure" {
     GHC.Event.EPoll.$tcControlOp1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcControlOp2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.444598816 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp_closure" {
     GHC.Event.EPoll.$tcControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcControlOp1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16670684287779227039;
         const 7079239768931473179;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.445154191 UTC

[section ""data" . $krep4_r9xZT_closure" {
     $krep4_r9xZT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcControlOp_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.44608401 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp1_closure" {
     GHC.Event.EPoll.$tc'ControlOp1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep4_r9xZT_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.446617649 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'ControlOp3_bytes" {
     GHC.Event.EPoll.$tc'ControlOp3_bytes:
         I8[] [39,67,111,110,116,114,111,108,79,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.447159669 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp2_closure" {
     GHC.Event.EPoll.$tc'ControlOp2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'ControlOp3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.447694446 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp_closure" {
     GHC.Event.EPoll.$tc'ControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp2_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp1_closure+4;
         const 17423659744934710370;
         const 14737300415055323322;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.448296065 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEventType2_bytes" {
     GHC.Event.EPoll.$tcEventType2_bytes:
         I8[] [69,118,101,110,116,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.448791919 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType1_closure" {
     GHC.Event.EPoll.$tcEventType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEventType2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.449389692 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType_closure" {
     GHC.Event.EPoll.$tcEventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEventType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6882131545153803920;
         const 11603224301892798833;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.450007307 UTC

[section ""data" . $krep5_r9xZU_closure" {
     $krep5_r9xZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEventType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.450577034 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType1_closure" {
     GHC.Event.EPoll.$tc'EventType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r9xZQ_closure+1;
         const $krep5_r9xZU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.45112815 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EventType3_bytes" {
     GHC.Event.EPoll.$tc'EventType3_bytes:
         I8[] [39,69,118,101,110,116,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.451660603 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType2_closure" {
     GHC.Event.EPoll.$tc'EventType2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EventType3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.452219967 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType_closure" {
     GHC.Event.EPoll.$tc'EventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EventType2_closure+1;
         const GHC.Event.EPoll.$tc'EventType1_closure+4;
         const 6895099112894632230;
         const 10353865251933672677;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.452842205 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEvent2_bytes" {
     GHC.Event.EPoll.$tcEvent2_bytes:
         I8[] [69,118,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.453417991 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent1_closure" {
     GHC.Event.EPoll.$tcEvent1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEvent2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.454005439 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent_closure" {
     GHC.Event.EPoll.$tcEvent_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEvent1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9768726503562184735;
         const 14932995848660065219;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.454617023 UTC

[section ""data" . $krep6_r9xZV_closure" {
     $krep6_r9xZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEvent_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.455178358 UTC

[section ""data" . $krep7_r9xZW_closure" {
     $krep7_r9xZW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9xZR_closure+1;
         const $krep6_r9xZV_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.455736859 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event1_closure" {
     GHC.Event.EPoll.$tc'Event1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r9xZU_closure+1;
         const $krep7_r9xZW_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.45633477 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'Event3_bytes" {
     GHC.Event.EPoll.$tc'Event3_bytes:
         I8[] [39,69,118,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.456884371 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event2_closure" {
     GHC.Event.EPoll.$tc'Event2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'Event3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.457896539 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event_closure" {
     GHC.Event.EPoll.$tc'Event_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'Event2_closure+1;
         const GHC.Event.EPoll.$tc'Event1_closure+4;
         const 13898227050457859187;
         const 12870286929163337655;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.458512674 UTC

[section ""data" . $krep8_r9xZX_closure" {
     $krep8_r9xZX_closure:
         const :_con_info;
         const $krep6_r9xZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.45908008 UTC

[section ""data" . $krep9_r9xZY_closure" {
     $krep9_r9xZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcArray_closure;
         const $krep8_r9xZX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.459680916 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPoll2_bytes" {
     GHC.Event.EPoll.$tcEPoll2_bytes:
         I8[] [69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.460219623 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll1_closure" {
     GHC.Event.EPoll.$tcEPoll1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPoll2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.460814404 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll_closure" {
     GHC.Event.EPoll.$tcEPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPoll1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16362945812962510240;
         const 15183678187331181316;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.461419007 UTC

[section ""data" . $krep10_r9xZZ_closure" {
     $krep10_r9xZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPoll_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.461996686 UTC

[section ""data" . $krep11_r9y00_closure" {
     $krep11_r9y00_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r9xZY_closure+1;
         const $krep10_r9xZZ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.462585461 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll1_closure" {
     GHC.Event.EPoll.$tc'EPoll1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r9xZS_closure+1;
         const $krep11_r9y00_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.463186258 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPoll3_bytes" {
     GHC.Event.EPoll.$tc'EPoll3_bytes:
         I8[] [39,69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.463678609 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll2_closure" {
     GHC.Event.EPoll.$tc'EPoll2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPoll3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.464257791 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll_closure" {
     GHC.Event.EPoll.$tc'EPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPoll2_closure+1;
         const GHC.Event.EPoll.$tc'EPoll1_closure+4;
         const 11640704659469356468;
         const 11164042648060985378;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.464855668 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd4_bytes" {
     GHC.Event.EPoll.$fShowEPollFd4_bytes:
         I8[] [69,80,111,108,108,70,100,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.465440764 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd3_bytes" {
     GHC.Event.EPoll.$fShowEPollFd3_bytes:
         I8[] [102,114,111,109,69,80,111,108,108,70,100,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.465992796 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd2_bytes" {
     GHC.Event.EPoll.$fShowEPollFd2_bytes:
         I8[] [125]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.468479079 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec_closure" {
     GHC.Event.EPoll.$w$cshowsPrec_closure:
         const GHC.Event.EPoll.$w$cshowsPrec_info;
 },
 sat_s9y2o_entry() //  [R1]
         { info_tbl: [(c9yKD,
                       label: sat_s9y2o_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yKD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yKE; else goto c9yKF;
       c9yKE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yKF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2s_entry() //  [R1]
         { info_tbl: [(c9yKG,
                       label: sat_s9y2s_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yKG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yKK; else goto c9yKL;
       c9yKK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yKL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9yKu_info;
           _s9y2k::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2k::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9yKS; else goto c9yKv;
       u9yKS: // global
           call _c9yKu(R1) args: 0, res: 0, upd: 0;
       c9yKv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yKu() //  [R1]
         { info_tbl: [(c9yKu,
                       label: block_c9yKu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yKu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yKO; else goto c9yKN;
       c9yKO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9yKN: // global
           _s9y2n::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y2o_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9yKH_info;
           R4 = Hp - 16;
           R3 = _s9y2n::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yKH() //  [R1, R2]
         { info_tbl: [(c9yKH,
                       label: block_c9yKH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yKH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yKR; else goto c9yKQ;
       c9yKR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yKQ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2t_entry() //  [R1]
         { info_tbl: [(c9yKT,
                       label: sat_s9y2t_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yKT: // global
           _s9y2t::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yKU; else goto c9yKV;
       c9yKV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yKX; else goto c9yKW;
       c9yKX: // global
           HpAlloc = 32;
           goto c9yKU;
       c9yKU: // global
           R1 = _s9y2t::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yKW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2t::P64;
           _s9y2j::P64 = P64[_s9y2t::P64 + 16];
           _s9y2k::P64 = P64[_s9y2t::P64 + 24];
           I64[Hp - 24] = sat_s9y2s_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2x_entry() //  [R1]
         { info_tbl: [(c9yLl,
                       label: sat_s9y2x_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yLl: // global
           _s9y2x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yLm; else goto c9yLn;
       c9yLn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yLp; else goto c9yLo;
       c9yLp: // global
           HpAlloc = 24;
           goto c9yLm;
       c9yLm: // global
           R1 = _s9y2x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yLo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2x::P64;
           _s9y2k::P64 = P64[_s9y2x::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2B_entry() //  [R1]
         { info_tbl: [(c9yLq,
                       label: sat_s9y2B_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yLq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yLu; else goto c9yLv;
       c9yLu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yLv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9yLb_info;
           _s9y2k::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2k::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9yLC; else goto c9yLc;
       u9yLC: // global
           call _c9yLb(R1) args: 0, res: 0, upd: 0;
       c9yLc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yLb() //  [R1]
         { info_tbl: [(c9yLb,
                       label: block_c9yLb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yLb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yLy; else goto c9yLx;
       c9yLy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9yLx: // global
           _s9y2v::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y2x_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9yLr_info;
           R4 = Hp - 16;
           R3 = _s9y2v::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yLr() //  [R1, R2]
         { info_tbl: [(c9yLr,
                       label: block_c9yLr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yLr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yLB; else goto c9yLA;
       c9yLB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yLA: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2C_entry() //  [R1]
         { info_tbl: [(c9yLD,
                       label: sat_s9y2C_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yLD: // global
           _s9y2C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yLE; else goto c9yLF;
       c9yLF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yLH; else goto c9yLG;
       c9yLH: // global
           HpAlloc = 32;
           goto c9yLE;
       c9yLE: // global
           R1 = _s9y2C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yLG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2C::P64;
           _s9y2j::P64 = P64[_s9y2C::P64 + 16];
           _s9y2k::P64 = P64[_s9y2C::P64 + 24];
           I64[Hp - 24] = sat_s9y2B_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2D_entry() //  [R1]
         { info_tbl: [(c9yLI,
                       label: sat_s9y2D_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yLI: // global
           _s9y2D::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yLJ; else goto c9yLK;
       c9yLK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yLM; else goto c9yLL;
       c9yLM: // global
           HpAlloc = 32;
           goto c9yLJ;
       c9yLJ: // global
           R1 = _s9y2D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yLL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2D::P64;
           _s9y2j::P64 = P64[_s9y2D::P64 + 16];
           _s9y2k::P64 = P64[_s9y2D::P64 + 24];
           I64[Hp - 24] = sat_s9y2C_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yLQ,
                       label: GHC.Event.EPoll.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yLQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9yLU; else goto c9yLT;
       c9yLU: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yLT: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9yLO; else goto c9yLP;
       c9yLO: // global
           I64[Hp - 48] = sat_s9y2t_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9yKm::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9yKm::P64;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9yLP: // global
           I64[Hp - 48] = sat_s9y2D_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.472899219 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yM3,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yM3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9yM4; else goto c9yM5;
       c9yM4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yM5: // global
           I64[Sp - 24] = block_c9yM0_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yM9; else goto c9yM1;
       u9yM9: // global
           call _c9yM0(R1) args: 0, res: 0, upd: 0;
       c9yM1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yM0() //  [R1]
         { info_tbl: [(c9yM0,
                       label: block_c9yM0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yM0: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.475487797 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd5_closure" {
     GHC.Event.EPoll.$fShowEPollFd5_closure:
         const GHC.Event.EPoll.$fShowEPollFd5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEPollFd5_entry() //  [R1]
         { info_tbl: [(c9yMg,
                       label: GHC.Event.EPoll.$fShowEPollFd5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yMg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yMh; else goto c9yMi;
       c9yMh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yMi: // global
           (_c9yMd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9yMd::I64 == 0) goto c9yMf; else goto c9yMe;
       c9yMf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9yMe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9yMd::I64;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.476992101 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshow_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshow_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_info;
         const 0;
 },
 sat_s9y2P_entry() //  [R1]
         { info_tbl: [(c9yMy,
                       label: sat_s9y2P_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yMy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9yME; else goto c9yMF;
       c9yME: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yMF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9yMv_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yMK; else goto c9yMw;
       u9yMK: // global
           call _c9yMv(R1) args: 0, res: 0, upd: 0;
       c9yMw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yMv() //  [R1]
         { info_tbl: [(c9yMv,
                       label: block_c9yMv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yMv: // global
           I64[Sp] = block_c9yMB_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yMB() //  [R1, R2]
         { info_tbl: [(c9yMB,
                       label: block_c9yMB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yMB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yMJ; else goto c9yMI;
       c9yMJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yMI: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2Q_entry() //  [R1]
         { info_tbl: [(c9yML,
                       label: sat_s9y2Q_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yML: // global
           _s9y2Q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yMM; else goto c9yMN;
       c9yMN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yMP; else goto c9yMO;
       c9yMP: // global
           HpAlloc = 24;
           goto c9yMM;
       c9yMM: // global
           R1 = _s9y2Q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yMO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2Q::P64;
           _s9y2J::P64 = P64[_s9y2Q::P64 + 16];
           I64[Hp - 16] = sat_s9y2P_info;
           P64[Hp] = _s9y2J::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshow_entry() //  [R2]
         { info_tbl: [(c9yMQ,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yMQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yMU; else goto c9yMT;
       c9yMU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yMT: // global
           I64[Hp - 16] = sat_s9y2Q_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.478908854 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd1_closure" {
     GHC.Event.EPoll.$fShowEPollFd1_closure:
         const GHC.Event.EPoll.$fShowEPollFd1_info;
 },
 GHC.Event.EPoll.$fShowEPollFd1_entry() //  [R2, R3]
         { info_tbl: [(c9yMZ,
                       label: GHC.Event.EPoll.$fShowEPollFd1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yMZ: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.479751978 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9yN6,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yN6: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEPollFd1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.480451722 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_closure" {
     GHC.Event.EPoll.$fShowEPollFd_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.480975305 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent4_bytes" {
     GHC.Event.EPoll.$fShowEvent4_bytes:
         I8[] [69,118,101,110,116,84,121,112,101,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.48158337 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent3_bytes" {
     GHC.Event.EPoll.$fShowEvent3_bytes:
         I8[] [117,110,69,118,101,110,116,84,121,112,101,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.483869713 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec2_closure" {
     GHC.Event.EPoll.$w$cshowsPrec2_closure:
         const GHC.Event.EPoll.$w$cshowsPrec2_info;
 },
 sat_s9y32_entry() //  [R1]
         { info_tbl: [(c9yNx,
                       label: sat_s9y32_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yNx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yNy; else goto c9yNz;
       c9yNy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yNz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y36_entry() //  [R1]
         { info_tbl: [(c9yNA,
                       label: sat_s9y36_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yNA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yNH; else goto c9yNI;
       c9yNH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yNI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9yNo_info;
           _s9y2X::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2X::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9yNP; else goto c9yNp;
       u9yNP: // global
           call _c9yNo(R1) args: 0, res: 0, upd: 0;
       c9yNp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yNo() //  [R1]
         { info_tbl: [(c9yNo,
                       label: block_c9yNo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yNo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yNL; else goto c9yNK;
       c9yNL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9yNK: // global
           _s9y30::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y32_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9yNE_info;
           R3 = Hp - 16;
           R2 = _s9y30::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yNE() //  [R1, R2]
         { info_tbl: [(c9yNE,
                       label: block_c9yNE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yNE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yNO; else goto c9yNN;
       c9yNO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yNN: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y37_entry() //  [R1]
         { info_tbl: [(c9yNQ,
                       label: sat_s9y37_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yNQ: // global
           _s9y37::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yNR; else goto c9yNS;
       c9yNS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yNU; else goto c9yNT;
       c9yNU: // global
           HpAlloc = 32;
           goto c9yNR;
       c9yNR: // global
           R1 = _s9y37::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yNT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y37::P64;
           _s9y2W::P64 = P64[_s9y37::P64 + 16];
           _s9y2X::P64 = P64[_s9y37::P64 + 24];
           I64[Hp - 24] = sat_s9y36_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3c_entry() //  [R1]
         { info_tbl: [(c9yOi,
                       label: sat_s9y3c_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yOi: // global
           _s9y3c::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yOj; else goto c9yOk;
       c9yOk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yOm; else goto c9yOl;
       c9yOm: // global
           HpAlloc = 24;
           goto c9yOj;
       c9yOj: // global
           R1 = _s9y3c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yOl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3c::P64;
           _s9y2X::P64 = P64[_s9y3c::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3g_entry() //  [R1]
         { info_tbl: [(c9yOn,
                       label: sat_s9y3g_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yOn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yOu; else goto c9yOv;
       c9yOu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yOv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9yO8_info;
           _s9y2X::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2X::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9yOC; else goto c9yO9;
       u9yOC: // global
           call _c9yO8(R1) args: 0, res: 0, upd: 0;
       c9yO9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yO8() //  [R1]
         { info_tbl: [(c9yO8,
                       label: block_c9yO8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yO8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yOy; else goto c9yOx;
       c9yOy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9yOx: // global
           _s9y39::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3c_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9yOr_info;
           R3 = Hp - 16;
           R2 = _s9y39::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yOr() //  [R1, R2]
         { info_tbl: [(c9yOr,
                       label: block_c9yOr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yOr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yOB; else goto c9yOA;
       c9yOB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yOA: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3h_entry() //  [R1]
         { info_tbl: [(c9yOD,
                       label: sat_s9y3h_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yOD: // global
           _s9y3h::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yOE; else goto c9yOF;
       c9yOF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yOH; else goto c9yOG;
       c9yOH: // global
           HpAlloc = 32;
           goto c9yOE;
       c9yOE: // global
           R1 = _s9y3h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yOG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3h::P64;
           _s9y2W::P64 = P64[_s9y3h::P64 + 16];
           _s9y2X::P64 = P64[_s9y3h::P64 + 24];
           I64[Hp - 24] = sat_s9y3g_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3i_entry() //  [R1]
         { info_tbl: [(c9yOI,
                       label: sat_s9y3i_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yOI: // global
           _s9y3i::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yOJ; else goto c9yOK;
       c9yOK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yOM; else goto c9yOL;
       c9yOM: // global
           HpAlloc = 32;
           goto c9yOJ;
       c9yOJ: // global
           R1 = _s9y3i::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yOL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3i::P64;
           _s9y2W::P64 = P64[_s9y3i::P64 + 16];
           _s9y2X::P64 = P64[_s9y3i::P64 + 24];
           I64[Hp - 24] = sat_s9y3h_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yOQ,
                       label: GHC.Event.EPoll.$w$cshowsPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yOQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9yOU; else goto c9yOT;
       c9yOU: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yOT: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9yOO; else goto c9yOP;
       c9yOO: // global
           I64[Hp - 48] = sat_s9y37_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9yNg::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9yNg::P64;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9yOP: // global
           I64[Hp - 48] = sat_s9y3i_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.488131672 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(c9yP3,
                       label: GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yP3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9yP4; else goto c9yP5;
       c9yP4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yP5: // global
           I64[Sp - 24] = block_c9yP0_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yP9; else goto c9yP1;
       u9yP9: // global
           call _c9yP0(R1) args: 0, res: 0, upd: 0;
       c9yP1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yP0() //  [R1]
         { info_tbl: [(c9yP0,
                       label: block_c9yP0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yP0: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.489843734 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshow_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshow_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshow_info;
         const 0;
 },
 sat_s9y3v_entry() //  [R1]
         { info_tbl: [(c9yPp,
                       label: sat_s9y3v_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yPp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9yPy; else goto c9yPz;
       c9yPy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yPz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9yPm_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yPE; else goto c9yPn;
       u9yPE: // global
           call _c9yPm(R1) args: 0, res: 0, upd: 0;
       c9yPn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yPm() //  [R1]
         { info_tbl: [(c9yPm,
                       label: block_c9yPm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yPm: // global
           I64[Sp] = block_c9yPv_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yPv() //  [R1, R2]
         { info_tbl: [(c9yPv,
                       label: block_c9yPv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yPv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yPD; else goto c9yPC;
       c9yPD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yPC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3w_entry() //  [R1]
         { info_tbl: [(c9yPF,
                       label: sat_s9y3w_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yPF: // global
           _s9y3w::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yPG; else goto c9yPH;
       c9yPH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yPJ; else goto c9yPI;
       c9yPJ: // global
           HpAlloc = 24;
           goto c9yPG;
       c9yPG: // global
           R1 = _s9y3w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yPI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3w::P64;
           _s9y3o::P64 = P64[_s9y3w::P64 + 16];
           I64[Hp - 16] = sat_s9y3v_info;
           P64[Hp] = _s9y3o::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$fShowEventType_$cshow_entry() //  [R2]
         { info_tbl: [(c9yPK,
                       label: GHC.Event.EPoll.$fShowEventType_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yPK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yPO; else goto c9yPN;
       c9yPO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yPN: // global
           I64[Hp - 16] = sat_s9y3w_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.491736823 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType1_closure" {
     GHC.Event.EPoll.$fShowEventType1_closure:
         const GHC.Event.EPoll.$fShowEventType1_info;
 },
 GHC.Event.EPoll.$fShowEventType1_entry() //  [R2, R3]
         { info_tbl: [(c9yPT,
                       label: GHC.Event.EPoll.$fShowEventType1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yPT: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.492519241 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9yQ0,
                       label: GHC.Event.EPoll.$fShowEventType_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yQ0: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEventType1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.493227687 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_closure" {
     GHC.Event.EPoll.$fShowEventType_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEventType_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.494178516 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent7_bytes" {
     GHC.Event.EPoll.$fShowEvent7_bytes:
         I8[] [69,118,101,110,116,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.494904586 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent6_closure" {
     GHC.Event.EPoll.$fShowEvent6_closure:
         const GHC.Event.EPoll.$fShowEvent6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent6_entry() //  [R1]
         { info_tbl: [(c9yQ9,
                       label: GHC.Event.EPoll.$fShowEvent6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yQ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yQa; else goto c9yQb;
       c9yQa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yQb: // global
           (_c9yQ6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9yQ6::I64 == 0) goto c9yQ8; else goto c9yQ7;
       c9yQ8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9yQ7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9yQ6::I64;
           R2 = GHC.Event.EPoll.$fShowEvent7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.495776742 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent5_bytes" {
     GHC.Event.EPoll.$fShowEvent5_bytes:
         I8[] [101,118,101,110,116,84,121,112,101,115,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.496307079 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent2_bytes" {
     GHC.Event.EPoll.$fShowEvent2_bytes:
         I8[] [101,118,101,110,116,70,100,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.499564 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec1_closure" {
     GHC.Event.EPoll.$w$cshowsPrec1_closure:
         const GHC.Event.EPoll.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Event.EPoll.$w$cshowsPrec1_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yQd: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y3I_entry() //  [R1]
         { info_tbl: [(c9yQN,
                       label: sat_s9y3I_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yQN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yQO; else goto c9yQP;
       c9yQO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yQP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3M_entry() //  [R1]
         { info_tbl: [(c9yQQ,
                       label: sat_s9y3M_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yQQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yQU; else goto c9yQV;
       c9yQU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yQV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9yQE_info;
           _s9y3E::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y3E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9yR2; else goto c9yQF;
       u9yR2: // global
           call _c9yQE(R1) args: 0, res: 0, upd: 0;
       c9yQF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yQE() //  [R1]
         { info_tbl: [(c9yQE,
                       label: block_c9yQE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yQE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yQY; else goto c9yQX;
       c9yQY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9yQX: // global
           _s9y3H::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3I_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9yQR_info;
           R4 = Hp - 16;
           R3 = _s9y3H::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yQR() //  [R1, R2]
         { info_tbl: [(c9yQR,
                       label: block_c9yQR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yQR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yR1; else goto c9yR0;
       c9yR1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9yR0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3N_entry() //  [R1]
         { info_tbl: [(c9yR3,
                       label: sat_s9y3N_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yR3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yR7; else goto c9yR6;
       c9yR7: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yR6: // global
           _s9y3D::P64 = P64[R1 + 16];
           _s9y3E::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9y3M_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y3O_entry() //  [R1]
         { info_tbl: [(c9yR8,
                       label: sat_s9y3O_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yR8: // global
           _s9y3O::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yR9; else goto c9yRa;
       c9yRa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yRc; else goto c9yRb;
       c9yRc: // global
           HpAlloc = 32;
           goto c9yR9;
       c9yR9: // global
           R1 = _s9y3O::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yRb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3O::P64;
           _s9y3D::P64 = P64[_s9y3O::P64 + 16];
           _s9y3E::P64 = P64[_s9y3O::P64 + 24];
           I64[Hp - 24] = sat_s9y3N_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3P_entry() //  [R1]
         { info_tbl: [(c9yRd,
                       label: sat_s9y3P_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yRd: // global
           _s9y3P::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yRe; else goto c9yRf;
       c9yRf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9yRh; else goto c9yRg;
       c9yRh: // global
           HpAlloc = 32;
           goto c9yRe;
       c9yRe: // global
           R1 = _s9y3P::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yRg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3P::P64;
           _s9y3C::P64 = P64[_s9y3P::P64 + 16];
           _s9y3D::P64 = P64[_s9y3P::P64 + 24];
           _s9y3E::P64 = P64[_s9y3P::P64 + 32];
           I64[Hp - 24] = sat_s9y3O_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R4 = Hp - 24;
           R3 = _s9y3C::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3Q_entry() //  [R1]
         { info_tbl: [(c9yRi,
                       label: sat_s9y3Q_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yRi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9yRm; else goto c9yRl;
       c9yRm: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yRl: // global
           _s9y3C::P64 = P64[R1 + 16];
           _s9y3D::P64 = P64[R1 + 24];
           _s9y3E::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9y3P_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y3U_entry() //  [R1]
         { info_tbl: [(c9yRW,
                       label: sat_s9y3U_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yRW: // global
           _s9y3U::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9yRX; else goto c9yRY;
       c9yRY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yS0; else goto c9yRZ;
       c9yS0: // global
           HpAlloc = 24;
           goto c9yRX;
       c9yRX: // global
           R1 = _s9y3U::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yRZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3U::P64;
           _s9y3E::P64 = P64[_s9y3U::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3Y_entry() //  [R1]
         { info_tbl: [(c9yS1,
                       label: sat_s9y3Y_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yS1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9yS5; else goto c9yS6;
       c9yS5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yS6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9yRM_info;
           _s9y3E::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y3E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9ySd; else goto c9yRN;
       u9ySd: // global
           call _c9yRM(R1) args: 0, res: 0, upd: 0;
       c9yRN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9yRM() //  [R1]
         { info_tbl: [(c9yRM,
                       label: block_c9yRM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yRM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9yS9; else goto c9yS8;
       c9yS9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9yS8: // global
           _s9y3S::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3U_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9yS2_info;
           R4 = Hp - 16;
           R3 = _s9y3S::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9yS2() //  [R1, R2]
         { info_tbl: [(c9yS2,
                       label: block_c9yS2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yS2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ySc; else goto c9ySb;
       c9ySc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9ySb: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3Z_entry() //  [R1]
         { info_tbl: [(c9ySe,
                       label: sat_s9y3Z_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ySe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ySi; else goto c9ySh;
       c9ySi: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ySh: // global
           _s9y3D::P64 = P64[R1 + 16];
           _s9y3E::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9y3Y_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y40_entry() //  [R1]
         { info_tbl: [(c9ySj,
                       label: sat_s9y40_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ySj: // global
           _s9y40::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ySk; else goto c9ySl;
       c9ySl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ySn; else goto c9ySm;
       c9ySn: // global
           HpAlloc = 32;
           goto c9ySk;
       c9ySk: // global
           R1 = _s9y40::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ySm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y40::P64;
           _s9y3D::P64 = P64[_s9y40::P64 + 16];
           _s9y3E::P64 = P64[_s9y40::P64 + 24];
           I64[Hp - 24] = sat_s9y3Z_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y41_entry() //  [R1]
         { info_tbl: [(c9ySo,
                       label: sat_s9y41_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ySo: // global
           _s9y41::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ySp; else goto c9ySq;
       c9ySq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ySs; else goto c9ySr;
       c9ySs: // global
           HpAlloc = 32;
           goto c9ySp;
       c9ySp: // global
           R1 = _s9y41::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ySr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y41::P64;
           _s9y3C::P64 = P64[_s9y41::P64 + 16];
           _s9y3D::P64 = P64[_s9y41::P64 + 24];
           _s9y3E::P64 = P64[_s9y41::P64 + 32];
           I64[Hp - 24] = sat_s9y40_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R4 = Hp - 24;
           R3 = _s9y3C::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y42_entry() //  [R1]
         { info_tbl: [(c9ySt,
                       label: sat_s9y42_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ySt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9ySx; else goto c9ySw;
       c9ySx: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ySw: // global
           _s9y3C::P64 = P64[R1 + 16];
           _s9y3D::P64 = P64[R1 + 24];
           _s9y3E::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9y41_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y43_entry() //  [R1]
         { info_tbl: [(c9ySy,
                       label: sat_s9y43_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ySy: // global
           _s9y43::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ySz; else goto c9ySA;
       c9ySA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9ySC; else goto c9ySB;
       c9ySC: // global
           HpAlloc = 40;
           goto c9ySz;
       c9ySz: // global
           R1 = _s9y43::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ySB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y43::P64;
           _s9y3C::P64 = P64[_s9y43::P64 + 16];
           _s9y3D::P64 = P64[_s9y43::P64 + 24];
           _s9y3E::P64 = P64[_s9y43::P64 + 32];
           I64[Hp - 32] = sat_s9y42_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9ySG,
                       label: GHC.Event.EPoll.$w$cshowsPrec1_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [True, False, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ySG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c9ySK; else goto c9ySJ;
       c9ySK: // global
           HpAlloc = 64;
           R1 = GHC.Event.EPoll.$w$cshowsPrec1_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c9ySJ: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9ySE; else goto c9ySF;
       c9ySE: // global
           I64[Hp - 56] = sat_s9y3Q_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           _c9yQk::P64 = Hp - 56;
           Hp = Hp - 24;
           R3 = _c9yQk::P64;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9ySF: // global
           I64[Hp - 56] = sat_s9y43_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.506043858 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yST,
                       label: GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yST: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9ySX; else goto c9ySY;
       c9ySX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9ySY: // global
           I64[Sp - 24] = block_c9ySQ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9yT6; else goto c9ySR;
       u9yT6: // global
           call _c9ySQ(R1) args: 0, res: 0, upd: 0;
       c9ySR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ySQ() //  [R1]
         { info_tbl: [(c9ySQ,
                       label: block_c9ySQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ySQ: // global
           I64[Sp] = block_c9ySW_info;
           _s9y48::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y48::I64;
           if (R1 & 7 != 0) goto u9yT5; else goto c9yT0;
       u9yT5: // global
           call _c9ySW(R1) args: 0, res: 0, upd: 0;
       c9yT0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ySW() //  [R1]
         { info_tbl: [(c9ySW,
                       label: block_c9ySW_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ySW: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.507283518 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent8_closure" {
     GHC.Event.EPoll.$fShowEvent8_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.508022759 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshow_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshow_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshow_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshow_entry() //  [R2]
         { info_tbl: [(c9yTe,
                       label: GHC.Event.EPoll.$fShowEvent_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yTe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9yTf; else goto c9yTg;
       c9yTf: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9yTg: // global
           I64[Sp - 8] = block_c9yTb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9yTk; else goto c9yTc;
       u9yTk: // global
           call _c9yTb(R1) args: 0, res: 0, upd: 0;
       c9yTc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yTb() //  [R1]
         { info_tbl: [(c9yTb,
                       label: block_c9yTb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yTb: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.509292235 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent1_closure" {
     GHC.Event.EPoll.$fShowEvent1_closure:
         const GHC.Event.EPoll.$fShowEvent1_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent1_entry() //  [R2, R3]
         { info_tbl: [(c9yTs,
                       label: GHC.Event.EPoll.$fShowEvent1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yTs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yTt; else goto c9yTu;
       c9yTt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yTu: // global
           I64[Sp - 16] = block_c9yTp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9yTy; else goto c9yTq;
       u9yTy: // global
           call _c9yTp(R1) args: 0, res: 0, upd: 0;
       c9yTq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yTp() //  [R1]
         { info_tbl: [(c9yTp,
                       label: block_c9yTp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yTp: // global
           R5 = P64[Sp + 8];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.510441987 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowList_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9yTD,
                       label: GHC.Event.EPoll.$fShowEvent_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yTD: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEvent1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.511209625 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_closure" {
     GHC.Event.EPoll.$fShowEvent_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEvent_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.511762985 UTC

[section ""data" . GHC.Event.EPoll.$fFiniteBitsEventType_closure" {
     GHC.Event.EPoll.$fFiniteBitsEventType_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const GHC.Event.EPoll.$fBitsEventType_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.512364926 UTC

[section ""data" . GHC.Event.EPoll.$fNumEventType_closure" {
     GHC.Event.EPoll.$fNumEventType_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Word.$fNumWord32_$c+_closure+2;
         const GHC.Word.$fNumWord32_$c-_closure+2;
         const GHC.Word.$fNumWord32_$c*_closure+2;
         const GHC.Word.$fNumWord32_$cnegate_closure+1;
         const GHC.Word.$fNumWord32_$cabs_closure+1;
         const GHC.Word.$fNumWord32_$csignum_closure+1;
         const GHC.Word.$fNumWord32_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.51297881 UTC

[section ""data" . GHC.Event.EPoll.$fEqEPollFd_closure" {
     GHC.Event.EPoll.$fEqEPollFd_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Int.eqInt32_closure+2;
         const GHC.Int.neInt32_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.513569052 UTC

[section ""cstring" . lvl_r9y01_bytes" {
     lvl_r9y01_bytes:
         I8[] [101,112,111,108,108,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.514288935 UTC

[section ""data" . lvl1_r9y02_closure" {
     lvl1_r9y02_closure:
         const lvl1_r9y02_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9y02_entry() //  [R1]
         { info_tbl: [(c9yTM,
                       label: lvl1_r9y02_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yTM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yTN; else goto c9yTO;
       c9yTN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yTO: // global
           (_c9yTJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9yTJ::I64 == 0) goto c9yTL; else goto c9yTK;
       c9yTL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9yTK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9yTJ::I64;
           R2 = lvl_r9y01_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.515265756 UTC

[section ""data" . GHC.Event.EPoll.new6_closure" {
     GHC.Event.EPoll.new6_closure:
         const GHC.Event.EPoll.new6_info;
         const 0;
 },
 GHC.Event.EPoll.new6_entry() //  [R2]
         { info_tbl: [(c9yTV,
                       label: GHC.Event.EPoll.new6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yTV: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_r9y02_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.515982452 UTC

[section ""cstring" . lvl2_r9y03_bytes" {
     lvl2_r9y03_bytes:
         I8[] [101,112,111,108,108,87,97,105,116,78,111,110,66,108,111,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.516709111 UTC

[section ""data" . lvl3_r9y04_closure" {
     lvl3_r9y04_closure:
         const lvl3_r9y04_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r9y04_entry() //  [R1]
         { info_tbl: [(c9yU4,
                       label: lvl3_r9y04_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yU4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yU5; else goto c9yU6;
       c9yU5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yU6: // global
           (_c9yU1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9yU1::I64 == 0) goto c9yU3; else goto c9yU2;
       c9yU3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9yU2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9yU1::I64;
           R2 = lvl2_r9y03_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.517594905 UTC

[section ""cstring" . lvl4_r9y05_bytes" {
     lvl4_r9y05_bytes:
         I8[] [101,112,111,108,108,87,97,105,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.518302229 UTC

[section ""data" . lvl5_r9y06_closure" {
     lvl5_r9y06_closure:
         const lvl5_r9y06_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r9y06_entry() //  [R1]
         { info_tbl: [(c9yUd,
                       label: lvl5_r9y06_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yUd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yUe; else goto c9yUf;
       c9yUe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yUf: // global
           (_c9yUa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9yUa::I64 == 0) goto c9yUc; else goto c9yUb;
       c9yUc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9yUb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9yUa::I64;
           R2 = lvl4_r9y05_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.519210934 UTC

[section ""cstring" . GHC.Event.EPoll.new8_bytes" {
     GHC.Event.EPoll.new8_bytes:
         I8[] [109,111,100,105,102,121,70,100,79,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.519961692 UTC

[section ""data" . GHC.Event.EPoll.new7_closure" {
     GHC.Event.EPoll.new7_closure:
         const GHC.Event.EPoll.new7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new7_entry() //  [R1]
         { info_tbl: [(c9yUm,
                       label: GHC.Event.EPoll.new7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yUm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yUn; else goto c9yUo;
       c9yUn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yUo: // global
           (_c9yUj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9yUj::I64 == 0) goto c9yUl; else goto c9yUk;
       c9yUl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9yUk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9yUj::I64;
           R2 = GHC.Event.EPoll.new8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.520852193 UTC

[section ""data" . lvl6_r9y07_closure" {
     lvl6_r9y07_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.521440756 UTC

[section ""data" . lvl7_r9y08_closure" {
     lvl7_r9y08_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.522000798 UTC

[section ""data" . lvl8_r9y09_closure" {
     lvl8_r9y09_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.527967045 UTC

[section ""data" . GHC.Event.EPoll.new10_closure" {
     GHC.Event.EPoll.new10_closure:
         const GHC.Event.EPoll.new10_info;
         const 0;
 },
 sat_s9y6v_entry() //  [R1]
         { info_tbl: [(c9yVy,
                       label: sat_s9y6v_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yVy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9yVz; else goto c9yWe;
       c9yVz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9yWe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s9y6m::I64 = I64[R1 + 16];
           if (_s9y6m::I64 & 25 == 0) goto c9yVx; else goto c9yVw;
       c9yVx: // global
           if (_s9y6m::I64 & 28 == 0) goto c9yWa; else goto c9yW4;
       c9yWa: // global
           R1 = GHC.Event.EPoll.$fShowEvent8_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9yW4: // global
           R1 = lvl8_r9y09_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9yVw: // global
           if (_s9y6m::I64 & 28 == 0) goto c9yVQ; else goto c9yVK;
       c9yVQ: // global
           R1 = lvl7_r9y08_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9yVK: // global
           R1 = lvl6_r9y07_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.new10_entry() //  [R2, R3, R4]
         { info_tbl: [(c9yWf,
                       label: GHC.Event.EPoll.new10_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yWf: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9yWg; else goto c9yWh;
       c9yWg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new10_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9yWh: // global
           I64[Sp - 24] = block_c9yUt_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9z2j; else goto c9yUu;
       u9z2j: // global
           call _c9yUt(R1) args: 0, res: 0, upd: 0;
       c9yUu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yUt() //  [R1]
         { info_tbl: [(c9yUt,
                       label: block_c9yUt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yUt: // global
           I64[Sp - 16] = block_c9yUy_info;
           _s9y4w::P64 = P64[R1 + 7];
           _s9y4v::I64 = I64[R1 + 15];
           R1 = P64[_s9y4w::P64 + 8];
           P64[Sp - 8] = _s9y4w::P64;
           I64[Sp] = _s9y4v::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9z2a; else goto c9yUz;
       u9z2a: // global
           call _c9yUy(R1) args: 0, res: 0, upd: 0;
       c9yUz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yUy() //  [R1]
         { info_tbl: [(c9yUy,
                       label: block_c9yUy_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yUy: // global
           I64[Sp - 8] = block_c9yUD_info;
           _s9y4D::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9y4D::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9z2b; else goto c9yUE;
       u9z2b: // global
           call _c9yUD(R1) args: 0, res: 0, upd: 0;
       c9yUE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yUD() //  [R1]
         { info_tbl: [(c9yUD,
                       label: block_c9yUD_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yUD: // global
           I64[Sp - 16] = block_c9yWk_info;
           _s9y4E::P64 = R1;
           _s9y4G::P64 = P64[R1 + 7];
           _s9y4F::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _s9y4G::P64;
           I64[Sp] = _s9y4F::I64;
           P64[Sp + 32] = _s9y4E::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9z2c; else goto c9yZv;
       u9z2c: // global
           call _c9yWk(R1) args: 0, res: 0, upd: 0;
       c9yZv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yWk() //  [R1]
         { info_tbl: [(c9yWk,
                       label: block_c9yWk_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yWk: // global
           if (R1 & 7 == 1) goto c9z0n; else goto c9z1q;
       c9z0n: // global
           (_s9y6F::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(I64[Sp + 40], I64[Sp + 16], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 24])), 0);
           _s9y6G::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y6F::I64));
           if (_s9y6G::I64 != (-1)) goto c9yZN; else goto c9yZT;
       c9yZN: // global
           I64[Sp + 40] = _s9y6G::I64;
           Sp = Sp + 8;
           call _c9yUL() args: 0, res: 0, upd: 0;
       c9yZT: // global
           (_s9y6K::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y6K::I64) == 4 :: W32) goto u9z1T; else goto c9z08;
       u9z1T: // global
           Sp = Sp + 8;
           call _c9z1m() args: 0, res: 0, upd: 0;
       c9z08: // global
           I64[Sp] = block_c9z04_info;
           R2 = lvl3_r9y04_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       c9z1q: // global
           I64[Sp] = block_c9z0s_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u9z2k; else goto c9z1r;
       u9z2k: // global
           call _c9z0s(R1) args: 0, res: 0, upd: 0;
       c9z1r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z04() //  [R1]
         { info_tbl: [(c9z04,
                       label: block_c9z04_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z04: // global
           I64[Sp] = block_c9z06_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9z2q; else goto c9z0b;
       u9z2q: // global
           call _c9z06(R1) args: 0, res: 0, upd: 0;
       c9z0b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z06() //  [R1]
         { info_tbl: [(c9z06,
                       label: block_c9z06_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z06: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9yUL() args: 0, res: 0, upd: 0;
     }
 },
 _c9z0s() //  [R1]
         { info_tbl: [(c9z0s,
                       label: block_c9z0s_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z0s: // global
           _s9y4v::I64 = I64[Sp + 40];
           _s9y4D::I64 = I64[Sp + 24];
           _s9y4F::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c9z1x; else goto c9z1B;
       c9z1x: // global
           _s9y6T::I64 = (I64[R1 + 7] + 999999) / 1000000;
           goto s9y6S;
       c9z1B: // global
           _s9y6T::I64 = (-1);
           goto s9y6S;
       s9y6S: // global
           I64[Sp] = block_c9z0J_info;
           _u9z22::P64 = CurrentTSO;
           I64[I64[_u9z22::P64 + 24] + 16] = Sp;
           _u9z23::I64 = CurrentNursery;
           P64[_u9z23::I64 + 8] = Hp + 8;
           I64[_u9z22::P64 + 104] = I64[_u9z22::P64 + 104] - ((Hp + 8) - I64[_u9z23::I64]);
           (_u9z20::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_s9y6Z::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(_s9y4v::I64, _s9y4F::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y4D::I64)), %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y6T::I64)));
           (_u9z21::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_u9z20::I64);
           BaseReg = _u9z21::I64;
           _u9z24::P64 = CurrentTSO;
           _u9z25::P64 = I64[_u9z24::P64 + 24];
           Sp = I64[_u9z25::P64 + 16];
           SpLim = _u9z25::P64 + 192;
           HpAlloc = 0;
           _u9z26::I64 = CurrentNursery;
           _u9z27::I64 = I64[_u9z26::I64 + 8];
           Hp = _u9z27::I64 - 8;
           _u9z28::I64 = I64[_u9z26::I64];
           HpLim = _u9z28::I64 + ((%MO_SS_Conv_W32_W64(I32[_u9z26::I64 + 48]) << 12) - 1);
           I64[_u9z24::P64 + 104] = I64[_u9z24::P64 + 104] + (_u9z27::I64 - _u9z28::I64);
           R1 = _s9y6Z::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z0J() //  [R1]
         { info_tbl: [(c9z0J,
                       label: block_c9z0J_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z0J: // global
           _s9y70::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R1));
           if (_s9y70::I64 != (-1)) goto c9z0R; else goto c9z0X;
       c9z0R: // global
           I64[Sp + 40] = _s9y70::I64;
           Sp = Sp + 8;
           call _c9yUL() args: 0, res: 0, upd: 0;
       c9z0X: // global
           (_s9y74::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y74::I64) == 4 :: W32) goto u9z1Q; else goto c9z1c;
       u9z1Q: // global
           Sp = Sp + 8;
           call _c9z1m() args: 0, res: 0, upd: 0;
       c9z1c: // global
           I64[Sp] = block_c9z18_info;
           R2 = lvl5_r9y06_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9z1m() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z1m: // global
           I64[Sp + 32] = 0;
           call _c9yUL() args: 0, res: 0, upd: 0;
     }
 },
 _c9z18() //  [R1]
         { info_tbl: [(c9z18,
                       label: block_c9z18_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z18: // global
           I64[Sp] = block_c9z1a_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9z2u; else goto c9z1f;
       u9z2u: // global
           call _c9z1a(R1) args: 0, res: 0, upd: 0;
       c9z1f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z1a() //  [R1]
         { info_tbl: [(c9z1a,
                       label: block_c9z1a_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z1a: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9yUL() args: 0, res: 0, upd: 0;
     }
 },
 _c9yUL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yUL: // global
           Hp = Hp + 48;
           _s9y4J::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c9yWo; else goto c9yWn;
       c9yWo: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_c9yUK_info;
           R1 = _s9y4J::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9yWn: // global
           _s9y4w::P64 = P64[Sp + 24];
           _s9y4D::I64 = I64[Sp + 16];
           _s9y4E::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = _s9y4E::P64;
           I64[Hp - 24] = _s9y4J::I64;
           I64[Hp - 16] = _s9y4D::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           if (%MO_S_Le_W64(_s9y4J::I64, 0)) goto c9yWr; else goto c9yWs;
       c9yWr: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yWs: // global
           _s9y4R::P64 = P64[_s9y4w::P64 + 8];
           Hp = Hp - 16;
           I64[Sp + 16] = block_c9yUW_info;
           R1 = _s9y4R::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9z2e; else goto c9yUX;
       u9z2e: // global
           call _c9yUW(R1) args: 0, res: 0, upd: 0;
       c9yUX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yUK() //  [R1]
         { info_tbl: [(c9yUK,
                       label: block_c9yUK_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yUK: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c9yUL() args: 0, res: 0, upd: 0;
     }
 },
 _c9yUW() //  [R1]
         { info_tbl: [(c9yUW,
                       label: block_c9yUW_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yUW: // global
           I64[Sp] = block_c9yV1_info;
           _s9y4U::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp + 24] = _s9y4U::I64;
           if (R1 & 7 != 0) goto u9z2f; else goto c9yV2;
       u9z2f: // global
           call _c9yV1(R1) args: 0, res: 0, upd: 0;
       c9yV2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yV1() //  [R1]
         { info_tbl: [(c9yV1,
                       label: block_c9yV1_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yV1: // global
           I64[Sp - 16] = I64[Sp + 24] * 12;
           I64[Sp - 8] = 0;
           P64[Sp] = P64[R1 + 7];
           I64[Sp + 24] = I64[R1 + 15];
           Sp = Sp - 16;
           call _c9yVe() args: 0, res: 0, upd: 0;
     }
 },
 _c9yVe() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yVe: // global
           Hp = Hp + 40;
           _s9y6g::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c9yZn; else goto c9yZm;
       c9yZn: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c9yVd_info;
           R1 = _s9y6g::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9yZm: // global
           if (%MO_S_Lt_W64(_s9y6g::I64,
                            I64[Sp])) goto c9yZr; else goto c9yZu;
       c9yZr: // global
           _s9y6j::I64 = I64[Sp + 40] + _s9y6g::I64;
           _s9y6m::I64 = %MO_UU_Conv_W32_W64(I32[_s9y6j::I64]);
           _s9y6q::I64 = %MO_SS_Conv_W32_W64(I32[_s9y6j::I64 + 4]);
           I64[Hp - 32] = sat_s9y6v_info;
           I64[Hp - 16] = _s9y6m::I64;
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9y6q::I64;
           I64[Sp - 8] = block_c9yZp_info;
           R3 = Hp - 32;
           R2 = Hp - 7;
           R1 = P64[Sp + 48];
           Sp = Sp - 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       c9yZu: // global
           Hp = Hp - 40;
           _s9y4w::P64 = P64[Sp + 24];
           call MO_Touch(P64[Sp + 16]);
           I64[Sp + 16] = block_c9yWz_info;
           R1 = P64[_s9y4w::P64 + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9z2i; else goto c9yWB;
       u9z2i: // global
           call _c9yWz(R1) args: 0, res: 0, upd: 0;
       c9yWB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yVd() //  [R1]
         { info_tbl: [(c9yVd,
                       label: block_c9yVd_info
                       rep:StackRep [True, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yVd: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c9yVe() args: 0, res: 0, upd: 0;
     }
 },
 _c9yZp() //  []
         { info_tbl: [(c9yZp,
                       label: block_c9yZp_info
                       rep:StackRep [True, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yZp: // global
           I64[Sp + 16] = I64[Sp + 16] + 12;
           Sp = Sp + 8;
           call _c9yVe() args: 0, res: 0, upd: 0;
     }
 },
 _c9yWz() //  [R1]
         { info_tbl: [(c9yWz,
                       label: block_c9yWz_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yWz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9yWH; else goto c9yWG;
       c9yWH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yWG: // global
           _s9y4J::I64 = I64[Sp + 16];
           _s9y59::I64 = I64[R1 + 23];
           if (_s9y59::I64 == _s9y4J::I64) goto c9yWV; else goto c9yWN;
       c9yWV: // global
           Hp = Hp - 16;
           _s9y5e::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_c9yWP_info;
           R1 = _s9y5e::P64;
           I64[Sp + 32] = _s9y59::I64;
           if (R1 & 7 != 0) goto u9z2n; else goto c9yWQ;
       u9z2n: // global
           call _c9yWP(R1) args: 0, res: 0, upd: 0;
       c9yWQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9yWN: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9yWP() //  [R1]
         { info_tbl: [(c9yWP,
                       label: block_c9yWP_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yWP: // global
           I64[Sp - 8] = block_c9yWU_info;
           _s9y5h::I64 = I64[R1 + 15];
           _s9y5i::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9y5i::I64;
           I64[Sp + 24] = _s9y5h::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9z2o; else goto c9yWX;
       u9z2o: // global
           call _c9yWU(R1) args: 0, res: 0, upd: 0;
       c9yWX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9yWU() //  [R1]
         { info_tbl: [(c9yWU,
                       label: block_c9yWU_info
                       rep:StackRep [True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yWU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9yX3; else goto c9yX2;
       c9yX3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yX2: // global
           _s9y5m::I64 = I64[Sp + 40] << 1;
           if (%MO_S_Le_W64(_s9y5m::I64,
                            I64[Sp + 8])) goto c9yXc; else goto c9yZk;
       c9yXc: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yZk: // global
           _s9y5p::I64 = _s9y5m::I64 - 1;
           _s9y5q::I64 = _s9y5p::I64 | %MO_S_Shr_W64(_s9y5p::I64, 1);
           _s9y5s::I64 = _s9y5q::I64 | %MO_S_Shr_W64(_s9y5q::I64, 2);
           _s9y5u::I64 = _s9y5s::I64 | %MO_S_Shr_W64(_s9y5s::I64, 4);
           _s9y5w::I64 = _s9y5u::I64 | %MO_S_Shr_W64(_s9y5u::I64, 8);
           _s9y5y::I64 = _s9y5w::I64 | %MO_S_Shr_W64(_s9y5w::I64, 16);
           _s9y5A::I64 = _s9y5y::I64 | %MO_S_Shr_W64(_s9y5y::I64, 32) + 1;
           _s9y5D::I64 = _s9y5A::I64 * 12;
           if (%MO_S_Ge_W64(_s9y5D::I64, 0)) goto c9yY2; else goto c9yZj;
       c9yY2: // global
           _s9y5l::P64 = P64[R1 + 7];
           _s9y5k::I64 = I64[R1 + 15];
           Hp = Hp - 16;
           I64[Sp - 16] = block_c9yY0_info;
           R1 = _s9y5D::I64;
           I64[Sp - 8] = _s9y5A::I64;
           P64[Sp] = _s9y5l::P64;
           I64[Sp + 40] = _s9y5k::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c9yZj: // global
           Hp = Hp - 16;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9yY0() //  [R1]
         { info_tbl: [(c9yY0,
                       label: block_c9yY0_info
                       rep:StackRep [True, False, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9yY0: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c9yY6; else goto c9yY5;
       c9yY6: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9yY5: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 72] = R1;
           _s9y4w::P64 = P64[Sp + 32];
           _s9y4J::I64 = I64[Sp + 40];
           _s9y5h::I64 = I64[Sp + 48];
           _s9y5i::I64 = I64[Sp + 24];
           _s9y5k::I64 = I64[Sp + 56];
           _s9y5l::P64 = P64[Sp + 16];
           _s9y5A::I64 = I64[Sp + 8];
           _s9y5I::I64 = R1 + 16;
           _c9yYa::P64 = Hp - 77;
           if (_s9y5k::I64 == 0) goto c9yZi; else goto c9yZ1;
       c9yZi: // global
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9yZ9; else goto c9yZh;
       c9yZ9: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9yZ7::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9yZ7::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yZh: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9yYa::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yZ1: // global
           if (%MO_S_Le_W64(_s9y5i::I64, 0)) goto c9yYx; else goto c9yYZ;
       c9yYx: // global
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9yYn; else goto c9yYv;
       c9yYn: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9yYl::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9yYl::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yYv: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9yYa::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yYZ: // global
           (_s9y5Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s9y5I::I64, _s9y5k::I64, _s9y5i::I64 * 12);
           call MO_Touch(_c9yYa::P64);
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9yYQ; else goto c9yYY;
       c9yYQ: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9yYO::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9yYO::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9yYY: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9yYa::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.538302454 UTC

[section ""data" . GHC.Event.EPoll.new9_closure" {
     GHC.Event.EPoll.new9_closure:
         const GHC.Event.EPoll.new9_info;
         const 0;
 },
 GHC.Event.EPoll.new9_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9z2G,
                       label: GHC.Event.EPoll.new9_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z2G: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9z2H; else goto c9z2I;
       c9z2H: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new9_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9z2I: // global
           I64[Sp - 40] = block_c9z2B_info;
           _s9y7h::P64 = R2;
           R2 = 4;
           R1 = 12;
           P64[Sp - 32] = _s9y7h::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z2B() //  [R1]
         { info_tbl: [(c9z2B,
                       label: block_c9z2B_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z2B: // global
           I64[Sp] = block_c9z2D_info;
           _s9y7r::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _s9y7r::P64;
           if (R1 & 7 != 0) goto u9z4B; else goto c9z2E;
       u9z4B: // global
           call _c9z2D(R1) args: 0, res: 0, upd: 0;
       c9z2E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z2D() //  [R1]
         { info_tbl: [(c9z2D,
                       label: block_c9z2D_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z2D: // global
           _s9y7i::P64 = P64[Sp + 16];
           _s9y7r::P64 = P64[Sp + 32];
           _s9y7t::I64 = I64[R1 + 7];
           if (_s9y7t::I64 & 1 == 0) goto c9z4g; else goto c9z3V;
       c9z4g: // global
           if (_s9y7t::I64 & 2 == 0) goto c9z4v; else goto c9z4p;
       c9z4v: // global
           _s9y7v::I64 = 0;
           goto s9y7u;
       c9z4p: // global
           _s9y7v::I64 = 4;
           goto s9y7u;
       c9z3V: // global
           if (_s9y7t::I64 & 2 == 0) goto c9z4a; else goto c9z44;
       c9z4a: // global
           _s9y7v::I64 = 1;
           goto s9y7u;
       c9z44: // global
           _s9y7v::I64 = 5;
           goto s9y7u;
       s9y7u: // global
           _s9y7w::I64 = _s9y7r::P64 + 16;
           I32[_s9y7w::I64] = %MO_UU_Conv_W64_W32(_s9y7v::I64);
           I64[Sp - 8] = block_c9z2V_info;
           R1 = _s9y7i::P64;
           I64[Sp] = _s9y7w::I64;
           I64[Sp + 16] = _s9y7t::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9z4C; else goto c9z2W;
       u9z4C: // global
           call _c9z2V(R1) args: 0, res: 0, upd: 0;
       c9z2W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z2V() //  [R1]
         { info_tbl: [(c9z2V,
                       label: block_c9z2V_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z2V: // global
           _s9y7h::P64 = P64[Sp + 16];
           _s9y7z::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9y7z::I64);
           I64[Sp] = block_c9z33_info;
           R1 = _s9y7h::P64;
           I64[Sp + 16] = _s9y7z::I64;
           if (R1 & 7 != 0) goto u9z4D; else goto c9z34;
       u9z4D: // global
           call _c9z33(R1) args: 0, res: 0, upd: 0;
       c9z34: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z33() //  [R1]
         { info_tbl: [(c9z33,
                       label: block_c9z33_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z33: // global
           I64[Sp] = block_c9z38_info;
           _s9y7D::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s9y7D::I64;
           if (R1 & 7 != 0) goto u9z4E; else goto c9z3c;
       u9z4E: // global
           call _c9z38(R1) args: 0, res: 0, upd: 0;
       c9z3c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z38() //  [R1]
         { info_tbl: [(c9z38,
                       label: block_c9z38_info
                       rep:StackRep [True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z38: // global
           _s9y7r::P64 = P64[Sp + 40];
           _s9y7w::I64 = I64[Sp + 8];
           _s9y7z::I64 = I64[Sp + 16];
           _s9y7D::I64 = I64[Sp + 32];
           if (I64[R1 + 7] == 0) goto c9z3P; else goto c9z3O;
       c9z3P: // global
           _s9y7I::I64 = 1;
           goto s9y7H;
       c9z3O: // global
           if (I64[Sp + 24] == 0) goto c9z3M; else goto c9z3L;
       c9z3M: // global
           _s9y7I::I64 = 2;
           goto s9y7H;
       c9z3L: // global
           _s9y7I::I64 = 3;
           goto s9y7H;
       s9y7H: // global
           (_s9y7M::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y7D::I64, _s9y7I::I64, _s9y7z::I64, _s9y7w::I64);
           if (%MO_SS_Conv_W64_W32(_s9y7M::I64) == (-1) :: W32) goto c9z3D; else goto c9z3x;
       c9z3D: // global
           (_s9y7S::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y7S::I64;
           Sp = Sp + 48;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9z3x: // global
           call MO_Touch(_s9y7r::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.542457133 UTC

[section ""data" . GHC.Event.EPoll.new5_closure" {
     GHC.Event.EPoll.new5_closure:
         const GHC.Event.EPoll.new5_info;
         const 0;
 },
 GHC.Event.EPoll.new5_entry() //  [R2, R3, R4]
         { info_tbl: [(c9z4M,
                       label: GHC.Event.EPoll.new5_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z4M: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9z4N; else goto c9z4O;
       c9z4N: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9z4O: // global
           I64[Sp - 24] = block_c9z4J_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9z7b; else goto c9z4K;
       u9z7b: // global
           call _c9z4J(R1) args: 0, res: 0, upd: 0;
       c9z4K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z4J() //  [R1]
         { info_tbl: [(c9z4J,
                       label: block_c9z4J_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z4J: // global
           _s9y84::I64 = I64[R1 + 7];
           if (_s9y84::I64 & 1 == 0) goto c9z6Q; else goto c9z6v;
       c9z6Q: // global
           if (_s9y84::I64 & 2 == 0) goto c9z75; else goto c9z6Z;
       c9z75: // global
           _s9y86::I64 = 0;
           goto s9y85;
       c9z6Z: // global
           _s9y86::I64 = 4;
           goto s9y85;
       c9z6v: // global
           if (_s9y84::I64 & 2 == 0) goto c9z6K; else goto c9z6E;
       c9z6K: // global
           _s9y86::I64 = 1;
           goto s9y85;
       c9z6E: // global
           _s9y86::I64 = 5;
           goto s9y85;
       s9y85: // global
           I64[Sp - 8] = block_c9z4X_info;
           R2 = 4;
           R1 = 12;
           I64[Sp] = _s9y86::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z4X() //  [R1]
         { info_tbl: [(c9z4X,
                       label: block_c9z4X_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z4X: // global
           _s9y80::P64 = P64[Sp + 24];
           _s9y8d::I64 = I64[Sp + 8] | 1073741824;
           _s9y8e::I64 = R1 + 16;
           I32[_s9y8e::I64] = %MO_UU_Conv_W64_W32(_s9y8d::I64);
           I64[Sp - 8] = block_c9z55_info;
           _s9y8c::P64 = R1;
           R1 = _s9y80::P64;
           I64[Sp] = _s9y8e::I64;
           I64[Sp + 8] = _s9y8d::I64;
           P64[Sp + 24] = _s9y8c::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9z7c; else goto c9z56;
       u9z7c: // global
           call _c9z55(R1) args: 0, res: 0, upd: 0;
       c9z56: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z55() //  [R1]
         { info_tbl: [(c9z55,
                       label: block_c9z55_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z55: // global
           _s9y7Z::P64 = P64[Sp + 24];
           _s9y8h::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9y8h::I64);
           I64[Sp] = block_c9z5d_info;
           R1 = _s9y7Z::P64;
           I64[Sp + 24] = _s9y8h::I64;
           if (R1 & 7 != 0) goto u9z7d; else goto c9z5h;
       u9z7d: // global
           call _c9z5d(R1) args: 0, res: 0, upd: 0;
       c9z5h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z5d() //  [R1]
         { info_tbl: [(c9z5d,
                       label: block_c9z5d_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z5d: // global
           _s9y8c::P64 = P64[Sp + 32];
           _s9y8l::I64 = I64[R1 + 15];
           (_s9y8q::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y8l::I64, 3, I64[Sp + 24], I64[Sp + 8]);
           call MO_Touch(_s9y8c::P64);
           if (%MO_SS_Conv_W64_W32(_s9y8q::I64) == 0 :: W32) goto c9z6m; else goto c9z5x;
       c9z6m: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9z5x: // global
           (_s9y8w::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y8w::I64) == 2 :: W32) goto c9z5Q; else goto c9z5H;
       c9z5Q: // global
           I64[Sp + 8] = block_c9z5P_info;
           R2 = 4;
           R1 = 12;
           I64[Sp + 32] = _s9y8l::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c9z5H: // global
           R2 = GHC.Event.EPoll.new7_closure;
           Sp = Sp + 40;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9z5P() //  [R1]
         { info_tbl: [(c9z5P,
                       label: block_c9z5P_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z5P: // global
           _s9y8h::I64 = I64[Sp + 16];
           _s9y8l::I64 = I64[Sp + 24];
           _s9y8E::I64 = R1 + 16;
           I32[_s9y8E::I64] = %MO_UU_Conv_W64_W32(I64[Sp + 8]);
           I32[_s9y8E::I64 + 4] = %MO_UU_Conv_W64_W32(_s9y8h::I64);
           (_s9y8L::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y8l::I64, 1, _s9y8h::I64, _s9y8E::I64);
           if (%MO_SS_Conv_W64_W32(_s9y8L::I64) == (-1) :: W32) goto c9z6g; else goto c9z6a;
       c9z6g: // global
           (_s9y8R::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y8R::I64;
           Sp = Sp + 32;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9z6a: // global
           call MO_Touch(R1);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.545393284 UTC

[section ""data" . GHC.Event.EPoll.new4_closure" {
     GHC.Event.EPoll.new4_closure:
         const GHC.Event.EPoll.new4_info;
 },
 GHC.Event.EPoll.new4_entry() //  [R2]
         { info_tbl: [(c9z7l,
                       label: GHC.Event.EPoll.new4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z7l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9z7m; else goto c9z7n;
       c9z7m: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.new4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9z7n: // global
           I64[Sp - 8] = block_c9z7i_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9z7t; else goto c9z7j;
       u9z7t: // global
           call _c9z7i(R1) args: 0, res: 0, upd: 0;
       c9z7j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z7i() //  [R1]
         { info_tbl: [(c9z7i,
                       label: block_c9z7i_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z7i: // global
           (_s9y94::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(I64[R1 + 15]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.548977215 UTC

[section ""data" . GHC.Event.EPoll.$w$j_closure" {
     GHC.Event.EPoll.$w$j_closure:
         const GHC.Event.EPoll.$w$j_info;
         const 0;
 },
 GHC.Event.EPoll.$w$j_entry() //  [R2]
         { info_tbl: [(c9z7C,
                       label: GHC.Event.EPoll.$w$j_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z7C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9z7D; else goto c9z7E;
       c9z7D: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$j_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9z7E: // global
           (_s9y9a::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfd();
           (_s9y9e::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_fd_cloexec();
           (_s9y9j::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(R2, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y9a::I64)), _s9y9e::I64);
           if (%MO_SS_Conv_W64_W32(_s9y9j::I64) == (-1) :: W32) goto c9z8d; else goto c9z83;
       c9z8d: // global
           (_s9y9A::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y9A::I64;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       c9z83: // global
           I64[Sp - 16] = block_c9z7Q_info;
           R1 = 768;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z7Q() //  [R1]
         { info_tbl: [(c9z7Q,
                       label: block_c9z7Q_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z7Q: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9z87; else goto c9z86;
       c9z87: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9z86: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 61;
           P64[Hp - 32] = R1 + 16;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 64;
           I64[Sp] = block_c9z7Y_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z7Y() //  [R1]
         { info_tbl: [(c9z7Y,
                       label: block_c9z7Y_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z7Y: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9z8a; else goto c9z89;
       c9z8a: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9z89: // global
           I64[Hp - 64] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.Event.Internal.Backend_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = GHC.Event.EPoll.new10_closure+4;
           P64[Hp - 16] = GHC.Event.EPoll.new9_closure+5;
           P64[Hp - 8] = GHC.Event.EPoll.new5_closure+4;
           P64[Hp] = GHC.Event.EPoll.new4_closure+2;
           R1 = Hp - 39;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.550584975 UTC

[section ""cstring" . GHC.Event.EPoll.new3_bytes" {
     GHC.Event.EPoll.new3_bytes:
         I8[] [101,112,111,108,108,67,114,101,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.551293003 UTC

[section ""data" . GHC.Event.EPoll.new2_closure" {
     GHC.Event.EPoll.new2_closure:
         const GHC.Event.EPoll.new2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new2_entry() //  [R1]
         { info_tbl: [(c9z8o,
                       label: GHC.Event.EPoll.new2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z8o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9z8p; else goto c9z8q;
       c9z8p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9z8q: // global
           (_c9z8l::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9z8l::I64 == 0) goto c9z8n; else goto c9z8m;
       c9z8n: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9z8m: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9z8l::I64;
           R2 = GHC.Event.EPoll.new3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.552436509 UTC

[section ""data" . GHC.Event.EPoll.new1_closure" {
     GHC.Event.EPoll.new1_closure:
         const GHC.Event.EPoll.new1_info;
         const 0;
 },
 GHC.Event.EPoll.new1_entry() //  []
         { info_tbl: [(c9z8C,
                       label: GHC.Event.EPoll.new1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z8C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9z8D; else goto c9z8E;
       c9z8D: // global
           R1 = GHC.Event.EPoll.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9z8E: // global
           (_s9y9G::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] epoll_create(256);
           _s9y9H::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y9G::I64));
           if (_s9y9H::I64 != (-1)) goto c9z8A; else goto c9z8B;
       c9z8A: // global
           R2 = _s9y9H::I64;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
       c9z8B: // global
           I64[Sp - 8] = block_c9z8O_info;
           R2 = GHC.Event.EPoll.new2_closure;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9z8O() //  [R1]
         { info_tbl: [(c9z8O,
                       label: block_c9z8O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z8O: // global
           I64[Sp] = block_c9z8Q_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9z8Y; else goto c9z8T;
       u9z8Y: // global
           call _c9z8Q(R1) args: 0, res: 0, upd: 0;
       c9z8T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z8Q() //  [R1]
         { info_tbl: [(c9z8Q,
                       label: block_c9z8Q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z8Q: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.553719066 UTC

[section ""data" . GHC.Event.EPoll.new_closure" {
     GHC.Event.EPoll.new_closure:
         const GHC.Event.EPoll.new_info;
         const 0;
 },
 GHC.Event.EPoll.new_entry() //  []
         { info_tbl: [(c9z93,
                       label: GHC.Event.EPoll.new_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z93: // global
           call GHC.Event.EPoll.new1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.554565699 UTC

[section ""data" . GHC.Event.EPoll.Event_closure" {
     GHC.Event.EPoll.Event_closure:
         const GHC.Event.EPoll.Event_info;
 },
 GHC.Event.EPoll.Event_entry() //  [R2, R3]
         { info_tbl: [(c9z9b,
                       label: GHC.Event.EPoll.Event_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z9b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9z9f; else goto c9z9e;
       c9z9f: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.Event_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9z9e: // global
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.555490582 UTC

[section ""data" . GHC.Event.EPoll.EPoll_closure" {
     GHC.Event.EPoll.EPoll_closure:
         const GHC.Event.EPoll.EPoll_info;
 },
 GHC.Event.EPoll.EPoll_entry() //  [R2, R3]
         { info_tbl: [(c9z9l,
                       label: GHC.Event.EPoll.EPoll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z9l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9z9p; else goto c9z9o;
       c9z9p: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.EPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9z9o: // global
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.556363187 UTC

[GHC.Event.EPoll.Event_con_entry() //  [R1]
         { info_tbl: [(c9z9q,
                       label: GHC.Event.EPoll.Event_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,118,101,110,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z9q: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.557104915 UTC

[GHC.Event.EPoll.EPoll_con_entry() //  [R1]
         { info_tbl: [(c9z9s,
                       label: GHC.Event.EPoll.EPoll_con_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,80,111,108,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z9s: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.557807411 UTC

[section ""relreadonly" . S9yi5_srt" {
     S9yi5_srt:
         const GHC.Event.EPoll.$fShowEPollFd5_closure;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Event.EPoll.$fShowEvent6_closure;
         const GHC.Event.EPoll.$w$cshowsPrec1_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure;
         const GHC.Event.EPoll.$fShowEvent1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_r9y02_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.EPoll.new10_closure;
         const lvl3_r9y04_closure;
         const lvl5_r9y06_closure;
         const GHC.Event.EPoll.new6_closure;
         const GHC.Event.EPoll.new9_closure;
         const GHC.Event.EPoll.new5_closure;
         const GHC.Event.EPoll.new7_closure;
         const System.Posix.Internals.setCloseOnExec2_closure;
         const GHC.Event.EPoll.$w$j_closure;
         const GHC.Event.EPoll.new1_closure;
         const GHC.Event.EPoll.new2_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.558753587 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:39.560271449 UTC

[section ""data" . GHC.Event.EPoll.$WEPoll_closure" {
     GHC.Event.EPoll.$WEPoll_closure:
         const GHC.Event.EPoll.$WEPoll_info;
 },
 GHC.Event.EPoll.$WEPoll_entry() //  [R2, R3]
         { info_tbl: [(c9z9B,
                       label: GHC.Event.EPoll.$WEPoll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z9B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9z9K; else goto c9z9L;
       c9z9K: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$WEPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9z9L: // global
           I64[Sp - 16] = block_c9z9y_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9z9R; else goto c9z9z;
       u9z9R: // global
           call _c9z9y(R1) args: 0, res: 0, upd: 0;
       c9z9z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z9y() //  [R1]
         { info_tbl: [(c9z9y,
                       label: block_c9z9y_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z9y: // global
           I64[Sp] = block_c9z9E_info;
           _s9y0e::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0e::I64;
           if (R1 & 7 != 0) goto u9z9Q; else goto c9z9F;
       u9z9Q: // global
           call _c9z9E(R1) args: 0, res: 0, upd: 0;
       c9z9F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9z9E() //  [R1]
         { info_tbl: [(c9z9E,
                       label: block_c9z9E_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9z9E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9z9P; else goto c9z9O;
       c9z9P: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9z9O: // global
           _s9y0g::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = _s9y0g::P64;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.567953536 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$calignment_closure" {
     GHC.Event.EPoll.$fStorableEvent_$calignment_closure:
         const GHC.Event.EPoll.$fStorableEvent_$calignment_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$calignment_entry() //  []
         { info_tbl: [(c9zab,
                       label: GHC.Event.EPoll.$fStorableEvent_$calignment_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zab: // global
           R1 = Foreign.Storable.$fStorableBool7_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.571173374 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent7_closure" {
     GHC.Event.EPoll.$fStorableEvent7_closure:
         const GHC.Types.I#_con_info;
         const 12;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.572929122 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure" {
     GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure:
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$csizeOf_entry() //  []
         { info_tbl: [(c9zao,
                       label: GHC.Event.EPoll.$fStorableEvent_$csizeOf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zao: // global
           R1 = GHC.Event.EPoll.$fStorableEvent7_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.576495959 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent2_closure" {
     GHC.Event.EPoll.$fStorableEvent2_closure:
         const GHC.Event.EPoll.$fStorableEvent2_info;
 },
 GHC.Event.EPoll.$fStorableEvent2_entry() //  [R2]
         { info_tbl: [(c9zaD,
                       label: GHC.Event.EPoll.$fStorableEvent2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zaD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zaM; else goto c9zaN;
       c9zaM: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zaN: // global
           I64[Sp - 8] = block_c9zaA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zaR; else goto c9zaB;
       u9zaR: // global
           call _c9zaA(R1) args: 0, res: 0, upd: 0;
       c9zaB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zaA() //  [R1]
         { info_tbl: [(c9zaA,
                       label: block_c9zaA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zaA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9zaQ; else goto c9zaP;
       c9zaQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zaP: // global
           _s9y0m::I64 = I64[R1 + 7];
           _s9y0p::I64 = %MO_UU_Conv_W32_W64(I32[_s9y0m::I64]);
           _s9y0t::I64 = %MO_SS_Conv_W32_W64(I32[_s9y0m::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y0t::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y0p::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.583210331 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent1_closure" {
     GHC.Event.EPoll.$fStorableEvent1_closure:
         const GHC.Event.EPoll.$fStorableEvent1_info;
 },
 GHC.Event.EPoll.$fStorableEvent1_entry() //  [R2, R3]
         { info_tbl: [(c9zbb,
                       label: GHC.Event.EPoll.$fStorableEvent1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zbb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9zbp; else goto c9zbq;
       c9zbp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zbq: // global
           I64[Sp - 16] = block_c9zb8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zbB; else goto c9zb9;
       u9zbB: // global
           call _c9zb8(R1) args: 0, res: 0, upd: 0;
       c9zb9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zb8() //  [R1]
         { info_tbl: [(c9zb8,
                       label: block_c9zb8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zb8: // global
           I64[Sp] = block_c9zbe_info;
           _s9y0B::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0B::I64;
           if (R1 & 7 != 0) goto u9zbA; else goto c9zbf;
       u9zbA: // global
           call _c9zbe(R1) args: 0, res: 0, upd: 0;
       c9zbf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zbe() //  [R1]
         { info_tbl: [(c9zbe,
                       label: block_c9zbe_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zbe: // global
           I64[Sp - 8] = block_c9zbj_info;
           _s9y0E::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y0E::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zbC; else goto c9zbk;
       u9zbC: // global
           call _c9zbj(R1) args: 0, res: 0, upd: 0;
       c9zbk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zbj() //  [R1]
         { info_tbl: [(c9zbj,
                       label: block_c9zbj_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zbj: // global
           _s9y0E::P64 = P64[Sp + 8];
           I32[I64[Sp + 16]] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 8] = block_c9zbo_info;
           R1 = _s9y0E::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9zbD; else goto c9zbu;
       u9zbD: // global
           call _c9zbo(R1) args: 0, res: 0, upd: 0;
       c9zbu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zbo() //  [R1]
         { info_tbl: [(c9zbo,
                       label: block_c9zbo_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zbo: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.595442608 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent4_closure" {
     GHC.Event.EPoll.$fStorableEvent4_closure:
         const GHC.Event.EPoll.$fStorableEvent4_info;
 },
 GHC.Event.EPoll.$fStorableEvent4_entry() //  [R2, R3]
         { info_tbl: [(c9zcb,
                       label: GHC.Event.EPoll.$fStorableEvent4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zcb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zcs; else goto c9zct;
       c9zcs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zct: // global
           I64[Sp - 16] = block_c9zc8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zcz; else goto c9zc9;
       u9zcz: // global
           call _c9zc8(R1) args: 0, res: 0, upd: 0;
       c9zc9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zc8() //  [R1]
         { info_tbl: [(c9zc8,
                       label: block_c9zc8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zc8: // global
           I64[Sp] = block_c9zce_info;
           _s9y0Q::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0Q::I64;
           if (R1 & 7 != 0) goto u9zcy; else goto c9zcf;
       u9zcy: // global
           call _c9zce(R1) args: 0, res: 0, upd: 0;
       c9zcf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zce() //  [R1]
         { info_tbl: [(c9zce,
                       label: block_c9zce_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zce: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9zcx; else goto c9zcw;
       c9zcx: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zcw: // global
           _s9y0T::I64 = I64[Sp + 8] + I64[R1 + 7];
           _s9y0W::I64 = %MO_UU_Conv_W32_W64(I32[_s9y0T::I64]);
           _s9y10::I64 = %MO_SS_Conv_W32_W64(I32[_s9y0T::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y10::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y0W::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.603915086 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent6_closure" {
     GHC.Event.EPoll.$fStorableEvent6_closure:
         const GHC.Event.EPoll.$fStorableEvent6_info;
 },
 GHC.Event.EPoll.$fStorableEvent6_entry() //  [R2, R3]
         { info_tbl: [(c9zcZ,
                       label: GHC.Event.EPoll.$fStorableEvent6_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zcZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zdj; else goto c9zdk;
       c9zdj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zdk: // global
           I64[Sp - 16] = block_c9zcW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zdq; else goto c9zcX;
       u9zdq: // global
           call _c9zcW(R1) args: 0, res: 0, upd: 0;
       c9zcX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zcW() //  [R1]
         { info_tbl: [(c9zcW,
                       label: block_c9zcW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zcW: // global
           I64[Sp] = block_c9zd2_info;
           _s9y18::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y18::I64;
           if (R1 & 7 != 0) goto u9zdp; else goto c9zd3;
       u9zdp: // global
           call _c9zd2(R1) args: 0, res: 0, upd: 0;
       c9zd3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zd2() //  [R1]
         { info_tbl: [(c9zd2,
                       label: block_c9zd2_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zd2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9zdo; else goto c9zdn;
       c9zdo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zdn: // global
           _s9y1b::I64 = I64[Sp + 8] + I64[R1 + 7] * 12;
           _s9y1f::I64 = %MO_UU_Conv_W32_W64(I32[_s9y1b::I64]);
           _s9y1j::I64 = %MO_SS_Conv_W32_W64(I32[_s9y1b::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y1j::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y1f::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.612364791 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent3_closure" {
     GHC.Event.EPoll.$fStorableEvent3_closure:
         const GHC.Event.EPoll.$fStorableEvent3_info;
 },
 GHC.Event.EPoll.$fStorableEvent3_entry() //  [R2, R3, R4]
         { info_tbl: [(c9zdR,
                       label: GHC.Event.EPoll.$fStorableEvent3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zdR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zed; else goto c9zee;
       c9zed: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zee: // global
           I64[Sp - 24] = block_c9zdO_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zeq; else goto c9zdP;
       u9zeq: // global
           call _c9zdO(R1) args: 0, res: 0, upd: 0;
       c9zdP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zdO() //  [R1]
         { info_tbl: [(c9zdO,
                       label: block_c9zdO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zdO: // global
           I64[Sp] = block_c9zdU_info;
           _s9y1s::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y1s::I64;
           if (R1 & 7 != 0) goto u9zep; else goto c9zdV;
       u9zep: // global
           call _c9zdU(R1) args: 0, res: 0, upd: 0;
       c9zdV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zdU() //  [R1]
         { info_tbl: [(c9zdU,
                       label: block_c9zdU_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zdU: // global
           I64[Sp] = block_c9zdZ_info;
           _s9y1u::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9y1u::I64;
           if (R1 & 7 != 0) goto u9zer; else goto c9ze0;
       u9zer: // global
           call _c9zdZ(R1) args: 0, res: 0, upd: 0;
       c9ze0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zdZ() //  [R1]
         { info_tbl: [(c9zdZ,
                       label: block_c9zdZ_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zdZ: // global
           I64[Sp - 8] = block_c9ze4_info;
           _s9y1x::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y1x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zes; else goto c9ze5;
       u9zes: // global
           call _c9ze4(R1) args: 0, res: 0, upd: 0;
       c9ze5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ze4() //  [R1]
         { info_tbl: [(c9ze4,
                       label: block_c9ze4_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ze4: // global
           _s9y1x::P64 = P64[Sp + 8];
           _s9y1A::I64 = I64[Sp + 16] + I64[Sp + 24];
           I32[_s9y1A::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9zec_info;
           R1 = _s9y1x::P64;
           I64[Sp + 24] = _s9y1A::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9zet; else goto c9zej;
       u9zet: // global
           call _c9zec(R1) args: 0, res: 0, upd: 0;
       c9zej: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zec() //  [R1]
         { info_tbl: [(c9zec,
                       label: block_c9zec_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zec: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.626232879 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent5_closure" {
     GHC.Event.EPoll.$fStorableEvent5_closure:
         const GHC.Event.EPoll.$fStorableEvent5_info;
 },
 GHC.Event.EPoll.$fStorableEvent5_entry() //  [R2, R3, R4]
         { info_tbl: [(c9zf5,
                       label: GHC.Event.EPoll.$fStorableEvent5_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zf5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zfu; else goto c9zfv;
       c9zfu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zfv: // global
           I64[Sp - 24] = block_c9zf2_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zfH; else goto c9zf3;
       u9zfH: // global
           call _c9zf2(R1) args: 0, res: 0, upd: 0;
       c9zf3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zf2() //  [R1]
         { info_tbl: [(c9zf2,
                       label: block_c9zf2_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zf2: // global
           I64[Sp] = block_c9zf8_info;
           _s9y1L::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y1L::I64;
           if (R1 & 7 != 0) goto u9zfG; else goto c9zf9;
       u9zfG: // global
           call _c9zf8(R1) args: 0, res: 0, upd: 0;
       c9zf9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zf8() //  [R1]
         { info_tbl: [(c9zf8,
                       label: block_c9zf8_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zf8: // global
           I64[Sp] = block_c9zfd_info;
           _s9y1N::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9y1N::I64;
           if (R1 & 7 != 0) goto u9zfI; else goto c9zfe;
       u9zfI: // global
           call _c9zfd(R1) args: 0, res: 0, upd: 0;
       c9zfe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zfd() //  [R1]
         { info_tbl: [(c9zfd,
                       label: block_c9zfd_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zfd: // global
           I64[Sp - 8] = block_c9zfi_info;
           _s9y1Q::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y1Q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zfJ; else goto c9zfj;
       u9zfJ: // global
           call _c9zfi(R1) args: 0, res: 0, upd: 0;
       c9zfj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zfi() //  [R1]
         { info_tbl: [(c9zfi,
                       label: block_c9zfi_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zfi: // global
           _s9y1Q::P64 = P64[Sp + 8];
           _s9y1T::I64 = I64[Sp + 16] + I64[Sp + 24] * 12;
           I32[_s9y1T::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9zft_info;
           R1 = _s9y1Q::P64;
           I64[Sp + 24] = _s9y1T::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9zfK; else goto c9zfA;
       u9zfK: // global
           call _c9zft(R1) args: 0, res: 0, upd: 0;
       c9zfA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zft() //  [R1]
         { info_tbl: [(c9zft,
                       label: block_c9zft_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zft: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.64010574 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_closure" {
     GHC.Event.EPoll.$fStorableEvent_closure:
         const Foreign.Storable.C:Storable_con_info;
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure+1;
         const GHC.Event.EPoll.$fStorableEvent_$calignment_closure+1;
         const GHC.Event.EPoll.$fStorableEvent6_closure+3;
         const GHC.Event.EPoll.$fStorableEvent5_closure+4;
         const GHC.Event.EPoll.$fStorableEvent4_closure+3;
         const GHC.Event.EPoll.$fStorableEvent3_closure+4;
         const GHC.Event.EPoll.$fStorableEvent2_closure+2;
         const GHC.Event.EPoll.$fStorableEvent1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.642004774 UTC

[section ""data" . GHC.Event.EPoll.$fEqEventType_closure" {
     GHC.Event.EPoll.$fEqEventType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Word.eqWord32_closure+2;
         const GHC.Word.neWord32_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.643757948 UTC

[section ""data" . GHC.Event.EPoll.$fBitsEventType_closure" {
     GHC.Event.EPoll.$fBitsEventType_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Event.EPoll.$fEqEventType_closure+1;
         const GHC.Word.$fBitsWord32_$c.&._closure+2;
         const GHC.Word.$fBitsWord32_$c.|._closure+2;
         const GHC.Word.$fBitsWord32_$cxor_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplement_closure+1;
         const GHC.Word.$fBitsWord32_$cshift_closure+2;
         const GHC.Word.$fBitsWord32_$crotate_closure+2;
         const GHC.Word.$fBitsWord32_$cminBound_closure;
         const GHC.Word.$fBitsWord32_$cbit_closure+1;
         const GHC.Word.$fBitsWord32_$csetBit_closure+2;
         const GHC.Word.$fBitsWord32_$cclearBit_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplementBit_closure+2;
         const GHC.Word.$fBitsWord32_$ctestBit_closure+2;
         const GHC.Word.$fBitsWord32_$cbitSizeMaybe_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fBitsWord32_$cisSigned_closure+1;
         const GHC.Word.$fBitsWord32_$cshiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cshiftR_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftR_closure+2;
         const GHC.Word.$fBitsWord32_$crotateL_closure+2;
         const GHC.Word.$fBitsWord32_$crotateR_closure+2;
         const GHC.Word.$fBitsWord32_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.646816602 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd1_closure" {
     GHC.Event.EPoll.fromEPollFd1_closure:
         const GHC.Event.EPoll.fromEPollFd1_info;
 },
 GHC.Event.EPoll.fromEPollFd1_entry() //  [R2]
         { info_tbl: [(c9zgo,
                       label: GHC.Event.EPoll.fromEPollFd1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zgo: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.650259206 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd_closure" {
     GHC.Event.EPoll.fromEPollFd_closure:
         const GHC.Event.EPoll.fromEPollFd_info;
 },
 GHC.Event.EPoll.fromEPollFd_entry() //  [R2]
         { info_tbl: [(c9zgB,
                       label: GHC.Event.EPoll.fromEPollFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zgB: // global
           R2 = R2;
           call GHC.Event.EPoll.fromEPollFd1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.653689169 UTC

[section ""data" . GHC.Event.EPoll.unEventType1_closure" {
     GHC.Event.EPoll.unEventType1_closure:
         const GHC.Event.EPoll.unEventType1_info;
 },
 GHC.Event.EPoll.unEventType1_entry() //  [R2]
         { info_tbl: [(c9zgM,
                       label: GHC.Event.EPoll.unEventType1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zgM: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.657090277 UTC

[section ""data" . GHC.Event.EPoll.unEventType_closure" {
     GHC.Event.EPoll.unEventType_closure:
         const GHC.Event.EPoll.unEventType_info;
 },
 GHC.Event.EPoll.unEventType_entry() //  [R2]
         { info_tbl: [(c9zgZ,
                       label: GHC.Event.EPoll.unEventType_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zgZ: // global
           R2 = R2;
           call GHC.Event.EPoll.unEventType1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.661285211 UTC

[section ""data" . GHC.Event.EPoll.eventFd_closure" {
     GHC.Event.EPoll.eventFd_closure:
         const GHC.Event.EPoll.eventFd_info;
 },
 GHC.Event.EPoll.eventFd_entry() //  [R2]
         { info_tbl: [(c9zhd,
                       label: GHC.Event.EPoll.eventFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zhd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zhe; else goto c9zhf;
       c9zhe: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zhf: // global
           I64[Sp - 8] = block_c9zha_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zhj; else goto c9zhb;
       u9zhj: // global
           call _c9zha(R1) args: 0, res: 0, upd: 0;
       c9zhb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zha() //  [R1]
         { info_tbl: [(c9zha,
                       label: block_c9zha_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zha: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.667302504 UTC

[section ""data" . GHC.Event.EPoll.eventTypes_closure" {
     GHC.Event.EPoll.eventTypes_closure:
         const GHC.Event.EPoll.eventTypes_info;
 },
 GHC.Event.EPoll.eventTypes_entry() //  [R2]
         { info_tbl: [(c9zhC,
                       label: GHC.Event.EPoll.eventTypes_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zhC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zhD; else goto c9zhE;
       c9zhD: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventTypes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zhE: // global
           I64[Sp - 8] = block_c9zhz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zhI; else goto c9zhA;
       u9zhI: // global
           call _c9zhz(R1) args: 0, res: 0, upd: 0;
       c9zhA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zhz() //  [R1]
         { info_tbl: [(c9zhz,
                       label: block_c9zhz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zhz: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.672535073 UTC

[section ""data" . GHC.Event.EPoll.epollEvents_closure" {
     GHC.Event.EPoll.epollEvents_closure:
         const GHC.Event.EPoll.epollEvents_info;
 },
 GHC.Event.EPoll.epollEvents_entry() //  [R2]
         { info_tbl: [(c9zi1,
                       label: GHC.Event.EPoll.epollEvents_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zi1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zi5; else goto c9zi6;
       c9zi5: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollEvents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zi6: // global
           I64[Sp - 8] = block_c9zhY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zia; else goto c9zhZ;
       u9zia: // global
           call _c9zhY(R1) args: 0, res: 0, upd: 0;
       c9zhZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zhY() //  [R1]
         { info_tbl: [(c9zhY,
                       label: block_c9zhY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zhY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9zi9; else goto c9zi8;
       c9zi9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zi8: // global
           _s9y2d::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s9y2d::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.678264469 UTC

[section ""data" . GHC.Event.EPoll.epollFd_closure" {
     GHC.Event.EPoll.epollFd_closure:
         const GHC.Event.EPoll.epollFd_info;
 },
 GHC.Event.EPoll.epollFd_entry() //  [R2]
         { info_tbl: [(c9zis,
                       label: GHC.Event.EPoll.epollFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zis: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9ziw; else goto c9zix;
       c9ziw: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zix: // global
           I64[Sp - 8] = block_c9zip_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9ziB; else goto c9ziq;
       u9ziB: // global
           call _c9zip(R1) args: 0, res: 0, upd: 0;
       c9ziq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zip() //  [R1]
         { info_tbl: [(c9zip,
                       label: block_c9zip_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zip: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9ziA; else goto c9ziz;
       c9ziA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9ziz: // global
           _s9y2g::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9y2g::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.683563443 UTC

[section ""data" . GHC.Event.EPoll.available_closure" {
     GHC.Event.EPoll.available_closure:
         const GHC.Types.True_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.685213225 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule4_bytes" {
     GHC.Event.EPoll.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.68749489 UTC

[section ""data" . GHC.Event.EPoll.$trModule3_closure" {
     GHC.Event.EPoll.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.689224053 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule2_bytes" {
     GHC.Event.EPoll.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.691417679 UTC

[section ""data" . GHC.Event.EPoll.$trModule1_closure" {
     GHC.Event.EPoll.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.693026745 UTC

[section ""data" . GHC.Event.EPoll.$trModule_closure" {
     GHC.Event.EPoll.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.EPoll.$trModule3_closure+1;
         const GHC.Event.EPoll.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.694816513 UTC

[section ""data" . $krep_r9xZP_closure" {
     $krep_r9xZP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.696488492 UTC

[section ""data" . $krep1_r9xZQ_closure" {
     $krep1_r9xZQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord32_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.698229834 UTC

[section ""data" . $krep2_r9xZR_closure" {
     $krep2_r9xZR_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.699981837 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPollFd2_bytes" {
     GHC.Event.EPoll.$tcEPollFd2_bytes:
         I8[] [69,80,111,108,108,70,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.701612229 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd1_closure" {
     GHC.Event.EPoll.$tcEPollFd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPollFd2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.703277784 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd_closure" {
     GHC.Event.EPoll.$tcEPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPollFd1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11408974392712426853;
         const 10860743297622841984;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.705077328 UTC

[section ""data" . $krep3_r9xZS_closure" {
     $krep3_r9xZS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPollFd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.706812477 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd1_closure" {
     GHC.Event.EPoll.$tc'EPollFd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep3_r9xZS_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.708570165 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPollFd3_bytes" {
     GHC.Event.EPoll.$tc'EPollFd3_bytes:
         I8[] [39,69,80,111,108,108,70,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.710246767 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd2_closure" {
     GHC.Event.EPoll.$tc'EPollFd2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPollFd3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.711940885 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd_closure" {
     GHC.Event.EPoll.$tc'EPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd2_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd1_closure+4;
         const 13859366844265277896;
         const 3104986725924328114;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.714557298 UTC

[section ""cstring" . GHC.Event.EPoll.$tcControlOp2_bytes" {
     GHC.Event.EPoll.$tcControlOp2_bytes:
         I8[] [67,111,110,116,114,111,108,79,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.716773736 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp1_closure" {
     GHC.Event.EPoll.$tcControlOp1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcControlOp2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.718460286 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp_closure" {
     GHC.Event.EPoll.$tcControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcControlOp1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16670684287779227039;
         const 7079239768931473179;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.720301985 UTC

[section ""data" . $krep4_r9xZT_closure" {
     $krep4_r9xZT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcControlOp_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.722114287 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp1_closure" {
     GHC.Event.EPoll.$tc'ControlOp1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep4_r9xZT_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.723938064 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'ControlOp3_bytes" {
     GHC.Event.EPoll.$tc'ControlOp3_bytes:
         I8[] [39,67,111,110,116,114,111,108,79,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.726106289 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp2_closure" {
     GHC.Event.EPoll.$tc'ControlOp2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'ControlOp3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.727803831 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp_closure" {
     GHC.Event.EPoll.$tc'ControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp2_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp1_closure+4;
         const 17423659744934710370;
         const 14737300415055323322;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.72964818 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEventType2_bytes" {
     GHC.Event.EPoll.$tcEventType2_bytes:
         I8[] [69,118,101,110,116,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.731287306 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType1_closure" {
     GHC.Event.EPoll.$tcEventType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEventType2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.732936156 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType_closure" {
     GHC.Event.EPoll.$tcEventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEventType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6882131545153803920;
         const 11603224301892798833;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.734829526 UTC

[section ""data" . $krep5_r9xZU_closure" {
     $krep5_r9xZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEventType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.736580093 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType1_closure" {
     GHC.Event.EPoll.$tc'EventType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r9xZQ_closure+1;
         const $krep5_r9xZU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.738747544 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EventType3_bytes" {
     GHC.Event.EPoll.$tc'EventType3_bytes:
         I8[] [39,69,118,101,110,116,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.740413125 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType2_closure" {
     GHC.Event.EPoll.$tc'EventType2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EventType3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.742494047 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType_closure" {
     GHC.Event.EPoll.$tc'EventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EventType2_closure+1;
         const GHC.Event.EPoll.$tc'EventType1_closure+4;
         const 6895099112894632230;
         const 10353865251933672677;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.744313951 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEvent2_bytes" {
     GHC.Event.EPoll.$tcEvent2_bytes:
         I8[] [69,118,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.745937891 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent1_closure" {
     GHC.Event.EPoll.$tcEvent1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEvent2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.747636641 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent_closure" {
     GHC.Event.EPoll.$tcEvent_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEvent1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9768726503562184735;
         const 14932995848660065219;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.749476539 UTC

[section ""data" . $krep6_r9xZV_closure" {
     $krep6_r9xZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEvent_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.751115753 UTC

[section ""data" . $krep7_r9xZW_closure" {
     $krep7_r9xZW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9xZR_closure+1;
         const $krep6_r9xZV_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.752745331 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event1_closure" {
     GHC.Event.EPoll.$tc'Event1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r9xZU_closure+1;
         const $krep7_r9xZW_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.754838232 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'Event3_bytes" {
     GHC.Event.EPoll.$tc'Event3_bytes:
         I8[] [39,69,118,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.75645723 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event2_closure" {
     GHC.Event.EPoll.$tc'Event2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'Event3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.75819615 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event_closure" {
     GHC.Event.EPoll.$tc'Event_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'Event2_closure+1;
         const GHC.Event.EPoll.$tc'Event1_closure+4;
         const 13898227050457859187;
         const 12870286929163337655;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.759924572 UTC

[section ""data" . $krep8_r9xZX_closure" {
     $krep8_r9xZX_closure:
         const :_con_info;
         const $krep6_r9xZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.761619355 UTC

[section ""data" . $krep9_r9xZY_closure" {
     $krep9_r9xZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcArray_closure;
         const $krep8_r9xZX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.763410843 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPoll2_bytes" {
     GHC.Event.EPoll.$tcEPoll2_bytes:
         I8[] [69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.76502428 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll1_closure" {
     GHC.Event.EPoll.$tcEPoll1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPoll2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.766792741 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll_closure" {
     GHC.Event.EPoll.$tcEPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPoll1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16362945812962510240;
         const 15183678187331181316;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.76913441 UTC

[section ""data" . $krep10_r9xZZ_closure" {
     $krep10_r9xZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPoll_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.771283192 UTC

[section ""data" . $krep11_r9y00_closure" {
     $krep11_r9y00_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r9xZY_closure+1;
         const $krep10_r9xZZ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.772985245 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll1_closure" {
     GHC.Event.EPoll.$tc'EPoll1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r9xZS_closure+1;
         const $krep11_r9y00_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.774681282 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPoll3_bytes" {
     GHC.Event.EPoll.$tc'EPoll3_bytes:
         I8[] [39,69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.776279893 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll2_closure" {
     GHC.Event.EPoll.$tc'EPoll2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPoll3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.778004693 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll_closure" {
     GHC.Event.EPoll.$tc'EPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPoll2_closure+1;
         const GHC.Event.EPoll.$tc'EPoll1_closure+4;
         const 11640704659469356468;
         const 11164042648060985378;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.779858782 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd4_bytes" {
     GHC.Event.EPoll.$fShowEPollFd4_bytes:
         I8[] [69,80,111,108,108,70,100,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.782060433 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd3_bytes" {
     GHC.Event.EPoll.$fShowEPollFd3_bytes:
         I8[] [102,114,111,109,69,80,111,108,108,70,100,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.783620282 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd2_bytes" {
     GHC.Event.EPoll.$fShowEPollFd2_bytes:
         I8[] [125]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.787251066 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec_closure" {
     GHC.Event.EPoll.$w$cshowsPrec_closure:
         const GHC.Event.EPoll.$w$cshowsPrec_info;
 },
 sat_s9y2o_entry() //  [R1]
         { info_tbl: [(c9zk4,
                       label: sat_s9y2o_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zk4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zk5; else goto c9zk6;
       c9zk5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zk6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2s_entry() //  [R1]
         { info_tbl: [(c9zk7,
                       label: sat_s9y2s_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zk7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zkb; else goto c9zkc;
       c9zkb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zkc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zjV_info;
           _s9y2k::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2k::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9zkj; else goto c9zjW;
       u9zkj: // global
           call _c9zjV(R1) args: 0, res: 0, upd: 0;
       c9zjW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9zjV() //  [R1]
         { info_tbl: [(c9zjV,
                       label: block_c9zjV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zjV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zkf; else goto c9zke;
       c9zkf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9zke: // global
           _s9y2n::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y2o_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9zk8_info;
           R4 = Hp - 16;
           R3 = _s9y2n::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9zk8() //  [R1, R2]
         { info_tbl: [(c9zk8,
                       label: block_c9zk8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zk8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zki; else goto c9zkh;
       c9zki: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zkh: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2t_entry() //  [R1]
         { info_tbl: [(c9zkk,
                       label: sat_s9y2t_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zkk: // global
           _s9y2t::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zkl; else goto c9zkm;
       c9zkm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zko; else goto c9zkn;
       c9zko: // global
           HpAlloc = 32;
           goto c9zkl;
       c9zkl: // global
           R1 = _s9y2t::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zkn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2t::P64;
           _s9y2j::P64 = P64[_s9y2t::P64 + 16];
           _s9y2k::P64 = P64[_s9y2t::P64 + 24];
           I64[Hp - 24] = sat_s9y2s_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2x_entry() //  [R1]
         { info_tbl: [(c9zkM,
                       label: sat_s9y2x_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zkM: // global
           _s9y2x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zkN; else goto c9zkO;
       c9zkO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zkQ; else goto c9zkP;
       c9zkQ: // global
           HpAlloc = 24;
           goto c9zkN;
       c9zkN: // global
           R1 = _s9y2x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zkP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2x::P64;
           _s9y2k::P64 = P64[_s9y2x::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2B_entry() //  [R1]
         { info_tbl: [(c9zkR,
                       label: sat_s9y2B_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zkR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zkV; else goto c9zkW;
       c9zkV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zkW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zkC_info;
           _s9y2k::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2k::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9zl3; else goto c9zkD;
       u9zl3: // global
           call _c9zkC(R1) args: 0, res: 0, upd: 0;
       c9zkD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9zkC() //  [R1]
         { info_tbl: [(c9zkC,
                       label: block_c9zkC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zkC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zkZ; else goto c9zkY;
       c9zkZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9zkY: // global
           _s9y2v::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y2x_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9zkS_info;
           R4 = Hp - 16;
           R3 = _s9y2v::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9zkS() //  [R1, R2]
         { info_tbl: [(c9zkS,
                       label: block_c9zkS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zkS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zl2; else goto c9zl1;
       c9zl2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zl1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2C_entry() //  [R1]
         { info_tbl: [(c9zl4,
                       label: sat_s9y2C_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zl4: // global
           _s9y2C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zl5; else goto c9zl6;
       c9zl6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zl8; else goto c9zl7;
       c9zl8: // global
           HpAlloc = 32;
           goto c9zl5;
       c9zl5: // global
           R1 = _s9y2C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zl7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2C::P64;
           _s9y2j::P64 = P64[_s9y2C::P64 + 16];
           _s9y2k::P64 = P64[_s9y2C::P64 + 24];
           I64[Hp - 24] = sat_s9y2B_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2D_entry() //  [R1]
         { info_tbl: [(c9zl9,
                       label: sat_s9y2D_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zl9: // global
           _s9y2D::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zla; else goto c9zlb;
       c9zlb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zld; else goto c9zlc;
       c9zld: // global
           HpAlloc = 32;
           goto c9zla;
       c9zla: // global
           R1 = _s9y2D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zlc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2D::P64;
           _s9y2j::P64 = P64[_s9y2D::P64 + 16];
           _s9y2k::P64 = P64[_s9y2D::P64 + 24];
           I64[Hp - 24] = sat_s9y2C_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9zlh,
                       label: GHC.Event.EPoll.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zlh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9zll; else goto c9zlk;
       c9zll: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zlk: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9zlf; else goto c9zlg;
       c9zlf: // global
           I64[Hp - 48] = sat_s9y2t_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9zjN::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9zjN::P64;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9zlg: // global
           I64[Hp - 48] = sat_s9y2D_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.814347119 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9zmk,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zmk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9zml; else goto c9zmm;
       c9zml: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zmm: // global
           I64[Sp - 24] = block_c9zmh_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zmq; else goto c9zmi;
       u9zmq: // global
           call _c9zmh(R1) args: 0, res: 0, upd: 0;
       c9zmi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zmh() //  [R1]
         { info_tbl: [(c9zmh,
                       label: block_c9zmh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zmh: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.819770939 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd5_closure" {
     GHC.Event.EPoll.$fShowEPollFd5_closure:
         const GHC.Event.EPoll.$fShowEPollFd5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEPollFd5_entry() //  [R1]
         { info_tbl: [(c9zmG,
                       label: GHC.Event.EPoll.$fShowEPollFd5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zmG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zmH; else goto c9zmI;
       c9zmH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zmI: // global
           (_c9zmD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zmD::I64 == 0) goto c9zmF; else goto c9zmE;
       c9zmF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zmE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zmD::I64;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.824158051 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshow_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshow_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_info;
         const 0;
 },
 sat_s9y2P_entry() //  [R1]
         { info_tbl: [(c9zn5,
                       label: sat_s9y2P_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zn5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9znb; else goto c9znc;
       c9znb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9znc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9zn2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9znh; else goto c9zn3;
       u9znh: // global
           call _c9zn2(R1) args: 0, res: 0, upd: 0;
       c9zn3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9zn2() //  [R1]
         { info_tbl: [(c9zn2,
                       label: block_c9zn2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zn2: // global
           I64[Sp] = block_c9zn8_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9zn8() //  [R1, R2]
         { info_tbl: [(c9zn8,
                       label: block_c9zn8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zn8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zng; else goto c9znf;
       c9zng: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9znf: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y2Q_entry() //  [R1]
         { info_tbl: [(c9zni,
                       label: sat_s9y2Q_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zni: // global
           _s9y2Q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9znj; else goto c9znk;
       c9znk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9znm; else goto c9znl;
       c9znm: // global
           HpAlloc = 24;
           goto c9znj;
       c9znj: // global
           R1 = _s9y2Q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9znl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2Q::P64;
           _s9y2J::P64 = P64[_s9y2Q::P64 + 16];
           I64[Hp - 16] = sat_s9y2P_info;
           P64[Hp] = _s9y2J::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshow_entry() //  [R2]
         { info_tbl: [(c9znn,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9znn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9znr; else goto c9znq;
       c9znr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9znq: // global
           I64[Hp - 16] = sat_s9y2Q_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.835399613 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd1_closure" {
     GHC.Event.EPoll.$fShowEPollFd1_closure:
         const GHC.Event.EPoll.$fShowEPollFd1_info;
 },
 GHC.Event.EPoll.$fShowEPollFd1_entry() //  [R2, R3]
         { info_tbl: [(c9znQ,
                       label: GHC.Event.EPoll.$fShowEPollFd1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9znQ: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.839243141 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9zo1,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zo1: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEPollFd1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.842925671 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_closure" {
     GHC.Event.EPoll.$fShowEPollFd_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.844644577 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent4_bytes" {
     GHC.Event.EPoll.$fShowEvent4_bytes:
         I8[] [69,118,101,110,116,84,121,112,101,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.846337974 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent3_bytes" {
     GHC.Event.EPoll.$fShowEvent3_bytes:
         I8[] [117,110,69,118,101,110,116,84,121,112,101,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.849846555 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec2_closure" {
     GHC.Event.EPoll.$w$cshowsPrec2_closure:
         const GHC.Event.EPoll.$w$cshowsPrec2_info;
 },
 sat_s9y32_entry() //  [R1]
         { info_tbl: [(c9zoz,
                       label: sat_s9y32_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zoz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zoA; else goto c9zoB;
       c9zoA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zoB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y36_entry() //  [R1]
         { info_tbl: [(c9zoC,
                       label: sat_s9y36_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zoC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zoJ; else goto c9zoK;
       c9zoJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zoK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zoq_info;
           _s9y2X::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2X::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9zoR; else goto c9zor;
       u9zoR: // global
           call _c9zoq(R1) args: 0, res: 0, upd: 0;
       c9zor: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9zoq() //  [R1]
         { info_tbl: [(c9zoq,
                       label: block_c9zoq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zoq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zoN; else goto c9zoM;
       c9zoN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9zoM: // global
           _s9y30::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y32_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9zoG_info;
           R3 = Hp - 16;
           R2 = _s9y30::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9zoG() //  [R1, R2]
         { info_tbl: [(c9zoG,
                       label: block_c9zoG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zoG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zoQ; else goto c9zoP;
       c9zoQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zoP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y37_entry() //  [R1]
         { info_tbl: [(c9zoS,
                       label: sat_s9y37_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zoS: // global
           _s9y37::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zoT; else goto c9zoU;
       c9zoU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zoW; else goto c9zoV;
       c9zoW: // global
           HpAlloc = 32;
           goto c9zoT;
       c9zoT: // global
           R1 = _s9y37::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zoV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y37::P64;
           _s9y2W::P64 = P64[_s9y37::P64 + 16];
           _s9y2X::P64 = P64[_s9y37::P64 + 24];
           I64[Hp - 24] = sat_s9y36_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3c_entry() //  [R1]
         { info_tbl: [(c9zpk,
                       label: sat_s9y3c_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zpk: // global
           _s9y3c::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zpl; else goto c9zpm;
       c9zpm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zpo; else goto c9zpn;
       c9zpo: // global
           HpAlloc = 24;
           goto c9zpl;
       c9zpl: // global
           R1 = _s9y3c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zpn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3c::P64;
           _s9y2X::P64 = P64[_s9y3c::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3g_entry() //  [R1]
         { info_tbl: [(c9zpp,
                       label: sat_s9y3g_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zpp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zpw; else goto c9zpx;
       c9zpw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zpx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zpa_info;
           _s9y2X::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2X::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9zpE; else goto c9zpb;
       u9zpE: // global
           call _c9zpa(R1) args: 0, res: 0, upd: 0;
       c9zpb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9zpa() //  [R1]
         { info_tbl: [(c9zpa,
                       label: block_c9zpa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zpa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zpA; else goto c9zpz;
       c9zpA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9zpz: // global
           _s9y39::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3c_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9zpt_info;
           R3 = Hp - 16;
           R2 = _s9y39::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9zpt() //  [R1, R2]
         { info_tbl: [(c9zpt,
                       label: block_c9zpt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zpt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zpD; else goto c9zpC;
       c9zpD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zpC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3h_entry() //  [R1]
         { info_tbl: [(c9zpF,
                       label: sat_s9y3h_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zpF: // global
           _s9y3h::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zpG; else goto c9zpH;
       c9zpH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zpJ; else goto c9zpI;
       c9zpJ: // global
           HpAlloc = 32;
           goto c9zpG;
       c9zpG: // global
           R1 = _s9y3h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zpI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3h::P64;
           _s9y2W::P64 = P64[_s9y3h::P64 + 16];
           _s9y2X::P64 = P64[_s9y3h::P64 + 24];
           I64[Hp - 24] = sat_s9y3g_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3i_entry() //  [R1]
         { info_tbl: [(c9zpK,
                       label: sat_s9y3i_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zpK: // global
           _s9y3i::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zpL; else goto c9zpM;
       c9zpM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zpO; else goto c9zpN;
       c9zpO: // global
           HpAlloc = 32;
           goto c9zpL;
       c9zpL: // global
           R1 = _s9y3i::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zpN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3i::P64;
           _s9y2W::P64 = P64[_s9y3i::P64 + 16];
           _s9y2X::P64 = P64[_s9y3i::P64 + 24];
           I64[Hp - 24] = sat_s9y3h_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { info_tbl: [(c9zpS,
                       label: GHC.Event.EPoll.$w$cshowsPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zpS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9zpW; else goto c9zpV;
       c9zpW: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zpV: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9zpQ; else goto c9zpR;
       c9zpQ: // global
           I64[Hp - 48] = sat_s9y37_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9zoi::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9zoi::P64;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9zpR: // global
           I64[Hp - 48] = sat_s9y3i_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.875810814 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(c9zqV,
                       label: GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zqV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9zqW; else goto c9zqX;
       c9zqW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zqX: // global
           I64[Sp - 24] = block_c9zqS_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zr1; else goto c9zqT;
       u9zr1: // global
           call _c9zqS(R1) args: 0, res: 0, upd: 0;
       c9zqT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zqS() //  [R1]
         { info_tbl: [(c9zqS,
                       label: block_c9zqS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zqS: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.882780569 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshow_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshow_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshow_info;
         const 0;
 },
 sat_s9y3v_entry() //  [R1]
         { info_tbl: [(c9zrq,
                       label: sat_s9y3v_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zrq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9zrz; else goto c9zrA;
       c9zrz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zrA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9zrn_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zrF; else goto c9zro;
       u9zrF: // global
           call _c9zrn(R1) args: 0, res: 0, upd: 0;
       c9zro: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9zrn() //  [R1]
         { info_tbl: [(c9zrn,
                       label: block_c9zrn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zrn: // global
           I64[Sp] = block_c9zrw_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9zrw() //  [R1, R2]
         { info_tbl: [(c9zrw,
                       label: block_c9zrw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zrw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zrE; else goto c9zrD;
       c9zrE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zrD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3w_entry() //  [R1]
         { info_tbl: [(c9zrG,
                       label: sat_s9y3w_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zrG: // global
           _s9y3w::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zrH; else goto c9zrI;
       c9zrI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zrK; else goto c9zrJ;
       c9zrK: // global
           HpAlloc = 24;
           goto c9zrH;
       c9zrH: // global
           R1 = _s9y3w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zrJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3w::P64;
           _s9y3o::P64 = P64[_s9y3w::P64 + 16];
           I64[Hp - 16] = sat_s9y3v_info;
           P64[Hp] = _s9y3o::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$fShowEventType_$cshow_entry() //  [R2]
         { info_tbl: [(c9zrL,
                       label: GHC.Event.EPoll.$fShowEventType_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zrL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zrP; else goto c9zrO;
       c9zrP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zrO: // global
           I64[Hp - 16] = sat_s9y3w_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.893727286 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType1_closure" {
     GHC.Event.EPoll.$fShowEventType1_closure:
         const GHC.Event.EPoll.$fShowEventType1_info;
 },
 GHC.Event.EPoll.$fShowEventType1_entry() //  [R2, R3]
         { info_tbl: [(c9zse,
                       label: GHC.Event.EPoll.$fShowEventType1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zse: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.897074627 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9zsp,
                       label: GHC.Event.EPoll.$fShowEventType_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zsp: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEventType1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.900291696 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_closure" {
     GHC.Event.EPoll.$fShowEventType_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEventType_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.902435157 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent7_bytes" {
     GHC.Event.EPoll.$fShowEvent7_bytes:
         I8[] [69,118,101,110,116,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.904280725 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent6_closure" {
     GHC.Event.EPoll.$fShowEvent6_closure:
         const GHC.Event.EPoll.$fShowEvent6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent6_entry() //  [R1]
         { info_tbl: [(c9zsE,
                       label: GHC.Event.EPoll.$fShowEvent6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zsE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zsF; else goto c9zsG;
       c9zsF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zsG: // global
           (_c9zsB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zsB::I64 == 0) goto c9zsD; else goto c9zsC;
       c9zsD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zsC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zsB::I64;
           R2 = GHC.Event.EPoll.$fShowEvent7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.908060536 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent5_bytes" {
     GHC.Event.EPoll.$fShowEvent5_bytes:
         I8[] [101,118,101,110,116,84,121,112,101,115,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.910172291 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent2_bytes" {
     GHC.Event.EPoll.$fShowEvent2_bytes:
         I8[] [101,118,101,110,116,70,100,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.9150285 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec1_closure" {
     GHC.Event.EPoll.$w$cshowsPrec1_closure:
         const GHC.Event.EPoll.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Event.EPoll.$w$cshowsPrec1_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zsR: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y3I_entry() //  [R1]
         { info_tbl: [(c9ztr,
                       label: sat_s9y3I_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ztr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zts; else goto c9ztt;
       c9zts: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3M_entry() //  [R1]
         { info_tbl: [(c9ztu,
                       label: sat_s9y3M_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ztu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zty; else goto c9ztz;
       c9zty: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zti_info;
           _s9y3E::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y3E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9ztG; else goto c9ztj;
       u9ztG: // global
           call _c9zti(R1) args: 0, res: 0, upd: 0;
       c9ztj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9zti() //  [R1]
         { info_tbl: [(c9zti,
                       label: block_c9zti_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zti: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ztC; else goto c9ztB;
       c9ztC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9ztB: // global
           _s9y3H::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3I_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9ztv_info;
           R4 = Hp - 16;
           R3 = _s9y3H::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9ztv() //  [R1, R2]
         { info_tbl: [(c9ztv,
                       label: block_c9ztv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ztv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ztF; else goto c9ztE;
       c9ztF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9ztE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3N_entry() //  [R1]
         { info_tbl: [(c9ztH,
                       label: sat_s9y3N_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ztH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ztL; else goto c9ztK;
       c9ztL: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztK: // global
           _s9y3D::P64 = P64[R1 + 16];
           _s9y3E::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9y3M_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y3O_entry() //  [R1]
         { info_tbl: [(c9ztM,
                       label: sat_s9y3O_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ztM: // global
           _s9y3O::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ztN; else goto c9ztO;
       c9ztO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ztQ; else goto c9ztP;
       c9ztQ: // global
           HpAlloc = 32;
           goto c9ztN;
       c9ztN: // global
           R1 = _s9y3O::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3O::P64;
           _s9y3D::P64 = P64[_s9y3O::P64 + 16];
           _s9y3E::P64 = P64[_s9y3O::P64 + 24];
           I64[Hp - 24] = sat_s9y3N_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3P_entry() //  [R1]
         { info_tbl: [(c9ztR,
                       label: sat_s9y3P_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ztR: // global
           _s9y3P::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ztS; else goto c9ztT;
       c9ztT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ztV; else goto c9ztU;
       c9ztV: // global
           HpAlloc = 32;
           goto c9ztS;
       c9ztS: // global
           R1 = _s9y3P::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3P::P64;
           _s9y3C::P64 = P64[_s9y3P::P64 + 16];
           _s9y3D::P64 = P64[_s9y3P::P64 + 24];
           _s9y3E::P64 = P64[_s9y3P::P64 + 32];
           I64[Hp - 24] = sat_s9y3O_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R4 = Hp - 24;
           R3 = _s9y3C::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3Q_entry() //  [R1]
         { info_tbl: [(c9ztW,
                       label: sat_s9y3Q_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ztW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9zu0; else goto c9ztZ;
       c9zu0: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztZ: // global
           _s9y3C::P64 = P64[R1 + 16];
           _s9y3D::P64 = P64[R1 + 24];
           _s9y3E::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9y3P_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y3U_entry() //  [R1]
         { info_tbl: [(c9zuA,
                       label: sat_s9y3U_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zuA: // global
           _s9y3U::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zuB; else goto c9zuC;
       c9zuC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zuE; else goto c9zuD;
       c9zuE: // global
           HpAlloc = 24;
           goto c9zuB;
       c9zuB: // global
           R1 = _s9y3U::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zuD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3U::P64;
           _s9y3E::P64 = P64[_s9y3U::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3Y_entry() //  [R1]
         { info_tbl: [(c9zuF,
                       label: sat_s9y3Y_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zuF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zuJ; else goto c9zuK;
       c9zuJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zuK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zuq_info;
           _s9y3E::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y3E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9zuR; else goto c9zur;
       u9zuR: // global
           call _c9zuq(R1) args: 0, res: 0, upd: 0;
       c9zur: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9zuq() //  [R1]
         { info_tbl: [(c9zuq,
                       label: block_c9zuq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zuq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zuN; else goto c9zuM;
       c9zuN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9zuM: // global
           _s9y3S::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3U_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9zuG_info;
           R4 = Hp - 16;
           R3 = _s9y3S::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9zuG() //  [R1, R2]
         { info_tbl: [(c9zuG,
                       label: block_c9zuG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zuG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zuQ; else goto c9zuP;
       c9zuQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zuP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y3Z_entry() //  [R1]
         { info_tbl: [(c9zuS,
                       label: sat_s9y3Z_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zuS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zuW; else goto c9zuV;
       c9zuW: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zuV: // global
           _s9y3D::P64 = P64[R1 + 16];
           _s9y3E::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9y3Y_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y40_entry() //  [R1]
         { info_tbl: [(c9zuX,
                       label: sat_s9y40_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zuX: // global
           _s9y40::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zuY; else goto c9zuZ;
       c9zuZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zv1; else goto c9zv0;
       c9zv1: // global
           HpAlloc = 32;
           goto c9zuY;
       c9zuY: // global
           R1 = _s9y40::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zv0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y40::P64;
           _s9y3D::P64 = P64[_s9y40::P64 + 16];
           _s9y3E::P64 = P64[_s9y40::P64 + 24];
           I64[Hp - 24] = sat_s9y3Z_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y41_entry() //  [R1]
         { info_tbl: [(c9zv2,
                       label: sat_s9y41_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zv2: // global
           _s9y41::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zv3; else goto c9zv4;
       c9zv4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zv6; else goto c9zv5;
       c9zv6: // global
           HpAlloc = 32;
           goto c9zv3;
       c9zv3: // global
           R1 = _s9y41::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zv5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y41::P64;
           _s9y3C::P64 = P64[_s9y41::P64 + 16];
           _s9y3D::P64 = P64[_s9y41::P64 + 24];
           _s9y3E::P64 = P64[_s9y41::P64 + 32];
           I64[Hp - 24] = sat_s9y40_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R4 = Hp - 24;
           R3 = _s9y3C::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9y42_entry() //  [R1]
         { info_tbl: [(c9zv7,
                       label: sat_s9y42_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zv7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9zvb; else goto c9zva;
       c9zvb: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zva: // global
           _s9y3C::P64 = P64[R1 + 16];
           _s9y3D::P64 = P64[R1 + 24];
           _s9y3E::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9y41_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y43_entry() //  [R1]
         { info_tbl: [(c9zvc,
                       label: sat_s9y43_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zvc: // global
           _s9y43::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zvd; else goto c9zve;
       c9zve: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9zvg; else goto c9zvf;
       c9zvg: // global
           HpAlloc = 40;
           goto c9zvd;
       c9zvd: // global
           R1 = _s9y43::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zvf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y43::P64;
           _s9y3C::P64 = P64[_s9y43::P64 + 16];
           _s9y3D::P64 = P64[_s9y43::P64 + 24];
           _s9y3E::P64 = P64[_s9y43::P64 + 32];
           I64[Hp - 32] = sat_s9y42_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9zvk,
                       label: GHC.Event.EPoll.$w$cshowsPrec1_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [True, False, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zvk: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c9zvo; else goto c9zvn;
       c9zvo: // global
           HpAlloc = 64;
           R1 = GHC.Event.EPoll.$w$cshowsPrec1_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c9zvn: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9zvi; else goto c9zvj;
       c9zvi: // global
           I64[Hp - 56] = sat_s9y3Q_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           _c9zsY::P64 = Hp - 56;
           Hp = Hp - 24;
           R3 = _c9zsY::P64;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9zvj: // global
           I64[Hp - 56] = sat_s9y43_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.954648499 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9zwJ,
                       label: GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zwJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9zwN; else goto c9zwO;
       c9zwN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zwO: // global
           I64[Sp - 24] = block_c9zwG_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zwW; else goto c9zwH;
       u9zwW: // global
           call _c9zwG(R1) args: 0, res: 0, upd: 0;
       c9zwH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zwG() //  [R1]
         { info_tbl: [(c9zwG,
                       label: block_c9zwG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zwG: // global
           I64[Sp] = block_c9zwM_info;
           _s9y48::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y48::I64;
           if (R1 & 7 != 0) goto u9zwV; else goto c9zwQ;
       u9zwV: // global
           call _c9zwM(R1) args: 0, res: 0, upd: 0;
       c9zwQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zwM() //  [R1]
         { info_tbl: [(c9zwM,
                       label: block_c9zwM_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zwM: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.961877967 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent8_closure" {
     GHC.Event.EPoll.$fShowEvent8_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.963811687 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshow_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshow_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshow_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshow_entry() //  [R2]
         { info_tbl: [(c9zxi,
                       label: GHC.Event.EPoll.$fShowEvent_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zxi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zxj; else goto c9zxk;
       c9zxj: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zxk: // global
           I64[Sp - 8] = block_c9zxf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zxo; else goto c9zxg;
       u9zxo: // global
           call _c9zxf(R1) args: 0, res: 0, upd: 0;
       c9zxg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zxf() //  [R1]
         { info_tbl: [(c9zxf,
                       label: block_c9zxf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zxf: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.96930014 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent1_closure" {
     GHC.Event.EPoll.$fShowEvent1_closure:
         const GHC.Event.EPoll.$fShowEvent1_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent1_entry() //  [R2, R3]
         { info_tbl: [(c9zxF,
                       label: GHC.Event.EPoll.$fShowEvent1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zxF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zxG; else goto c9zxH;
       c9zxG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zxH: // global
           I64[Sp - 16] = block_c9zxC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zxL; else goto c9zxD;
       u9zxL: // global
           call _c9zxC(R1) args: 0, res: 0, upd: 0;
       c9zxD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zxC() //  [R1]
         { info_tbl: [(c9zxC,
                       label: block_c9zxC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zxC: // global
           R5 = P64[Sp + 8];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.974634701 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowList_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9zxZ,
                       label: GHC.Event.EPoll.$fShowEvent_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zxZ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEvent1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.978264396 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_closure" {
     GHC.Event.EPoll.$fShowEvent_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEvent_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.979886883 UTC

[section ""data" . GHC.Event.EPoll.$fFiniteBitsEventType_closure" {
     GHC.Event.EPoll.$fFiniteBitsEventType_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const GHC.Event.EPoll.$fBitsEventType_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.981654363 UTC

[section ""data" . GHC.Event.EPoll.$fNumEventType_closure" {
     GHC.Event.EPoll.$fNumEventType_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Word.$fNumWord32_$c+_closure+2;
         const GHC.Word.$fNumWord32_$c-_closure+2;
         const GHC.Word.$fNumWord32_$c*_closure+2;
         const GHC.Word.$fNumWord32_$cnegate_closure+1;
         const GHC.Word.$fNumWord32_$cabs_closure+1;
         const GHC.Word.$fNumWord32_$csignum_closure+1;
         const GHC.Word.$fNumWord32_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.983416194 UTC

[section ""data" . GHC.Event.EPoll.$fEqEPollFd_closure" {
     GHC.Event.EPoll.$fEqEPollFd_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Int.eqInt32_closure+2;
         const GHC.Int.neInt32_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.985607281 UTC

[section ""cstring" . lvl_r9y01_bytes" {
     lvl_r9y01_bytes:
         I8[] [101,112,111,108,108,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.987437345 UTC

[section ""data" . lvl1_r9y02_closure" {
     lvl1_r9y02_closure:
         const lvl1_r9y02_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9y02_entry() //  [R1]
         { info_tbl: [(c9zyh,
                       label: lvl1_r9y02_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zyh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zyi; else goto c9zyj;
       c9zyi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zyj: // global
           (_c9zye::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zye::I64 == 0) goto c9zyg; else goto c9zyf;
       c9zyg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zyf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zye::I64;
           R2 = lvl_r9y01_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.991901046 UTC

[section ""data" . GHC.Event.EPoll.new6_closure" {
     GHC.Event.EPoll.new6_closure:
         const GHC.Event.EPoll.new6_info;
         const 0;
 },
 GHC.Event.EPoll.new6_entry() //  [R2]
         { info_tbl: [(c9zyx,
                       label: GHC.Event.EPoll.new6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zyx: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_r9y02_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.994969517 UTC

[section ""cstring" . lvl2_r9y03_bytes" {
     lvl2_r9y03_bytes:
         I8[] [101,112,111,108,108,87,97,105,116,78,111,110,66,108,111,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:39.996705059 UTC

[section ""data" . lvl3_r9y04_closure" {
     lvl3_r9y04_closure:
         const lvl3_r9y04_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r9y04_entry() //  [R1]
         { info_tbl: [(c9zyL,
                       label: lvl3_r9y04_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zyL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zyM; else goto c9zyN;
       c9zyM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zyN: // global
           (_c9zyI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zyI::I64 == 0) goto c9zyK; else goto c9zyJ;
       c9zyK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zyJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zyI::I64;
           R2 = lvl2_r9y03_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.000229485 UTC

[section ""cstring" . lvl4_r9y05_bytes" {
     lvl4_r9y05_bytes:
         I8[] [101,112,111,108,108,87,97,105,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.00216523 UTC

[section ""data" . lvl5_r9y06_closure" {
     lvl5_r9y06_closure:
         const lvl5_r9y06_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r9y06_entry() //  [R1]
         { info_tbl: [(c9zz2,
                       label: lvl5_r9y06_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zz2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zz3; else goto c9zz4;
       c9zz3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zz4: // global
           (_c9zyZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zyZ::I64 == 0) goto c9zz1; else goto c9zz0;
       c9zz1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zz0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zyZ::I64;
           R2 = lvl4_r9y05_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.005714308 UTC

[section ""cstring" . GHC.Event.EPoll.new8_bytes" {
     GHC.Event.EPoll.new8_bytes:
         I8[] [109,111,100,105,102,121,70,100,79,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.007398128 UTC

[section ""data" . GHC.Event.EPoll.new7_closure" {
     GHC.Event.EPoll.new7_closure:
         const GHC.Event.EPoll.new7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new7_entry() //  [R1]
         { info_tbl: [(c9zzj,
                       label: GHC.Event.EPoll.new7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zzj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zzk; else goto c9zzl;
       c9zzk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zzl: // global
           (_c9zzg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zzg::I64 == 0) goto c9zzi; else goto c9zzh;
       c9zzi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zzh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zzg::I64;
           R2 = GHC.Event.EPoll.new8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.010985348 UTC

[section ""data" . lvl6_r9y07_closure" {
     lvl6_r9y07_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.012565022 UTC

[section ""data" . lvl7_r9y08_closure" {
     lvl7_r9y08_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.014862441 UTC

[section ""data" . lvl8_r9y09_closure" {
     lvl8_r9y09_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.02134696 UTC

[section ""data" . GHC.Event.EPoll.new10_closure" {
     GHC.Event.EPoll.new10_closure:
         const GHC.Event.EPoll.new10_info;
         const 0;
 },
 sat_s9y6v_entry() //  [R1]
         { info_tbl: [(c9zAF,
                       label: sat_s9y6v_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zAF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zAG; else goto c9zBl;
       c9zAG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zBl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s9y6m::I64 = I64[R1 + 16];
           if (_s9y6m::I64 & 25 == 0) goto c9zAE; else goto c9zAD;
       c9zAE: // global
           if (_s9y6m::I64 & 28 == 0) goto c9zBh; else goto c9zBb;
       c9zBh: // global
           R1 = GHC.Event.EPoll.$fShowEvent8_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9zBb: // global
           R1 = lvl8_r9y09_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9zAD: // global
           if (_s9y6m::I64 & 28 == 0) goto c9zAX; else goto c9zAR;
       c9zAX: // global
           R1 = lvl7_r9y08_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9zAR: // global
           R1 = lvl6_r9y07_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.new10_entry() //  [R2, R3, R4]
         { info_tbl: [(c9zBm,
                       label: GHC.Event.EPoll.new10_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zBm: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9zBn; else goto c9zBo;
       c9zBn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new10_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zBo: // global
           I64[Sp - 24] = block_c9zzA_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zHq; else goto c9zzB;
       u9zHq: // global
           call _c9zzA(R1) args: 0, res: 0, upd: 0;
       c9zzB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zzA() //  [R1]
         { info_tbl: [(c9zzA,
                       label: block_c9zzA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zzA: // global
           I64[Sp - 16] = block_c9zzF_info;
           _s9y4w::P64 = P64[R1 + 7];
           _s9y4v::I64 = I64[R1 + 15];
           R1 = P64[_s9y4w::P64 + 8];
           P64[Sp - 8] = _s9y4w::P64;
           I64[Sp] = _s9y4v::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zHh; else goto c9zzG;
       u9zHh: // global
           call _c9zzF(R1) args: 0, res: 0, upd: 0;
       c9zzG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zzF() //  [R1]
         { info_tbl: [(c9zzF,
                       label: block_c9zzF_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zzF: // global
           I64[Sp - 8] = block_c9zzK_info;
           _s9y4D::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9y4D::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zHi; else goto c9zzL;
       u9zHi: // global
           call _c9zzK(R1) args: 0, res: 0, upd: 0;
       c9zzL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zzK() //  [R1]
         { info_tbl: [(c9zzK,
                       label: block_c9zzK_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zzK: // global
           I64[Sp - 16] = block_c9zBr_info;
           _s9y4E::P64 = R1;
           _s9y4G::P64 = P64[R1 + 7];
           _s9y4F::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _s9y4G::P64;
           I64[Sp] = _s9y4F::I64;
           P64[Sp + 32] = _s9y4E::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zHj; else goto c9zEC;
       u9zHj: // global
           call _c9zBr(R1) args: 0, res: 0, upd: 0;
       c9zEC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zBr() //  [R1]
         { info_tbl: [(c9zBr,
                       label: block_c9zBr_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zBr: // global
           if (R1 & 7 == 1) goto c9zFu; else goto c9zGx;
       c9zFu: // global
           (_s9y6F::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(I64[Sp + 40], I64[Sp + 16], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 24])), 0);
           _s9y6G::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y6F::I64));
           if (_s9y6G::I64 != (-1)) goto c9zEU; else goto c9zF0;
       c9zEU: // global
           I64[Sp + 40] = _s9y6G::I64;
           Sp = Sp + 8;
           call _c9zzS() args: 0, res: 0, upd: 0;
       c9zF0: // global
           (_s9y6K::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y6K::I64) == 4 :: W32) goto u9zH0; else goto c9zFf;
       u9zH0: // global
           Sp = Sp + 8;
           call _c9zGt() args: 0, res: 0, upd: 0;
       c9zFf: // global
           I64[Sp] = block_c9zFb_info;
           R2 = lvl3_r9y04_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       c9zGx: // global
           I64[Sp] = block_c9zFz_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u9zHr; else goto c9zGy;
       u9zHr: // global
           call _c9zFz(R1) args: 0, res: 0, upd: 0;
       c9zGy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zFb() //  [R1]
         { info_tbl: [(c9zFb,
                       label: block_c9zFb_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zFb: // global
           I64[Sp] = block_c9zFd_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9zHx; else goto c9zFi;
       u9zHx: // global
           call _c9zFd(R1) args: 0, res: 0, upd: 0;
       c9zFi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zFd() //  [R1]
         { info_tbl: [(c9zFd,
                       label: block_c9zFd_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zFd: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9zzS() args: 0, res: 0, upd: 0;
     }
 },
 _c9zFz() //  [R1]
         { info_tbl: [(c9zFz,
                       label: block_c9zFz_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zFz: // global
           _s9y4v::I64 = I64[Sp + 40];
           _s9y4D::I64 = I64[Sp + 24];
           _s9y4F::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c9zGE; else goto c9zGI;
       c9zGE: // global
           _s9y6T::I64 = (I64[R1 + 7] + 999999) / 1000000;
           goto s9y6S;
       c9zGI: // global
           _s9y6T::I64 = (-1);
           goto s9y6S;
       s9y6S: // global
           I64[Sp] = block_c9zFQ_info;
           _u9zH9::P64 = CurrentTSO;
           I64[I64[_u9zH9::P64 + 24] + 16] = Sp;
           _u9zHa::I64 = CurrentNursery;
           P64[_u9zHa::I64 + 8] = Hp + 8;
           I64[_u9zH9::P64 + 104] = I64[_u9zH9::P64 + 104] - ((Hp + 8) - I64[_u9zHa::I64]);
           (_u9zH7::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_s9y6Z::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(_s9y4v::I64, _s9y4F::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y4D::I64)), %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y6T::I64)));
           (_u9zH8::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_u9zH7::I64);
           BaseReg = _u9zH8::I64;
           _u9zHb::P64 = CurrentTSO;
           _u9zHc::P64 = I64[_u9zHb::P64 + 24];
           Sp = I64[_u9zHc::P64 + 16];
           SpLim = _u9zHc::P64 + 192;
           HpAlloc = 0;
           _u9zHd::I64 = CurrentNursery;
           _u9zHe::I64 = I64[_u9zHd::I64 + 8];
           Hp = _u9zHe::I64 - 8;
           _u9zHf::I64 = I64[_u9zHd::I64];
           HpLim = _u9zHf::I64 + ((%MO_SS_Conv_W32_W64(I32[_u9zHd::I64 + 48]) << 12) - 1);
           I64[_u9zHb::P64 + 104] = I64[_u9zHb::P64 + 104] + (_u9zHe::I64 - _u9zHf::I64);
           R1 = _s9y6Z::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zFQ() //  [R1]
         { info_tbl: [(c9zFQ,
                       label: block_c9zFQ_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zFQ: // global
           _s9y70::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R1));
           if (_s9y70::I64 != (-1)) goto c9zFY; else goto c9zG4;
       c9zFY: // global
           I64[Sp + 40] = _s9y70::I64;
           Sp = Sp + 8;
           call _c9zzS() args: 0, res: 0, upd: 0;
       c9zG4: // global
           (_s9y74::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y74::I64) == 4 :: W32) goto u9zGX; else goto c9zGj;
       u9zGX: // global
           Sp = Sp + 8;
           call _c9zGt() args: 0, res: 0, upd: 0;
       c9zGj: // global
           I64[Sp] = block_c9zGf_info;
           R2 = lvl5_r9y06_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9zGt() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zGt: // global
           I64[Sp + 32] = 0;
           call _c9zzS() args: 0, res: 0, upd: 0;
     }
 },
 _c9zGf() //  [R1]
         { info_tbl: [(c9zGf,
                       label: block_c9zGf_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zGf: // global
           I64[Sp] = block_c9zGh_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9zHB; else goto c9zGm;
       u9zHB: // global
           call _c9zGh(R1) args: 0, res: 0, upd: 0;
       c9zGm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zGh() //  [R1]
         { info_tbl: [(c9zGh,
                       label: block_c9zGh_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zGh: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9zzS() args: 0, res: 0, upd: 0;
     }
 },
 _c9zzS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zzS: // global
           Hp = Hp + 48;
           _s9y4J::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c9zBv; else goto c9zBu;
       c9zBv: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_c9zzR_info;
           R1 = _s9y4J::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9zBu: // global
           _s9y4w::P64 = P64[Sp + 24];
           _s9y4D::I64 = I64[Sp + 16];
           _s9y4E::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = _s9y4E::P64;
           I64[Hp - 24] = _s9y4J::I64;
           I64[Hp - 16] = _s9y4D::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           if (%MO_S_Le_W64(_s9y4J::I64, 0)) goto c9zBy; else goto c9zBz;
       c9zBy: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zBz: // global
           _s9y4R::P64 = P64[_s9y4w::P64 + 8];
           Hp = Hp - 16;
           I64[Sp + 16] = block_c9zA3_info;
           R1 = _s9y4R::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9zHl; else goto c9zA4;
       u9zHl: // global
           call _c9zA3(R1) args: 0, res: 0, upd: 0;
       c9zA4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zzR() //  [R1]
         { info_tbl: [(c9zzR,
                       label: block_c9zzR_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zzR: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c9zzS() args: 0, res: 0, upd: 0;
     }
 },
 _c9zA3() //  [R1]
         { info_tbl: [(c9zA3,
                       label: block_c9zA3_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zA3: // global
           I64[Sp] = block_c9zA8_info;
           _s9y4U::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp + 24] = _s9y4U::I64;
           if (R1 & 7 != 0) goto u9zHm; else goto c9zA9;
       u9zHm: // global
           call _c9zA8(R1) args: 0, res: 0, upd: 0;
       c9zA9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zA8() //  [R1]
         { info_tbl: [(c9zA8,
                       label: block_c9zA8_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zA8: // global
           I64[Sp - 16] = I64[Sp + 24] * 12;
           I64[Sp - 8] = 0;
           P64[Sp] = P64[R1 + 7];
           I64[Sp + 24] = I64[R1 + 15];
           Sp = Sp - 16;
           call _c9zAl() args: 0, res: 0, upd: 0;
     }
 },
 _c9zAl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zAl: // global
           Hp = Hp + 40;
           _s9y6g::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c9zEu; else goto c9zEt;
       c9zEu: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c9zAk_info;
           R1 = _s9y6g::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9zEt: // global
           if (%MO_S_Lt_W64(_s9y6g::I64,
                            I64[Sp])) goto c9zEy; else goto c9zEB;
       c9zEy: // global
           _s9y6j::I64 = I64[Sp + 40] + _s9y6g::I64;
           _s9y6m::I64 = %MO_UU_Conv_W32_W64(I32[_s9y6j::I64]);
           _s9y6q::I64 = %MO_SS_Conv_W32_W64(I32[_s9y6j::I64 + 4]);
           I64[Hp - 32] = sat_s9y6v_info;
           I64[Hp - 16] = _s9y6m::I64;
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9y6q::I64;
           I64[Sp - 8] = block_c9zEw_info;
           R3 = Hp - 32;
           R2 = Hp - 7;
           R1 = P64[Sp + 48];
           Sp = Sp - 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       c9zEB: // global
           Hp = Hp - 40;
           _s9y4w::P64 = P64[Sp + 24];
           call MO_Touch(P64[Sp + 16]);
           I64[Sp + 16] = block_c9zBG_info;
           R1 = P64[_s9y4w::P64 + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9zHp; else goto c9zBI;
       u9zHp: // global
           call _c9zBG(R1) args: 0, res: 0, upd: 0;
       c9zBI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zAk() //  [R1]
         { info_tbl: [(c9zAk,
                       label: block_c9zAk_info
                       rep:StackRep [True, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zAk: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c9zAl() args: 0, res: 0, upd: 0;
     }
 },
 _c9zEw() //  []
         { info_tbl: [(c9zEw,
                       label: block_c9zEw_info
                       rep:StackRep [True, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zEw: // global
           I64[Sp + 16] = I64[Sp + 16] + 12;
           Sp = Sp + 8;
           call _c9zAl() args: 0, res: 0, upd: 0;
     }
 },
 _c9zBG() //  [R1]
         { info_tbl: [(c9zBG,
                       label: block_c9zBG_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zBG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9zBO; else goto c9zBN;
       c9zBO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zBN: // global
           _s9y4J::I64 = I64[Sp + 16];
           _s9y59::I64 = I64[R1 + 23];
           if (_s9y59::I64 == _s9y4J::I64) goto c9zC2; else goto c9zBU;
       c9zC2: // global
           Hp = Hp - 16;
           _s9y5e::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_c9zBW_info;
           R1 = _s9y5e::P64;
           I64[Sp + 32] = _s9y59::I64;
           if (R1 & 7 != 0) goto u9zHu; else goto c9zBX;
       u9zHu: // global
           call _c9zBW(R1) args: 0, res: 0, upd: 0;
       c9zBX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9zBU: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9zBW() //  [R1]
         { info_tbl: [(c9zBW,
                       label: block_c9zBW_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zBW: // global
           I64[Sp - 8] = block_c9zC1_info;
           _s9y5h::I64 = I64[R1 + 15];
           _s9y5i::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9y5i::I64;
           I64[Sp + 24] = _s9y5h::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zHv; else goto c9zC4;
       u9zHv: // global
           call _c9zC1(R1) args: 0, res: 0, upd: 0;
       c9zC4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zC1() //  [R1]
         { info_tbl: [(c9zC1,
                       label: block_c9zC1_info
                       rep:StackRep [True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zC1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9zCa; else goto c9zC9;
       c9zCa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zC9: // global
           _s9y5m::I64 = I64[Sp + 40] << 1;
           if (%MO_S_Le_W64(_s9y5m::I64,
                            I64[Sp + 8])) goto c9zCj; else goto c9zEr;
       c9zCj: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zEr: // global
           _s9y5p::I64 = _s9y5m::I64 - 1;
           _s9y5q::I64 = _s9y5p::I64 | %MO_S_Shr_W64(_s9y5p::I64, 1);
           _s9y5s::I64 = _s9y5q::I64 | %MO_S_Shr_W64(_s9y5q::I64, 2);
           _s9y5u::I64 = _s9y5s::I64 | %MO_S_Shr_W64(_s9y5s::I64, 4);
           _s9y5w::I64 = _s9y5u::I64 | %MO_S_Shr_W64(_s9y5u::I64, 8);
           _s9y5y::I64 = _s9y5w::I64 | %MO_S_Shr_W64(_s9y5w::I64, 16);
           _s9y5A::I64 = _s9y5y::I64 | %MO_S_Shr_W64(_s9y5y::I64, 32) + 1;
           _s9y5D::I64 = _s9y5A::I64 * 12;
           if (%MO_S_Ge_W64(_s9y5D::I64, 0)) goto c9zD9; else goto c9zEq;
       c9zD9: // global
           _s9y5l::P64 = P64[R1 + 7];
           _s9y5k::I64 = I64[R1 + 15];
           Hp = Hp - 16;
           I64[Sp - 16] = block_c9zD7_info;
           R1 = _s9y5D::I64;
           I64[Sp - 8] = _s9y5A::I64;
           P64[Sp] = _s9y5l::P64;
           I64[Sp + 40] = _s9y5k::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c9zEq: // global
           Hp = Hp - 16;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9zD7() //  [R1]
         { info_tbl: [(c9zD7,
                       label: block_c9zD7_info
                       rep:StackRep [True, False, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zD7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c9zDd; else goto c9zDc;
       c9zDd: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zDc: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 72] = R1;
           _s9y4w::P64 = P64[Sp + 32];
           _s9y4J::I64 = I64[Sp + 40];
           _s9y5h::I64 = I64[Sp + 48];
           _s9y5i::I64 = I64[Sp + 24];
           _s9y5k::I64 = I64[Sp + 56];
           _s9y5l::P64 = P64[Sp + 16];
           _s9y5A::I64 = I64[Sp + 8];
           _s9y5I::I64 = R1 + 16;
           _c9zDh::P64 = Hp - 77;
           if (_s9y5k::I64 == 0) goto c9zEp; else goto c9zE8;
       c9zEp: // global
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9zEg; else goto c9zEo;
       c9zEg: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9zEe::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9zEe::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zEo: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9zDh::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zE8: // global
           if (%MO_S_Le_W64(_s9y5i::I64, 0)) goto c9zDE; else goto c9zE6;
       c9zDE: // global
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9zDu; else goto c9zDC;
       c9zDu: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9zDs::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9zDs::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zDC: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9zDh::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zE6: // global
           (_s9y5Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s9y5I::I64, _s9y5k::I64, _s9y5i::I64 * 12);
           call MO_Touch(_c9zDh::P64);
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9zDX; else goto c9zE5;
       c9zDX: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9zDV::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9zDV::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zE5: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9zDh::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.073777712 UTC

[section ""data" . GHC.Event.EPoll.new9_closure" {
     GHC.Event.EPoll.new9_closure:
         const GHC.Event.EPoll.new9_info;
         const 0;
 },
 GHC.Event.EPoll.new9_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9zKn,
                       label: GHC.Event.EPoll.new9_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zKn: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9zKo; else goto c9zKp;
       c9zKo: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new9_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zKp: // global
           I64[Sp - 40] = block_c9zKi_info;
           _s9y7h::P64 = R2;
           R2 = 4;
           R1 = 12;
           P64[Sp - 32] = _s9y7h::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zKi() //  [R1]
         { info_tbl: [(c9zKi,
                       label: block_c9zKi_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zKi: // global
           I64[Sp] = block_c9zKk_info;
           _s9y7r::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _s9y7r::P64;
           if (R1 & 7 != 0) goto u9zMi; else goto c9zKl;
       u9zMi: // global
           call _c9zKk(R1) args: 0, res: 0, upd: 0;
       c9zKl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zKk() //  [R1]
         { info_tbl: [(c9zKk,
                       label: block_c9zKk_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zKk: // global
           _s9y7i::P64 = P64[Sp + 16];
           _s9y7r::P64 = P64[Sp + 32];
           _s9y7t::I64 = I64[R1 + 7];
           if (_s9y7t::I64 & 1 == 0) goto c9zLX; else goto c9zLC;
       c9zLX: // global
           if (_s9y7t::I64 & 2 == 0) goto c9zMc; else goto c9zM6;
       c9zMc: // global
           _s9y7v::I64 = 0;
           goto s9y7u;
       c9zM6: // global
           _s9y7v::I64 = 4;
           goto s9y7u;
       c9zLC: // global
           if (_s9y7t::I64 & 2 == 0) goto c9zLR; else goto c9zLL;
       c9zLR: // global
           _s9y7v::I64 = 1;
           goto s9y7u;
       c9zLL: // global
           _s9y7v::I64 = 5;
           goto s9y7u;
       s9y7u: // global
           _s9y7w::I64 = _s9y7r::P64 + 16;
           I32[_s9y7w::I64] = %MO_UU_Conv_W64_W32(_s9y7v::I64);
           I64[Sp - 8] = block_c9zKC_info;
           R1 = _s9y7i::P64;
           I64[Sp] = _s9y7w::I64;
           I64[Sp + 16] = _s9y7t::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zMj; else goto c9zKD;
       u9zMj: // global
           call _c9zKC(R1) args: 0, res: 0, upd: 0;
       c9zKD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zKC() //  [R1]
         { info_tbl: [(c9zKC,
                       label: block_c9zKC_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zKC: // global
           _s9y7h::P64 = P64[Sp + 16];
           _s9y7z::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9y7z::I64);
           I64[Sp] = block_c9zKK_info;
           R1 = _s9y7h::P64;
           I64[Sp + 16] = _s9y7z::I64;
           if (R1 & 7 != 0) goto u9zMk; else goto c9zKL;
       u9zMk: // global
           call _c9zKK(R1) args: 0, res: 0, upd: 0;
       c9zKL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zKK() //  [R1]
         { info_tbl: [(c9zKK,
                       label: block_c9zKK_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zKK: // global
           I64[Sp] = block_c9zKP_info;
           _s9y7D::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s9y7D::I64;
           if (R1 & 7 != 0) goto u9zMl; else goto c9zKT;
       u9zMl: // global
           call _c9zKP(R1) args: 0, res: 0, upd: 0;
       c9zKT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zKP() //  [R1]
         { info_tbl: [(c9zKP,
                       label: block_c9zKP_info
                       rep:StackRep [True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zKP: // global
           _s9y7r::P64 = P64[Sp + 40];
           _s9y7w::I64 = I64[Sp + 8];
           _s9y7z::I64 = I64[Sp + 16];
           _s9y7D::I64 = I64[Sp + 32];
           if (I64[R1 + 7] == 0) goto c9zLw; else goto c9zLv;
       c9zLw: // global
           _s9y7I::I64 = 1;
           goto s9y7H;
       c9zLv: // global
           if (I64[Sp + 24] == 0) goto c9zLt; else goto c9zLs;
       c9zLt: // global
           _s9y7I::I64 = 2;
           goto s9y7H;
       c9zLs: // global
           _s9y7I::I64 = 3;
           goto s9y7H;
       s9y7H: // global
           (_s9y7M::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y7D::I64, _s9y7I::I64, _s9y7z::I64, _s9y7w::I64);
           if (%MO_SS_Conv_W64_W32(_s9y7M::I64) == (-1) :: W32) goto c9zLk; else goto c9zLe;
       c9zLk: // global
           (_s9y7S::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y7S::I64;
           Sp = Sp + 48;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9zLe: // global
           call MO_Touch(_s9y7r::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.088768318 UTC

[section ""data" . GHC.Event.EPoll.new5_closure" {
     GHC.Event.EPoll.new5_closure:
         const GHC.Event.EPoll.new5_info;
         const 0;
 },
 GHC.Event.EPoll.new5_entry() //  [R2, R3, R4]
         { info_tbl: [(c9zMW,
                       label: GHC.Event.EPoll.new5_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zMW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9zMX; else goto c9zMY;
       c9zMX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zMY: // global
           I64[Sp - 24] = block_c9zMT_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zPl; else goto c9zMU;
       u9zPl: // global
           call _c9zMT(R1) args: 0, res: 0, upd: 0;
       c9zMU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zMT() //  [R1]
         { info_tbl: [(c9zMT,
                       label: block_c9zMT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zMT: // global
           _s9y84::I64 = I64[R1 + 7];
           if (_s9y84::I64 & 1 == 0) goto c9zP0; else goto c9zOF;
       c9zP0: // global
           if (_s9y84::I64 & 2 == 0) goto c9zPf; else goto c9zP9;
       c9zPf: // global
           _s9y86::I64 = 0;
           goto s9y85;
       c9zP9: // global
           _s9y86::I64 = 4;
           goto s9y85;
       c9zOF: // global
           if (_s9y84::I64 & 2 == 0) goto c9zOU; else goto c9zOO;
       c9zOU: // global
           _s9y86::I64 = 1;
           goto s9y85;
       c9zOO: // global
           _s9y86::I64 = 5;
           goto s9y85;
       s9y85: // global
           I64[Sp - 8] = block_c9zN7_info;
           R2 = 4;
           R1 = 12;
           I64[Sp] = _s9y86::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zN7() //  [R1]
         { info_tbl: [(c9zN7,
                       label: block_c9zN7_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zN7: // global
           _s9y80::P64 = P64[Sp + 24];
           _s9y8d::I64 = I64[Sp + 8] | 1073741824;
           _s9y8e::I64 = R1 + 16;
           I32[_s9y8e::I64] = %MO_UU_Conv_W64_W32(_s9y8d::I64);
           I64[Sp - 8] = block_c9zNf_info;
           _s9y8c::P64 = R1;
           R1 = _s9y80::P64;
           I64[Sp] = _s9y8e::I64;
           I64[Sp + 8] = _s9y8d::I64;
           P64[Sp + 24] = _s9y8c::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zPm; else goto c9zNg;
       u9zPm: // global
           call _c9zNf(R1) args: 0, res: 0, upd: 0;
       c9zNg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zNf() //  [R1]
         { info_tbl: [(c9zNf,
                       label: block_c9zNf_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zNf: // global
           _s9y7Z::P64 = P64[Sp + 24];
           _s9y8h::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9y8h::I64);
           I64[Sp] = block_c9zNn_info;
           R1 = _s9y7Z::P64;
           I64[Sp + 24] = _s9y8h::I64;
           if (R1 & 7 != 0) goto u9zPn; else goto c9zNr;
       u9zPn: // global
           call _c9zNn(R1) args: 0, res: 0, upd: 0;
       c9zNr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zNn() //  [R1]
         { info_tbl: [(c9zNn,
                       label: block_c9zNn_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zNn: // global
           _s9y8c::P64 = P64[Sp + 32];
           _s9y8l::I64 = I64[R1 + 15];
           (_s9y8q::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y8l::I64, 3, I64[Sp + 24], I64[Sp + 8]);
           call MO_Touch(_s9y8c::P64);
           if (%MO_SS_Conv_W64_W32(_s9y8q::I64) == 0 :: W32) goto c9zOw; else goto c9zNH;
       c9zOw: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zNH: // global
           (_s9y8w::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y8w::I64) == 2 :: W32) goto c9zO0; else goto c9zNR;
       c9zO0: // global
           I64[Sp + 8] = block_c9zNZ_info;
           R2 = 4;
           R1 = 12;
           I64[Sp + 32] = _s9y8l::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c9zNR: // global
           R2 = GHC.Event.EPoll.new7_closure;
           Sp = Sp + 40;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9zNZ() //  [R1]
         { info_tbl: [(c9zNZ,
                       label: block_c9zNZ_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zNZ: // global
           _s9y8h::I64 = I64[Sp + 16];
           _s9y8l::I64 = I64[Sp + 24];
           _s9y8E::I64 = R1 + 16;
           I32[_s9y8E::I64] = %MO_UU_Conv_W64_W32(I64[Sp + 8]);
           I32[_s9y8E::I64 + 4] = %MO_UU_Conv_W64_W32(_s9y8h::I64);
           (_s9y8L::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y8l::I64, 1, _s9y8h::I64, _s9y8E::I64);
           if (%MO_SS_Conv_W64_W32(_s9y8L::I64) == (-1) :: W32) goto c9zOq; else goto c9zOk;
       c9zOq: // global
           (_s9y8R::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y8R::I64;
           Sp = Sp + 32;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9zOk: // global
           call MO_Touch(R1);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.103523818 UTC

[section ""data" . GHC.Event.EPoll.new4_closure" {
     GHC.Event.EPoll.new4_closure:
         const GHC.Event.EPoll.new4_info;
 },
 GHC.Event.EPoll.new4_entry() //  [R2]
         { info_tbl: [(c9zPZ,
                       label: GHC.Event.EPoll.new4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zPZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zQ0; else goto c9zQ1;
       c9zQ0: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.new4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zQ1: // global
           I64[Sp - 8] = block_c9zPW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zQ7; else goto c9zPX;
       u9zQ7: // global
           call _c9zPW(R1) args: 0, res: 0, upd: 0;
       c9zPX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zPW() //  [R1]
         { info_tbl: [(c9zPW,
                       label: block_c9zPW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zPW: // global
           (_s9y94::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(I64[R1 + 15]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.109808077 UTC

[section ""data" . GHC.Event.EPoll.$w$j_closure" {
     GHC.Event.EPoll.$w$j_closure:
         const GHC.Event.EPoll.$w$j_info;
         const 0;
 },
 GHC.Event.EPoll.$w$j_entry() //  [R2]
         { info_tbl: [(c9zQq,
                       label: GHC.Event.EPoll.$w$j_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zQq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zQr; else goto c9zQs;
       c9zQr: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$j_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zQs: // global
           (_s9y9a::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfd();
           (_s9y9e::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_fd_cloexec();
           (_s9y9j::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(R2, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y9a::I64)), _s9y9e::I64);
           if (%MO_SS_Conv_W64_W32(_s9y9j::I64) == (-1) :: W32) goto c9zR1; else goto c9zQR;
       c9zR1: // global
           (_s9y9A::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y9A::I64;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       c9zQR: // global
           I64[Sp - 16] = block_c9zQE_info;
           R1 = 768;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zQE() //  [R1]
         { info_tbl: [(c9zQE,
                       label: block_c9zQE_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zQE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9zQV; else goto c9zQU;
       c9zQV: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zQU: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 61;
           P64[Hp - 32] = R1 + 16;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 64;
           I64[Sp] = block_c9zQM_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zQM() //  [R1]
         { info_tbl: [(c9zQM,
                       label: block_c9zQM_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zQM: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9zQY; else goto c9zQX;
       c9zQY: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zQX: // global
           I64[Hp - 64] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.Event.Internal.Backend_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = GHC.Event.EPoll.new10_closure+4;
           P64[Hp - 16] = GHC.Event.EPoll.new9_closure+5;
           P64[Hp - 8] = GHC.Event.EPoll.new5_closure+4;
           P64[Hp] = GHC.Event.EPoll.new4_closure+2;
           R1 = Hp - 39;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.117934126 UTC

[section ""cstring" . GHC.Event.EPoll.new3_bytes" {
     GHC.Event.EPoll.new3_bytes:
         I8[] [101,112,111,108,108,67,114,101,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.119723756 UTC

[section ""data" . GHC.Event.EPoll.new2_closure" {
     GHC.Event.EPoll.new2_closure:
         const GHC.Event.EPoll.new2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new2_entry() //  [R1]
         { info_tbl: [(c9zRw,
                       label: GHC.Event.EPoll.new2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zRw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zRx; else goto c9zRy;
       c9zRx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zRy: // global
           (_c9zRt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zRt::I64 == 0) goto c9zRv; else goto c9zRu;
       c9zRv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zRu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zRt::I64;
           R2 = GHC.Event.EPoll.new3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.124216003 UTC

[section ""data" . GHC.Event.EPoll.new1_closure" {
     GHC.Event.EPoll.new1_closure:
         const GHC.Event.EPoll.new1_info;
         const 0;
 },
 GHC.Event.EPoll.new1_entry() //  []
         { info_tbl: [(c9zRR,
                       label: GHC.Event.EPoll.new1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zRR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zRS; else goto c9zRT;
       c9zRS: // global
           R1 = GHC.Event.EPoll.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9zRT: // global
           (_s9y9G::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] epoll_create(256);
           _s9y9H::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y9G::I64));
           if (_s9y9H::I64 != (-1)) goto c9zRP; else goto c9zRQ;
       c9zRP: // global
           R2 = _s9y9H::I64;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
       c9zRQ: // global
           I64[Sp - 8] = block_c9zS3_info;
           R2 = GHC.Event.EPoll.new2_closure;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9zS3() //  [R1]
         { info_tbl: [(c9zS3,
                       label: block_c9zS3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zS3: // global
           I64[Sp] = block_c9zS5_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9zSd; else goto c9zS8;
       u9zSd: // global
           call _c9zS5(R1) args: 0, res: 0, upd: 0;
       c9zS8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zS5() //  [R1]
         { info_tbl: [(c9zS5,
                       label: block_c9zS5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zS5: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.130905693 UTC

[section ""data" . GHC.Event.EPoll.new_closure" {
     GHC.Event.EPoll.new_closure:
         const GHC.Event.EPoll.new_info;
         const 0;
 },
 GHC.Event.EPoll.new_entry() //  []
         { info_tbl: [(c9zSu,
                       label: GHC.Event.EPoll.new_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zSu: // global
           call GHC.Event.EPoll.new1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.134739758 UTC

[section ""data" . GHC.Event.EPoll.Event_closure" {
     GHC.Event.EPoll.Event_closure:
         const GHC.Event.EPoll.Event_info;
 },
 GHC.Event.EPoll.Event_entry() //  [R2, R3]
         { info_tbl: [(c9zSG,
                       label: GHC.Event.EPoll.Event_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zSG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zSK; else goto c9zSJ;
       c9zSK: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.Event_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zSJ: // global
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.138394711 UTC

[section ""data" . GHC.Event.EPoll.EPoll_closure" {
     GHC.Event.EPoll.EPoll_closure:
         const GHC.Event.EPoll.EPoll_info;
 },
 GHC.Event.EPoll.EPoll_entry() //  [R2, R3]
         { info_tbl: [(c9zSV,
                       label: GHC.Event.EPoll.EPoll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zSV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zSZ; else goto c9zSY;
       c9zSZ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.EPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zSY: // global
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.142498089 UTC

[GHC.Event.EPoll.Event_con_entry() //  [R1]
         { info_tbl: [(c9zT5,
                       label: GHC.Event.EPoll.Event_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,118,101,110,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zT5: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.14547942 UTC

[GHC.Event.EPoll.EPoll_con_entry() //  [R1]
         { info_tbl: [(c9zTb,
                       label: GHC.Event.EPoll.EPoll_con_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,80,111,108,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9zTb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:40.148507213 UTC

[section ""relreadonly" . S9yi5_srt" {
     S9yi5_srt:
         const GHC.Event.EPoll.$fShowEPollFd5_closure;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Event.EPoll.$fShowEvent6_closure;
         const GHC.Event.EPoll.$w$cshowsPrec1_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure;
         const GHC.Event.EPoll.$fShowEvent1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_r9y02_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.EPoll.new10_closure;
         const lvl3_r9y04_closure;
         const lvl5_r9y06_closure;
         const GHC.Event.EPoll.new6_closure;
         const GHC.Event.EPoll.new9_closure;
         const GHC.Event.EPoll.new5_closure;
         const GHC.Event.EPoll.new7_closure;
         const System.Posix.Internals.setCloseOnExec2_closure;
         const GHC.Event.EPoll.$w$j_closure;
         const GHC.Event.EPoll.new1_closure;
         const GHC.Event.EPoll.new2_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.337233196 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:42.338880839 UTC

[section ""data" . GHC.Event.EPoll.$WEPoll_closure" {
     GHC.Event.EPoll.$WEPoll_closure:
         const GHC.Event.EPoll.$WEPoll_info;
 },
 GHC.Event.EPoll.$WEPoll_entry() //  [R2, R3]
         { info_tbl: [(c9A31,
                       label: GHC.Event.EPoll.$WEPoll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A31: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9A3a; else goto c9A3b;
       c9A3a: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$WEPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A3b: // global
           I64[Sp - 16] = block_c9A2Y_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9A3h; else goto c9A2Z;
       u9A3h: // global
           call _c9A2Y(R1) args: 0, res: 0, upd: 0;
       c9A2Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A2Y() //  [R1]
         { info_tbl: [(c9A2Y,
                       label: block_c9A2Y_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A2Y: // global
           I64[Sp] = block_c9A34_info;
           _s9zTl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zTl::I64;
           if (R1 & 7 != 0) goto u9A3g; else goto c9A35;
       u9A3g: // global
           call _c9A34(R1) args: 0, res: 0, upd: 0;
       c9A35: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A34() //  [R1]
         { info_tbl: [(c9A34,
                       label: block_c9A34_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A34: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9A3f; else goto c9A3e;
       c9A3f: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9A3e: // global
           _s9zTn::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = _s9zTn::P64;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.346513128 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$calignment_closure" {
     GHC.Event.EPoll.$fStorableEvent_$calignment_closure:
         const GHC.Event.EPoll.$fStorableEvent_$calignment_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$calignment_entry() //  []
         { info_tbl: [(c9A3E,
                       label: GHC.Event.EPoll.$fStorableEvent_$calignment_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A3E: // global
           R1 = Foreign.Storable.$fStorableBool7_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.349777706 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent7_closure" {
     GHC.Event.EPoll.$fStorableEvent7_closure:
         const GHC.Types.I#_con_info;
         const 12;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.351619156 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure" {
     GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure:
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$csizeOf_entry() //  []
         { info_tbl: [(c9A3R,
                       label: GHC.Event.EPoll.$fStorableEvent_$csizeOf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A3R: // global
           R1 = GHC.Event.EPoll.$fStorableEvent7_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.355362793 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent2_closure" {
     GHC.Event.EPoll.$fStorableEvent2_closure:
         const GHC.Event.EPoll.$fStorableEvent2_info;
 },
 GHC.Event.EPoll.$fStorableEvent2_entry() //  [R2]
         { info_tbl: [(c9A46,
                       label: GHC.Event.EPoll.$fStorableEvent2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A46: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9A4f; else goto c9A4g;
       c9A4f: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9A4g: // global
           I64[Sp - 8] = block_c9A43_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9A4k; else goto c9A44;
       u9A4k: // global
           call _c9A43(R1) args: 0, res: 0, upd: 0;
       c9A44: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A43() //  [R1]
         { info_tbl: [(c9A43,
                       label: block_c9A43_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A43: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9A4j; else goto c9A4i;
       c9A4j: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9A4i: // global
           _s9zTt::I64 = I64[R1 + 7];
           _s9zTw::I64 = %MO_UU_Conv_W32_W64(I32[_s9zTt::I64]);
           _s9zTA::I64 = %MO_SS_Conv_W32_W64(I32[_s9zTt::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9zTA::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9zTw::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.361819555 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent1_closure" {
     GHC.Event.EPoll.$fStorableEvent1_closure:
         const GHC.Event.EPoll.$fStorableEvent1_info;
 },
 GHC.Event.EPoll.$fStorableEvent1_entry() //  [R2, R3]
         { info_tbl: [(c9A4I,
                       label: GHC.Event.EPoll.$fStorableEvent1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A4I: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9A4W; else goto c9A4X;
       c9A4W: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A4X: // global
           I64[Sp - 16] = block_c9A4F_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9A58; else goto c9A4G;
       u9A58: // global
           call _c9A4F(R1) args: 0, res: 0, upd: 0;
       c9A4G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A4F() //  [R1]
         { info_tbl: [(c9A4F,
                       label: block_c9A4F_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A4F: // global
           I64[Sp] = block_c9A4L_info;
           _s9zTI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zTI::I64;
           if (R1 & 7 != 0) goto u9A57; else goto c9A4M;
       u9A57: // global
           call _c9A4L(R1) args: 0, res: 0, upd: 0;
       c9A4M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A4L() //  [R1]
         { info_tbl: [(c9A4L,
                       label: block_c9A4L_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A4L: // global
           I64[Sp - 8] = block_c9A4Q_info;
           _s9zTL::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9zTL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9A59; else goto c9A4R;
       u9A59: // global
           call _c9A4Q(R1) args: 0, res: 0, upd: 0;
       c9A4R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A4Q() //  [R1]
         { info_tbl: [(c9A4Q,
                       label: block_c9A4Q_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A4Q: // global
           _s9zTL::P64 = P64[Sp + 8];
           I32[I64[Sp + 16]] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 8] = block_c9A4V_info;
           R1 = _s9zTL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9A5a; else goto c9A51;
       u9A5a: // global
           call _c9A4V(R1) args: 0, res: 0, upd: 0;
       c9A51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A4V() //  [R1]
         { info_tbl: [(c9A4V,
                       label: block_c9A4V_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A4V: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.374138143 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent4_closure" {
     GHC.Event.EPoll.$fStorableEvent4_closure:
         const GHC.Event.EPoll.$fStorableEvent4_info;
 },
 GHC.Event.EPoll.$fStorableEvent4_entry() //  [R2, R3]
         { info_tbl: [(c9A5N,
                       label: GHC.Event.EPoll.$fStorableEvent4_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A5N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9A64; else goto c9A65;
       c9A64: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A65: // global
           I64[Sp - 16] = block_c9A5K_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9A6b; else goto c9A5L;
       u9A6b: // global
           call _c9A5K(R1) args: 0, res: 0, upd: 0;
       c9A5L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A5K() //  [R1]
         { info_tbl: [(c9A5K,
                       label: block_c9A5K_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A5K: // global
           I64[Sp] = block_c9A5Q_info;
           _s9zTX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zTX::I64;
           if (R1 & 7 != 0) goto u9A6a; else goto c9A5R;
       u9A6a: // global
           call _c9A5Q(R1) args: 0, res: 0, upd: 0;
       c9A5R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A5Q() //  [R1]
         { info_tbl: [(c9A5Q,
                       label: block_c9A5Q_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A5Q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9A69; else goto c9A68;
       c9A69: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9A68: // global
           _s9zU0::I64 = I64[Sp + 8] + I64[R1 + 7];
           _s9zU3::I64 = %MO_UU_Conv_W32_W64(I32[_s9zU0::I64]);
           _s9zU7::I64 = %MO_SS_Conv_W32_W64(I32[_s9zU0::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9zU7::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9zU3::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.382324902 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent6_closure" {
     GHC.Event.EPoll.$fStorableEvent6_closure:
         const GHC.Event.EPoll.$fStorableEvent6_info;
 },
 GHC.Event.EPoll.$fStorableEvent6_entry() //  [R2, R3]
         { info_tbl: [(c9A6G,
                       label: GHC.Event.EPoll.$fStorableEvent6_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A6G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9A70; else goto c9A71;
       c9A70: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A71: // global
           I64[Sp - 16] = block_c9A6D_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9A77; else goto c9A6E;
       u9A77: // global
           call _c9A6D(R1) args: 0, res: 0, upd: 0;
       c9A6E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A6D() //  [R1]
         { info_tbl: [(c9A6D,
                       label: block_c9A6D_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A6D: // global
           I64[Sp] = block_c9A6J_info;
           _s9zUf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zUf::I64;
           if (R1 & 7 != 0) goto u9A76; else goto c9A6K;
       u9A76: // global
           call _c9A6J(R1) args: 0, res: 0, upd: 0;
       c9A6K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A6J() //  [R1]
         { info_tbl: [(c9A6J,
                       label: block_c9A6J_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A6J: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9A75; else goto c9A74;
       c9A75: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9A74: // global
           _s9zUi::I64 = I64[Sp + 8] + I64[R1 + 7] * 12;
           _s9zUm::I64 = %MO_UU_Conv_W32_W64(I32[_s9zUi::I64]);
           _s9zUq::I64 = %MO_SS_Conv_W32_W64(I32[_s9zUi::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9zUq::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9zUm::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.390961935 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent3_closure" {
     GHC.Event.EPoll.$fStorableEvent3_closure:
         const GHC.Event.EPoll.$fStorableEvent3_info;
 },
 GHC.Event.EPoll.$fStorableEvent3_entry() //  [R2, R3, R4]
         { info_tbl: [(c9A7D,
                       label: GHC.Event.EPoll.$fStorableEvent3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A7D: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9A7Z; else goto c9A80;
       c9A7Z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A80: // global
           I64[Sp - 24] = block_c9A7A_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9A8c; else goto c9A7B;
       u9A8c: // global
           call _c9A7A(R1) args: 0, res: 0, upd: 0;
       c9A7B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A7A() //  [R1]
         { info_tbl: [(c9A7A,
                       label: block_c9A7A_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A7A: // global
           I64[Sp] = block_c9A7G_info;
           _s9zUz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zUz::I64;
           if (R1 & 7 != 0) goto u9A8b; else goto c9A7H;
       u9A8b: // global
           call _c9A7G(R1) args: 0, res: 0, upd: 0;
       c9A7H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A7G() //  [R1]
         { info_tbl: [(c9A7G,
                       label: block_c9A7G_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A7G: // global
           I64[Sp] = block_c9A7L_info;
           _s9zUB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9zUB::I64;
           if (R1 & 7 != 0) goto u9A8d; else goto c9A7M;
       u9A8d: // global
           call _c9A7L(R1) args: 0, res: 0, upd: 0;
       c9A7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A7L() //  [R1]
         { info_tbl: [(c9A7L,
                       label: block_c9A7L_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A7L: // global
           I64[Sp - 8] = block_c9A7Q_info;
           _s9zUE::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9zUE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9A8e; else goto c9A7R;
       u9A8e: // global
           call _c9A7Q(R1) args: 0, res: 0, upd: 0;
       c9A7R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A7Q() //  [R1]
         { info_tbl: [(c9A7Q,
                       label: block_c9A7Q_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A7Q: // global
           _s9zUE::P64 = P64[Sp + 8];
           _s9zUH::I64 = I64[Sp + 16] + I64[Sp + 24];
           I32[_s9zUH::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9A7Y_info;
           R1 = _s9zUE::P64;
           I64[Sp + 24] = _s9zUH::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9A8f; else goto c9A85;
       u9A8f: // global
           call _c9A7Y(R1) args: 0, res: 0, upd: 0;
       c9A85: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A7Y() //  [R1]
         { info_tbl: [(c9A7Y,
                       label: block_c9A7Y_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A7Y: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.404814987 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent5_closure" {
     GHC.Event.EPoll.$fStorableEvent5_closure:
         const GHC.Event.EPoll.$fStorableEvent5_info;
 },
 GHC.Event.EPoll.$fStorableEvent5_entry() //  [R2, R3, R4]
         { info_tbl: [(c9A8X,
                       label: GHC.Event.EPoll.$fStorableEvent5_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A8X: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9A9m; else goto c9A9n;
       c9A9m: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A9n: // global
           I64[Sp - 24] = block_c9A8U_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9A9z; else goto c9A8V;
       u9A9z: // global
           call _c9A8U(R1) args: 0, res: 0, upd: 0;
       c9A8V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A8U() //  [R1]
         { info_tbl: [(c9A8U,
                       label: block_c9A8U_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A8U: // global
           I64[Sp] = block_c9A90_info;
           _s9zUS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zUS::I64;
           if (R1 & 7 != 0) goto u9A9y; else goto c9A91;
       u9A9y: // global
           call _c9A90(R1) args: 0, res: 0, upd: 0;
       c9A91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A90() //  [R1]
         { info_tbl: [(c9A90,
                       label: block_c9A90_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A90: // global
           I64[Sp] = block_c9A95_info;
           _s9zUU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9zUU::I64;
           if (R1 & 7 != 0) goto u9A9A; else goto c9A96;
       u9A9A: // global
           call _c9A95(R1) args: 0, res: 0, upd: 0;
       c9A96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A95() //  [R1]
         { info_tbl: [(c9A95,
                       label: block_c9A95_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A95: // global
           I64[Sp - 8] = block_c9A9a_info;
           _s9zUX::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9zUX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9A9B; else goto c9A9b;
       u9A9B: // global
           call _c9A9a(R1) args: 0, res: 0, upd: 0;
       c9A9b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A9a() //  [R1]
         { info_tbl: [(c9A9a,
                       label: block_c9A9a_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A9a: // global
           _s9zUX::P64 = P64[Sp + 8];
           _s9zV0::I64 = I64[Sp + 16] + I64[Sp + 24] * 12;
           I32[_s9zV0::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9A9l_info;
           R1 = _s9zUX::P64;
           I64[Sp + 24] = _s9zV0::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9A9C; else goto c9A9s;
       u9A9C: // global
           call _c9A9l(R1) args: 0, res: 0, upd: 0;
       c9A9s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9A9l() //  [R1]
         { info_tbl: [(c9A9l,
                       label: block_c9A9l_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9A9l: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.417016281 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_closure" {
     GHC.Event.EPoll.$fStorableEvent_closure:
         const Foreign.Storable.C:Storable_con_info;
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure+1;
         const GHC.Event.EPoll.$fStorableEvent_$calignment_closure+1;
         const GHC.Event.EPoll.$fStorableEvent6_closure+3;
         const GHC.Event.EPoll.$fStorableEvent5_closure+4;
         const GHC.Event.EPoll.$fStorableEvent4_closure+3;
         const GHC.Event.EPoll.$fStorableEvent3_closure+4;
         const GHC.Event.EPoll.$fStorableEvent2_closure+2;
         const GHC.Event.EPoll.$fStorableEvent1_closure+3;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.418985565 UTC

[section ""data" . GHC.Event.EPoll.$fEqEventType_closure" {
     GHC.Event.EPoll.$fEqEventType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Word.eqWord32_closure+2;
         const GHC.Word.neWord32_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.420853918 UTC

[section ""data" . GHC.Event.EPoll.$fBitsEventType_closure" {
     GHC.Event.EPoll.$fBitsEventType_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Event.EPoll.$fEqEventType_closure+1;
         const GHC.Word.$fBitsWord32_$c.&._closure+2;
         const GHC.Word.$fBitsWord32_$c.|._closure+2;
         const GHC.Word.$fBitsWord32_$cxor_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplement_closure+1;
         const GHC.Word.$fBitsWord32_$cshift_closure+2;
         const GHC.Word.$fBitsWord32_$crotate_closure+2;
         const GHC.Word.$fBitsWord32_$cminBound_closure;
         const GHC.Word.$fBitsWord32_$cbit_closure+1;
         const GHC.Word.$fBitsWord32_$csetBit_closure+2;
         const GHC.Word.$fBitsWord32_$cclearBit_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplementBit_closure+2;
         const GHC.Word.$fBitsWord32_$ctestBit_closure+2;
         const GHC.Word.$fBitsWord32_$cbitSizeMaybe_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fBitsWord32_$cisSigned_closure+1;
         const GHC.Word.$fBitsWord32_$cshiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cshiftR_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftR_closure+2;
         const GHC.Word.$fBitsWord32_$crotateL_closure+2;
         const GHC.Word.$fBitsWord32_$crotateR_closure+2;
         const GHC.Word.$fBitsWord32_$cpopCount_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.42360838 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd1_closure" {
     GHC.Event.EPoll.fromEPollFd1_closure:
         const GHC.Event.EPoll.fromEPollFd1_info;
 },
 GHC.Event.EPoll.fromEPollFd1_entry() //  [R2]
         { info_tbl: [(c9Aam,
                       label: GHC.Event.EPoll.fromEPollFd1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aam: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.427010617 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd_closure" {
     GHC.Event.EPoll.fromEPollFd_closure:
         const GHC.Event.EPoll.fromEPollFd_info;
 },
 GHC.Event.EPoll.fromEPollFd_entry() //  [R2]
         { info_tbl: [(c9Aaz,
                       label: GHC.Event.EPoll.fromEPollFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aaz: // global
           R2 = R2;
           call GHC.Event.EPoll.fromEPollFd1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.430272693 UTC

[section ""data" . GHC.Event.EPoll.unEventType1_closure" {
     GHC.Event.EPoll.unEventType1_closure:
         const GHC.Event.EPoll.unEventType1_info;
 },
 GHC.Event.EPoll.unEventType1_entry() //  [R2]
         { info_tbl: [(c9AaK,
                       label: GHC.Event.EPoll.unEventType1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AaK: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.434168413 UTC

[section ""data" . GHC.Event.EPoll.unEventType_closure" {
     GHC.Event.EPoll.unEventType_closure:
         const GHC.Event.EPoll.unEventType_info;
 },
 GHC.Event.EPoll.unEventType_entry() //  [R2]
         { info_tbl: [(c9AaX,
                       label: GHC.Event.EPoll.unEventType_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AaX: // global
           R2 = R2;
           call GHC.Event.EPoll.unEventType1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.438063416 UTC

[section ""data" . GHC.Event.EPoll.eventFd_closure" {
     GHC.Event.EPoll.eventFd_closure:
         const GHC.Event.EPoll.eventFd_info;
 },
 GHC.Event.EPoll.eventFd_entry() //  [R2]
         { info_tbl: [(c9Abb,
                       label: GHC.Event.EPoll.eventFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Abb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Abc; else goto c9Abd;
       c9Abc: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Abd: // global
           I64[Sp - 8] = block_c9Ab8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Abh; else goto c9Ab9;
       u9Abh: // global
           call _c9Ab8(R1) args: 0, res: 0, upd: 0;
       c9Ab9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Ab8() //  [R1]
         { info_tbl: [(c9Ab8,
                       label: block_c9Ab8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ab8: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.44342864 UTC

[section ""data" . GHC.Event.EPoll.eventTypes_closure" {
     GHC.Event.EPoll.eventTypes_closure:
         const GHC.Event.EPoll.eventTypes_info;
 },
 GHC.Event.EPoll.eventTypes_entry() //  [R2]
         { info_tbl: [(c9AbB,
                       label: GHC.Event.EPoll.eventTypes_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AbB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9AbC; else goto c9AbD;
       c9AbC: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventTypes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9AbD: // global
           I64[Sp - 8] = block_c9Aby_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9AbH; else goto c9Abz;
       u9AbH: // global
           call _c9Aby(R1) args: 0, res: 0, upd: 0;
       c9Abz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Aby() //  [R1]
         { info_tbl: [(c9Aby,
                       label: block_c9Aby_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aby: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.449174269 UTC

[section ""data" . GHC.Event.EPoll.epollEvents_closure" {
     GHC.Event.EPoll.epollEvents_closure:
         const GHC.Event.EPoll.epollEvents_info;
 },
 GHC.Event.EPoll.epollEvents_entry() //  [R2]
         { info_tbl: [(c9Ac1,
                       label: GHC.Event.EPoll.epollEvents_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ac1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ac5; else goto c9Ac6;
       c9Ac5: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollEvents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ac6: // global
           I64[Sp - 8] = block_c9AbY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Aca; else goto c9AbZ;
       u9Aca: // global
           call _c9AbY(R1) args: 0, res: 0, upd: 0;
       c9AbZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AbY() //  [R1]
         { info_tbl: [(c9AbY,
                       label: block_c9AbY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AbY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Ac9; else goto c9Ac8;
       c9Ac9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ac8: // global
           _s9zVk::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s9zVk::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.455054228 UTC

[section ""data" . GHC.Event.EPoll.epollFd_closure" {
     GHC.Event.EPoll.epollFd_closure:
         const GHC.Event.EPoll.epollFd_info;
 },
 GHC.Event.EPoll.epollFd_entry() //  [R2]
         { info_tbl: [(c9Acu,
                       label: GHC.Event.EPoll.epollFd_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Acu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Acy; else goto c9Acz;
       c9Acy: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Acz: // global
           I64[Sp - 8] = block_c9Acr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9AcD; else goto c9Acs;
       u9AcD: // global
           call _c9Acr(R1) args: 0, res: 0, upd: 0;
       c9Acs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Acr() //  [R1]
         { info_tbl: [(c9Acr,
                       label: block_c9Acr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Acr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9AcC; else goto c9AcB;
       c9AcC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9AcB: // global
           _s9zVn::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9zVn::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.460865502 UTC

[section ""data" . GHC.Event.EPoll.available_closure" {
     GHC.Event.EPoll.available_closure:
         const GHC.Types.True_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.462619511 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule4_bytes" {
     GHC.Event.EPoll.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.46439329 UTC

[section ""data" . GHC.Event.EPoll.$trModule3_closure" {
     GHC.Event.EPoll.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.466174191 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule2_bytes" {
     GHC.Event.EPoll.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.467874049 UTC

[section ""data" . GHC.Event.EPoll.$trModule1_closure" {
     GHC.Event.EPoll.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.470437043 UTC

[section ""data" . GHC.Event.EPoll.$trModule_closure" {
     GHC.Event.EPoll.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.EPoll.$trModule3_closure+1;
         const GHC.Event.EPoll.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.472235507 UTC

[section ""data" . $krep_r9xZP_closure" {
     $krep_r9xZP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.473934736 UTC

[section ""data" . $krep1_r9xZQ_closure" {
     $krep1_r9xZQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord32_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.475600273 UTC

[section ""data" . $krep2_r9xZR_closure" {
     $krep2_r9xZR_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.477442596 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPollFd2_bytes" {
     GHC.Event.EPoll.$tcEPollFd2_bytes:
         I8[] [69,80,111,108,108,70,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.479104712 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd1_closure" {
     GHC.Event.EPoll.$tcEPollFd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPollFd2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.480809773 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd_closure" {
     GHC.Event.EPoll.$tcEPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPollFd1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11408974392712426853;
         const 10860743297622841984;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.482710483 UTC

[section ""data" . $krep3_r9xZS_closure" {
     $krep3_r9xZS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPollFd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.484413417 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd1_closure" {
     GHC.Event.EPoll.$tc'EPollFd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep3_r9xZS_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.486219 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPollFd3_bytes" {
     GHC.Event.EPoll.$tc'EPollFd3_bytes:
         I8[] [39,69,80,111,108,108,70,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.487823012 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd2_closure" {
     GHC.Event.EPoll.$tc'EPollFd2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPollFd3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.489862472 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd_closure" {
     GHC.Event.EPoll.$tc'EPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd2_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd1_closure+4;
         const 13859366844265277896;
         const 3104986725924328114;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.491691604 UTC

[section ""cstring" . GHC.Event.EPoll.$tcControlOp2_bytes" {
     GHC.Event.EPoll.$tcControlOp2_bytes:
         I8[] [67,111,110,116,114,111,108,79,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.493386567 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp1_closure" {
     GHC.Event.EPoll.$tcControlOp1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcControlOp2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.495557951 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp_closure" {
     GHC.Event.EPoll.$tcControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcControlOp1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16670684287779227039;
         const 7079239768931473179;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.497401754 UTC

[section ""data" . $krep4_r9xZT_closure" {
     $krep4_r9xZT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcControlOp_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.499075346 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp1_closure" {
     GHC.Event.EPoll.$tc'ControlOp1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep4_r9xZT_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.500740378 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'ControlOp3_bytes" {
     GHC.Event.EPoll.$tc'ControlOp3_bytes:
         I8[] [39,67,111,110,116,114,111,108,79,112]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.502340759 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp2_closure" {
     GHC.Event.EPoll.$tc'ControlOp2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'ControlOp3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.504041679 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp_closure" {
     GHC.Event.EPoll.$tc'ControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp2_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp1_closure+4;
         const 17423659744934710370;
         const 14737300415055323322;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.505868325 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEventType2_bytes" {
     GHC.Event.EPoll.$tcEventType2_bytes:
         I8[] [69,118,101,110,116,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.507539346 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType1_closure" {
     GHC.Event.EPoll.$tcEventType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEventType2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.509938259 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType_closure" {
     GHC.Event.EPoll.$tcEventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEventType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6882131545153803920;
         const 11603224301892798833;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.511768979 UTC

[section ""data" . $krep5_r9xZU_closure" {
     $krep5_r9xZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEventType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.513496543 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType1_closure" {
     GHC.Event.EPoll.$tc'EventType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r9xZQ_closure+1;
         const $krep5_r9xZU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.515210998 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EventType3_bytes" {
     GHC.Event.EPoll.$tc'EventType3_bytes:
         I8[] [39,69,118,101,110,116,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.516831264 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType2_closure" {
     GHC.Event.EPoll.$tc'EventType2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EventType3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.518607617 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType_closure" {
     GHC.Event.EPoll.$tc'EventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EventType2_closure+1;
         const GHC.Event.EPoll.$tc'EventType1_closure+4;
         const 6895099112894632230;
         const 10353865251933672677;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.520944267 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEvent2_bytes" {
     GHC.Event.EPoll.$tcEvent2_bytes:
         I8[] [69,118,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.523221307 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent1_closure" {
     GHC.Event.EPoll.$tcEvent1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEvent2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.524923673 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent_closure" {
     GHC.Event.EPoll.$tcEvent_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEvent1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9768726503562184735;
         const 14932995848660065219;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.526811505 UTC

[section ""data" . $krep6_r9xZV_closure" {
     $krep6_r9xZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEvent_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.528532204 UTC

[section ""data" . $krep7_r9xZW_closure" {
     $krep7_r9xZW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9xZR_closure+1;
         const $krep6_r9xZV_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.530320917 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event1_closure" {
     GHC.Event.EPoll.$tc'Event1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r9xZU_closure+1;
         const $krep7_r9xZW_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.532019092 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'Event3_bytes" {
     GHC.Event.EPoll.$tc'Event3_bytes:
         I8[] [39,69,118,101,110,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.534077631 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event2_closure" {
     GHC.Event.EPoll.$tc'Event2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'Event3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.53582303 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event_closure" {
     GHC.Event.EPoll.$tc'Event_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'Event2_closure+1;
         const GHC.Event.EPoll.$tc'Event1_closure+4;
         const 13898227050457859187;
         const 12870286929163337655;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.537670716 UTC

[section ""data" . $krep8_r9xZX_closure" {
     $krep8_r9xZX_closure:
         const :_con_info;
         const $krep6_r9xZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.53934555 UTC

[section ""data" . $krep9_r9xZY_closure" {
     $krep9_r9xZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcArray_closure;
         const $krep8_r9xZX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.541024745 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPoll2_bytes" {
     GHC.Event.EPoll.$tcEPoll2_bytes:
         I8[] [69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.542737129 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll1_closure" {
     GHC.Event.EPoll.$tcEPoll1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPoll2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.544703126 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll_closure" {
     GHC.Event.EPoll.$tcEPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPoll1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16362945812962510240;
         const 15183678187331181316;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.547569886 UTC

[section ""data" . $krep10_r9xZZ_closure" {
     $krep10_r9xZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPoll_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.549438007 UTC

[section ""data" . $krep11_r9y00_closure" {
     $krep11_r9y00_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r9xZY_closure+1;
         const $krep10_r9xZZ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.551143775 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll1_closure" {
     GHC.Event.EPoll.$tc'EPoll1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r9xZS_closure+1;
         const $krep11_r9y00_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.552945425 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPoll3_bytes" {
     GHC.Event.EPoll.$tc'EPoll3_bytes:
         I8[] [39,69,80,111,108,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.554640288 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll2_closure" {
     GHC.Event.EPoll.$tc'EPoll2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPoll3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.556371265 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll_closure" {
     GHC.Event.EPoll.$tc'EPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPoll2_closure+1;
         const GHC.Event.EPoll.$tc'EPoll1_closure+4;
         const 11640704659469356468;
         const 11164042648060985378;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.558244803 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd4_bytes" {
     GHC.Event.EPoll.$fShowEPollFd4_bytes:
         I8[] [69,80,111,108,108,70,100,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.559924365 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd3_bytes" {
     GHC.Event.EPoll.$fShowEPollFd3_bytes:
         I8[] [102,114,111,109,69,80,111,108,108,70,100,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.561990392 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd2_bytes" {
     GHC.Event.EPoll.$fShowEPollFd2_bytes:
         I8[] [125]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.56571946 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec_closure" {
     GHC.Event.EPoll.$w$cshowsPrec_closure:
         const GHC.Event.EPoll.$w$cshowsPrec_info;
 },
 sat_s9zVv_entry() //  [R1]
         { info_tbl: [(c9Ae8,
                       label: sat_s9zVv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ae8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ae9; else goto c9Aea;
       c9Ae9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aea: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zVz_entry() //  [R1]
         { info_tbl: [(c9Aeb,
                       label: sat_s9zVz_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aeb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Aef; else goto c9Aeg;
       c9Aef: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aeg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9AdZ_info;
           _s9zVr::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zVr::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Aen; else goto c9Ae0;
       u9Aen: // global
           call _c9AdZ(R1) args: 0, res: 0, upd: 0;
       c9Ae0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9AdZ() //  [R1]
         { info_tbl: [(c9AdZ,
                       label: block_c9AdZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AdZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Aej; else goto c9Aei;
       c9Aej: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Aei: // global
           _s9zVu::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zVv_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9Aec_info;
           R4 = Hp - 16;
           R3 = _s9zVu::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9Aec() //  [R1, R2]
         { info_tbl: [(c9Aec,
                       label: block_c9Aec_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aec: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Aem; else goto c9Ael;
       c9Aem: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9Ael: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zVA_entry() //  [R1]
         { info_tbl: [(c9Aeo,
                       label: sat_s9zVA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aeo: // global
           _s9zVA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aep; else goto c9Aeq;
       c9Aeq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Aes; else goto c9Aer;
       c9Aes: // global
           HpAlloc = 32;
           goto c9Aep;
       c9Aep: // global
           R1 = _s9zVA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aer: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zVA::P64;
           _s9zVq::P64 = P64[_s9zVA::P64 + 16];
           _s9zVr::P64 = P64[_s9zVA::P64 + 24];
           I64[Hp - 24] = sat_s9zVz_info;
           P64[Hp - 8] = _s9zVq::P64;
           P64[Hp] = _s9zVr::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zVE_entry() //  [R1]
         { info_tbl: [(c9AeQ,
                       label: sat_s9zVE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AeQ: // global
           _s9zVE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9AeR; else goto c9AeS;
       c9AeS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AeU; else goto c9AeT;
       c9AeU: // global
           HpAlloc = 24;
           goto c9AeR;
       c9AeR: // global
           R1 = _s9zVE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AeT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zVE::P64;
           _s9zVr::P64 = P64[_s9zVE::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9zVr::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zVI_entry() //  [R1]
         { info_tbl: [(c9AeV,
                       label: sat_s9zVI_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AeV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9AeZ; else goto c9Af0;
       c9AeZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Af0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9AeG_info;
           _s9zVr::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zVr::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Af7; else goto c9AeH;
       u9Af7: // global
           call _c9AeG(R1) args: 0, res: 0, upd: 0;
       c9AeH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9AeG() //  [R1]
         { info_tbl: [(c9AeG,
                       label: block_c9AeG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AeG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Af3; else goto c9Af2;
       c9Af3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Af2: // global
           _s9zVC::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zVE_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9AeW_info;
           R4 = Hp - 16;
           R3 = _s9zVC::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9AeW() //  [R1, R2]
         { info_tbl: [(c9AeW,
                       label: block_c9AeW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AeW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Af6; else goto c9Af5;
       c9Af6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9Af5: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zVJ_entry() //  [R1]
         { info_tbl: [(c9Af8,
                       label: sat_s9zVJ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Af8: // global
           _s9zVJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Af9; else goto c9Afa;
       c9Afa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Afc; else goto c9Afb;
       c9Afc: // global
           HpAlloc = 32;
           goto c9Af9;
       c9Af9: // global
           R1 = _s9zVJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Afb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zVJ::P64;
           _s9zVq::P64 = P64[_s9zVJ::P64 + 16];
           _s9zVr::P64 = P64[_s9zVJ::P64 + 24];
           I64[Hp - 24] = sat_s9zVI_info;
           P64[Hp - 8] = _s9zVq::P64;
           P64[Hp] = _s9zVr::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zVK_entry() //  [R1]
         { info_tbl: [(c9Afd,
                       label: sat_s9zVK_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Afd: // global
           _s9zVK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Afe; else goto c9Aff;
       c9Aff: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Afh; else goto c9Afg;
       c9Afh: // global
           HpAlloc = 32;
           goto c9Afe;
       c9Afe: // global
           R1 = _s9zVK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Afg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zVK::P64;
           _s9zVq::P64 = P64[_s9zVK::P64 + 16];
           _s9zVr::P64 = P64[_s9zVK::P64 + 24];
           I64[Hp - 24] = sat_s9zVJ_info;
           P64[Hp - 8] = _s9zVq::P64;
           P64[Hp] = _s9zVr::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Afl,
                       label: GHC.Event.EPoll.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Afl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Afp; else goto c9Afo;
       c9Afp: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Afo: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9Afj; else goto c9Afk;
       c9Afj: // global
           I64[Hp - 48] = sat_s9zVA_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9AdR::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9AdR::P64;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9Afk: // global
           I64[Hp - 48] = sat_s9zVK_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.594138216 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9AgM,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AgM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9AgN; else goto c9AgO;
       c9AgN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9AgO: // global
           I64[Sp - 24] = block_c9AgJ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9AgS; else goto c9AgK;
       u9AgS: // global
           call _c9AgJ(R1) args: 0, res: 0, upd: 0;
       c9AgK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AgJ() //  [R1]
         { info_tbl: [(c9AgJ,
                       label: block_c9AgJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AgJ: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.599617448 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd5_closure" {
     GHC.Event.EPoll.$fShowEPollFd5_closure:
         const GHC.Event.EPoll.$fShowEPollFd5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEPollFd5_entry() //  [R1]
         { info_tbl: [(c9Ah9,
                       label: GHC.Event.EPoll.$fShowEPollFd5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ah9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aha; else goto c9Ahb;
       c9Aha: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ahb: // global
           (_c9Ah6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ah6::I64 == 0) goto c9Ah8; else goto c9Ah7;
       c9Ah8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ah7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ah6::I64;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.604445025 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshow_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshow_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_info;
         const 0;
 },
 sat_s9zVW_entry() //  [R1]
         { info_tbl: [(c9Ahz,
                       label: sat_s9zVW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ahz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9AhF; else goto c9AhG;
       c9AhF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AhG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Ahw_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9AhL; else goto c9Ahx;
       u9AhL: // global
           call _c9Ahw(R1) args: 0, res: 0, upd: 0;
       c9Ahx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Ahw() //  [R1]
         { info_tbl: [(c9Ahw,
                       label: block_c9Ahw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ahw: // global
           I64[Sp] = block_c9AhC_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9AhC() //  [R1, R2]
         { info_tbl: [(c9AhC,
                       label: block_c9AhC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AhC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AhK; else goto c9AhJ;
       c9AhK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9AhJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zVX_entry() //  [R1]
         { info_tbl: [(c9AhM,
                       label: sat_s9zVX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AhM: // global
           _s9zVX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9AhN; else goto c9AhO;
       c9AhO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AhQ; else goto c9AhP;
       c9AhQ: // global
           HpAlloc = 24;
           goto c9AhN;
       c9AhN: // global
           R1 = _s9zVX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AhP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zVX::P64;
           _s9zVQ::P64 = P64[_s9zVX::P64 + 16];
           I64[Hp - 16] = sat_s9zVW_info;
           P64[Hp] = _s9zVQ::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshow_entry() //  [R2]
         { info_tbl: [(c9AhR,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AhR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AhV; else goto c9AhU;
       c9AhV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9AhU: // global
           I64[Hp - 16] = sat_s9zVX_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.616046597 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd1_closure" {
     GHC.Event.EPoll.$fShowEPollFd1_closure:
         const GHC.Event.EPoll.$fShowEPollFd1_info;
 },
 GHC.Event.EPoll.$fShowEPollFd1_entry() //  [R2, R3]
         { info_tbl: [(c9Ais,
                       label: GHC.Event.EPoll.$fShowEPollFd1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ais: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.619592809 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9AiD,
                       label: GHC.Event.EPoll.$fShowEPollFd_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AiD: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEPollFd1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.623780235 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_closure" {
     GHC.Event.EPoll.$fShowEPollFd_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.625586383 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent4_bytes" {
     GHC.Event.EPoll.$fShowEvent4_bytes:
         I8[] [69,118,101,110,116,84,121,112,101,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.627319025 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent3_bytes" {
     GHC.Event.EPoll.$fShowEvent3_bytes:
         I8[] [117,110,69,118,101,110,116,84,121,112,101,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.630784194 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec2_closure" {
     GHC.Event.EPoll.$w$cshowsPrec2_closure:
         const GHC.Event.EPoll.$w$cshowsPrec2_info;
 },
 sat_s9zW9_entry() //  [R1]
         { info_tbl: [(c9Ajb,
                       label: sat_s9zW9_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ajb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ajc; else goto c9Ajd;
       c9Ajc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ajd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWd_entry() //  [R1]
         { info_tbl: [(c9Aje,
                       label: sat_s9zWd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aje: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Ajl; else goto c9Ajm;
       c9Ajl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ajm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9Aj2_info;
           _s9zW4::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zW4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Ajt; else goto c9Aj3;
       u9Ajt: // global
           call _c9Aj2(R1) args: 0, res: 0, upd: 0;
       c9Aj3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Aj2() //  [R1]
         { info_tbl: [(c9Aj2,
                       label: block_c9Aj2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aj2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ajp; else goto c9Ajo;
       c9Ajp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Ajo: // global
           _s9zW7::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zW9_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9Aji_info;
           R3 = Hp - 16;
           R2 = _s9zW7::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9Aji() //  [R1, R2]
         { info_tbl: [(c9Aji,
                       label: block_c9Aji_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aji: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ajs; else goto c9Ajr;
       c9Ajs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9Ajr: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWe_entry() //  [R1]
         { info_tbl: [(c9Aju,
                       label: sat_s9zWe_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aju: // global
           _s9zWe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ajv; else goto c9Ajw;
       c9Ajw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Ajy; else goto c9Ajx;
       c9Ajy: // global
           HpAlloc = 32;
           goto c9Ajv;
       c9Ajv: // global
           R1 = _s9zWe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ajx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWe::P64;
           _s9zW3::P64 = P64[_s9zWe::P64 + 16];
           _s9zW4::P64 = P64[_s9zWe::P64 + 24];
           I64[Hp - 24] = sat_s9zWd_info;
           P64[Hp - 8] = _s9zW3::P64;
           P64[Hp] = _s9zW4::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWj_entry() //  [R1]
         { info_tbl: [(c9AjW,
                       label: sat_s9zWj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AjW: // global
           _s9zWj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9AjX; else goto c9AjY;
       c9AjY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ak0; else goto c9AjZ;
       c9Ak0: // global
           HpAlloc = 24;
           goto c9AjX;
       c9AjX: // global
           R1 = _s9zWj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AjZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWj::P64;
           _s9zW4::P64 = P64[_s9zWj::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9zW4::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWn_entry() //  [R1]
         { info_tbl: [(c9Ak1,
                       label: sat_s9zWn_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ak1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Ak8; else goto c9Ak9;
       c9Ak8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ak9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9AjM_info;
           _s9zW4::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zW4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Akg; else goto c9AjN;
       u9Akg: // global
           call _c9AjM(R1) args: 0, res: 0, upd: 0;
       c9AjN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9AjM() //  [R1]
         { info_tbl: [(c9AjM,
                       label: block_c9AjM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AjM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Akc; else goto c9Akb;
       c9Akc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Akb: // global
           _s9zWg::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zWj_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9Ak5_info;
           R3 = Hp - 16;
           R2 = _s9zWg::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9Ak5() //  [R1, R2]
         { info_tbl: [(c9Ak5,
                       label: block_c9Ak5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ak5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Akf; else goto c9Ake;
       c9Akf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9Ake: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWo_entry() //  [R1]
         { info_tbl: [(c9Akh,
                       label: sat_s9zWo_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Akh: // global
           _s9zWo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aki; else goto c9Akj;
       c9Akj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Akl; else goto c9Akk;
       c9Akl: // global
           HpAlloc = 32;
           goto c9Aki;
       c9Aki: // global
           R1 = _s9zWo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Akk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWo::P64;
           _s9zW3::P64 = P64[_s9zWo::P64 + 16];
           _s9zW4::P64 = P64[_s9zWo::P64 + 24];
           I64[Hp - 24] = sat_s9zWn_info;
           P64[Hp - 8] = _s9zW3::P64;
           P64[Hp] = _s9zW4::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWp_entry() //  [R1]
         { info_tbl: [(c9Akm,
                       label: sat_s9zWp_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Akm: // global
           _s9zWp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Akn; else goto c9Ako;
       c9Ako: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Akq; else goto c9Akp;
       c9Akq: // global
           HpAlloc = 32;
           goto c9Akn;
       c9Akn: // global
           R1 = _s9zWp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Akp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWp::P64;
           _s9zW3::P64 = P64[_s9zWp::P64 + 16];
           _s9zW4::P64 = P64[_s9zWp::P64 + 24];
           I64[Hp - 24] = sat_s9zWo_info;
           P64[Hp - 8] = _s9zW3::P64;
           P64[Hp] = _s9zW4::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Aku,
                       label: GHC.Event.EPoll.$w$cshowsPrec2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 19} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aku: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Aky; else goto c9Akx;
       c9Aky: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Akx: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9Aks; else goto c9Akt;
       c9Aks: // global
           I64[Hp - 48] = sat_s9zWe_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9AiU::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9AiU::P64;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9Akt: // global
           I64[Hp - 48] = sat_s9zWp_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.658912927 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(c9AlV,
                       label: GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AlV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9AlW; else goto c9AlX;
       c9AlW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9AlX: // global
           I64[Sp - 24] = block_c9AlS_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Am1; else goto c9AlT;
       u9Am1: // global
           call _c9AlS(R1) args: 0, res: 0, upd: 0;
       c9AlT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AlS() //  [R1]
         { info_tbl: [(c9AlS,
                       label: block_c9AlS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AlS: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.666133669 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshow_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshow_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshow_info;
         const 0;
 },
 sat_s9zWC_entry() //  [R1]
         { info_tbl: [(c9Amr,
                       label: sat_s9zWC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Amr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9AmA; else goto c9AmB;
       c9AmA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AmB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Amo_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9AmG; else goto c9Amp;
       u9AmG: // global
           call _c9Amo(R1) args: 0, res: 0, upd: 0;
       c9Amp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Amo() //  [R1]
         { info_tbl: [(c9Amo,
                       label: block_c9Amo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Amo: // global
           I64[Sp] = block_c9Amx_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9Amx() //  [R1, R2]
         { info_tbl: [(c9Amx,
                       label: block_c9Amx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Amx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AmF; else goto c9AmE;
       c9AmF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9AmE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWD_entry() //  [R1]
         { info_tbl: [(c9AmH,
                       label: sat_s9zWD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AmH: // global
           _s9zWD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9AmI; else goto c9AmJ;
       c9AmJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AmL; else goto c9AmK;
       c9AmL: // global
           HpAlloc = 24;
           goto c9AmI;
       c9AmI: // global
           R1 = _s9zWD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AmK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWD::P64;
           _s9zWv::P64 = P64[_s9zWD::P64 + 16];
           I64[Hp - 16] = sat_s9zWC_info;
           P64[Hp] = _s9zWv::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$fShowEventType_$cshow_entry() //  [R2]
         { info_tbl: [(c9AmM,
                       label: GHC.Event.EPoll.$fShowEventType_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AmM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AmQ; else goto c9AmP;
       c9AmQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9AmP: // global
           I64[Hp - 16] = sat_s9zWD_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.677582083 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType1_closure" {
     GHC.Event.EPoll.$fShowEventType1_closure:
         const GHC.Event.EPoll.$fShowEventType1_info;
 },
 GHC.Event.EPoll.$fShowEventType1_entry() //  [R2, R3]
         { info_tbl: [(c9Anm,
                       label: GHC.Event.EPoll.$fShowEventType1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Anm: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.680955966 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9Anx,
                       label: GHC.Event.EPoll.$fShowEventType_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Anx: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEventType1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.684348746 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_closure" {
     GHC.Event.EPoll.$fShowEventType_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEventType_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.686166962 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent7_bytes" {
     GHC.Event.EPoll.$fShowEvent7_bytes:
         I8[] [69,118,101,110,116,32,123]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.688066958 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent6_closure" {
     GHC.Event.EPoll.$fShowEvent6_closure:
         const GHC.Event.EPoll.$fShowEvent6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent6_entry() //  [R1]
         { info_tbl: [(c9AnM,
                       label: GHC.Event.EPoll.$fShowEvent6_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AnM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9AnN; else goto c9AnO;
       c9AnN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AnO: // global
           (_c9AnJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9AnJ::I64 == 0) goto c9AnL; else goto c9AnK;
       c9AnL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9AnK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9AnJ::I64;
           R2 = GHC.Event.EPoll.$fShowEvent7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.692141939 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent5_bytes" {
     GHC.Event.EPoll.$fShowEvent5_bytes:
         I8[] [101,118,101,110,116,84,121,112,101,115,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.694188172 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent2_bytes" {
     GHC.Event.EPoll.$fShowEvent2_bytes:
         I8[] [101,118,101,110,116,70,100,32,61,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.69920672 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec1_closure" {
     GHC.Event.EPoll.$w$cshowsPrec1_closure:
         const GHC.Event.EPoll.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Event.EPoll.$w$cshowsPrec1_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ao0: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9zWP_entry() //  [R1]
         { info_tbl: [(c9AoA,
                       label: sat_s9zWP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AoA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9AoB; else goto c9AoC;
       c9AoB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AoC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWT_entry() //  [R1]
         { info_tbl: [(c9AoD,
                       label: sat_s9zWT_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AoD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9AoH; else goto c9AoI;
       c9AoH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AoI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9Aor_info;
           _s9zWL::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zWL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9AoP; else goto c9Aos;
       u9AoP: // global
           call _c9Aor(R1) args: 0, res: 0, upd: 0;
       c9Aos: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Aor() //  [R1]
         { info_tbl: [(c9Aor,
                       label: block_c9Aor_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aor: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AoL; else goto c9AoK;
       c9AoL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9AoK: // global
           _s9zWO::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zWP_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9AoE_info;
           R4 = Hp - 16;
           R3 = _s9zWO::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9AoE() //  [R1, R2]
         { info_tbl: [(c9AoE,
                       label: block_c9AoE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AoE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AoO; else goto c9AoN;
       c9AoO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9AoN: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWU_entry() //  [R1]
         { info_tbl: [(c9AoQ,
                       label: sat_s9zWU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AoQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9AoU; else goto c9AoT;
       c9AoU: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AoT: // global
           _s9zWK::P64 = P64[R1 + 16];
           _s9zWL::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9zWT_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9zWV_entry() //  [R1]
         { info_tbl: [(c9AoV,
                       label: sat_s9zWV_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AoV: // global
           _s9zWV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9AoW; else goto c9AoX;
       c9AoX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9AoZ; else goto c9AoY;
       c9AoZ: // global
           HpAlloc = 32;
           goto c9AoW;
       c9AoW: // global
           R1 = _s9zWV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AoY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWV::P64;
           _s9zWK::P64 = P64[_s9zWV::P64 + 16];
           _s9zWL::P64 = P64[_s9zWV::P64 + 24];
           I64[Hp - 24] = sat_s9zWU_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWW_entry() //  [R1]
         { info_tbl: [(c9Ap0,
                       label: sat_s9zWW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ap0: // global
           _s9zWW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ap1; else goto c9Ap2;
       c9Ap2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Ap4; else goto c9Ap3;
       c9Ap4: // global
           HpAlloc = 32;
           goto c9Ap1;
       c9Ap1: // global
           R1 = _s9zWW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ap3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWW::P64;
           _s9zWJ::P64 = P64[_s9zWW::P64 + 16];
           _s9zWK::P64 = P64[_s9zWW::P64 + 24];
           _s9zWL::P64 = P64[_s9zWW::P64 + 32];
           I64[Hp - 24] = sat_s9zWV_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R4 = Hp - 24;
           R3 = _s9zWJ::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zWX_entry() //  [R1]
         { info_tbl: [(c9Ap5,
                       label: sat_s9zWX_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ap5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Ap9; else goto c9Ap8;
       c9Ap9: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ap8: // global
           _s9zWJ::P64 = P64[R1 + 16];
           _s9zWK::P64 = P64[R1 + 24];
           _s9zWL::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9zWW_info;
           P64[Hp - 16] = _s9zWJ::P64;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9zX1_entry() //  [R1]
         { info_tbl: [(c9ApJ,
                       label: sat_s9zX1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ApJ: // global
           _s9zX1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ApK; else goto c9ApL;
       c9ApL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ApN; else goto c9ApM;
       c9ApN: // global
           HpAlloc = 24;
           goto c9ApK;
       c9ApK: // global
           R1 = _s9zX1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ApM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zX1::P64;
           _s9zWL::P64 = P64[_s9zX1::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zX5_entry() //  [R1]
         { info_tbl: [(c9ApO,
                       label: sat_s9zX5_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ApO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9ApS; else goto c9ApT;
       c9ApS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ApT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9Apz_info;
           _s9zWL::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zWL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Aq0; else goto c9ApA;
       u9Aq0: // global
           call _c9Apz(R1) args: 0, res: 0, upd: 0;
       c9ApA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Apz() //  [R1]
         { info_tbl: [(c9Apz,
                       label: block_c9Apz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Apz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ApW; else goto c9ApV;
       c9ApW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9ApV: // global
           _s9zWZ::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zX1_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9ApP_info;
           R4 = Hp - 16;
           R3 = _s9zWZ::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9ApP() //  [R1, R2]
         { info_tbl: [(c9ApP,
                       label: block_c9ApP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ApP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ApZ; else goto c9ApY;
       c9ApZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9ApY: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zX6_entry() //  [R1]
         { info_tbl: [(c9Aq1,
                       label: sat_s9zX6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aq1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Aq5; else goto c9Aq4;
       c9Aq5: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aq4: // global
           _s9zWK::P64 = P64[R1 + 16];
           _s9zWL::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9zX5_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9zX7_entry() //  [R1]
         { info_tbl: [(c9Aq6,
                       label: sat_s9zX7_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aq6: // global
           _s9zX7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aq7; else goto c9Aq8;
       c9Aq8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Aqa; else goto c9Aq9;
       c9Aqa: // global
           HpAlloc = 32;
           goto c9Aq7;
       c9Aq7: // global
           R1 = _s9zX7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aq9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zX7::P64;
           _s9zWK::P64 = P64[_s9zX7::P64 + 16];
           _s9zWL::P64 = P64[_s9zX7::P64 + 24];
           I64[Hp - 24] = sat_s9zX6_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zX8_entry() //  [R1]
         { info_tbl: [(c9Aqb,
                       label: sat_s9zX8_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aqb: // global
           _s9zX8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aqc; else goto c9Aqd;
       c9Aqd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Aqf; else goto c9Aqe;
       c9Aqf: // global
           HpAlloc = 32;
           goto c9Aqc;
       c9Aqc: // global
           R1 = _s9zX8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aqe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zX8::P64;
           _s9zWJ::P64 = P64[_s9zX8::P64 + 16];
           _s9zWK::P64 = P64[_s9zX8::P64 + 24];
           _s9zWL::P64 = P64[_s9zX8::P64 + 32];
           I64[Hp - 24] = sat_s9zX7_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R4 = Hp - 24;
           R3 = _s9zWJ::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9zX9_entry() //  [R1]
         { info_tbl: [(c9Aqg,
                       label: sat_s9zX9_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aqg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Aqk; else goto c9Aqj;
       c9Aqk: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aqj: // global
           _s9zWJ::P64 = P64[R1 + 16];
           _s9zWK::P64 = P64[R1 + 24];
           _s9zWL::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9zX8_info;
           P64[Hp - 16] = _s9zWJ::P64;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9zXa_entry() //  [R1]
         { info_tbl: [(c9Aql,
                       label: sat_s9zXa_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aql: // global
           _s9zXa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aqm; else goto c9Aqn;
       c9Aqn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Aqp; else goto c9Aqo;
       c9Aqp: // global
           HpAlloc = 40;
           goto c9Aqm;
       c9Aqm: // global
           R1 = _s9zXa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aqo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zXa::P64;
           _s9zWJ::P64 = P64[_s9zXa::P64 + 16];
           _s9zWK::P64 = P64[_s9zXa::P64 + 24];
           _s9zWL::P64 = P64[_s9zXa::P64 + 32];
           I64[Hp - 32] = sat_s9zX9_info;
           P64[Hp - 16] = _s9zWJ::P64;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9Aqt,
                       label: GHC.Event.EPoll.$w$cshowsPrec1_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [True, False, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aqt: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c9Aqx; else goto c9Aqw;
       c9Aqx: // global
           HpAlloc = 64;
           R1 = GHC.Event.EPoll.$w$cshowsPrec1_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c9Aqw: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9Aqr; else goto c9Aqs;
       c9Aqr: // global
           I64[Hp - 56] = sat_s9zWX_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           _c9Ao7::P64 = Hp - 56;
           Hp = Hp - 24;
           R3 = _c9Ao7::P64;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Aqs: // global
           I64[Hp - 56] = sat_s9zXa_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.741274446 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Aso,
                       label: GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aso: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ass; else goto c9Ast;
       c9Ass: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Ast: // global
           I64[Sp - 24] = block_c9Asl_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9AsB; else goto c9Asm;
       u9AsB: // global
           call _c9Asl(R1) args: 0, res: 0, upd: 0;
       c9Asm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Asl() //  [R1]
         { info_tbl: [(c9Asl,
                       label: block_c9Asl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Asl: // global
           I64[Sp] = block_c9Asr_info;
           _s9zXf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zXf::I64;
           if (R1 & 7 != 0) goto u9AsA; else goto c9Asv;
       u9AsA: // global
           call _c9Asr(R1) args: 0, res: 0, upd: 0;
       c9Asv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Asr() //  [R1]
         { info_tbl: [(c9Asr,
                       label: block_c9Asr_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Asr: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.748831285 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent8_closure" {
     GHC.Event.EPoll.$fShowEvent8_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.750721354 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshow_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshow_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshow_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshow_entry() //  [R2]
         { info_tbl: [(c9AsZ,
                       label: GHC.Event.EPoll.$fShowEvent_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AsZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9At0; else goto c9At1;
       c9At0: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9At1: // global
           I64[Sp - 8] = block_c9AsW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9At5; else goto c9AsX;
       u9At5: // global
           call _c9AsW(R1) args: 0, res: 0, upd: 0;
       c9AsX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AsW() //  [R1]
         { info_tbl: [(c9AsW,
                       label: block_c9AsW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AsW: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.756333174 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent1_closure" {
     GHC.Event.EPoll.$fShowEvent1_closure:
         const GHC.Event.EPoll.$fShowEvent1_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent1_entry() //  [R2, R3]
         { info_tbl: [(c9Ato,
                       label: GHC.Event.EPoll.$fShowEvent1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ato: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Atp; else goto c9Atq;
       c9Atp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Atq: // global
           I64[Sp - 16] = block_c9Atl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Atu; else goto c9Atm;
       u9Atu: // global
           call _c9Atl(R1) args: 0, res: 0, upd: 0;
       c9Atm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Atl() //  [R1]
         { info_tbl: [(c9Atl,
                       label: block_c9Atl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Atl: // global
           R5 = P64[Sp + 8];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.761884881 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowList_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c9AtJ,
                       label: GHC.Event.EPoll.$fShowEvent_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AtJ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEvent1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.765350064 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_closure" {
     GHC.Event.EPoll.$fShowEvent_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEvent_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.767073072 UTC

[section ""data" . GHC.Event.EPoll.$fFiniteBitsEventType_closure" {
     GHC.Event.EPoll.$fFiniteBitsEventType_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const GHC.Event.EPoll.$fBitsEventType_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.768855122 UTC

[section ""data" . GHC.Event.EPoll.$fNumEventType_closure" {
     GHC.Event.EPoll.$fNumEventType_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Word.$fNumWord32_$c+_closure+2;
         const GHC.Word.$fNumWord32_$c-_closure+2;
         const GHC.Word.$fNumWord32_$c*_closure+2;
         const GHC.Word.$fNumWord32_$cnegate_closure+1;
         const GHC.Word.$fNumWord32_$cabs_closure+1;
         const GHC.Word.$fNumWord32_$csignum_closure+1;
         const GHC.Word.$fNumWord32_$cfromInteger_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.771294695 UTC

[section ""data" . GHC.Event.EPoll.$fEqEPollFd_closure" {
     GHC.Event.EPoll.$fEqEPollFd_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Int.eqInt32_closure+2;
         const GHC.Int.neInt32_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.773009917 UTC

[section ""cstring" . lvl_r9y01_bytes" {
     lvl_r9y01_bytes:
         I8[] [101,112,111,108,108,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.77543518 UTC

[section ""data" . lvl1_r9y02_closure" {
     lvl1_r9y02_closure:
         const lvl1_r9y02_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9y02_entry() //  [R1]
         { info_tbl: [(c9Au1,
                       label: lvl1_r9y02_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Au1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Au2; else goto c9Au3;
       c9Au2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Au3: // global
           (_c9AtY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9AtY::I64 == 0) goto c9Au0; else goto c9AtZ;
       c9Au0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9AtZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9AtY::I64;
           R2 = lvl_r9y01_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.779564217 UTC

[section ""data" . GHC.Event.EPoll.new6_closure" {
     GHC.Event.EPoll.new6_closure:
         const GHC.Event.EPoll.new6_info;
         const 0;
 },
 GHC.Event.EPoll.new6_entry() //  [R2]
         { info_tbl: [(c9Aui,
                       label: GHC.Event.EPoll.new6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aui: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_r9y02_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.78286258 UTC

[section ""cstring" . lvl2_r9y03_bytes" {
     lvl2_r9y03_bytes:
         I8[] [101,112,111,108,108,87,97,105,116,78,111,110,66,108,111,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.784647079 UTC

[section ""data" . lvl3_r9y04_closure" {
     lvl3_r9y04_closure:
         const lvl3_r9y04_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r9y04_entry() //  [R1]
         { info_tbl: [(c9Auw,
                       label: lvl3_r9y04_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Auw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aux; else goto c9Auy;
       c9Aux: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Auy: // global
           (_c9Aut::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Aut::I64 == 0) goto c9Auv; else goto c9Auu;
       c9Auv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Auu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Aut::I64;
           R2 = lvl2_r9y03_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.788442146 UTC

[section ""cstring" . lvl4_r9y05_bytes" {
     lvl4_r9y05_bytes:
         I8[] [101,112,111,108,108,87,97,105,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.790784122 UTC

[section ""data" . lvl5_r9y06_closure" {
     lvl5_r9y06_closure:
         const lvl5_r9y06_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r9y06_entry() //  [R1]
         { info_tbl: [(c9AuO,
                       label: lvl5_r9y06_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AuO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9AuP; else goto c9AuQ;
       c9AuP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AuQ: // global
           (_c9AuL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9AuL::I64 == 0) goto c9AuN; else goto c9AuM;
       c9AuN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9AuM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9AuL::I64;
           R2 = lvl4_r9y05_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.794467299 UTC

[section ""cstring" . GHC.Event.EPoll.new8_bytes" {
     GHC.Event.EPoll.new8_bytes:
         I8[] [109,111,100,105,102,121,70,100,79,110,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.79635987 UTC

[section ""data" . GHC.Event.EPoll.new7_closure" {
     GHC.Event.EPoll.new7_closure:
         const GHC.Event.EPoll.new7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new7_entry() //  [R1]
         { info_tbl: [(c9Av6,
                       label: GHC.Event.EPoll.new7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Av6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Av7; else goto c9Av8;
       c9Av7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Av8: // global
           (_c9Av3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Av3::I64 == 0) goto c9Av5; else goto c9Av4;
       c9Av5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Av4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Av3::I64;
           R2 = GHC.Event.EPoll.new8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.80027654 UTC

[section ""data" . lvl6_r9y07_closure" {
     lvl6_r9y07_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.802421117 UTC

[section ""data" . lvl7_r9y08_closure" {
     lvl7_r9y08_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.803989914 UTC

[section ""data" . lvl8_r9y09_closure" {
     lvl8_r9y09_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.810971894 UTC

[section ""data" . GHC.Event.EPoll.new10_closure" {
     GHC.Event.EPoll.new10_closure:
         const GHC.Event.EPoll.new10_info;
         const 0;
 },
 sat_s9zZC_entry() //  [R1]
         { info_tbl: [(c9Awt,
                       label: sat_s9zZC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Awt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Awu; else goto c9Ax9;
       c9Awu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ax9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s9zZt::I64 = I64[R1 + 16];
           if (_s9zZt::I64 & 25 == 0) goto c9Aws; else goto c9Awr;
       c9Aws: // global
           if (_s9zZt::I64 & 28 == 0) goto c9Ax5; else goto c9AwZ;
       c9Ax5: // global
           R1 = GHC.Event.EPoll.$fShowEvent8_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9AwZ: // global
           R1 = lvl8_r9y09_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9Awr: // global
           if (_s9zZt::I64 & 28 == 0) goto c9AwL; else goto c9AwF;
       c9AwL: // global
           R1 = lvl7_r9y08_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9AwF: // global
           R1 = lvl6_r9y07_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.EPoll.new10_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Axa,
                       label: GHC.Event.EPoll.new10_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Axa: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Axb; else goto c9Axc;
       c9Axb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new10_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Axc: // global
           I64[Sp - 24] = block_c9Avo_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9ADe; else goto c9Avp;
       u9ADe: // global
           call _c9Avo(R1) args: 0, res: 0, upd: 0;
       c9Avp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Avo() //  [R1]
         { info_tbl: [(c9Avo,
                       label: block_c9Avo_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Avo: // global
           I64[Sp - 16] = block_c9Avt_info;
           _s9zXD::P64 = P64[R1 + 7];
           _s9zXC::I64 = I64[R1 + 15];
           R1 = P64[_s9zXD::P64 + 8];
           P64[Sp - 8] = _s9zXD::P64;
           I64[Sp] = _s9zXC::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9AD5; else goto c9Avu;
       u9AD5: // global
           call _c9Avt(R1) args: 0, res: 0, upd: 0;
       c9Avu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Avt() //  [R1]
         { info_tbl: [(c9Avt,
                       label: block_c9Avt_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Avt: // global
           I64[Sp - 8] = block_c9Avy_info;
           _s9zXK::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9zXK::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9AD6; else goto c9Avz;
       u9AD6: // global
           call _c9Avy(R1) args: 0, res: 0, upd: 0;
       c9Avz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Avy() //  [R1]
         { info_tbl: [(c9Avy,
                       label: block_c9Avy_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Avy: // global
           I64[Sp - 16] = block_c9Axf_info;
           _s9zXL::P64 = R1;
           _s9zXN::P64 = P64[R1 + 7];
           _s9zXM::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _s9zXN::P64;
           I64[Sp] = _s9zXM::I64;
           P64[Sp + 32] = _s9zXL::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9AD7; else goto c9AAq;
       u9AD7: // global
           call _c9Axf(R1) args: 0, res: 0, upd: 0;
       c9AAq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Axf() //  [R1]
         { info_tbl: [(c9Axf,
                       label: block_c9Axf_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Axf: // global
           if (R1 & 7 == 1) goto c9ABi; else goto c9ACl;
       c9ABi: // global
           (_s9zZM::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(I64[Sp + 40], I64[Sp + 16], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 24])), 0);
           _s9zZN::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9zZM::I64));
           if (_s9zZN::I64 != (-1)) goto c9AAI; else goto c9AAO;
       c9AAI: // global
           I64[Sp + 40] = _s9zZN::I64;
           Sp = Sp + 8;
           call _c9AvG() args: 0, res: 0, upd: 0;
       c9AAO: // global
           (_s9zZR::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9zZR::I64) == 4 :: W32) goto u9ACO; else goto c9AB3;
       u9ACO: // global
           Sp = Sp + 8;
           call _c9ACh() args: 0, res: 0, upd: 0;
       c9AB3: // global
           I64[Sp] = block_c9AAZ_info;
           R2 = lvl3_r9y04_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       c9ACl: // global
           I64[Sp] = block_c9ABn_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u9ADf; else goto c9ACm;
       u9ADf: // global
           call _c9ABn(R1) args: 0, res: 0, upd: 0;
       c9ACm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AAZ() //  [R1]
         { info_tbl: [(c9AAZ,
                       label: block_c9AAZ_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AAZ: // global
           I64[Sp] = block_c9AB1_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9ADl; else goto c9AB6;
       u9ADl: // global
           call _c9AB1(R1) args: 0, res: 0, upd: 0;
       c9AB6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AB1() //  [R1]
         { info_tbl: [(c9AB1,
                       label: block_c9AB1_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AB1: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9AvG() args: 0, res: 0, upd: 0;
     }
 },
 _c9ABn() //  [R1]
         { info_tbl: [(c9ABn,
                       label: block_c9ABn_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ABn: // global
           _s9zXC::I64 = I64[Sp + 40];
           _s9zXK::I64 = I64[Sp + 24];
           _s9zXM::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c9ACs; else goto c9ACw;
       c9ACs: // global
           _s9A00::I64 = (I64[R1 + 7] + 999999) / 1000000;
           goto s9zZZ;
       c9ACw: // global
           _s9A00::I64 = (-1);
           goto s9zZZ;
       s9zZZ: // global
           I64[Sp] = block_c9ABE_info;
           _u9ACX::P64 = CurrentTSO;
           I64[I64[_u9ACX::P64 + 24] + 16] = Sp;
           _u9ACY::I64 = CurrentNursery;
           P64[_u9ACY::I64 + 8] = Hp + 8;
           I64[_u9ACX::P64 + 104] = I64[_u9ACX::P64 + 104] - ((Hp + 8) - I64[_u9ACY::I64]);
           (_u9ACV::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_s9A06::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(_s9zXC::I64, _s9zXM::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9zXK::I64)), %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9A00::I64)));
           (_u9ACW::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_u9ACV::I64);
           BaseReg = _u9ACW::I64;
           _u9ACZ::P64 = CurrentTSO;
           _u9AD0::P64 = I64[_u9ACZ::P64 + 24];
           Sp = I64[_u9AD0::P64 + 16];
           SpLim = _u9AD0::P64 + 192;
           HpAlloc = 0;
           _u9AD1::I64 = CurrentNursery;
           _u9AD2::I64 = I64[_u9AD1::I64 + 8];
           Hp = _u9AD2::I64 - 8;
           _u9AD3::I64 = I64[_u9AD1::I64];
           HpLim = _u9AD3::I64 + ((%MO_SS_Conv_W32_W64(I32[_u9AD1::I64 + 48]) << 12) - 1);
           I64[_u9ACZ::P64 + 104] = I64[_u9ACZ::P64 + 104] + (_u9AD2::I64 - _u9AD3::I64);
           R1 = _s9A06::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ABE() //  [R1]
         { info_tbl: [(c9ABE,
                       label: block_c9ABE_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ABE: // global
           _s9A07::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R1));
           if (_s9A07::I64 != (-1)) goto c9ABM; else goto c9ABS;
       c9ABM: // global
           I64[Sp + 40] = _s9A07::I64;
           Sp = Sp + 8;
           call _c9AvG() args: 0, res: 0, upd: 0;
       c9ABS: // global
           (_s9A0b::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9A0b::I64) == 4 :: W32) goto u9ACL; else goto c9AC7;
       u9ACL: // global
           Sp = Sp + 8;
           call _c9ACh() args: 0, res: 0, upd: 0;
       c9AC7: // global
           I64[Sp] = block_c9AC3_info;
           R2 = lvl5_r9y06_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9ACh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ACh: // global
           I64[Sp + 32] = 0;
           call _c9AvG() args: 0, res: 0, upd: 0;
     }
 },
 _c9AC3() //  [R1]
         { info_tbl: [(c9AC3,
                       label: block_c9AC3_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AC3: // global
           I64[Sp] = block_c9AC5_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9ADp; else goto c9ACa;
       u9ADp: // global
           call _c9AC5(R1) args: 0, res: 0, upd: 0;
       c9ACa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AC5() //  [R1]
         { info_tbl: [(c9AC5,
                       label: block_c9AC5_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AC5: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9AvG() args: 0, res: 0, upd: 0;
     }
 },
 _c9AvG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AvG: // global
           Hp = Hp + 48;
           _s9zXQ::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c9Axj; else goto c9Axi;
       c9Axj: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_c9AvF_info;
           R1 = _s9zXQ::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Axi: // global
           _s9zXD::P64 = P64[Sp + 24];
           _s9zXK::I64 = I64[Sp + 16];
           _s9zXL::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = _s9zXL::P64;
           I64[Hp - 24] = _s9zXQ::I64;
           I64[Hp - 16] = _s9zXK::I64;
           call MO_WriteBarrier();
           P64[_s9zXD::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9zXD::P64);
           if (%MO_S_Le_W64(_s9zXQ::I64, 0)) goto c9Axm; else goto c9Axn;
       c9Axm: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9zXQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Axn: // global
           _s9zXY::P64 = P64[_s9zXD::P64 + 8];
           Hp = Hp - 16;
           I64[Sp + 16] = block_c9AvR_info;
           R1 = _s9zXY::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9AD9; else goto c9AvS;
       u9AD9: // global
           call _c9AvR(R1) args: 0, res: 0, upd: 0;
       c9AvS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AvF() //  [R1]
         { info_tbl: [(c9AvF,
                       label: block_c9AvF_info
                       rep:StackRep [False, True, True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AvF: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c9AvG() args: 0, res: 0, upd: 0;
     }
 },
 _c9AvR() //  [R1]
         { info_tbl: [(c9AvR,
                       label: block_c9AvR_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AvR: // global
           I64[Sp] = block_c9AvW_info;
           _s9zY1::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp + 24] = _s9zY1::I64;
           if (R1 & 7 != 0) goto u9ADa; else goto c9AvX;
       u9ADa: // global
           call _c9AvW(R1) args: 0, res: 0, upd: 0;
       c9AvX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AvW() //  [R1]
         { info_tbl: [(c9AvW,
                       label: block_c9AvW_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AvW: // global
           I64[Sp - 16] = I64[Sp + 24] * 12;
           I64[Sp - 8] = 0;
           P64[Sp] = P64[R1 + 7];
           I64[Sp + 24] = I64[R1 + 15];
           Sp = Sp - 16;
           call _c9Aw9() args: 0, res: 0, upd: 0;
     }
 },
 _c9Aw9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aw9: // global
           Hp = Hp + 40;
           _s9zZn::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c9AAi; else goto c9AAh;
       c9AAi: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c9Aw8_info;
           R1 = _s9zZn::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9AAh: // global
           if (%MO_S_Lt_W64(_s9zZn::I64,
                            I64[Sp])) goto c9AAm; else goto c9AAp;
       c9AAm: // global
           _s9zZq::I64 = I64[Sp + 40] + _s9zZn::I64;
           _s9zZt::I64 = %MO_UU_Conv_W32_W64(I32[_s9zZq::I64]);
           _s9zZx::I64 = %MO_SS_Conv_W32_W64(I32[_s9zZq::I64 + 4]);
           I64[Hp - 32] = sat_s9zZC_info;
           I64[Hp - 16] = _s9zZt::I64;
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9zZx::I64;
           I64[Sp - 8] = block_c9AAk_info;
           R3 = Hp - 32;
           R2 = Hp - 7;
           R1 = P64[Sp + 48];
           Sp = Sp - 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       c9AAp: // global
           Hp = Hp - 40;
           _s9zXD::P64 = P64[Sp + 24];
           call MO_Touch(P64[Sp + 16]);
           I64[Sp + 16] = block_c9Axu_info;
           R1 = P64[_s9zXD::P64 + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9ADd; else goto c9Axw;
       u9ADd: // global
           call _c9Axu(R1) args: 0, res: 0, upd: 0;
       c9Axw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Aw8() //  [R1]
         { info_tbl: [(c9Aw8,
                       label: block_c9Aw8_info
                       rep:StackRep [True, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Aw8: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c9Aw9() args: 0, res: 0, upd: 0;
     }
 },
 _c9AAk() //  []
         { info_tbl: [(c9AAk,
                       label: block_c9AAk_info
                       rep:StackRep [True, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AAk: // global
           I64[Sp + 16] = I64[Sp + 16] + 12;
           Sp = Sp + 8;
           call _c9Aw9() args: 0, res: 0, upd: 0;
     }
 },
 _c9Axu() //  [R1]
         { info_tbl: [(c9Axu,
                       label: block_c9Axu_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Axu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9AxC; else goto c9AxB;
       c9AxC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9AxB: // global
           _s9zXQ::I64 = I64[Sp + 16];
           _s9zYg::I64 = I64[R1 + 23];
           if (_s9zYg::I64 == _s9zXQ::I64) goto c9AxQ; else goto c9AxI;
       c9AxQ: // global
           Hp = Hp - 16;
           _s9zYl::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_c9AxK_info;
           R1 = _s9zYl::P64;
           I64[Sp + 32] = _s9zYg::I64;
           if (R1 & 7 != 0) goto u9ADi; else goto c9AxL;
       u9ADi: // global
           call _c9AxK(R1) args: 0, res: 0, upd: 0;
       c9AxL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9AxI: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9zXQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9AxK() //  [R1]
         { info_tbl: [(c9AxK,
                       label: block_c9AxK_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AxK: // global
           I64[Sp - 8] = block_c9AxP_info;
           _s9zYo::I64 = I64[R1 + 15];
           _s9zYp::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9zYp::I64;
           I64[Sp + 24] = _s9zYo::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9ADj; else goto c9AxS;
       u9ADj: // global
           call _c9AxP(R1) args: 0, res: 0, upd: 0;
       c9AxS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AxP() //  [R1]
         { info_tbl: [(c9AxP,
                       label: block_c9AxP_info
                       rep:StackRep [True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AxP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9AxY; else goto c9AxX;
       c9AxY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9AxX: // global
           _s9zYt::I64 = I64[Sp + 40] << 1;
           if (%MO_S_Le_W64(_s9zYt::I64,
                            I64[Sp + 8])) goto c9Ay7; else goto c9AAf;
       c9Ay7: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AAf: // global
           _s9zYw::I64 = _s9zYt::I64 - 1;
           _s9zYx::I64 = _s9zYw::I64 | %MO_S_Shr_W64(_s9zYw::I64, 1);
           _s9zYz::I64 = _s9zYx::I64 | %MO_S_Shr_W64(_s9zYx::I64, 2);
           _s9zYB::I64 = _s9zYz::I64 | %MO_S_Shr_W64(_s9zYz::I64, 4);
           _s9zYD::I64 = _s9zYB::I64 | %MO_S_Shr_W64(_s9zYB::I64, 8);
           _s9zYF::I64 = _s9zYD::I64 | %MO_S_Shr_W64(_s9zYD::I64, 16);
           _s9zYH::I64 = _s9zYF::I64 | %MO_S_Shr_W64(_s9zYF::I64, 32) + 1;
           _s9zYK::I64 = _s9zYH::I64 * 12;
           if (%MO_S_Ge_W64(_s9zYK::I64, 0)) goto c9AyX; else goto c9AAe;
       c9AyX: // global
           _s9zYs::P64 = P64[R1 + 7];
           _s9zYr::I64 = I64[R1 + 15];
           Hp = Hp - 16;
           I64[Sp - 16] = block_c9AyV_info;
           R1 = _s9zYK::I64;
           I64[Sp - 8] = _s9zYH::I64;
           P64[Sp] = _s9zYs::P64;
           I64[Sp + 40] = _s9zYr::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c9AAe: // global
           Hp = Hp - 16;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9AyV() //  [R1]
         { info_tbl: [(c9AyV,
                       label: block_c9AyV_info
                       rep:StackRep [True, False, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AyV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c9Az1; else goto c9Az0;
       c9Az1: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Az0: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 72] = R1;
           _s9zXD::P64 = P64[Sp + 32];
           _s9zXQ::I64 = I64[Sp + 40];
           _s9zYo::I64 = I64[Sp + 48];
           _s9zYp::I64 = I64[Sp + 24];
           _s9zYr::I64 = I64[Sp + 56];
           _s9zYs::P64 = P64[Sp + 16];
           _s9zYH::I64 = I64[Sp + 8];
           _s9zYP::I64 = R1 + 16;
           _c9Az5::P64 = Hp - 77;
           if (_s9zYr::I64 == 0) goto c9AAd; else goto c9AzW;
       c9AAd: // global
           call MO_Touch(_s9zYs::P64);
           if (_s9zYH::I64 == _s9zYp::I64) goto c9AA4; else goto c9AAc;
       c9AA4: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9zXQ::I64;
           _c9AA2::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9AA2::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AAc: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9Az5::P64;
           I64[Hp - 48] = _s9zYP::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9zYo::I64;
           I64[Hp - 16] = _s9zYH::I64;
           call MO_WriteBarrier();
           P64[_s9zXD::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9zXD::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9zXQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AzW: // global
           if (%MO_S_Le_W64(_s9zYp::I64, 0)) goto c9Azs; else goto c9AzU;
       c9Azs: // global
           call MO_Touch(_s9zYs::P64);
           if (_s9zYH::I64 == _s9zYp::I64) goto c9Azi; else goto c9Azq;
       c9Azi: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9zXQ::I64;
           _c9Azg::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9Azg::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Azq: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9Az5::P64;
           I64[Hp - 48] = _s9zYP::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9zYo::I64;
           I64[Hp - 16] = _s9zYH::I64;
           call MO_WriteBarrier();
           P64[_s9zXD::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9zXD::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9zXQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AzU: // global
           (_s9zZ5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s9zYP::I64, _s9zYr::I64, _s9zYp::I64 * 12);
           call MO_Touch(_c9Az5::P64);
           call MO_Touch(_s9zYs::P64);
           if (_s9zYH::I64 == _s9zYp::I64) goto c9AzL; else goto c9AzT;
       c9AzL: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9zXQ::I64;
           _c9AzJ::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9AzJ::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AzT: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9Az5::P64;
           I64[Hp - 48] = _s9zYP::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9zYo::I64;
           I64[Hp - 16] = _s9zYH::I64;
           call MO_WriteBarrier();
           P64[_s9zXD::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9zXD::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9zXQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.866405129 UTC

[section ""data" . GHC.Event.EPoll.new9_closure" {
     GHC.Event.EPoll.new9_closure:
         const GHC.Event.EPoll.new9_info;
         const 0;
 },
 GHC.Event.EPoll.new9_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9AGO,
                       label: GHC.Event.EPoll.new9_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AGO: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9AGP; else goto c9AGQ;
       c9AGP: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new9_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9AGQ: // global
           I64[Sp - 40] = block_c9AGJ_info;
           _s9A0o::P64 = R2;
           R2 = 4;
           R1 = 12;
           P64[Sp - 32] = _s9A0o::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AGJ() //  [R1]
         { info_tbl: [(c9AGJ,
                       label: block_c9AGJ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AGJ: // global
           I64[Sp] = block_c9AGL_info;
           _s9A0y::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _s9A0y::P64;
           if (R1 & 7 != 0) goto u9AIJ; else goto c9AGM;
       u9AIJ: // global
           call _c9AGL(R1) args: 0, res: 0, upd: 0;
       c9AGM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AGL() //  [R1]
         { info_tbl: [(c9AGL,
                       label: block_c9AGL_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AGL: // global
           _s9A0p::P64 = P64[Sp + 16];
           _s9A0y::P64 = P64[Sp + 32];
           _s9A0A::I64 = I64[R1 + 7];
           if (_s9A0A::I64 & 1 == 0) goto c9AIo; else goto c9AI3;
       c9AIo: // global
           if (_s9A0A::I64 & 2 == 0) goto c9AID; else goto c9AIx;
       c9AID: // global
           _s9A0C::I64 = 0;
           goto s9A0B;
       c9AIx: // global
           _s9A0C::I64 = 4;
           goto s9A0B;
       c9AI3: // global
           if (_s9A0A::I64 & 2 == 0) goto c9AIi; else goto c9AIc;
       c9AIi: // global
           _s9A0C::I64 = 1;
           goto s9A0B;
       c9AIc: // global
           _s9A0C::I64 = 5;
           goto s9A0B;
       s9A0B: // global
           _s9A0D::I64 = _s9A0y::P64 + 16;
           I32[_s9A0D::I64] = %MO_UU_Conv_W64_W32(_s9A0C::I64);
           I64[Sp - 8] = block_c9AH3_info;
           R1 = _s9A0p::P64;
           I64[Sp] = _s9A0D::I64;
           I64[Sp + 16] = _s9A0A::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9AIK; else goto c9AH4;
       u9AIK: // global
           call _c9AH3(R1) args: 0, res: 0, upd: 0;
       c9AH4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AH3() //  [R1]
         { info_tbl: [(c9AH3,
                       label: block_c9AH3_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AH3: // global
           _s9A0o::P64 = P64[Sp + 16];
           _s9A0G::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9A0G::I64);
           I64[Sp] = block_c9AHb_info;
           R1 = _s9A0o::P64;
           I64[Sp + 16] = _s9A0G::I64;
           if (R1 & 7 != 0) goto u9AIL; else goto c9AHc;
       u9AIL: // global
           call _c9AHb(R1) args: 0, res: 0, upd: 0;
       c9AHc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AHb() //  [R1]
         { info_tbl: [(c9AHb,
                       label: block_c9AHb_info
                       rep:StackRep [True, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AHb: // global
           I64[Sp] = block_c9AHg_info;
           _s9A0K::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s9A0K::I64;
           if (R1 & 7 != 0) goto u9AIM; else goto c9AHk;
       u9AIM: // global
           call _c9AHg(R1) args: 0, res: 0, upd: 0;
       c9AHk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AHg() //  [R1]
         { info_tbl: [(c9AHg,
                       label: block_c9AHg_info
                       rep:StackRep [True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AHg: // global
           _s9A0y::P64 = P64[Sp + 40];
           _s9A0D::I64 = I64[Sp + 8];
           _s9A0G::I64 = I64[Sp + 16];
           _s9A0K::I64 = I64[Sp + 32];
           if (I64[R1 + 7] == 0) goto c9AHX; else goto c9AHW;
       c9AHX: // global
           _s9A0P::I64 = 1;
           goto s9A0O;
       c9AHW: // global
           if (I64[Sp + 24] == 0) goto c9AHU; else goto c9AHT;
       c9AHU: // global
           _s9A0P::I64 = 2;
           goto s9A0O;
       c9AHT: // global
           _s9A0P::I64 = 3;
           goto s9A0O;
       s9A0O: // global
           (_s9A0T::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9A0K::I64, _s9A0P::I64, _s9A0G::I64, _s9A0D::I64);
           if (%MO_SS_Conv_W64_W32(_s9A0T::I64) == (-1) :: W32) goto c9AHL; else goto c9AHF;
       c9AHL: // global
           (_s9A0Z::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9A0Z::I64;
           Sp = Sp + 48;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9AHF: // global
           call MO_Touch(_s9A0y::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.882437555 UTC

[section ""data" . GHC.Event.EPoll.new5_closure" {
     GHC.Event.EPoll.new5_closure:
         const GHC.Event.EPoll.new5_info;
         const 0;
 },
 GHC.Event.EPoll.new5_entry() //  [R2, R3, R4]
         { info_tbl: [(c9AJt,
                       label: GHC.Event.EPoll.new5_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AJt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9AJu; else goto c9AJv;
       c9AJu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9AJv: // global
           I64[Sp - 24] = block_c9AJq_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9ALS; else goto c9AJr;
       u9ALS: // global
           call _c9AJq(R1) args: 0, res: 0, upd: 0;
       c9AJr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AJq() //  [R1]
         { info_tbl: [(c9AJq,
                       label: block_c9AJq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AJq: // global
           _s9A1b::I64 = I64[R1 + 7];
           if (_s9A1b::I64 & 1 == 0) goto c9ALx; else goto c9ALc;
       c9ALx: // global
           if (_s9A1b::I64 & 2 == 0) goto c9ALM; else goto c9ALG;
       c9ALM: // global
           _s9A1d::I64 = 0;
           goto s9A1c;
       c9ALG: // global
           _s9A1d::I64 = 4;
           goto s9A1c;
       c9ALc: // global
           if (_s9A1b::I64 & 2 == 0) goto c9ALr; else goto c9ALl;
       c9ALr: // global
           _s9A1d::I64 = 1;
           goto s9A1c;
       c9ALl: // global
           _s9A1d::I64 = 5;
           goto s9A1c;
       s9A1c: // global
           I64[Sp - 8] = block_c9AJE_info;
           R2 = 4;
           R1 = 12;
           I64[Sp] = _s9A1d::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AJE() //  [R1]
         { info_tbl: [(c9AJE,
                       label: block_c9AJE_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AJE: // global
           _s9A17::P64 = P64[Sp + 24];
           _s9A1k::I64 = I64[Sp + 8] | 1073741824;
           _s9A1l::I64 = R1 + 16;
           I32[_s9A1l::I64] = %MO_UU_Conv_W64_W32(_s9A1k::I64);
           I64[Sp - 8] = block_c9AJM_info;
           _s9A1j::P64 = R1;
           R1 = _s9A17::P64;
           I64[Sp] = _s9A1l::I64;
           I64[Sp + 8] = _s9A1k::I64;
           P64[Sp + 24] = _s9A1j::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9ALT; else goto c9AJN;
       u9ALT: // global
           call _c9AJM(R1) args: 0, res: 0, upd: 0;
       c9AJN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AJM() //  [R1]
         { info_tbl: [(c9AJM,
                       label: block_c9AJM_info
                       rep:StackRep [True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AJM: // global
           _s9A16::P64 = P64[Sp + 24];
           _s9A1o::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9A1o::I64);
           I64[Sp] = block_c9AJU_info;
           R1 = _s9A16::P64;
           I64[Sp + 24] = _s9A1o::I64;
           if (R1 & 7 != 0) goto u9ALU; else goto c9AJY;
       u9ALU: // global
           call _c9AJU(R1) args: 0, res: 0, upd: 0;
       c9AJY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AJU() //  [R1]
         { info_tbl: [(c9AJU,
                       label: block_c9AJU_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AJU: // global
           _s9A1j::P64 = P64[Sp + 32];
           _s9A1s::I64 = I64[R1 + 15];
           (_s9A1x::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9A1s::I64, 3, I64[Sp + 24], I64[Sp + 8]);
           call MO_Touch(_s9A1j::P64);
           if (%MO_SS_Conv_W64_W32(_s9A1x::I64) == 0 :: W32) goto c9AL3; else goto c9AKe;
       c9AL3: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AKe: // global
           (_s9A1D::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9A1D::I64) == 2 :: W32) goto c9AKx; else goto c9AKo;
       c9AKx: // global
           I64[Sp + 8] = block_c9AKw_info;
           R2 = 4;
           R1 = 12;
           I64[Sp + 32] = _s9A1s::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c9AKo: // global
           R2 = GHC.Event.EPoll.new7_closure;
           Sp = Sp + 40;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9AKw() //  [R1]
         { info_tbl: [(c9AKw,
                       label: block_c9AKw_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AKw: // global
           _s9A1o::I64 = I64[Sp + 16];
           _s9A1s::I64 = I64[Sp + 24];
           _s9A1L::I64 = R1 + 16;
           I32[_s9A1L::I64] = %MO_UU_Conv_W64_W32(I64[Sp + 8]);
           I32[_s9A1L::I64 + 4] = %MO_UU_Conv_W64_W32(_s9A1o::I64);
           (_s9A1S::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9A1s::I64, 1, _s9A1o::I64, _s9A1L::I64);
           if (%MO_SS_Conv_W64_W32(_s9A1S::I64) == (-1) :: W32) goto c9AKX; else goto c9AKR;
       c9AKX: // global
           (_s9A1Y::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9A1Y::I64;
           Sp = Sp + 32;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9AKR: // global
           call MO_Touch(R1);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.898451515 UTC

[section ""data" . GHC.Event.EPoll.new4_closure" {
     GHC.Event.EPoll.new4_closure:
         const GHC.Event.EPoll.new4_info;
 },
 GHC.Event.EPoll.new4_entry() //  [R2]
         { info_tbl: [(c9AMD,
                       label: GHC.Event.EPoll.new4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AMD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9AME; else goto c9AMF;
       c9AME: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.new4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9AMF: // global
           I64[Sp - 8] = block_c9AMA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9AML; else goto c9AMB;
       u9AML: // global
           call _c9AMA(R1) args: 0, res: 0, upd: 0;
       c9AMB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AMA() //  [R1]
         { info_tbl: [(c9AMA,
                       label: block_c9AMA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AMA: // global
           (_s9A2b::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(I64[R1 + 15]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.904561423 UTC

[section ""data" . GHC.Event.EPoll.$w$j_closure" {
     GHC.Event.EPoll.$w$j_closure:
         const GHC.Event.EPoll.$w$j_info;
         const 0;
 },
 GHC.Event.EPoll.$w$j_entry() //  [R2]
         { info_tbl: [(c9AN6,
                       label: GHC.Event.EPoll.$w$j_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AN6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9AN7; else goto c9AN8;
       c9AN7: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$j_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9AN8: // global
           (_s9A2h::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfd();
           (_s9A2l::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_fd_cloexec();
           (_s9A2q::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(R2, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9A2h::I64)), _s9A2l::I64);
           if (%MO_SS_Conv_W64_W32(_s9A2q::I64) == (-1) :: W32) goto c9ANH; else goto c9ANx;
       c9ANH: // global
           (_s9A2H::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9A2H::I64;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       c9ANx: // global
           I64[Sp - 16] = block_c9ANk_info;
           R1 = 768;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ANk() //  [R1]
         { info_tbl: [(c9ANk,
                       label: block_c9ANk_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ANk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9ANB; else goto c9ANA;
       c9ANB: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9ANA: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 61;
           P64[Hp - 32] = R1 + 16;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 64;
           I64[Sp] = block_c9ANs_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9ANs() //  [R1]
         { info_tbl: [(c9ANs,
                       label: block_c9ANs_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ANs: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9ANE; else goto c9AND;
       c9ANE: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9AND: // global
           I64[Hp - 64] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.Event.Internal.Backend_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = GHC.Event.EPoll.new10_closure+4;
           P64[Hp - 16] = GHC.Event.EPoll.new9_closure+5;
           P64[Hp - 8] = GHC.Event.EPoll.new5_closure+4;
           P64[Hp] = GHC.Event.EPoll.new4_closure+2;
           R1 = Hp - 39;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.913071459 UTC

[section ""cstring" . GHC.Event.EPoll.new3_bytes" {
     GHC.Event.EPoll.new3_bytes:
         I8[] [101,112,111,108,108,67,114,101,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.915274071 UTC

[section ""data" . GHC.Event.EPoll.new2_closure" {
     GHC.Event.EPoll.new2_closure:
         const GHC.Event.EPoll.new2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new2_entry() //  [R1]
         { info_tbl: [(c9AOn,
                       label: GHC.Event.EPoll.new2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AOn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9AOo; else goto c9AOp;
       c9AOo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AOp: // global
           (_c9AOk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9AOk::I64 == 0) goto c9AOm; else goto c9AOl;
       c9AOm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9AOl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9AOk::I64;
           R2 = GHC.Event.EPoll.new3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.919599887 UTC

[section ""data" . GHC.Event.EPoll.new1_closure" {
     GHC.Event.EPoll.new1_closure:
         const GHC.Event.EPoll.new1_info;
         const 0;
 },
 GHC.Event.EPoll.new1_entry() //  []
         { info_tbl: [(c9AOJ,
                       label: GHC.Event.EPoll.new1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AOJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9AOK; else goto c9AOL;
       c9AOK: // global
           R1 = GHC.Event.EPoll.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9AOL: // global
           (_s9A2N::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] epoll_create(256);
           _s9A2O::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9A2N::I64));
           if (_s9A2O::I64 != (-1)) goto c9AOH; else goto c9AOI;
       c9AOH: // global
           R2 = _s9A2O::I64;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
       c9AOI: // global
           I64[Sp - 8] = block_c9AOV_info;
           R2 = GHC.Event.EPoll.new2_closure;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9AOV() //  [R1]
         { info_tbl: [(c9AOV,
                       label: block_c9AOV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AOV: // global
           I64[Sp] = block_c9AOX_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9AP5; else goto c9AP0;
       u9AP5: // global
           call _c9AOX(R1) args: 0, res: 0, upd: 0;
       c9AP0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AOX() //  [R1]
         { info_tbl: [(c9AOX,
                       label: block_c9AOX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AOX: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.927227722 UTC

[section ""data" . GHC.Event.EPoll.new_closure" {
     GHC.Event.EPoll.new_closure:
         const GHC.Event.EPoll.new_info;
         const 0;
 },
 GHC.Event.EPoll.new_entry() //  []
         { info_tbl: [(c9APo,
                       label: GHC.Event.EPoll.new_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9APo: // global
           call GHC.Event.EPoll.new1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.930864718 UTC

[section ""data" . GHC.Event.EPoll.Event_closure" {
     GHC.Event.EPoll.Event_closure:
         const GHC.Event.EPoll.Event_info;
 },
 GHC.Event.EPoll.Event_entry() //  [R2, R3]
         { info_tbl: [(c9APA,
                       label: GHC.Event.EPoll.Event_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9APA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9APE; else goto c9APD;
       c9APE: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.Event_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9APD: // global
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.934661805 UTC

[section ""data" . GHC.Event.EPoll.EPoll_closure" {
     GHC.Event.EPoll.EPoll_closure:
         const GHC.Event.EPoll.EPoll_info;
 },
 GHC.Event.EPoll.EPoll_entry() //  [R2, R3]
         { info_tbl: [(c9APQ,
                       label: GHC.Event.EPoll.EPoll_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9APQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9APU; else goto c9APT;
       c9APU: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.EPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9APT: // global
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.938296527 UTC

[GHC.Event.EPoll.Event_con_entry() //  [R1]
         { info_tbl: [(c9AQ1,
                       label: GHC.Event.EPoll.Event_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,118,101,110,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AQ1: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.941800309 UTC

[GHC.Event.EPoll.EPoll_con_entry() //  [R1]
         { info_tbl: [(c9AQ8,
                       label: GHC.Event.EPoll.EPoll_con_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,80,111,108,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9AQ8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:42.944903548 UTC

[section ""relreadonly" . S9AhW_srt" {
     S9AhW_srt:
         const GHC.Event.EPoll.$fShowEPollFd5_closure;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Event.EPoll.$fShowEvent6_closure;
         const GHC.Event.EPoll.$w$cshowsPrec1_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure;
         const GHC.Event.EPoll.$fShowEvent1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_r9y02_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.EPoll.new10_closure;
         const lvl3_r9y04_closure;
         const lvl5_r9y06_closure;
         const GHC.Event.EPoll.new6_closure;
         const GHC.Event.EPoll.new9_closure;
         const GHC.Event.EPoll.new5_closure;
         const GHC.Event.EPoll.new7_closure;
         const System.Posix.Internals.setCloseOnExec2_closure;
         const GHC.Event.EPoll.$w$j_closure;
         const GHC.Event.EPoll.new1_closure;
         const GHC.Event.EPoll.new2_closure;
 }]

