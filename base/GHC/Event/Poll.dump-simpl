
==================== Tidy Core ====================
2018-03-16 16:05:18.883003776 UTC

Result size of Tidy Core
  = {terms: 1,575, types: 1,633, coercions: 779, joins: 5/16}

-- RHS size: {terms: 16, types: 9, coercions: 9, joins: 0/0}
GHC.Event.Poll.$WPollFd [InlPrag=INLINE[2]]
  :: Fd -> Event -> Event -> PollFd
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (dt_aahFe [Occ=Once] :: Fd)
                 (dt_aahFf [Occ=Once] :: Event)
                 (dt_aahFg [Occ=Once] :: Event) ->
                 case dt_aahFe
                      `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                              :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
                 of
                 { GHC.Int.I32# dt_aahFi [Occ=Once] ->
                 case dt_aahFf
                      `cast` (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]
                              :: (Event :: *) ~R# (GHC.Int.Int16 :: *))
                 of
                 { GHC.Int.I16# dt_aahFl [Occ=Once] ->
                 case dt_aahFg
                      `cast` (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]
                              :: (Event :: *) ~R# (GHC.Int.Int16 :: *))
                 of
                 { GHC.Int.I16# dt_aahFn [Occ=Once] ->
                 GHC.Event.Poll.PollFd dt_aahFi dt_aahFl dt_aahFn
                 }
                 }
                 }}]
GHC.Event.Poll.$WPollFd
  = \ (dt_aahFe [Occ=Once] :: Fd)
      (dt_aahFf [Occ=Once] :: Event)
      (dt_aahFg [Occ=Once] :: Event) ->
      case dt_aahFe
           `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                   :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
      of
      { GHC.Int.I32# dt_aahFi [Occ=Once] ->
      case dt_aahFf
           `cast` (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]
                   :: (Event :: *) ~R# (GHC.Int.Int16 :: *))
      of
      { GHC.Int.I16# dt_aahFl [Occ=Once] ->
      case dt_aahFg
           `cast` (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]
                   :: (Event :: *) ~R# (GHC.Int.Int16 :: *))
      of
      { GHC.Int.I16# dt_aahFn [Occ=Once] ->
      GHC.Event.Poll.PollFd dt_aahFi dt_aahFl dt_aahFn
      }
      }
      }

-- RHS size: {terms: 11, types: 20, coercions: 6, joins: 0/0}
GHC.Event.Poll.$WPoll [InlPrag=INLINE[2]]
  :: MVar (A.Array PollFd) -> A.Array PollFd -> Poll
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (dt_aahFR [Occ=Once!] :: MVar (A.Array PollFd))
                 (dt_aahFS [Occ=Once] :: A.Array PollFd) ->
                 case dt_aahFR of { GHC.MVar.MVar dt_aahFT [Occ=Once] ->
                 case dt_aahFS
                      `cast` (GHC.Event.Array.N:Array[0]
                                  <PollFd>_P ; GHC.IORef.N:IORef[0] <GHC.Event.Array.AC PollFd>_N
                              :: (A.Array PollFd :: *)
                                 ~R# (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd) :: *))
                 of
                 { GHC.STRef.STRef dt_aahFZ [Occ=Once] ->
                 GHC.Event.Poll.Poll dt_aahFT dt_aahFZ
                 }
                 }}]
GHC.Event.Poll.$WPoll
  = \ (dt_aahFR [Occ=Once!] :: MVar (A.Array PollFd))
      (dt_aahFS [Occ=Once] :: A.Array PollFd) ->
      case dt_aahFR of { GHC.MVar.MVar dt_aahFT [Occ=Once] ->
      case dt_aahFS
           `cast` (GHC.Event.Array.N:Array[0]
                       <PollFd>_P ; GHC.IORef.N:IORef[0] <GHC.Event.Array.AC PollFd>_N
                   :: (A.Array PollFd :: *)
                      ~R# (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd) :: *))
      of
      { GHC.STRef.STRef dt_aahFZ [Occ=Once] ->
      GHC.Event.Poll.Poll dt_aahFT dt_aahFZ
      }
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fStorablePollFd_$calignment :: PollFd -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead] -> Foreign.Storable.$fStorableBool7}]
GHC.Event.Poll.$fStorablePollFd_$calignment
  = \ _ [Occ=Dead] -> Foreign.Storable.$fStorableBool7

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fStorablePollFd7 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Poll.$fStorablePollFd7 = GHC.Types.I# 8#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fStorablePollFd_$csizeOf :: PollFd -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead] -> GHC.Event.Poll.$fStorablePollFd7}]
GHC.Event.Poll.$fStorablePollFd_$csizeOf
  = \ _ [Occ=Dead] -> GHC.Event.Poll.$fStorablePollFd7

-- RHS size: {terms: 33, types: 50, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fStorablePollFd2
  :: Ptr PollFd -> State# RealWorld -> (# State# RealWorld, PollFd #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ptr_aahDB [Occ=Once!] :: Ptr PollFd)
                 (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case ptr_aahDB of { GHC.Ptr.Ptr addr_i9h5t ->
                 case readInt32OffAddr# @ RealWorld addr_i9h5t 0# s_i7IAv of
                 { (# ipv_i9h5B [Occ=Once], ipv1_i9h5C [Occ=Once] #) ->
                 case readInt16OffAddr#
                        @ RealWorld (plusAddr# addr_i9h5t 4#) 0# ipv_i9h5B
                 of
                 { (# ipv2_iaitf [Occ=Once], ipv3_iaitg [Occ=Once] #) ->
                 case readInt16OffAddr#
                        @ RealWorld (plusAddr# addr_i9h5t 6#) 0# ipv2_iaitf
                 of
                 { (# ipv4_Xaiw3 [Occ=Once], ipv5_Xaiw5 [Occ=Once] #) ->
                 (# ipv4_Xaiw3,
                    GHC.Event.Poll.PollFd ipv1_i9h5C ipv3_iaitg ipv5_Xaiw5 #)
                 }
                 }
                 }
                 }}]
GHC.Event.Poll.$fStorablePollFd2
  = \ (ptr_aahDB :: Ptr PollFd) (s_i7IAv :: State# RealWorld) ->
      case ptr_aahDB of { GHC.Ptr.Ptr addr_i9h5t ->
      case readInt32OffAddr# @ RealWorld addr_i9h5t 0# s_i7IAv of
      { (# ipv_i9h5B, ipv1_i9h5C #) ->
      case readInt16OffAddr#
             @ RealWorld (plusAddr# addr_i9h5t 4#) 0# ipv_i9h5B
      of
      { (# ipv2_iaitf, ipv3_iaitg #) ->
      case readInt16OffAddr#
             @ RealWorld (plusAddr# addr_i9h5t 6#) 0# ipv2_iaitf
      of
      { (# ipv4_Xaiw3, ipv5_Xaiw5 #) ->
      (# ipv4_Xaiw3,
         GHC.Event.Poll.PollFd ipv1_i9h5C ipv3_iaitg ipv5_Xaiw5 #)
      }
      }
      }
      }

-- RHS size: {terms: 43, types: 54, coercions: 0, joins: 0/1}
GHC.Event.Poll.$fStorablePollFd6
  :: Ptr PollFd
     -> Int -> State# RealWorld -> (# State# RealWorld, PollFd #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ptr_i9wJl [Occ=Once!] :: Ptr PollFd)
                 (off_i9wJm [Occ=Once!] :: Int)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ptr_i9wJl of { GHC.Ptr.Ptr addr_i9wJT [Occ=Once] ->
                 case off_i9wJm of { I# x_i9wJp [Occ=Once] ->
                 let {
                   addr1_i9h5t :: Addr#
                   [LclId]
                   addr1_i9h5t = plusAddr# addr_i9wJT (*# x_i9wJp 8#) } in
                 case readInt32OffAddr# @ RealWorld addr1_i9h5t 0# eta_B1 of
                 { (# ipv_i9h5B [Occ=Once], ipv1_i9h5C [Occ=Once] #) ->
                 case readInt16OffAddr#
                        @ RealWorld (plusAddr# addr1_i9h5t 4#) 0# ipv_i9h5B
                 of
                 { (# ipv2_iaitf [Occ=Once], ipv3_iaitg [Occ=Once] #) ->
                 case readInt16OffAddr#
                        @ RealWorld (plusAddr# addr1_i9h5t 6#) 0# ipv2_iaitf
                 of
                 { (# ipv4_Xaiw3 [Occ=Once], ipv5_Xaiw5 [Occ=Once] #) ->
                 (# ipv4_Xaiw3,
                    GHC.Event.Poll.PollFd ipv1_i9h5C ipv3_iaitg ipv5_Xaiw5 #)
                 }
                 }
                 }
                 }
                 }}]
GHC.Event.Poll.$fStorablePollFd6
  = \ (ptr_i9wJl :: Ptr PollFd)
      (off_i9wJm :: Int)
      (eta_B1 :: State# RealWorld) ->
      case ptr_i9wJl of { GHC.Ptr.Ptr addr_i9wJT ->
      case off_i9wJm of { I# x_i9wJp ->
      let {
        addr1_i9h5t [Dmd=<S,U>] :: Addr#
        [LclId]
        addr1_i9h5t = plusAddr# addr_i9wJT (*# x_i9wJp 8#) } in
      case readInt32OffAddr# @ RealWorld addr1_i9h5t 0# eta_B1 of
      { (# ipv_i9h5B, ipv1_i9h5C #) ->
      case readInt16OffAddr#
             @ RealWorld (plusAddr# addr1_i9h5t 4#) 0# ipv_i9h5B
      of
      { (# ipv2_iaitf, ipv3_iaitg #) ->
      case readInt16OffAddr#
             @ RealWorld (plusAddr# addr1_i9h5t 6#) 0# ipv2_iaitf
      of
      { (# ipv4_Xaiw3, ipv5_Xaiw5 #) ->
      (# ipv4_Xaiw3,
         GHC.Event.Poll.PollFd ipv1_i9h5C ipv3_iaitg ipv5_Xaiw5 #)
      }
      }
      }
      }
      }

-- RHS size: {terms: 42, types: 56, coercions: 0, joins: 0/1}
GHC.Event.Poll.$fStorablePollFd4
  :: forall b.
     Ptr b -> Int -> State# RealWorld -> (# State# RealWorld, PollFd #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b_aaiak)
                 (ptr_X9wNB [Occ=Once!] :: Ptr b_aaiak)
                 (off_X9wND [Occ=Once!] :: Int)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ptr_X9wNB of { GHC.Ptr.Ptr addr_i9wJT [Occ=Once] ->
                 case off_X9wND of { I# d_i9wJX [Occ=Once] ->
                 let {
                   addr1_i9h5t :: Addr#
                   [LclId]
                   addr1_i9h5t = plusAddr# addr_i9wJT d_i9wJX } in
                 case readInt32OffAddr# @ RealWorld addr1_i9h5t 0# eta_B1 of
                 { (# ipv_i9h5B [Occ=Once], ipv1_i9h5C [Occ=Once] #) ->
                 case readInt16OffAddr#
                        @ RealWorld (plusAddr# addr1_i9h5t 4#) 0# ipv_i9h5B
                 of
                 { (# ipv2_iaitf [Occ=Once], ipv3_iaitg [Occ=Once] #) ->
                 case readInt16OffAddr#
                        @ RealWorld (plusAddr# addr1_i9h5t 6#) 0# ipv2_iaitf
                 of
                 { (# ipv4_Xaiw3 [Occ=Once], ipv5_Xaiw5 [Occ=Once] #) ->
                 (# ipv4_Xaiw3,
                    GHC.Event.Poll.PollFd ipv1_i9h5C ipv3_iaitg ipv5_Xaiw5 #)
                 }
                 }
                 }
                 }
                 }}]
GHC.Event.Poll.$fStorablePollFd4
  = \ (@ b_aaiak)
      (ptr_X9wNB :: Ptr b_aaiak)
      (off_X9wND :: Int)
      (eta_B1 :: State# RealWorld) ->
      case ptr_X9wNB of { GHC.Ptr.Ptr addr_i9wJT ->
      case off_X9wND of { I# d_i9wJX ->
      let {
        addr1_i9h5t [Dmd=<S,U>] :: Addr#
        [LclId]
        addr1_i9h5t = plusAddr# addr_i9wJT d_i9wJX } in
      case readInt32OffAddr# @ RealWorld addr1_i9h5t 0# eta_B1 of
      { (# ipv_i9h5B, ipv1_i9h5C #) ->
      case readInt16OffAddr#
             @ RealWorld (plusAddr# addr1_i9h5t 4#) 0# ipv_i9h5B
      of
      { (# ipv2_iaitf, ipv3_iaitg #) ->
      case readInt16OffAddr#
             @ RealWorld (plusAddr# addr1_i9h5t 6#) 0# ipv2_iaitf
      of
      { (# ipv4_Xaiw3, ipv5_Xaiw5 #) ->
      (# ipv4_Xaiw3,
         GHC.Event.Poll.PollFd ipv1_i9h5C ipv3_iaitg ipv5_Xaiw5 #)
      }
      }
      }
      }
      }

-- RHS size: {terms: 37, types: 28, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fStorablePollFd1
  :: Ptr PollFd
     -> PollFd -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(SSS),1*U(U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ptr_aahDJ [Occ=Once!] :: Ptr PollFd)
                 (p_aahDK [Occ=Once!] :: PollFd)
                 (s_i7JiH [Occ=Once] :: State# RealWorld) ->
                 case ptr_aahDJ of { GHC.Ptr.Ptr addr_i9h5c ->
                 case p_aahDK of
                 { PollFd dt_daion [Occ=Once] dt1_daioo [Occ=Once]
                          dt2_daiop [Occ=Once] ->
                 case writeInt32OffAddr# @ RealWorld addr_i9h5c 0# dt_daion s_i7JiH
                 of s2_i9h5m
                 { __DEFAULT ->
                 case writeInt16OffAddr#
                        @ RealWorld (plusAddr# addr_i9h5c 4#) 0# dt1_daioo s2_i9h5m
                 of s1_iait0
                 { __DEFAULT ->
                 case writeInt16OffAddr#
                        @ RealWorld (plusAddr# addr_i9h5c 6#) 0# dt2_daiop s1_iait0
                 of s3_XaivU
                 { __DEFAULT ->
                 (# s3_XaivU, GHC.Tuple.() #)
                 }
                 }
                 }
                 }
                 }}]
GHC.Event.Poll.$fStorablePollFd1
  = \ (ptr_aahDJ :: Ptr PollFd)
      (p_aahDK :: PollFd)
      (s_i7JiH :: State# RealWorld) ->
      case ptr_aahDJ of { GHC.Ptr.Ptr addr_i9h5c ->
      case p_aahDK of { PollFd dt_daion dt1_daioo dt2_daiop ->
      case writeInt32OffAddr# @ RealWorld addr_i9h5c 0# dt_daion s_i7JiH
      of s2_i9h5m
      { __DEFAULT ->
      case writeInt16OffAddr#
             @ RealWorld (plusAddr# addr_i9h5c 4#) 0# dt1_daioo s2_i9h5m
      of s1_iait0
      { __DEFAULT ->
      case writeInt16OffAddr#
             @ RealWorld (plusAddr# addr_i9h5c 6#) 0# dt2_daiop s1_iait0
      of s3_XaivU
      { __DEFAULT ->
      (# s3_XaivU, GHC.Tuple.() #)
      }
      }
      }
      }
      }

-- RHS size: {terms: 47, types: 32, coercions: 0, joins: 0/1}
GHC.Event.Poll.$fStorablePollFd5
  :: Ptr PollFd
     -> Int -> PollFd -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(SSS),1*U(U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ptr_i9wJB [Occ=Once!] :: Ptr PollFd)
                 (off_i9wJC [Occ=Once!] :: Int)
                 (val_i9wJD [Occ=Once!] :: PollFd)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ptr_i9wJB of { GHC.Ptr.Ptr addr_i9wK6 [Occ=Once] ->
                 case off_i9wJC of { I# x_i9wJG [Occ=Once] ->
                 case val_i9wJD of
                 { PollFd dt_daion [Occ=Once] dt1_daioo [Occ=Once]
                          dt2_daiop [Occ=Once] ->
                 let {
                   addr1_i9h5c :: Addr#
                   [LclId]
                   addr1_i9h5c = plusAddr# addr_i9wK6 (*# x_i9wJG 8#) } in
                 case writeInt32OffAddr# @ RealWorld addr1_i9h5c 0# dt_daion eta_B1
                 of s2_i9h5m
                 { __DEFAULT ->
                 case writeInt16OffAddr#
                        @ RealWorld (plusAddr# addr1_i9h5c 4#) 0# dt1_daioo s2_i9h5m
                 of s1_iait0
                 { __DEFAULT ->
                 case writeInt16OffAddr#
                        @ RealWorld (plusAddr# addr1_i9h5c 6#) 0# dt2_daiop s1_iait0
                 of s3_XaivU
                 { __DEFAULT ->
                 (# s3_XaivU, GHC.Tuple.() #)
                 }
                 }
                 }
                 }
                 }
                 }}]
GHC.Event.Poll.$fStorablePollFd5
  = \ (ptr_i9wJB :: Ptr PollFd)
      (off_i9wJC :: Int)
      (val_i9wJD :: PollFd)
      (eta_B1 :: State# RealWorld) ->
      case ptr_i9wJB of { GHC.Ptr.Ptr addr_i9wK6 ->
      case off_i9wJC of { I# x_i9wJG ->
      case val_i9wJD of { PollFd dt_daion dt1_daioo dt2_daiop ->
      let {
        addr1_i9h5c [Dmd=<S,U>] :: Addr#
        [LclId]
        addr1_i9h5c = plusAddr# addr_i9wK6 (*# x_i9wJG 8#) } in
      case writeInt32OffAddr# @ RealWorld addr1_i9h5c 0# dt_daion eta_B1
      of s2_i9h5m
      { __DEFAULT ->
      case writeInt16OffAddr#
             @ RealWorld (plusAddr# addr1_i9h5c 4#) 0# dt1_daioo s2_i9h5m
      of s1_iait0
      { __DEFAULT ->
      case writeInt16OffAddr#
             @ RealWorld (plusAddr# addr1_i9h5c 6#) 0# dt2_daiop s1_iait0
      of s3_XaivU
      { __DEFAULT ->
      (# s3_XaivU, GHC.Tuple.() #)
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 46, types: 34, coercions: 0, joins: 0/1}
GHC.Event.Poll.$fStorablePollFd3
  :: forall b.
     Ptr b
     -> Int -> PollFd -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(SSS),1*U(U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b_aaias)
                 (ptr_X9wNL [Occ=Once!] :: Ptr b_aaias)
                 (off_X9wNN [Occ=Once!] :: Int)
                 (eta_B2 [Occ=Once!] :: PollFd)
                 (eta1_B1 [Occ=Once] :: State# RealWorld) ->
                 case ptr_X9wNL of { GHC.Ptr.Ptr addr_i9wK6 [Occ=Once] ->
                 case off_X9wNN of { I# d_i9wKa [Occ=Once] ->
                 case eta_B2 of
                 { PollFd dt_daion [Occ=Once] dt1_daioo [Occ=Once]
                          dt2_daiop [Occ=Once] ->
                 let {
                   addr1_i9h5c :: Addr#
                   [LclId]
                   addr1_i9h5c = plusAddr# addr_i9wK6 d_i9wKa } in
                 case writeInt32OffAddr# @ RealWorld addr1_i9h5c 0# dt_daion eta1_B1
                 of s2_i9h5m
                 { __DEFAULT ->
                 case writeInt16OffAddr#
                        @ RealWorld (plusAddr# addr1_i9h5c 4#) 0# dt1_daioo s2_i9h5m
                 of s1_iait0
                 { __DEFAULT ->
                 case writeInt16OffAddr#
                        @ RealWorld (plusAddr# addr1_i9h5c 6#) 0# dt2_daiop s1_iait0
                 of s3_XaivU
                 { __DEFAULT ->
                 (# s3_XaivU, GHC.Tuple.() #)
                 }
                 }
                 }
                 }
                 }
                 }}]
GHC.Event.Poll.$fStorablePollFd3
  = \ (@ b_aaias)
      (ptr_X9wNL :: Ptr b_aaias)
      (off_X9wNN :: Int)
      (eta_B2 :: PollFd)
      (eta1_B1 :: State# RealWorld) ->
      case ptr_X9wNL of { GHC.Ptr.Ptr addr_i9wK6 ->
      case off_X9wNN of { I# d_i9wKa ->
      case eta_B2 of { PollFd dt_daion dt1_daioo dt2_daiop ->
      let {
        addr1_i9h5c [Dmd=<S,U>] :: Addr#
        [LclId]
        addr1_i9h5c = plusAddr# addr_i9wK6 d_i9wKa } in
      case writeInt32OffAddr# @ RealWorld addr1_i9h5c 0# dt_daion eta1_B1
      of s2_i9h5m
      { __DEFAULT ->
      case writeInt16OffAddr#
             @ RealWorld (plusAddr# addr1_i9h5c 4#) 0# dt1_daioo s2_i9h5m
      of s1_iait0
      { __DEFAULT ->
      case writeInt16OffAddr#
             @ RealWorld (plusAddr# addr1_i9h5c 6#) 0# dt2_daiop s1_iait0
      of s3_XaivU
      { __DEFAULT ->
      (# s3_XaivU, GHC.Tuple.() #)
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 9, types: 1, coercions: 56, joins: 0/0}
GHC.Event.Poll.$fStorablePollFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable PollFd
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: PollFd
                                   GHC.Event.Poll.$fStorablePollFd_$csizeOf
                                   GHC.Event.Poll.$fStorablePollFd_$calignment
                                   GHC.Event.Poll.$fStorablePollFd6
                                   `cast` (<Ptr PollFd>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <PollFd>_R)
                                           :: (Ptr PollFd
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, PollFd #) :: *)
                                              ~R# (Ptr PollFd -> Int -> IO PollFd :: *))
                                   GHC.Event.Poll.$fStorablePollFd5
                                   `cast` (<Ptr PollFd>_R
                                           ->_R <Int>_R
                                           ->_R <PollFd>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr PollFd
                                               -> Int
                                               -> PollFd
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr PollFd -> Int -> PollFd -> IO () :: *))
                                   GHC.Event.Poll.$fStorablePollFd4
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <PollFd>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, PollFd #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO PollFd :: *))
                                   GHC.Event.Poll.$fStorablePollFd3
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R <PollFd>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> PollFd
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> PollFd -> IO () :: *))
                                   GHC.Event.Poll.$fStorablePollFd2
                                   `cast` (<Ptr PollFd>_R ->_R Sym (GHC.Types.N:IO[0] <PollFd>_R)
                                           :: (Ptr PollFd
                                               -> State# RealWorld
                                               -> (# State# RealWorld, PollFd #) :: *)
                                              ~R# (Ptr PollFd -> IO PollFd :: *))
                                   GHC.Event.Poll.$fStorablePollFd1
                                   `cast` (<Ptr PollFd>_R
                                           ->_R <PollFd>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr PollFd
                                               -> PollFd
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr PollFd -> PollFd -> IO () :: *))]
GHC.Event.Poll.$fStorablePollFd
  = Foreign.Storable.C:Storable
      @ PollFd
      GHC.Event.Poll.$fStorablePollFd_$csizeOf
      GHC.Event.Poll.$fStorablePollFd_$calignment
      (GHC.Event.Poll.$fStorablePollFd6
       `cast` (<Ptr PollFd>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] <PollFd>_R)
               :: (Ptr PollFd
                   -> Int -> State# RealWorld -> (# State# RealWorld, PollFd #) :: *)
                  ~R# (Ptr PollFd -> Int -> IO PollFd :: *)))
      (GHC.Event.Poll.$fStorablePollFd5
       `cast` (<Ptr PollFd>_R
               ->_R <Int>_R
               ->_R <PollFd>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr PollFd
                   -> Int
                   -> PollFd
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr PollFd -> Int -> PollFd -> IO () :: *)))
      (GHC.Event.Poll.$fStorablePollFd4
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R ->_R <Int>_R ->_R Sym (GHC.Types.N:IO[0] <PollFd>_R)
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, PollFd #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO PollFd :: *)))
      (GHC.Event.Poll.$fStorablePollFd3
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R <PollFd>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> PollFd
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> PollFd -> IO () :: *)))
      (GHC.Event.Poll.$fStorablePollFd2
       `cast` (<Ptr PollFd>_R ->_R Sym (GHC.Types.N:IO[0] <PollFd>_R)
               :: (Ptr PollFd
                   -> State# RealWorld -> (# State# RealWorld, PollFd #) :: *)
                  ~R# (Ptr PollFd -> IO PollFd :: *)))
      (GHC.Event.Poll.$fStorablePollFd1
       `cast` (<Ptr PollFd>_R
               ->_R <PollFd>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr PollFd
                   -> PollFd -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr PollFd -> PollFd -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 108, joins: 0/0}
GHC.Event.Poll.$fStorableEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable Event
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: Event
                                   Foreign.Storable.$fStorableInt16_$calignment
                                   `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                           ->_R <Int>_R
                                           :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *))
                                   Foreign.Storable.$fStorableInt16_$calignment
                                   `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                           ->_R <Int>_R
                                           :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *))
                                   GHC.Storable.readInt16OffPtr1
                                   `cast` ((Ptr
                                              Univ(phantom phantom <*>_N :: GHC.Int.Int16, Event))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]))
                                           :: (Ptr GHC.Int.Int16
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, GHC.Int.Int16 #) :: *)
                                              ~R# (Ptr Event -> Int -> IO Event :: *))
                                   GHC.Storable.writeInt16OffPtr1
                                   `cast` ((Ptr
                                              Univ(phantom phantom <*>_N :: GHC.Int.Int16, Event))_R
                                           ->_R <Int>_R
                                           ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr GHC.Int.Int16
                                               -> Int
                                               -> GHC.Int.Int16
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr Event -> Int -> Event -> IO () :: *))
                                   Foreign.Storable.$fStorableInt9
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, GHC.Int.Int16 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO Event :: *))
                                   Foreign.Storable.$fStorableInt7
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> GHC.Int.Int16
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> Event -> IO () :: *))
                                   Foreign.Storable.$fStorableInt6
                                   `cast` ((Ptr
                                              Univ(phantom phantom <*>_N :: GHC.Int.Int16, Event))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]))
                                           :: (Ptr GHC.Int.Int16
                                               -> State# RealWorld
                                               -> (# State# RealWorld, GHC.Int.Int16 #) :: *)
                                              ~R# (Ptr Event -> IO Event :: *))
                                   Foreign.Storable.$fStorableInt5
                                   `cast` ((Ptr
                                              Univ(phantom phantom <*>_N :: GHC.Int.Int16, Event))_R
                                           ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr GHC.Int.Int16
                                               -> GHC.Int.Int16
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr Event -> Event -> IO () :: *))]
GHC.Event.Poll.$fStorableEvent
  = Foreign.Storable.C:Storable
      @ Event
      (Foreign.Storable.$fStorableInt16_$calignment
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *)))
      (Foreign.Storable.$fStorableInt16_$calignment
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *)))
      (GHC.Storable.readInt16OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: GHC.Int.Int16, Event))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0]
                             (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]))
               :: (Ptr GHC.Int.Int16
                   -> Int
                   -> State# RealWorld
                   -> (# State# RealWorld, GHC.Int.Int16 #) :: *)
                  ~R# (Ptr Event -> Int -> IO Event :: *)))
      (GHC.Storable.writeInt16OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: GHC.Int.Int16, Event))_R
               ->_R <Int>_R
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr GHC.Int.Int16
                   -> Int
                   -> GHC.Int.Int16
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr Event -> Int -> Event -> IO () :: *)))
      (Foreign.Storable.$fStorableInt9
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0]
                             (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]))
               :: (forall b.
                   Ptr b
                   -> Int
                   -> State# RealWorld
                   -> (# State# RealWorld, GHC.Int.Int16 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO Event :: *)))
      (Foreign.Storable.$fStorableInt7
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> GHC.Int.Int16
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> Event -> IO () :: *)))
      (Foreign.Storable.$fStorableInt6
       `cast` ((Ptr Univ(phantom phantom <*>_N :: GHC.Int.Int16, Event))_R
               ->_R Sym (GHC.Types.N:IO[0]
                             (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]))
               :: (Ptr GHC.Int.Int16
                   -> State# RealWorld -> (# State# RealWorld, GHC.Int.Int16 #) :: *)
                  ~R# (Ptr Event -> IO Event :: *)))
      (Foreign.Storable.$fStorableInt5
       `cast` ((Ptr Univ(phantom phantom <*>_N :: GHC.Int.Int16, Event))_R
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr GHC.Int.Int16
                   -> GHC.Int.Int16
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr Event -> Event -> IO () :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowEvent2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Poll.$fShowEvent2 = "Event "#

-- RHS size: {terms: 41, types: 30, coercions: 6, joins: 0/0}
GHC.Event.Poll.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int# -> Event -> String -> String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 40 0] 241 30}]
GHC.Event.Poll.$w$cshowsPrec
  = \ (ww_sajiq :: Int#) (w_sajim :: Event) (w1_sajin :: String) ->
      case >=# ww_sajiq 11# of {
        __DEFAULT ->
          unpackAppendCString#
            GHC.Event.Poll.$fShowEvent2
            (case w_sajim
                  `cast` (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]
                          :: (Event :: *) ~R# (GHC.Int.Int16 :: *))
             of
             { GHC.Int.I16# x#_iaiu0 ->
             case GHC.Show.$wshowSignedInt 11# x#_iaiu0 w1_sajin of
             { (# ww5_iaiu8, ww6_iaiu9 #) ->
             GHC.Types.: @ Char ww5_iaiu8 ww6_iaiu9
             }
             });
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (unpackAppendCString#
               GHC.Event.Poll.$fShowEvent2
               (case w_sajim
                     `cast` (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]
                             :: (Event :: *) ~R# (GHC.Int.Int16 :: *))
                of
                { GHC.Int.I16# x#_iaiu0 ->
                case GHC.Show.$wshowSignedInt
                       11# x#_iaiu0 (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w1_sajin)
                of
                { (# ww5_iaiu8, ww6_iaiu9 #) ->
                GHC.Types.: @ Char ww5_iaiu8 ww6_iaiu9
                }
                }))
      }

-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowEvent_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> Event -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sajil [Occ=Once!] :: Int)
                 (w1_sajim [Occ=Once] :: Event)
                 (w2_sajin [Occ=Once] :: String) ->
                 case w_sajil of { I# ww1_sajiq [Occ=Once] ->
                 GHC.Event.Poll.$w$cshowsPrec ww1_sajiq w1_sajim w2_sajin
                 }}]
GHC.Event.Poll.$fShowEvent_$cshowsPrec
  = \ (w_sajil :: Int) (w1_sajim :: Event) (w2_sajin :: String) ->
      case w_sajil of { I# ww1_sajiq ->
      GHC.Event.Poll.$w$cshowsPrec ww1_sajiq w1_sajim w2_sajin
      }

-- RHS size: {terms: 15, types: 14, coercions: 3, joins: 0/0}
GHC.Event.Poll.$fShowEvent_$cshow :: Event -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 100 0}]
GHC.Event.Poll.$fShowEvent_$cshow
  = \ (x_i7Jay :: Event) ->
      unpackAppendCString#
        GHC.Event.Poll.$fShowEvent2
        (case x_i7Jay
              `cast` (GHC.Event.Poll.N:Event[0] ; Foreign.C.Types.N:CShort[0]
                      :: (Event :: *) ~R# (GHC.Int.Int16 :: *))
         of
         { GHC.Int.I16# x#_iaiu0 ->
         case GHC.Show.$wshowSignedInt 11# x#_iaiu0 (GHC.Types.[] @ Char) of
         { (# ww5_iaiu8, ww6_iaiu9 #) ->
         GHC.Types.: @ Char ww5_iaiu8 ww6_iaiu9
         }
         })

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowEvent1 :: Event -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
GHC.Event.Poll.$fShowEvent1
  = \ (w_sajim :: Event) (w1_sajin :: String) ->
      GHC.Event.Poll.$w$cshowsPrec 0# w_sajim w1_sajin

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowEvent_$cshowList :: [Event] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [Event])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ Event GHC.Event.Poll.$fShowEvent1 ls_i7JaB s_i7JaC}]
GHC.Event.Poll.$fShowEvent_$cshowList
  = \ (ls_i7JaB :: [Event]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ Event GHC.Event.Poll.$fShowEvent1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Event
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Event
                       GHC.Event.Poll.$fShowEvent_$cshowsPrec
                       GHC.Event.Poll.$fShowEvent_$cshow
                       GHC.Event.Poll.$fShowEvent_$cshowList]
GHC.Event.Poll.$fShowEvent
  = GHC.Show.C:Show
      @ Event
      GHC.Event.Poll.$fShowEvent_$cshowsPrec
      GHC.Event.Poll.$fShowEvent_$cshow
      GHC.Event.Poll.$fShowEvent_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Poll.$fShowPollFd6 = "PollFd {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Poll.$fShowPollFd5 = "pfdFd = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.Poll.$fShowPollFd4 = "pfdEvents = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Event.Poll.$fShowPollFd3 = "pfdRevents = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Poll.$fShowPollFd2 = "}"#

-- RHS size: {terms: 52, types: 22, coercions: 10, joins: 0/1}
GHC.Event.Poll.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> Int# -> Int# -> Int# -> String -> String
[GblId,
 Arity=5,
 Str=<S,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 0 0] 471 30}]
GHC.Event.Poll.$w$cshowsPrec1
  = \ (ww_sajiA :: Int#)
      (ww1_sajiE :: Int#)
      (ww2_sajiF :: Int#)
      (ww3_sajiG :: Int#)
      (w_sajix :: String) ->
      let {
        p_saiHP [Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_saiHP
          = \ (x_X7RAH [OS=OneShot] :: String) ->
              unpackAppendCString#
                GHC.Event.Poll.$fShowPollFd6
                (unpackAppendCString#
                   GHC.Event.Poll.$fShowPollFd5
                   (case GHC.Show.$wshowSignedInt
                           0#
                           ww1_sajiE
                           (++
                              @ Char
                              GHC.Show.showCommaSpace1
                              (unpackAppendCString#
                                 GHC.Event.Poll.$fShowPollFd4
                                 (GHC.Event.Poll.$w$cshowsPrec
                                    0#
                                    ((GHC.Int.I16# ww2_sajiF)
                                     `cast` (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                             :: (GHC.Int.Int16 :: *) ~R# (Event :: *)))
                                    (++
                                       @ Char
                                       GHC.Show.showCommaSpace1
                                       (unpackAppendCString#
                                          GHC.Event.Poll.$fShowPollFd3
                                          (GHC.Event.Poll.$w$cshowsPrec
                                             0#
                                             ((GHC.Int.I16# ww3_sajiG)
                                              `cast` (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                                      :: (GHC.Int.Int16 :: *) ~R# (Event :: *)))
                                             (unpackAppendCString#
                                                GHC.Event.Poll.$fShowPollFd2 x_X7RAH)))))))
                    of
                    { (# ww5_i9gZ0, ww6_i9gZ1 #) ->
                    GHC.Types.: @ Char ww5_i9gZ0 ww6_i9gZ1
                    })) } in
      case >=# ww_sajiA 11# of {
        __DEFAULT -> p_saiHP w_sajix;
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (p_saiHP (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w_sajix))
      }

-- RHS size: {terms: 15, types: 9, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> PollFd -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(SSS),1*U(U,U,U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sajiv [Occ=Once!] :: Int)
                 (w1_sajiw [Occ=Once!] :: PollFd)
                 (w2_sajix [Occ=Once] :: String) ->
                 case w_sajiv of { I# ww1_sajiA [Occ=Once] ->
                 case w1_sajiw of
                 { PollFd ww3_sajiE [Occ=Once] ww4_sajiF [Occ=Once]
                          ww5_sajiG [Occ=Once] ->
                 GHC.Event.Poll.$w$cshowsPrec1
                   ww1_sajiA ww3_sajiE ww4_sajiF ww5_sajiG w2_sajix
                 }
                 }}]
GHC.Event.Poll.$fShowPollFd_$cshowsPrec
  = \ (w_sajiv :: Int) (w1_sajiw :: PollFd) (w2_sajix :: String) ->
      case w_sajiv of { I# ww1_sajiA ->
      case w1_sajiw of { PollFd ww3_sajiE ww4_sajiF ww5_sajiG ->
      GHC.Event.Poll.$w$cshowsPrec1
        ww1_sajiA ww3_sajiE ww4_sajiF ww5_sajiG w2_sajix
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd7 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Poll.$fShowPollFd7 = GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 6, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd_$cshow :: PollFd -> String
[GblId,
 Arity=1,
 Str=<S(SSS),1*U(U,U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: PollFd) ->
                 GHC.Event.Poll.$fShowPollFd_$cshowsPrec
                   GHC.Event.Poll.$fShowPollFd7 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.Event.Poll.$fShowPollFd_$cshow
  = \ (x_i7Jay :: PollFd) ->
      case x_i7Jay of { PollFd ww1_sajiE ww2_sajiF ww3_sajiG ->
      GHC.Event.Poll.$w$cshowsPrec1
        0# ww1_sajiE ww2_sajiF ww3_sajiG (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 11, types: 6, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd1 :: PollFd -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S(SSS),1*U(U,U,U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 70 0}]
GHC.Event.Poll.$fShowPollFd1
  = \ (w_sajiw :: PollFd) (w1_sajix :: String) ->
      case w_sajiw of { PollFd ww1_sajiE ww2_sajiF ww3_sajiG ->
      GHC.Event.Poll.$w$cshowsPrec1
        0# ww1_sajiE ww2_sajiF ww3_sajiG w1_sajix
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd_$cshowList
  :: [PollFd] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [PollFd])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ PollFd GHC.Event.Poll.$fShowPollFd1 ls_i7JaB s_i7JaC}]
GHC.Event.Poll.$fShowPollFd_$cshowList
  = \ (ls_i7JaB :: [PollFd]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ PollFd GHC.Event.Poll.$fShowPollFd1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Poll.$fShowPollFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Show PollFd
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: PollFd
                       GHC.Event.Poll.$fShowPollFd_$cshowsPrec
                       GHC.Event.Poll.$fShowPollFd_$cshow
                       GHC.Event.Poll.$fShowPollFd_$cshowList]
GHC.Event.Poll.$fShowPollFd
  = GHC.Show.C:Show
      @ PollFd
      GHC.Event.Poll.$fShowPollFd_$cshowsPrec
      GHC.Event.Poll.$fShowPollFd_$cshow
      GHC.Event.Poll.$fShowPollFd_$cshowList

-- RHS size: {terms: 3, types: 1, coercions: 26, joins: 0/0}
GHC.Event.Poll.$fEqEvent [InlPrag=NOUSERINLINE CONLIKE] :: Eq Event
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Event
                        GHC.Int.eqInt16
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Bool>_R
                                :: (GHC.Int.Int16 -> GHC.Int.Int16 -> Bool :: *)
                                   ~R# (Event -> Event -> Bool :: *))
                        GHC.Int.neInt16
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Bool>_R
                                :: (GHC.Int.Int16 -> GHC.Int.Int16 -> Bool :: *)
                                   ~R# (Event -> Event -> Bool :: *))]
GHC.Event.Poll.$fEqEvent
  = GHC.Classes.C:Eq
      @ Event
      (GHC.Int.eqInt16
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Bool>_R
               :: (GHC.Int.Int16 -> GHC.Int.Int16 -> Bool :: *)
                  ~R# (Event -> Event -> Bool :: *)))
      (GHC.Int.neInt16
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Bool>_R
               :: (GHC.Int.Int16 -> GHC.Int.Int16 -> Bool :: *)
                  ~R# (Event -> Event -> Bool :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 5, joins: 0/0}
pfdRevents :: PollFd -> Event
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dainn [Occ=Once!] :: PollFd) ->
                 case ds_dainn of
                 { PollFd _ [Occ=Dead] _ [Occ=Dead] dt2_daiov [Occ=Once] ->
                 (GHC.Int.I16# dt2_daiov)
                 `cast` (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                         :: (GHC.Int.Int16 :: *) ~R# (Event :: *))
                 }}]
pfdRevents
  = \ (ds_dainn :: PollFd) ->
      case ds_dainn of { PollFd dt_daiot dt1_daiou dt2_daiov ->
      (GHC.Int.I16# dt2_daiov)
      `cast` (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
              :: (GHC.Int.Int16 :: *) ~R# (Event :: *))
      }

-- RHS size: {terms: 6, types: 5, coercions: 5, joins: 0/0}
pfdEvents :: PollFd -> Event
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,U,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_daini [Occ=Once!] :: PollFd) ->
                 case ds_daini of
                 { PollFd _ [Occ=Dead] dt1_daior [Occ=Once] _ [Occ=Dead] ->
                 (GHC.Int.I16# dt1_daior)
                 `cast` (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                         :: (GHC.Int.Int16 :: *) ~R# (Event :: *))
                 }}]
pfdEvents
  = \ (ds_daini :: PollFd) ->
      case ds_daini of { PollFd dt_daioq dt1_daior dt2_daios ->
      (GHC.Int.I16# dt1_daior)
      `cast` (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
              :: (GHC.Int.Int16 :: *) ~R# (Event :: *))
      }

-- RHS size: {terms: 6, types: 5, coercions: 5, joins: 0/0}
pfdFd :: PollFd -> Fd
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(U,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_daind [Occ=Once!] :: PollFd) ->
                 case ds_daind of
                 { PollFd dt_daion [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 (GHC.Int.I32# dt_daion)
                 `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                         :: (GHC.Int.Int32 :: *) ~R# (Fd :: *))
                 }}]
pfdFd
  = \ (ds_daind :: PollFd) ->
      case ds_daind of { PollFd dt_daion dt1_daioo dt2_daiop ->
      (GHC.Int.I32# dt_daion)
      `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
              :: (GHC.Int.Int32 :: *) ~R# (Fd :: *))
      }

-- RHS size: {terms: 6, types: 13, coercions: 8, joins: 0/0}
pollFd :: Poll -> A.Array PollFd
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dain9 [Occ=Once!] :: Poll) ->
                 case ds_dain9 of { Poll _ [Occ=Dead] dt1_daiom [Occ=Once] ->
                 (GHC.STRef.STRef
                    @ RealWorld @ (GHC.Event.Array.AC PollFd) dt1_daiom)
                 `cast` (Sym (GHC.IORef.N:IORef[0]) <GHC.Event.Array.AC
                                                       PollFd>_N ; Sym (GHC.Event.Array.N:Array[0]
                                                                            <PollFd>_P)
                         :: (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd) :: *)
                            ~R# (A.Array PollFd :: *))
                 }}]
pollFd
  = \ (ds_dain9 :: Poll) ->
      case ds_dain9 of { Poll dt_daiol dt1_daiom ->
      (GHC.STRef.STRef
         @ RealWorld @ (GHC.Event.Array.AC PollFd) dt1_daiom)
      `cast` (Sym (GHC.IORef.N:IORef[0]) <GHC.Event.Array.AC
                                            PollFd>_N ; Sym (GHC.Event.Array.N:Array[0] <PollFd>_P)
              :: (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd) :: *)
                 ~R# (A.Array PollFd :: *))
      }

-- RHS size: {terms: 6, types: 12, coercions: 0, joins: 0/0}
pollChanges :: Poll -> MVar (A.Array PollFd)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dain5 [Occ=Once!] :: Poll) ->
                 case ds_dain5 of { Poll dt_daioj [Occ=Once] _ [Occ=Dead] ->
                 GHC.MVar.MVar @ (A.Array PollFd) dt_daioj
                 }}]
pollChanges
  = \ (ds_dain5 :: Poll) ->
      case ds_dain5 of { Poll dt_daioj dt1_daiok ->
      GHC.MVar.MVar @ (A.Array PollFd) dt_daioj
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
available [InlPrag=INLINE (sat-args=0)] :: Bool
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= GHC.Types.True}]
available = GHC.Types.True

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Poll.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Poll.$trModule3
  = GHC.Types.TrNameS GHC.Event.Poll.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Event.Poll.$trModule2 = "GHC.Event.Poll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Poll.$trModule1
  = GHC.Types.TrNameS GHC.Event.Poll.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Event.Poll.$trModule
  = GHC.Types.Module
      GHC.Event.Poll.$trModule3 GHC.Event.Poll.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rajAW :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_rajAW
  = GHC.Types.KindRepTyConApp
      Foreign.C.Types.$tcCShort (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rajAX :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_rajAX
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcFd (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tcEvent2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Poll.$tcEvent2 = "Event"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tcEvent1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Poll.$tcEvent1
  = GHC.Types.TrNameS GHC.Event.Poll.$tcEvent2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tcEvent :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Poll.$tcEvent
  = GHC.Types.TyCon
      10782964843686049546##
      16589058175633483645##
      GHC.Event.Poll.$trModule
      GHC.Event.Poll.$tcEvent1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rajAY :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_rajAY
  = GHC.Types.KindRepTyConApp
      GHC.Event.Poll.$tcEvent (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'Event1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.Poll.$tc'Event1
  = GHC.Types.KindRepFun $krep_rajAW $krep2_rajAY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'Event3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Poll.$tc'Event3 = "'Event"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'Event2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Poll.$tc'Event2
  = GHC.Types.TrNameS GHC.Event.Poll.$tc'Event3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'Event :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Poll.$tc'Event
  = GHC.Types.TyCon
      14301517435728423362##
      8190957594797964970##
      GHC.Event.Poll.$trModule
      GHC.Event.Poll.$tc'Event2
      0#
      GHC.Event.Poll.$tc'Event1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tcPollFd2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Poll.$tcPollFd2 = "PollFd"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tcPollFd1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Poll.$tcPollFd1
  = GHC.Types.TrNameS GHC.Event.Poll.$tcPollFd2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tcPollFd :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Poll.$tcPollFd
  = GHC.Types.TyCon
      16228031948332168786##
      6382085973026785723##
      GHC.Event.Poll.$trModule
      GHC.Event.Poll.$tcPollFd1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_rajAZ :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_rajAZ
  = GHC.Types.KindRepTyConApp
      GHC.Event.Poll.$tcPollFd (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_rajB0 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep4_rajB0 = GHC.Types.KindRepFun $krep2_rajAY $krep3_rajAZ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_rajB1 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep5_rajB1 = GHC.Types.KindRepFun $krep2_rajAY $krep4_rajB0

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'PollFd1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.Poll.$tc'PollFd1
  = GHC.Types.KindRepFun $krep1_rajAX $krep5_rajB1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'PollFd3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Poll.$tc'PollFd3 = "'PollFd"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'PollFd2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Poll.$tc'PollFd2
  = GHC.Types.TrNameS GHC.Event.Poll.$tc'PollFd3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'PollFd :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Poll.$tc'PollFd
  = GHC.Types.TyCon
      13628496348781941345##
      13702663238288085101##
      GHC.Event.Poll.$trModule
      GHC.Event.Poll.$tc'PollFd2
      0#
      GHC.Event.Poll.$tc'PollFd1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_rajB2 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_rajB2
  = GHC.Types.: @ KindRep $krep3_rajAZ (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_rajB3 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep7_rajB3
  = GHC.Types.KindRepTyConApp GHC.Event.Array.$tcArray $krep6_rajB2

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep8_rajB4 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep8_rajB4
  = GHC.Types.: @ KindRep $krep7_rajB3 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_rajB5 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep9_rajB5
  = GHC.Types.KindRepTyConApp GHC.MVar.$tcMVar $krep8_rajB4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tcPoll2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Poll.$tcPoll2 = "Poll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tcPoll1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Poll.$tcPoll1 = GHC.Types.TrNameS GHC.Event.Poll.$tcPoll2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tcPoll :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Poll.$tcPoll
  = GHC.Types.TyCon
      13451464419968486054##
      9195109480934256969##
      GHC.Event.Poll.$trModule
      GHC.Event.Poll.$tcPoll1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep10_rajB6 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_rajB6
  = GHC.Types.KindRepTyConApp
      GHC.Event.Poll.$tcPoll (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_rajB7 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep11_rajB7 = GHC.Types.KindRepFun $krep7_rajB3 $krep10_rajB6

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'Poll1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.Poll.$tc'Poll1
  = GHC.Types.KindRepFun $krep9_rajB5 $krep11_rajB7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'Poll3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Poll.$tc'Poll3 = "'Poll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'Poll2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Poll.$tc'Poll2
  = GHC.Types.TrNameS GHC.Event.Poll.$tc'Poll3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Poll.$tc'Poll :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Poll.$tc'Poll
  = GHC.Types.TyCon
      5431567153781643515##
      15938353663250731731##
      GHC.Event.Poll.$trModule
      GHC.Event.Poll.$tc'Poll2
      0#
      GHC.Event.Poll.$tc'Poll1

-- RHS size: {terms: 24, types: 1, coercions: 254, joins: 0/0}
GHC.Event.Poll.$fBitsEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits Event
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: Event
                        GHC.Event.Poll.$fEqEvent
                        GHC.Int.$fBitsInt16_$c.&.
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Event -> Event :: *))
                        GHC.Int.$fBitsInt16_$c.|.
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Event -> Event :: *))
                        GHC.Int.$fBitsInt16_$cxor
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Event -> Event :: *))
                        GHC.Int.$fBitsInt16_$ccomplement
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> GHC.Int.Int16 :: *) ~R# (Event -> Event :: *))
                        GHC.Int.$fBitsInt16_$cshift
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$crotate
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt3
                        `cast` (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 :: *) ~R# (Event :: *))
                        GHC.Int.$fBitsInt16_$cbit
                        `cast` (<Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (Int -> GHC.Int.Int16 :: *) ~R# (Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$csetBit
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$cclearBit
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$ccomplementBit
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$ctestBit
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int -> Bool>_R
                                :: (GHC.Int.Int16 -> Int -> Bool :: *)
                                   ~R# (Event -> Int -> Bool :: *))
                        GHC.Int.$fBitsInt16_$cbitSizeMaybe
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Maybe Int>_R
                                :: (GHC.Int.Int16 -> Maybe Int :: *) ~R# (Event -> Maybe Int :: *))
                        GHC.Int.$fBitsInt16_$cfiniteBitSize
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *))
                        GHC.Int.$fBitsInt16_$cisSigned
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Bool>_R
                                :: (GHC.Int.Int16 -> Bool :: *) ~R# (Event -> Bool :: *))
                        GHC.Int.$fBitsInt16_$cshiftL
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$cunsafeShiftL
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$cshiftR
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$cunsafeShiftR
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$crotateL
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$crotateR
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                                :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                                   ~R# (Event -> Int -> Event :: *))
                        GHC.Int.$fBitsInt16_$cpopCount
                        `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                ->_R <Int>_R
                                :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *))]
GHC.Event.Poll.$fBitsEvent
  = Data.Bits.C:Bits
      @ Event
      GHC.Event.Poll.$fEqEvent
      (GHC.Int.$fBitsInt16_$c.&.
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Event -> Event :: *)))
      (GHC.Int.$fBitsInt16_$c.|.
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Event -> Event :: *)))
      (GHC.Int.$fBitsInt16_$cxor
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Event -> Event :: *)))
      (GHC.Int.$fBitsInt16_$ccomplement
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Event :: *)))
      (GHC.Int.$fBitsInt16_$cshift
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$crotate
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt3
       `cast` (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 :: *) ~R# (Event :: *)))
      (GHC.Int.$fBitsInt16_$cbit
       `cast` (<Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (Int -> GHC.Int.Int16 :: *) ~R# (Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$csetBit
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$cclearBit
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$ccomplementBit
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$ctestBit
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int -> Bool>_R
               :: (GHC.Int.Int16 -> Int -> Bool :: *)
                  ~R# (Event -> Int -> Bool :: *)))
      (GHC.Int.$fBitsInt16_$cbitSizeMaybe
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Maybe Int>_R
               :: (GHC.Int.Int16 -> Maybe Int :: *)
                  ~R# (Event -> Maybe Int :: *)))
      (GHC.Int.$fBitsInt16_$cfiniteBitSize
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *)))
      (GHC.Int.$fBitsInt16_$cisSigned
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Bool>_R
               :: (GHC.Int.Int16 -> Bool :: *) ~R# (Event -> Bool :: *)))
      (GHC.Int.$fBitsInt16_$cshiftL
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$cunsafeShiftL
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$cshiftR
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$cunsafeShiftR
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$crotateL
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$crotateR
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> Int -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Int -> Event :: *)))
      (GHC.Int.$fBitsInt16_$cpopCount
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 21, joins: 0/0}
GHC.Event.Poll.$fFiniteBitsEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits Event
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: Event
                              GHC.Event.Poll.$fBitsEvent
                              GHC.Int.$fBitsInt16_$cfiniteBitSize
                              `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                      ->_R <Int>_R
                                      :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *))
                              GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros
                              `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                      ->_R <Int>_R
                                      :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *))
                              GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros
                              `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                                      ->_R <Int>_R
                                      :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *))]
GHC.Event.Poll.$fFiniteBitsEvent
  = Data.Bits.C:FiniteBits
      @ Event
      GHC.Event.Poll.$fBitsEvent
      (GHC.Int.$fBitsInt16_$cfiniteBitSize
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R <Int>_R
               :: (GHC.Int.Int16 -> Int :: *) ~R# (Event -> Int :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 91, joins: 0/0}
GHC.Event.Poll.$fNumEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: Num Event
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: Event
                     GHC.Int.$fNumInt16_$c+
                     `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                             ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                             ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                             :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                                ~R# (Event -> Event -> Event :: *))
                     GHC.Int.$fNumInt16_$c-
                     `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                             ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                             ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                             :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                                ~R# (Event -> Event -> Event :: *))
                     GHC.Int.$fNumInt16_$c*
                     `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                             ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                             ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                             :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                                ~R# (Event -> Event -> Event :: *))
                     GHC.Int.$fNumInt16_$cnegate
                     `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                             ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                             :: (GHC.Int.Int16 -> GHC.Int.Int16 :: *) ~R# (Event -> Event :: *))
                     GHC.Int.$fNumInt16_$cabs
                     `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                             ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                             :: (GHC.Int.Int16 -> GHC.Int.Int16 :: *) ~R# (Event -> Event :: *))
                     GHC.Int.$fNumInt16_$csignum
                     `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
                             ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                             :: (GHC.Int.Int16 -> GHC.Int.Int16 :: *) ~R# (Event -> Event :: *))
                     GHC.Int.$fNumInt16_$cfromInteger
                     `cast` (<integer-simple-0.1.1.1:GHC.Integer.Type.Integer>_R
                             ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
                             :: (integer-simple-0.1.1.1:GHC.Integer.Type.Integer
                                 -> GHC.Int.Int16 :: *)
                                ~R# (integer-simple-0.1.1.1:GHC.Integer.Type.Integer
                                     -> Event :: *))]
GHC.Event.Poll.$fNumEvent
  = GHC.Num.C:Num
      @ Event
      (GHC.Int.$fNumInt16_$c+
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Event -> Event :: *)))
      (GHC.Int.$fNumInt16_$c-
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Event -> Event :: *)))
      (GHC.Int.$fNumInt16_$c*
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R (Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Event -> Event :: *)))
      (GHC.Int.$fNumInt16_$cnegate
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Event :: *)))
      (GHC.Int.$fNumInt16_$cabs
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Event :: *)))
      (GHC.Int.$fNumInt16_$csignum
       `cast` ((Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0]))
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (GHC.Int.Int16 -> GHC.Int.Int16 :: *)
                  ~R# (Event -> Event :: *)))
      (GHC.Int.$fNumInt16_$cfromInteger
       `cast` (<integer-simple-0.1.1.1:GHC.Integer.Type.Integer>_R
               ->_R Sym (Foreign.C.Types.N:CShort[0]) ; Sym (GHC.Event.Poll.N:Event[0])
               :: (integer-simple-0.1.1.1:GHC.Integer.Type.Integer
                   -> GHC.Int.Int16 :: *)
                  ~R# (integer-simple-0.1.1.1:GHC.Integer.Type.Integer
                       -> Event :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rajB8 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rajB8 = "modifyFdOnce not supported in Poll backend"#

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
GHC.Event.Poll.new3 :: Poll -> Fd -> E.Event -> IO Bool
[GblId, Str=x]
GHC.Event.Poll.new3
  = errorWithoutStackTrace
      @ 'LiftedRep
      @ (Poll -> Fd -> E.Event -> IO Bool)
      (unpackCString# lvl_rajB8)

Rec {
-- RHS size: {terms: 46, types: 43, coercions: 11, joins: 0/0}
$wc_pollLoop_rajB9
  :: Addr#
     -> Word#
     -> Int#
     -> State# RealWorld
     -> (# State# RealWorld, CInt #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U><S,U>,
 Unf=OtherCon []]
$wc_pollLoop_rajB9
  = \ (ww_sajiP :: Addr#)
      (ww1_sajiT :: Word#)
      (ww2_sajiX :: Int#)
      (w_sajiM :: State# RealWorld) ->
      case <=# ww2_sajiX 2147483647# of {
        __DEFAULT ->
          case {__pkg_ccall_GC base-4.11.0.0 Addr#
                              -> Word#
                              -> Int#
                              -> State# RealWorld
                              -> (# State# RealWorld, Int# #)}_daiod
                 ww_sajiP ww1_sajiT 2147483647# w_sajiM
          of
          { (# ds_daiob, ds1_daioa #) ->
          case narrow32Int# ds1_daioa of wild1_X3M {
            __DEFAULT ->
              (# ds_daiob,
                 (GHC.Int.I32# wild1_X3M)
                 `cast` (Sym (Foreign.C.Types.N:CInt[0])
                         :: (GHC.Int.Int32 :: *) ~R# (CInt :: *)) #);
            0# ->
              $wc_pollLoop_rajB9
                ww_sajiP ww1_sajiT (-# ww2_sajiX 2147483647#) ds_daiob
          }
          };
        1# ->
          case {__pkg_ccall_GC base-4.11.0.0 Addr#
                              -> Word#
                              -> Int#
                              -> State# RealWorld
                              -> (# State# RealWorld, Int# #)}_daiod
                 ww_sajiP ww1_sajiT (narrow32Int# ww2_sajiX) w_sajiM
          of
          { (# ds_daiob, ds1_daioa #) ->
          (# ds_daiob, GHC.Int.I32# (narrow32Int# ds1_daioa) #)
          `cast` (((#,#)
                     <'TupleRep '[]>_R
                     <'LiftedRep>_R
                     <State# RealWorld>_R
                     (Sym (Foreign.C.Types.N:CInt[0])))_R
                  :: ((# State# RealWorld, GHC.Int.Int32 #) :: TYPE
                                                                 ('TupleRep
                                                                    '['TupleRep '[], 'LiftedRep]))
                     ~R# ((# State# RealWorld, CInt #) :: TYPE
                                                            ('TupleRep
                                                               '['TupleRep '[], 'LiftedRep])))
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_rajBa :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl1_rajBa = GHC.Int.I32# 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_rajBb :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_rajBb = "c_poll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_rajBc :: [Char]
[GblId]
lvl3_rajBc = unpackCString# lvl2_rajBb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_rajBd :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl4_rajBd = "reworkFd: event not found"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl5_rajBe :: IO ()
[GblId, Str=x]
lvl5_rajBe
  = errorWithoutStackTrace
      @ 'LiftedRep @ (IO ()) (unpackCString# lvl4_rajBd)

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl6_rajBf
  :: A.Array PollFd
     -> CInt -> (CInt -> PollFd -> IO (CInt, Bool)) -> IO ()
[GblId]
lvl6_rajBf = A.loop @ PollFd @ CInt GHC.Event.Poll.$fStorablePollFd

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7_rajBg :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl7_rajBg = GHC.Types.I# 3#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_rajBh :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl8_rajBh = GHC.Types.I# 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl9_rajBi :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl9_rajBi = GHC.Types.I# 2#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl10_rajBj :: A.Array PollFd -> Int -> IO ()
[GblId]
lvl10_rajBj = A.removeAt @ PollFd GHC.Event.Poll.$fStorablePollFd

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl11_rajBk
  :: (PollFd -> Bool) -> A.Array PollFd -> IO (Maybe (Int, PollFd))
[GblId]
lvl11_rajBk = A.findIndex @ PollFd GHC.Event.Poll.$fStorablePollFd

-- RHS size: {terms: 476, types: 618, coercions: 95, joins: 5/11}
GHC.Event.Poll.new5
  :: Poll
     -> Maybe E.Timeout
     -> (Fd -> E.Event -> IO ())
     -> State# RealWorld
     -> (# State# RealWorld, Int #)
[GblId,
 Arity=4,
 Str=<S(SL),1*U(U,U)><L,U><L,C(C1(C1(U(U,A))))><S,U>,
 Unf=OtherCon []]
GHC.Event.Poll.new5
  = \ (p_aahE0 :: Poll)
      (mtout_aahE1 :: Maybe E.Timeout)
      (f_aahE2 :: Fd -> E.Event -> IO ())
      (eta_B1 :: State# RealWorld) ->
      case newMutVar#
             @ GHC.ForeignPtr.Finalizers
             @ RealWorld
             GHC.ForeignPtr.NoFinalizers
             eta_B1
      of
      { (# ipv_XaiCE, ipv1_XaiCG #) ->
      case newMutVar#
             @ (GHC.Event.Array.AC PollFd)
             @ RealWorld
             (GHC.Event.Array.AC
                @ PollFd
                (GHC.ForeignPtr.ForeignPtr
                   @ PollFd __NULL (GHC.ForeignPtr.PlainForeignPtr ipv1_XaiCG))
                0#
                0#)
             ipv_XaiCE
      of
      { (# ipv2_XaiCO, ipv3_XaiCQ #) ->
      case p_aahE0 of { Poll dt_daioj dt1_daiok ->
      case getMaskingState# ipv2_XaiCO of
      { (# ipv4_ia56X, ipv5_ia56Y #) ->
      join {
        $w$j_sajjo [InlPrag=NOUSERINLINE[0],
                    Dmd=<C(C(S)),1*C1(C1(U(U,U)))>]
          :: State# RealWorld
             -> MutVar# RealWorld (GHC.Event.Array.AC PollFd)
             -> (# State# RealWorld, Int #)
        [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []]
        $w$j_sajjo (w_sajji [OS=OneShot] :: State# RealWorld)
                   (ww_sajjm [OS=OneShot]
                      :: MutVar# RealWorld (GHC.Event.Array.AC PollFd))
          = case readMutVar#
                   @ RealWorld @ (GHC.Event.Array.AC PollFd) ww_sajjm w_sajji
            of
            { (# ipv6_iaikw, ipv7_iaikx #) ->
            case ipv7_iaikx of
            { GHC.Event.Array.AC es_iaikB dt2_iaikC dt3_iaikD ->
            case es_iaikB of { GHC.ForeignPtr.ForeignPtr fo_sajtp ds4_sajtq ->
            let {
              ary_sajeW :: GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd)
              [LclId, Unf=OtherCon []]
              ary_sajeW
                = GHC.STRef.STRef
                    @ RealWorld @ (GHC.Event.Array.AC PollFd) dt1_daiok } in
            let {
              offset_saiHx [Dmd=<S,U>] :: Int#
              [LclId]
              offset_saiHx = *# dt2_iaikC 8# } in
            join {
              exit_saiHw [Dmd=<L,C(U(U,U))>]
                :: State# RealWorld -> (# State# RealWorld, Int #)
              [LclId[JoinId(1)], Arity=1, Str=<S,U>]
              exit_saiHw (w1_iaikQ [OS=OneShot] :: State# RealWorld)
                = case touch#
                         @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents ds4_sajtq w1_iaikQ
                  of s'_iaikR
                  { __DEFAULT ->
                  case readMutVar#
                         @ RealWorld @ (GHC.Event.Array.AC PollFd) dt1_daiok s'_iaikR
                  of
                  { (# ipv8_iaizj, ipv9_iaizk #) ->
                  case ipv9_iaizk of
                  { GHC.Event.Array.AC es1_iaizo dt4_iaizp dt5_iaizq ->
                  case es1_iaizo of { GHC.ForeignPtr.ForeignPtr ds6_sajtt r_sajtu ->
                  join {
                    $w$j1_sajje [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(C1(C1(U(U,U))))>]
                      :: State# RealWorld
                         -> Int#
                         -> (# State# RealWorld, CInt #)
                         -> (# State# RealWorld, Int #)
                    [LclId[JoinId(3)], Arity=3, Str=<S,U><S,1*U><L,A>, Unf=OtherCon []]
                    $w$j1_sajje (w2_sajj7 [OS=OneShot] :: State# RealWorld)
                                (ww1_sajjc [OS=OneShot] :: Int#)
                                _ [Occ=Dead, OS=OneShot]
                      = join {
                          $w$j2_sajj6 [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(C1(U(U,U)))>]
                            :: State# RealWorld -> Int# -> (# State# RealWorld, Int #)
                          [LclId[JoinId(2)], Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []]
                          $w$j2_sajj6 (w4_sajj0 [OS=OneShot] :: State# RealWorld)
                                      (ww2_sajj4 [OS=OneShot] :: Int#)
                            = case touch#
                                     @ 'LiftedRep
                                     @ GHC.ForeignPtr.ForeignPtrContents
                                     r_sajtu
                                     w4_sajj0
                              of s'1_iaizC
                              { __DEFAULT ->
                              case ww2_sajj4 of wild6_X5o {
                                __DEFAULT ->
                                  case ((lvl6_rajBf
                                           (ary_sajeW
                                            `cast` (Sym (GHC.IORef.N:IORef[0]) <GHC.Event.Array.AC
                                                                                  PollFd>_N ; Sym (GHC.Event.Array.N:Array[0]
                                                                                                       <PollFd>_P)
                                                    :: (GHC.STRef.STRef
                                                          RealWorld
                                                          (GHC.Event.Array.AC PollFd) :: *)
                                                       ~R# (A.Array PollFd :: *)))
                                           (lvl1_rajBa
                                            `cast` (Sym (Foreign.C.Types.N:CInt[0])
                                                    :: (GHC.Int.Int32 :: *) ~R# (CInt :: *)))
                                           ((\ (i_aahEg :: CInt)
                                               (e_aahEh :: PollFd)
                                               (eta1_Xk :: State# RealWorld) ->
                                               case e_aahEh of
                                               { PollFd dt6_daiot dt7_daiou dt8_daiov ->
                                               case dt8_daiov of wild8_X5C {
                                                 __DEFAULT ->
                                                   case ((f_aahE2
                                                            ((GHC.Int.I32# dt6_daiot)
                                                             `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                                                     :: (GHC.Int.Int32 :: *)
                                                                        ~R# (Fd :: *)))
                                                            (case word2Int#
                                                                    (and#
                                                                       (int2Word# wild8_X5C) 25##)
                                                             of {
                                                               __DEFAULT ->
                                                                 case word2Int#
                                                                        (and#
                                                                           (int2Word# wild8_X5C)
                                                                           28##)
                                                                 of {
                                                                   __DEFAULT ->
                                                                     lvl7_rajBg
                                                                     `cast` (Sym (GHC.Event.Internal.N:Event[0])
                                                                             :: (Int :: *)
                                                                                ~R# (E.Event :: *));
                                                                   0# ->
                                                                     lvl8_rajBh
                                                                     `cast` (Sym (GHC.Event.Internal.N:Event[0])
                                                                             :: (Int :: *)
                                                                                ~R# (E.Event :: *))
                                                                 };
                                                               0# ->
                                                                 case word2Int#
                                                                        (and#
                                                                           (int2Word# wild8_X5C)
                                                                           28##)
                                                                 of {
                                                                   __DEFAULT ->
                                                                     lvl9_rajBi
                                                                     `cast` (Sym (GHC.Event.Internal.N:Event[0])
                                                                             :: (Int :: *)
                                                                                ~R# (E.Event :: *));
                                                                   0# ->
                                                                     GHC.Event.Poll.$fShowPollFd7
                                                                     `cast` (Sym (GHC.Event.Internal.N:Event[0])
                                                                             :: (Int :: *)
                                                                                ~R# (E.Event :: *))
                                                                 }
                                                             }))
                                                         `cast` (GHC.Types.N:IO[0] <()>_R
                                                                 :: (IO () :: *)
                                                                    ~R# (State# RealWorld
                                                                         -> (# State# RealWorld,
                                                                               () #) :: *)))
                                                          eta1_Xk
                                                   of
                                                   { (# ipv10_X7JnA, ipv11_X7JnC #) ->
                                                   let {
                                                     i'_saiHB [Dmd=<L,U(U)>] :: GHC.Int.Int32
                                                     [LclId]
                                                     i'_saiHB
                                                       = case i_aahEg
                                                              `cast` (Foreign.C.Types.N:CInt[0]
                                                                      :: (CInt :: *)
                                                                         ~R# (GHC.Int.Int32 :: *))
                                                         of
                                                         { GHC.Int.I32# x#_i9h7j ->
                                                         GHC.Int.I32#
                                                           (narrow32Int# (+# x#_i9h7j 1#))
                                                         } } in
                                                   (# ipv10_X7JnA,
                                                      (i'_saiHB
                                                       `cast` (Sym (Foreign.C.Types.N:CInt[0])
                                                               :: (GHC.Int.Int32 :: *)
                                                                  ~R# (CInt :: *)),
                                                       case i'_saiHB of { GHC.Int.I32# x_X8hAi ->
                                                       tagToEnum# @ Bool (==# x_X8hAi wild6_X5o)
                                                       }) #)
                                                   };
                                                 0# -> (# eta1_Xk, (i_aahEg, GHC.Types.True) #)
                                               }
                                               })
                                            `cast` (<CInt>_R
                                                    ->_R <PollFd>_R
                                                    ->_R Sym (GHC.Types.N:IO[0] <(CInt, Bool)>_R)
                                                    :: (CInt
                                                        -> PollFd
                                                        -> State# RealWorld
                                                        -> (# State# RealWorld,
                                                              (CInt, Bool) #) :: *)
                                                       ~R# (CInt
                                                            -> PollFd -> IO (CInt, Bool) :: *))))
                                        `cast` (GHC.Types.N:IO[0] <()>_R
                                                :: (IO () :: *)
                                                   ~R# (State# RealWorld
                                                        -> (# State# RealWorld, () #) :: *)))
                                         s'1_iaizC
                                  of
                                  { (# ipv10_X7Jnp, ipv11_X7Jnr #) ->
                                  (# ipv10_X7Jnp, GHC.Types.I# wild6_X5o #)
                                  };
                                0# -> (# s'1_iaizC, GHC.Event.Poll.$fShowPollFd7 #)
                              }
                              } } in
                        case ww1_sajjc of wild6_X5k {
                          __DEFAULT -> jump $w$j2_sajj6 w2_sajj7 wild6_X5k;
                          -1# ->
                            case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_iaizX
                                   w2_sajj7
                            of
                            { (# ds7_iaiA1, ds8_iaiA2 #) ->
                            case narrow32Int# ds8_iaiA2 of {
                              __DEFAULT ->
                                case Foreign.C.Error.throwErrno1 @ CInt lvl3_rajBc ds7_iaiA1 of
                                { (# ipv10_iaizz, ipv11_iaizA #) ->
                                case ipv11_iaizA
                                     `cast` (Foreign.C.Types.N:CInt[0]
                                             :: (CInt :: *) ~R# (GHC.Int.Int32 :: *))
                                of
                                { GHC.Int.I32# ww3_sajj4 ->
                                jump $w$j2_sajj6 ipv10_iaizz ww3_sajj4
                                }
                                };
                              4# -> jump $w$j2_sajj6 ds7_iaiA1 0#
                            }
                            }
                        } } in
                  case mtout_aahE1 of {
                    Nothing ->
                      case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Word#
                           -> Int#
                           -> State# RealWorld
                           -> (# State# RealWorld, Int# #)}_dainZ
                             ds6_sajtt (int2Word# dt4_iaizp) 0# ipv8_iaizj
                      of
                      { (# ds7_dainX, ds8_dainW #) ->
                      let {
                        ipv10_saiNj [Dmd=<S,U>] :: Int#
                        [LclId]
                        ipv10_saiNj = narrow32Int# ds8_dainW } in
                      jump $w$j1_sajje
                        ds7_dainX
                        ipv10_saiNj
                        (# ds7_dainX,
                           (GHC.Int.I32# ipv10_saiNj)
                           `cast` (Sym (Foreign.C.Types.N:CInt[0])
                                   :: (GHC.Int.Int32 :: *) ~R# (CInt :: *)) #)
                      };
                    Just tout_aahEe ->
                      case tout_aahEe of {
                        E.Timeout dt6_daiof ->
                          case $wc_pollLoop_rajB9
                                 ds6_sajtt
                                 (int2Word# dt4_iaizp)
                                 (word2Int#
                                    (quotWord#
                                       (minusWord# (plusWord# dt6_daiof 1000000##) 1##) 1000000##))
                                 ipv8_iaizj
                          of ds7_iaizN
                          { (# ipv10_iaizP, ipv11_iaizQ #) ->
                          case ipv11_iaizQ
                               `cast` (Foreign.C.Types.N:CInt[0]
                                       :: (CInt :: *) ~R# (GHC.Int.Int32 :: *))
                          of
                          { GHC.Int.I32# ww2_sajjc ->
                          jump $w$j1_sajje ipv10_iaizP ww2_sajjc ds7_iaizN
                          }
                          };
                        E.Forever ->
                          case $wc_pollLoop_rajB9
                                 ds6_sajtt (int2Word# dt4_iaizp) -1# ipv8_iaizj
                          of ds7_iaizN
                          { (# ipv10_iaizP, ipv11_iaizQ #) ->
                          case ipv11_iaizQ
                               `cast` (Foreign.C.Types.N:CInt[0]
                                       :: (CInt :: *) ~R# (GHC.Int.Int32 :: *))
                          of
                          { GHC.Int.I32# ww2_sajjc ->
                          jump $w$j1_sajje ipv10_iaizP ww2_sajjc ds7_iaizN
                          }
                          }
                      }
                  }
                  }
                  }
                  }
                  } } in
            joinrec {
              $wgo_saiHl [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                :: Int# -> State# RealWorld -> (# State# RealWorld, Int #)
              [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []]
              $wgo_saiHl (ww1_iaikT :: Int#) (w1_iaikU :: State# RealWorld)
                = case >=# ww1_iaikT offset_saiHx of {
                    __DEFAULT ->
                      let {
                        ptr_saiHv [Dmd=<S,U>] :: Addr#
                        [LclId]
                        ptr_saiHv = plusAddr# fo_sajtp ww1_iaikT } in
                      case readInt32OffAddr# @ RealWorld ptr_saiHv 0# w1_iaikU of
                      { (# ipv8_i9h5B, ipv9_i9h5C #) ->
                      case readInt16OffAddr#
                             @ RealWorld (plusAddr# ptr_saiHv 4#) 0# ipv8_i9h5B
                      of
                      { (# ipv10_iaitf, ipv11_iaitg #) ->
                      case readInt16OffAddr#
                             @ RealWorld (plusAddr# ptr_saiHv 6#) 0# ipv10_iaitf
                      of
                      { (# ipv12_Xaizs, ipv13_Xaizu #) ->
                      case ipv13_Xaizu of {
                        __DEFAULT ->
                          case ((lvl11_rajBk
                                   (\ (x_i7Rxi :: PollFd) ->
                                      case x_i7Rxi of { PollFd dt4_daion dt5_daioo dt6_daiop ->
                                      tagToEnum# @ Bool (==# dt4_daion ipv9_i9h5C)
                                      })
                                   (ary_sajeW
                                    `cast` (Sym (GHC.IORef.N:IORef[0]) <GHC.Event.Array.AC
                                                                          PollFd>_N ; Sym (GHC.Event.Array.N:Array[0]
                                                                                               <PollFd>_P)
                                            :: (GHC.STRef.STRef
                                                  RealWorld (GHC.Event.Array.AC PollFd) :: *)
                                               ~R# (A.Array PollFd :: *))))
                                `cast` (GHC.Types.N:IO[0] <Maybe (Int, PollFd)>_R
                                        :: (IO (Maybe (Int, PollFd)) :: *)
                                           ~R# (State# RealWorld
                                                -> (# State# RealWorld,
                                                      Maybe (Int, PollFd) #) :: *)))
                                 ipv12_Xaizs
                          of
                          { (# ipv14_X7IFk, ipv15_X7IFm #) ->
                          case ipv15_X7IFm of {
                            Nothing -> case lvl5_rajBe of wild6_00 { };
                            Just ds9_daijc ->
                              case ds9_daijc of { (i_aahDZ, ds10_daijd) ->
                              case ipv11_iaitg of wild7_X5y {
                                __DEFAULT ->
                                  case readMutVar#
                                         @ RealWorld
                                         @ (GHC.Event.Array.AC PollFd)
                                         dt1_daiok
                                         ipv14_X7IFk
                                  of
                                  { (# ipv16_iaiye, ipv17_iaiyf #) ->
                                  case ipv17_iaiyf of
                                  { GHC.Event.Array.AC ww3_iaiyr ww4_iaiys ww5_iaiyt ->
                                  case ww3_iaiyr of
                                  { GHC.ForeignPtr.ForeignPtr ww7_sajtE ww8_sajtF ->
                                  case i_aahDZ of { I# ww10_iaiyE ->
                                  case <# ww10_iaiyE 0# of {
                                    __DEFAULT ->
                                      case >=# ww10_iaiyE ww5_iaiyt of {
                                        __DEFAULT ->
                                          let {
                                            addr_i9h5c [Dmd=<S,U>] :: Addr#
                                            [LclId]
                                            addr_i9h5c = plusAddr# ww7_sajtE (*# ww10_iaiyE 8#) } in
                                          case writeInt32OffAddr#
                                                 @ RealWorld addr_i9h5c 0# ipv9_i9h5C ipv16_iaiye
                                          of s2_i9h5m
                                          { __DEFAULT ->
                                          case writeInt16OffAddr#
                                                 @ RealWorld
                                                 (plusAddr# addr_i9h5c 4#)
                                                 0#
                                                 wild7_X5y
                                                 s2_i9h5m
                                          of s1_iait0
                                          { __DEFAULT ->
                                          case writeInt16OffAddr#
                                                 @ RealWorld
                                                 (plusAddr# addr_i9h5c 6#)
                                                 0#
                                                 0#
                                                 s1_iait0
                                          of s3_XaivU
                                          { __DEFAULT ->
                                          case touch#
                                                 @ 'LiftedRep
                                                 @ GHC.ForeignPtr.ForeignPtrContents
                                                 ww8_sajtF
                                                 s3_XaivU
                                          of s'_iaiIi
                                          { __DEFAULT ->
                                          jump $wgo_saiHl (+# ww1_iaikT 8#) s'_iaiIi
                                          }
                                          }
                                          }
                                          };
                                        1# ->
                                          case GHC.Event.Array.$wlvl ww5_iaiyt ww10_iaiyE
                                          of wild8_00 {
                                          }
                                      };
                                    1# ->
                                      case GHC.Event.Array.$wlvl ww5_iaiyt ww10_iaiyE of wild8_00 {
                                      }
                                  }
                                  }
                                  }
                                  }
                                  };
                                0# ->
                                  case ((lvl10_rajBj
                                           (ary_sajeW
                                            `cast` (Sym (GHC.IORef.N:IORef[0]) <GHC.Event.Array.AC
                                                                                  PollFd>_N ; Sym (GHC.Event.Array.N:Array[0]
                                                                                                       <PollFd>_P)
                                                    :: (GHC.STRef.STRef
                                                          RealWorld
                                                          (GHC.Event.Array.AC PollFd) :: *)
                                                       ~R# (A.Array PollFd :: *)))
                                           i_aahDZ)
                                        `cast` (GHC.Types.N:IO[0] <()>_R
                                                :: (IO () :: *)
                                                   ~R# (State# RealWorld
                                                        -> (# State# RealWorld, () #) :: *)))
                                         ipv14_X7IFk
                                  of
                                  { (# ipv16_iail3, ipv17_iail4 #) ->
                                  jump $wgo_saiHl (+# ww1_iaikT 8#) ipv16_iail3
                                  }
                              }
                              }
                          }
                          };
                        0# ->
                          case GHC.Event.Array.$wsnoc
                                 @ PollFd
                                 GHC.Event.Poll.$fStorablePollFd
                                 dt1_daiok
                                 (GHC.Event.Poll.PollFd ipv9_i9h5C ipv11_iaitg 0#)
                                 ipv12_Xaizs
                          of
                          { (# ipv14_iail3, ipv15_iail4 #) ->
                          jump $wgo_saiHl (+# ww1_iaikT 8#) ipv14_iail3
                          }
                      }
                      }
                      }
                      };
                    1# -> jump exit_saiHw w1_iaikU
                  }; } in
            jump $wgo_saiHl 0# ipv6_iaikw
            }
            }
            } } in
      case ipv5_ia56Y of {
        __DEFAULT ->
          case takeMVar# @ RealWorld @ (A.Array PollFd) dt_daioj ipv4_ia56X
          of
          { (# ipv6_i7IAy, ipv7_i7IAz #) ->
          case putMVar#
                 @ RealWorld
                 @ (A.Array PollFd)
                 dt_daioj
                 ((GHC.STRef.STRef
                     @ RealWorld @ (GHC.Event.Array.AC PollFd) ipv3_XaiCQ)
                  `cast` (Sym (GHC.IORef.N:IORef[0]) <GHC.Event.Array.AC
                                                        PollFd>_N ; Sym (GHC.Event.Array.N:Array[0]
                                                                             <PollFd>_P)
                          :: (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd) :: *)
                             ~R# (A.Array PollFd :: *)))
                 ipv6_i7IAy
          of s2#_i9DsB
          { __DEFAULT ->
          case ipv7_i7IAz
               `cast` (GHC.Event.Array.N:Array[0]
                           <PollFd>_P ; GHC.IORef.N:IORef[0] <GHC.Event.Array.AC PollFd>_N
                       :: (A.Array PollFd :: *)
                          ~R# (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd) :: *))
          of
          { GHC.STRef.STRef ww1_sajjm ->
          jump $w$j_sajjo s2#_i9DsB ww1_sajjm
          }
          }
          };
        0# ->
          case maskAsyncExceptions#
                 @ (A.Array PollFd)
                 (\ (s_X7IEj [OS=OneShot] :: State# RealWorld) ->
                    case takeMVar# @ RealWorld @ (A.Array PollFd) dt_daioj s_X7IEj of
                    { (# ipv6_i7IAy, ipv7_i7IAz #) ->
                    case putMVar#
                           @ RealWorld
                           @ (A.Array PollFd)
                           dt_daioj
                           ((GHC.STRef.STRef
                               @ RealWorld @ (GHC.Event.Array.AC PollFd) ipv3_XaiCQ)
                            `cast` (Sym (GHC.IORef.N:IORef[0]) <GHC.Event.Array.AC
                                                                  PollFd>_N ; Sym (GHC.Event.Array.N:Array[0]
                                                                                       <PollFd>_P)
                                    :: (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd) :: *)
                                       ~R# (A.Array PollFd :: *)))
                           ipv6_i7IAy
                    of s2#_i9DsB
                    { __DEFAULT ->
                    (# s2#_i9DsB, ipv7_i7IAz #)
                    }
                    })
                 ipv4_ia56X
          of
          { (# ipv6_X7IIJ, ipv7_X7IIM #) ->
          case ipv7_X7IIM
               `cast` (GHC.Event.Array.N:Array[0]
                           <PollFd>_P ; GHC.IORef.N:IORef[0] <GHC.Event.Array.AC PollFd>_N
                       :: (A.Array PollFd :: *)
                          ~R# (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd) :: *))
          of
          { GHC.STRef.STRef ww1_sajjm ->
          jump $w$j_sajjo ipv6_X7IIJ ww1_sajjm
          }
          }
      }
      }
      }
      }
      }

-- RHS size: {terms: 197, types: 76, coercions: 20, joins: 0/0}
GHC.Event.Poll.new4
  :: Poll
     -> Fd
     -> E.Event
     -> E.Event
     -> State# RealWorld
     -> (# State# RealWorld, Bool #)
[GblId,
 Arity=5,
 Str=<S(SL),1*U(U,A)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 20 80 20 0] 645 0}]
GHC.Event.Poll.new4
  = \ (p_aahDO :: Poll)
      (fd_aahDP :: Fd)
      (oevt_aahDQ :: E.Event)
      (nevt_aahDR :: E.Event)
      (eta_B1 :: State# RealWorld) ->
      case p_aahDO of { Poll dt_daioj dt1_daiok ->
      GHC.Conc.Sync.$wwithMVar
        @ (A.Array PollFd)
        @ Bool
        dt_daioj
        ((\ (ary_aahDS [OS=OneShot] :: A.Array PollFd)
            (s_i7JiH [OS=OneShot] :: State# RealWorld) ->
            case ary_aahDS
                 `cast` (GHC.Event.Array.N:Array[0]
                             <PollFd>_P ; GHC.IORef.N:IORef[0] <GHC.Event.Array.AC PollFd>_N
                         :: (A.Array PollFd :: *)
                            ~R# (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd) :: *))
            of
            { GHC.STRef.STRef ww1_iaiyP ->
            case GHC.Event.Array.$wsnoc
                   @ PollFd
                   GHC.Event.Poll.$fStorablePollFd
                   ww1_iaiyP
                   (case fd_aahDP
                         `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                                 :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
                    of
                    { GHC.Int.I32# dt3_aahFi ->
                    case nevt_aahDR
                         `cast` (GHC.Event.Internal.N:Event[0]
                                 :: (E.Event :: *) ~R# (Int :: *))
                    of
                    { I# x#_iaihA ->
                    case andI# x#_iaihA 1# of {
                      __DEFAULT ->
                        case andI# x#_iaihA 2# of {
                          __DEFAULT ->
                            case oevt_aahDQ
                                 `cast` (GHC.Event.Internal.N:Event[0]
                                         :: (E.Event :: *) ~R# (Int :: *))
                            of
                            { I# x#1_XailW ->
                            case andI# x#1_XailW 1# of {
                              __DEFAULT ->
                                case andI# x#1_XailW 2# of {
                                  __DEFAULT -> GHC.Event.Poll.PollFd dt3_aahFi 5# 5#;
                                  0# -> GHC.Event.Poll.PollFd dt3_aahFi 5# 1#
                                };
                              0# ->
                                case andI# x#1_XailW 2# of {
                                  __DEFAULT -> GHC.Event.Poll.PollFd dt3_aahFi 5# 4#;
                                  0# -> GHC.Event.Poll.PollFd dt3_aahFi 5# 0#
                                }
                            }
                            };
                          0# ->
                            case oevt_aahDQ
                                 `cast` (GHC.Event.Internal.N:Event[0]
                                         :: (E.Event :: *) ~R# (Int :: *))
                            of
                            { I# x#1_XailW ->
                            case andI# x#1_XailW 1# of {
                              __DEFAULT ->
                                case andI# x#1_XailW 2# of {
                                  __DEFAULT -> GHC.Event.Poll.PollFd dt3_aahFi 1# 5#;
                                  0# -> GHC.Event.Poll.PollFd dt3_aahFi 1# 1#
                                };
                              0# ->
                                case andI# x#1_XailW 2# of {
                                  __DEFAULT -> GHC.Event.Poll.PollFd dt3_aahFi 1# 4#;
                                  0# -> GHC.Event.Poll.PollFd dt3_aahFi 1# 0#
                                }
                            }
                            }
                        };
                      0# ->
                        case andI# x#_iaihA 2# of {
                          __DEFAULT ->
                            case oevt_aahDQ
                                 `cast` (GHC.Event.Internal.N:Event[0]
                                         :: (E.Event :: *) ~R# (Int :: *))
                            of
                            { I# x#1_XailW ->
                            case andI# x#1_XailW 1# of {
                              __DEFAULT ->
                                case andI# x#1_XailW 2# of {
                                  __DEFAULT -> GHC.Event.Poll.PollFd dt3_aahFi 4# 5#;
                                  0# -> GHC.Event.Poll.PollFd dt3_aahFi 4# 1#
                                };
                              0# ->
                                case andI# x#1_XailW 2# of {
                                  __DEFAULT -> GHC.Event.Poll.PollFd dt3_aahFi 4# 4#;
                                  0# -> GHC.Event.Poll.PollFd dt3_aahFi 4# 0#
                                }
                            }
                            };
                          0# ->
                            case oevt_aahDQ
                                 `cast` (GHC.Event.Internal.N:Event[0]
                                         :: (E.Event :: *) ~R# (Int :: *))
                            of
                            { I# x#1_XailW ->
                            case andI# x#1_XailW 1# of {
                              __DEFAULT ->
                                case andI# x#1_XailW 2# of {
                                  __DEFAULT -> GHC.Event.Poll.PollFd dt3_aahFi 0# 5#;
                                  0# -> GHC.Event.Poll.PollFd dt3_aahFi 0# 1#
                                };
                              0# ->
                                case andI# x#1_XailW 2# of {
                                  __DEFAULT -> GHC.Event.Poll.PollFd dt3_aahFi 0# 4#;
                                  0# -> GHC.Event.Poll.PollFd dt3_aahFi 0# 0#
                                }
                            }
                            }
                        }
                    }
                    }
                    })
                   s_i7JiH
            of
            { (# ipv_i7JiK, ipv1_i7JiL #) ->
            (# ipv_i7JiK, GHC.Types.True #)
            }
            })
         `cast` (<A.Array PollFd>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                 :: (A.Array PollFd
                     -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                    ~R# (A.Array PollFd -> IO Bool :: *)))
        eta_B1
      }

-- RHS size: {terms: 5, types: 10, coercions: 0, joins: 0/0}
GHC.Event.Poll.new2
  :: Poll -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)}]
GHC.Event.Poll.new2
  = \ _ [Occ=Dead] (s_i7IAV :: State# RealWorld) ->
      (# s_i7IAV, GHC.Tuple.() #)

-- RHS size: {terms: 54, types: 116, coercions: 37, joins: 0/0}
GHC.Event.Poll.new1
  :: State# RealWorld -> (# State# RealWorld, E.Backend #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 168 30}]
GHC.Event.Poll.new1
  = \ (s_i7IAv :: State# RealWorld) ->
      case newMutVar#
             @ GHC.ForeignPtr.Finalizers
             @ RealWorld
             GHC.ForeignPtr.NoFinalizers
             s_i7IAv
      of
      { (# ipv_iaixF, ipv1_iaixG #) ->
      case newMutVar#
             @ (GHC.Event.Array.AC PollFd)
             @ RealWorld
             (GHC.Event.Array.AC
                @ PollFd
                (GHC.ForeignPtr.ForeignPtr
                   @ PollFd __NULL (GHC.ForeignPtr.PlainForeignPtr ipv1_iaixG))
                0#
                0#)
             ipv_iaixF
      of
      { (# ipv2_iaixK, ipv3_iaixL #) ->
      case newMVar# @ RealWorld @ (A.Array PollFd) ipv2_iaixK of
      { (# ipv4_ia50l, ipv5_ia50m #) ->
      case putMVar#
             @ RealWorld
             @ (A.Array PollFd)
             ipv5_ia50m
             ((GHC.STRef.STRef
                 @ RealWorld @ (GHC.Event.Array.AC PollFd) ipv3_iaixL)
              `cast` (Sym (GHC.IORef.N:IORef[0]) <GHC.Event.Array.AC
                                                    PollFd>_N ; Sym (GHC.Event.Array.N:Array[0]
                                                                         <PollFd>_P)
                      :: (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC PollFd) :: *)
                         ~R# (A.Array PollFd :: *)))
             ipv4_ia50l
      of s2#_ia50o
      { __DEFAULT ->
      case newMutVar#
             @ GHC.ForeignPtr.Finalizers
             @ RealWorld
             GHC.ForeignPtr.NoFinalizers
             s2#_ia50o
      of
      { (# ipv6_XaiCf, ipv7_XaiCh #) ->
      case newMutVar#
             @ (GHC.Event.Array.AC PollFd)
             @ RealWorld
             (GHC.Event.Array.AC
                @ PollFd
                (GHC.ForeignPtr.ForeignPtr
                   @ PollFd __NULL (GHC.ForeignPtr.PlainForeignPtr ipv7_XaiCh))
                0#
                0#)
             ipv6_XaiCf
      of
      { (# ipv8_XaiCp, ipv9_XaiCr #) ->
      (# ipv8_XaiCp,
         GHC.Event.Internal.Backend
           @ Poll
           (GHC.Event.Poll.Poll ipv5_ia50m ipv9_XaiCr)
           (GHC.Event.Poll.new5
            `cast` (<Poll>_R
                    ->_R <Maybe E.Timeout>_R
                    ->_R <Fd -> E.Event -> IO ()>_R
                    ->_R Sym (GHC.Types.N:IO[0] <Int>_R)
                    :: (Poll
                        -> Maybe E.Timeout
                        -> (Fd -> E.Event -> IO ())
                        -> State# RealWorld
                        -> (# State# RealWorld, Int #) :: *)
                       ~R# (Poll
                            -> Maybe E.Timeout -> (Fd -> E.Event -> IO ()) -> IO Int :: *)))
           (GHC.Event.Poll.new4
            `cast` (<Poll>_R
                    ->_R <Fd>_R
                    ->_R <E.Event>_R
                    ->_R <E.Event>_R
                    ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                    :: (Poll
                        -> Fd
                        -> E.Event
                        -> E.Event
                        -> State# RealWorld
                        -> (# State# RealWorld, Bool #) :: *)
                       ~R# (Poll -> Fd -> E.Event -> E.Event -> IO Bool :: *)))
           GHC.Event.Poll.new3
           (GHC.Event.Poll.new2
            `cast` (<Poll>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                    :: (Poll -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                       ~R# (Poll -> IO () :: *))) #)
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
new :: IO E.Backend
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.Poll.new1
               `cast` (Sym (GHC.Types.N:IO[0] <E.Backend>_R)
                       :: (State# RealWorld -> (# State# RealWorld, E.Backend #) :: *)
                          ~R# (IO E.Backend :: *))}]
new
  = GHC.Event.Poll.new1
    `cast` (Sym (GHC.Types.N:IO[0] <E.Backend>_R)
            :: (State# RealWorld -> (# State# RealWorld, E.Backend #) :: *)
               ~R# (IO E.Backend :: *))


