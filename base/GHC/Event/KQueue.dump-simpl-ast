CgGuts
  { cg_module =
      Module { moduleUnitId = base , moduleName = GHC.Event.KQueue }
  , cg_tycons = []
  , cg_binds =
      [ NonRec
          (Var "r9ldZ")
          (Lit (MachStr "KQueue back end not implemented for this platform"))
      , NonRec
          (Var "base_GHCziEventziKQueue_new")
          (App
             (App
                (App
                   (Var (Var "base_GHCziErr_errorWithoutStackTrace"))
                   (Type (TyConApp (TyCon "'ghczmprim_GHCziTypes_LiftedRep") [])))
                (Type
                   (TyConApp
                      (TyCon "ghczmprim_GHCziTypes_IO")
                      [ TyConApp (TyCon "base_GHCziEventziInternal_Backend") [] ])))
             (App
                (Var (Var "ghczmprim_GHCziCString_unpackCStringzh"))
                (Var (Var "r9ldZ"))))
      , NonRec
          (Var "base_GHCziEventziKQueue_available")
          (Var (Var "ghczmprim_GHCziTypes_False"))
      , NonRec
          (Var "base_GHCziEventziKQueue_zdtrModule4") (Lit (MachStr "base"))
      , NonRec
          (Var "base_GHCziEventziKQueue_zdtrModule3")
          (App
             (Var (Var "ghczmprim_GHCziTypes_TrNameS"))
             (Var (Var "base_GHCziEventziKQueue_zdtrModule4")))
      , NonRec
          (Var "base_GHCziEventziKQueue_zdtrModule2")
          (Lit (MachStr "GHC.Event.KQueue"))
      , NonRec
          (Var "base_GHCziEventziKQueue_zdtrModule1")
          (App
             (Var (Var "ghczmprim_GHCziTypes_TrNameS"))
             (Var (Var "base_GHCziEventziKQueue_zdtrModule2")))
      , NonRec
          (Var "base_GHCziEventziKQueue_zdtrModule")
          (App
             (App
                (Var (Var "ghczmprim_GHCziTypes_Module"))
                (Var (Var "base_GHCziEventziKQueue_zdtrModule3")))
             (Var (Var "base_GHCziEventziKQueue_zdtrModule1")))
      ]
  , cg_foreign = ForeignStubs (SDoc "") (SDoc "")
  , cg_foreign_files = []
  , cg_dep_pkgs =
      [ InstalledUnitId { installedUnitIdFS = "ghc-prim" }
      , InstalledUnitId { installedUnitIdFS = "integer-simple" }
      ]
  , cg_hpc_info = NoHpcInfo { hpcUsed = False }
  , cg_modBreaks = Nothing
  , cg_spt_entries = []
  }