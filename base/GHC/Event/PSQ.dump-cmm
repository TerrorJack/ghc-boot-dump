
==================== Output Cmm ====================
2018-03-16 15:57:56.670337584 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:57:56.671953757 UTC

[section ""data" . GHC.Event.PSQ.$WBin_closure" {
     GHC.Event.PSQ.$WBin_closure:
         const GHC.Event.PSQ.$WBin_info;
 },
 GHC.Event.PSQ.$WBin_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3km4,
                       label: GHC.Event.PSQ.$WBin_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3km4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3kmu; else goto c3kmv;
       c3kmu: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WBin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3kmv: // global
           I64[Sp - 40] = block_c3km1_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3kmF; else goto c3km2;
       u3kmF: // global
           call _c3km1(R1) args: 0, res: 0, upd: 0;
       c3km2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3km1() //  [R1]
         { info_tbl: [(c3km1,
                       label: block_c3km1_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3km1: // global
           I64[Sp] = block_c3km7_info;
           _s3kdh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdh::I64;
           if (R1 & 7 != 0) goto u3kmE; else goto c3km8;
       u3kmE: // global
           call _c3km7(R1) args: 0, res: 0, upd: 0;
       c3km8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3km7() //  [R1]
         { info_tbl: [(c3km7,
                       label: block_c3km7_info
                       rep:StackRep [True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3km7: // global
           I64[Sp] = block_c3kmc_info;
           _s3kdj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3kdj::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kmc() //  [R1]
         { info_tbl: [(c3kmc,
                       label: block_c3kmc_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kmc: // global
           I64[Sp] = block_c3kme_info;
           _s3kdk::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3kdk::P64;
           if (R1 & 7 != 0) goto u3kmG; else goto c3kmf;
       u3kmG: // global
           call _c3kme(R1) args: 0, res: 0, upd: 0;
       c3kmf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kme() //  [R1]
         { info_tbl: [(c3kme,
                       label: block_c3kme_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kme: // global
           I64[Sp] = block_c3kmj_info;
           _s3kdm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3kdm::I64;
           if (R1 & 7 != 0) goto u3kmH; else goto c3kmk;
       u3kmH: // global
           call _c3kmj(R1) args: 0, res: 0, upd: 0;
       c3kmk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kmj() //  [R1]
         { info_tbl: [(c3kmj,
                       label: block_c3kmj_info
                       rep:StackRep [True, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kmj: // global
           I64[Sp] = block_c3kmo_info;
           _s3kdn::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 40] = _s3kdn::P64;
           if (R1 & 7 != 0) goto u3kmI; else goto c3kmp;
       u3kmI: // global
           call _c3kmo(R1) args: 0, res: 0, upd: 0;
       c3kmp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kmo() //  [R1]
         { info_tbl: [(c3kmo,
                       label: block_c3kmo_info
                       rep:StackRep [True, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kmo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kmD; else goto c3kmC;
       c3kmD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kmC: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 32];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.674832709 UTC

[section ""data" . GHC.Event.PSQ.$WTip_closure" {
     GHC.Event.PSQ.$WTip_closure:
         const GHC.Event.PSQ.$WTip_info;
 },
 GHC.Event.PSQ.$WTip_entry() //  [R2, R3, R4]
         { info_tbl: [(c3kmQ,
                       label: GHC.Event.PSQ.$WTip_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kmQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3kn1; else goto c3kn2;
       c3kn1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WTip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kn2: // global
           I64[Sp - 24] = block_c3kmN_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3kn9; else goto c3kmO;
       u3kn9: // global
           call _c3kmN(R1) args: 0, res: 0, upd: 0;
       c3kmO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kmN() //  [R1]
         { info_tbl: [(c3kmN,
                       label: block_c3kmN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kmN: // global
           I64[Sp] = block_c3kmT_info;
           _s3kdt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdt::I64;
           if (R1 & 7 != 0) goto u3kn8; else goto c3kmU;
       u3kn8: // global
           call _c3kmT(R1) args: 0, res: 0, upd: 0;
       c3kmU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kmT() //  [R1]
         { info_tbl: [(c3kmT,
                       label: block_c3kmT_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kmT: // global
           I64[Sp] = block_c3kmY_info;
           _s3kdv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3kdv::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kmY() //  [R1]
         { info_tbl: [(c3kmY,
                       label: block_c3kmY_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kmY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kn7; else goto c3kn6;
       c3kn7: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kn6: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.676881313 UTC

[section ""data" . GHC.Event.PSQ.$WE_closure" {
     GHC.Event.PSQ.$WE_closure:
         const GHC.Event.PSQ.$WE_info;
 },
 GHC.Event.PSQ.$WE_entry() //  [R2, R3, R4]
         { info_tbl: [(c3knh,
                       label: GHC.Event.PSQ.$WE_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3knh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3knq; else goto c3knr;
       c3knq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WE_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3knr: // global
           I64[Sp - 24] = block_c3kne_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3knx; else goto c3knf;
       u3knx: // global
           call _c3kne(R1) args: 0, res: 0, upd: 0;
       c3knf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kne() //  [R1]
         { info_tbl: [(c3kne,
                       label: block_c3kne_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kne: // global
           I64[Sp] = block_c3knk_info;
           _s3kdB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdB::I64;
           if (R1 & 7 != 0) goto u3knw; else goto c3knl;
       u3knw: // global
           call _c3knk(R1) args: 0, res: 0, upd: 0;
       c3knl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3knk() //  [R1]
         { info_tbl: [(c3knk,
                       label: block_c3knk_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3knk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3knv; else goto c3knu;
       c3knv: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3knu: // global
           _s3kdD::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kdD::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.678559913 UTC

[section ""data" . GHC.Event.PSQ.value_closure" {
     GHC.Event.PSQ.value_closure:
         const GHC.Event.PSQ.value_info;
 },
 GHC.Event.PSQ.value_entry() //  [R2]
         { info_tbl: [(c3knF,
                       label: GHC.Event.PSQ.value_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3knF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3knG; else goto c3knH;
       c3knG: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.value_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3knH: // global
           I64[Sp - 8] = block_c3knC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3knL; else goto c3knD;
       u3knL: // global
           call _c3knC(R1) args: 0, res: 0, upd: 0;
       c3knD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3knC() //  [R1]
         { info_tbl: [(c3knC,
                       label: block_c3knC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3knC: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.679770997 UTC

[section ""data" . GHC.Event.PSQ.prio_closure" {
     GHC.Event.PSQ.prio_closure:
         const GHC.Event.PSQ.prio_info;
 },
 GHC.Event.PSQ.prio_entry() //  [R2]
         { info_tbl: [(c3knT,
                       label: GHC.Event.PSQ.prio_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3knT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3knX; else goto c3knY;
       c3knX: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.prio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3knY: // global
           I64[Sp - 8] = block_c3knQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ko2; else goto c3knR;
       u3ko2: // global
           call _c3knQ(R1) args: 0, res: 0, upd: 0;
       c3knR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3knQ() //  [R1]
         { info_tbl: [(c3knQ,
                       label: block_c3knQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3knQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ko1; else goto c3ko0;
       c3ko1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ko0: // global
           _s3kdM::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s3kdM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.681361436 UTC

[section ""data" . GHC.Event.PSQ.key_closure" {
     GHC.Event.PSQ.key_closure:
         const GHC.Event.PSQ.key_info;
 },
 GHC.Event.PSQ.key_entry() //  [R2]
         { info_tbl: [(c3koa,
                       label: GHC.Event.PSQ.key_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3koa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3koe; else goto c3kof;
       c3koe: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.key_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kof: // global
           I64[Sp - 8] = block_c3ko7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3koj; else goto c3ko8;
       u3koj: // global
           call _c3ko7(R1) args: 0, res: 0, upd: 0;
       c3ko8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ko7() //  [R1]
         { info_tbl: [(c3ko7,
                       label: block_c3ko7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ko7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3koi; else goto c3koh;
       c3koi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3koh: // global
           _s3kdQ::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kdQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.683034605 UTC

[section ""data" . GHC.Event.PSQ.null_closure" {
     GHC.Event.PSQ.null_closure:
         const GHC.Event.PSQ.null_info;
 },
 GHC.Event.PSQ.null_entry() //  [R2]
         { info_tbl: [(c3kov,
                       label: GHC.Event.PSQ.null_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kov: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3kow; else goto c3kox;
       c3kow: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.null_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kox: // global
           I64[Sp - 8] = block_c3koo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3koE; else goto c3kop;
       u3koE: // global
           call _c3koo(R1) args: 0, res: 0, upd: 0;
       c3kop: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3koo() //  [R1]
         { info_tbl: [(c3koo,
                       label: block_c3koo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3koo: // global
           if (R1 & 7 == 3) goto c3kot; else goto c3kos;
       c3kot: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kos: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.684777102 UTC

[section ""data" . GHC.Event.PSQ.findMin_closure" {
     GHC.Event.PSQ.findMin_closure:
         const GHC.Event.PSQ.findMin_info;
 },
 GHC.Event.PSQ.findMin_entry() //  [R2]
         { info_tbl: [(c3koR,
                       label: GHC.Event.PSQ.findMin_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3koR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3koS; else goto c3koT;
       c3koS: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.findMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3koT: // global
           I64[Sp - 8] = block_c3koJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kpc; else goto c3koK;
       u3kpc: // global
           call _c3koJ(R1) args: 0, res: 0, upd: 0;
       c3koK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3koJ() //  [R1]
         { info_tbl: [(c3koJ,
                       label: block_c3koJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3koJ: // global
           _c3koQ::P64 = R1 & 7;
           if (_c3koQ::P64 < 3) goto u3kpb; else goto c3koP;
       u3kpb: // global
           if (_c3koQ::P64 < 2) goto c3koN; else goto c3koO;
       c3koN: // global
           Hp = Hp + 48;
           _s3kdW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3kp7; else goto c3koZ;
       c3koZ: // global
           _s3kdZ::P64 = P64[_s3kdW::P64 + 7];
           _s3kdX::I64 = I64[_s3kdW::P64 + 31];
           _s3kdY::I64 = I64[_s3kdW::P64 + 39];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3kdZ::P64;
           I64[Hp - 24] = _s3kdX::I64;
           I64[Hp - 16] = _s3kdY::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3koO: // global
           Hp = Hp + 48;
           _s3kdW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3kp7; else goto c3kp6;
       c3kp7: // global
           HpAlloc = 48;
           R1 = _s3kdW::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kp6: // global
           _s3ke6::P64 = P64[_s3kdW::P64 + 6];
           _s3ke4::I64 = I64[_s3kdW::P64 + 14];
           _s3ke5::I64 = I64[_s3kdW::P64 + 22];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3ke6::P64;
           I64[Hp - 24] = _s3ke4::I64;
           I64[Hp - 16] = _s3ke5::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3koP: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.686351486 UTC

[section ""data" . GHC.Event.PSQ.empty_closure" {
     GHC.Event.PSQ.empty_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.68706418 UTC

[section ""data" . GHC.Event.PSQ.singleton_closure" {
     GHC.Event.PSQ.singleton_closure:
         const GHC.Event.PSQ.singleton_info;
 },
 GHC.Event.PSQ.singleton_entry() //  [R2, R3, R4]
         { info_tbl: [(c3kph,
                       label: GHC.Event.PSQ.singleton_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kph: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.PSQ.$WTip_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.688568408 UTC

[section ""data" . GHC.Event.PSQ.toList_go_closure" {
     GHC.Event.PSQ.toList_go_closure:
         const GHC.Event.PSQ.toList_go_info;
 },
 sat_s3kei_entry() //  [R1]
         { info_tbl: [(c3kpB,
                       label: sat_s3kei_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kpB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3kpC; else goto c3kpD;
       c3kpC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3kpD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3kej_entry() //  [R1]
         { info_tbl: [(c3kpE,
                       label: sat_s3kej_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kpE: // global
           _s3kej::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3kpF; else goto c3kpG;
       c3kpG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kpI; else goto c3kpH;
       c3kpI: // global
           HpAlloc = 32;
           goto c3kpF;
       c3kpF: // global
           R1 = _s3kej::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3kpH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kej::P64;
           _s3ke8::P64 = P64[_s3kej::P64 + 16];
           _s3kef::P64 = P64[_s3kej::P64 + 24];
           _s3keg::P64 = P64[_s3kej::P64 + 32];
           I64[Hp - 24] = sat_s3kei_info;
           P64[Hp - 8] = _s3ke8::P64;
           P64[Hp] = _s3keg::P64;
           R3 = _s3kef::P64;
           R2 = Hp - 24;
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.PSQ.toList_go_entry() //  [R2, R3]
         { info_tbl: [(c3kpO,
                       label: GHC.Event.PSQ.toList_go_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kpO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3kpP; else goto c3kpQ;
       c3kpP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.toList_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kpQ: // global
           I64[Sp - 16] = block_c3kpo_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3kq7; else goto c3kpp;
       u3kq7: // global
           call _c3kpo(R1) args: 0, res: 0, upd: 0;
       c3kpp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kpo() //  [R1]
         { info_tbl: [(c3kpo,
                       label: block_c3kpo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kpo: // global
           _s3ke8::P64 = P64[Sp + 8];
           _c3kpN::P64 = R1 & 7;
           if (_c3kpN::P64 < 3) goto u3kq6; else goto c3kpM;
       u3kq6: // global
           if (_c3kpN::P64 < 2) goto c3kpK; else goto c3kpL;
       c3kpK: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3kpV; else goto c3kpU;
       c3kpV: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kpU: // global
           _s3ked::P64 = P64[R1 + 7];
           _s3kef::P64 = P64[R1 + 15];
           _s3keg::P64 = P64[R1 + 23];
           _s3keb::I64 = I64[R1 + 31];
           _s3kec::I64 = I64[R1 + 39];
           I64[Hp - 88] = sat_s3kej_info;
           P64[Hp - 72] = _s3ke8::P64;
           P64[Hp - 64] = _s3kef::P64;
           P64[Hp - 56] = _s3keg::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3ked::P64;
           I64[Hp - 32] = _s3keb::I64;
           I64[Hp - 24] = _s3kec::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kpL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kq2; else goto c3kq1;
       c3kq2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kq1: // global
           _s3kem::P64 = P64[R1 + 6];
           _s3kek::I64 = I64[R1 + 14];
           _s3kel::I64 = I64[R1 + 22];
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3kem::P64;
           I64[Hp - 32] = _s3kek::I64;
           I64[Hp - 24] = _s3kel::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3ke8::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kpM: // global
           R1 = _s3ke8::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.691084672 UTC

[section ""data" . GHC.Event.PSQ.toList_closure" {
     GHC.Event.PSQ.toList_closure:
         const GHC.Event.PSQ.toList_info;
 },
 GHC.Event.PSQ.toList_entry() //  [R2]
         { info_tbl: [(c3kqc,
                       label: GHC.Event.PSQ.toList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kqc: // global
           R3 = R2;
           R2 = GHC.Types.[]_closure+1;
           call GHC.Event.PSQ.toList_go_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.69655684 UTC

[section ""data" . GHC.Event.PSQ.merge_closure" {
     GHC.Event.PSQ.merge_closure:
         const GHC.Event.PSQ.merge_info;
 },
 GHC.Event.PSQ.merge_entry() //  [R2, R3, R4]
         { info_tbl: [(c3kqr,
                       label: GHC.Event.PSQ.merge_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kqr: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3kqs; else goto c3kqt;
       c3kqs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.merge_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kqt: // global
           I64[Sp - 24] = block_c3kqj_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3kvc; else goto c3kqk;
       u3kvc: // global
           call _c3kqj(R1) args: 0, res: 0, upd: 0;
       c3kqk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kqj() //  [R1]
         { info_tbl: [(c3kqj,
                       label: block_c3kqj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kqj: // global
           _s3keq::P64 = P64[Sp + 16];
           _c3kqq::P64 = R1 & 7;
           if (_c3kqq::P64 < 3) goto u3kv5; else goto c3kqp;
       u3kv5: // global
           if (_c3kqq::P64 < 2) goto c3kqn; else goto c3kqo;
       c3kqn: // global
           I64[Sp - 48] = block_c3kqw_info;
           _s3ker::P64 = R1;
           _s3keu::P64 = P64[R1 + 7];
           _s3kew::P64 = P64[R1 + 15];
           _s3kex::P64 = P64[R1 + 23];
           _s3kes::I64 = I64[R1 + 31];
           _s3ket::I64 = I64[R1 + 39];
           _s3kev::I64 = I64[R1 + 47];
           R1 = _s3keq::P64;
           I64[Sp - 40] = _s3ket::I64;
           P64[Sp - 32] = _s3keu::P64;
           I64[Sp - 24] = _s3kev::I64;
           P64[Sp - 16] = _s3kew::P64;
           P64[Sp - 8] = _s3kex::P64;
           I64[Sp] = _s3kes::I64;
           P64[Sp + 16] = _s3ker::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3kva; else goto c3kqy;
       u3kva: // global
           call _c3kqw(R1) args: 0, res: 0, upd: 0;
       c3kqy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kqo: // global
           I64[Sp - 24] = block_c3ksO_info;
           _s3ker::P64 = R1;
           _s3kf9::P64 = P64[R1 + 6];
           _s3kf7::I64 = I64[R1 + 14];
           _s3kf8::I64 = I64[R1 + 22];
           R1 = _s3keq::P64;
           I64[Sp - 16] = _s3kf8::I64;
           P64[Sp - 8] = _s3kf9::P64;
           I64[Sp] = _s3kf7::I64;
           P64[Sp + 16] = _s3ker::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3kvb; else goto c3ksQ;
       u3kvb: // global
           call _c3ksO(R1) args: 0, res: 0, upd: 0;
       c3ksQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kqp: // global
           R1 = _s3keq::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kqw() //  [R1]
         { info_tbl: [(c3kqw,
                       label: block_c3kqw_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kqw: // global
           _c3kv4::P64 = R1 & 7;
           if (_c3kv4::P64 < 3) goto u3kv6; else goto u3kv8;
       u3kv6: // global
           _s3keo::P64 = P64[Sp + 56];
           _s3kes::I64 = I64[Sp + 48];
           _s3ket::I64 = I64[Sp + 8];
           if (_c3kv4::P64 < 2) goto c3krF; else goto c3ksH;
       c3krF: // global
           _s3keB::P64 = P64[R1 + 7];
           _s3keD::P64 = P64[R1 + 15];
           _s3keE::P64 = P64[R1 + 23];
           _s3kez::I64 = I64[R1 + 31];
           _s3keA::I64 = I64[R1 + 39];
           _s3keC::I64 = I64[R1 + 47];
           if (_s3ket::I64 == _s3keA::I64) goto c3krD; else goto c3krw;
       c3krD: // global
           _s3key::P64 = R1;
           if (%MO_S_Ge_W64(_s3kes::I64,
                            _s3kez::I64)) goto s3keF; else goto s3keK;
       c3krw: // global
           _s3key::P64 = R1;
           if (_s3ket::I64 > _s3keA::I64) goto s3keF; else goto s3keK;
       s3keF: // global
           I64[Sp + 8] = block_c3kqI_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3keE::P64;
           P64[Sp + 24] = _s3keD::P64;
           I64[Sp + 32] = _s3keC::I64;
           P64[Sp + 40] = _s3keB::P64;
           I64[Sp + 48] = _s3keA::I64;
           I64[Sp + 56] = _s3kez::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3kvf; else goto c3kqJ;
       u3kvf: // global
           call _c3kqI(R1) args: 0, res: 0, upd: 0;
       c3kqJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       s3keK: // global
           I64[Sp] = block_c3kr5_info;
           R1 = _s3keo::P64;
           P64[Sp + 64] = _s3key::P64;
           if (R1 & 7 != 0) goto u3kvg; else goto c3kr6;
       u3kvg: // global
           call _c3kr5(R1) args: 0, res: 0, upd: 0;
       c3kr6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ksH: // global
           _s3keU::P64 = P64[R1 + 6];
           _s3keS::I64 = I64[R1 + 14];
           _s3keT::I64 = I64[R1 + 22];
           if (_s3ket::I64 == _s3keT::I64) goto c3ksG; else goto c3ksp;
       c3ksG: // global
           _s3key::P64 = R1;
           if (%MO_S_Lt_W64(_s3kes::I64,
                            _s3keS::I64)) goto s3keV; else goto c3ksB;
       c3ksB: // global
           I64[Sp + 32] = block_c3ksu_info;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3keU::P64;
           I64[Sp + 48] = _s3keT::I64;
           I64[Sp + 56] = _s3keS::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3kve; else goto c3ksv;
       u3kve: // global
           call _c3ksu(R1) args: 0, res: 0, upd: 0;
       c3ksv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ksp: // global
           _s3key::P64 = R1;
           if (_s3ket::I64 <= _s3keT::I64) goto s3keV; else goto c3ksj;
       s3keV: // global
           I64[Sp] = block_c3krO_info;
           R1 = _s3keo::P64;
           P64[Sp + 64] = _s3key::P64;
           if (R1 & 7 != 0) goto u3kvh; else goto c3krP;
       u3kvh: // global
           call _c3krO(R1) args: 0, res: 0, upd: 0;
       c3krP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ksj: // global
           I64[Sp + 32] = block_c3ksc_info;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3keU::P64;
           I64[Sp + 48] = _s3keT::I64;
           I64[Sp + 56] = _s3keS::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3kvd; else goto c3ksd;
       u3kvd: // global
           call _c3ksc(R1) args: 0, res: 0, upd: 0;
       c3ksd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3kv8: // global
           Sp = Sp + 64;
           call _c3kuZ() args: 0, res: 0, upd: 0;
     }
 },
 _c3kqI() //  [R1]
         { info_tbl: [(c3kqI,
                       label: block_c3kqI_info
                       rep:StackRep [False, False, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kqI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kqW; else goto c3kqV;
       c3kqW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kqV: // global
           _s3keH::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3keD::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3kqO_info;
           R4 = P64[Sp + 8];
           R3 = _s3keD::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3keH::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kqO() //  [R1]
         { info_tbl: [(c3kqO,
                       label: block_c3kqO_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kqO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kqZ; else goto c3kqY;
       c3kqZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kqY: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kr5() //  [R1]
         { info_tbl: [(c3kr5,
                       label: block_c3kr5_info
                       rep:StackRep [True, False, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kr5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3krj; else goto c3kri;
       c3krj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kri: // global
           _s3keM::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3krb_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3keM::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3krb() //  [R1]
         { info_tbl: [(c3krb,
                       label: block_c3krb_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3krb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3krm; else goto c3krl;
       c3krm: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3krl: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ksu() //  [R1]
         { info_tbl: [(c3ksu,
                       label: block_c3ksu_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ksu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ksE; else goto c3ksD;
       c3ksE: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ksD: // global
           _s3kf6::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kf6::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ksc() //  [R1]
         { info_tbl: [(c3ksc,
                       label: block_c3ksc_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ksc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ksm; else goto c3ksl;
       c3ksm: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ksl: // global
           _s3kf3::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kf3::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3krO() //  [R1]
         { info_tbl: [(c3krO,
                       label: block_c3krO_info
                       rep:StackRep [True, False, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3krO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ks2; else goto c3ks1;
       c3ks2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ks1: // global
           _s3keX::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3krU_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3keX::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3krU() //  [R1]
         { info_tbl: [(c3krU,
                       label: block_c3krU_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3krU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ks5; else goto c3ks4;
       c3ks5: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ks4: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ksO() //  [R1]
         { info_tbl: [(c3ksO,
                       label: block_c3ksO_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ksO: // global
           _c3kv3::P64 = R1 & 7;
           if (_c3kv3::P64 < 3) goto u3kv7; else goto u3kv9;
       u3kv7: // global
           _s3keo::P64 = P64[Sp + 32];
           _s3kf7::I64 = I64[Sp + 24];
           _s3kf8::I64 = I64[Sp + 8];
           if (_c3kv3::P64 < 2) goto c3ktW; else goto c3kuV;
       c3ktW: // global
           _s3kfd::P64 = P64[R1 + 7];
           _s3kff::P64 = P64[R1 + 15];
           _s3kfg::P64 = P64[R1 + 23];
           _s3kfb::I64 = I64[R1 + 31];
           _s3kfc::I64 = I64[R1 + 39];
           _s3kfe::I64 = I64[R1 + 47];
           if (_s3kf8::I64 == _s3kfc::I64) goto c3ktU; else goto c3ktC;
       c3ktU: // global
           if (%MO_S_Ge_W64(_s3kf7::I64,
                            _s3kfb::I64)) goto s3kfh; else goto c3ktQ;
       c3ktQ: // global
           I64[Sp] = block_c3ktK_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3kvk; else goto c3ktL;
       u3kvk: // global
           call _c3ktK(R1) args: 0, res: 0, upd: 0;
       c3ktL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ktC: // global
           if (_s3kf8::I64 > _s3kfc::I64) goto s3kfh; else goto c3ktx;
       s3kfh: // global
           I64[Sp - 16] = block_c3kt0_info;
           R1 = _s3keo::P64;
           P64[Sp - 8] = _s3kfg::P64;
           P64[Sp] = _s3kff::P64;
           I64[Sp + 8] = _s3kfe::I64;
           P64[Sp + 16] = _s3kfd::P64;
           I64[Sp + 24] = _s3kfc::I64;
           I64[Sp + 32] = _s3kfb::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3kvp; else goto c3kt1;
       u3kvp: // global
           call _c3kt0(R1) args: 0, res: 0, upd: 0;
       c3kt1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ktx: // global
           I64[Sp] = block_c3ktr_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3kvj; else goto c3kts;
       u3kvj: // global
           call _c3ktr(R1) args: 0, res: 0, upd: 0;
       c3kts: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kuV: // global
           _s3kfv::P64 = P64[R1 + 6];
           _s3kft::I64 = I64[R1 + 14];
           _s3kfu::I64 = I64[R1 + 22];
           if (_s3kf8::I64 == _s3kfu::I64) goto c3kuU; else goto c3kut;
       c3kuU: // global
           if (%MO_S_Ge_W64(_s3kf7::I64,
                            _s3kft::I64)) goto c3kuF; else goto c3kuQ;
       c3kuF: // global
           I64[Sp + 8] = block_c3kuy_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3kfv::P64;
           I64[Sp + 24] = _s3kfu::I64;
           I64[Sp + 32] = _s3kft::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3kvn; else goto c3kuz;
       u3kvn: // global
           call _c3kuy(R1) args: 0, res: 0, upd: 0;
       c3kuz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kuQ: // global
           I64[Sp] = block_c3kuK_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3kvo; else goto c3kuL;
       u3kvo: // global
           call _c3kuK(R1) args: 0, res: 0, upd: 0;
       c3kuL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kut: // global
           if (_s3kf8::I64 > _s3kfu::I64) goto c3kud; else goto c3kuo;
       c3kud: // global
           I64[Sp + 8] = block_c3ku6_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3kfv::P64;
           I64[Sp + 24] = _s3kfu::I64;
           I64[Sp + 32] = _s3kft::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3kvl; else goto c3ku7;
       u3kvl: // global
           call _c3ku6(R1) args: 0, res: 0, upd: 0;
       c3ku7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kuo: // global
           I64[Sp] = block_c3kui_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3kvm; else goto c3kuj;
       u3kvm: // global
           call _c3kui(R1) args: 0, res: 0, upd: 0;
       c3kuj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3kv9: // global
           Sp = Sp + 40;
           call _c3kuZ() args: 0, res: 0, upd: 0;
     }
 },
 _c3ktK() //  [R1]
         { info_tbl: [(c3ktK,
                       label: block_c3ktK_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ktK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ktT; else goto c3ktS;
       c3ktT: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ktS: // global
           _s3kfs::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfs::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kt0() //  [R1]
         { info_tbl: [(c3kt0,
                       label: block_c3kt0_info
                       rep:StackRep [False, False, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kt0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kte; else goto c3ktd;
       c3kte: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ktd: // global
           _s3kfj::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3kff::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3kt6_info;
           R4 = P64[Sp + 8];
           R3 = _s3kff::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3kfj::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kt6() //  [R1]
         { info_tbl: [(c3kt6,
                       label: block_c3kt6_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kt6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kth; else goto c3ktg;
       c3kth: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ktg: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ktr() //  [R1]
         { info_tbl: [(c3ktr,
                       label: block_c3ktr_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ktr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ktA; else goto c3ktz;
       c3ktA: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ktz: // global
           _s3kfp::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfp::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kuy() //  [R1]
         { info_tbl: [(c3kuy,
                       label: block_c3kuy_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kuy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kuI; else goto c3kuH;
       c3kuI: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kuH: // global
           _s3kfE::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kfE::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kuK() //  [R1]
         { info_tbl: [(c3kuK,
                       label: block_c3kuK_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kuK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kuT; else goto c3kuS;
       c3kuT: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kuS: // global
           _s3kfG::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfG::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ku6() //  [R1]
         { info_tbl: [(c3ku6,
                       label: block_c3ku6_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ku6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kug; else goto c3kuf;
       c3kug: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kuf: // global
           _s3kfz::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kfz::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kui() //  [R1]
         { info_tbl: [(c3kui,
                       label: block_c3kui_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kui: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kur; else goto c3kuq;
       c3kur: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kuq: // global
           _s3kfB::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfB::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kuZ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kuZ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.708181329 UTC

[section ""data" . GHC.Event.PSQ.$watMost_closure" {
     GHC.Event.PSQ.$watMost_closure:
         const GHC.Event.PSQ.$watMost_info;
 },
 ds_s3kfW_entry() //  [R1]
         { info_tbl: [(c3kvU,
                       label: ds_s3kfW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kvU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3kvV; else goto c3kvW;
       c3kvV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3kvW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3kvR_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3kvR() //  [R1, R2]
         { info_tbl: [(c3kvR,
                       label: block_c3kvR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kvR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3kvZ; else goto c3kvY;
       c3kvZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3kvY: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s3kg0_entry() //  [R1]
         { info_tbl: [(c3kw8,
                       label: ds1_s3kg0_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kw8: // global
           _s3kg0::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3kw9; else goto c3kwa;
       c3kwa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3kwc; else goto c3kwb;
       c3kwc: // global
           HpAlloc = 24;
           goto c3kw9;
       c3kw9: // global
           R1 = _s3kg0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3kwb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kg0::P64;
           _s3kfJ::P64 = P64[_s3kg0::P64 + 16];
           _s3kfS::P64 = P64[_s3kg0::P64 + 24];
           _s3kfW::P64 = P64[_s3kg0::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s3kfW::P64;
           I64[Sp - 24] = block_c3kw5_info;
           R3 = _s3kfS::P64;
           R2 = Hp - 16;
           R1 = _s3kfJ::P64;
           Sp = Sp - 24;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3kw5() //  [R1, R2]
         { info_tbl: [(c3kw5,
                       label: block_c3kw5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kw5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3kwf; else goto c3kwe;
       c3kwf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3kwe: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3kgl_entry() //  [R1]
         { info_tbl: [(c3kwn,
                       label: sat_s3kgl_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kwn: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3kww; else goto c3kwx;
       c3kww: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3kwx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3kwk_info;
           _s3kg0::P64 = P64[R1 + 24];
           _s3kfQ::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s3kfQ::I64;
           P64[Sp - 24] = _s3kg0::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3kwD; else goto c3kwl;
       u3kwD: // global
           call _c3kwk(R1) args: 0, res: 0, upd: 0;
       c3kwl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3kwk() //  [R1]
         { info_tbl: [(c3kwk,
                       label: block_c3kwk_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kwk: // global
           I64[Sp] = block_c3kwq_info;
           _s3kgg::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3kgg::P64;
           if (R1 & 7 != 0) goto u3kwC; else goto c3kwr;
       u3kwC: // global
           call _c3kwq(R1) args: 0, res: 0, upd: 0;
       c3kwr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3kwq() //  [R1]
         { info_tbl: [(c3kwq,
                       label: block_c3kwq_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kwq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kwB; else goto c3kwA;
       c3kwB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3kwA: // global
           _s3kgj::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           R4 = _s3kgj::P64;
           R3 = P64[Sp + 16];
           R2 = Hp - 7;
           Sp = Sp + 24;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 $wgo_s3kfJ_entry() //  [R1, R2, R3]
         { info_tbl: [(c3kwJ,
                       label: $wgo_s3kfJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kwJ: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3kwK; else goto c3kwL;
       c3kwK: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kwL: // global
           I64[Sp - 32] = block_c3kvA_info;
           _s3kfJ::P64 = R1;
           _s3kfH::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s3kfH::P64;
           P64[Sp - 16] = _s3kfJ::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3kxl; else goto c3kvB;
       u3kxl: // global
           call _c3kvA(R1) args: 0, res: 0, upd: 0;
       c3kvB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kvA() //  [R1]
         { info_tbl: [(c3kvA,
                       label: block_c3kvA_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kvA: // global
           _c3kwI::P64 = R1 & 7;
           if (_c3kwI::P64 < 3) goto u3kxi; else goto c3kwH;
       u3kxi: // global
           _s3kfH::P64 = P64[Sp + 8];
           if (_c3kwI::P64 < 2) goto c3kwF; else goto c3kwG;
       c3kwF: // global
           I64[Sp - 48] = block_c3kvF_info;
           _s3kfM::P64 = R1;
           _s3kfP::P64 = P64[R1 + 7];
           _s3kfR::P64 = P64[R1 + 15];
           _s3kfS::P64 = P64[R1 + 23];
           _s3kfN::I64 = I64[R1 + 31];
           _s3kfO::I64 = I64[R1 + 39];
           _s3kfQ::I64 = I64[R1 + 47];
           R1 = _s3kfH::P64;
           I64[Sp - 40] = _s3kfO::I64;
           P64[Sp - 32] = _s3kfP::P64;
           I64[Sp - 24] = _s3kfQ::I64;
           P64[Sp - 16] = _s3kfR::P64;
           P64[Sp - 8] = _s3kfS::P64;
           I64[Sp] = _s3kfN::I64;
           P64[Sp + 8] = _s3kfM::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3kxj; else goto c3kvG;
       u3kxj: // global
           call _c3kvF(R1) args: 0, res: 0, upd: 0;
       c3kvG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kwG: // global
           I64[Sp - 16] = block_c3kwY_info;
           _s3kfM::P64 = R1;
           _s3kgo::P64 = P64[R1 + 6];
           _s3kgm::I64 = I64[R1 + 14];
           _s3kgn::I64 = I64[R1 + 22];
           R1 = _s3kfH::P64;
           P64[Sp - 8] = _s3kgo::P64;
           I64[Sp] = _s3kgn::I64;
           I64[Sp + 8] = _s3kgm::I64;
           P64[Sp + 16] = _s3kfM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3kxk; else goto c3kx0;
       u3kxk: // global
           call _c3kwY(R1) args: 0, res: 0, upd: 0;
       c3kx0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kwH: // global
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kvF() //  [R1]
         { info_tbl: [(c3kvF,
                       label: block_c3kvF_info
                       rep:StackRep [True, False, True, False, False, True, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kvF: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c3kwP; else goto c3kwO;
       c3kwP: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kwO: // global
           _s3kfK::P64 = P64[Sp + 72];
           _s3kfO::I64 = I64[Sp + 8];
           if (_s3kfO::I64 <= I64[R1 + 7]) goto c3kwU; else goto c3kwV;
       c3kwU: // global
           I64[Hp - 192] = ds_s3kfW_info;
           _s3kfJ::P64 = P64[Sp + 64];
           P64[Hp - 176] = _s3kfJ::P64;
           P64[Hp - 168] = _s3kfK::P64;
           P64[Hp - 160] = P64[Sp + 32];
           I64[Hp - 152] = ds1_s3kg0_info;
           P64[Hp - 136] = _s3kfJ::P64;
           P64[Hp - 128] = P64[Sp + 40];
           _c3kvN::P64 = Hp - 192;
           P64[Hp - 120] = _c3kvN::P64;
           I64[Hp - 112] = sat_s3kgl_info;
           P64[Hp - 96] = _c3kvN::P64;
           _c3kw0::P64 = Hp - 152;
           P64[Hp - 88] = _c3kw0::P64;
           I64[Hp - 80] = I64[Sp + 24];
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _c3kw0::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = I64[Sp + 48];
           I64[Hp - 24] = _s3kfO::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 72;
           R2 = Hp - 112;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3kwV: // global
           Hp = Hp - 200;
           R2 = P64[Sp + 56];
           R1 = _s3kfK::P64;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kwY() //  [R1]
         { info_tbl: [(c3kwY,
                       label: block_c3kwY_info
                       rep:StackRep [False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kwY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kx6; else goto c3kx5;
       c3kx6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kx5: // global
           _s3kfK::P64 = P64[Sp + 40];
           _s3kgn::I64 = I64[Sp + 16];
           if (_s3kgn::I64 <= I64[R1 + 7]) goto c3kxd; else goto c3kxe;
       c3kxd: // global
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = I64[Sp + 24];
           I64[Hp - 24] = _s3kgn::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3kfK::P64;
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3kxe: // global
           Hp = Hp - 56;
           R2 = P64[Sp + 32];
           R1 = _s3kfK::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.$watMost_entry() //  [R2, R3]
         { info_tbl: [(c3kxm,
                       label: GHC.Event.PSQ.$watMost_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kxm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kxq; else goto c3kxp;
       c3kxq: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$watMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kxp: // global
           I64[Hp - 8] = $wgo_s3kfJ_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 6;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.714486874 UTC

[section ""data" . GHC.Event.PSQ.atMost_closure" {
     GHC.Event.PSQ.atMost_closure:
         const GHC.Event.PSQ.atMost_info;
 },
 GHC.Event.PSQ.atMost_entry() //  [R2, R3]
         { info_tbl: [(c3kxy,
                       label: GHC.Event.PSQ.atMost_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kxy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3kxz; else goto c3kxA;
       c3kxz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.atMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kxA: // global
           I64[Sp - 8] = block_c3kxv_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$watMost_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kxv() //  [R1, R2]
         { info_tbl: [(c3kxv,
                       label: block_c3kxv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kxv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3kxD; else goto c3kxC;
       c3kxD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3kxC: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.716380233 UTC

[section ""data" . GHC.Event.PSQ.minView_closure" {
     GHC.Event.PSQ.minView_closure:
         const GHC.Event.PSQ.minView_info;
 },
 sat_s3kgJ_entry() //  [R1]
         { info_tbl: [(c3kxS,
                       label: sat_s3kgJ_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kxS: // global
           _s3kgJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3kxT; else goto c3kxU;
       c3kxU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kxW; else goto c3kxV;
       c3kxW: // global
           HpAlloc = 16;
           goto c3kxT;
       c3kxT: // global
           R1 = _s3kgJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3kxV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kgJ::P64;
           _s3kgF::P64 = P64[_s3kgJ::P64 + 16];
           _s3kgG::P64 = P64[_s3kgJ::P64 + 24];
           _s3kgE::I64 = I64[_s3kgJ::P64 + 32];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kgE::I64;
           R4 = _s3kgG::P64;
           R3 = _s3kgF::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.PSQ.minView_entry() //  [R2]
         { info_tbl: [(c3ky2,
                       label: GHC.Event.PSQ.minView_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ky2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ky3; else goto c3ky4;
       c3ky3: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.minView_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ky4: // global
           I64[Sp - 8] = block_c3kxI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kyn; else goto c3kxJ;
       u3kyn: // global
           call _c3kxI(R1) args: 0, res: 0, upd: 0;
       c3kxJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kxI() //  [R1]
         { info_tbl: [(c3kxI,
                       label: block_c3kxI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kxI: // global
           _c3ky1::P64 = R1 & 7;
           if (_c3ky1::P64 < 3) goto u3kym; else goto c3ky0;
       u3kym: // global
           if (_c3ky1::P64 < 2) goto c3kxY; else goto c3kxZ;
       c3kxY: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3kya; else goto c3ky9;
       c3kya: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ky9: // global
           _s3kgD::P64 = P64[R1 + 7];
           _s3kgF::P64 = P64[R1 + 15];
           _s3kgG::P64 = P64[R1 + 23];
           _s3kgB::I64 = I64[R1 + 31];
           _s3kgC::I64 = I64[R1 + 39];
           _s3kgE::I64 = I64[R1 + 47];
           I64[Hp - 104] = sat_s3kgJ_info;
           P64[Hp - 88] = _s3kgF::P64;
           P64[Hp - 80] = _s3kgG::P64;
           I64[Hp - 72] = _s3kgE::I64;
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3kgD::P64;
           I64[Hp - 48] = _s3kgB::I64;
           I64[Hp - 40] = _s3kgC::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kxZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3kyi; else goto c3kyh;
       c3kyi: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kyh: // global
           _s3kgN::P64 = P64[R1 + 6];
           _s3kgL::I64 = I64[R1 + 14];
           _s3kgM::I64 = I64[R1 + 22];
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3kgN::P64;
           I64[Hp - 48] = _s3kgL::I64;
           I64[Hp - 40] = _s3kgM::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3ky0: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.718932457 UTC

[section ""data" . GHC.Event.PSQ.deleteMin_closure" {
     GHC.Event.PSQ.deleteMin_closure:
         const GHC.Event.PSQ.deleteMin_info;
 },
 GHC.Event.PSQ.deleteMin_entry() //  [R2]
         { info_tbl: [(c3kyA,
                       label: GHC.Event.PSQ.deleteMin_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kyA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3kyB; else goto c3kyC;
       c3kyB: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.deleteMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kyC: // global
           I64[Sp - 8] = block_c3kys_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kyQ; else goto c3kyt;
       u3kyQ: // global
           call _c3kys(R1) args: 0, res: 0, upd: 0;
       c3kyt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kys() //  [R1]
         { info_tbl: [(c3kys,
                       label: block_c3kys_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kys: // global
           _c3kyz::P64 = R1 & 7;
           if (_c3kyz::P64 >= 3) goto c3kyy; else goto u3kyP;
       u3kyP: // global
           if (_c3kyz::P64 >= 2) goto c3kyy; else goto c3kyw;
       c3kyy: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kyw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kyI; else goto c3kyH;
       c3kyI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kyH: // global
           _s3kgW::P64 = P64[R1 + 15];
           _s3kgX::P64 = P64[R1 + 23];
           _s3kgV::I64 = I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kgV::I64;
           R4 = _s3kgX::P64;
           R3 = _s3kgW::P64;
           R2 = Hp - 7;
           Sp = Sp + 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.720220543 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule4_bytes" {
     GHC.Event.PSQ.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.720856882 UTC

[section ""data" . GHC.Event.PSQ.$trModule3_closure" {
     GHC.Event.PSQ.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.721711026 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule2_bytes" {
     GHC.Event.PSQ.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,80,83,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.722295886 UTC

[section ""data" . GHC.Event.PSQ.$trModule1_closure" {
     GHC.Event.PSQ.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.722883532 UTC

[section ""data" . GHC.Event.PSQ.$trModule_closure" {
     GHC.Event.PSQ.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.PSQ.$trModule3_closure+1;
         const GHC.Event.PSQ.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.723577388 UTC

[section ""data" . $krep_r3kcT_closure" {
     $krep_r3kcT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.724220323 UTC

[section ""data" . $krep1_r3kcU_closure" {
     $krep1_r3kcU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.72676877 UTC

[section ""data" . $krep2_r3kcV_closure" {
     $krep2_r3kcV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.727369748 UTC

[section ""data" . $krep3_r3kcW_closure" {
     $krep3_r3kcW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.727962706 UTC

[section ""cstring" . GHC.Event.PSQ.$tcElem2_bytes" {
     GHC.Event.PSQ.$tcElem2_bytes:
         I8[] [69,108,101,109]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.728549595 UTC

[section ""data" . GHC.Event.PSQ.$tcElem1_closure" {
     GHC.Event.PSQ.$tcElem1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcElem2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.729140596 UTC

[section ""data" . GHC.Event.PSQ.$tcElem_closure" {
     GHC.Event.PSQ.$tcElem_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcElem1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15044414420558834066;
         const 12198171511156299872;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.729885743 UTC

[section ""data" . $krep4_r3kcX_closure" {
     $krep4_r3kcX_closure:
         const :_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.730500209 UTC

[section ""data" . $krep5_r3kcY_closure" {
     $krep5_r3kcY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcElem_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.731087562 UTC

[section ""data" . $krep6_r3kcZ_closure" {
     $krep6_r3kcZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep5_r3kcY_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.73164629 UTC

[section ""data" . $krep7_r3kd0_closure" {
     $krep7_r3kd0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep6_r3kcZ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.732239731 UTC

[section ""data" . GHC.Event.PSQ.$tc'E1_closure" {
     GHC.Event.PSQ.$tc'E1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep7_r3kd0_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.732807197 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'E3_bytes" {
     GHC.Event.PSQ.$tc'E3_bytes:
         I8[] [39,69]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.733424385 UTC

[section ""data" . GHC.Event.PSQ.$tc'E2_closure" {
     GHC.Event.PSQ.$tc'E2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'E3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.734008503 UTC

[section ""data" . GHC.Event.PSQ.$tc'E_closure" {
     GHC.Event.PSQ.$tc'E_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'E2_closure+1;
         const GHC.Event.PSQ.$tc'E1_closure+4;
         const 11813029942800942247;
         const 17450377919573390885;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.734598808 UTC

[section ""cstring" . GHC.Event.PSQ.$tcIntPSQ2_bytes" {
     GHC.Event.PSQ.$tcIntPSQ2_bytes:
         I8[] [73,110,116,80,83,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.735188436 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ1_closure" {
     GHC.Event.PSQ.$tcIntPSQ1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcIntPSQ2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.735765976 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ_closure" {
     GHC.Event.PSQ.$tcIntPSQ_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcIntPSQ1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15246681906271547396;
         const 11594704564387731780;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.736384933 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil1_closure" {
     GHC.Event.PSQ.$tc'Nil1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcIntPSQ_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.73701391 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Nil3_bytes" {
     GHC.Event.PSQ.$tc'Nil3_bytes:
         I8[] [39,78,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.7377454 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil2_closure" {
     GHC.Event.PSQ.$tc'Nil2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Nil3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.738302588 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil_closure" {
     GHC.Event.PSQ.$tc'Nil_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Nil2_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 9632868263130136899;
         const 16639248836205398404;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.738923044 UTC

[section ""data" . $krep8_r3kd1_closure" {
     $krep8_r3kd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.739496301 UTC

[section ""data" . $krep9_r3kd2_closure" {
     $krep9_r3kd2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep8_r3kd1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.740042229 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip1_closure" {
     GHC.Event.PSQ.$tc'Tip1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep9_r3kd2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.740611712 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Tip3_bytes" {
     GHC.Event.PSQ.$tc'Tip3_bytes:
         I8[] [39,84,105,112]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.741144287 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip2_closure" {
     GHC.Event.PSQ.$tc'Tip2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Tip3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.741787154 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip_closure" {
     GHC.Event.PSQ.$tc'Tip_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Tip2_closure+1;
         const GHC.Event.PSQ.$tc'Tip1_closure+4;
         const 4235936270888684142;
         const 17098834253377543597;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.742380921 UTC

[section ""data" . $krep10_r3kd3_closure" {
     $krep10_r3kd3_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.742979304 UTC

[section ""data" . $krep11_r3kd4_closure" {
     $krep11_r3kd4_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const $krep10_r3kd3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.743609654 UTC

[section ""data" . $krep12_r3kd5_closure" {
     $krep12_r3kd5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3kcT_closure+1;
         const $krep11_r3kd4_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.744187934 UTC

[section ""data" . $krep13_r3kd6_closure" {
     $krep13_r3kd6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep12_r3kd5_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.744757653 UTC

[section ""data" . $krep14_r3kd7_closure" {
     $krep14_r3kd7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep13_r3kd6_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.747465884 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin1_closure" {
     GHC.Event.PSQ.$tc'Bin1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep14_r3kd7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.748045522 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Bin3_bytes" {
     GHC.Event.PSQ.$tc'Bin3_bytes:
         I8[] [39,66,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.748864375 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin2_closure" {
     GHC.Event.PSQ.$tc'Bin2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Bin3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.749486077 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin_closure" {
     GHC.Event.PSQ.$tc'Bin_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Bin2_closure+1;
         const GHC.Event.PSQ.$tc'Bin1_closure+4;
         const 8835322380894053498;
         const 4329944662539077627;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.751861548 UTC

[section ""data" . GHC.Event.PSQ.lookup_closure" {
     GHC.Event.PSQ.lookup_closure:
         const GHC.Event.PSQ.lookup_info;
 },
 GHC.Event.PSQ.lookup_entry() //  [R2, R3]
         { info_tbl: [(c3kyZ,
                       label: GHC.Event.PSQ.lookup_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kyZ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3kz0; else goto c3kz1;
       c3kz0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.lookup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kz1: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3kzp() args: 0, res: 0, upd: 0;
     }
 },
 _c3kzp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kzp: // global
           I64[Sp - 8] = block_c3kzr_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kAV; else goto c3kzt;
       u3kAV: // global
           call _c3kzr(R1) args: 0, res: 0, upd: 0;
       c3kzt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kzr() //  [R1]
         { info_tbl: [(c3kzr,
                       label: block_c3kzr_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kzr: // global
           _c3kAM::P64 = R1 & 7;
           if (_c3kAM::P64 < 3) goto u3kAN; else goto c3kAL;
       u3kAN: // global
           _s3kh2::P64 = P64[Sp + 8];
           if (_c3kAM::P64 < 2) goto c3kzA; else goto c3kAH;
       c3kzA: // global
           I64[Sp - 40] = block_c3kzx_info;
           _s3khi::P64 = P64[R1 + 7];
           _s3khk::P64 = P64[R1 + 15];
           _s3khl::P64 = P64[R1 + 23];
           _s3khg::I64 = I64[R1 + 31];
           _s3khh::I64 = I64[R1 + 39];
           _s3khj::I64 = I64[R1 + 47];
           R1 = _s3kh2::P64;
           P64[Sp - 32] = _s3khi::P64;
           I64[Sp - 24] = _s3khj::I64;
           P64[Sp - 16] = _s3khk::P64;
           P64[Sp - 8] = _s3khl::P64;
           I64[Sp] = _s3khh::I64;
           I64[Sp + 16] = _s3khg::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3kAW; else goto c3kzB;
       u3kAW: // global
           call _c3kzx(R1) args: 0, res: 0, upd: 0;
       c3kzB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kAH: // global
           I64[Sp - 8] = block_c3kz5_info;
           _s3kh7::P64 = P64[R1 + 6];
           _s3kh6::I64 = I64[R1 + 22];
           _s3kh5::I64 = I64[R1 + 14];
           R1 = _s3kh2::P64;
           P64[Sp] = _s3kh7::P64;
           I64[Sp + 8] = _s3kh6::I64;
           I64[Sp + 16] = _s3kh5::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kAX; else goto c3kz7;
       u3kAX: // global
           call _c3kz5(R1) args: 0, res: 0, upd: 0;
       c3kz7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kAL: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kzx() //  [R1]
         { info_tbl: [(c3kzx,
                       label: block_c3kzx_info
                       rep:StackRep [False, True, False, False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kzx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kzH; else goto c3kzG;
       c3kzH: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kzG: // global
           _s3khg::I64 = I64[Sp + 56];
           _s3khn::I64 = I64[R1 + 7];
           _s3kho::I64 = I64[Sp + 16];
           _s3khp::I64 = (_s3kho::I64 + -1) ^ _s3kho::I64 ^ 18446744073709551615;
           if (_s3khn::I64 & _s3khp::I64 == _s3khg::I64 & _s3khp::I64) goto c3kAC; else goto u3kAP;
       c3kAC: // global
           if (_s3khn::I64 == _s3khg::I64) goto c3kAA; else goto c3kAv;
       c3kAA: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 40];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kAv: // global
           Hp = Hp - 56;
           if (_s3khn::I64 & _s3kho::I64 == 0) goto c3kAq; else goto c3kAk;
       c3kAq: // global
           P64[Sp + 56] = P64[Sp + 24];
           Sp = Sp + 48;
           goto u3kB0;
       c3kAk: // global
           P64[Sp + 56] = P64[Sp + 32];
           Sp = Sp + 48;
           goto u3kB0;
       u3kB0: // global
           call _c3kzp() args: 0, res: 0, upd: 0;
       u3kAP: // global
           Sp = Sp + 64;
           call _c3kzh() args: 0, res: 0, upd: 0;
     }
 },
 _c3kz5() //  [R1]
         { info_tbl: [(c3kz5,
                       label: block_c3kz5_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kz5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kzd; else goto c3kzc;
       c3kzd: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kzc: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3kzn; else goto u3kAS;
       c3kzn: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3kAS: // global
           Sp = Sp + 32;
           call _c3kzh() args: 0, res: 0, upd: 0;
     }
 },
 _c3kzh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kzh: // global
           Hp = Hp - 56;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.758925634 UTC

[section ""data" . GHC.Event.PSQ.delete_closure" {
     GHC.Event.PSQ.delete_closure:
         const GHC.Event.PSQ.delete_info;
 },
 go1_s3khH_entry() //  [R1, R2]
         { info_tbl: [(c3kBi,
                       label: go1_s3khH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kBi: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3kBj; else goto c3kBk;
       c3kBj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kBk: // global
           I64[Sp - 24] = block_c3kBa_info;
           _s3khH::P64 = R1;
           _s3khF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3khF::P64;
           P64[Sp - 8] = _s3khH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3kDT; else goto c3kBb;
       u3kDT: // global
           call _c3kBa(R1) args: 0, res: 0, upd: 0;
       c3kBb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kBa() //  [R1]
         { info_tbl: [(c3kBa,
                       label: block_c3kBa_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kBa: // global
           _c3kBh::P64 = R1 & 7;
           if (_c3kBh::P64 < 3) goto u3kDN; else goto u3kDO;
       u3kDN: // global
           _s3khF::P64 = P64[Sp + 8];
           if (_c3kBh::P64 < 2) goto c3kBe; else goto c3kBf;
       c3kBe: // global
           I64[Sp - 48] = block_c3kBn_info;
           _s3khJ::P64 = R1;
           _s3khM::P64 = P64[R1 + 7];
           _s3khO::P64 = P64[R1 + 15];
           _s3khP::P64 = P64[R1 + 23];
           _s3khK::I64 = I64[R1 + 31];
           _s3khL::I64 = I64[R1 + 39];
           _s3khN::I64 = I64[R1 + 47];
           R1 = _s3khF::P64;
           I64[Sp - 40] = _s3khL::I64;
           P64[Sp - 32] = _s3khM::P64;
           I64[Sp - 24] = _s3khN::I64;
           P64[Sp - 16] = _s3khO::P64;
           P64[Sp - 8] = _s3khP::P64;
           I64[Sp] = _s3khK::I64;
           P64[Sp + 8] = _s3khJ::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3kDQ; else goto c3kBp;
       u3kDQ: // global
           call _c3kBn(R1) args: 0, res: 0, upd: 0;
       c3kBp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kBf: // global
           I64[Sp] = block_c3kDu_info;
           _s3khJ::P64 = R1;
           _s3ki9::I64 = I64[R1 + 14];
           R1 = _s3khF::P64;
           I64[Sp + 8] = _s3ki9::I64;
           P64[Sp + 16] = _s3khJ::P64;
           if (R1 & 7 != 0) goto u3kDR; else goto c3kDw;
       u3kDR: // global
           call _c3kDu(R1) args: 0, res: 0, upd: 0;
       c3kDw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3kDO: // global
           Sp = Sp + 24;
           call _c3kBg() args: 0, res: 0, upd: 0;
     }
 },
 _c3kBn() //  [R1]
         { info_tbl: [(c3kBn,
                       label: block_c3kBn_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kBn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kBv; else goto c3kBu;
       c3kBv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kBu: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khN::I64 = I64[Sp + 24];
           _s3khR::I64 = I64[R1 + 7];
           _s3khT::I64 = (_s3khN::I64 + -1) ^ _s3khN::I64 ^ 18446744073709551615;
           if (_s3khR::I64 & _s3khT::I64 == _s3khK::I64 & _s3khT::I64) goto c3kDq; else goto c3kDr;
       c3kDq: // global
           _s3khO::P64 = P64[Sp + 32];
           _s3khP::P64 = P64[Sp + 40];
           if (_s3khR::I64 == _s3khK::I64) goto c3kDo; else goto c3kDl;
       c3kDo: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3khN::I64;
           R4 = _s3khP::P64;
           R3 = _s3khO::P64;
           R2 = Hp - 7;
           Sp = Sp + 72;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3kDl: // global
           Hp = Hp - 16;
           _s3khH::P64 = P64[Sp + 64];
           if (_s3khR::I64 & _s3khN::I64 == 0) goto c3kCN; else goto c3kCb;
       c3kCN: // global
           I64[Sp] = block_c3kCM_info;
           R2 = _s3khO::P64;
           R1 = _s3khH::P64;
           call go1_s3khH_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3kCb: // global
           I64[Sp] = block_c3kC9_info;
           R2 = _s3khP::P64;
           R1 = _s3khH::P64;
           call go1_s3khH_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3kDr: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 72;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kCM() //  [R1]
         { info_tbl: [(c3kCM,
                       label: block_c3kCM_info
                       rep:StackRep [True, False, True, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kCM: // global
           _s3khP::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3kD2; else goto c3kCU;
       c3kD2: // global
           I64[Sp] = block_c3kD0_info;
           R1 = _s3khP::P64;
           if (R1 & 7 != 0) goto u3kDV; else goto c3kD3;
       u3kDV: // global
           call _c3kD0(R1) args: 0, res: 0, upd: 0;
       c3kD3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kCU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kCX; else goto c3kCW;
       c3kCX: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kCW: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3khP::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kD0() //  [R1]
         { info_tbl: [(c3kD0,
                       label: block_c3kD0_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kD0: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khL::I64 = I64[Sp + 8];
           _s3khM::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3kDg; else goto c3kD9;
       c3kDg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kDj; else goto c3kDi;
       c3kDj: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kDi: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3khM::P64;
           I64[Hp - 8] = _s3khK::I64;
           I64[Hp] = _s3khL::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kD9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kDc; else goto c3kDb;
       c3kDc: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kDb: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3khM::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3khK::I64;
           I64[Hp - 8] = _s3khL::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kC9() //  [R1]
         { info_tbl: [(c3kC9,
                       label: block_c3kC9_info
                       rep:StackRep [True, False, True, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kC9: // global
           _s3khO::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3kCq; else goto c3kCi;
       c3kCq: // global
           I64[Sp] = block_c3kCo_info;
           R1 = _s3khO::P64;
           if (R1 & 7 != 0) goto u3kDU; else goto c3kCr;
       u3kDU: // global
           call _c3kCo(R1) args: 0, res: 0, upd: 0;
       c3kCr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kCi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kCl; else goto c3kCk;
       c3kCl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kCk: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3khO::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kCo() //  [R1]
         { info_tbl: [(c3kCo,
                       label: block_c3kCo_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kCo: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khL::I64 = I64[Sp + 8];
           _s3khM::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3kCE; else goto c3kCx;
       c3kCE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kCH; else goto c3kCG;
       c3kCH: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kCG: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3khM::P64;
           I64[Hp - 8] = _s3khK::I64;
           I64[Hp] = _s3khL::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kCx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kCA; else goto c3kCz;
       c3kCA: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kCz: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3khM::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3khK::I64;
           I64[Hp - 8] = _s3khL::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kDu() //  [R1]
         { info_tbl: [(c3kDu,
                       label: block_c3kDu_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kDu: // global
           if (I64[R1 + 7] == I64[Sp + 8]) goto u3kDP; else goto c3kDE;
       u3kDP: // global
           Sp = Sp + 24;
           call _c3kBg() args: 0, res: 0, upd: 0;
       c3kDE: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kBg() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kBg: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.delete_entry() //  [R2, R3]
         { info_tbl: [(c3kDX,
                       label: GHC.Event.PSQ.delete_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kDX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kE1; else goto c3kE0;
       c3kE1: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.delete_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kE0: // global
           I64[Hp - 8] = go1_s3khH_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go1_s3khH_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.767436561 UTC

[section ""data" . GHC.Event.PSQ.deleteView_closure" {
     GHC.Event.PSQ.deleteView_closure:
         const GHC.Event.PSQ.deleteView_info;
 },
 delFrom_s3kih_entry() //  [R1, R2]
         { info_tbl: [(c3kEj,
                       label: delFrom_s3kih_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kEj: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3kEk; else goto c3kEl;
       c3kEk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kEl: // global
           I64[Sp - 24] = block_c3kEb_info;
           _s3kih::P64 = R1;
           _s3kif::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3kif::P64;
           P64[Sp - 8] = _s3kih::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3kHg; else goto c3kEc;
       u3kHg: // global
           call _c3kEb(R1) args: 0, res: 0, upd: 0;
       c3kEc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kEb() //  [R1]
         { info_tbl: [(c3kEb,
                       label: block_c3kEb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kEb: // global
           _c3kEi::P64 = R1 & 7;
           if (_c3kEi::P64 < 3) goto u3kHd; else goto c3kEh;
       u3kHd: // global
           _s3kif::P64 = P64[Sp + 8];
           if (_c3kEi::P64 < 2) goto c3kEf; else goto c3kEg;
       c3kEf: // global
           I64[Sp - 48] = block_c3kEo_info;
           _s3kij::P64 = R1;
           _s3kim::P64 = P64[R1 + 7];
           _s3kio::P64 = P64[R1 + 15];
           _s3kip::P64 = P64[R1 + 23];
           _s3kik::I64 = I64[R1 + 31];
           _s3kil::I64 = I64[R1 + 39];
           _s3kin::I64 = I64[R1 + 47];
           R1 = _s3kif::P64;
           I64[Sp - 40] = _s3kil::I64;
           P64[Sp - 32] = _s3kim::P64;
           I64[Sp - 24] = _s3kin::I64;
           P64[Sp - 16] = _s3kio::P64;
           P64[Sp - 8] = _s3kip::P64;
           I64[Sp] = _s3kik::I64;
           P64[Sp + 8] = _s3kij::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3kHe; else goto c3kEq;
       u3kHe: // global
           call _c3kEo(R1) args: 0, res: 0, upd: 0;
       c3kEq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kEg: // global
           I64[Sp - 16] = block_c3kGN_info;
           _s3kij::P64 = R1;
           _s3kj1::P64 = P64[R1 + 6];
           _s3kiZ::I64 = I64[R1 + 14];
           _s3kj0::I64 = I64[R1 + 22];
           R1 = _s3kif::P64;
           P64[Sp - 8] = _s3kj1::P64;
           I64[Sp] = _s3kj0::I64;
           I64[Sp + 8] = _s3kiZ::I64;
           P64[Sp + 16] = _s3kij::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3kHf; else goto c3kGP;
       u3kHf: // global
           call _c3kGN(R1) args: 0, res: 0, upd: 0;
       c3kGP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kEh: // global
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kEo() //  [R1]
         { info_tbl: [(c3kEo,
                       label: block_c3kEo_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kEo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kEw; else goto c3kEv;
       c3kEw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kEv: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kin::I64 = I64[Sp + 24];
           _s3kir::I64 = I64[R1 + 7];
           _s3kit::I64 = (_s3kin::I64 + -1) ^ _s3kin::I64 ^ 18446744073709551615;
           if (_s3kir::I64 & _s3kit::I64 == _s3kik::I64 & _s3kit::I64) goto c3kGJ; else goto c3kGK;
       c3kGJ: // global
           _s3kio::P64 = P64[Sp + 32];
           _s3kip::P64 = P64[Sp + 40];
           if (_s3kir::I64 == _s3kik::I64) goto c3kGE; else goto c3kGu;
       c3kGE: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kin::I64;
           I64[Sp] = block_c3kGx_info;
           R4 = _s3kip::P64;
           R3 = _s3kio::P64;
           R2 = Hp - 7;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c3kGu: // global
           Hp = Hp - 16;
           _s3kih::P64 = P64[Sp + 64];
           if (_s3kir::I64 & _s3kin::I64 == 0) goto c3kFU; else goto c3kFe;
       c3kFU: // global
           I64[Sp] = block_c3kFR_info;
           R2 = _s3kio::P64;
           R1 = _s3kih::P64;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3kFe: // global
           I64[Sp] = block_c3kFa_info;
           R2 = _s3kip::P64;
           R1 = _s3kih::P64;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3kGK: // global
           Hp = Hp - 16;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 56];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kGx() //  [R1]
         { info_tbl: [(c3kGx,
                       label: block_c3kGx_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kGx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kGH; else goto c3kGG;
       c3kGH: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kGG: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = R1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kFR() //  [R1, R2]
         { info_tbl: [(c3kFR,
                       label: block_c3kFR_info
                       rep:StackRep [True, False, True, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kFR: // global
           I64[Sp] = block_c3kFT_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3kHj; else goto c3kFX;
       u3kHj: // global
           call _c3kFT(R1) args: 0, res: 0, upd: 0;
       c3kFX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kFT() //  [R1]
         { info_tbl: [(c3kFT,
                       label: block_c3kFT_info
                       rep:StackRep [True, False, True, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kFT: // global
           _s3kip::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3kGb; else goto c3kG3;
       c3kGb: // global
           I64[Sp] = block_c3kG9_info;
           R1 = _s3kip::P64;
           if (R1 & 7 != 0) goto u3kHk; else goto c3kGc;
       u3kHk: // global
           call _c3kG9(R1) args: 0, res: 0, upd: 0;
       c3kGc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kG3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kG6; else goto c3kG5;
       c3kG6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kG5: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3kip::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kG9() //  [R1]
         { info_tbl: [(c3kG9,
                       label: block_c3kG9_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kG9: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kil::I64 = I64[Sp + 8];
           _s3kim::P64 = P64[Sp + 16];
           _s3kiO::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3kGp; else goto c3kGi;
       c3kGp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kGs; else goto c3kGr;
       c3kGs: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kGr: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3kim::P64;
           I64[Hp - 8] = _s3kik::I64;
           I64[Hp] = _s3kil::I64;
           R2 = _s3kiO::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3kGi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kGl; else goto c3kGk;
       c3kGl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kGk: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3kim::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3kik::I64;
           I64[Hp - 8] = _s3kil::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3kiO::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kFa() //  [R1, R2]
         { info_tbl: [(c3kFa,
                       label: block_c3kFa_info
                       rep:StackRep [True, False, True, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kFa: // global
           I64[Sp] = block_c3kFc_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3kHh; else goto c3kFh;
       u3kHh: // global
           call _c3kFc(R1) args: 0, res: 0, upd: 0;
       c3kFh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kFc() //  [R1]
         { info_tbl: [(c3kFc,
                       label: block_c3kFc_info
                       rep:StackRep [True, False, True, False, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kFc: // global
           _s3kio::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3kFv; else goto c3kFn;
       c3kFv: // global
           I64[Sp] = block_c3kFt_info;
           R1 = _s3kio::P64;
           if (R1 & 7 != 0) goto u3kHi; else goto c3kFw;
       u3kHi: // global
           call _c3kFt(R1) args: 0, res: 0, upd: 0;
       c3kFw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kFn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kFq; else goto c3kFp;
       c3kFq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kFp: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3kio::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kFt() //  [R1]
         { info_tbl: [(c3kFt,
                       label: block_c3kFt_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kFt: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kil::I64 = I64[Sp + 8];
           _s3kim::P64 = P64[Sp + 16];
           _s3kiG::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3kFJ; else goto c3kFC;
       c3kFJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kFM; else goto c3kFL;
       c3kFM: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kFL: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3kim::P64;
           I64[Hp - 8] = _s3kik::I64;
           I64[Hp] = _s3kil::I64;
           R2 = _s3kiG::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3kFC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kFF; else goto c3kFE;
       c3kFF: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kFE: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3kim::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3kik::I64;
           I64[Hp - 8] = _s3kil::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3kiG::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kGN() //  [R1]
         { info_tbl: [(c3kGN,
                       label: block_c3kGN_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kGN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kGV; else goto c3kGU;
       c3kGV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kGU: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3kH5; else goto c3kGZ;
       c3kH5: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3kGZ: // global
           Hp = Hp - 56;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.deleteView_entry() //  [R2, R3]
         { info_tbl: [(c3kHu,
                       label: GHC.Event.PSQ.deleteView_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kHu: // global
           _s3kig::P64 = R3;
           _s3kif::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3kHv; else goto c3kHw;
       c3kHw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kHy; else goto c3kHx;
       c3kHy: // global
           HpAlloc = 16;
           goto c3kHv;
       c3kHv: // global
           R3 = _s3kig::P64;
           R2 = _s3kif::P64;
           R1 = GHC.Event.PSQ.deleteView_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kHx: // global
           I64[Hp - 8] = delFrom_s3kih_info;
           P64[Hp] = _s3kif::P64;
           I64[Sp - 8] = block_c3kHl_info;
           R2 = _s3kig::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kHl() //  [R1, R2]
         { info_tbl: [(c3kHl,
                       label: block_c3kHl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kHl: // global
           I64[Sp - 8] = block_c3kHn_info;
           _s3kj9::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3kj9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kHQ; else goto c3kHo;
       u3kHQ: // global
           call _c3kHn(R1) args: 0, res: 0, upd: 0;
       c3kHo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kHn() //  [R1]
         { info_tbl: [(c3kHn,
                       label: block_c3kHn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kHn: // global
           if (R1 & 7 == 1) goto c3kHr; else goto c3kHs;
       c3kHr: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kHs: // global
           I64[Sp] = block_c3kHF_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3kHR; else goto c3kHG;
       u3kHR: // global
           call _c3kHF(R1) args: 0, res: 0, upd: 0;
       c3kHG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kHF() //  [R1]
         { info_tbl: [(c3kHF,
                       label: block_c3kHF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kHF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3kHP; else goto c3kHO;
       c3kHP: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kHO: // global
           _s3kje::P64 = P64[R1 + 7];
           _s3kjf::P64 = P64[R1 + 15];
           I64[Hp - 40] = (,,)_con_info;
           P64[Hp - 32] = _s3kje::P64;
           P64[Hp - 24] = _s3kjf::P64;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.776539178 UTC

[section ""data" . GHC.Event.PSQ.$wsize_closure" {
     GHC.Event.PSQ.$wsize_closure:
         const GHC.Event.PSQ.$wsize_info;
 },
 GHC.Event.PSQ.$wsize_entry() //  [R2]
         { info_tbl: [(c3kI4,
                       label: GHC.Event.PSQ.$wsize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kI4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3kI5; else goto c3kI6;
       c3kI5: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.$wsize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kI6: // global
           I64[Sp - 8] = block_c3kHW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kIv; else goto c3kHX;
       u3kIv: // global
           call _c3kHW(R1) args: 0, res: 0, upd: 0;
       c3kHX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kHW() //  [R1]
         { info_tbl: [(c3kHW,
                       label: block_c3kHW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kHW: // global
           _c3kI3::P64 = R1 & 7;
           if (_c3kI3::P64 < 3) goto u3kIu; else goto c3kI2;
       u3kIu: // global
           if (_c3kI3::P64 < 2) goto c3kI0; else goto c3kI1;
       c3kI0: // global
           I64[Sp - 8] = block_c3kI9_info;
           R2 = P64[R1 + 15];
           P64[Sp] = P64[R1 + 23];
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
       c3kI1: // global
           R1 = 1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kI2: // global
           R1 = 0;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kI9() //  [R1]
         { info_tbl: [(c3kI9,
                       label: block_c3kI9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kI9: // global
           I64[Sp] = block_c3kId_info;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = R1;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kId() //  [R1]
         { info_tbl: [(c3kId,
                       label: block_c3kId_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kId: // global
           R1 = I64[Sp + 8] + (R1 + 1);
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.778420039 UTC

[section ""data" . GHC.Event.PSQ.size_closure" {
     GHC.Event.PSQ.size_closure:
         const GHC.Event.PSQ.size_info;
 },
 GHC.Event.PSQ.size_entry() //  [R2]
         { info_tbl: [(c3kIC,
                       label: GHC.Event.PSQ.size_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kIC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3kIG; else goto c3kIH;
       c3kIG: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.size_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kIH: // global
           I64[Sp - 8] = block_c3kIA_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kIA() //  [R1]
         { info_tbl: [(c3kIA,
                       label: block_c3kIA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kIA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kIK; else goto c3kIJ;
       c3kIK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3kIJ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.784148622 UTC

[section ""data" . GHC.Event.PSQ.$wunsafeInsertNew_closure" {
     GHC.Event.PSQ.$wunsafeInsertNew_closure:
         const GHC.Event.PSQ.$wunsafeInsertNew_info;
 },
 GHC.Event.PSQ.$wunsafeInsertNew_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kIM: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.$wunsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3kIY,
                       label: GHC.Event.PSQ.$wunsafeInsertNew_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [True, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kIY: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3kIZ; else goto c3kJ0;
       c3kIZ: // global
           R1 = GHC.Event.PSQ.$wunsafeInsertNew_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3kJ0: // global
           I64[Sp - 32] = block_c3kIQ_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3kQu; else goto c3kIR;
       u3kQu: // global
           call _c3kIQ(R1) args: 0, res: 0, upd: 0;
       c3kIR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kIQ() //  [R1]
         { info_tbl: [(c3kIQ,
                       label: block_c3kIQ_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kIQ: // global
           _s3kjz::P64 = P64[Sp + 24];
           _c3kIX::P64 = R1 & 7;
           if (_c3kIX::P64 < 3) goto u3kQq; else goto c3kIW;
       u3kQq: // global
           _s3kjx::I64 = I64[Sp + 8];
           _s3kjy::I64 = I64[Sp + 16];
           if (_c3kIX::P64 < 2) goto c3kIU; else goto c3kIV;
       c3kIU: // global
           _s3kjE::P64 = P64[R1 + 7];
           _s3kjG::P64 = P64[R1 + 15];
           _s3kjH::P64 = P64[R1 + 23];
           _s3kjC::I64 = I64[R1 + 31];
           _s3kjD::I64 = I64[R1 + 39];
           _s3kjF::I64 = I64[R1 + 47];
           _s3kjJ::I64 = (_s3kjF::I64 + -1) ^ _s3kjF::I64 ^ 18446744073709551615;
           if (_s3kjx::I64 & _s3kjJ::I64 == _s3kjC::I64 & _s3kjJ::I64) goto c3kLb; else goto c3kNQ;
       c3kLb: // global
           if (_s3kjy::I64 == _s3kjD::I64) goto c3kL9; else goto c3kL2;
       c3kL9: // global
           _s3kjI::I64 = _s3kjF::I64;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kjC::I64)) goto s3kjR; else goto s3kjW;
       c3kL2: // global
           _s3kjI::I64 = _s3kjF::I64;
           if (_s3kjy::I64 > _s3kjD::I64) goto s3kjR; else goto s3kjW;
       s3kjR: // global
           if (_s3kjx::I64 & _s3kjI::I64 == 0) goto c3kK4; else goto c3kJQ;
       c3kK4: // global
           I64[Sp - 16] = block_c3kJZ_info;
           R5 = _s3kjG::P64;
           R4 = _s3kjz::P64;
           R3 = _s3kjy::I64;
           R2 = _s3kjx::I64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjF::I64;
           P64[Sp + 8] = _s3kjE::P64;
           I64[Sp + 16] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       c3kJQ: // global
           I64[Sp - 16] = block_c3kJK_info;
           R5 = _s3kjH::P64;
           R4 = _s3kjz::P64;
           R3 = _s3kjy::I64;
           R2 = _s3kjx::I64;
           P64[Sp - 8] = _s3kjG::P64;
           I64[Sp] = _s3kjF::I64;
           P64[Sp + 8] = _s3kjE::P64;
           I64[Sp + 16] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       s3kjW: // global
           if (_s3kjC::I64 & _s3kjI::I64 == 0) goto c3kKN; else goto c3kKw;
       c3kKN: // global
           I64[Sp - 40] = block_c3kKG_info;
           R1 = _s3kjz::P64;
           P64[Sp - 32] = _s3kjE::P64;
           I64[Sp - 24] = _s3kjF::I64;
           P64[Sp - 16] = _s3kjG::P64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3kKw: // global
           I64[Sp - 40] = block_c3kKo_info;
           R1 = _s3kjz::P64;
           P64[Sp - 32] = _s3kjE::P64;
           I64[Sp - 24] = _s3kjF::I64;
           P64[Sp - 16] = _s3kjG::P64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3kNQ: // global
           if (_s3kjy::I64 == _s3kjD::I64) goto c3kNP; else goto c3kNI;
       c3kNP: // global
           _s3kjB::P64 = R1;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kjC::I64)) goto s3kk6; else goto s3kkq;
       c3kNI: // global
           _s3kjB::P64 = R1;
           if (_s3kjy::I64 > _s3kjD::I64) goto s3kk6; else goto s3kkq;
       s3kk6: // global
           (_c3kLs::I64) = call MO_Clz W64(_s3kjC::I64 ^ _s3kjx::I64);
           _s3kk7::I64 = 1 << 63 - _c3kLs::I64;
           _s3kkh::I64 = _s3kk7::I64 & _s3kjx::I64;
           if (_s3kkh::I64 != 0) goto u3kQr; else goto c3kMp;
       u3kQr: // global
           I64[Sp - 56] = _s3kjD::I64;
           P64[Sp - 48] = _s3kjE::P64;
           I64[Sp - 40] = _s3kjF::I64;
           P64[Sp - 32] = _s3kjG::P64;
           P64[Sp - 24] = _s3kjH::P64;
           I64[Sp - 16] = _s3kk7::I64;
           I64[Sp - 8] = _s3kkh::I64;
           I64[Sp] = _s3kjC::I64;
           Sp = Sp - 56;
           call _c3kLS() args: 0, res: 0, upd: 0;
       c3kMp: // global
           I64[Sp - 48] = block_c3kMg_info;
           R1 = _s3kjz::P64;
           P64[Sp - 40] = _s3kjE::P64;
           I64[Sp - 32] = _s3kjF::I64;
           P64[Sp - 24] = _s3kjG::P64;
           P64[Sp - 16] = _s3kjH::P64;
           I64[Sp - 8] = _s3kk7::I64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3kkq: // global
           (_c3kMM::I64) = call MO_Clz W64(_s3kjx::I64 ^ _s3kjC::I64);
           _s3kkr::I64 = 1 << 63 - _c3kMM::I64;
           if (_s3kkr::I64 & _s3kjC::I64 == 0) goto c3kNu; else goto c3kNi;
       c3kNu: // global
           I64[Sp - 8] = block_c3kNr_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kkr::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3kNi: // global
           I64[Sp - 8] = block_c3kNe_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kkr::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3kIV: // global
           _s3kkJ::P64 = P64[R1 + 6];
           _s3kkH::I64 = I64[R1 + 14];
           _s3kkI::I64 = I64[R1 + 22];
           if (_s3kjy::I64 == _s3kkI::I64) goto c3kQg; else goto c3kQ9;
       c3kQg: // global
           _s3kjB::P64 = R1;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kkH::I64)) goto s3kkK; else goto s3kl0;
       c3kQ9: // global
           _s3kjB::P64 = R1;
           if (_s3kjy::I64 > _s3kkI::I64) goto s3kkK; else goto s3kl0;
       s3kkK: // global
           (_c3kO9::I64) = call MO_Clz W64(_s3kkH::I64 ^ _s3kjx::I64);
           _s3kkL::I64 = 1 << 63 - _c3kO9::I64;
           if (_s3kkL::I64 & _s3kjx::I64 == 0) goto c3kOT; else goto c3kOG;
       c3kOT: // global
           I64[Sp - 24] = block_c3kOP_info;
           R1 = _s3kjz::P64;
           P64[Sp - 16] = _s3kkJ::P64;
           I64[Sp - 8] = _s3kkL::I64;
           I64[Sp] = _s3kkI::I64;
           I64[Sp + 24] = _s3kkH::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3kOG: // global
           I64[Sp - 24] = block_c3kOB_info;
           R1 = _s3kjz::P64;
           P64[Sp - 16] = _s3kkJ::P64;
           I64[Sp - 8] = _s3kkL::I64;
           I64[Sp] = _s3kkI::I64;
           I64[Sp + 24] = _s3kkH::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3kl0: // global
           (_c3kPd::I64) = call MO_Clz W64(_s3kjx::I64 ^ _s3kkH::I64);
           _s3kl1::I64 = 1 << 63 - _c3kPd::I64;
           if (_s3kl1::I64 & _s3kkH::I64 == 0) goto c3kPV; else goto c3kPJ;
       c3kPV: // global
           I64[Sp - 8] = block_c3kPS_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kl1::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3kPJ: // global
           I64[Sp - 8] = block_c3kPF_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kl1::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3kIW: // global
           I64[Sp] = block_c3kQj_info;
           R1 = _s3kjz::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kJZ() //  [R1]
         { info_tbl: [(c3kJZ,
                       label: block_c3kJZ_info
                       rep:StackRep [False, True, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kJZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kK8; else goto c3kK7;
       c3kK8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kK7: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kJK() //  [R1]
         { info_tbl: [(c3kJK,
                       label: block_c3kJK_info
                       rep:StackRep [False, True, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kJK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kJU; else goto c3kJT;
       c3kJU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kJT: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kKG() //  [R1]
         { info_tbl: [(c3kKG,
                       label: block_c3kKG_info
                       rep:StackRep [False, True, False, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kKG: // global
           _s3kjE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3kKI_info;
           R5 = P64[Sp + 24];
           R4 = _s3kjE::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kKI() //  [R1]
         { info_tbl: [(c3kKI,
                       label: block_c3kKI_info
                       rep:StackRep [True, True, False, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kKI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kKS; else goto c3kKR;
       c3kKS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kKR: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kKo() //  [R1]
         { info_tbl: [(c3kKo,
                       label: block_c3kKo_info
                       rep:StackRep [False, True, False, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kKo: // global
           _s3kjE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3kKq_info;
           R5 = P64[Sp + 32];
           R4 = _s3kjE::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kKq() //  [R1]
         { info_tbl: [(c3kKq,
                       label: block_c3kKq_info
                       rep:StackRep [True, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kKq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kKB; else goto c3kKA;
       c3kKB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kKA: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kLS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kLS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kM7; else goto c3kM6;
       c3kM7: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c3kLR_info;
           R1 = I64[Sp + 48];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3kM6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp - 8] = block_c3kLV_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           Sp = Sp - 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kLR() //  [R1]
         { info_tbl: [(c3kLR,
                       label: block_c3kLR_info
                       rep:StackRep [True, False, True, False, False, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kLR: // global
           I64[Sp + 56] = R1;
           Sp = Sp + 8;
           call _c3kLS() args: 0, res: 0, upd: 0;
     }
 },
 _c3kLV() //  [R1]
         { info_tbl: [(c3kLV,
                       label: block_c3kLV_info
                       rep:StackRep [True, False, True, True, True, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kLV: // global
           I64[Sp] = block_c3kLZ_info;
           _s3kkj::P64 = R1;
           R1 = P64[Sp + 88];
           P64[Sp + 88] = _s3kkj::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kLZ() //  [R1]
         { info_tbl: [(c3kLZ,
                       label: block_c3kLZ_info
                       rep:StackRep [True, False, True, True, True, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kLZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3kMb; else goto c3kMa;
       c3kMb: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kMa: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 80];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 64];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kMg() //  [R1]
         { info_tbl: [(c3kMg,
                       label: block_c3kMg_info
                       rep:StackRep [False, True, False, False, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kMg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kMt; else goto c3kMs;
       c3kMt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kMs: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp] = block_c3kMj_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           P64[Sp + 32] = R1;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kMj() //  [R1]
         { info_tbl: [(c3kMj,
                       label: block_c3kMj_info
                       rep:StackRep [False, True, True, False, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kMj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3kMw; else goto c3kMv;
       c3kMw: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kMv: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = P64[Sp + 32];
           I64[Hp - 64] = I64[Sp + 56];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kNr() //  [R1]
         { info_tbl: [(c3kNr,
                       label: block_c3kNr_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kNr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kNy; else goto c3kNx;
       c3kNy: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kNx: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kNe() //  [R1]
         { info_tbl: [(c3kNe,
                       label: block_c3kNe_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kNe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kNm; else goto c3kNl;
       c3kNm: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kNl: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kOP() //  [R1]
         { info_tbl: [(c3kOP,
                       label: block_c3kOP_info
                       rep:StackRep [False, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kOP: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3kOX; else goto c3kOW;
       c3kOX: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kOW: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kOB() //  [R1]
         { info_tbl: [(c3kOB,
                       label: block_c3kOB_info
                       rep:StackRep [False, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kOB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3kOK; else goto c3kOJ;
       c3kOK: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kOJ: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kPS() //  [R1]
         { info_tbl: [(c3kPS,
                       label: block_c3kPS_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kPS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kPZ; else goto c3kPY;
       c3kPZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kPY: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kPF() //  [R1]
         { info_tbl: [(c3kPF,
                       label: block_c3kPF_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kPF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kPN; else goto c3kPM;
       c3kPN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kPM: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kQj() //  [R1]
         { info_tbl: [(c3kQj,
                       label: block_c3kQj_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kQj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kQp; else goto c3kQo;
       c3kQp: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kQo: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.794659489 UTC

[section ""data" . GHC.Event.PSQ.unsafeInsertNew_closure" {
     GHC.Event.PSQ.unsafeInsertNew_closure:
         const GHC.Event.PSQ.unsafeInsertNew_info;
 },
 GHC.Event.PSQ.unsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3kQD,
                       label: GHC.Event.PSQ.unsafeInsertNew_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kQD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3kQH; else goto c3kQI;
       c3kQH: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.unsafeInsertNew_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kQI: // global
           I64[Sp - 32] = block_c3kQA_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3kQQ; else goto c3kQB;
       u3kQQ: // global
           call _c3kQA(R1) args: 0, res: 0, upd: 0;
       c3kQB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kQA() //  [R1]
         { info_tbl: [(c3kQA,
                       label: block_c3kQA_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kQA: // global
           I64[Sp] = block_c3kQG_info;
           _s3kln::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kln::I64;
           if (R1 & 7 != 0) goto u3kQP; else goto c3kQK;
       u3kQP: // global
           call _c3kQG(R1) args: 0, res: 0, upd: 0;
       c3kQK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kQG() //  [R1]
         { info_tbl: [(c3kQG,
                       label: block_c3kQG_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kQG: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.798641067 UTC

[section ""data" . GHC.Event.PSQ.insert_closure" {
     GHC.Event.PSQ.insert_closure:
         const GHC.Event.PSQ.insert_info;
 },
 GHC.Event.PSQ.insert_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3kQY,
                       label: GHC.Event.PSQ.insert_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kQY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3kR7; else goto c3kR8;
       c3kR7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.insert_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kR8: // global
           I64[Sp - 32] = block_c3kQV_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3kRg; else goto c3kQW;
       u3kRg: // global
           call _c3kQV(R1) args: 0, res: 0, upd: 0;
       c3kQW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kQV() //  [R1]
         { info_tbl: [(c3kQV,
                       label: block_c3kQV_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kQV: // global
           I64[Sp - 8] = block_c3kR1_info;
           _s3klu::P64 = R1;
           _s3klv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s3klv::I64;
           P64[Sp + 8] = _s3klu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kRf; else goto c3kR2;
       u3kRf: // global
           call _c3kR1(R1) args: 0, res: 0, upd: 0;
       c3kR2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kR1() //  [R1]
         { info_tbl: [(c3kR1,
                       label: block_c3kR1_info
                       rep:StackRep [True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kR1: // global
           I64[Sp] = block_c3kR6_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 16];
           I64[Sp + 32] = I64[R1 + 7];
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kR6() //  [R1]
         { info_tbl: [(c3kR6,
                       label: block_c3kR6_info
                       rep:StackRep [True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kR6: // global
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = I64[Sp + 32];
           R2 = I64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.801512666 UTC

[section ""data" . go_r3kd8_closure" {
     go_r3kd8_closure:
         const go_r3kd8_info;
 },
 go_r3kd8_entry() //  [R2]
         { info_tbl: [(c3kRs,
                       label: go_r3kd8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kRs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3kRt; else goto c3kRu;
       c3kRt: // global
           R2 = R2;
           R1 = go_r3kd8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kRu: // global
           I64[Sp - 8] = block_c3kRl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kRV; else goto c3kRm;
       u3kRV: // global
           call _c3kRl(R1) args: 0, res: 0, upd: 0;
       c3kRm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kRl() //  [R1]
         { info_tbl: [(c3kRl,
                       label: block_c3kRl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kRl: // global
           if (R1 & 7 == 1) goto c3kRp; else goto c3kRq;
       c3kRp: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kRq: // global
           I64[Sp - 8] = block_c3kRA_info;
           _s3klC::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3klC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kRU; else goto c3kRB;
       u3kRU: // global
           call _c3kRA(R1) args: 0, res: 0, upd: 0;
       c3kRB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kRA() //  [R1]
         { info_tbl: [(c3kRA,
                       label: block_c3kRA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kRA: // global
           I64[Sp - 16] = block_c3kRF_info;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 7];
           I64[Sp] = I64[R1 + 23];
           I64[Sp + 8] = I64[R1 + 15];
           Sp = Sp - 16;
           call go_r3kd8_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kRF() //  [R1]
         { info_tbl: [(c3kRF,
                       label: block_c3kRF_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kRF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kRP; else goto c3kRO;
       c3kRP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kRO: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3kRK_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kRK() //  [R1]
         { info_tbl: [(c3kRK,
                       label: block_c3kRK_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kRK: // global
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.803573678 UTC

[section ""data" . GHC.Event.PSQ.fromList_closure" {
     GHC.Event.PSQ.fromList_closure:
         const GHC.Event.PSQ.fromList_info;
 },
 GHC.Event.PSQ.fromList_entry() //  [R2]
         { info_tbl: [(c3kS0,
                       label: GHC.Event.PSQ.fromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kS0: // global
           R2 = R2;
           call go_r3kd8_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.80497095 UTC

[section ""data" . GHC.Event.PSQ.adjust_closure" {
     GHC.Event.PSQ.adjust_closure:
         const GHC.Event.PSQ.adjust_info;
 },
 GHC.Event.PSQ.adjust_entry() //  [R2, R3, R4]
         { info_tbl: [(c3kSd,
                       label: GHC.Event.PSQ.adjust_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kSd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3kSe; else goto c3kSf;
       c3kSe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.adjust_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kSf: // global
           I64[Sp - 32] = block_c3kS7_info;
           _s3klL::P64 = R3;
           R3 = R4;
           _s3klK::P64 = R2;
           R2 = _s3klL::P64;
           P64[Sp - 24] = _s3klK::P64;
           P64[Sp - 16] = _s3klL::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Event.PSQ.deleteView_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kS7() //  [R1]
         { info_tbl: [(c3kS7,
                       label: block_c3kS7_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kS7: // global
           if (R1 & 7 == 1) goto c3kSa; else goto c3kSb;
       c3kSa: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3kSb: // global
           I64[Sp] = block_c3kSl_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3kSD; else goto c3kSm;
       u3kSD: // global
           call _c3kSl(R1) args: 0, res: 0, upd: 0;
       c3kSm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kSl() //  [R1]
         { info_tbl: [(c3kSl,
                       label: block_c3kSl_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kSl: // global
           I64[Sp - 8] = block_c3kSq_info;
           _s3klQ::P64 = P64[R1 + 7];
           _s3klR::P64 = P64[R1 + 15];
           _s3klS::P64 = P64[R1 + 23];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3klS::P64;
           P64[Sp + 16] = _s3klR::P64;
           P64[Sp + 24] = _s3klQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kSE; else goto c3kSr;
       u3kSE: // global
           call _c3kSq(R1) args: 0, res: 0, upd: 0;
       c3kSr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kSq() //  [R1]
         { info_tbl: [(c3kSq,
                       label: block_c3kSq_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kSq: // global
           I64[Sp] = block_c3kSv_info;
           R2 = P64[Sp + 32];
           _s3klU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s3klU::I64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kSv() //  [R1]
         { info_tbl: [(c3kSv,
                       label: block_c3kSv_info
                       rep:StackRep [False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kSv: // global
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 32];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.808334879 UTC

[section ""data" . GHC.Event.PSQ.Bin_closure" {
     GHC.Event.PSQ.Bin_closure:
         const GHC.Event.PSQ.Bin_info;
 },
 GHC.Event.PSQ.Bin_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kSG: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.PSQ.Bin_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.Bin_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3kSL,
                       label: GHC.Event.PSQ.Bin_info
                       rep:HeapRep static {
                             Fun {arity: 6
                                  fun_type: ArgGen [True, True, False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kSL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kSP; else goto c3kSO;
       c3kSP: // global
           HpAlloc = 56;
           R1 = GHC.Event.PSQ.Bin_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c3kSO: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R5;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.810857829 UTC

[section ""data" . GHC.Event.PSQ.Tip_closure" {
     GHC.Event.PSQ.Tip_closure:
         const GHC.Event.PSQ.Tip_info;
 },
 GHC.Event.PSQ.Tip_entry() //  [R2, R3, R4]
         { info_tbl: [(c3kSV,
                       label: GHC.Event.PSQ.Tip_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kSV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kSZ; else goto c3kSY;
       c3kSZ: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.Tip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kSY: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.811778695 UTC

[section ""data" . GHC.Event.PSQ.Nil_closure" {
     GHC.Event.PSQ.Nil_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.812566278 UTC

[section ""data" . GHC.Event.PSQ.E_closure" {
     GHC.Event.PSQ.E_closure:
         const GHC.Event.PSQ.E_info;
 },
 GHC.Event.PSQ.E_entry() //  [R2, R3, R4]
         { info_tbl: [(c3kT5,
                       label: GHC.Event.PSQ.E_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kT5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kT9; else goto c3kT8;
       c3kT9: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.E_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kT8: // global
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.813535613 UTC

[GHC.Event.PSQ.Bin_con_entry() //  [R1]
         { info_tbl: [(c3kTa,
                       label: GHC.Event.PSQ.Bin_con_info
                       rep:HeapRep 3 ptrs 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,66,105,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTa: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.814312671 UTC

[GHC.Event.PSQ.Tip_con_entry() //  [R1]
         { info_tbl: [(c3kTb,
                       label: GHC.Event.PSQ.Tip_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,84,105,112]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTb: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.815153594 UTC

[GHC.Event.PSQ.Nil_con_entry() //  [R1]
         { info_tbl: [(c3kTc,
                       label: GHC.Event.PSQ.Nil_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,78,105,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTc: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.81593911 UTC

[GHC.Event.PSQ.E_con_entry() //  [R1]
         { info_tbl: [(c3kTd,
                       label: GHC.Event.PSQ.E_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,69]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTd: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.816821821 UTC

[section ""relreadonly" . S3kTe_srt" { S3kTe_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.817460173 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:57:56.818763997 UTC

[section ""data" . GHC.Event.PSQ.$WBin_closure" {
     GHC.Event.PSQ.$WBin_closure:
         const GHC.Event.PSQ.$WBin_info;
 },
 GHC.Event.PSQ.$WBin_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3kTm,
                       label: GHC.Event.PSQ.$WBin_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3kTM; else goto c3kTN;
       c3kTM: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WBin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3kTN: // global
           I64[Sp - 40] = block_c3kTj_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3kTX; else goto c3kTk;
       u3kTX: // global
           call _c3kTj(R1) args: 0, res: 0, upd: 0;
       c3kTk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kTj() //  [R1]
         { info_tbl: [(c3kTj,
                       label: block_c3kTj_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTj: // global
           I64[Sp] = block_c3kTp_info;
           _s3kdh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdh::I64;
           if (R1 & 7 != 0) goto u3kTW; else goto c3kTq;
       u3kTW: // global
           call _c3kTp(R1) args: 0, res: 0, upd: 0;
       c3kTq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kTp() //  [R1]
         { info_tbl: [(c3kTp,
                       label: block_c3kTp_info
                       rep:StackRep [True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTp: // global
           I64[Sp] = block_c3kTu_info;
           _s3kdj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3kdj::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kTu() //  [R1]
         { info_tbl: [(c3kTu,
                       label: block_c3kTu_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTu: // global
           I64[Sp] = block_c3kTw_info;
           _s3kdk::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3kdk::P64;
           if (R1 & 7 != 0) goto u3kTY; else goto c3kTx;
       u3kTY: // global
           call _c3kTw(R1) args: 0, res: 0, upd: 0;
       c3kTx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kTw() //  [R1]
         { info_tbl: [(c3kTw,
                       label: block_c3kTw_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTw: // global
           I64[Sp] = block_c3kTB_info;
           _s3kdm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3kdm::I64;
           if (R1 & 7 != 0) goto u3kTZ; else goto c3kTC;
       u3kTZ: // global
           call _c3kTB(R1) args: 0, res: 0, upd: 0;
       c3kTC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kTB() //  [R1]
         { info_tbl: [(c3kTB,
                       label: block_c3kTB_info
                       rep:StackRep [True, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTB: // global
           I64[Sp] = block_c3kTG_info;
           _s3kdn::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 40] = _s3kdn::P64;
           if (R1 & 7 != 0) goto u3kU0; else goto c3kTH;
       u3kU0: // global
           call _c3kTG(R1) args: 0, res: 0, upd: 0;
       c3kTH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kTG() //  [R1]
         { info_tbl: [(c3kTG,
                       label: block_c3kTG_info
                       rep:StackRep [True, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kTG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kTV; else goto c3kTU;
       c3kTV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kTU: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 32];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.821618568 UTC

[section ""data" . GHC.Event.PSQ.$WTip_closure" {
     GHC.Event.PSQ.$WTip_closure:
         const GHC.Event.PSQ.$WTip_info;
 },
 GHC.Event.PSQ.$WTip_entry() //  [R2, R3, R4]
         { info_tbl: [(c3kU8,
                       label: GHC.Event.PSQ.$WTip_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kU8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3kUj; else goto c3kUk;
       c3kUj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WTip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kUk: // global
           I64[Sp - 24] = block_c3kU5_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3kUr; else goto c3kU6;
       u3kUr: // global
           call _c3kU5(R1) args: 0, res: 0, upd: 0;
       c3kU6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kU5() //  [R1]
         { info_tbl: [(c3kU5,
                       label: block_c3kU5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kU5: // global
           I64[Sp] = block_c3kUb_info;
           _s3kdt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdt::I64;
           if (R1 & 7 != 0) goto u3kUq; else goto c3kUc;
       u3kUq: // global
           call _c3kUb(R1) args: 0, res: 0, upd: 0;
       c3kUc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kUb() //  [R1]
         { info_tbl: [(c3kUb,
                       label: block_c3kUb_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kUb: // global
           I64[Sp] = block_c3kUg_info;
           _s3kdv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3kdv::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kUg() //  [R1]
         { info_tbl: [(c3kUg,
                       label: block_c3kUg_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kUg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kUp; else goto c3kUo;
       c3kUp: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kUo: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.823472451 UTC

[section ""data" . GHC.Event.PSQ.$WE_closure" {
     GHC.Event.PSQ.$WE_closure:
         const GHC.Event.PSQ.$WE_info;
 },
 GHC.Event.PSQ.$WE_entry() //  [R2, R3, R4]
         { info_tbl: [(c3kUz,
                       label: GHC.Event.PSQ.$WE_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kUz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3kUI; else goto c3kUJ;
       c3kUI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WE_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kUJ: // global
           I64[Sp - 24] = block_c3kUw_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3kUP; else goto c3kUx;
       u3kUP: // global
           call _c3kUw(R1) args: 0, res: 0, upd: 0;
       c3kUx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kUw() //  [R1]
         { info_tbl: [(c3kUw,
                       label: block_c3kUw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kUw: // global
           I64[Sp] = block_c3kUC_info;
           _s3kdB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdB::I64;
           if (R1 & 7 != 0) goto u3kUO; else goto c3kUD;
       u3kUO: // global
           call _c3kUC(R1) args: 0, res: 0, upd: 0;
       c3kUD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kUC() //  [R1]
         { info_tbl: [(c3kUC,
                       label: block_c3kUC_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kUC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kUN; else goto c3kUM;
       c3kUN: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kUM: // global
           _s3kdD::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kdD::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.825089408 UTC

[section ""data" . GHC.Event.PSQ.value_closure" {
     GHC.Event.PSQ.value_closure:
         const GHC.Event.PSQ.value_info;
 },
 GHC.Event.PSQ.value_entry() //  [R2]
         { info_tbl: [(c3kUX,
                       label: GHC.Event.PSQ.value_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kUX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3kUY; else goto c3kUZ;
       c3kUY: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.value_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kUZ: // global
           I64[Sp - 8] = block_c3kUU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kV3; else goto c3kUV;
       u3kV3: // global
           call _c3kUU(R1) args: 0, res: 0, upd: 0;
       c3kUV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kUU() //  [R1]
         { info_tbl: [(c3kUU,
                       label: block_c3kUU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kUU: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.826351496 UTC

[section ""data" . GHC.Event.PSQ.prio_closure" {
     GHC.Event.PSQ.prio_closure:
         const GHC.Event.PSQ.prio_info;
 },
 GHC.Event.PSQ.prio_entry() //  [R2]
         { info_tbl: [(c3kVb,
                       label: GHC.Event.PSQ.prio_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kVb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3kVf; else goto c3kVg;
       c3kVf: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.prio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kVg: // global
           I64[Sp - 8] = block_c3kV8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kVk; else goto c3kV9;
       u3kVk: // global
           call _c3kV8(R1) args: 0, res: 0, upd: 0;
       c3kV9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kV8() //  [R1]
         { info_tbl: [(c3kV8,
                       label: block_c3kV8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kV8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kVj; else goto c3kVi;
       c3kVj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kVi: // global
           _s3kdM::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s3kdM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.827732385 UTC

[section ""data" . GHC.Event.PSQ.key_closure" {
     GHC.Event.PSQ.key_closure:
         const GHC.Event.PSQ.key_info;
 },
 GHC.Event.PSQ.key_entry() //  [R2]
         { info_tbl: [(c3kVs,
                       label: GHC.Event.PSQ.key_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kVs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3kVw; else goto c3kVx;
       c3kVw: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.key_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kVx: // global
           I64[Sp - 8] = block_c3kVp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kVB; else goto c3kVq;
       u3kVB: // global
           call _c3kVp(R1) args: 0, res: 0, upd: 0;
       c3kVq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kVp() //  [R1]
         { info_tbl: [(c3kVp,
                       label: block_c3kVp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kVp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kVA; else goto c3kVz;
       c3kVA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kVz: // global
           _s3kdQ::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kdQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.829041803 UTC

[section ""data" . GHC.Event.PSQ.null_closure" {
     GHC.Event.PSQ.null_closure:
         const GHC.Event.PSQ.null_info;
 },
 GHC.Event.PSQ.null_entry() //  [R2]
         { info_tbl: [(c3kVN,
                       label: GHC.Event.PSQ.null_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kVN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3kVO; else goto c3kVP;
       c3kVO: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.null_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kVP: // global
           I64[Sp - 8] = block_c3kVG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kVW; else goto c3kVH;
       u3kVW: // global
           call _c3kVG(R1) args: 0, res: 0, upd: 0;
       c3kVH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kVG() //  [R1]
         { info_tbl: [(c3kVG,
                       label: block_c3kVG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kVG: // global
           if (R1 & 7 == 3) goto c3kVL; else goto c3kVK;
       c3kVL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kVK: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.830578536 UTC

[section ""data" . GHC.Event.PSQ.findMin_closure" {
     GHC.Event.PSQ.findMin_closure:
         const GHC.Event.PSQ.findMin_info;
 },
 GHC.Event.PSQ.findMin_entry() //  [R2]
         { info_tbl: [(c3kW9,
                       label: GHC.Event.PSQ.findMin_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kW9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3kWa; else goto c3kWb;
       c3kWa: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.findMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3kWb: // global
           I64[Sp - 8] = block_c3kW1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3kWu; else goto c3kW2;
       u3kWu: // global
           call _c3kW1(R1) args: 0, res: 0, upd: 0;
       c3kW2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kW1() //  [R1]
         { info_tbl: [(c3kW1,
                       label: block_c3kW1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kW1: // global
           _c3kW8::P64 = R1 & 7;
           if (_c3kW8::P64 < 3) goto u3kWt; else goto c3kW7;
       u3kWt: // global
           if (_c3kW8::P64 < 2) goto c3kW5; else goto c3kW6;
       c3kW5: // global
           Hp = Hp + 48;
           _s3kdW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3kWp; else goto c3kWh;
       c3kWh: // global
           _s3kdZ::P64 = P64[_s3kdW::P64 + 7];
           _s3kdX::I64 = I64[_s3kdW::P64 + 31];
           _s3kdY::I64 = I64[_s3kdW::P64 + 39];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3kdZ::P64;
           I64[Hp - 24] = _s3kdX::I64;
           I64[Hp - 16] = _s3kdY::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kW6: // global
           Hp = Hp + 48;
           _s3kdW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3kWp; else goto c3kWo;
       c3kWp: // global
           HpAlloc = 48;
           R1 = _s3kdW::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kWo: // global
           _s3ke6::P64 = P64[_s3kdW::P64 + 6];
           _s3ke4::I64 = I64[_s3kdW::P64 + 14];
           _s3ke5::I64 = I64[_s3kdW::P64 + 22];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3ke6::P64;
           I64[Hp - 24] = _s3ke4::I64;
           I64[Hp - 16] = _s3ke5::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kW7: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.831987264 UTC

[section ""data" . GHC.Event.PSQ.empty_closure" {
     GHC.Event.PSQ.empty_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.832667488 UTC

[section ""data" . GHC.Event.PSQ.singleton_closure" {
     GHC.Event.PSQ.singleton_closure:
         const GHC.Event.PSQ.singleton_info;
 },
 GHC.Event.PSQ.singleton_entry() //  [R2, R3, R4]
         { info_tbl: [(c3kWz,
                       label: GHC.Event.PSQ.singleton_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kWz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.PSQ.$WTip_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.83422099 UTC

[section ""data" . GHC.Event.PSQ.toList_go_closure" {
     GHC.Event.PSQ.toList_go_closure:
         const GHC.Event.PSQ.toList_go_info;
 },
 sat_s3kei_entry() //  [R1]
         { info_tbl: [(c3kWT,
                       label: sat_s3kei_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kWT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3kWU; else goto c3kWV;
       c3kWU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3kWV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3kej_entry() //  [R1]
         { info_tbl: [(c3kWW,
                       label: sat_s3kej_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kWW: // global
           _s3kej::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3kWX; else goto c3kWY;
       c3kWY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3kX0; else goto c3kWZ;
       c3kX0: // global
           HpAlloc = 32;
           goto c3kWX;
       c3kWX: // global
           R1 = _s3kej::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3kWZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kej::P64;
           _s3ke8::P64 = P64[_s3kej::P64 + 16];
           _s3kef::P64 = P64[_s3kej::P64 + 24];
           _s3keg::P64 = P64[_s3kej::P64 + 32];
           I64[Hp - 24] = sat_s3kei_info;
           P64[Hp - 8] = _s3ke8::P64;
           P64[Hp] = _s3keg::P64;
           R3 = _s3kef::P64;
           R2 = Hp - 24;
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.PSQ.toList_go_entry() //  [R2, R3]
         { info_tbl: [(c3kX6,
                       label: GHC.Event.PSQ.toList_go_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kX6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3kX7; else goto c3kX8;
       c3kX7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.toList_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kX8: // global
           I64[Sp - 16] = block_c3kWG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3kXp; else goto c3kWH;
       u3kXp: // global
           call _c3kWG(R1) args: 0, res: 0, upd: 0;
       c3kWH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kWG() //  [R1]
         { info_tbl: [(c3kWG,
                       label: block_c3kWG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kWG: // global
           _s3ke8::P64 = P64[Sp + 8];
           _c3kX5::P64 = R1 & 7;
           if (_c3kX5::P64 < 3) goto u3kXo; else goto c3kX4;
       u3kXo: // global
           if (_c3kX5::P64 < 2) goto c3kX2; else goto c3kX3;
       c3kX2: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3kXd; else goto c3kXc;
       c3kXd: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kXc: // global
           _s3ked::P64 = P64[R1 + 7];
           _s3kef::P64 = P64[R1 + 15];
           _s3keg::P64 = P64[R1 + 23];
           _s3keb::I64 = I64[R1 + 31];
           _s3kec::I64 = I64[R1 + 39];
           I64[Hp - 88] = sat_s3kej_info;
           P64[Hp - 72] = _s3ke8::P64;
           P64[Hp - 64] = _s3kef::P64;
           P64[Hp - 56] = _s3keg::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3ked::P64;
           I64[Hp - 32] = _s3keb::I64;
           I64[Hp - 24] = _s3kec::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kX3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kXk; else goto c3kXj;
       c3kXk: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kXj: // global
           _s3kem::P64 = P64[R1 + 6];
           _s3kek::I64 = I64[R1 + 14];
           _s3kel::I64 = I64[R1 + 22];
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3kem::P64;
           I64[Hp - 32] = _s3kek::I64;
           I64[Hp - 24] = _s3kel::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3ke8::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3kX4: // global
           R1 = _s3ke8::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.836623509 UTC

[section ""data" . GHC.Event.PSQ.toList_closure" {
     GHC.Event.PSQ.toList_closure:
         const GHC.Event.PSQ.toList_info;
 },
 GHC.Event.PSQ.toList_entry() //  [R2]
         { info_tbl: [(c3kXu,
                       label: GHC.Event.PSQ.toList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kXu: // global
           R3 = R2;
           R2 = GHC.Types.[]_closure+1;
           call GHC.Event.PSQ.toList_go_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.841753872 UTC

[section ""data" . GHC.Event.PSQ.merge_closure" {
     GHC.Event.PSQ.merge_closure:
         const GHC.Event.PSQ.merge_info;
 },
 GHC.Event.PSQ.merge_entry() //  [R2, R3, R4]
         { info_tbl: [(c3kXJ,
                       label: GHC.Event.PSQ.merge_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kXJ: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3kXK; else goto c3kXL;
       c3kXK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.merge_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3kXL: // global
           I64[Sp - 24] = block_c3kXB_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3l2u; else goto c3kXC;
       u3l2u: // global
           call _c3kXB(R1) args: 0, res: 0, upd: 0;
       c3kXC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3kXB() //  [R1]
         { info_tbl: [(c3kXB,
                       label: block_c3kXB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kXB: // global
           _s3keq::P64 = P64[Sp + 16];
           _c3kXI::P64 = R1 & 7;
           if (_c3kXI::P64 < 3) goto u3l2n; else goto c3kXH;
       u3l2n: // global
           if (_c3kXI::P64 < 2) goto c3kXF; else goto c3kXG;
       c3kXF: // global
           I64[Sp - 48] = block_c3kXO_info;
           _s3ker::P64 = R1;
           _s3keu::P64 = P64[R1 + 7];
           _s3kew::P64 = P64[R1 + 15];
           _s3kex::P64 = P64[R1 + 23];
           _s3kes::I64 = I64[R1 + 31];
           _s3ket::I64 = I64[R1 + 39];
           _s3kev::I64 = I64[R1 + 47];
           R1 = _s3keq::P64;
           I64[Sp - 40] = _s3ket::I64;
           P64[Sp - 32] = _s3keu::P64;
           I64[Sp - 24] = _s3kev::I64;
           P64[Sp - 16] = _s3kew::P64;
           P64[Sp - 8] = _s3kex::P64;
           I64[Sp] = _s3kes::I64;
           P64[Sp + 16] = _s3ker::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3l2s; else goto c3kXQ;
       u3l2s: // global
           call _c3kXO(R1) args: 0, res: 0, upd: 0;
       c3kXQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kXG: // global
           I64[Sp - 24] = block_c3l06_info;
           _s3ker::P64 = R1;
           _s3kf9::P64 = P64[R1 + 6];
           _s3kf7::I64 = I64[R1 + 14];
           _s3kf8::I64 = I64[R1 + 22];
           R1 = _s3keq::P64;
           I64[Sp - 16] = _s3kf8::I64;
           P64[Sp - 8] = _s3kf9::P64;
           I64[Sp] = _s3kf7::I64;
           P64[Sp + 16] = _s3ker::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3l2t; else goto c3l08;
       u3l2t: // global
           call _c3l06(R1) args: 0, res: 0, upd: 0;
       c3l08: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kXH: // global
           R1 = _s3keq::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kXO() //  [R1]
         { info_tbl: [(c3kXO,
                       label: block_c3kXO_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kXO: // global
           _c3l2m::P64 = R1 & 7;
           if (_c3l2m::P64 < 3) goto u3l2o; else goto u3l2q;
       u3l2o: // global
           _s3keo::P64 = P64[Sp + 56];
           _s3kes::I64 = I64[Sp + 48];
           _s3ket::I64 = I64[Sp + 8];
           if (_c3l2m::P64 < 2) goto c3kYX; else goto c3kZZ;
       c3kYX: // global
           _s3keB::P64 = P64[R1 + 7];
           _s3keD::P64 = P64[R1 + 15];
           _s3keE::P64 = P64[R1 + 23];
           _s3kez::I64 = I64[R1 + 31];
           _s3keA::I64 = I64[R1 + 39];
           _s3keC::I64 = I64[R1 + 47];
           if (_s3ket::I64 == _s3keA::I64) goto c3kYV; else goto c3kYO;
       c3kYV: // global
           _s3key::P64 = R1;
           if (%MO_S_Ge_W64(_s3kes::I64,
                            _s3kez::I64)) goto s3keF; else goto s3keK;
       c3kYO: // global
           _s3key::P64 = R1;
           if (_s3ket::I64 > _s3keA::I64) goto s3keF; else goto s3keK;
       s3keF: // global
           I64[Sp + 8] = block_c3kY0_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3keE::P64;
           P64[Sp + 24] = _s3keD::P64;
           I64[Sp + 32] = _s3keC::I64;
           P64[Sp + 40] = _s3keB::P64;
           I64[Sp + 48] = _s3keA::I64;
           I64[Sp + 56] = _s3kez::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3l2x; else goto c3kY1;
       u3l2x: // global
           call _c3kY0(R1) args: 0, res: 0, upd: 0;
       c3kY1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       s3keK: // global
           I64[Sp] = block_c3kYn_info;
           R1 = _s3keo::P64;
           P64[Sp + 64] = _s3key::P64;
           if (R1 & 7 != 0) goto u3l2y; else goto c3kYo;
       u3l2y: // global
           call _c3kYn(R1) args: 0, res: 0, upd: 0;
       c3kYo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kZZ: // global
           _s3keU::P64 = P64[R1 + 6];
           _s3keS::I64 = I64[R1 + 14];
           _s3keT::I64 = I64[R1 + 22];
           if (_s3ket::I64 == _s3keT::I64) goto c3kZY; else goto c3kZH;
       c3kZY: // global
           _s3key::P64 = R1;
           if (%MO_S_Lt_W64(_s3kes::I64,
                            _s3keS::I64)) goto s3keV; else goto c3kZT;
       c3kZT: // global
           I64[Sp + 32] = block_c3kZM_info;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3keU::P64;
           I64[Sp + 48] = _s3keT::I64;
           I64[Sp + 56] = _s3keS::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3l2w; else goto c3kZN;
       u3l2w: // global
           call _c3kZM(R1) args: 0, res: 0, upd: 0;
       c3kZN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kZH: // global
           _s3key::P64 = R1;
           if (_s3ket::I64 <= _s3keT::I64) goto s3keV; else goto c3kZB;
       s3keV: // global
           I64[Sp] = block_c3kZ6_info;
           R1 = _s3keo::P64;
           P64[Sp + 64] = _s3key::P64;
           if (R1 & 7 != 0) goto u3l2z; else goto c3kZ7;
       u3l2z: // global
           call _c3kZ6(R1) args: 0, res: 0, upd: 0;
       c3kZ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3kZB: // global
           I64[Sp + 32] = block_c3kZu_info;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3keU::P64;
           I64[Sp + 48] = _s3keT::I64;
           I64[Sp + 56] = _s3keS::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3l2v; else goto c3kZv;
       u3l2v: // global
           call _c3kZu(R1) args: 0, res: 0, upd: 0;
       c3kZv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3l2q: // global
           Sp = Sp + 64;
           call _c3l2h() args: 0, res: 0, upd: 0;
     }
 },
 _c3kY0() //  [R1]
         { info_tbl: [(c3kY0,
                       label: block_c3kY0_info
                       rep:StackRep [False, False, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kY0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kYe; else goto c3kYd;
       c3kYe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kYd: // global
           _s3keH::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3keD::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3kY6_info;
           R4 = P64[Sp + 8];
           R3 = _s3keD::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3keH::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kY6() //  [R1]
         { info_tbl: [(c3kY6,
                       label: block_c3kY6_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kY6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kYh; else goto c3kYg;
       c3kYh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kYg: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kYn() //  [R1]
         { info_tbl: [(c3kYn,
                       label: block_c3kYn_info
                       rep:StackRep [True, False, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kYn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kYB; else goto c3kYA;
       c3kYB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kYA: // global
           _s3keM::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3kYt_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3keM::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kYt() //  [R1]
         { info_tbl: [(c3kYt,
                       label: block_c3kYt_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kYt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kYE; else goto c3kYD;
       c3kYE: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kYD: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kZM() //  [R1]
         { info_tbl: [(c3kZM,
                       label: block_c3kZM_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kZM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kZW; else goto c3kZV;
       c3kZW: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kZV: // global
           _s3kf6::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kf6::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kZu() //  [R1]
         { info_tbl: [(c3kZu,
                       label: block_c3kZu_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kZu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kZE; else goto c3kZD;
       c3kZE: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kZD: // global
           _s3kf3::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kf3::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3kZ6() //  [R1]
         { info_tbl: [(c3kZ6,
                       label: block_c3kZ6_info
                       rep:StackRep [True, False, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kZ6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3kZk; else goto c3kZj;
       c3kZk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kZj: // global
           _s3keX::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3kZc_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3keX::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3kZc() //  [R1]
         { info_tbl: [(c3kZc,
                       label: block_c3kZc_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3kZc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3kZn; else goto c3kZm;
       c3kZn: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3kZm: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l06() //  [R1]
         { info_tbl: [(c3l06,
                       label: block_c3l06_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l06: // global
           _c3l2l::P64 = R1 & 7;
           if (_c3l2l::P64 < 3) goto u3l2p; else goto u3l2r;
       u3l2p: // global
           _s3keo::P64 = P64[Sp + 32];
           _s3kf7::I64 = I64[Sp + 24];
           _s3kf8::I64 = I64[Sp + 8];
           if (_c3l2l::P64 < 2) goto c3l1e; else goto c3l2d;
       c3l1e: // global
           _s3kfd::P64 = P64[R1 + 7];
           _s3kff::P64 = P64[R1 + 15];
           _s3kfg::P64 = P64[R1 + 23];
           _s3kfb::I64 = I64[R1 + 31];
           _s3kfc::I64 = I64[R1 + 39];
           _s3kfe::I64 = I64[R1 + 47];
           if (_s3kf8::I64 == _s3kfc::I64) goto c3l1c; else goto c3l0U;
       c3l1c: // global
           if (%MO_S_Ge_W64(_s3kf7::I64,
                            _s3kfb::I64)) goto s3kfh; else goto c3l18;
       c3l18: // global
           I64[Sp] = block_c3l12_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3l2C; else goto c3l13;
       u3l2C: // global
           call _c3l12(R1) args: 0, res: 0, upd: 0;
       c3l13: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l0U: // global
           if (_s3kf8::I64 > _s3kfc::I64) goto s3kfh; else goto c3l0P;
       s3kfh: // global
           I64[Sp - 16] = block_c3l0i_info;
           R1 = _s3keo::P64;
           P64[Sp - 8] = _s3kfg::P64;
           P64[Sp] = _s3kff::P64;
           I64[Sp + 8] = _s3kfe::I64;
           P64[Sp + 16] = _s3kfd::P64;
           I64[Sp + 24] = _s3kfc::I64;
           I64[Sp + 32] = _s3kfb::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3l2H; else goto c3l0j;
       u3l2H: // global
           call _c3l0i(R1) args: 0, res: 0, upd: 0;
       c3l0j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l0P: // global
           I64[Sp] = block_c3l0J_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3l2B; else goto c3l0K;
       u3l2B: // global
           call _c3l0J(R1) args: 0, res: 0, upd: 0;
       c3l0K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l2d: // global
           _s3kfv::P64 = P64[R1 + 6];
           _s3kft::I64 = I64[R1 + 14];
           _s3kfu::I64 = I64[R1 + 22];
           if (_s3kf8::I64 == _s3kfu::I64) goto c3l2c; else goto c3l1L;
       c3l2c: // global
           if (%MO_S_Ge_W64(_s3kf7::I64,
                            _s3kft::I64)) goto c3l1X; else goto c3l28;
       c3l1X: // global
           I64[Sp + 8] = block_c3l1Q_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3kfv::P64;
           I64[Sp + 24] = _s3kfu::I64;
           I64[Sp + 32] = _s3kft::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3l2F; else goto c3l1R;
       u3l2F: // global
           call _c3l1Q(R1) args: 0, res: 0, upd: 0;
       c3l1R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l28: // global
           I64[Sp] = block_c3l22_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3l2G; else goto c3l23;
       u3l2G: // global
           call _c3l22(R1) args: 0, res: 0, upd: 0;
       c3l23: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l1L: // global
           if (_s3kf8::I64 > _s3kfu::I64) goto c3l1v; else goto c3l1G;
       c3l1v: // global
           I64[Sp + 8] = block_c3l1o_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3kfv::P64;
           I64[Sp + 24] = _s3kfu::I64;
           I64[Sp + 32] = _s3kft::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3l2D; else goto c3l1p;
       u3l2D: // global
           call _c3l1o(R1) args: 0, res: 0, upd: 0;
       c3l1p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l1G: // global
           I64[Sp] = block_c3l1A_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3l2E; else goto c3l1B;
       u3l2E: // global
           call _c3l1A(R1) args: 0, res: 0, upd: 0;
       c3l1B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3l2r: // global
           Sp = Sp + 40;
           call _c3l2h() args: 0, res: 0, upd: 0;
     }
 },
 _c3l12() //  [R1]
         { info_tbl: [(c3l12,
                       label: block_c3l12_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l12: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l1b; else goto c3l1a;
       c3l1b: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l1a: // global
           _s3kfs::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfs::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l0i() //  [R1]
         { info_tbl: [(c3l0i,
                       label: block_c3l0i_info
                       rep:StackRep [False, False, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l0i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3l0w; else goto c3l0v;
       c3l0w: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l0v: // global
           _s3kfj::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3kff::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3l0o_info;
           R4 = P64[Sp + 8];
           R3 = _s3kff::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3kfj::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3l0o() //  [R1]
         { info_tbl: [(c3l0o,
                       label: block_c3l0o_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l0o: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l0z; else goto c3l0y;
       c3l0z: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l0y: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l0J() //  [R1]
         { info_tbl: [(c3l0J,
                       label: block_c3l0J_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l0J: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l0S; else goto c3l0R;
       c3l0S: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l0R: // global
           _s3kfp::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfp::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l1Q() //  [R1]
         { info_tbl: [(c3l1Q,
                       label: block_c3l1Q_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l1Q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l20; else goto c3l1Z;
       c3l20: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l1Z: // global
           _s3kfE::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kfE::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l22() //  [R1]
         { info_tbl: [(c3l22,
                       label: block_c3l22_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l22: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l2b; else goto c3l2a;
       c3l2b: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l2a: // global
           _s3kfG::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfG::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l1o() //  [R1]
         { info_tbl: [(c3l1o,
                       label: block_c3l1o_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l1o: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l1y; else goto c3l1x;
       c3l1y: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l1x: // global
           _s3kfz::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kfz::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l1A() //  [R1]
         { info_tbl: [(c3l1A,
                       label: block_c3l1A_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l1A: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l1J; else goto c3l1I;
       c3l1J: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l1I: // global
           _s3kfB::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfB::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l2h() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l2h: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.853776675 UTC

[section ""data" . GHC.Event.PSQ.$watMost_closure" {
     GHC.Event.PSQ.$watMost_closure:
         const GHC.Event.PSQ.$watMost_info;
 },
 ds_s3kfW_entry() //  [R1]
         { info_tbl: [(c3l3c,
                       label: ds_s3kfW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l3c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3l3d; else goto c3l3e;
       c3l3d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3l3e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3l39_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3l39() //  [R1, R2]
         { info_tbl: [(c3l39,
                       label: block_c3l39_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l39: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3l3h; else goto c3l3g;
       c3l3h: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3l3g: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s3kg0_entry() //  [R1]
         { info_tbl: [(c3l3q,
                       label: ds1_s3kg0_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l3q: // global
           _s3kg0::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3l3r; else goto c3l3s;
       c3l3s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3l3u; else goto c3l3t;
       c3l3u: // global
           HpAlloc = 24;
           goto c3l3r;
       c3l3r: // global
           R1 = _s3kg0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3l3t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kg0::P64;
           _s3kfJ::P64 = P64[_s3kg0::P64 + 16];
           _s3kfS::P64 = P64[_s3kg0::P64 + 24];
           _s3kfW::P64 = P64[_s3kg0::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s3kfW::P64;
           I64[Sp - 24] = block_c3l3n_info;
           R3 = _s3kfS::P64;
           R2 = Hp - 16;
           R1 = _s3kfJ::P64;
           Sp = Sp - 24;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3l3n() //  [R1, R2]
         { info_tbl: [(c3l3n,
                       label: block_c3l3n_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l3n: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3l3x; else goto c3l3w;
       c3l3x: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3l3w: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3kgl_entry() //  [R1]
         { info_tbl: [(c3l3F,
                       label: sat_s3kgl_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l3F: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3l3O; else goto c3l3P;
       c3l3O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3l3P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3l3C_info;
           _s3kg0::P64 = P64[R1 + 24];
           _s3kfQ::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s3kfQ::I64;
           P64[Sp - 24] = _s3kg0::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3l3V; else goto c3l3D;
       u3l3V: // global
           call _c3l3C(R1) args: 0, res: 0, upd: 0;
       c3l3D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3l3C() //  [R1]
         { info_tbl: [(c3l3C,
                       label: block_c3l3C_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l3C: // global
           I64[Sp] = block_c3l3I_info;
           _s3kgg::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3kgg::P64;
           if (R1 & 7 != 0) goto u3l3U; else goto c3l3J;
       u3l3U: // global
           call _c3l3I(R1) args: 0, res: 0, upd: 0;
       c3l3J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3l3I() //  [R1]
         { info_tbl: [(c3l3I,
                       label: block_c3l3I_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l3I: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3l3T; else goto c3l3S;
       c3l3T: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3l3S: // global
           _s3kgj::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           R4 = _s3kgj::P64;
           R3 = P64[Sp + 16];
           R2 = Hp - 7;
           Sp = Sp + 24;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 $wgo_s3kfJ_entry() //  [R1, R2, R3]
         { info_tbl: [(c3l41,
                       label: $wgo_s3kfJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l41: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3l42; else goto c3l43;
       c3l42: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3l43: // global
           I64[Sp - 32] = block_c3l2S_info;
           _s3kfJ::P64 = R1;
           _s3kfH::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s3kfH::P64;
           P64[Sp - 16] = _s3kfJ::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3l4D; else goto c3l2T;
       u3l4D: // global
           call _c3l2S(R1) args: 0, res: 0, upd: 0;
       c3l2T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3l2S() //  [R1]
         { info_tbl: [(c3l2S,
                       label: block_c3l2S_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l2S: // global
           _c3l40::P64 = R1 & 7;
           if (_c3l40::P64 < 3) goto u3l4A; else goto c3l3Z;
       u3l4A: // global
           _s3kfH::P64 = P64[Sp + 8];
           if (_c3l40::P64 < 2) goto c3l3X; else goto c3l3Y;
       c3l3X: // global
           I64[Sp - 48] = block_c3l2X_info;
           _s3kfM::P64 = R1;
           _s3kfP::P64 = P64[R1 + 7];
           _s3kfR::P64 = P64[R1 + 15];
           _s3kfS::P64 = P64[R1 + 23];
           _s3kfN::I64 = I64[R1 + 31];
           _s3kfO::I64 = I64[R1 + 39];
           _s3kfQ::I64 = I64[R1 + 47];
           R1 = _s3kfH::P64;
           I64[Sp - 40] = _s3kfO::I64;
           P64[Sp - 32] = _s3kfP::P64;
           I64[Sp - 24] = _s3kfQ::I64;
           P64[Sp - 16] = _s3kfR::P64;
           P64[Sp - 8] = _s3kfS::P64;
           I64[Sp] = _s3kfN::I64;
           P64[Sp + 8] = _s3kfM::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3l4B; else goto c3l2Y;
       u3l4B: // global
           call _c3l2X(R1) args: 0, res: 0, upd: 0;
       c3l2Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l3Y: // global
           I64[Sp - 16] = block_c3l4g_info;
           _s3kfM::P64 = R1;
           _s3kgo::P64 = P64[R1 + 6];
           _s3kgm::I64 = I64[R1 + 14];
           _s3kgn::I64 = I64[R1 + 22];
           R1 = _s3kfH::P64;
           P64[Sp - 8] = _s3kgo::P64;
           I64[Sp] = _s3kgn::I64;
           I64[Sp + 8] = _s3kgm::I64;
           P64[Sp + 16] = _s3kfM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3l4C; else goto c3l4i;
       u3l4C: // global
           call _c3l4g(R1) args: 0, res: 0, upd: 0;
       c3l4i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l3Z: // global
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l2X() //  [R1]
         { info_tbl: [(c3l2X,
                       label: block_c3l2X_info
                       rep:StackRep [True, False, True, False, False, True, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l2X: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c3l47; else goto c3l46;
       c3l47: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l46: // global
           _s3kfK::P64 = P64[Sp + 72];
           _s3kfO::I64 = I64[Sp + 8];
           if (_s3kfO::I64 <= I64[R1 + 7]) goto c3l4c; else goto c3l4d;
       c3l4c: // global
           I64[Hp - 192] = ds_s3kfW_info;
           _s3kfJ::P64 = P64[Sp + 64];
           P64[Hp - 176] = _s3kfJ::P64;
           P64[Hp - 168] = _s3kfK::P64;
           P64[Hp - 160] = P64[Sp + 32];
           I64[Hp - 152] = ds1_s3kg0_info;
           P64[Hp - 136] = _s3kfJ::P64;
           P64[Hp - 128] = P64[Sp + 40];
           _c3l35::P64 = Hp - 192;
           P64[Hp - 120] = _c3l35::P64;
           I64[Hp - 112] = sat_s3kgl_info;
           P64[Hp - 96] = _c3l35::P64;
           _c3l3i::P64 = Hp - 152;
           P64[Hp - 88] = _c3l3i::P64;
           I64[Hp - 80] = I64[Sp + 24];
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _c3l3i::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = I64[Sp + 48];
           I64[Hp - 24] = _s3kfO::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 72;
           R2 = Hp - 112;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3l4d: // global
           Hp = Hp - 200;
           R2 = P64[Sp + 56];
           R1 = _s3kfK::P64;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l4g() //  [R1]
         { info_tbl: [(c3l4g,
                       label: block_c3l4g_info
                       rep:StackRep [False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l4g: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l4o; else goto c3l4n;
       c3l4o: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l4n: // global
           _s3kfK::P64 = P64[Sp + 40];
           _s3kgn::I64 = I64[Sp + 16];
           if (_s3kgn::I64 <= I64[R1 + 7]) goto c3l4v; else goto c3l4w;
       c3l4v: // global
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = I64[Sp + 24];
           I64[Hp - 24] = _s3kgn::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3kfK::P64;
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3l4w: // global
           Hp = Hp - 56;
           R2 = P64[Sp + 32];
           R1 = _s3kfK::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.$watMost_entry() //  [R2, R3]
         { info_tbl: [(c3l4E,
                       label: GHC.Event.PSQ.$watMost_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l4E: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3l4I; else goto c3l4H;
       c3l4I: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$watMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3l4H: // global
           I64[Hp - 8] = $wgo_s3kfJ_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 6;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.859393167 UTC

[section ""data" . GHC.Event.PSQ.atMost_closure" {
     GHC.Event.PSQ.atMost_closure:
         const GHC.Event.PSQ.atMost_info;
 },
 GHC.Event.PSQ.atMost_entry() //  [R2, R3]
         { info_tbl: [(c3l4Q,
                       label: GHC.Event.PSQ.atMost_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l4Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3l4R; else goto c3l4S;
       c3l4R: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.atMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3l4S: // global
           I64[Sp - 8] = block_c3l4N_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$watMost_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3l4N() //  [R1, R2]
         { info_tbl: [(c3l4N,
                       label: block_c3l4N_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l4N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3l4V; else goto c3l4U;
       c3l4V: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3l4U: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.861664762 UTC

[section ""data" . GHC.Event.PSQ.minView_closure" {
     GHC.Event.PSQ.minView_closure:
         const GHC.Event.PSQ.minView_info;
 },
 sat_s3kgJ_entry() //  [R1]
         { info_tbl: [(c3l5a,
                       label: sat_s3kgJ_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l5a: // global
           _s3kgJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3l5b; else goto c3l5c;
       c3l5c: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3l5e; else goto c3l5d;
       c3l5e: // global
           HpAlloc = 16;
           goto c3l5b;
       c3l5b: // global
           R1 = _s3kgJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3l5d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kgJ::P64;
           _s3kgF::P64 = P64[_s3kgJ::P64 + 16];
           _s3kgG::P64 = P64[_s3kgJ::P64 + 24];
           _s3kgE::I64 = I64[_s3kgJ::P64 + 32];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kgE::I64;
           R4 = _s3kgG::P64;
           R3 = _s3kgF::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.PSQ.minView_entry() //  [R2]
         { info_tbl: [(c3l5k,
                       label: GHC.Event.PSQ.minView_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l5k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3l5l; else goto c3l5m;
       c3l5l: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.minView_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3l5m: // global
           I64[Sp - 8] = block_c3l50_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3l5F; else goto c3l51;
       u3l5F: // global
           call _c3l50(R1) args: 0, res: 0, upd: 0;
       c3l51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3l50() //  [R1]
         { info_tbl: [(c3l50,
                       label: block_c3l50_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l50: // global
           _c3l5j::P64 = R1 & 7;
           if (_c3l5j::P64 < 3) goto u3l5E; else goto c3l5i;
       u3l5E: // global
           if (_c3l5j::P64 < 2) goto c3l5g; else goto c3l5h;
       c3l5g: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3l5s; else goto c3l5r;
       c3l5s: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l5r: // global
           _s3kgD::P64 = P64[R1 + 7];
           _s3kgF::P64 = P64[R1 + 15];
           _s3kgG::P64 = P64[R1 + 23];
           _s3kgB::I64 = I64[R1 + 31];
           _s3kgC::I64 = I64[R1 + 39];
           _s3kgE::I64 = I64[R1 + 47];
           I64[Hp - 104] = sat_s3kgJ_info;
           P64[Hp - 88] = _s3kgF::P64;
           P64[Hp - 80] = _s3kgG::P64;
           I64[Hp - 72] = _s3kgE::I64;
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3kgD::P64;
           I64[Hp - 48] = _s3kgB::I64;
           I64[Hp - 40] = _s3kgC::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3l5h: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3l5A; else goto c3l5z;
       c3l5A: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l5z: // global
           _s3kgN::P64 = P64[R1 + 6];
           _s3kgL::I64 = I64[R1 + 14];
           _s3kgM::I64 = I64[R1 + 22];
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3kgN::P64;
           I64[Hp - 48] = _s3kgL::I64;
           I64[Hp - 40] = _s3kgM::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3l5i: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.864612128 UTC

[section ""data" . GHC.Event.PSQ.deleteMin_closure" {
     GHC.Event.PSQ.deleteMin_closure:
         const GHC.Event.PSQ.deleteMin_info;
 },
 GHC.Event.PSQ.deleteMin_entry() //  [R2]
         { info_tbl: [(c3l5S,
                       label: GHC.Event.PSQ.deleteMin_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l5S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3l5T; else goto c3l5U;
       c3l5T: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.deleteMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3l5U: // global
           I64[Sp - 8] = block_c3l5K_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3l68; else goto c3l5L;
       u3l68: // global
           call _c3l5K(R1) args: 0, res: 0, upd: 0;
       c3l5L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3l5K() //  [R1]
         { info_tbl: [(c3l5K,
                       label: block_c3l5K_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l5K: // global
           _c3l5R::P64 = R1 & 7;
           if (_c3l5R::P64 >= 3) goto c3l5Q; else goto u3l67;
       u3l67: // global
           if (_c3l5R::P64 >= 2) goto c3l5Q; else goto c3l5O;
       c3l5Q: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3l5O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3l60; else goto c3l5Z;
       c3l60: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l5Z: // global
           _s3kgW::P64 = P64[R1 + 15];
           _s3kgX::P64 = P64[R1 + 23];
           _s3kgV::I64 = I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kgV::I64;
           R4 = _s3kgX::P64;
           R3 = _s3kgW::P64;
           R2 = Hp - 7;
           Sp = Sp + 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.868241399 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule4_bytes" {
     GHC.Event.PSQ.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.868939138 UTC

[section ""data" . GHC.Event.PSQ.$trModule3_closure" {
     GHC.Event.PSQ.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.869780906 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule2_bytes" {
     GHC.Event.PSQ.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,80,83,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.870380019 UTC

[section ""data" . GHC.Event.PSQ.$trModule1_closure" {
     GHC.Event.PSQ.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.871024701 UTC

[section ""data" . GHC.Event.PSQ.$trModule_closure" {
     GHC.Event.PSQ.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.PSQ.$trModule3_closure+1;
         const GHC.Event.PSQ.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.871683205 UTC

[section ""data" . $krep_r3kcT_closure" {
     $krep_r3kcT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.87239759 UTC

[section ""data" . $krep1_r3kcU_closure" {
     $krep1_r3kcU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.873038991 UTC

[section ""data" . $krep2_r3kcV_closure" {
     $krep2_r3kcV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.87375794 UTC

[section ""data" . $krep3_r3kcW_closure" {
     $krep3_r3kcW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.874346393 UTC

[section ""cstring" . GHC.Event.PSQ.$tcElem2_bytes" {
     GHC.Event.PSQ.$tcElem2_bytes:
         I8[] [69,108,101,109]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.874979711 UTC

[section ""data" . GHC.Event.PSQ.$tcElem1_closure" {
     GHC.Event.PSQ.$tcElem1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcElem2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.875634857 UTC

[section ""data" . GHC.Event.PSQ.$tcElem_closure" {
     GHC.Event.PSQ.$tcElem_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcElem1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15044414420558834066;
         const 12198171511156299872;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.87628217 UTC

[section ""data" . $krep4_r3kcX_closure" {
     $krep4_r3kcX_closure:
         const :_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.876886865 UTC

[section ""data" . $krep5_r3kcY_closure" {
     $krep5_r3kcY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcElem_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.877576279 UTC

[section ""data" . $krep6_r3kcZ_closure" {
     $krep6_r3kcZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep5_r3kcY_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.878216875 UTC

[section ""data" . $krep7_r3kd0_closure" {
     $krep7_r3kd0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep6_r3kcZ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.878793897 UTC

[section ""data" . GHC.Event.PSQ.$tc'E1_closure" {
     GHC.Event.PSQ.$tc'E1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep7_r3kd0_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.879411526 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'E3_bytes" {
     GHC.Event.PSQ.$tc'E3_bytes:
         I8[] [39,69]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.87999755 UTC

[section ""data" . GHC.Event.PSQ.$tc'E2_closure" {
     GHC.Event.PSQ.$tc'E2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'E3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.880550079 UTC

[section ""data" . GHC.Event.PSQ.$tc'E_closure" {
     GHC.Event.PSQ.$tc'E_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'E2_closure+1;
         const GHC.Event.PSQ.$tc'E1_closure+4;
         const 11813029942800942247;
         const 17450377919573390885;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.881209043 UTC

[section ""cstring" . GHC.Event.PSQ.$tcIntPSQ2_bytes" {
     GHC.Event.PSQ.$tcIntPSQ2_bytes:
         I8[] [73,110,116,80,83,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.88187899 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ1_closure" {
     GHC.Event.PSQ.$tcIntPSQ1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcIntPSQ2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.882539335 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ_closure" {
     GHC.Event.PSQ.$tcIntPSQ_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcIntPSQ1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15246681906271547396;
         const 11594704564387731780;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.883219814 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil1_closure" {
     GHC.Event.PSQ.$tc'Nil1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcIntPSQ_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.883838344 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Nil3_bytes" {
     GHC.Event.PSQ.$tc'Nil3_bytes:
         I8[] [39,78,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.884406207 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil2_closure" {
     GHC.Event.PSQ.$tc'Nil2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Nil3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.885008048 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil_closure" {
     GHC.Event.PSQ.$tc'Nil_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Nil2_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 9632868263130136899;
         const 16639248836205398404;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.885827721 UTC

[section ""data" . $krep8_r3kd1_closure" {
     $krep8_r3kd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.886524532 UTC

[section ""data" . $krep9_r3kd2_closure" {
     $krep9_r3kd2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep8_r3kd1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.887192439 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip1_closure" {
     GHC.Event.PSQ.$tc'Tip1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep9_r3kd2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.887886972 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Tip3_bytes" {
     GHC.Event.PSQ.$tc'Tip3_bytes:
         I8[] [39,84,105,112]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.888524179 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip2_closure" {
     GHC.Event.PSQ.$tc'Tip2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Tip3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.889309251 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip_closure" {
     GHC.Event.PSQ.$tc'Tip_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Tip2_closure+1;
         const GHC.Event.PSQ.$tc'Tip1_closure+4;
         const 4235936270888684142;
         const 17098834253377543597;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.890048815 UTC

[section ""data" . $krep10_r3kd3_closure" {
     $krep10_r3kd3_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.890679035 UTC

[section ""data" . $krep11_r3kd4_closure" {
     $krep11_r3kd4_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const $krep10_r3kd3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.891312974 UTC

[section ""data" . $krep12_r3kd5_closure" {
     $krep12_r3kd5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3kcT_closure+1;
         const $krep11_r3kd4_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.891969119 UTC

[section ""data" . $krep13_r3kd6_closure" {
     $krep13_r3kd6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep12_r3kd5_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.892632246 UTC

[section ""data" . $krep14_r3kd7_closure" {
     $krep14_r3kd7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep13_r3kd6_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.893301806 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin1_closure" {
     GHC.Event.PSQ.$tc'Bin1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep14_r3kd7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.89395466 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Bin3_bytes" {
     GHC.Event.PSQ.$tc'Bin3_bytes:
         I8[] [39,66,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.894521514 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin2_closure" {
     GHC.Event.PSQ.$tc'Bin2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Bin3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.895137857 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin_closure" {
     GHC.Event.PSQ.$tc'Bin_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Bin2_closure+1;
         const GHC.Event.PSQ.$tc'Bin1_closure+4;
         const 8835322380894053498;
         const 4329944662539077627;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.899474497 UTC

[section ""data" . GHC.Event.PSQ.lookup_closure" {
     GHC.Event.PSQ.lookup_closure:
         const GHC.Event.PSQ.lookup_info;
 },
 GHC.Event.PSQ.lookup_entry() //  [R2, R3]
         { info_tbl: [(c3l6h,
                       label: GHC.Event.PSQ.lookup_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l6h: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3l6i; else goto c3l6j;
       c3l6i: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.lookup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3l6j: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3l6H() args: 0, res: 0, upd: 0;
     }
 },
 _c3l6H() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l6H: // global
           I64[Sp - 8] = block_c3l6J_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3l8d; else goto c3l6L;
       u3l8d: // global
           call _c3l6J(R1) args: 0, res: 0, upd: 0;
       c3l6L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3l6J() //  [R1]
         { info_tbl: [(c3l6J,
                       label: block_c3l6J_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l6J: // global
           _c3l84::P64 = R1 & 7;
           if (_c3l84::P64 < 3) goto u3l85; else goto c3l83;
       u3l85: // global
           _s3kh2::P64 = P64[Sp + 8];
           if (_c3l84::P64 < 2) goto c3l6S; else goto c3l7Z;
       c3l6S: // global
           I64[Sp - 40] = block_c3l6P_info;
           _s3khi::P64 = P64[R1 + 7];
           _s3khk::P64 = P64[R1 + 15];
           _s3khl::P64 = P64[R1 + 23];
           _s3khg::I64 = I64[R1 + 31];
           _s3khh::I64 = I64[R1 + 39];
           _s3khj::I64 = I64[R1 + 47];
           R1 = _s3kh2::P64;
           P64[Sp - 32] = _s3khi::P64;
           I64[Sp - 24] = _s3khj::I64;
           P64[Sp - 16] = _s3khk::P64;
           P64[Sp - 8] = _s3khl::P64;
           I64[Sp] = _s3khh::I64;
           I64[Sp + 16] = _s3khg::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3l8e; else goto c3l6T;
       u3l8e: // global
           call _c3l6P(R1) args: 0, res: 0, upd: 0;
       c3l6T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l7Z: // global
           I64[Sp - 8] = block_c3l6n_info;
           _s3kh7::P64 = P64[R1 + 6];
           _s3kh6::I64 = I64[R1 + 22];
           _s3kh5::I64 = I64[R1 + 14];
           R1 = _s3kh2::P64;
           P64[Sp] = _s3kh7::P64;
           I64[Sp + 8] = _s3kh6::I64;
           I64[Sp + 16] = _s3kh5::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3l8f; else goto c3l6p;
       u3l8f: // global
           call _c3l6n(R1) args: 0, res: 0, upd: 0;
       c3l6p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l83: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l6P() //  [R1]
         { info_tbl: [(c3l6P,
                       label: block_c3l6P_info
                       rep:StackRep [False, True, False, False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l6P: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l6Z; else goto c3l6Y;
       c3l6Z: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l6Y: // global
           _s3khg::I64 = I64[Sp + 56];
           _s3khn::I64 = I64[R1 + 7];
           _s3kho::I64 = I64[Sp + 16];
           _s3khp::I64 = (_s3kho::I64 + -1) ^ _s3kho::I64 ^ 18446744073709551615;
           if (_s3khn::I64 & _s3khp::I64 == _s3khg::I64 & _s3khp::I64) goto c3l7U; else goto u3l87;
       c3l7U: // global
           if (_s3khn::I64 == _s3khg::I64) goto c3l7S; else goto c3l7N;
       c3l7S: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 40];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3l7N: // global
           Hp = Hp - 56;
           if (_s3khn::I64 & _s3kho::I64 == 0) goto c3l7I; else goto c3l7C;
       c3l7I: // global
           P64[Sp + 56] = P64[Sp + 24];
           Sp = Sp + 48;
           goto u3l8i;
       c3l7C: // global
           P64[Sp + 56] = P64[Sp + 32];
           Sp = Sp + 48;
           goto u3l8i;
       u3l8i: // global
           call _c3l6H() args: 0, res: 0, upd: 0;
       u3l87: // global
           Sp = Sp + 64;
           call _c3l6z() args: 0, res: 0, upd: 0;
     }
 },
 _c3l6n() //  [R1]
         { info_tbl: [(c3l6n,
                       label: block_c3l6n_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l6n: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l6v; else goto c3l6u;
       c3l6v: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l6u: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3l6F; else goto u3l8a;
       c3l6F: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3l8a: // global
           Sp = Sp + 32;
           call _c3l6z() args: 0, res: 0, upd: 0;
     }
 },
 _c3l6z() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l6z: // global
           Hp = Hp - 56;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.907648559 UTC

[section ""data" . GHC.Event.PSQ.delete_closure" {
     GHC.Event.PSQ.delete_closure:
         const GHC.Event.PSQ.delete_info;
 },
 go1_s3khH_entry() //  [R1, R2]
         { info_tbl: [(c3l8A,
                       label: go1_s3khH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l8A: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3l8B; else goto c3l8C;
       c3l8B: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3l8C: // global
           I64[Sp - 24] = block_c3l8s_info;
           _s3khH::P64 = R1;
           _s3khF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3khF::P64;
           P64[Sp - 8] = _s3khH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lbb; else goto c3l8t;
       u3lbb: // global
           call _c3l8s(R1) args: 0, res: 0, upd: 0;
       c3l8t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3l8s() //  [R1]
         { info_tbl: [(c3l8s,
                       label: block_c3l8s_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l8s: // global
           _c3l8z::P64 = R1 & 7;
           if (_c3l8z::P64 < 3) goto u3lb5; else goto u3lb6;
       u3lb5: // global
           _s3khF::P64 = P64[Sp + 8];
           if (_c3l8z::P64 < 2) goto c3l8w; else goto c3l8x;
       c3l8w: // global
           I64[Sp - 48] = block_c3l8F_info;
           _s3khJ::P64 = R1;
           _s3khM::P64 = P64[R1 + 7];
           _s3khO::P64 = P64[R1 + 15];
           _s3khP::P64 = P64[R1 + 23];
           _s3khK::I64 = I64[R1 + 31];
           _s3khL::I64 = I64[R1 + 39];
           _s3khN::I64 = I64[R1 + 47];
           R1 = _s3khF::P64;
           I64[Sp - 40] = _s3khL::I64;
           P64[Sp - 32] = _s3khM::P64;
           I64[Sp - 24] = _s3khN::I64;
           P64[Sp - 16] = _s3khO::P64;
           P64[Sp - 8] = _s3khP::P64;
           I64[Sp] = _s3khK::I64;
           P64[Sp + 8] = _s3khJ::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3lb8; else goto c3l8H;
       u3lb8: // global
           call _c3l8F(R1) args: 0, res: 0, upd: 0;
       c3l8H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l8x: // global
           I64[Sp] = block_c3laM_info;
           _s3khJ::P64 = R1;
           _s3ki9::I64 = I64[R1 + 14];
           R1 = _s3khF::P64;
           I64[Sp + 8] = _s3ki9::I64;
           P64[Sp + 16] = _s3khJ::P64;
           if (R1 & 7 != 0) goto u3lb9; else goto c3laO;
       u3lb9: // global
           call _c3laM(R1) args: 0, res: 0, upd: 0;
       c3laO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3lb6: // global
           Sp = Sp + 24;
           call _c3l8y() args: 0, res: 0, upd: 0;
     }
 },
 _c3l8F() //  [R1]
         { info_tbl: [(c3l8F,
                       label: block_c3l8F_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l8F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3l8N; else goto c3l8M;
       c3l8N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l8M: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khN::I64 = I64[Sp + 24];
           _s3khR::I64 = I64[R1 + 7];
           _s3khT::I64 = (_s3khN::I64 + -1) ^ _s3khN::I64 ^ 18446744073709551615;
           if (_s3khR::I64 & _s3khT::I64 == _s3khK::I64 & _s3khT::I64) goto c3laI; else goto c3laJ;
       c3laI: // global
           _s3khO::P64 = P64[Sp + 32];
           _s3khP::P64 = P64[Sp + 40];
           if (_s3khR::I64 == _s3khK::I64) goto c3laG; else goto c3laD;
       c3laG: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3khN::I64;
           R4 = _s3khP::P64;
           R3 = _s3khO::P64;
           R2 = Hp - 7;
           Sp = Sp + 72;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3laD: // global
           Hp = Hp - 16;
           _s3khH::P64 = P64[Sp + 64];
           if (_s3khR::I64 & _s3khN::I64 == 0) goto c3la5; else goto c3l9t;
       c3la5: // global
           I64[Sp] = block_c3la4_info;
           R2 = _s3khO::P64;
           R1 = _s3khH::P64;
           call go1_s3khH_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3l9t: // global
           I64[Sp] = block_c3l9r_info;
           R2 = _s3khP::P64;
           R1 = _s3khH::P64;
           call go1_s3khH_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3laJ: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 72;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3la4() //  [R1]
         { info_tbl: [(c3la4,
                       label: block_c3la4_info
                       rep:StackRep [True, False, True, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3la4: // global
           _s3khP::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3lak; else goto c3lac;
       c3lak: // global
           I64[Sp] = block_c3lai_info;
           R1 = _s3khP::P64;
           if (R1 & 7 != 0) goto u3lbd; else goto c3lal;
       u3lbd: // global
           call _c3lai(R1) args: 0, res: 0, upd: 0;
       c3lal: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lac: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3laf; else goto c3lae;
       c3laf: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lae: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3khP::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lai() //  [R1]
         { info_tbl: [(c3lai,
                       label: block_c3lai_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lai: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khL::I64 = I64[Sp + 8];
           _s3khM::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3lay; else goto c3lar;
       c3lay: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3laB; else goto c3laA;
       c3laB: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3laA: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3khM::P64;
           I64[Hp - 8] = _s3khK::I64;
           I64[Hp] = _s3khL::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lar: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lau; else goto c3lat;
       c3lau: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lat: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3khM::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3khK::I64;
           I64[Hp - 8] = _s3khL::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l9r() //  [R1]
         { info_tbl: [(c3l9r,
                       label: block_c3l9r_info
                       rep:StackRep [True, False, True, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l9r: // global
           _s3khO::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3l9I; else goto c3l9A;
       c3l9I: // global
           I64[Sp] = block_c3l9G_info;
           R1 = _s3khO::P64;
           if (R1 & 7 != 0) goto u3lbc; else goto c3l9J;
       u3lbc: // global
           call _c3l9G(R1) args: 0, res: 0, upd: 0;
       c3l9J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3l9A: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l9D; else goto c3l9C;
       c3l9D: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l9C: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3khO::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l9G() //  [R1]
         { info_tbl: [(c3l9G,
                       label: block_c3l9G_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l9G: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khL::I64 = I64[Sp + 8];
           _s3khM::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3l9W; else goto c3l9P;
       c3l9W: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3l9Z; else goto c3l9Y;
       c3l9Z: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l9Y: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3khM::P64;
           I64[Hp - 8] = _s3khK::I64;
           I64[Hp] = _s3khL::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3l9P: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3l9S; else goto c3l9R;
       c3l9S: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3l9R: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3khM::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3khK::I64;
           I64[Hp - 8] = _s3khL::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3laM() //  [R1]
         { info_tbl: [(c3laM,
                       label: block_c3laM_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3laM: // global
           if (I64[R1 + 7] == I64[Sp + 8]) goto u3lb7; else goto c3laW;
       u3lb7: // global
           Sp = Sp + 24;
           call _c3l8y() args: 0, res: 0, upd: 0;
       c3laW: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3l8y() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3l8y: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.delete_entry() //  [R2, R3]
         { info_tbl: [(c3lbf,
                       label: GHC.Event.PSQ.delete_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lbf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lbj; else goto c3lbi;
       c3lbj: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.delete_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lbi: // global
           I64[Hp - 8] = go1_s3khH_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go1_s3khH_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.920760046 UTC

[section ""data" . GHC.Event.PSQ.deleteView_closure" {
     GHC.Event.PSQ.deleteView_closure:
         const GHC.Event.PSQ.deleteView_info;
 },
 delFrom_s3kih_entry() //  [R1, R2]
         { info_tbl: [(c3lbB,
                       label: delFrom_s3kih_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lbB: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3lbC; else goto c3lbD;
       c3lbC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lbD: // global
           I64[Sp - 24] = block_c3lbt_info;
           _s3kih::P64 = R1;
           _s3kif::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3kif::P64;
           P64[Sp - 8] = _s3kih::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3ley; else goto c3lbu;
       u3ley: // global
           call _c3lbt(R1) args: 0, res: 0, upd: 0;
       c3lbu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lbt() //  [R1]
         { info_tbl: [(c3lbt,
                       label: block_c3lbt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lbt: // global
           _c3lbA::P64 = R1 & 7;
           if (_c3lbA::P64 < 3) goto u3lev; else goto c3lbz;
       u3lev: // global
           _s3kif::P64 = P64[Sp + 8];
           if (_c3lbA::P64 < 2) goto c3lbx; else goto c3lby;
       c3lbx: // global
           I64[Sp - 48] = block_c3lbG_info;
           _s3kij::P64 = R1;
           _s3kim::P64 = P64[R1 + 7];
           _s3kio::P64 = P64[R1 + 15];
           _s3kip::P64 = P64[R1 + 23];
           _s3kik::I64 = I64[R1 + 31];
           _s3kil::I64 = I64[R1 + 39];
           _s3kin::I64 = I64[R1 + 47];
           R1 = _s3kif::P64;
           I64[Sp - 40] = _s3kil::I64;
           P64[Sp - 32] = _s3kim::P64;
           I64[Sp - 24] = _s3kin::I64;
           P64[Sp - 16] = _s3kio::P64;
           P64[Sp - 8] = _s3kip::P64;
           I64[Sp] = _s3kik::I64;
           P64[Sp + 8] = _s3kij::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3lew; else goto c3lbI;
       u3lew: // global
           call _c3lbG(R1) args: 0, res: 0, upd: 0;
       c3lbI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lby: // global
           I64[Sp - 16] = block_c3le5_info;
           _s3kij::P64 = R1;
           _s3kj1::P64 = P64[R1 + 6];
           _s3kiZ::I64 = I64[R1 + 14];
           _s3kj0::I64 = I64[R1 + 22];
           R1 = _s3kif::P64;
           P64[Sp - 8] = _s3kj1::P64;
           I64[Sp] = _s3kj0::I64;
           I64[Sp + 8] = _s3kiZ::I64;
           P64[Sp + 16] = _s3kij::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3lex; else goto c3le7;
       u3lex: // global
           call _c3le5(R1) args: 0, res: 0, upd: 0;
       c3le7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lbz: // global
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lbG() //  [R1]
         { info_tbl: [(c3lbG,
                       label: block_c3lbG_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lbG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lbO; else goto c3lbN;
       c3lbO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lbN: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kin::I64 = I64[Sp + 24];
           _s3kir::I64 = I64[R1 + 7];
           _s3kit::I64 = (_s3kin::I64 + -1) ^ _s3kin::I64 ^ 18446744073709551615;
           if (_s3kir::I64 & _s3kit::I64 == _s3kik::I64 & _s3kit::I64) goto c3le1; else goto c3le2;
       c3le1: // global
           _s3kio::P64 = P64[Sp + 32];
           _s3kip::P64 = P64[Sp + 40];
           if (_s3kir::I64 == _s3kik::I64) goto c3ldW; else goto c3ldM;
       c3ldW: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kin::I64;
           I64[Sp] = block_c3ldP_info;
           R4 = _s3kip::P64;
           R3 = _s3kio::P64;
           R2 = Hp - 7;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c3ldM: // global
           Hp = Hp - 16;
           _s3kih::P64 = P64[Sp + 64];
           if (_s3kir::I64 & _s3kin::I64 == 0) goto c3ldc; else goto c3lcw;
       c3ldc: // global
           I64[Sp] = block_c3ld9_info;
           R2 = _s3kio::P64;
           R1 = _s3kih::P64;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3lcw: // global
           I64[Sp] = block_c3lcs_info;
           R2 = _s3kip::P64;
           R1 = _s3kih::P64;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3le2: // global
           Hp = Hp - 16;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 56];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ldP() //  [R1]
         { info_tbl: [(c3ldP,
                       label: block_c3ldP_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ldP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ldZ; else goto c3ldY;
       c3ldZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ldY: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = R1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ld9() //  [R1, R2]
         { info_tbl: [(c3ld9,
                       label: block_c3ld9_info
                       rep:StackRep [True, False, True, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ld9: // global
           I64[Sp] = block_c3ldb_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3leB; else goto c3ldf;
       u3leB: // global
           call _c3ldb(R1) args: 0, res: 0, upd: 0;
       c3ldf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ldb() //  [R1]
         { info_tbl: [(c3ldb,
                       label: block_c3ldb_info
                       rep:StackRep [True, False, True, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ldb: // global
           _s3kip::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3ldt; else goto c3ldl;
       c3ldt: // global
           I64[Sp] = block_c3ldr_info;
           R1 = _s3kip::P64;
           if (R1 & 7 != 0) goto u3leC; else goto c3ldu;
       u3leC: // global
           call _c3ldr(R1) args: 0, res: 0, upd: 0;
       c3ldu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3ldl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ldo; else goto c3ldn;
       c3ldo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ldn: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3kip::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ldr() //  [R1]
         { info_tbl: [(c3ldr,
                       label: block_c3ldr_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ldr: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kil::I64 = I64[Sp + 8];
           _s3kim::P64 = P64[Sp + 16];
           _s3kiO::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3ldH; else goto c3ldA;
       c3ldH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ldK; else goto c3ldJ;
       c3ldK: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ldJ: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3kim::P64;
           I64[Hp - 8] = _s3kik::I64;
           I64[Hp] = _s3kil::I64;
           R2 = _s3kiO::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3ldA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ldD; else goto c3ldC;
       c3ldD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ldC: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3kim::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3kik::I64;
           I64[Hp - 8] = _s3kil::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3kiO::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lcs() //  [R1, R2]
         { info_tbl: [(c3lcs,
                       label: block_c3lcs_info
                       rep:StackRep [True, False, True, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lcs: // global
           I64[Sp] = block_c3lcu_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3lez; else goto c3lcz;
       u3lez: // global
           call _c3lcu(R1) args: 0, res: 0, upd: 0;
       c3lcz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lcu() //  [R1]
         { info_tbl: [(c3lcu,
                       label: block_c3lcu_info
                       rep:StackRep [True, False, True, False, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lcu: // global
           _s3kio::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3lcN; else goto c3lcF;
       c3lcN: // global
           I64[Sp] = block_c3lcL_info;
           R1 = _s3kio::P64;
           if (R1 & 7 != 0) goto u3leA; else goto c3lcO;
       u3leA: // global
           call _c3lcL(R1) args: 0, res: 0, upd: 0;
       c3lcO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lcF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lcI; else goto c3lcH;
       c3lcI: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lcH: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3kio::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lcL() //  [R1]
         { info_tbl: [(c3lcL,
                       label: block_c3lcL_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lcL: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kil::I64 = I64[Sp + 8];
           _s3kim::P64 = P64[Sp + 16];
           _s3kiG::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3ld1; else goto c3lcU;
       c3ld1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3ld4; else goto c3ld3;
       c3ld4: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ld3: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3kim::P64;
           I64[Hp - 8] = _s3kik::I64;
           I64[Hp] = _s3kil::I64;
           R2 = _s3kiG::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lcU: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lcX; else goto c3lcW;
       c3lcX: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lcW: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3kim::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3kik::I64;
           I64[Hp - 8] = _s3kil::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3kiG::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3le5() //  [R1]
         { info_tbl: [(c3le5,
                       label: block_c3le5_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3le5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3led; else goto c3lec;
       c3led: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lec: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3len; else goto c3leh;
       c3len: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3leh: // global
           Hp = Hp - 56;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.deleteView_entry() //  [R2, R3]
         { info_tbl: [(c3leM,
                       label: GHC.Event.PSQ.deleteView_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3leM: // global
           _s3kig::P64 = R3;
           _s3kif::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3leN; else goto c3leO;
       c3leO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3leQ; else goto c3leP;
       c3leQ: // global
           HpAlloc = 16;
           goto c3leN;
       c3leN: // global
           R3 = _s3kig::P64;
           R2 = _s3kif::P64;
           R1 = GHC.Event.PSQ.deleteView_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3leP: // global
           I64[Hp - 8] = delFrom_s3kih_info;
           P64[Hp] = _s3kif::P64;
           I64[Sp - 8] = block_c3leD_info;
           R2 = _s3kig::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3leD() //  [R1, R2]
         { info_tbl: [(c3leD,
                       label: block_c3leD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3leD: // global
           I64[Sp - 8] = block_c3leF_info;
           _s3kj9::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3kj9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lf8; else goto c3leG;
       u3lf8: // global
           call _c3leF(R1) args: 0, res: 0, upd: 0;
       c3leG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3leF() //  [R1]
         { info_tbl: [(c3leF,
                       label: block_c3leF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3leF: // global
           if (R1 & 7 == 1) goto c3leJ; else goto c3leK;
       c3leJ: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3leK: // global
           I64[Sp] = block_c3leX_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3lf9; else goto c3leY;
       u3lf9: // global
           call _c3leX(R1) args: 0, res: 0, upd: 0;
       c3leY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3leX() //  [R1]
         { info_tbl: [(c3leX,
                       label: block_c3leX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3leX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3lf7; else goto c3lf6;
       c3lf7: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lf6: // global
           _s3kje::P64 = P64[R1 + 7];
           _s3kjf::P64 = P64[R1 + 15];
           I64[Hp - 40] = (,,)_con_info;
           P64[Hp - 32] = _s3kje::P64;
           P64[Hp - 24] = _s3kjf::P64;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.933368208 UTC

[section ""data" . GHC.Event.PSQ.$wsize_closure" {
     GHC.Event.PSQ.$wsize_closure:
         const GHC.Event.PSQ.$wsize_info;
 },
 GHC.Event.PSQ.$wsize_entry() //  [R2]
         { info_tbl: [(c3lfm,
                       label: GHC.Event.PSQ.$wsize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lfm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3lfn; else goto c3lfo;
       c3lfn: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.$wsize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lfo: // global
           I64[Sp - 8] = block_c3lfe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lfN; else goto c3lff;
       u3lfN: // global
           call _c3lfe(R1) args: 0, res: 0, upd: 0;
       c3lff: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lfe() //  [R1]
         { info_tbl: [(c3lfe,
                       label: block_c3lfe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lfe: // global
           _c3lfl::P64 = R1 & 7;
           if (_c3lfl::P64 < 3) goto u3lfM; else goto c3lfk;
       u3lfM: // global
           if (_c3lfl::P64 < 2) goto c3lfi; else goto c3lfj;
       c3lfi: // global
           I64[Sp - 8] = block_c3lfr_info;
           R2 = P64[R1 + 15];
           P64[Sp] = P64[R1 + 23];
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
       c3lfj: // global
           R1 = 1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lfk: // global
           R1 = 0;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lfr() //  [R1]
         { info_tbl: [(c3lfr,
                       label: block_c3lfr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lfr: // global
           I64[Sp] = block_c3lfv_info;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = R1;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lfv() //  [R1]
         { info_tbl: [(c3lfv,
                       label: block_c3lfv_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lfv: // global
           R1 = I64[Sp + 8] + (R1 + 1);
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.93600563 UTC

[section ""data" . GHC.Event.PSQ.size_closure" {
     GHC.Event.PSQ.size_closure:
         const GHC.Event.PSQ.size_info;
 },
 GHC.Event.PSQ.size_entry() //  [R2]
         { info_tbl: [(c3lfU,
                       label: GHC.Event.PSQ.size_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lfU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lfY; else goto c3lfZ;
       c3lfY: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.size_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lfZ: // global
           I64[Sp - 8] = block_c3lfS_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lfS() //  [R1]
         { info_tbl: [(c3lfS,
                       label: block_c3lfS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lfS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lg2; else goto c3lg1;
       c3lg2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3lg1: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.945026724 UTC

[section ""data" . GHC.Event.PSQ.$wunsafeInsertNew_closure" {
     GHC.Event.PSQ.$wunsafeInsertNew_closure:
         const GHC.Event.PSQ.$wunsafeInsertNew_info;
 },
 GHC.Event.PSQ.$wunsafeInsertNew_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lg4: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.$wunsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3lgg,
                       label: GHC.Event.PSQ.$wunsafeInsertNew_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [True, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lgg: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3lgh; else goto c3lgi;
       c3lgh: // global
           R1 = GHC.Event.PSQ.$wunsafeInsertNew_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3lgi: // global
           I64[Sp - 32] = block_c3lg8_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3lnM; else goto c3lg9;
       u3lnM: // global
           call _c3lg8(R1) args: 0, res: 0, upd: 0;
       c3lg9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lg8() //  [R1]
         { info_tbl: [(c3lg8,
                       label: block_c3lg8_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lg8: // global
           _s3kjz::P64 = P64[Sp + 24];
           _c3lgf::P64 = R1 & 7;
           if (_c3lgf::P64 < 3) goto u3lnI; else goto c3lge;
       u3lnI: // global
           _s3kjx::I64 = I64[Sp + 8];
           _s3kjy::I64 = I64[Sp + 16];
           if (_c3lgf::P64 < 2) goto c3lgc; else goto c3lgd;
       c3lgc: // global
           _s3kjE::P64 = P64[R1 + 7];
           _s3kjG::P64 = P64[R1 + 15];
           _s3kjH::P64 = P64[R1 + 23];
           _s3kjC::I64 = I64[R1 + 31];
           _s3kjD::I64 = I64[R1 + 39];
           _s3kjF::I64 = I64[R1 + 47];
           _s3kjJ::I64 = (_s3kjF::I64 + -1) ^ _s3kjF::I64 ^ 18446744073709551615;
           if (_s3kjx::I64 & _s3kjJ::I64 == _s3kjC::I64 & _s3kjJ::I64) goto c3lit; else goto c3ll8;
       c3lit: // global
           if (_s3kjy::I64 == _s3kjD::I64) goto c3lir; else goto c3lik;
       c3lir: // global
           _s3kjI::I64 = _s3kjF::I64;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kjC::I64)) goto s3kjR; else goto s3kjW;
       c3lik: // global
           _s3kjI::I64 = _s3kjF::I64;
           if (_s3kjy::I64 > _s3kjD::I64) goto s3kjR; else goto s3kjW;
       s3kjR: // global
           if (_s3kjx::I64 & _s3kjI::I64 == 0) goto c3lhm; else goto c3lh8;
       c3lhm: // global
           I64[Sp - 16] = block_c3lhh_info;
           R5 = _s3kjG::P64;
           R4 = _s3kjz::P64;
           R3 = _s3kjy::I64;
           R2 = _s3kjx::I64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjF::I64;
           P64[Sp + 8] = _s3kjE::P64;
           I64[Sp + 16] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       c3lh8: // global
           I64[Sp - 16] = block_c3lh2_info;
           R5 = _s3kjH::P64;
           R4 = _s3kjz::P64;
           R3 = _s3kjy::I64;
           R2 = _s3kjx::I64;
           P64[Sp - 8] = _s3kjG::P64;
           I64[Sp] = _s3kjF::I64;
           P64[Sp + 8] = _s3kjE::P64;
           I64[Sp + 16] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       s3kjW: // global
           if (_s3kjC::I64 & _s3kjI::I64 == 0) goto c3li5; else goto c3lhO;
       c3li5: // global
           I64[Sp - 40] = block_c3lhY_info;
           R1 = _s3kjz::P64;
           P64[Sp - 32] = _s3kjE::P64;
           I64[Sp - 24] = _s3kjF::I64;
           P64[Sp - 16] = _s3kjG::P64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3lhO: // global
           I64[Sp - 40] = block_c3lhG_info;
           R1 = _s3kjz::P64;
           P64[Sp - 32] = _s3kjE::P64;
           I64[Sp - 24] = _s3kjF::I64;
           P64[Sp - 16] = _s3kjG::P64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3ll8: // global
           if (_s3kjy::I64 == _s3kjD::I64) goto c3ll7; else goto c3ll0;
       c3ll7: // global
           _s3kjB::P64 = R1;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kjC::I64)) goto s3kk6; else goto s3kkq;
       c3ll0: // global
           _s3kjB::P64 = R1;
           if (_s3kjy::I64 > _s3kjD::I64) goto s3kk6; else goto s3kkq;
       s3kk6: // global
           (_c3liK::I64) = call MO_Clz W64(_s3kjC::I64 ^ _s3kjx::I64);
           _s3kk7::I64 = 1 << 63 - _c3liK::I64;
           _s3kkh::I64 = _s3kk7::I64 & _s3kjx::I64;
           if (_s3kkh::I64 != 0) goto u3lnJ; else goto c3ljH;
       u3lnJ: // global
           I64[Sp - 56] = _s3kjD::I64;
           P64[Sp - 48] = _s3kjE::P64;
           I64[Sp - 40] = _s3kjF::I64;
           P64[Sp - 32] = _s3kjG::P64;
           P64[Sp - 24] = _s3kjH::P64;
           I64[Sp - 16] = _s3kk7::I64;
           I64[Sp - 8] = _s3kkh::I64;
           I64[Sp] = _s3kjC::I64;
           Sp = Sp - 56;
           call _c3lja() args: 0, res: 0, upd: 0;
       c3ljH: // global
           I64[Sp - 48] = block_c3ljy_info;
           R1 = _s3kjz::P64;
           P64[Sp - 40] = _s3kjE::P64;
           I64[Sp - 32] = _s3kjF::I64;
           P64[Sp - 24] = _s3kjG::P64;
           P64[Sp - 16] = _s3kjH::P64;
           I64[Sp - 8] = _s3kk7::I64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3kkq: // global
           (_c3lk4::I64) = call MO_Clz W64(_s3kjx::I64 ^ _s3kjC::I64);
           _s3kkr::I64 = 1 << 63 - _c3lk4::I64;
           if (_s3kkr::I64 & _s3kjC::I64 == 0) goto c3lkM; else goto c3lkA;
       c3lkM: // global
           I64[Sp - 8] = block_c3lkJ_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kkr::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3lkA: // global
           I64[Sp - 8] = block_c3lkw_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kkr::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3lgd: // global
           _s3kkJ::P64 = P64[R1 + 6];
           _s3kkH::I64 = I64[R1 + 14];
           _s3kkI::I64 = I64[R1 + 22];
           if (_s3kjy::I64 == _s3kkI::I64) goto c3lny; else goto c3lnr;
       c3lny: // global
           _s3kjB::P64 = R1;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kkH::I64)) goto s3kkK; else goto s3kl0;
       c3lnr: // global
           _s3kjB::P64 = R1;
           if (_s3kjy::I64 > _s3kkI::I64) goto s3kkK; else goto s3kl0;
       s3kkK: // global
           (_c3llr::I64) = call MO_Clz W64(_s3kkH::I64 ^ _s3kjx::I64);
           _s3kkL::I64 = 1 << 63 - _c3llr::I64;
           if (_s3kkL::I64 & _s3kjx::I64 == 0) goto c3lmb; else goto c3llY;
       c3lmb: // global
           I64[Sp - 24] = block_c3lm7_info;
           R1 = _s3kjz::P64;
           P64[Sp - 16] = _s3kkJ::P64;
           I64[Sp - 8] = _s3kkL::I64;
           I64[Sp] = _s3kkI::I64;
           I64[Sp + 24] = _s3kkH::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3llY: // global
           I64[Sp - 24] = block_c3llT_info;
           R1 = _s3kjz::P64;
           P64[Sp - 16] = _s3kkJ::P64;
           I64[Sp - 8] = _s3kkL::I64;
           I64[Sp] = _s3kkI::I64;
           I64[Sp + 24] = _s3kkH::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3kl0: // global
           (_c3lmv::I64) = call MO_Clz W64(_s3kjx::I64 ^ _s3kkH::I64);
           _s3kl1::I64 = 1 << 63 - _c3lmv::I64;
           if (_s3kl1::I64 & _s3kkH::I64 == 0) goto c3lnd; else goto c3ln1;
       c3lnd: // global
           I64[Sp - 8] = block_c3lna_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kl1::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3ln1: // global
           I64[Sp - 8] = block_c3lmX_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kl1::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3lge: // global
           I64[Sp] = block_c3lnB_info;
           R1 = _s3kjz::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lhh() //  [R1]
         { info_tbl: [(c3lhh,
                       label: block_c3lhh_info
                       rep:StackRep [False, True, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lhh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lhq; else goto c3lhp;
       c3lhq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lhp: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lh2() //  [R1]
         { info_tbl: [(c3lh2,
                       label: block_c3lh2_info
                       rep:StackRep [False, True, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lh2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lhc; else goto c3lhb;
       c3lhc: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lhb: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lhY() //  [R1]
         { info_tbl: [(c3lhY,
                       label: block_c3lhY_info
                       rep:StackRep [False, True, False, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lhY: // global
           _s3kjE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3li0_info;
           R5 = P64[Sp + 24];
           R4 = _s3kjE::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3li0() //  [R1]
         { info_tbl: [(c3li0,
                       label: block_c3li0_info
                       rep:StackRep [True, True, False, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3li0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lia; else goto c3li9;
       c3lia: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3li9: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lhG() //  [R1]
         { info_tbl: [(c3lhG,
                       label: block_c3lhG_info
                       rep:StackRep [False, True, False, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lhG: // global
           _s3kjE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3lhI_info;
           R5 = P64[Sp + 32];
           R4 = _s3kjE::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lhI() //  [R1]
         { info_tbl: [(c3lhI,
                       label: block_c3lhI_info
                       rep:StackRep [True, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lhI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lhT; else goto c3lhS;
       c3lhT: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lhS: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lja() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lja: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ljp; else goto c3ljo;
       c3ljp: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c3lj9_info;
           R1 = I64[Sp + 48];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3ljo: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp - 8] = block_c3ljd_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           Sp = Sp - 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lj9() //  [R1]
         { info_tbl: [(c3lj9,
                       label: block_c3lj9_info
                       rep:StackRep [True, False, True, False, False, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lj9: // global
           I64[Sp + 56] = R1;
           Sp = Sp + 8;
           call _c3lja() args: 0, res: 0, upd: 0;
     }
 },
 _c3ljd() //  [R1]
         { info_tbl: [(c3ljd,
                       label: block_c3ljd_info
                       rep:StackRep [True, False, True, True, True, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ljd: // global
           I64[Sp] = block_c3ljh_info;
           _s3kkj::P64 = R1;
           R1 = P64[Sp + 88];
           P64[Sp + 88] = _s3kkj::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ljh() //  [R1]
         { info_tbl: [(c3ljh,
                       label: block_c3ljh_info
                       rep:StackRep [True, False, True, True, True, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ljh: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ljt; else goto c3ljs;
       c3ljt: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ljs: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 80];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 64];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3ljy() //  [R1]
         { info_tbl: [(c3ljy,
                       label: block_c3ljy_info
                       rep:StackRep [False, True, False, False, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ljy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ljL; else goto c3ljK;
       c3ljL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ljK: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp] = block_c3ljB_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           P64[Sp + 32] = R1;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ljB() //  [R1]
         { info_tbl: [(c3ljB,
                       label: block_c3ljB_info
                       rep:StackRep [False, True, True, False, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ljB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3ljO; else goto c3ljN;
       c3ljO: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ljN: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = P64[Sp + 32];
           I64[Hp - 64] = I64[Sp + 56];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lkJ() //  [R1]
         { info_tbl: [(c3lkJ,
                       label: block_c3lkJ_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lkJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lkQ; else goto c3lkP;
       c3lkQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lkP: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lkw() //  [R1]
         { info_tbl: [(c3lkw,
                       label: block_c3lkw_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lkw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lkE; else goto c3lkD;
       c3lkE: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lkD: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lm7() //  [R1]
         { info_tbl: [(c3lm7,
                       label: block_c3lm7_info
                       rep:StackRep [False, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lm7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3lmf; else goto c3lme;
       c3lmf: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lme: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3llT() //  [R1]
         { info_tbl: [(c3llT,
                       label: block_c3llT_info
                       rep:StackRep [False, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3llT: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3lm2; else goto c3lm1;
       c3lm2: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lm1: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lna() //  [R1]
         { info_tbl: [(c3lna,
                       label: block_c3lna_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lna: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lnh; else goto c3lng;
       c3lnh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lng: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lmX() //  [R1]
         { info_tbl: [(c3lmX,
                       label: block_c3lmX_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lmX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3ln5; else goto c3ln4;
       c3ln5: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ln4: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lnB() //  [R1]
         { info_tbl: [(c3lnB,
                       label: block_c3lnB_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lnB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lnH; else goto c3lnG;
       c3lnH: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lnG: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.961840196 UTC

[section ""data" . GHC.Event.PSQ.unsafeInsertNew_closure" {
     GHC.Event.PSQ.unsafeInsertNew_closure:
         const GHC.Event.PSQ.unsafeInsertNew_info;
 },
 GHC.Event.PSQ.unsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3lnV,
                       label: GHC.Event.PSQ.unsafeInsertNew_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lnV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3lnZ; else goto c3lo0;
       c3lnZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.unsafeInsertNew_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lo0: // global
           I64[Sp - 32] = block_c3lnS_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3lo8; else goto c3lnT;
       u3lo8: // global
           call _c3lnS(R1) args: 0, res: 0, upd: 0;
       c3lnT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lnS() //  [R1]
         { info_tbl: [(c3lnS,
                       label: block_c3lnS_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lnS: // global
           I64[Sp] = block_c3lnY_info;
           _s3kln::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kln::I64;
           if (R1 & 7 != 0) goto u3lo7; else goto c3lo2;
       u3lo7: // global
           call _c3lnY(R1) args: 0, res: 0, upd: 0;
       c3lo2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lnY() //  [R1]
         { info_tbl: [(c3lnY,
                       label: block_c3lnY_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lnY: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.964534113 UTC

[section ""data" . GHC.Event.PSQ.insert_closure" {
     GHC.Event.PSQ.insert_closure:
         const GHC.Event.PSQ.insert_info;
 },
 GHC.Event.PSQ.insert_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3log,
                       label: GHC.Event.PSQ.insert_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3log: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3lop; else goto c3loq;
       c3lop: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.insert_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3loq: // global
           I64[Sp - 32] = block_c3lod_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3loy; else goto c3loe;
       u3loy: // global
           call _c3lod(R1) args: 0, res: 0, upd: 0;
       c3loe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lod() //  [R1]
         { info_tbl: [(c3lod,
                       label: block_c3lod_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lod: // global
           I64[Sp - 8] = block_c3loj_info;
           _s3klu::P64 = R1;
           _s3klv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s3klv::I64;
           P64[Sp + 8] = _s3klu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lox; else goto c3lok;
       u3lox: // global
           call _c3loj(R1) args: 0, res: 0, upd: 0;
       c3lok: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3loj() //  [R1]
         { info_tbl: [(c3loj,
                       label: block_c3loj_info
                       rep:StackRep [True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3loj: // global
           I64[Sp] = block_c3loo_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 16];
           I64[Sp + 32] = I64[R1 + 7];
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3loo() //  [R1]
         { info_tbl: [(c3loo,
                       label: block_c3loo_info
                       rep:StackRep [True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3loo: // global
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = I64[Sp + 32];
           R2 = I64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.967810458 UTC

[section ""data" . go_r3kd8_closure" {
     go_r3kd8_closure:
         const go_r3kd8_info;
 },
 go_r3kd8_entry() //  [R2]
         { info_tbl: [(c3loK,
                       label: go_r3kd8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3loK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3loL; else goto c3loM;
       c3loL: // global
           R2 = R2;
           R1 = go_r3kd8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3loM: // global
           I64[Sp - 8] = block_c3loD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lpd; else goto c3loE;
       u3lpd: // global
           call _c3loD(R1) args: 0, res: 0, upd: 0;
       c3loE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3loD() //  [R1]
         { info_tbl: [(c3loD,
                       label: block_c3loD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3loD: // global
           if (R1 & 7 == 1) goto c3loH; else goto c3loI;
       c3loH: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3loI: // global
           I64[Sp - 8] = block_c3loS_info;
           _s3klC::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3klC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lpc; else goto c3loT;
       u3lpc: // global
           call _c3loS(R1) args: 0, res: 0, upd: 0;
       c3loT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3loS() //  [R1]
         { info_tbl: [(c3loS,
                       label: block_c3loS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3loS: // global
           I64[Sp - 16] = block_c3loX_info;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 7];
           I64[Sp] = I64[R1 + 23];
           I64[Sp + 8] = I64[R1 + 15];
           Sp = Sp - 16;
           call go_r3kd8_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3loX() //  [R1]
         { info_tbl: [(c3loX,
                       label: block_c3loX_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3loX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lp7; else goto c3lp6;
       c3lp7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lp6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3lp2_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lp2() //  [R1]
         { info_tbl: [(c3lp2,
                       label: block_c3lp2_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lp2: // global
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.970867066 UTC

[section ""data" . GHC.Event.PSQ.fromList_closure" {
     GHC.Event.PSQ.fromList_closure:
         const GHC.Event.PSQ.fromList_info;
 },
 GHC.Event.PSQ.fromList_entry() //  [R2]
         { info_tbl: [(c3lpi,
                       label: GHC.Event.PSQ.fromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lpi: // global
           R2 = R2;
           call go_r3kd8_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.972690074 UTC

[section ""data" . GHC.Event.PSQ.adjust_closure" {
     GHC.Event.PSQ.adjust_closure:
         const GHC.Event.PSQ.adjust_info;
 },
 GHC.Event.PSQ.adjust_entry() //  [R2, R3, R4]
         { info_tbl: [(c3lpv,
                       label: GHC.Event.PSQ.adjust_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lpv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3lpw; else goto c3lpx;
       c3lpw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.adjust_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lpx: // global
           I64[Sp - 32] = block_c3lpp_info;
           _s3klL::P64 = R3;
           R3 = R4;
           _s3klK::P64 = R2;
           R2 = _s3klL::P64;
           P64[Sp - 24] = _s3klK::P64;
           P64[Sp - 16] = _s3klL::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Event.PSQ.deleteView_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lpp() //  [R1]
         { info_tbl: [(c3lpp,
                       label: block_c3lpp_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lpp: // global
           if (R1 & 7 == 1) goto c3lps; else goto c3lpt;
       c3lps: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3lpt: // global
           I64[Sp] = block_c3lpD_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3lpV; else goto c3lpE;
       u3lpV: // global
           call _c3lpD(R1) args: 0, res: 0, upd: 0;
       c3lpE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lpD() //  [R1]
         { info_tbl: [(c3lpD,
                       label: block_c3lpD_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lpD: // global
           I64[Sp - 8] = block_c3lpI_info;
           _s3klQ::P64 = P64[R1 + 7];
           _s3klR::P64 = P64[R1 + 15];
           _s3klS::P64 = P64[R1 + 23];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3klS::P64;
           P64[Sp + 16] = _s3klR::P64;
           P64[Sp + 24] = _s3klQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lpW; else goto c3lpJ;
       u3lpW: // global
           call _c3lpI(R1) args: 0, res: 0, upd: 0;
       c3lpJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lpI() //  [R1]
         { info_tbl: [(c3lpI,
                       label: block_c3lpI_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lpI: // global
           I64[Sp] = block_c3lpN_info;
           R2 = P64[Sp + 32];
           _s3klU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s3klU::I64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lpN() //  [R1]
         { info_tbl: [(c3lpN,
                       label: block_c3lpN_info
                       rep:StackRep [False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lpN: // global
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 32];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.975387056 UTC

[section ""data" . GHC.Event.PSQ.Bin_closure" {
     GHC.Event.PSQ.Bin_closure:
         const GHC.Event.PSQ.Bin_info;
 },
 GHC.Event.PSQ.Bin_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lpY: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.PSQ.Bin_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.Bin_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3lq3,
                       label: GHC.Event.PSQ.Bin_info
                       rep:HeapRep static {
                             Fun {arity: 6
                                  fun_type: ArgGen [True, True, False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lq3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lq7; else goto c3lq6;
       c3lq7: // global
           HpAlloc = 56;
           R1 = GHC.Event.PSQ.Bin_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c3lq6: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R5;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.977099399 UTC

[section ""data" . GHC.Event.PSQ.Tip_closure" {
     GHC.Event.PSQ.Tip_closure:
         const GHC.Event.PSQ.Tip_info;
 },
 GHC.Event.PSQ.Tip_entry() //  [R2, R3, R4]
         { info_tbl: [(c3lqd,
                       label: GHC.Event.PSQ.Tip_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lqh; else goto c3lqg;
       c3lqh: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.Tip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lqg: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.978076699 UTC

[section ""data" . GHC.Event.PSQ.Nil_closure" {
     GHC.Event.PSQ.Nil_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.979045436 UTC

[section ""data" . GHC.Event.PSQ.E_closure" {
     GHC.Event.PSQ.E_closure:
         const GHC.Event.PSQ.E_info;
 },
 GHC.Event.PSQ.E_entry() //  [R2, R3, R4]
         { info_tbl: [(c3lqn,
                       label: GHC.Event.PSQ.E_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lqr; else goto c3lqq;
       c3lqr: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.E_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lqq: // global
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.980178713 UTC

[GHC.Event.PSQ.Bin_con_entry() //  [R1]
         { info_tbl: [(c3lqs,
                       label: GHC.Event.PSQ.Bin_con_info
                       rep:HeapRep 3 ptrs 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,66,105,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.981478045 UTC

[GHC.Event.PSQ.Tip_con_entry() //  [R1]
         { info_tbl: [(c3lqu,
                       label: GHC.Event.PSQ.Tip_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,84,105,112]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqu: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.982585085 UTC

[GHC.Event.PSQ.Nil_con_entry() //  [R1]
         { info_tbl: [(c3lqw,
                       label: GHC.Event.PSQ.Nil_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,78,105,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqw: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.983356097 UTC

[GHC.Event.PSQ.E_con_entry() //  [R1]
         { info_tbl: [(c3lqy,
                       label: GHC.Event.PSQ.E_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,69]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqy: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.984379472 UTC

[section ""relreadonly" . S3kTe_srt" { S3kTe_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:57:56.985540426 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:57:56.987688291 UTC

[section ""data" . GHC.Event.PSQ.$WBin_closure" {
     GHC.Event.PSQ.$WBin_closure:
         const GHC.Event.PSQ.$WBin_info;
 },
 GHC.Event.PSQ.$WBin_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3lqH,
                       label: GHC.Event.PSQ.$WBin_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3lr7; else goto c3lr8;
       c3lr7: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WBin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3lr8: // global
           I64[Sp - 40] = block_c3lqE_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3lri; else goto c3lqF;
       u3lri: // global
           call _c3lqE(R1) args: 0, res: 0, upd: 0;
       c3lqF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lqE() //  [R1]
         { info_tbl: [(c3lqE,
                       label: block_c3lqE_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqE: // global
           I64[Sp] = block_c3lqK_info;
           _s3kdh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdh::I64;
           if (R1 & 7 != 0) goto u3lrh; else goto c3lqL;
       u3lrh: // global
           call _c3lqK(R1) args: 0, res: 0, upd: 0;
       c3lqL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lqK() //  [R1]
         { info_tbl: [(c3lqK,
                       label: block_c3lqK_info
                       rep:StackRep [True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqK: // global
           I64[Sp] = block_c3lqP_info;
           _s3kdj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3kdj::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lqP() //  [R1]
         { info_tbl: [(c3lqP,
                       label: block_c3lqP_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqP: // global
           I64[Sp] = block_c3lqR_info;
           _s3kdk::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3kdk::P64;
           if (R1 & 7 != 0) goto u3lrj; else goto c3lqS;
       u3lrj: // global
           call _c3lqR(R1) args: 0, res: 0, upd: 0;
       c3lqS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lqR() //  [R1]
         { info_tbl: [(c3lqR,
                       label: block_c3lqR_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqR: // global
           I64[Sp] = block_c3lqW_info;
           _s3kdm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3kdm::I64;
           if (R1 & 7 != 0) goto u3lrk; else goto c3lqX;
       u3lrk: // global
           call _c3lqW(R1) args: 0, res: 0, upd: 0;
       c3lqX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lqW() //  [R1]
         { info_tbl: [(c3lqW,
                       label: block_c3lqW_info
                       rep:StackRep [True, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lqW: // global
           I64[Sp] = block_c3lr1_info;
           _s3kdn::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 40] = _s3kdn::P64;
           if (R1 & 7 != 0) goto u3lrl; else goto c3lr2;
       u3lrl: // global
           call _c3lr1(R1) args: 0, res: 0, upd: 0;
       c3lr2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lr1() //  [R1]
         { info_tbl: [(c3lr1,
                       label: block_c3lr1_info
                       rep:StackRep [True, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lr1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lrg; else goto c3lrf;
       c3lrg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lrf: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 32];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.006605379 UTC

[section ""data" . GHC.Event.PSQ.$WTip_closure" {
     GHC.Event.PSQ.$WTip_closure:
         const GHC.Event.PSQ.$WTip_info;
 },
 GHC.Event.PSQ.$WTip_entry() //  [R2, R3, R4]
         { info_tbl: [(c3ls1,
                       label: GHC.Event.PSQ.$WTip_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ls1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3lsc; else goto c3lsd;
       c3lsc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WTip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lsd: // global
           I64[Sp - 24] = block_c3lrY_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lsk; else goto c3lrZ;
       u3lsk: // global
           call _c3lrY(R1) args: 0, res: 0, upd: 0;
       c3lrZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lrY() //  [R1]
         { info_tbl: [(c3lrY,
                       label: block_c3lrY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lrY: // global
           I64[Sp] = block_c3ls4_info;
           _s3kdt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdt::I64;
           if (R1 & 7 != 0) goto u3lsj; else goto c3ls5;
       u3lsj: // global
           call _c3ls4(R1) args: 0, res: 0, upd: 0;
       c3ls5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ls4() //  [R1]
         { info_tbl: [(c3ls4,
                       label: block_c3ls4_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ls4: // global
           I64[Sp] = block_c3ls9_info;
           _s3kdv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3kdv::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ls9() //  [R1]
         { info_tbl: [(c3ls9,
                       label: block_c3ls9_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ls9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lsi; else goto c3lsh;
       c3lsi: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lsh: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.01641014 UTC

[section ""data" . GHC.Event.PSQ.$WE_closure" {
     GHC.Event.PSQ.$WE_closure:
         const GHC.Event.PSQ.$WE_info;
 },
 GHC.Event.PSQ.$WE_entry() //  [R2, R3, R4]
         { info_tbl: [(c3lsL,
                       label: GHC.Event.PSQ.$WE_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lsL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3lsU; else goto c3lsV;
       c3lsU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WE_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lsV: // global
           I64[Sp - 24] = block_c3lsI_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lt1; else goto c3lsJ;
       u3lt1: // global
           call _c3lsI(R1) args: 0, res: 0, upd: 0;
       c3lsJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lsI() //  [R1]
         { info_tbl: [(c3lsI,
                       label: block_c3lsI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lsI: // global
           I64[Sp] = block_c3lsO_info;
           _s3kdB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kdB::I64;
           if (R1 & 7 != 0) goto u3lt0; else goto c3lsP;
       u3lt0: // global
           call _c3lsO(R1) args: 0, res: 0, upd: 0;
       c3lsP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lsO() //  [R1]
         { info_tbl: [(c3lsO,
                       label: block_c3lsO_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lsO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lsZ; else goto c3lsY;
       c3lsZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lsY: // global
           _s3kdD::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kdD::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.024949359 UTC

[section ""data" . GHC.Event.PSQ.value_closure" {
     GHC.Event.PSQ.value_closure:
         const GHC.Event.PSQ.value_info;
 },
 GHC.Event.PSQ.value_entry() //  [R2]
         { info_tbl: [(c3ltp,
                       label: GHC.Event.PSQ.value_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ltp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ltq; else goto c3ltr;
       c3ltq: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.value_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ltr: // global
           I64[Sp - 8] = block_c3ltm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ltv; else goto c3ltn;
       u3ltv: // global
           call _c3ltm(R1) args: 0, res: 0, upd: 0;
       c3ltn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ltm() //  [R1]
         { info_tbl: [(c3ltm,
                       label: block_c3ltm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ltm: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.030575863 UTC

[section ""data" . GHC.Event.PSQ.prio_closure" {
     GHC.Event.PSQ.prio_closure:
         const GHC.Event.PSQ.prio_info;
 },
 GHC.Event.PSQ.prio_entry() //  [R2]
         { info_tbl: [(c3ltM,
                       label: GHC.Event.PSQ.prio_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ltM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3ltQ; else goto c3ltR;
       c3ltQ: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.prio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3ltR: // global
           I64[Sp - 8] = block_c3ltJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ltV; else goto c3ltK;
       u3ltV: // global
           call _c3ltJ(R1) args: 0, res: 0, upd: 0;
       c3ltK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ltJ() //  [R1]
         { info_tbl: [(c3ltJ,
                       label: block_c3ltJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ltJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ltU; else goto c3ltT;
       c3ltU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ltT: // global
           _s3kdM::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s3kdM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.038330499 UTC

[section ""data" . GHC.Event.PSQ.key_closure" {
     GHC.Event.PSQ.key_closure:
         const GHC.Event.PSQ.key_info;
 },
 GHC.Event.PSQ.key_entry() //  [R2]
         { info_tbl: [(c3lud,
                       label: GHC.Event.PSQ.key_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lud: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3luh; else goto c3lui;
       c3luh: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.key_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lui: // global
           I64[Sp - 8] = block_c3lua_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lum; else goto c3lub;
       u3lum: // global
           call _c3lua(R1) args: 0, res: 0, upd: 0;
       c3lub: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lua() //  [R1]
         { info_tbl: [(c3lua,
                       label: block_c3lua_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lua: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lul; else goto c3luk;
       c3lul: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3luk: // global
           _s3kdQ::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kdQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.045400879 UTC

[section ""data" . GHC.Event.PSQ.null_closure" {
     GHC.Event.PSQ.null_closure:
         const GHC.Event.PSQ.null_info;
 },
 GHC.Event.PSQ.null_entry() //  [R2]
         { info_tbl: [(c3luI,
                       label: GHC.Event.PSQ.null_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3luI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3luJ; else goto c3luK;
       c3luJ: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.null_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3luK: // global
           I64[Sp - 8] = block_c3luB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3luR; else goto c3luC;
       u3luR: // global
           call _c3luB(R1) args: 0, res: 0, upd: 0;
       c3luC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3luB() //  [R1]
         { info_tbl: [(c3luB,
                       label: block_c3luB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3luB: // global
           if (R1 & 7 == 3) goto c3luG; else goto c3luF;
       c3luG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3luF: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.05165226 UTC

[section ""data" . GHC.Event.PSQ.findMin_closure" {
     GHC.Event.PSQ.findMin_closure:
         const GHC.Event.PSQ.findMin_info;
 },
 GHC.Event.PSQ.findMin_entry() //  [R2]
         { info_tbl: [(c3lvh,
                       label: GHC.Event.PSQ.findMin_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lvh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lvi; else goto c3lvj;
       c3lvi: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.findMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lvj: // global
           I64[Sp - 8] = block_c3lv9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lvC; else goto c3lva;
       u3lvC: // global
           call _c3lv9(R1) args: 0, res: 0, upd: 0;
       c3lva: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lv9() //  [R1]
         { info_tbl: [(c3lv9,
                       label: block_c3lv9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lv9: // global
           _c3lvg::P64 = R1 & 7;
           if (_c3lvg::P64 < 3) goto u3lvB; else goto c3lvf;
       u3lvB: // global
           if (_c3lvg::P64 < 2) goto c3lvd; else goto c3lve;
       c3lvd: // global
           Hp = Hp + 48;
           _s3kdW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3lvx; else goto c3lvp;
       c3lvp: // global
           _s3kdZ::P64 = P64[_s3kdW::P64 + 7];
           _s3kdX::I64 = I64[_s3kdW::P64 + 31];
           _s3kdY::I64 = I64[_s3kdW::P64 + 39];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3kdZ::P64;
           I64[Hp - 24] = _s3kdX::I64;
           I64[Hp - 16] = _s3kdY::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lve: // global
           Hp = Hp + 48;
           _s3kdW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3lvx; else goto c3lvw;
       c3lvx: // global
           HpAlloc = 48;
           R1 = _s3kdW::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lvw: // global
           _s3ke6::P64 = P64[_s3kdW::P64 + 6];
           _s3ke4::I64 = I64[_s3kdW::P64 + 14];
           _s3ke5::I64 = I64[_s3kdW::P64 + 22];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3ke6::P64;
           I64[Hp - 24] = _s3ke4::I64;
           I64[Hp - 16] = _s3ke5::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lvf: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.058755109 UTC

[section ""data" . GHC.Event.PSQ.empty_closure" {
     GHC.Event.PSQ.empty_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.060615736 UTC

[section ""data" . GHC.Event.PSQ.singleton_closure" {
     GHC.Event.PSQ.singleton_closure:
         const GHC.Event.PSQ.singleton_info;
 },
 GHC.Event.PSQ.singleton_entry() //  [R2, R3, R4]
         { info_tbl: [(c3lvX,
                       label: GHC.Event.PSQ.singleton_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lvX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.PSQ.$WTip_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.064985786 UTC

[section ""data" . GHC.Event.PSQ.toList_go_closure" {
     GHC.Event.PSQ.toList_go_closure:
         const GHC.Event.PSQ.toList_go_info;
 },
 sat_s3kei_entry() //  [R1]
         { info_tbl: [(c3lwl,
                       label: sat_s3kei_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lwl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3lwm; else goto c3lwn;
       c3lwm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lwn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3kej_entry() //  [R1]
         { info_tbl: [(c3lwo,
                       label: sat_s3kej_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lwo: // global
           _s3kej::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3lwp; else goto c3lwq;
       c3lwq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lws; else goto c3lwr;
       c3lws: // global
           HpAlloc = 32;
           goto c3lwp;
       c3lwp: // global
           R1 = _s3kej::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lwr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kej::P64;
           _s3ke8::P64 = P64[_s3kej::P64 + 16];
           _s3kef::P64 = P64[_s3kej::P64 + 24];
           _s3keg::P64 = P64[_s3kej::P64 + 32];
           I64[Hp - 24] = sat_s3kei_info;
           P64[Hp - 8] = _s3ke8::P64;
           P64[Hp] = _s3keg::P64;
           R3 = _s3kef::P64;
           R2 = Hp - 24;
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.PSQ.toList_go_entry() //  [R2, R3]
         { info_tbl: [(c3lwy,
                       label: GHC.Event.PSQ.toList_go_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lwy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3lwz; else goto c3lwA;
       c3lwz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.toList_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lwA: // global
           I64[Sp - 16] = block_c3lw8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3lwR; else goto c3lw9;
       u3lwR: // global
           call _c3lw8(R1) args: 0, res: 0, upd: 0;
       c3lw9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lw8() //  [R1]
         { info_tbl: [(c3lw8,
                       label: block_c3lw8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lw8: // global
           _s3ke8::P64 = P64[Sp + 8];
           _c3lwx::P64 = R1 & 7;
           if (_c3lwx::P64 < 3) goto u3lwQ; else goto c3lww;
       u3lwQ: // global
           if (_c3lwx::P64 < 2) goto c3lwu; else goto c3lwv;
       c3lwu: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3lwF; else goto c3lwE;
       c3lwF: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lwE: // global
           _s3ked::P64 = P64[R1 + 7];
           _s3kef::P64 = P64[R1 + 15];
           _s3keg::P64 = P64[R1 + 23];
           _s3keb::I64 = I64[R1 + 31];
           _s3kec::I64 = I64[R1 + 39];
           I64[Hp - 88] = sat_s3kej_info;
           P64[Hp - 72] = _s3ke8::P64;
           P64[Hp - 64] = _s3kef::P64;
           P64[Hp - 56] = _s3keg::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3ked::P64;
           I64[Hp - 32] = _s3keb::I64;
           I64[Hp - 24] = _s3kec::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lwv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lwM; else goto c3lwL;
       c3lwM: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lwL: // global
           _s3kem::P64 = P64[R1 + 6];
           _s3kek::I64 = I64[R1 + 14];
           _s3kel::I64 = I64[R1 + 22];
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3kem::P64;
           I64[Hp - 32] = _s3kek::I64;
           I64[Hp - 24] = _s3kel::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3ke8::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lww: // global
           R1 = _s3ke8::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.079961453 UTC

[section ""data" . GHC.Event.PSQ.toList_closure" {
     GHC.Event.PSQ.toList_closure:
         const GHC.Event.PSQ.toList_info;
 },
 GHC.Event.PSQ.toList_entry() //  [R2]
         { info_tbl: [(c3lxl,
                       label: GHC.Event.PSQ.toList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lxl: // global
           R3 = R2;
           R2 = GHC.Types.[]_closure+1;
           call GHC.Event.PSQ.toList_go_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.09086267 UTC

[section ""data" . GHC.Event.PSQ.merge_closure" {
     GHC.Event.PSQ.merge_closure:
         const GHC.Event.PSQ.merge_info;
 },
 GHC.Event.PSQ.merge_entry() //  [R2, R3, R4]
         { info_tbl: [(c3lxE,
                       label: GHC.Event.PSQ.merge_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lxE: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3lxF; else goto c3lxG;
       c3lxF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.merge_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lxG: // global
           I64[Sp - 24] = block_c3lxw_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lCp; else goto c3lxx;
       u3lCp: // global
           call _c3lxw(R1) args: 0, res: 0, upd: 0;
       c3lxx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lxw() //  [R1]
         { info_tbl: [(c3lxw,
                       label: block_c3lxw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lxw: // global
           _s3keq::P64 = P64[Sp + 16];
           _c3lxD::P64 = R1 & 7;
           if (_c3lxD::P64 < 3) goto u3lCi; else goto c3lxC;
       u3lCi: // global
           if (_c3lxD::P64 < 2) goto c3lxA; else goto c3lxB;
       c3lxA: // global
           I64[Sp - 48] = block_c3lxJ_info;
           _s3ker::P64 = R1;
           _s3keu::P64 = P64[R1 + 7];
           _s3kew::P64 = P64[R1 + 15];
           _s3kex::P64 = P64[R1 + 23];
           _s3kes::I64 = I64[R1 + 31];
           _s3ket::I64 = I64[R1 + 39];
           _s3kev::I64 = I64[R1 + 47];
           R1 = _s3keq::P64;
           I64[Sp - 40] = _s3ket::I64;
           P64[Sp - 32] = _s3keu::P64;
           I64[Sp - 24] = _s3kev::I64;
           P64[Sp - 16] = _s3kew::P64;
           P64[Sp - 8] = _s3kex::P64;
           I64[Sp] = _s3kes::I64;
           P64[Sp + 16] = _s3ker::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3lCn; else goto c3lxL;
       u3lCn: // global
           call _c3lxJ(R1) args: 0, res: 0, upd: 0;
       c3lxL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lxB: // global
           I64[Sp - 24] = block_c3lA1_info;
           _s3ker::P64 = R1;
           _s3kf9::P64 = P64[R1 + 6];
           _s3kf7::I64 = I64[R1 + 14];
           _s3kf8::I64 = I64[R1 + 22];
           R1 = _s3keq::P64;
           I64[Sp - 16] = _s3kf8::I64;
           P64[Sp - 8] = _s3kf9::P64;
           I64[Sp] = _s3kf7::I64;
           P64[Sp + 16] = _s3ker::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lCo; else goto c3lA3;
       u3lCo: // global
           call _c3lA1(R1) args: 0, res: 0, upd: 0;
       c3lA3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lxC: // global
           R1 = _s3keq::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lxJ() //  [R1]
         { info_tbl: [(c3lxJ,
                       label: block_c3lxJ_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lxJ: // global
           _c3lCh::P64 = R1 & 7;
           if (_c3lCh::P64 < 3) goto u3lCj; else goto u3lCl;
       u3lCj: // global
           _s3keo::P64 = P64[Sp + 56];
           _s3kes::I64 = I64[Sp + 48];
           _s3ket::I64 = I64[Sp + 8];
           if (_c3lCh::P64 < 2) goto c3lyS; else goto c3lzU;
       c3lyS: // global
           _s3keB::P64 = P64[R1 + 7];
           _s3keD::P64 = P64[R1 + 15];
           _s3keE::P64 = P64[R1 + 23];
           _s3kez::I64 = I64[R1 + 31];
           _s3keA::I64 = I64[R1 + 39];
           _s3keC::I64 = I64[R1 + 47];
           if (_s3ket::I64 == _s3keA::I64) goto c3lyQ; else goto c3lyJ;
       c3lyQ: // global
           _s3key::P64 = R1;
           if (%MO_S_Ge_W64(_s3kes::I64,
                            _s3kez::I64)) goto s3keF; else goto s3keK;
       c3lyJ: // global
           _s3key::P64 = R1;
           if (_s3ket::I64 > _s3keA::I64) goto s3keF; else goto s3keK;
       s3keF: // global
           I64[Sp + 8] = block_c3lxV_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3keE::P64;
           P64[Sp + 24] = _s3keD::P64;
           I64[Sp + 32] = _s3keC::I64;
           P64[Sp + 40] = _s3keB::P64;
           I64[Sp + 48] = _s3keA::I64;
           I64[Sp + 56] = _s3kez::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3lCs; else goto c3lxW;
       u3lCs: // global
           call _c3lxV(R1) args: 0, res: 0, upd: 0;
       c3lxW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       s3keK: // global
           I64[Sp] = block_c3lyi_info;
           R1 = _s3keo::P64;
           P64[Sp + 64] = _s3key::P64;
           if (R1 & 7 != 0) goto u3lCt; else goto c3lyj;
       u3lCt: // global
           call _c3lyi(R1) args: 0, res: 0, upd: 0;
       c3lyj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lzU: // global
           _s3keU::P64 = P64[R1 + 6];
           _s3keS::I64 = I64[R1 + 14];
           _s3keT::I64 = I64[R1 + 22];
           if (_s3ket::I64 == _s3keT::I64) goto c3lzT; else goto c3lzC;
       c3lzT: // global
           _s3key::P64 = R1;
           if (%MO_S_Lt_W64(_s3kes::I64,
                            _s3keS::I64)) goto s3keV; else goto c3lzO;
       c3lzO: // global
           I64[Sp + 32] = block_c3lzH_info;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3keU::P64;
           I64[Sp + 48] = _s3keT::I64;
           I64[Sp + 56] = _s3keS::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3lCr; else goto c3lzI;
       u3lCr: // global
           call _c3lzH(R1) args: 0, res: 0, upd: 0;
       c3lzI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lzC: // global
           _s3key::P64 = R1;
           if (_s3ket::I64 <= _s3keT::I64) goto s3keV; else goto c3lzw;
       s3keV: // global
           I64[Sp] = block_c3lz1_info;
           R1 = _s3keo::P64;
           P64[Sp + 64] = _s3key::P64;
           if (R1 & 7 != 0) goto u3lCu; else goto c3lz2;
       u3lCu: // global
           call _c3lz1(R1) args: 0, res: 0, upd: 0;
       c3lz2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lzw: // global
           I64[Sp + 32] = block_c3lzp_info;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3keU::P64;
           I64[Sp + 48] = _s3keT::I64;
           I64[Sp + 56] = _s3keS::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3lCq; else goto c3lzq;
       u3lCq: // global
           call _c3lzp(R1) args: 0, res: 0, upd: 0;
       c3lzq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3lCl: // global
           Sp = Sp + 64;
           call _c3lCc() args: 0, res: 0, upd: 0;
     }
 },
 _c3lxV() //  [R1]
         { info_tbl: [(c3lxV,
                       label: block_c3lxV_info
                       rep:StackRep [False, False, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lxV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3ly9; else goto c3ly8;
       c3ly9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ly8: // global
           _s3keH::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3keD::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3ly1_info;
           R4 = P64[Sp + 8];
           R3 = _s3keD::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3keH::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ly1() //  [R1]
         { info_tbl: [(c3ly1,
                       label: block_c3ly1_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ly1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lyc; else goto c3lyb;
       c3lyc: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lyb: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lyi() //  [R1]
         { info_tbl: [(c3lyi,
                       label: block_c3lyi_info
                       rep:StackRep [True, False, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lyi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lyw; else goto c3lyv;
       c3lyw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lyv: // global
           _s3keM::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3lyo_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3keM::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lyo() //  [R1]
         { info_tbl: [(c3lyo,
                       label: block_c3lyo_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lyo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lyz; else goto c3lyy;
       c3lyz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lyy: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lzH() //  [R1]
         { info_tbl: [(c3lzH,
                       label: block_c3lzH_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lzH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lzR; else goto c3lzQ;
       c3lzR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lzQ: // global
           _s3kf6::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kf6::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lzp() //  [R1]
         { info_tbl: [(c3lzp,
                       label: block_c3lzp_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lzp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lzz; else goto c3lzy;
       c3lzz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lzy: // global
           _s3kf3::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kf3::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lz1() //  [R1]
         { info_tbl: [(c3lz1,
                       label: block_c3lz1_info
                       rep:StackRep [True, False, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lz1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lzf; else goto c3lze;
       c3lzf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lze: // global
           _s3keX::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3lz7_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3keX::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lz7() //  [R1]
         { info_tbl: [(c3lz7,
                       label: block_c3lz7_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lz7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lzi; else goto c3lzh;
       c3lzi: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lzh: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lA1() //  [R1]
         { info_tbl: [(c3lA1,
                       label: block_c3lA1_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lA1: // global
           _c3lCg::P64 = R1 & 7;
           if (_c3lCg::P64 < 3) goto u3lCk; else goto u3lCm;
       u3lCk: // global
           _s3keo::P64 = P64[Sp + 32];
           _s3kf7::I64 = I64[Sp + 24];
           _s3kf8::I64 = I64[Sp + 8];
           if (_c3lCg::P64 < 2) goto c3lB9; else goto c3lC8;
       c3lB9: // global
           _s3kfd::P64 = P64[R1 + 7];
           _s3kff::P64 = P64[R1 + 15];
           _s3kfg::P64 = P64[R1 + 23];
           _s3kfb::I64 = I64[R1 + 31];
           _s3kfc::I64 = I64[R1 + 39];
           _s3kfe::I64 = I64[R1 + 47];
           if (_s3kf8::I64 == _s3kfc::I64) goto c3lB7; else goto c3lAP;
       c3lB7: // global
           if (%MO_S_Ge_W64(_s3kf7::I64,
                            _s3kfb::I64)) goto s3kfh; else goto c3lB3;
       c3lB3: // global
           I64[Sp] = block_c3lAX_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3lCx; else goto c3lAY;
       u3lCx: // global
           call _c3lAX(R1) args: 0, res: 0, upd: 0;
       c3lAY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lAP: // global
           if (_s3kf8::I64 > _s3kfc::I64) goto s3kfh; else goto c3lAK;
       s3kfh: // global
           I64[Sp - 16] = block_c3lAd_info;
           R1 = _s3keo::P64;
           P64[Sp - 8] = _s3kfg::P64;
           P64[Sp] = _s3kff::P64;
           I64[Sp + 8] = _s3kfe::I64;
           P64[Sp + 16] = _s3kfd::P64;
           I64[Sp + 24] = _s3kfc::I64;
           I64[Sp + 32] = _s3kfb::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3lCC; else goto c3lAe;
       u3lCC: // global
           call _c3lAd(R1) args: 0, res: 0, upd: 0;
       c3lAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lAK: // global
           I64[Sp] = block_c3lAE_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3lCw; else goto c3lAF;
       u3lCw: // global
           call _c3lAE(R1) args: 0, res: 0, upd: 0;
       c3lAF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lC8: // global
           _s3kfv::P64 = P64[R1 + 6];
           _s3kft::I64 = I64[R1 + 14];
           _s3kfu::I64 = I64[R1 + 22];
           if (_s3kf8::I64 == _s3kfu::I64) goto c3lC7; else goto c3lBG;
       c3lC7: // global
           if (%MO_S_Ge_W64(_s3kf7::I64,
                            _s3kft::I64)) goto c3lBS; else goto c3lC3;
       c3lBS: // global
           I64[Sp + 8] = block_c3lBL_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3kfv::P64;
           I64[Sp + 24] = _s3kfu::I64;
           I64[Sp + 32] = _s3kft::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3lCA; else goto c3lBM;
       u3lCA: // global
           call _c3lBL(R1) args: 0, res: 0, upd: 0;
       c3lBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lC3: // global
           I64[Sp] = block_c3lBX_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3lCB; else goto c3lBY;
       u3lCB: // global
           call _c3lBX(R1) args: 0, res: 0, upd: 0;
       c3lBY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lBG: // global
           if (_s3kf8::I64 > _s3kfu::I64) goto c3lBq; else goto c3lBB;
       c3lBq: // global
           I64[Sp + 8] = block_c3lBj_info;
           R1 = _s3keo::P64;
           P64[Sp + 16] = _s3kfv::P64;
           I64[Sp + 24] = _s3kfu::I64;
           I64[Sp + 32] = _s3kft::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3lCy; else goto c3lBk;
       u3lCy: // global
           call _c3lBj(R1) args: 0, res: 0, upd: 0;
       c3lBk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lBB: // global
           I64[Sp] = block_c3lBv_info;
           _s3kfa::P64 = R1;
           R1 = _s3keo::P64;
           P64[Sp + 40] = _s3kfa::P64;
           if (R1 & 7 != 0) goto u3lCz; else goto c3lBw;
       u3lCz: // global
           call _c3lBv(R1) args: 0, res: 0, upd: 0;
       c3lBw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3lCm: // global
           Sp = Sp + 40;
           call _c3lCc() args: 0, res: 0, upd: 0;
     }
 },
 _c3lAX() //  [R1]
         { info_tbl: [(c3lAX,
                       label: block_c3lAX_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lAX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lB6; else goto c3lB5;
       c3lB6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lB5: // global
           _s3kfs::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfs::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lAd() //  [R1]
         { info_tbl: [(c3lAd,
                       label: block_c3lAd_info
                       rep:StackRep [False, False, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lAd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lAr; else goto c3lAq;
       c3lAr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lAq: // global
           _s3kfj::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3kff::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3lAj_info;
           R4 = P64[Sp + 8];
           R3 = _s3kff::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3kfj::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lAj() //  [R1]
         { info_tbl: [(c3lAj,
                       label: block_c3lAj_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lAj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lAu; else goto c3lAt;
       c3lAu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lAt: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lAE() //  [R1]
         { info_tbl: [(c3lAE,
                       label: block_c3lAE_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lAE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lAN; else goto c3lAM;
       c3lAN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lAM: // global
           _s3kfp::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfp::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lBL() //  [R1]
         { info_tbl: [(c3lBL,
                       label: block_c3lBL_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lBL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lBV; else goto c3lBU;
       c3lBV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lBU: // global
           _s3kfE::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kfE::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lBX() //  [R1]
         { info_tbl: [(c3lBX,
                       label: block_c3lBX_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lBX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lC6; else goto c3lC5;
       c3lC6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lC5: // global
           _s3kfG::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfG::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lBj() //  [R1]
         { info_tbl: [(c3lBj,
                       label: block_c3lBj_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lBj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lBt; else goto c3lBs;
       c3lBt: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lBs: // global
           _s3kfz::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3kfz::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lBv() //  [R1]
         { info_tbl: [(c3lBv,
                       label: block_c3lBv_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lBv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lBE; else goto c3lBD;
       c3lBE: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lBD: // global
           _s3kfB::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3kfB::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lCc() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lCc: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.152132358 UTC

[section ""data" . GHC.Event.PSQ.$watMost_closure" {
     GHC.Event.PSQ.$watMost_closure:
         const GHC.Event.PSQ.$watMost_info;
 },
 ds_s3kfW_entry() //  [R1]
         { info_tbl: [(c3lFB,
                       label: ds_s3kfW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lFB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3lFC; else goto c3lFD;
       c3lFC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lFD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3lFy_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3lFy() //  [R1, R2]
         { info_tbl: [(c3lFy,
                       label: block_c3lFy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lFy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3lFG; else goto c3lFF;
       c3lFG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3lFF: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s3kg0_entry() //  [R1]
         { info_tbl: [(c3lFP,
                       label: ds1_s3kg0_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lFP: // global
           _s3kg0::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3lFQ; else goto c3lFR;
       c3lFR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3lFT; else goto c3lFS;
       c3lFT: // global
           HpAlloc = 24;
           goto c3lFQ;
       c3lFQ: // global
           R1 = _s3kg0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lFS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kg0::P64;
           _s3kfJ::P64 = P64[_s3kg0::P64 + 16];
           _s3kfS::P64 = P64[_s3kg0::P64 + 24];
           _s3kfW::P64 = P64[_s3kg0::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s3kfW::P64;
           I64[Sp - 24] = block_c3lFM_info;
           R3 = _s3kfS::P64;
           R2 = Hp - 16;
           R1 = _s3kfJ::P64;
           Sp = Sp - 24;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3lFM() //  [R1, R2]
         { info_tbl: [(c3lFM,
                       label: block_c3lFM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lFM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3lFW; else goto c3lFV;
       c3lFW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3lFV: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3kgl_entry() //  [R1]
         { info_tbl: [(c3lG4,
                       label: sat_s3kgl_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lG4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3lGd; else goto c3lGe;
       c3lGd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lGe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3lG1_info;
           _s3kg0::P64 = P64[R1 + 24];
           _s3kfQ::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s3kfQ::I64;
           P64[Sp - 24] = _s3kg0::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3lGk; else goto c3lG2;
       u3lGk: // global
           call _c3lG1(R1) args: 0, res: 0, upd: 0;
       c3lG2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3lG1() //  [R1]
         { info_tbl: [(c3lG1,
                       label: block_c3lG1_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lG1: // global
           I64[Sp] = block_c3lG7_info;
           _s3kgg::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3kgg::P64;
           if (R1 & 7 != 0) goto u3lGj; else goto c3lG8;
       u3lGj: // global
           call _c3lG7(R1) args: 0, res: 0, upd: 0;
       c3lG8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3lG7() //  [R1]
         { info_tbl: [(c3lG7,
                       label: block_c3lG7_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lG7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lGi; else goto c3lGh;
       c3lGi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3lGh: // global
           _s3kgj::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           R4 = _s3kgj::P64;
           R3 = P64[Sp + 16];
           R2 = Hp - 7;
           Sp = Sp + 24;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 $wgo_s3kfJ_entry() //  [R1, R2, R3]
         { info_tbl: [(c3lGq,
                       label: $wgo_s3kfJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lGq: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3lGr; else goto c3lGs;
       c3lGr: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lGs: // global
           I64[Sp - 32] = block_c3lFh_info;
           _s3kfJ::P64 = R1;
           _s3kfH::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s3kfH::P64;
           P64[Sp - 16] = _s3kfJ::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3lH2; else goto c3lFi;
       u3lH2: // global
           call _c3lFh(R1) args: 0, res: 0, upd: 0;
       c3lFi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lFh() //  [R1]
         { info_tbl: [(c3lFh,
                       label: block_c3lFh_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lFh: // global
           _c3lGp::P64 = R1 & 7;
           if (_c3lGp::P64 < 3) goto u3lGZ; else goto c3lGo;
       u3lGZ: // global
           _s3kfH::P64 = P64[Sp + 8];
           if (_c3lGp::P64 < 2) goto c3lGm; else goto c3lGn;
       c3lGm: // global
           I64[Sp - 48] = block_c3lFm_info;
           _s3kfM::P64 = R1;
           _s3kfP::P64 = P64[R1 + 7];
           _s3kfR::P64 = P64[R1 + 15];
           _s3kfS::P64 = P64[R1 + 23];
           _s3kfN::I64 = I64[R1 + 31];
           _s3kfO::I64 = I64[R1 + 39];
           _s3kfQ::I64 = I64[R1 + 47];
           R1 = _s3kfH::P64;
           I64[Sp - 40] = _s3kfO::I64;
           P64[Sp - 32] = _s3kfP::P64;
           I64[Sp - 24] = _s3kfQ::I64;
           P64[Sp - 16] = _s3kfR::P64;
           P64[Sp - 8] = _s3kfS::P64;
           I64[Sp] = _s3kfN::I64;
           P64[Sp + 8] = _s3kfM::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3lH0; else goto c3lFn;
       u3lH0: // global
           call _c3lFm(R1) args: 0, res: 0, upd: 0;
       c3lFn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lGn: // global
           I64[Sp - 16] = block_c3lGF_info;
           _s3kfM::P64 = R1;
           _s3kgo::P64 = P64[R1 + 6];
           _s3kgm::I64 = I64[R1 + 14];
           _s3kgn::I64 = I64[R1 + 22];
           R1 = _s3kfH::P64;
           P64[Sp - 8] = _s3kgo::P64;
           I64[Sp] = _s3kgn::I64;
           I64[Sp + 8] = _s3kgm::I64;
           P64[Sp + 16] = _s3kfM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3lH1; else goto c3lGH;
       u3lH1: // global
           call _c3lGF(R1) args: 0, res: 0, upd: 0;
       c3lGH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lGo: // global
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lFm() //  [R1]
         { info_tbl: [(c3lFm,
                       label: block_c3lFm_info
                       rep:StackRep [True, False, True, False, False, True, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lFm: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c3lGw; else goto c3lGv;
       c3lGw: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lGv: // global
           _s3kfK::P64 = P64[Sp + 72];
           _s3kfO::I64 = I64[Sp + 8];
           if (_s3kfO::I64 <= I64[R1 + 7]) goto c3lGB; else goto c3lGC;
       c3lGB: // global
           I64[Hp - 192] = ds_s3kfW_info;
           _s3kfJ::P64 = P64[Sp + 64];
           P64[Hp - 176] = _s3kfJ::P64;
           P64[Hp - 168] = _s3kfK::P64;
           P64[Hp - 160] = P64[Sp + 32];
           I64[Hp - 152] = ds1_s3kg0_info;
           P64[Hp - 136] = _s3kfJ::P64;
           P64[Hp - 128] = P64[Sp + 40];
           _c3lFu::P64 = Hp - 192;
           P64[Hp - 120] = _c3lFu::P64;
           I64[Hp - 112] = sat_s3kgl_info;
           P64[Hp - 96] = _c3lFu::P64;
           _c3lFH::P64 = Hp - 152;
           P64[Hp - 88] = _c3lFH::P64;
           I64[Hp - 80] = I64[Sp + 24];
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _c3lFH::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = I64[Sp + 48];
           I64[Hp - 24] = _s3kfO::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 72;
           R2 = Hp - 112;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lGC: // global
           Hp = Hp - 200;
           R2 = P64[Sp + 56];
           R1 = _s3kfK::P64;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lGF() //  [R1]
         { info_tbl: [(c3lGF,
                       label: block_c3lGF_info
                       rep:StackRep [False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lGF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lGN; else goto c3lGM;
       c3lGN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lGM: // global
           _s3kfK::P64 = P64[Sp + 40];
           _s3kgn::I64 = I64[Sp + 16];
           if (_s3kgn::I64 <= I64[R1 + 7]) goto c3lGU; else goto c3lGV;
       c3lGU: // global
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = I64[Sp + 24];
           I64[Hp - 24] = _s3kgn::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3kfK::P64;
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lGV: // global
           Hp = Hp - 56;
           R2 = P64[Sp + 32];
           R1 = _s3kfK::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.$watMost_entry() //  [R2, R3]
         { info_tbl: [(c3lH3,
                       label: GHC.Event.PSQ.$watMost_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lH3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lH7; else goto c3lH6;
       c3lH7: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$watMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lH6: // global
           I64[Hp - 8] = $wgo_s3kfJ_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 6;
           call $wgo_s3kfJ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.181679211 UTC

[section ""data" . GHC.Event.PSQ.atMost_closure" {
     GHC.Event.PSQ.atMost_closure:
         const GHC.Event.PSQ.atMost_info;
 },
 GHC.Event.PSQ.atMost_entry() //  [R2, R3]
         { info_tbl: [(c3lIi,
                       label: GHC.Event.PSQ.atMost_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lIi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lIj; else goto c3lIk;
       c3lIj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.atMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lIk: // global
           I64[Sp - 8] = block_c3lIf_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$watMost_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lIf() //  [R1, R2]
         { info_tbl: [(c3lIf,
                       label: block_c3lIf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lIf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3lIn; else goto c3lIm;
       c3lIn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3lIm: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.188315552 UTC

[section ""data" . GHC.Event.PSQ.minView_closure" {
     GHC.Event.PSQ.minView_closure:
         const GHC.Event.PSQ.minView_info;
 },
 sat_s3kgJ_entry() //  [R1]
         { info_tbl: [(c3lIL,
                       label: sat_s3kgJ_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lIL: // global
           _s3kgJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3lIM; else goto c3lIN;
       c3lIN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lIP; else goto c3lIO;
       c3lIP: // global
           HpAlloc = 16;
           goto c3lIM;
       c3lIM: // global
           R1 = _s3kgJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3lIO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3kgJ::P64;
           _s3kgF::P64 = P64[_s3kgJ::P64 + 16];
           _s3kgG::P64 = P64[_s3kgJ::P64 + 24];
           _s3kgE::I64 = I64[_s3kgJ::P64 + 32];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kgE::I64;
           R4 = _s3kgG::P64;
           R3 = _s3kgF::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.PSQ.minView_entry() //  [R2]
         { info_tbl: [(c3lIV,
                       label: GHC.Event.PSQ.minView_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lIV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lIW; else goto c3lIX;
       c3lIW: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.minView_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lIX: // global
           I64[Sp - 8] = block_c3lIB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lJg; else goto c3lIC;
       u3lJg: // global
           call _c3lIB(R1) args: 0, res: 0, upd: 0;
       c3lIC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lIB() //  [R1]
         { info_tbl: [(c3lIB,
                       label: block_c3lIB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lIB: // global
           _c3lIU::P64 = R1 & 7;
           if (_c3lIU::P64 < 3) goto u3lJf; else goto c3lIT;
       u3lJf: // global
           if (_c3lIU::P64 < 2) goto c3lIR; else goto c3lIS;
       c3lIR: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3lJ3; else goto c3lJ2;
       c3lJ3: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lJ2: // global
           _s3kgD::P64 = P64[R1 + 7];
           _s3kgF::P64 = P64[R1 + 15];
           _s3kgG::P64 = P64[R1 + 23];
           _s3kgB::I64 = I64[R1 + 31];
           _s3kgC::I64 = I64[R1 + 39];
           _s3kgE::I64 = I64[R1 + 47];
           I64[Hp - 104] = sat_s3kgJ_info;
           P64[Hp - 88] = _s3kgF::P64;
           P64[Hp - 80] = _s3kgG::P64;
           I64[Hp - 72] = _s3kgE::I64;
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3kgD::P64;
           I64[Hp - 48] = _s3kgB::I64;
           I64[Hp - 40] = _s3kgC::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lIS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3lJb; else goto c3lJa;
       c3lJb: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lJa: // global
           _s3kgN::P64 = P64[R1 + 6];
           _s3kgL::I64 = I64[R1 + 14];
           _s3kgM::I64 = I64[R1 + 22];
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3kgN::P64;
           I64[Hp - 48] = _s3kgL::I64;
           I64[Hp - 40] = _s3kgM::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lIT: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.199616074 UTC

[section ""data" . GHC.Event.PSQ.deleteMin_closure" {
     GHC.Event.PSQ.deleteMin_closure:
         const GHC.Event.PSQ.deleteMin_info;
 },
 GHC.Event.PSQ.deleteMin_entry() //  [R2]
         { info_tbl: [(c3lJP,
                       label: GHC.Event.PSQ.deleteMin_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lJP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lJQ; else goto c3lJR;
       c3lJQ: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.deleteMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lJR: // global
           I64[Sp - 8] = block_c3lJH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lK5; else goto c3lJI;
       u3lK5: // global
           call _c3lJH(R1) args: 0, res: 0, upd: 0;
       c3lJI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lJH() //  [R1]
         { info_tbl: [(c3lJH,
                       label: block_c3lJH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lJH: // global
           _c3lJO::P64 = R1 & 7;
           if (_c3lJO::P64 >= 3) goto c3lJN; else goto u3lK4;
       u3lK4: // global
           if (_c3lJO::P64 >= 2) goto c3lJN; else goto c3lJL;
       c3lJN: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lJL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lJX; else goto c3lJW;
       c3lJX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lJW: // global
           _s3kgW::P64 = P64[R1 + 15];
           _s3kgX::P64 = P64[R1 + 23];
           _s3kgV::I64 = I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kgV::I64;
           R4 = _s3kgX::P64;
           R3 = _s3kgW::P64;
           R2 = Hp - 7;
           Sp = Sp + 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.206477965 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule4_bytes" {
     GHC.Event.PSQ.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.208242605 UTC

[section ""data" . GHC.Event.PSQ.$trModule3_closure" {
     GHC.Event.PSQ.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.210088028 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule2_bytes" {
     GHC.Event.PSQ.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,80,83,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.21180167 UTC

[section ""data" . GHC.Event.PSQ.$trModule1_closure" {
     GHC.Event.PSQ.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.213689426 UTC

[section ""data" . GHC.Event.PSQ.$trModule_closure" {
     GHC.Event.PSQ.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.PSQ.$trModule3_closure+1;
         const GHC.Event.PSQ.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.215443641 UTC

[section ""data" . $krep_r3kcT_closure" {
     $krep_r3kcT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.217464025 UTC

[section ""data" . $krep1_r3kcU_closure" {
     $krep1_r3kcU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.219337581 UTC

[section ""data" . $krep2_r3kcV_closure" {
     $krep2_r3kcV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.221107372 UTC

[section ""data" . $krep3_r3kcW_closure" {
     $krep3_r3kcW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.222873612 UTC

[section ""cstring" . GHC.Event.PSQ.$tcElem2_bytes" {
     GHC.Event.PSQ.$tcElem2_bytes:
         I8[] [69,108,101,109]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.22532367 UTC

[section ""data" . GHC.Event.PSQ.$tcElem1_closure" {
     GHC.Event.PSQ.$tcElem1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcElem2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.227094963 UTC

[section ""data" . GHC.Event.PSQ.$tcElem_closure" {
     GHC.Event.PSQ.$tcElem_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcElem1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15044414420558834066;
         const 12198171511156299872;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.228968565 UTC

[section ""data" . $krep4_r3kcX_closure" {
     $krep4_r3kcX_closure:
         const :_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.231337573 UTC

[section ""data" . $krep5_r3kcY_closure" {
     $krep5_r3kcY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcElem_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.233062136 UTC

[section ""data" . $krep6_r3kcZ_closure" {
     $krep6_r3kcZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep5_r3kcY_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.23500036 UTC

[section ""data" . $krep7_r3kd0_closure" {
     $krep7_r3kd0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep6_r3kcZ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.236784448 UTC

[section ""data" . GHC.Event.PSQ.$tc'E1_closure" {
     GHC.Event.PSQ.$tc'E1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep7_r3kd0_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.238641507 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'E3_bytes" {
     GHC.Event.PSQ.$tc'E3_bytes:
         I8[] [39,69]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.240355086 UTC

[section ""data" . GHC.Event.PSQ.$tc'E2_closure" {
     GHC.Event.PSQ.$tc'E2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'E3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.242270464 UTC

[section ""data" . GHC.Event.PSQ.$tc'E_closure" {
     GHC.Event.PSQ.$tc'E_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'E2_closure+1;
         const GHC.Event.PSQ.$tc'E1_closure+4;
         const 11813029942800942247;
         const 17450377919573390885;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.244151514 UTC

[section ""cstring" . GHC.Event.PSQ.$tcIntPSQ2_bytes" {
     GHC.Event.PSQ.$tcIntPSQ2_bytes:
         I8[] [73,110,116,80,83,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.246009669 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ1_closure" {
     GHC.Event.PSQ.$tcIntPSQ1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcIntPSQ2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.247760633 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ_closure" {
     GHC.Event.PSQ.$tcIntPSQ_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcIntPSQ1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15246681906271547396;
         const 11594704564387731780;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.249752305 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil1_closure" {
     GHC.Event.PSQ.$tc'Nil1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcIntPSQ_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.25200885 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Nil3_bytes" {
     GHC.Event.PSQ.$tc'Nil3_bytes:
         I8[] [39,78,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.253821024 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil2_closure" {
     GHC.Event.PSQ.$tc'Nil2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Nil3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.255588067 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil_closure" {
     GHC.Event.PSQ.$tc'Nil_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Nil2_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 9632868263130136899;
         const 16639248836205398404;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.257624754 UTC

[section ""data" . $krep8_r3kd1_closure" {
     $krep8_r3kd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.2594634 UTC

[section ""data" . $krep9_r3kd2_closure" {
     $krep9_r3kd2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep8_r3kd1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.261170213 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip1_closure" {
     GHC.Event.PSQ.$tc'Tip1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep9_r3kd2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.263036483 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Tip3_bytes" {
     GHC.Event.PSQ.$tc'Tip3_bytes:
         I8[] [39,84,105,112]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.264819735 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip2_closure" {
     GHC.Event.PSQ.$tc'Tip2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Tip3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.267046882 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip_closure" {
     GHC.Event.PSQ.$tc'Tip_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Tip2_closure+1;
         const GHC.Event.PSQ.$tc'Tip1_closure+4;
         const 4235936270888684142;
         const 17098834253377543597;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.268936605 UTC

[section ""data" . $krep10_r3kd3_closure" {
     $krep10_r3kd3_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.270717165 UTC

[section ""data" . $krep11_r3kd4_closure" {
     $krep11_r3kd4_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const $krep10_r3kd3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.27248892 UTC

[section ""data" . $krep12_r3kd5_closure" {
     $krep12_r3kd5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3kcT_closure+1;
         const $krep11_r3kd4_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.274265273 UTC

[section ""data" . $krep13_r3kd6_closure" {
     $krep13_r3kd6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep12_r3kd5_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.276043006 UTC

[section ""data" . $krep14_r3kd7_closure" {
     $krep14_r3kd7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep13_r3kd6_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.278442683 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin1_closure" {
     GHC.Event.PSQ.$tc'Bin1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep14_r3kd7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.280438785 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Bin3_bytes" {
     GHC.Event.PSQ.$tc'Bin3_bytes:
         I8[] [39,66,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.282298209 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin2_closure" {
     GHC.Event.PSQ.$tc'Bin2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Bin3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.284118199 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin_closure" {
     GHC.Event.PSQ.$tc'Bin_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Bin2_closure+1;
         const GHC.Event.PSQ.$tc'Bin1_closure+4;
         const 8835322380894053498;
         const 4329944662539077627;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.288058792 UTC

[section ""data" . GHC.Event.PSQ.lookup_closure" {
     GHC.Event.PSQ.lookup_closure:
         const GHC.Event.PSQ.lookup_info;
 },
 GHC.Event.PSQ.lookup_entry() //  [R2, R3]
         { info_tbl: [(c3lL5,
                       label: GHC.Event.PSQ.lookup_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lL5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3lL6; else goto c3lL7;
       c3lL6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.lookup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lL7: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3lLv() args: 0, res: 0, upd: 0;
     }
 },
 _c3lLv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lLv: // global
           I64[Sp - 8] = block_c3lLx_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lN1; else goto c3lLz;
       u3lN1: // global
           call _c3lLx(R1) args: 0, res: 0, upd: 0;
       c3lLz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lLx() //  [R1]
         { info_tbl: [(c3lLx,
                       label: block_c3lLx_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lLx: // global
           _c3lMS::P64 = R1 & 7;
           if (_c3lMS::P64 < 3) goto u3lMT; else goto c3lMR;
       u3lMT: // global
           _s3kh2::P64 = P64[Sp + 8];
           if (_c3lMS::P64 < 2) goto c3lLG; else goto c3lMN;
       c3lLG: // global
           I64[Sp - 40] = block_c3lLD_info;
           _s3khi::P64 = P64[R1 + 7];
           _s3khk::P64 = P64[R1 + 15];
           _s3khl::P64 = P64[R1 + 23];
           _s3khg::I64 = I64[R1 + 31];
           _s3khh::I64 = I64[R1 + 39];
           _s3khj::I64 = I64[R1 + 47];
           R1 = _s3kh2::P64;
           P64[Sp - 32] = _s3khi::P64;
           I64[Sp - 24] = _s3khj::I64;
           P64[Sp - 16] = _s3khk::P64;
           P64[Sp - 8] = _s3khl::P64;
           I64[Sp] = _s3khh::I64;
           I64[Sp + 16] = _s3khg::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3lN2; else goto c3lLH;
       u3lN2: // global
           call _c3lLD(R1) args: 0, res: 0, upd: 0;
       c3lLH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lMN: // global
           I64[Sp - 8] = block_c3lLb_info;
           _s3kh7::P64 = P64[R1 + 6];
           _s3kh6::I64 = I64[R1 + 22];
           _s3kh5::I64 = I64[R1 + 14];
           R1 = _s3kh2::P64;
           P64[Sp] = _s3kh7::P64;
           I64[Sp + 8] = _s3kh6::I64;
           I64[Sp + 16] = _s3kh5::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lN3; else goto c3lLd;
       u3lN3: // global
           call _c3lLb(R1) args: 0, res: 0, upd: 0;
       c3lLd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lMR: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lLD() //  [R1]
         { info_tbl: [(c3lLD,
                       label: block_c3lLD_info
                       rep:StackRep [False, True, False, False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lLD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lLN; else goto c3lLM;
       c3lLN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lLM: // global
           _s3khg::I64 = I64[Sp + 56];
           _s3khn::I64 = I64[R1 + 7];
           _s3kho::I64 = I64[Sp + 16];
           _s3khp::I64 = (_s3kho::I64 + -1) ^ _s3kho::I64 ^ 18446744073709551615;
           if (_s3khn::I64 & _s3khp::I64 == _s3khg::I64 & _s3khp::I64) goto c3lMI; else goto u3lMV;
       c3lMI: // global
           if (_s3khn::I64 == _s3khg::I64) goto c3lMG; else goto c3lMB;
       c3lMG: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 40];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lMB: // global
           Hp = Hp - 56;
           if (_s3khn::I64 & _s3kho::I64 == 0) goto c3lMw; else goto c3lMq;
       c3lMw: // global
           P64[Sp + 56] = P64[Sp + 24];
           Sp = Sp + 48;
           goto u3lN6;
       c3lMq: // global
           P64[Sp + 56] = P64[Sp + 32];
           Sp = Sp + 48;
           goto u3lN6;
       u3lN6: // global
           call _c3lLv() args: 0, res: 0, upd: 0;
       u3lMV: // global
           Sp = Sp + 64;
           call _c3lLn() args: 0, res: 0, upd: 0;
     }
 },
 _c3lLb() //  [R1]
         { info_tbl: [(c3lLb,
                       label: block_c3lLb_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lLb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lLj; else goto c3lLi;
       c3lLj: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lLi: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3lLt; else goto u3lMY;
       c3lLt: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3lMY: // global
           Sp = Sp + 32;
           call _c3lLn() args: 0, res: 0, upd: 0;
     }
 },
 _c3lLn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lLn: // global
           Hp = Hp - 56;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.305961674 UTC

[section ""data" . GHC.Event.PSQ.delete_closure" {
     GHC.Event.PSQ.delete_closure:
         const GHC.Event.PSQ.delete_info;
 },
 go1_s3khH_entry() //  [R1, R2]
         { info_tbl: [(c3lO8,
                       label: go1_s3khH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lO8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3lO9; else goto c3lOa;
       c3lO9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lOa: // global
           I64[Sp - 24] = block_c3lO0_info;
           _s3khH::P64 = R1;
           _s3khF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3khF::P64;
           P64[Sp - 8] = _s3khH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lQJ; else goto c3lO1;
       u3lQJ: // global
           call _c3lO0(R1) args: 0, res: 0, upd: 0;
       c3lO1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lO0() //  [R1]
         { info_tbl: [(c3lO0,
                       label: block_c3lO0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lO0: // global
           _c3lO7::P64 = R1 & 7;
           if (_c3lO7::P64 < 3) goto u3lQD; else goto u3lQE;
       u3lQD: // global
           _s3khF::P64 = P64[Sp + 8];
           if (_c3lO7::P64 < 2) goto c3lO4; else goto c3lO5;
       c3lO4: // global
           I64[Sp - 48] = block_c3lOd_info;
           _s3khJ::P64 = R1;
           _s3khM::P64 = P64[R1 + 7];
           _s3khO::P64 = P64[R1 + 15];
           _s3khP::P64 = P64[R1 + 23];
           _s3khK::I64 = I64[R1 + 31];
           _s3khL::I64 = I64[R1 + 39];
           _s3khN::I64 = I64[R1 + 47];
           R1 = _s3khF::P64;
           I64[Sp - 40] = _s3khL::I64;
           P64[Sp - 32] = _s3khM::P64;
           I64[Sp - 24] = _s3khN::I64;
           P64[Sp - 16] = _s3khO::P64;
           P64[Sp - 8] = _s3khP::P64;
           I64[Sp] = _s3khK::I64;
           P64[Sp + 8] = _s3khJ::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3lQG; else goto c3lOf;
       u3lQG: // global
           call _c3lOd(R1) args: 0, res: 0, upd: 0;
       c3lOf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lO5: // global
           I64[Sp] = block_c3lQk_info;
           _s3khJ::P64 = R1;
           _s3ki9::I64 = I64[R1 + 14];
           R1 = _s3khF::P64;
           I64[Sp + 8] = _s3ki9::I64;
           P64[Sp + 16] = _s3khJ::P64;
           if (R1 & 7 != 0) goto u3lQH; else goto c3lQm;
       u3lQH: // global
           call _c3lQk(R1) args: 0, res: 0, upd: 0;
       c3lQm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3lQE: // global
           Sp = Sp + 24;
           call _c3lO6() args: 0, res: 0, upd: 0;
     }
 },
 _c3lOd() //  [R1]
         { info_tbl: [(c3lOd,
                       label: block_c3lOd_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lOd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lOl; else goto c3lOk;
       c3lOl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lOk: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khN::I64 = I64[Sp + 24];
           _s3khR::I64 = I64[R1 + 7];
           _s3khT::I64 = (_s3khN::I64 + -1) ^ _s3khN::I64 ^ 18446744073709551615;
           if (_s3khR::I64 & _s3khT::I64 == _s3khK::I64 & _s3khT::I64) goto c3lQg; else goto c3lQh;
       c3lQg: // global
           _s3khO::P64 = P64[Sp + 32];
           _s3khP::P64 = P64[Sp + 40];
           if (_s3khR::I64 == _s3khK::I64) goto c3lQe; else goto c3lQb;
       c3lQe: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3khN::I64;
           R4 = _s3khP::P64;
           R3 = _s3khO::P64;
           R2 = Hp - 7;
           Sp = Sp + 72;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3lQb: // global
           Hp = Hp - 16;
           _s3khH::P64 = P64[Sp + 64];
           if (_s3khR::I64 & _s3khN::I64 == 0) goto c3lPD; else goto c3lP1;
       c3lPD: // global
           I64[Sp] = block_c3lPC_info;
           R2 = _s3khO::P64;
           R1 = _s3khH::P64;
           call go1_s3khH_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3lP1: // global
           I64[Sp] = block_c3lOZ_info;
           R2 = _s3khP::P64;
           R1 = _s3khH::P64;
           call go1_s3khH_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3lQh: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 72;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lPC() //  [R1]
         { info_tbl: [(c3lPC,
                       label: block_c3lPC_info
                       rep:StackRep [True, False, True, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lPC: // global
           _s3khP::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3lPS; else goto c3lPK;
       c3lPS: // global
           I64[Sp] = block_c3lPQ_info;
           R1 = _s3khP::P64;
           if (R1 & 7 != 0) goto u3lQL; else goto c3lPT;
       u3lQL: // global
           call _c3lPQ(R1) args: 0, res: 0, upd: 0;
       c3lPT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lPK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lPN; else goto c3lPM;
       c3lPN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lPM: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3khP::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lPQ() //  [R1]
         { info_tbl: [(c3lPQ,
                       label: block_c3lPQ_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lPQ: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khL::I64 = I64[Sp + 8];
           _s3khM::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3lQ6; else goto c3lPZ;
       c3lQ6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lQ9; else goto c3lQ8;
       c3lQ9: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lQ8: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3khM::P64;
           I64[Hp - 8] = _s3khK::I64;
           I64[Hp] = _s3khL::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lPZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lQ2; else goto c3lQ1;
       c3lQ2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lQ1: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3khM::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3khK::I64;
           I64[Hp - 8] = _s3khL::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lOZ() //  [R1]
         { info_tbl: [(c3lOZ,
                       label: block_c3lOZ_info
                       rep:StackRep [True, False, True, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lOZ: // global
           _s3khO::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3lPg; else goto c3lP8;
       c3lPg: // global
           I64[Sp] = block_c3lPe_info;
           R1 = _s3khO::P64;
           if (R1 & 7 != 0) goto u3lQK; else goto c3lPh;
       u3lQK: // global
           call _c3lPe(R1) args: 0, res: 0, upd: 0;
       c3lPh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lP8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lPb; else goto c3lPa;
       c3lPb: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lPa: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3khO::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lPe() //  [R1]
         { info_tbl: [(c3lPe,
                       label: block_c3lPe_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lPe: // global
           _s3khK::I64 = I64[Sp + 48];
           _s3khL::I64 = I64[Sp + 8];
           _s3khM::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3lPu; else goto c3lPn;
       c3lPu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lPx; else goto c3lPw;
       c3lPx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lPw: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3khM::P64;
           I64[Hp - 8] = _s3khK::I64;
           I64[Hp] = _s3khL::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lPn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lPq; else goto c3lPp;
       c3lPq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lPp: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3khM::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3khK::I64;
           I64[Hp - 8] = _s3khL::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lQk() //  [R1]
         { info_tbl: [(c3lQk,
                       label: block_c3lQk_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lQk: // global
           if (I64[R1 + 7] == I64[Sp + 8]) goto u3lQF; else goto c3lQu;
       u3lQF: // global
           Sp = Sp + 24;
           call _c3lO6() args: 0, res: 0, upd: 0;
       c3lQu: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lO6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lO6: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.delete_entry() //  [R2, R3]
         { info_tbl: [(c3lQN,
                       label: GHC.Event.PSQ.delete_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lQN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lQR; else goto c3lQQ;
       c3lQR: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.delete_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lQQ: // global
           I64[Hp - 8] = go1_s3khH_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go1_s3khH_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.345787089 UTC

[section ""data" . GHC.Event.PSQ.deleteView_closure" {
     GHC.Event.PSQ.deleteView_closure:
         const GHC.Event.PSQ.deleteView_info;
 },
 delFrom_s3kih_entry() //  [R1, R2]
         { info_tbl: [(c3lSn,
                       label: delFrom_s3kih_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lSn: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3lSo; else goto c3lSp;
       c3lSo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lSp: // global
           I64[Sp - 24] = block_c3lSf_info;
           _s3kih::P64 = R1;
           _s3kif::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3kif::P64;
           P64[Sp - 8] = _s3kih::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3lVk; else goto c3lSg;
       u3lVk: // global
           call _c3lSf(R1) args: 0, res: 0, upd: 0;
       c3lSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lSf() //  [R1]
         { info_tbl: [(c3lSf,
                       label: block_c3lSf_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lSf: // global
           _c3lSm::P64 = R1 & 7;
           if (_c3lSm::P64 < 3) goto u3lVh; else goto c3lSl;
       u3lVh: // global
           _s3kif::P64 = P64[Sp + 8];
           if (_c3lSm::P64 < 2) goto c3lSj; else goto c3lSk;
       c3lSj: // global
           I64[Sp - 48] = block_c3lSs_info;
           _s3kij::P64 = R1;
           _s3kim::P64 = P64[R1 + 7];
           _s3kio::P64 = P64[R1 + 15];
           _s3kip::P64 = P64[R1 + 23];
           _s3kik::I64 = I64[R1 + 31];
           _s3kil::I64 = I64[R1 + 39];
           _s3kin::I64 = I64[R1 + 47];
           R1 = _s3kif::P64;
           I64[Sp - 40] = _s3kil::I64;
           P64[Sp - 32] = _s3kim::P64;
           I64[Sp - 24] = _s3kin::I64;
           P64[Sp - 16] = _s3kio::P64;
           P64[Sp - 8] = _s3kip::P64;
           I64[Sp] = _s3kik::I64;
           P64[Sp + 8] = _s3kij::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3lVi; else goto c3lSu;
       u3lVi: // global
           call _c3lSs(R1) args: 0, res: 0, upd: 0;
       c3lSu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lSk: // global
           I64[Sp - 16] = block_c3lUR_info;
           _s3kij::P64 = R1;
           _s3kj1::P64 = P64[R1 + 6];
           _s3kiZ::I64 = I64[R1 + 14];
           _s3kj0::I64 = I64[R1 + 22];
           R1 = _s3kif::P64;
           P64[Sp - 8] = _s3kj1::P64;
           I64[Sp] = _s3kj0::I64;
           I64[Sp + 8] = _s3kiZ::I64;
           P64[Sp + 16] = _s3kij::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3lVj; else goto c3lUT;
       u3lVj: // global
           call _c3lUR(R1) args: 0, res: 0, upd: 0;
       c3lUT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lSl: // global
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lSs() //  [R1]
         { info_tbl: [(c3lSs,
                       label: block_c3lSs_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lSs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lSA; else goto c3lSz;
       c3lSA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lSz: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kin::I64 = I64[Sp + 24];
           _s3kir::I64 = I64[R1 + 7];
           _s3kit::I64 = (_s3kin::I64 + -1) ^ _s3kin::I64 ^ 18446744073709551615;
           if (_s3kir::I64 & _s3kit::I64 == _s3kik::I64 & _s3kit::I64) goto c3lUN; else goto c3lUO;
       c3lUN: // global
           _s3kio::P64 = P64[Sp + 32];
           _s3kip::P64 = P64[Sp + 40];
           if (_s3kir::I64 == _s3kik::I64) goto c3lUI; else goto c3lUy;
       c3lUI: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3kin::I64;
           I64[Sp] = block_c3lUB_info;
           R4 = _s3kip::P64;
           R3 = _s3kio::P64;
           R2 = Hp - 7;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c3lUy: // global
           Hp = Hp - 16;
           _s3kih::P64 = P64[Sp + 64];
           if (_s3kir::I64 & _s3kin::I64 == 0) goto c3lTY; else goto c3lTi;
       c3lTY: // global
           I64[Sp] = block_c3lTV_info;
           R2 = _s3kio::P64;
           R1 = _s3kih::P64;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3lTi: // global
           I64[Sp] = block_c3lTe_info;
           R2 = _s3kip::P64;
           R1 = _s3kih::P64;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3lUO: // global
           Hp = Hp - 16;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 56];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lUB() //  [R1]
         { info_tbl: [(c3lUB,
                       label: block_c3lUB_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lUB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lUL; else goto c3lUK;
       c3lUL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lUK: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = R1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lTV() //  [R1, R2]
         { info_tbl: [(c3lTV,
                       label: block_c3lTV_info
                       rep:StackRep [True, False, True, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lTV: // global
           I64[Sp] = block_c3lTX_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3lVn; else goto c3lU1;
       u3lVn: // global
           call _c3lTX(R1) args: 0, res: 0, upd: 0;
       c3lU1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lTX() //  [R1]
         { info_tbl: [(c3lTX,
                       label: block_c3lTX_info
                       rep:StackRep [True, False, True, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lTX: // global
           _s3kip::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3lUf; else goto c3lU7;
       c3lUf: // global
           I64[Sp] = block_c3lUd_info;
           R1 = _s3kip::P64;
           if (R1 & 7 != 0) goto u3lVo; else goto c3lUg;
       u3lVo: // global
           call _c3lUd(R1) args: 0, res: 0, upd: 0;
       c3lUg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lU7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lUa; else goto c3lU9;
       c3lUa: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lU9: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3kip::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lUd() //  [R1]
         { info_tbl: [(c3lUd,
                       label: block_c3lUd_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lUd: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kil::I64 = I64[Sp + 8];
           _s3kim::P64 = P64[Sp + 16];
           _s3kiO::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3lUt; else goto c3lUm;
       c3lUt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lUw; else goto c3lUv;
       c3lUw: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lUv: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3kim::P64;
           I64[Hp - 8] = _s3kik::I64;
           I64[Hp] = _s3kil::I64;
           R2 = _s3kiO::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lUm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lUp; else goto c3lUo;
       c3lUp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lUo: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3kim::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3kik::I64;
           I64[Hp - 8] = _s3kil::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3kiO::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lTe() //  [R1, R2]
         { info_tbl: [(c3lTe,
                       label: block_c3lTe_info
                       rep:StackRep [True, False, True, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lTe: // global
           I64[Sp] = block_c3lTg_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3lVl; else goto c3lTl;
       u3lVl: // global
           call _c3lTg(R1) args: 0, res: 0, upd: 0;
       c3lTl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lTg() //  [R1]
         { info_tbl: [(c3lTg,
                       label: block_c3lTg_info
                       rep:StackRep [True, False, True, False, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lTg: // global
           _s3kio::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3lTz; else goto c3lTr;
       c3lTz: // global
           I64[Sp] = block_c3lTx_info;
           R1 = _s3kio::P64;
           if (R1 & 7 != 0) goto u3lVm; else goto c3lTA;
       u3lVm: // global
           call _c3lTx(R1) args: 0, res: 0, upd: 0;
       c3lTA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3lTr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lTu; else goto c3lTt;
       c3lTu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lTt: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3kio::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lTx() //  [R1]
         { info_tbl: [(c3lTx,
                       label: block_c3lTx_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lTx: // global
           _s3kik::I64 = I64[Sp + 48];
           _s3kil::I64 = I64[Sp + 8];
           _s3kim::P64 = P64[Sp + 16];
           _s3kiG::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3lTN; else goto c3lTG;
       c3lTN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3lTQ; else goto c3lTP;
       c3lTQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lTP: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3kim::P64;
           I64[Hp - 8] = _s3kik::I64;
           I64[Hp] = _s3kil::I64;
           R2 = _s3kiG::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lTG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lTJ; else goto c3lTI;
       c3lTJ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lTI: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3kim::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3kik::I64;
           I64[Hp - 8] = _s3kil::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3kiG::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lUR() //  [R1]
         { info_tbl: [(c3lUR,
                       label: block_c3lUR_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lUR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3lUZ; else goto c3lUY;
       c3lUZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lUY: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3lV9; else goto c3lV3;
       c3lV9: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3lV3: // global
           Hp = Hp - 56;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.deleteView_entry() //  [R2, R3]
         { info_tbl: [(c3lVy,
                       label: GHC.Event.PSQ.deleteView_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lVy: // global
           _s3kig::P64 = R3;
           _s3kif::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3lVz; else goto c3lVA;
       c3lVA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lVC; else goto c3lVB;
       c3lVC: // global
           HpAlloc = 16;
           goto c3lVz;
       c3lVz: // global
           R3 = _s3kig::P64;
           R2 = _s3kif::P64;
           R1 = GHC.Event.PSQ.deleteView_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3lVB: // global
           I64[Hp - 8] = delFrom_s3kih_info;
           P64[Hp] = _s3kif::P64;
           I64[Sp - 8] = block_c3lVp_info;
           R2 = _s3kig::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call delFrom_s3kih_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lVp() //  [R1, R2]
         { info_tbl: [(c3lVp,
                       label: block_c3lVp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lVp: // global
           I64[Sp - 8] = block_c3lVr_info;
           _s3kj9::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3kj9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lVU; else goto c3lVs;
       u3lVU: // global
           call _c3lVr(R1) args: 0, res: 0, upd: 0;
       c3lVs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lVr() //  [R1]
         { info_tbl: [(c3lVr,
                       label: block_c3lVr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lVr: // global
           if (R1 & 7 == 1) goto c3lVv; else goto c3lVw;
       c3lVv: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lVw: // global
           I64[Sp] = block_c3lVJ_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3lVV; else goto c3lVK;
       u3lVV: // global
           call _c3lVJ(R1) args: 0, res: 0, upd: 0;
       c3lVK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lVJ() //  [R1]
         { info_tbl: [(c3lVJ,
                       label: block_c3lVJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lVJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3lVT; else goto c3lVS;
       c3lVT: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3lVS: // global
           _s3kje::P64 = P64[R1 + 7];
           _s3kjf::P64 = P64[R1 + 15];
           I64[Hp - 40] = (,,)_con_info;
           P64[Hp - 32] = _s3kje::P64;
           P64[Hp - 24] = _s3kjf::P64;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.391406843 UTC

[section ""data" . GHC.Event.PSQ.$wsize_closure" {
     GHC.Event.PSQ.$wsize_closure:
         const GHC.Event.PSQ.$wsize_info;
 },
 GHC.Event.PSQ.$wsize_entry() //  [R2]
         { info_tbl: [(c3lXV,
                       label: GHC.Event.PSQ.$wsize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lXV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3lXW; else goto c3lXX;
       c3lXW: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.$wsize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lXX: // global
           I64[Sp - 8] = block_c3lXN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3lYm; else goto c3lXO;
       u3lYm: // global
           call _c3lXN(R1) args: 0, res: 0, upd: 0;
       c3lXO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lXN() //  [R1]
         { info_tbl: [(c3lXN,
                       label: block_c3lXN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lXN: // global
           _c3lXU::P64 = R1 & 7;
           if (_c3lXU::P64 < 3) goto u3lYl; else goto c3lXT;
       u3lYl: // global
           if (_c3lXU::P64 < 2) goto c3lXR; else goto c3lXS;
       c3lXR: // global
           I64[Sp - 8] = block_c3lY0_info;
           R2 = P64[R1 + 15];
           P64[Sp] = P64[R1 + 23];
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
       c3lXS: // global
           R1 = 1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3lXT: // global
           R1 = 0;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3lY0() //  [R1]
         { info_tbl: [(c3lY0,
                       label: block_c3lY0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lY0: // global
           I64[Sp] = block_c3lY4_info;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = R1;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lY4() //  [R1]
         { info_tbl: [(c3lY4,
                       label: block_c3lY4_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lY4: // global
           R1 = I64[Sp + 8] + (R1 + 1);
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.402098049 UTC

[section ""data" . GHC.Event.PSQ.size_closure" {
     GHC.Event.PSQ.size_closure:
         const GHC.Event.PSQ.size_info;
 },
 GHC.Event.PSQ.size_entry() //  [R2]
         { info_tbl: [(c3lYP,
                       label: GHC.Event.PSQ.size_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lYP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3lYT; else goto c3lYU;
       c3lYT: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.size_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3lYU: // global
           I64[Sp - 8] = block_c3lYN_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3lYN() //  [R1]
         { info_tbl: [(c3lYN,
                       label: block_c3lYN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lYN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3lYX; else goto c3lYW;
       c3lYX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3lYW: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.4123182 UTC

[section ""data" . GHC.Event.PSQ.$wunsafeInsertNew_closure" {
     GHC.Event.PSQ.$wunsafeInsertNew_closure:
         const GHC.Event.PSQ.$wunsafeInsertNew_info;
 },
 GHC.Event.PSQ.$wunsafeInsertNew_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lZ8: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.$wunsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3lZk,
                       label: GHC.Event.PSQ.$wunsafeInsertNew_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [True, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lZk: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3lZl; else goto c3lZm;
       c3lZl: // global
           R1 = GHC.Event.PSQ.$wunsafeInsertNew_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3lZm: // global
           I64[Sp - 32] = block_c3lZc_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3m6Q; else goto c3lZd;
       u3m6Q: // global
           call _c3lZc(R1) args: 0, res: 0, upd: 0;
       c3lZd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3lZc() //  [R1]
         { info_tbl: [(c3lZc,
                       label: block_c3lZc_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3lZc: // global
           _s3kjz::P64 = P64[Sp + 24];
           _c3lZj::P64 = R1 & 7;
           if (_c3lZj::P64 < 3) goto u3m6M; else goto c3lZi;
       u3m6M: // global
           _s3kjx::I64 = I64[Sp + 8];
           _s3kjy::I64 = I64[Sp + 16];
           if (_c3lZj::P64 < 2) goto c3lZg; else goto c3lZh;
       c3lZg: // global
           _s3kjE::P64 = P64[R1 + 7];
           _s3kjG::P64 = P64[R1 + 15];
           _s3kjH::P64 = P64[R1 + 23];
           _s3kjC::I64 = I64[R1 + 31];
           _s3kjD::I64 = I64[R1 + 39];
           _s3kjF::I64 = I64[R1 + 47];
           _s3kjJ::I64 = (_s3kjF::I64 + -1) ^ _s3kjF::I64 ^ 18446744073709551615;
           if (_s3kjx::I64 & _s3kjJ::I64 == _s3kjC::I64 & _s3kjJ::I64) goto c3m1x; else goto c3m4c;
       c3m1x: // global
           if (_s3kjy::I64 == _s3kjD::I64) goto c3m1v; else goto c3m1o;
       c3m1v: // global
           _s3kjI::I64 = _s3kjF::I64;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kjC::I64)) goto s3kjR; else goto s3kjW;
       c3m1o: // global
           _s3kjI::I64 = _s3kjF::I64;
           if (_s3kjy::I64 > _s3kjD::I64) goto s3kjR; else goto s3kjW;
       s3kjR: // global
           if (_s3kjx::I64 & _s3kjI::I64 == 0) goto c3m0q; else goto c3m0c;
       c3m0q: // global
           I64[Sp - 16] = block_c3m0l_info;
           R5 = _s3kjG::P64;
           R4 = _s3kjz::P64;
           R3 = _s3kjy::I64;
           R2 = _s3kjx::I64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjF::I64;
           P64[Sp + 8] = _s3kjE::P64;
           I64[Sp + 16] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       c3m0c: // global
           I64[Sp - 16] = block_c3m06_info;
           R5 = _s3kjH::P64;
           R4 = _s3kjz::P64;
           R3 = _s3kjy::I64;
           R2 = _s3kjx::I64;
           P64[Sp - 8] = _s3kjG::P64;
           I64[Sp] = _s3kjF::I64;
           P64[Sp + 8] = _s3kjE::P64;
           I64[Sp + 16] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       s3kjW: // global
           if (_s3kjC::I64 & _s3kjI::I64 == 0) goto c3m19; else goto c3m0S;
       c3m19: // global
           I64[Sp - 40] = block_c3m12_info;
           R1 = _s3kjz::P64;
           P64[Sp - 32] = _s3kjE::P64;
           I64[Sp - 24] = _s3kjF::I64;
           P64[Sp - 16] = _s3kjG::P64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3m0S: // global
           I64[Sp - 40] = block_c3m0K_info;
           R1 = _s3kjz::P64;
           P64[Sp - 32] = _s3kjE::P64;
           I64[Sp - 24] = _s3kjF::I64;
           P64[Sp - 16] = _s3kjG::P64;
           P64[Sp - 8] = _s3kjH::P64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3m4c: // global
           if (_s3kjy::I64 == _s3kjD::I64) goto c3m4b; else goto c3m44;
       c3m4b: // global
           _s3kjB::P64 = R1;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kjC::I64)) goto s3kk6; else goto s3kkq;
       c3m44: // global
           _s3kjB::P64 = R1;
           if (_s3kjy::I64 > _s3kjD::I64) goto s3kk6; else goto s3kkq;
       s3kk6: // global
           (_c3m1O::I64) = call MO_Clz W64(_s3kjC::I64 ^ _s3kjx::I64);
           _s3kk7::I64 = 1 << 63 - _c3m1O::I64;
           _s3kkh::I64 = _s3kk7::I64 & _s3kjx::I64;
           if (_s3kkh::I64 != 0) goto u3m6N; else goto c3m2L;
       u3m6N: // global
           I64[Sp - 56] = _s3kjD::I64;
           P64[Sp - 48] = _s3kjE::P64;
           I64[Sp - 40] = _s3kjF::I64;
           P64[Sp - 32] = _s3kjG::P64;
           P64[Sp - 24] = _s3kjH::P64;
           I64[Sp - 16] = _s3kk7::I64;
           I64[Sp - 8] = _s3kkh::I64;
           I64[Sp] = _s3kjC::I64;
           Sp = Sp - 56;
           call _c3m2e() args: 0, res: 0, upd: 0;
       c3m2L: // global
           I64[Sp - 48] = block_c3m2C_info;
           R1 = _s3kjz::P64;
           P64[Sp - 40] = _s3kjE::P64;
           I64[Sp - 32] = _s3kjF::I64;
           P64[Sp - 24] = _s3kjG::P64;
           P64[Sp - 16] = _s3kjH::P64;
           I64[Sp - 8] = _s3kk7::I64;
           I64[Sp] = _s3kjD::I64;
           I64[Sp + 24] = _s3kjC::I64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3kkq: // global
           (_c3m38::I64) = call MO_Clz W64(_s3kjx::I64 ^ _s3kjC::I64);
           _s3kkr::I64 = 1 << 63 - _c3m38::I64;
           if (_s3kkr::I64 & _s3kjC::I64 == 0) goto c3m3Q; else goto c3m3E;
       c3m3Q: // global
           I64[Sp - 8] = block_c3m3N_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kkr::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3m3E: // global
           I64[Sp - 8] = block_c3m3A_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kkr::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3lZh: // global
           _s3kkJ::P64 = P64[R1 + 6];
           _s3kkH::I64 = I64[R1 + 14];
           _s3kkI::I64 = I64[R1 + 22];
           if (_s3kjy::I64 == _s3kkI::I64) goto c3m6C; else goto c3m6v;
       c3m6C: // global
           _s3kjB::P64 = R1;
           if (%MO_S_Ge_W64(_s3kjx::I64,
                            _s3kkH::I64)) goto s3kkK; else goto s3kl0;
       c3m6v: // global
           _s3kjB::P64 = R1;
           if (_s3kjy::I64 > _s3kkI::I64) goto s3kkK; else goto s3kl0;
       s3kkK: // global
           (_c3m4v::I64) = call MO_Clz W64(_s3kkH::I64 ^ _s3kjx::I64);
           _s3kkL::I64 = 1 << 63 - _c3m4v::I64;
           if (_s3kkL::I64 & _s3kjx::I64 == 0) goto c3m5f; else goto c3m52;
       c3m5f: // global
           I64[Sp - 24] = block_c3m5b_info;
           R1 = _s3kjz::P64;
           P64[Sp - 16] = _s3kkJ::P64;
           I64[Sp - 8] = _s3kkL::I64;
           I64[Sp] = _s3kkI::I64;
           I64[Sp + 24] = _s3kkH::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3m52: // global
           I64[Sp - 24] = block_c3m4X_info;
           R1 = _s3kjz::P64;
           P64[Sp - 16] = _s3kkJ::P64;
           I64[Sp - 8] = _s3kkL::I64;
           I64[Sp] = _s3kkI::I64;
           I64[Sp + 24] = _s3kkH::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3kl0: // global
           (_c3m5z::I64) = call MO_Clz W64(_s3kjx::I64 ^ _s3kkH::I64);
           _s3kl1::I64 = 1 << 63 - _c3m5z::I64;
           if (_s3kl1::I64 & _s3kkH::I64 == 0) goto c3m6h; else goto c3m65;
       c3m6h: // global
           I64[Sp - 8] = block_c3m6e_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kl1::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3m65: // global
           I64[Sp - 8] = block_c3m61_info;
           R1 = _s3kjz::P64;
           I64[Sp] = _s3kl1::I64;
           P64[Sp + 24] = _s3kjB::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3lZi: // global
           I64[Sp] = block_c3m6F_info;
           R1 = _s3kjz::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3m0l() //  [R1]
         { info_tbl: [(c3m0l,
                       label: block_c3m0l_info
                       rep:StackRep [False, True, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m0l: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m0u; else goto c3m0t;
       c3m0u: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m0t: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m06() //  [R1]
         { info_tbl: [(c3m06,
                       label: block_c3m06_info
                       rep:StackRep [False, True, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m06: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m0g; else goto c3m0f;
       c3m0g: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m0f: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m12() //  [R1]
         { info_tbl: [(c3m12,
                       label: block_c3m12_info
                       rep:StackRep [False, True, False, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m12: // global
           _s3kjE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3m14_info;
           R5 = P64[Sp + 24];
           R4 = _s3kjE::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3m14() //  [R1]
         { info_tbl: [(c3m14,
                       label: block_c3m14_info
                       rep:StackRep [True, True, False, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m14: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m1e; else goto c3m1d;
       c3m1e: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m1d: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m0K() //  [R1]
         { info_tbl: [(c3m0K,
                       label: block_c3m0K_info
                       rep:StackRep [False, True, False, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m0K: // global
           _s3kjE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3m0M_info;
           R5 = P64[Sp + 32];
           R4 = _s3kjE::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3m0M() //  [R1]
         { info_tbl: [(c3m0M,
                       label: block_c3m0M_info
                       rep:StackRep [True, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m0M: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m0X; else goto c3m0W;
       c3m0X: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m0W: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m2e() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m2e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3m2t; else goto c3m2s;
       c3m2t: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c3m2d_info;
           R1 = I64[Sp + 48];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3m2s: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp - 8] = block_c3m2h_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           Sp = Sp - 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3m2d() //  [R1]
         { info_tbl: [(c3m2d,
                       label: block_c3m2d_info
                       rep:StackRep [True, False, True, False, False, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m2d: // global
           I64[Sp + 56] = R1;
           Sp = Sp + 8;
           call _c3m2e() args: 0, res: 0, upd: 0;
     }
 },
 _c3m2h() //  [R1]
         { info_tbl: [(c3m2h,
                       label: block_c3m2h_info
                       rep:StackRep [True, False, True, True, True, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m2h: // global
           I64[Sp] = block_c3m2l_info;
           _s3kkj::P64 = R1;
           R1 = P64[Sp + 88];
           P64[Sp + 88] = _s3kkj::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3m2l() //  [R1]
         { info_tbl: [(c3m2l,
                       label: block_c3m2l_info
                       rep:StackRep [True, False, True, True, True, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m2l: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3m2x; else goto c3m2w;
       c3m2x: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m2w: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 80];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 64];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m2C() //  [R1]
         { info_tbl: [(c3m2C,
                       label: block_c3m2C_info
                       rep:StackRep [False, True, False, False, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m2C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3m2P; else goto c3m2O;
       c3m2P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m2O: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp] = block_c3m2F_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           P64[Sp + 32] = R1;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3m2F() //  [R1]
         { info_tbl: [(c3m2F,
                       label: block_c3m2F_info
                       rep:StackRep [False, True, True, False, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m2F: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3m2S; else goto c3m2R;
       c3m2S: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m2R: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = P64[Sp + 32];
           I64[Hp - 64] = I64[Sp + 56];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m3N() //  [R1]
         { info_tbl: [(c3m3N,
                       label: block_c3m3N_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m3N: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m3U; else goto c3m3T;
       c3m3U: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m3T: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m3A() //  [R1]
         { info_tbl: [(c3m3A,
                       label: block_c3m3A_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m3A: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m3I; else goto c3m3H;
       c3m3I: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m3H: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m5b() //  [R1]
         { info_tbl: [(c3m5b,
                       label: block_c3m5b_info
                       rep:StackRep [False, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m5b: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3m5j; else goto c3m5i;
       c3m5j: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m5i: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m4X() //  [R1]
         { info_tbl: [(c3m4X,
                       label: block_c3m4X_info
                       rep:StackRep [False, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m4X: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3m56; else goto c3m55;
       c3m56: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m55: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m6e() //  [R1]
         { info_tbl: [(c3m6e,
                       label: block_c3m6e_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m6e: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m6l; else goto c3m6k;
       c3m6l: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m6k: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m61() //  [R1]
         { info_tbl: [(c3m61,
                       label: block_c3m61_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m61: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3m69; else goto c3m68;
       c3m69: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m68: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3m6F() //  [R1]
         { info_tbl: [(c3m6F,
                       label: block_c3m6F_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3m6F: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3m6L; else goto c3m6K;
       c3m6L: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3m6K: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.469280682 UTC

[section ""data" . GHC.Event.PSQ.unsafeInsertNew_closure" {
     GHC.Event.PSQ.unsafeInsertNew_closure:
         const GHC.Event.PSQ.unsafeInsertNew_info;
 },
 GHC.Event.PSQ.unsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3ma5,
                       label: GHC.Event.PSQ.unsafeInsertNew_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ma5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3ma9; else goto c3maa;
       c3ma9: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.unsafeInsertNew_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3maa: // global
           I64[Sp - 32] = block_c3ma2_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3mai; else goto c3ma3;
       u3mai: // global
           call _c3ma2(R1) args: 0, res: 0, upd: 0;
       c3ma3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ma2() //  [R1]
         { info_tbl: [(c3ma2,
                       label: block_c3ma2_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ma2: // global
           I64[Sp] = block_c3ma8_info;
           _s3kln::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3kln::I64;
           if (R1 & 7 != 0) goto u3mah; else goto c3mac;
       u3mah: // global
           call _c3ma8(R1) args: 0, res: 0, upd: 0;
       c3mac: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ma8() //  [R1]
         { info_tbl: [(c3ma8,
                       label: block_c3ma8_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ma8: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.477135667 UTC

[section ""data" . GHC.Event.PSQ.insert_closure" {
     GHC.Event.PSQ.insert_closure:
         const GHC.Event.PSQ.insert_info;
 },
 GHC.Event.PSQ.insert_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3maD,
                       label: GHC.Event.PSQ.insert_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3maD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3maM; else goto c3maN;
       c3maM: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.insert_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3maN: // global
           I64[Sp - 32] = block_c3maA_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3maV; else goto c3maB;
       u3maV: // global
           call _c3maA(R1) args: 0, res: 0, upd: 0;
       c3maB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3maA() //  [R1]
         { info_tbl: [(c3maA,
                       label: block_c3maA_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3maA: // global
           I64[Sp - 8] = block_c3maG_info;
           _s3klu::P64 = R1;
           _s3klv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s3klv::I64;
           P64[Sp + 8] = _s3klu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3maU; else goto c3maH;
       u3maU: // global
           call _c3maG(R1) args: 0, res: 0, upd: 0;
       c3maH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3maG() //  [R1]
         { info_tbl: [(c3maG,
                       label: block_c3maG_info
                       rep:StackRep [True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3maG: // global
           I64[Sp] = block_c3maL_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 16];
           I64[Sp + 32] = I64[R1 + 7];
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3maL() //  [R1]
         { info_tbl: [(c3maL,
                       label: block_c3maL_info
                       rep:StackRep [True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3maL: // global
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = I64[Sp + 32];
           R2 = I64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.486863018 UTC

[section ""data" . go_r3kd8_closure" {
     go_r3kd8_closure:
         const go_r3kd8_info;
 },
 go_r3kd8_entry() //  [R2]
         { info_tbl: [(c3mbo,
                       label: go_r3kd8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mbo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3mbp; else goto c3mbq;
       c3mbp: // global
           R2 = R2;
           R1 = go_r3kd8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mbq: // global
           I64[Sp - 8] = block_c3mbh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mbR; else goto c3mbi;
       u3mbR: // global
           call _c3mbh(R1) args: 0, res: 0, upd: 0;
       c3mbi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mbh() //  [R1]
         { info_tbl: [(c3mbh,
                       label: block_c3mbh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mbh: // global
           if (R1 & 7 == 1) goto c3mbl; else goto c3mbm;
       c3mbl: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mbm: // global
           I64[Sp - 8] = block_c3mbw_info;
           _s3klC::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3klC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mbQ; else goto c3mbx;
       u3mbQ: // global
           call _c3mbw(R1) args: 0, res: 0, upd: 0;
       c3mbx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mbw() //  [R1]
         { info_tbl: [(c3mbw,
                       label: block_c3mbw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mbw: // global
           I64[Sp - 16] = block_c3mbB_info;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 7];
           I64[Sp] = I64[R1 + 23];
           I64[Sp + 8] = I64[R1 + 15];
           Sp = Sp - 16;
           call go_r3kd8_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3mbB() //  [R1]
         { info_tbl: [(c3mbB,
                       label: block_c3mbB_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mbB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mbL; else goto c3mbK;
       c3mbL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mbK: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3mbG_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3mbG() //  [R1]
         { info_tbl: [(c3mbG,
                       label: block_c3mbG_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mbG: // global
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.500478225 UTC

[section ""data" . GHC.Event.PSQ.fromList_closure" {
     GHC.Event.PSQ.fromList_closure:
         const GHC.Event.PSQ.fromList_info;
 },
 GHC.Event.PSQ.fromList_entry() //  [R2]
         { info_tbl: [(c3mcm,
                       label: GHC.Event.PSQ.fromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mcm: // global
           R2 = R2;
           call go_r3kd8_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.506004752 UTC

[section ""data" . GHC.Event.PSQ.adjust_closure" {
     GHC.Event.PSQ.adjust_closure:
         const GHC.Event.PSQ.adjust_info;
 },
 GHC.Event.PSQ.adjust_entry() //  [R2, R3, R4]
         { info_tbl: [(c3mcD,
                       label: GHC.Event.PSQ.adjust_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mcD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3mcE; else goto c3mcF;
       c3mcE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.adjust_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mcF: // global
           I64[Sp - 32] = block_c3mcx_info;
           _s3klL::P64 = R3;
           R3 = R4;
           _s3klK::P64 = R2;
           R2 = _s3klL::P64;
           P64[Sp - 24] = _s3klK::P64;
           P64[Sp - 16] = _s3klL::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Event.PSQ.deleteView_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3mcx() //  [R1]
         { info_tbl: [(c3mcx,
                       label: block_c3mcx_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mcx: // global
           if (R1 & 7 == 1) goto c3mcA; else goto c3mcB;
       c3mcA: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3mcB: // global
           I64[Sp] = block_c3mcL_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3md3; else goto c3mcM;
       u3md3: // global
           call _c3mcL(R1) args: 0, res: 0, upd: 0;
       c3mcM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mcL() //  [R1]
         { info_tbl: [(c3mcL,
                       label: block_c3mcL_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mcL: // global
           I64[Sp - 8] = block_c3mcQ_info;
           _s3klQ::P64 = P64[R1 + 7];
           _s3klR::P64 = P64[R1 + 15];
           _s3klS::P64 = P64[R1 + 23];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3klS::P64;
           P64[Sp + 16] = _s3klR::P64;
           P64[Sp + 24] = _s3klQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3md4; else goto c3mcR;
       u3md4: // global
           call _c3mcQ(R1) args: 0, res: 0, upd: 0;
       c3mcR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mcQ() //  [R1]
         { info_tbl: [(c3mcQ,
                       label: block_c3mcQ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mcQ: // global
           I64[Sp] = block_c3mcV_info;
           R2 = P64[Sp + 32];
           _s3klU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s3klU::I64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mcV() //  [R1]
         { info_tbl: [(c3mcV,
                       label: block_c3mcV_info
                       rep:StackRep [False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mcV: // global
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 32];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.517446243 UTC

[section ""data" . GHC.Event.PSQ.Bin_closure" {
     GHC.Event.PSQ.Bin_closure:
         const GHC.Event.PSQ.Bin_info;
 },
 GHC.Event.PSQ.Bin_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mdt: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.PSQ.Bin_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.Bin_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3mdy,
                       label: GHC.Event.PSQ.Bin_info
                       rep:HeapRep static {
                             Fun {arity: 6
                                  fun_type: ArgGen [True, True, False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mdy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mdC; else goto c3mdB;
       c3mdC: // global
           HpAlloc = 56;
           R1 = GHC.Event.PSQ.Bin_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c3mdB: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R5;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.522796281 UTC

[section ""data" . GHC.Event.PSQ.Tip_closure" {
     GHC.Event.PSQ.Tip_closure:
         const GHC.Event.PSQ.Tip_info;
 },
 GHC.Event.PSQ.Tip_entry() //  [R2, R3, R4]
         { info_tbl: [(c3mdQ,
                       label: GHC.Event.PSQ.Tip_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mdQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mdU; else goto c3mdT;
       c3mdU: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.Tip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mdT: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.526732632 UTC

[section ""data" . GHC.Event.PSQ.Nil_closure" {
     GHC.Event.PSQ.Nil_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.52863929 UTC

[section ""data" . GHC.Event.PSQ.E_closure" {
     GHC.Event.PSQ.E_closure:
         const GHC.Event.PSQ.E_info;
 },
 GHC.Event.PSQ.E_entry() //  [R2, R3, R4]
         { info_tbl: [(c3me6,
                       label: GHC.Event.PSQ.E_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3me6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mea; else goto c3me9;
       c3mea: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.E_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3me9: // global
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.532491483 UTC

[GHC.Event.PSQ.Bin_con_entry() //  [R1]
         { info_tbl: [(c3meg,
                       label: GHC.Event.PSQ.Bin_con_info
                       rep:HeapRep 3 ptrs 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,66,105,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3meg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.537295701 UTC

[GHC.Event.PSQ.Tip_con_entry() //  [R1]
         { info_tbl: [(c3mem,
                       label: GHC.Event.PSQ.Tip_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,84,105,112]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mem: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.541940442 UTC

[GHC.Event.PSQ.Nil_con_entry() //  [R1]
         { info_tbl: [(c3mes,
                       label: GHC.Event.PSQ.Nil_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,78,105,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mes: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.546181549 UTC

[GHC.Event.PSQ.E_con_entry() //  [R1]
         { info_tbl: [(c3mey,
                       label: GHC.Event.PSQ.E_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,69]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mey: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:57.550547118 UTC

[section ""relreadonly" . S3kTe_srt" { S3kTe_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.398466003 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:57:59.401338197 UTC

[section ""data" . GHC.Event.PSQ.$WBin_closure" {
     GHC.Event.PSQ.$WBin_closure:
         const GHC.Event.PSQ.$WBin_info;
 },
 GHC.Event.PSQ.$WBin_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3mnz,
                       label: GHC.Event.PSQ.$WBin_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mnz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3mnZ; else goto c3mo0;
       c3mnZ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WBin_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c3mo0: // global
           I64[Sp - 40] = block_c3mnw_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3moa; else goto c3mnx;
       u3moa: // global
           call _c3mnw(R1) args: 0, res: 0, upd: 0;
       c3mnx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mnw() //  [R1]
         { info_tbl: [(c3mnw,
                       label: block_c3mnw_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mnw: // global
           I64[Sp] = block_c3mnC_info;
           _s3meM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3meM::I64;
           if (R1 & 7 != 0) goto u3mo9; else goto c3mnD;
       u3mo9: // global
           call _c3mnC(R1) args: 0, res: 0, upd: 0;
       c3mnD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mnC() //  [R1]
         { info_tbl: [(c3mnC,
                       label: block_c3mnC_info
                       rep:StackRep [True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mnC: // global
           I64[Sp] = block_c3mnH_info;
           _s3meO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3meO::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mnH() //  [R1]
         { info_tbl: [(c3mnH,
                       label: block_c3mnH_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mnH: // global
           I64[Sp] = block_c3mnJ_info;
           _s3meP::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s3meP::P64;
           if (R1 & 7 != 0) goto u3mob; else goto c3mnK;
       u3mob: // global
           call _c3mnJ(R1) args: 0, res: 0, upd: 0;
       c3mnK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mnJ() //  [R1]
         { info_tbl: [(c3mnJ,
                       label: block_c3mnJ_info
                       rep:StackRep [True, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mnJ: // global
           I64[Sp] = block_c3mnO_info;
           _s3meR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s3meR::I64;
           if (R1 & 7 != 0) goto u3moc; else goto c3mnP;
       u3moc: // global
           call _c3mnO(R1) args: 0, res: 0, upd: 0;
       c3mnP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mnO() //  [R1]
         { info_tbl: [(c3mnO,
                       label: block_c3mnO_info
                       rep:StackRep [True, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mnO: // global
           I64[Sp] = block_c3mnT_info;
           _s3meS::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 40] = _s3meS::P64;
           if (R1 & 7 != 0) goto u3mod; else goto c3mnU;
       u3mod: // global
           call _c3mnT(R1) args: 0, res: 0, upd: 0;
       c3mnU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mnT() //  [R1]
         { info_tbl: [(c3mnT,
                       label: block_c3mnT_info
                       rep:StackRep [True, True, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mnT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mo8; else goto c3mo7;
       c3mo8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mo7: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 32];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.418092933 UTC

[section ""data" . GHC.Event.PSQ.$WTip_closure" {
     GHC.Event.PSQ.$WTip_closure:
         const GHC.Event.PSQ.$WTip_info;
 },
 GHC.Event.PSQ.$WTip_entry() //  [R2, R3, R4]
         { info_tbl: [(c3mp0,
                       label: GHC.Event.PSQ.$WTip_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mp0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3mpb; else goto c3mpc;
       c3mpb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WTip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mpc: // global
           I64[Sp - 24] = block_c3moX_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mpj; else goto c3moY;
       u3mpj: // global
           call _c3moX(R1) args: 0, res: 0, upd: 0;
       c3moY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3moX() //  [R1]
         { info_tbl: [(c3moX,
                       label: block_c3moX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3moX: // global
           I64[Sp] = block_c3mp3_info;
           _s3meY::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3meY::I64;
           if (R1 & 7 != 0) goto u3mpi; else goto c3mp4;
       u3mpi: // global
           call _c3mp3(R1) args: 0, res: 0, upd: 0;
       c3mp4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mp3() //  [R1]
         { info_tbl: [(c3mp3,
                       label: block_c3mp3_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mp3: // global
           I64[Sp] = block_c3mp8_info;
           _s3mf0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3mf0::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mp8() //  [R1]
         { info_tbl: [(c3mp8,
                       label: block_c3mp8_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mp8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mph; else goto c3mpg;
       c3mph: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mpg: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.429986667 UTC

[section ""data" . GHC.Event.PSQ.$WE_closure" {
     GHC.Event.PSQ.$WE_closure:
         const GHC.Event.PSQ.$WE_info;
 },
 GHC.Event.PSQ.$WE_entry() //  [R2, R3, R4]
         { info_tbl: [(c3mpO,
                       label: GHC.Event.PSQ.$WE_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mpO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3mpX; else goto c3mpY;
       c3mpX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$WE_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mpY: // global
           I64[Sp - 24] = block_c3mpL_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mq4; else goto c3mpM;
       u3mq4: // global
           call _c3mpL(R1) args: 0, res: 0, upd: 0;
       c3mpM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mpL() //  [R1]
         { info_tbl: [(c3mpL,
                       label: block_c3mpL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mpL: // global
           I64[Sp] = block_c3mpR_info;
           _s3mf6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3mf6::I64;
           if (R1 & 7 != 0) goto u3mq3; else goto c3mpS;
       u3mq3: // global
           call _c3mpR(R1) args: 0, res: 0, upd: 0;
       c3mpS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mpR() //  [R1]
         { info_tbl: [(c3mpR,
                       label: block_c3mpR_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mpR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mq2; else goto c3mq1;
       c3mq2: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mq1: // global
           _s3mf8::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3mf8::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.439082471 UTC

[section ""data" . GHC.Event.PSQ.value_closure" {
     GHC.Event.PSQ.value_closure:
         const GHC.Event.PSQ.value_info;
 },
 GHC.Event.PSQ.value_entry() //  [R2]
         { info_tbl: [(c3mqv,
                       label: GHC.Event.PSQ.value_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mqv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mqw; else goto c3mqx;
       c3mqw: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.value_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mqx: // global
           I64[Sp - 8] = block_c3mqs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mqB; else goto c3mqt;
       u3mqB: // global
           call _c3mqs(R1) args: 0, res: 0, upd: 0;
       c3mqt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mqs() //  [R1]
         { info_tbl: [(c3mqs,
                       label: block_c3mqs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mqs: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.447744739 UTC

[section ""data" . GHC.Event.PSQ.prio_closure" {
     GHC.Event.PSQ.prio_closure:
         const GHC.Event.PSQ.prio_info;
 },
 GHC.Event.PSQ.prio_entry() //  [R2]
         { info_tbl: [(c3mqT,
                       label: GHC.Event.PSQ.prio_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mqT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mqX; else goto c3mqY;
       c3mqX: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.prio_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mqY: // global
           I64[Sp - 8] = block_c3mqQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mr2; else goto c3mqR;
       u3mr2: // global
           call _c3mqQ(R1) args: 0, res: 0, upd: 0;
       c3mqR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mqQ() //  [R1]
         { info_tbl: [(c3mqQ,
                       label: block_c3mqQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mqQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mr1; else goto c3mr0;
       c3mr1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mr0: // global
           _s3mfh::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s3mfh::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.454269832 UTC

[section ""data" . GHC.Event.PSQ.key_closure" {
     GHC.Event.PSQ.key_closure:
         const GHC.Event.PSQ.key_info;
 },
 GHC.Event.PSQ.key_entry() //  [R2]
         { info_tbl: [(c3mrm,
                       label: GHC.Event.PSQ.key_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mrm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mrq; else goto c3mrr;
       c3mrq: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.key_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mrr: // global
           I64[Sp - 8] = block_c3mrj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mrv; else goto c3mrk;
       u3mrv: // global
           call _c3mrj(R1) args: 0, res: 0, upd: 0;
       c3mrk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mrj() //  [R1]
         { info_tbl: [(c3mrj,
                       label: block_c3mrj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mrj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mru; else goto c3mrt;
       c3mru: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mrt: // global
           _s3mfl::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3mfl::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.46065162 UTC

[section ""data" . GHC.Event.PSQ.null_closure" {
     GHC.Event.PSQ.null_closure:
         const GHC.Event.PSQ.null_info;
 },
 GHC.Event.PSQ.null_entry() //  [R2]
         { info_tbl: [(c3mrT,
                       label: GHC.Event.PSQ.null_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mrT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mrU; else goto c3mrV;
       c3mrU: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.null_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mrV: // global
           I64[Sp - 8] = block_c3mrM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ms2; else goto c3mrN;
       u3ms2: // global
           call _c3mrM(R1) args: 0, res: 0, upd: 0;
       c3mrN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mrM() //  [R1]
         { info_tbl: [(c3mrM,
                       label: block_c3mrM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mrM: // global
           if (R1 & 7 == 3) goto c3mrR; else goto c3mrQ;
       c3mrR: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mrQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.466986055 UTC

[section ""data" . GHC.Event.PSQ.findMin_closure" {
     GHC.Event.PSQ.findMin_closure:
         const GHC.Event.PSQ.findMin_info;
 },
 GHC.Event.PSQ.findMin_entry() //  [R2]
         { info_tbl: [(c3msv,
                       label: GHC.Event.PSQ.findMin_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3msv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3msw; else goto c3msx;
       c3msw: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.findMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3msx: // global
           I64[Sp - 8] = block_c3msn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3msQ; else goto c3mso;
       u3msQ: // global
           call _c3msn(R1) args: 0, res: 0, upd: 0;
       c3mso: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3msn() //  [R1]
         { info_tbl: [(c3msn,
                       label: block_c3msn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3msn: // global
           _c3msu::P64 = R1 & 7;
           if (_c3msu::P64 < 3) goto u3msP; else goto c3mst;
       u3msP: // global
           if (_c3msu::P64 < 2) goto c3msr; else goto c3mss;
       c3msr: // global
           Hp = Hp + 48;
           _s3mfr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3msL; else goto c3msD;
       c3msD: // global
           _s3mfu::P64 = P64[_s3mfr::P64 + 7];
           _s3mfs::I64 = I64[_s3mfr::P64 + 31];
           _s3mft::I64 = I64[_s3mfr::P64 + 39];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3mfu::P64;
           I64[Hp - 24] = _s3mfs::I64;
           I64[Hp - 16] = _s3mft::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mss: // global
           Hp = Hp + 48;
           _s3mfr::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c3msL; else goto c3msK;
       c3msL: // global
           HpAlloc = 48;
           R1 = _s3mfr::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3msK: // global
           _s3mfB::P64 = P64[_s3mfr::P64 + 6];
           _s3mfz::I64 = I64[_s3mfr::P64 + 14];
           _s3mfA::I64 = I64[_s3mfr::P64 + 22];
           I64[Hp - 40] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 32] = _s3mfB::P64;
           I64[Hp - 24] = _s3mfz::I64;
           I64[Hp - 16] = _s3mfA::I64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mst: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.475095034 UTC

[section ""data" . GHC.Event.PSQ.empty_closure" {
     GHC.Event.PSQ.empty_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.477180068 UTC

[section ""data" . GHC.Event.PSQ.singleton_closure" {
     GHC.Event.PSQ.singleton_closure:
         const GHC.Event.PSQ.singleton_info;
 },
 GHC.Event.PSQ.singleton_entry() //  [R2, R3, R4]
         { info_tbl: [(c3mth,
                       label: GHC.Event.PSQ.singleton_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mth: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.PSQ.$WTip_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.48172945 UTC

[section ""data" . GHC.Event.PSQ.toList_go_closure" {
     GHC.Event.PSQ.toList_go_closure:
         const GHC.Event.PSQ.toList_go_info;
 },
 sat_s3mfN_entry() //  [R1]
         { info_tbl: [(c3mtF,
                       label: sat_s3mfN_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mtF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3mtG; else goto c3mtH;
       c3mtG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mtH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3mfO_entry() //  [R1]
         { info_tbl: [(c3mtI,
                       label: sat_s3mfO_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mtI: // global
           _s3mfO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3mtJ; else goto c3mtK;
       c3mtK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mtM; else goto c3mtL;
       c3mtM: // global
           HpAlloc = 32;
           goto c3mtJ;
       c3mtJ: // global
           R1 = _s3mfO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mtL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3mfO::P64;
           _s3mfD::P64 = P64[_s3mfO::P64 + 16];
           _s3mfK::P64 = P64[_s3mfO::P64 + 24];
           _s3mfL::P64 = P64[_s3mfO::P64 + 32];
           I64[Hp - 24] = sat_s3mfN_info;
           P64[Hp - 8] = _s3mfD::P64;
           P64[Hp] = _s3mfL::P64;
           R3 = _s3mfK::P64;
           R2 = Hp - 24;
           Sp = Sp - 16;
           call GHC.Event.PSQ.toList_go_entry(R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.PSQ.toList_go_entry() //  [R2, R3]
         { info_tbl: [(c3mtS,
                       label: GHC.Event.PSQ.toList_go_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mtS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3mtT; else goto c3mtU;
       c3mtT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.toList_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mtU: // global
           I64[Sp - 16] = block_c3mts_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3mub; else goto c3mtt;
       u3mub: // global
           call _c3mts(R1) args: 0, res: 0, upd: 0;
       c3mtt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mts() //  [R1]
         { info_tbl: [(c3mts,
                       label: block_c3mts_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mts: // global
           _s3mfD::P64 = P64[Sp + 8];
           _c3mtR::P64 = R1 & 7;
           if (_c3mtR::P64 < 3) goto u3mua; else goto c3mtQ;
       u3mua: // global
           if (_c3mtR::P64 < 2) goto c3mtO; else goto c3mtP;
       c3mtO: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c3mtZ; else goto c3mtY;
       c3mtZ: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mtY: // global
           _s3mfI::P64 = P64[R1 + 7];
           _s3mfK::P64 = P64[R1 + 15];
           _s3mfL::P64 = P64[R1 + 23];
           _s3mfG::I64 = I64[R1 + 31];
           _s3mfH::I64 = I64[R1 + 39];
           I64[Hp - 88] = sat_s3mfO_info;
           P64[Hp - 72] = _s3mfD::P64;
           P64[Hp - 64] = _s3mfK::P64;
           P64[Hp - 56] = _s3mfL::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3mfI::P64;
           I64[Hp - 32] = _s3mfG::I64;
           I64[Hp - 24] = _s3mfH::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mtP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mu6; else goto c3mu5;
       c3mu6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mu5: // global
           _s3mfR::P64 = P64[R1 + 6];
           _s3mfP::I64 = I64[R1 + 14];
           _s3mfQ::I64 = I64[R1 + 22];
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = _s3mfR::P64;
           I64[Hp - 32] = _s3mfP::I64;
           I64[Hp - 24] = _s3mfQ::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3mfD::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mtQ: // global
           R1 = _s3mfD::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.493216014 UTC

[section ""data" . GHC.Event.PSQ.toList_closure" {
     GHC.Event.PSQ.toList_closure:
         const GHC.Event.PSQ.toList_info;
 },
 GHC.Event.PSQ.toList_entry() //  [R2]
         { info_tbl: [(c3muO,
                       label: GHC.Event.PSQ.toList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3muO: // global
           R3 = R2;
           R2 = GHC.Types.[]_closure+1;
           call GHC.Event.PSQ.toList_go_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.50107646 UTC

[section ""data" . GHC.Event.PSQ.merge_closure" {
     GHC.Event.PSQ.merge_closure:
         const GHC.Event.PSQ.merge_info;
 },
 GHC.Event.PSQ.merge_entry() //  [R2, R3, R4]
         { info_tbl: [(c3mv8,
                       label: GHC.Event.PSQ.merge_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mv8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3mv9; else goto c3mva;
       c3mv9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.merge_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mva: // global
           I64[Sp - 24] = block_c3mv0_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mzT; else goto c3mv1;
       u3mzT: // global
           call _c3mv0(R1) args: 0, res: 0, upd: 0;
       c3mv1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mv0() //  [R1]
         { info_tbl: [(c3mv0,
                       label: block_c3mv0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mv0: // global
           _s3mfV::P64 = P64[Sp + 16];
           _c3mv7::P64 = R1 & 7;
           if (_c3mv7::P64 < 3) goto u3mzM; else goto c3mv6;
       u3mzM: // global
           if (_c3mv7::P64 < 2) goto c3mv4; else goto c3mv5;
       c3mv4: // global
           I64[Sp - 48] = block_c3mvd_info;
           _s3mfW::P64 = R1;
           _s3mfZ::P64 = P64[R1 + 7];
           _s3mg1::P64 = P64[R1 + 15];
           _s3mg2::P64 = P64[R1 + 23];
           _s3mfX::I64 = I64[R1 + 31];
           _s3mfY::I64 = I64[R1 + 39];
           _s3mg0::I64 = I64[R1 + 47];
           R1 = _s3mfV::P64;
           I64[Sp - 40] = _s3mfY::I64;
           P64[Sp - 32] = _s3mfZ::P64;
           I64[Sp - 24] = _s3mg0::I64;
           P64[Sp - 16] = _s3mg1::P64;
           P64[Sp - 8] = _s3mg2::P64;
           I64[Sp] = _s3mfX::I64;
           P64[Sp + 16] = _s3mfW::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3mzR; else goto c3mvf;
       u3mzR: // global
           call _c3mvd(R1) args: 0, res: 0, upd: 0;
       c3mvf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mv5: // global
           I64[Sp - 24] = block_c3mxv_info;
           _s3mfW::P64 = R1;
           _s3mgE::P64 = P64[R1 + 6];
           _s3mgC::I64 = I64[R1 + 14];
           _s3mgD::I64 = I64[R1 + 22];
           R1 = _s3mfV::P64;
           I64[Sp - 16] = _s3mgD::I64;
           P64[Sp - 8] = _s3mgE::P64;
           I64[Sp] = _s3mgC::I64;
           P64[Sp + 16] = _s3mfW::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mzS; else goto c3mxx;
       u3mzS: // global
           call _c3mxv(R1) args: 0, res: 0, upd: 0;
       c3mxx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mv6: // global
           R1 = _s3mfV::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mvd() //  [R1]
         { info_tbl: [(c3mvd,
                       label: block_c3mvd_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mvd: // global
           _c3mzL::P64 = R1 & 7;
           if (_c3mzL::P64 < 3) goto u3mzN; else goto u3mzP;
       u3mzN: // global
           _s3mfT::P64 = P64[Sp + 56];
           _s3mfX::I64 = I64[Sp + 48];
           _s3mfY::I64 = I64[Sp + 8];
           if (_c3mzL::P64 < 2) goto c3mwm; else goto c3mxo;
       c3mwm: // global
           _s3mg6::P64 = P64[R1 + 7];
           _s3mg8::P64 = P64[R1 + 15];
           _s3mg9::P64 = P64[R1 + 23];
           _s3mg4::I64 = I64[R1 + 31];
           _s3mg5::I64 = I64[R1 + 39];
           _s3mg7::I64 = I64[R1 + 47];
           if (_s3mfY::I64 == _s3mg5::I64) goto c3mwk; else goto c3mwd;
       c3mwk: // global
           _s3mg3::P64 = R1;
           if (%MO_S_Ge_W64(_s3mfX::I64,
                            _s3mg4::I64)) goto s3mga; else goto s3mgf;
       c3mwd: // global
           _s3mg3::P64 = R1;
           if (_s3mfY::I64 > _s3mg5::I64) goto s3mga; else goto s3mgf;
       s3mga: // global
           I64[Sp + 8] = block_c3mvp_info;
           R1 = _s3mfT::P64;
           P64[Sp + 16] = _s3mg9::P64;
           P64[Sp + 24] = _s3mg8::P64;
           I64[Sp + 32] = _s3mg7::I64;
           P64[Sp + 40] = _s3mg6::P64;
           I64[Sp + 48] = _s3mg5::I64;
           I64[Sp + 56] = _s3mg4::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3mzW; else goto c3mvq;
       u3mzW: // global
           call _c3mvp(R1) args: 0, res: 0, upd: 0;
       c3mvq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       s3mgf: // global
           I64[Sp] = block_c3mvM_info;
           R1 = _s3mfT::P64;
           P64[Sp + 64] = _s3mg3::P64;
           if (R1 & 7 != 0) goto u3mzX; else goto c3mvN;
       u3mzX: // global
           call _c3mvM(R1) args: 0, res: 0, upd: 0;
       c3mvN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mxo: // global
           _s3mgp::P64 = P64[R1 + 6];
           _s3mgn::I64 = I64[R1 + 14];
           _s3mgo::I64 = I64[R1 + 22];
           if (_s3mfY::I64 == _s3mgo::I64) goto c3mxn; else goto c3mx6;
       c3mxn: // global
           _s3mg3::P64 = R1;
           if (%MO_S_Lt_W64(_s3mfX::I64,
                            _s3mgn::I64)) goto s3mgq; else goto c3mxi;
       c3mxi: // global
           I64[Sp + 32] = block_c3mxb_info;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgp::P64;
           I64[Sp + 48] = _s3mgo::I64;
           I64[Sp + 56] = _s3mgn::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3mzV; else goto c3mxc;
       u3mzV: // global
           call _c3mxb(R1) args: 0, res: 0, upd: 0;
       c3mxc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mx6: // global
           _s3mg3::P64 = R1;
           if (_s3mfY::I64 <= _s3mgo::I64) goto s3mgq; else goto c3mx0;
       s3mgq: // global
           I64[Sp] = block_c3mwv_info;
           R1 = _s3mfT::P64;
           P64[Sp + 64] = _s3mg3::P64;
           if (R1 & 7 != 0) goto u3mzY; else goto c3mww;
       u3mzY: // global
           call _c3mwv(R1) args: 0, res: 0, upd: 0;
       c3mww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mx0: // global
           I64[Sp + 32] = block_c3mwT_info;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgp::P64;
           I64[Sp + 48] = _s3mgo::I64;
           I64[Sp + 56] = _s3mgn::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u3mzU; else goto c3mwU;
       u3mzU: // global
           call _c3mwT(R1) args: 0, res: 0, upd: 0;
       c3mwU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3mzP: // global
           Sp = Sp + 64;
           call _c3mzG() args: 0, res: 0, upd: 0;
     }
 },
 _c3mvp() //  [R1]
         { info_tbl: [(c3mvp,
                       label: block_c3mvp_info
                       rep:StackRep [False, False, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mvp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mvD; else goto c3mvC;
       c3mvD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mvC: // global
           _s3mgc::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3mg8::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3mvv_info;
           R4 = P64[Sp + 8];
           R3 = _s3mg8::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3mgc::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3mvv() //  [R1]
         { info_tbl: [(c3mvv,
                       label: block_c3mvv_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mvv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mvG; else goto c3mvF;
       c3mvG: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mvF: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mvM() //  [R1]
         { info_tbl: [(c3mvM,
                       label: block_c3mvM_info
                       rep:StackRep [True, False, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mvM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mw0; else goto c3mvZ;
       c3mw0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mvZ: // global
           _s3mgh::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3mvS_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3mgh::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3mvS() //  [R1]
         { info_tbl: [(c3mvS,
                       label: block_c3mvS_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mvS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mw3; else goto c3mw2;
       c3mw3: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mw2: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mxb() //  [R1]
         { info_tbl: [(c3mxb,
                       label: block_c3mxb_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mxb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mxl; else goto c3mxk;
       c3mxl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mxk: // global
           _s3mgB::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3mgB::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mwT() //  [R1]
         { info_tbl: [(c3mwT,
                       label: block_c3mwT_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mwT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mx3; else goto c3mx2;
       c3mx3: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mx2: // global
           _s3mgy::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3mgy::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mwv() //  [R1]
         { info_tbl: [(c3mwv,
                       label: block_c3mwv_info
                       rep:StackRep [True, False, True, False, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mwv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mwJ; else goto c3mwI;
       c3mwJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mwI: // global
           _s3mgs::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3mwB_info;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = Hp - 7;
           I64[Sp + 56] = _s3mgs::I64;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3mwB() //  [R1]
         { info_tbl: [(c3mwB,
                       label: block_c3mwB_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mwB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mwM; else goto c3mwL;
       c3mwM: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mwL: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 56];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mxv() //  [R1]
         { info_tbl: [(c3mxv,
                       label: block_c3mxv_info
                       rep:StackRep [True, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mxv: // global
           _c3mzK::P64 = R1 & 7;
           if (_c3mzK::P64 < 3) goto u3mzO; else goto u3mzQ;
       u3mzO: // global
           _s3mfT::P64 = P64[Sp + 32];
           _s3mgC::I64 = I64[Sp + 24];
           _s3mgD::I64 = I64[Sp + 8];
           if (_c3mzK::P64 < 2) goto c3myD; else goto c3mzC;
       c3myD: // global
           _s3mgI::P64 = P64[R1 + 7];
           _s3mgK::P64 = P64[R1 + 15];
           _s3mgL::P64 = P64[R1 + 23];
           _s3mgG::I64 = I64[R1 + 31];
           _s3mgH::I64 = I64[R1 + 39];
           _s3mgJ::I64 = I64[R1 + 47];
           if (_s3mgD::I64 == _s3mgH::I64) goto c3myB; else goto c3myj;
       c3myB: // global
           if (%MO_S_Ge_W64(_s3mgC::I64,
                            _s3mgG::I64)) goto s3mgM; else goto c3myx;
       c3myx: // global
           I64[Sp] = block_c3myr_info;
           _s3mgF::P64 = R1;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgF::P64;
           if (R1 & 7 != 0) goto u3mA1; else goto c3mys;
       u3mA1: // global
           call _c3myr(R1) args: 0, res: 0, upd: 0;
       c3mys: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3myj: // global
           if (_s3mgD::I64 > _s3mgH::I64) goto s3mgM; else goto c3mye;
       s3mgM: // global
           I64[Sp - 16] = block_c3mxH_info;
           R1 = _s3mfT::P64;
           P64[Sp - 8] = _s3mgL::P64;
           P64[Sp] = _s3mgK::P64;
           I64[Sp + 8] = _s3mgJ::I64;
           P64[Sp + 16] = _s3mgI::P64;
           I64[Sp + 24] = _s3mgH::I64;
           I64[Sp + 32] = _s3mgG::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3mA6; else goto c3mxI;
       u3mA6: // global
           call _c3mxH(R1) args: 0, res: 0, upd: 0;
       c3mxI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mye: // global
           I64[Sp] = block_c3my8_info;
           _s3mgF::P64 = R1;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgF::P64;
           if (R1 & 7 != 0) goto u3mA0; else goto c3my9;
       u3mA0: // global
           call _c3my8(R1) args: 0, res: 0, upd: 0;
       c3my9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mzC: // global
           _s3mh0::P64 = P64[R1 + 6];
           _s3mgY::I64 = I64[R1 + 14];
           _s3mgZ::I64 = I64[R1 + 22];
           if (_s3mgD::I64 == _s3mgZ::I64) goto c3mzB; else goto c3mza;
       c3mzB: // global
           if (%MO_S_Ge_W64(_s3mgC::I64,
                            _s3mgY::I64)) goto c3mzm; else goto c3mzx;
       c3mzm: // global
           I64[Sp + 8] = block_c3mzf_info;
           R1 = _s3mfT::P64;
           P64[Sp + 16] = _s3mh0::P64;
           I64[Sp + 24] = _s3mgZ::I64;
           I64[Sp + 32] = _s3mgY::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3mA4; else goto c3mzg;
       u3mA4: // global
           call _c3mzf(R1) args: 0, res: 0, upd: 0;
       c3mzg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mzx: // global
           I64[Sp] = block_c3mzr_info;
           _s3mgF::P64 = R1;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgF::P64;
           if (R1 & 7 != 0) goto u3mA5; else goto c3mzs;
       u3mA5: // global
           call _c3mzr(R1) args: 0, res: 0, upd: 0;
       c3mzs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mza: // global
           if (_s3mgD::I64 > _s3mgZ::I64) goto c3myU; else goto c3mz5;
       c3myU: // global
           I64[Sp + 8] = block_c3myN_info;
           R1 = _s3mfT::P64;
           P64[Sp + 16] = _s3mh0::P64;
           I64[Sp + 24] = _s3mgZ::I64;
           I64[Sp + 32] = _s3mgY::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u3mA2; else goto c3myO;
       u3mA2: // global
           call _c3myN(R1) args: 0, res: 0, upd: 0;
       c3myO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mz5: // global
           I64[Sp] = block_c3myZ_info;
           _s3mgF::P64 = R1;
           R1 = _s3mfT::P64;
           P64[Sp + 40] = _s3mgF::P64;
           if (R1 & 7 != 0) goto u3mA3; else goto c3mz0;
       u3mA3: // global
           call _c3myZ(R1) args: 0, res: 0, upd: 0;
       c3mz0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3mzQ: // global
           Sp = Sp + 40;
           call _c3mzG() args: 0, res: 0, upd: 0;
     }
 },
 _c3myr() //  [R1]
         { info_tbl: [(c3myr,
                       label: block_c3myr_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3myr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3myA; else goto c3myz;
       c3myA: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3myz: // global
           _s3mgX::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3mgX::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mxH() //  [R1]
         { info_tbl: [(c3mxH,
                       label: block_c3mxH_info
                       rep:StackRep [False, False, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mxH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mxV; else goto c3mxU;
       c3mxV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mxU: // global
           _s3mgO::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           _s3mgK::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c3mxN_info;
           R4 = P64[Sp + 8];
           R3 = _s3mgK::P64;
           R2 = Hp - 7;
           I64[Sp + 24] = _s3mgO::I64;
           Sp = Sp + 16;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3mxN() //  [R1]
         { info_tbl: [(c3mxN,
                       label: block_c3mxN_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mxN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mxY; else goto c3mxX;
       c3mxY: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mxX: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3my8() //  [R1]
         { info_tbl: [(c3my8,
                       label: block_c3my8_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3my8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3myh; else goto c3myg;
       c3myh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3myg: // global
           _s3mgU::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3mgU::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mzf() //  [R1]
         { info_tbl: [(c3mzf,
                       label: block_c3mzf_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mzf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mzp; else goto c3mzo;
       c3mzp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mzo: // global
           _s3mh9::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3mh9::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mzr() //  [R1]
         { info_tbl: [(c3mzr,
                       label: block_c3mzr_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mzr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mzA; else goto c3mzz;
       c3mzA: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mzz: // global
           _s3mhb::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3mhb::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3myN() //  [R1]
         { info_tbl: [(c3myN,
                       label: block_c3myN_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3myN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3myX; else goto c3myW;
       c3myX: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3myW: // global
           _s3mh4::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s3mh4::I64;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3myZ() //  [R1]
         { info_tbl: [(c3myZ,
                       label: block_c3myZ_info
                       rep:StackRep [True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3myZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mz8; else goto c3mz7;
       c3mz8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mz7: // global
           _s3mh6::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s3mh6::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mzG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mzG: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.557647643 UTC

[section ""data" . GHC.Event.PSQ.$watMost_closure" {
     GHC.Event.PSQ.$watMost_closure:
         const GHC.Event.PSQ.$watMost_info;
 },
 ds_s3mhr_entry() //  [R1]
         { info_tbl: [(c3mDM,
                       label: ds_s3mhr_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mDM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c3mDN; else goto c3mDO;
       c3mDN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mDO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c3mDJ_info;
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_s3mhe_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3mDJ() //  [R1, R2]
         { info_tbl: [(c3mDJ,
                       label: block_c3mDJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mDJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3mDR; else goto c3mDQ;
       c3mDR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3mDQ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds1_s3mhv_entry() //  [R1]
         { info_tbl: [(c3mE0,
                       label: ds1_s3mhv_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mE0: // global
           _s3mhv::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c3mE1; else goto c3mE2;
       c3mE2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3mE4; else goto c3mE3;
       c3mE4: // global
           HpAlloc = 24;
           goto c3mE1;
       c3mE1: // global
           R1 = _s3mhv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mE3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3mhv::P64;
           _s3mhe::P64 = P64[_s3mhv::P64 + 16];
           _s3mhn::P64 = P64[_s3mhv::P64 + 24];
           _s3mhr::P64 = P64[_s3mhv::P64 + 32];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s3mhr::P64;
           I64[Sp - 24] = block_c3mDX_info;
           R3 = _s3mhn::P64;
           R2 = Hp - 16;
           R1 = _s3mhe::P64;
           Sp = Sp - 24;
           call $wgo_s3mhe_entry(R3, R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3mDX() //  [R1, R2]
         { info_tbl: [(c3mDX,
                       label: block_c3mDX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mDX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3mE7; else goto c3mE6;
       c3mE7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c3mE6: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3mhQ_entry() //  [R1]
         { info_tbl: [(c3mEf,
                       label: sat_s3mhQ_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mEf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3mEo; else goto c3mEp;
       c3mEo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mEp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c3mEc_info;
           _s3mhv::P64 = P64[R1 + 24];
           _s3mhl::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _s3mhl::I64;
           P64[Sp - 24] = _s3mhv::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3mEv; else goto c3mEd;
       u3mEv: // global
           call _c3mEc(R1) args: 0, res: 0, upd: 0;
       c3mEd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3mEc() //  [R1]
         { info_tbl: [(c3mEc,
                       label: block_c3mEc_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mEc: // global
           I64[Sp] = block_c3mEi_info;
           _s3mhL::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s3mhL::P64;
           if (R1 & 7 != 0) goto u3mEu; else goto c3mEj;
       u3mEu: // global
           call _c3mEi(R1) args: 0, res: 0, upd: 0;
       c3mEj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c3mEi() //  [R1]
         { info_tbl: [(c3mEi,
                       label: block_c3mEi_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mEi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mEt; else goto c3mEs;
       c3mEt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c3mEs: // global
           _s3mhO::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           R4 = _s3mhO::P64;
           R3 = P64[Sp + 16];
           R2 = Hp - 7;
           Sp = Sp + 24;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 $wgo_s3mhe_entry() //  [R1, R2, R3]
         { info_tbl: [(c3mEB,
                       label: $wgo_s3mhe_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mEB: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c3mEC; else goto c3mED;
       c3mEC: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mED: // global
           I64[Sp - 32] = block_c3mDs_info;
           _s3mhe::P64 = R1;
           _s3mhc::P64 = P64[R1 + 6];
           R1 = R3;
           P64[Sp - 24] = _s3mhc::P64;
           P64[Sp - 16] = _s3mhe::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3mFd; else goto c3mDt;
       u3mFd: // global
           call _c3mDs(R1) args: 0, res: 0, upd: 0;
       c3mDt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mDs() //  [R1]
         { info_tbl: [(c3mDs,
                       label: block_c3mDs_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mDs: // global
           _c3mEA::P64 = R1 & 7;
           if (_c3mEA::P64 < 3) goto u3mFa; else goto c3mEz;
       u3mFa: // global
           _s3mhc::P64 = P64[Sp + 8];
           if (_c3mEA::P64 < 2) goto c3mEx; else goto c3mEy;
       c3mEx: // global
           I64[Sp - 48] = block_c3mDx_info;
           _s3mhh::P64 = R1;
           _s3mhk::P64 = P64[R1 + 7];
           _s3mhm::P64 = P64[R1 + 15];
           _s3mhn::P64 = P64[R1 + 23];
           _s3mhi::I64 = I64[R1 + 31];
           _s3mhj::I64 = I64[R1 + 39];
           _s3mhl::I64 = I64[R1 + 47];
           R1 = _s3mhc::P64;
           I64[Sp - 40] = _s3mhj::I64;
           P64[Sp - 32] = _s3mhk::P64;
           I64[Sp - 24] = _s3mhl::I64;
           P64[Sp - 16] = _s3mhm::P64;
           P64[Sp - 8] = _s3mhn::P64;
           I64[Sp] = _s3mhi::I64;
           P64[Sp + 8] = _s3mhh::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3mFb; else goto c3mDy;
       u3mFb: // global
           call _c3mDx(R1) args: 0, res: 0, upd: 0;
       c3mDy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mEy: // global
           I64[Sp - 16] = block_c3mEQ_info;
           _s3mhh::P64 = R1;
           _s3mhT::P64 = P64[R1 + 6];
           _s3mhR::I64 = I64[R1 + 14];
           _s3mhS::I64 = I64[R1 + 22];
           R1 = _s3mhc::P64;
           P64[Sp - 8] = _s3mhT::P64;
           I64[Sp] = _s3mhS::I64;
           I64[Sp + 8] = _s3mhR::I64;
           P64[Sp + 16] = _s3mhh::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3mFc; else goto c3mES;
       u3mFc: // global
           call _c3mEQ(R1) args: 0, res: 0, upd: 0;
       c3mES: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mEz: // global
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mDx() //  [R1]
         { info_tbl: [(c3mDx,
                       label: block_c3mDx_info
                       rep:StackRep [True, False, True, False, False, True, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mDx: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c3mEH; else goto c3mEG;
       c3mEH: // global
           HpAlloc = 200;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mEG: // global
           _s3mhf::P64 = P64[Sp + 72];
           _s3mhj::I64 = I64[Sp + 8];
           if (_s3mhj::I64 <= I64[R1 + 7]) goto c3mEM; else goto c3mEN;
       c3mEM: // global
           I64[Hp - 192] = ds_s3mhr_info;
           _s3mhe::P64 = P64[Sp + 64];
           P64[Hp - 176] = _s3mhe::P64;
           P64[Hp - 168] = _s3mhf::P64;
           P64[Hp - 160] = P64[Sp + 32];
           I64[Hp - 152] = ds1_s3mhv_info;
           P64[Hp - 136] = _s3mhe::P64;
           P64[Hp - 128] = P64[Sp + 40];
           _c3mDF::P64 = Hp - 192;
           P64[Hp - 120] = _c3mDF::P64;
           I64[Hp - 112] = sat_s3mhQ_info;
           P64[Hp - 96] = _c3mDF::P64;
           _c3mDS::P64 = Hp - 152;
           P64[Hp - 88] = _c3mDS::P64;
           I64[Hp - 80] = I64[Sp + 24];
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _c3mDS::P64;
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = I64[Sp + 48];
           I64[Hp - 24] = _s3mhj::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 72;
           R2 = Hp - 112;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3mEN: // global
           Hp = Hp - 200;
           R2 = P64[Sp + 56];
           R1 = _s3mhf::P64;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mEQ() //  [R1]
         { info_tbl: [(c3mEQ,
                       label: block_c3mEQ_info
                       rep:StackRep [False, True, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mEQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mEY; else goto c3mEX;
       c3mEY: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mEX: // global
           _s3mhf::P64 = P64[Sp + 40];
           _s3mhS::I64 = I64[Sp + 16];
           if (_s3mhS::I64 <= I64[R1 + 7]) goto c3mF5; else goto c3mF6;
       c3mF5: // global
           I64[Hp - 48] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = I64[Sp + 24];
           I64[Hp - 24] = _s3mhS::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _s3mhf::P64;
           R2 = GHC.Event.PSQ.Nil_closure+3;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3mF6: // global
           Hp = Hp - 56;
           R2 = P64[Sp + 32];
           R1 = _s3mhf::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.$watMost_entry() //  [R2, R3]
         { info_tbl: [(c3mFe,
                       label: GHC.Event.PSQ.$watMost_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mFe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mFi; else goto c3mFh;
       c3mFi: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.$watMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mFh: // global
           I64[Hp - 8] = $wgo_s3mhe_info;
           P64[Hp] = R2;
           R3 = R3;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 6;
           call $wgo_s3mhe_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.588347456 UTC

[section ""data" . GHC.Event.PSQ.atMost_closure" {
     GHC.Event.PSQ.atMost_closure:
         const GHC.Event.PSQ.atMost_info;
 },
 GHC.Event.PSQ.atMost_entry() //  [R2, R3]
         { info_tbl: [(c3mGR,
                       label: GHC.Event.PSQ.atMost_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mGR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mGS; else goto c3mGT;
       c3mGS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.atMost_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mGT: // global
           I64[Sp - 8] = block_c3mGO_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$watMost_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3mGO() //  [R1, R2]
         { info_tbl: [(c3mGO,
                       label: block_c3mGO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mGO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c3mGW; else goto c3mGV;
       c3mGW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c3mGV: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.595278588 UTC

[section ""data" . GHC.Event.PSQ.minView_closure" {
     GHC.Event.PSQ.minView_closure:
         const GHC.Event.PSQ.minView_info;
 },
 sat_s3mie_entry() //  [R1]
         { info_tbl: [(c3mHm,
                       label: sat_s3mie_info
                       rep:HeapRep 2 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mHm: // global
           _s3mie::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c3mHn; else goto c3mHo;
       c3mHo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mHq; else goto c3mHp;
       c3mHq: // global
           HpAlloc = 16;
           goto c3mHn;
       c3mHn: // global
           R1 = _s3mie::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c3mHp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s3mie::P64;
           _s3mia::P64 = P64[_s3mie::P64 + 16];
           _s3mib::P64 = P64[_s3mie::P64 + 24];
           _s3mi9::I64 = I64[_s3mie::P64 + 32];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3mi9::I64;
           R4 = _s3mib::P64;
           R3 = _s3mia::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call GHC.Event.PSQ.merge_entry(R4,
                                          R3,
                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Event.PSQ.minView_entry() //  [R2]
         { info_tbl: [(c3mHw,
                       label: GHC.Event.PSQ.minView_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mHw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mHx; else goto c3mHy;
       c3mHx: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.minView_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mHy: // global
           I64[Sp - 8] = block_c3mHc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mHR; else goto c3mHd;
       u3mHR: // global
           call _c3mHc(R1) args: 0, res: 0, upd: 0;
       c3mHd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mHc() //  [R1]
         { info_tbl: [(c3mHc,
                       label: block_c3mHc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mHc: // global
           _c3mHv::P64 = R1 & 7;
           if (_c3mHv::P64 < 3) goto u3mHQ; else goto c3mHu;
       u3mHQ: // global
           if (_c3mHv::P64 < 2) goto c3mHs; else goto c3mHt;
       c3mHs: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c3mHE; else goto c3mHD;
       c3mHE: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mHD: // global
           _s3mi8::P64 = P64[R1 + 7];
           _s3mia::P64 = P64[R1 + 15];
           _s3mib::P64 = P64[R1 + 23];
           _s3mi6::I64 = I64[R1 + 31];
           _s3mi7::I64 = I64[R1 + 39];
           _s3mi9::I64 = I64[R1 + 47];
           I64[Hp - 104] = sat_s3mie_info;
           P64[Hp - 88] = _s3mia::P64;
           P64[Hp - 80] = _s3mib::P64;
           I64[Hp - 72] = _s3mi9::I64;
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3mi8::P64;
           I64[Hp - 48] = _s3mi6::I64;
           I64[Hp - 40] = _s3mi7::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 104;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mHt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c3mHM; else goto c3mHL;
       c3mHM: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mHL: // global
           _s3mii::P64 = P64[R1 + 6];
           _s3mig::I64 = I64[R1 + 14];
           _s3mih::I64 = I64[R1 + 22];
           I64[Hp - 64] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 56] = _s3mii::P64;
           I64[Hp - 48] = _s3mig::I64;
           I64[Hp - 40] = _s3mih::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mHu: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.608017999 UTC

[section ""data" . GHC.Event.PSQ.deleteMin_closure" {
     GHC.Event.PSQ.deleteMin_closure:
         const GHC.Event.PSQ.deleteMin_info;
 },
 GHC.Event.PSQ.deleteMin_entry() //  [R2]
         { info_tbl: [(c3mIC,
                       label: GHC.Event.PSQ.deleteMin_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mIC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mID; else goto c3mIE;
       c3mID: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.deleteMin_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mIE: // global
           I64[Sp - 8] = block_c3mIu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mIS; else goto c3mIv;
       u3mIS: // global
           call _c3mIu(R1) args: 0, res: 0, upd: 0;
       c3mIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mIu() //  [R1]
         { info_tbl: [(c3mIu,
                       label: block_c3mIu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mIu: // global
           _c3mIB::P64 = R1 & 7;
           if (_c3mIB::P64 >= 3) goto c3mIA; else goto u3mIR;
       u3mIR: // global
           if (_c3mIB::P64 >= 2) goto c3mIA; else goto c3mIy;
       c3mIA: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mIy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mIK; else goto c3mIJ;
       c3mIK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mIJ: // global
           _s3mir::P64 = P64[R1 + 15];
           _s3mis::P64 = P64[R1 + 23];
           _s3miq::I64 = I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3miq::I64;
           R4 = _s3mis::P64;
           R3 = _s3mir::P64;
           R2 = Hp - 7;
           Sp = Sp + 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.619265938 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule4_bytes" {
     GHC.Event.PSQ.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.621056349 UTC

[section ""data" . GHC.Event.PSQ.$trModule3_closure" {
     GHC.Event.PSQ.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.622809553 UTC

[section ""cstring" . GHC.Event.PSQ.$trModule2_bytes" {
     GHC.Event.PSQ.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,80,83,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.624484499 UTC

[section ""data" . GHC.Event.PSQ.$trModule1_closure" {
     GHC.Event.PSQ.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.626225182 UTC

[section ""data" . GHC.Event.PSQ.$trModule_closure" {
     GHC.Event.PSQ.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.PSQ.$trModule3_closure+1;
         const GHC.Event.PSQ.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.62799551 UTC

[section ""data" . $krep_r3kcT_closure" {
     $krep_r3kcT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.629807615 UTC

[section ""data" . $krep1_r3kcU_closure" {
     $krep1_r3kcU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.631601761 UTC

[section ""data" . $krep2_r3kcV_closure" {
     $krep2_r3kcV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.633419521 UTC

[section ""data" . $krep3_r3kcW_closure" {
     $krep3_r3kcW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.635115542 UTC

[section ""cstring" . GHC.Event.PSQ.$tcElem2_bytes" {
     GHC.Event.PSQ.$tcElem2_bytes:
         I8[] [69,108,101,109]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.636861735 UTC

[section ""data" . GHC.Event.PSQ.$tcElem1_closure" {
     GHC.Event.PSQ.$tcElem1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcElem2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.638658322 UTC

[section ""data" . GHC.Event.PSQ.$tcElem_closure" {
     GHC.Event.PSQ.$tcElem_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcElem1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15044414420558834066;
         const 12198171511156299872;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.641046899 UTC

[section ""data" . $krep4_r3kcX_closure" {
     $krep4_r3kcX_closure:
         const :_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.642944668 UTC

[section ""data" . $krep5_r3kcY_closure" {
     $krep5_r3kcY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcElem_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.644675636 UTC

[section ""data" . $krep6_r3kcZ_closure" {
     $krep6_r3kcZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep5_r3kcY_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.646483422 UTC

[section ""data" . $krep7_r3kd0_closure" {
     $krep7_r3kd0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep6_r3kcZ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.648167703 UTC

[section ""data" . GHC.Event.PSQ.$tc'E1_closure" {
     GHC.Event.PSQ.$tc'E1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep7_r3kd0_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.650196746 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'E3_bytes" {
     GHC.Event.PSQ.$tc'E3_bytes:
         I8[] [39,69]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.651880764 UTC

[section ""data" . GHC.Event.PSQ.$tc'E2_closure" {
     GHC.Event.PSQ.$tc'E2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'E3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.653614093 UTC

[section ""data" . GHC.Event.PSQ.$tc'E_closure" {
     GHC.Event.PSQ.$tc'E_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'E2_closure+1;
         const GHC.Event.PSQ.$tc'E1_closure+4;
         const 11813029942800942247;
         const 17450377919573390885;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.655430763 UTC

[section ""cstring" . GHC.Event.PSQ.$tcIntPSQ2_bytes" {
     GHC.Event.PSQ.$tcIntPSQ2_bytes:
         I8[] [73,110,116,80,83,81]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.657099559 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ1_closure" {
     GHC.Event.PSQ.$tcIntPSQ1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tcIntPSQ2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.659730902 UTC

[section ""data" . GHC.Event.PSQ.$tcIntPSQ_closure" {
     GHC.Event.PSQ.$tcIntPSQ_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tcIntPSQ1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 15246681906271547396;
         const 11594704564387731780;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.661607875 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil1_closure" {
     GHC.Event.PSQ.$tc'Nil1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcIntPSQ_closure+1;
         const $krep4_r3kcX_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.663276032 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Nil3_bytes" {
     GHC.Event.PSQ.$tc'Nil3_bytes:
         I8[] [39,78,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.666079998 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil2_closure" {
     GHC.Event.PSQ.$tc'Nil2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Nil3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.667684774 UTC

[section ""data" . GHC.Event.PSQ.$tc'Nil_closure" {
     GHC.Event.PSQ.$tc'Nil_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Nil2_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 9632868263130136899;
         const 16639248836205398404;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.669519407 UTC

[section ""data" . $krep8_r3kd1_closure" {
     $krep8_r3kd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.671238594 UTC

[section ""data" . $krep9_r3kd2_closure" {
     $krep9_r3kd2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep8_r3kd1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.672864346 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip1_closure" {
     GHC.Event.PSQ.$tc'Tip1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep9_r3kd2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.674864961 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Tip3_bytes" {
     GHC.Event.PSQ.$tc'Tip3_bytes:
         I8[] [39,84,105,112]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.676543757 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip2_closure" {
     GHC.Event.PSQ.$tc'Tip2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Tip3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.678309334 UTC

[section ""data" . GHC.Event.PSQ.$tc'Tip_closure" {
     GHC.Event.PSQ.$tc'Tip_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Tip2_closure+1;
         const GHC.Event.PSQ.$tc'Tip1_closure+4;
         const 4235936270888684142;
         const 17098834253377543597;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.680090739 UTC

[section ""data" . $krep10_r3kd3_closure" {
     $krep10_r3kd3_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.6818472 UTC

[section ""data" . $krep11_r3kd4_closure" {
     $krep11_r3kd4_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Event.PSQ.$tc'Nil1_closure+1;
         const $krep10_r3kd3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.683507047 UTC

[section ""data" . $krep12_r3kd5_closure" {
     $krep12_r3kd5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r3kcT_closure+1;
         const $krep11_r3kd4_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.685333806 UTC

[section ""data" . $krep13_r3kd6_closure" {
     $krep13_r3kd6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r3kcW_closure+2;
         const $krep12_r3kd5_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.687092103 UTC

[section ""data" . $krep14_r3kd7_closure" {
     $krep14_r3kd7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r3kcU_closure+1;
         const $krep13_r3kd6_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.688977439 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin1_closure" {
     GHC.Event.PSQ.$tc'Bin1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r3kcV_closure+1;
         const $krep14_r3kd7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.691274143 UTC

[section ""cstring" . GHC.Event.PSQ.$tc'Bin3_bytes" {
     GHC.Event.PSQ.$tc'Bin3_bytes:
         I8[] [39,66,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.692887301 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin2_closure" {
     GHC.Event.PSQ.$tc'Bin2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.PSQ.$tc'Bin3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.694922352 UTC

[section ""data" . GHC.Event.PSQ.$tc'Bin_closure" {
     GHC.Event.PSQ.$tc'Bin_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.PSQ.$trModule_closure+1;
         const GHC.Event.PSQ.$tc'Bin2_closure+1;
         const GHC.Event.PSQ.$tc'Bin1_closure+4;
         const 8835322380894053498;
         const 4329944662539077627;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.698404929 UTC

[section ""data" . GHC.Event.PSQ.lookup_closure" {
     GHC.Event.PSQ.lookup_closure:
         const GHC.Event.PSQ.lookup_info;
 },
 GHC.Event.PSQ.lookup_entry() //  [R2, R3]
         { info_tbl: [(c3mJU,
                       label: GHC.Event.PSQ.lookup_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mJU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c3mJV; else goto c3mJW;
       c3mJV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.lookup_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mJW: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _c3mKk() args: 0, res: 0, upd: 0;
     }
 },
 _c3mKk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mKk: // global
           I64[Sp - 8] = block_c3mKm_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mLQ; else goto c3mKo;
       u3mLQ: // global
           call _c3mKm(R1) args: 0, res: 0, upd: 0;
       c3mKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mKm() //  [R1]
         { info_tbl: [(c3mKm,
                       label: block_c3mKm_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mKm: // global
           _c3mLH::P64 = R1 & 7;
           if (_c3mLH::P64 < 3) goto u3mLI; else goto c3mLG;
       u3mLI: // global
           _s3mix::P64 = P64[Sp + 8];
           if (_c3mLH::P64 < 2) goto c3mKv; else goto c3mLC;
       c3mKv: // global
           I64[Sp - 40] = block_c3mKs_info;
           _s3miN::P64 = P64[R1 + 7];
           _s3miP::P64 = P64[R1 + 15];
           _s3miQ::P64 = P64[R1 + 23];
           _s3miL::I64 = I64[R1 + 31];
           _s3miM::I64 = I64[R1 + 39];
           _s3miO::I64 = I64[R1 + 47];
           R1 = _s3mix::P64;
           P64[Sp - 32] = _s3miN::P64;
           I64[Sp - 24] = _s3miO::I64;
           P64[Sp - 16] = _s3miP::P64;
           P64[Sp - 8] = _s3miQ::P64;
           I64[Sp] = _s3miM::I64;
           I64[Sp + 16] = _s3miL::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u3mLR; else goto c3mKw;
       u3mLR: // global
           call _c3mKs(R1) args: 0, res: 0, upd: 0;
       c3mKw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mLC: // global
           I64[Sp - 8] = block_c3mK0_info;
           _s3miC::P64 = P64[R1 + 6];
           _s3miB::I64 = I64[R1 + 22];
           _s3miA::I64 = I64[R1 + 14];
           R1 = _s3mix::P64;
           P64[Sp] = _s3miC::P64;
           I64[Sp + 8] = _s3miB::I64;
           I64[Sp + 16] = _s3miA::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mLS; else goto c3mK2;
       u3mLS: // global
           call _c3mK0(R1) args: 0, res: 0, upd: 0;
       c3mK2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mLG: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mKs() //  [R1]
         { info_tbl: [(c3mKs,
                       label: block_c3mKs_info
                       rep:StackRep [False, True, False, False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mKs: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mKC; else goto c3mKB;
       c3mKC: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mKB: // global
           _s3miL::I64 = I64[Sp + 56];
           _s3miS::I64 = I64[R1 + 7];
           _s3miT::I64 = I64[Sp + 16];
           _s3miU::I64 = (_s3miT::I64 + -1) ^ _s3miT::I64 ^ 18446744073709551615;
           if (_s3miS::I64 & _s3miU::I64 == _s3miL::I64 & _s3miU::I64) goto c3mLx; else goto u3mLK;
       c3mLx: // global
           if (_s3miS::I64 == _s3miL::I64) goto c3mLv; else goto c3mLq;
       c3mLv: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 40];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mLq: // global
           Hp = Hp - 56;
           if (_s3miS::I64 & _s3miT::I64 == 0) goto c3mLl; else goto c3mLf;
       c3mLl: // global
           P64[Sp + 56] = P64[Sp + 24];
           Sp = Sp + 48;
           goto u3mLV;
       c3mLf: // global
           P64[Sp + 56] = P64[Sp + 32];
           Sp = Sp + 48;
           goto u3mLV;
       u3mLV: // global
           call _c3mKk() args: 0, res: 0, upd: 0;
       u3mLK: // global
           Sp = Sp + 64;
           call _c3mKc() args: 0, res: 0, upd: 0;
     }
 },
 _c3mK0() //  [R1]
         { info_tbl: [(c3mK0,
                       label: block_c3mK0_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mK0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mK8; else goto c3mK7;
       c3mK8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mK7: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3mKi; else goto u3mLN;
       c3mKi: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u3mLN: // global
           Sp = Sp + 32;
           call _c3mKc() args: 0, res: 0, upd: 0;
     }
 },
 _c3mKc() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mKc: // global
           Hp = Hp - 56;
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.715648518 UTC

[section ""data" . GHC.Event.PSQ.delete_closure" {
     GHC.Event.PSQ.delete_closure:
         const GHC.Event.PSQ.delete_info;
 },
 go1_s3mjc_entry() //  [R1, R2]
         { info_tbl: [(c3mN8,
                       label: go1_s3mjc_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mN8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3mN9; else goto c3mNa;
       c3mN9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mNa: // global
           I64[Sp - 24] = block_c3mN0_info;
           _s3mjc::P64 = R1;
           _s3mja::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3mja::P64;
           P64[Sp - 8] = _s3mjc::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mPJ; else goto c3mN1;
       u3mPJ: // global
           call _c3mN0(R1) args: 0, res: 0, upd: 0;
       c3mN1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mN0() //  [R1]
         { info_tbl: [(c3mN0,
                       label: block_c3mN0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mN0: // global
           _c3mN7::P64 = R1 & 7;
           if (_c3mN7::P64 < 3) goto u3mPD; else goto u3mPE;
       u3mPD: // global
           _s3mja::P64 = P64[Sp + 8];
           if (_c3mN7::P64 < 2) goto c3mN4; else goto c3mN5;
       c3mN4: // global
           I64[Sp - 48] = block_c3mNd_info;
           _s3mje::P64 = R1;
           _s3mjh::P64 = P64[R1 + 7];
           _s3mjj::P64 = P64[R1 + 15];
           _s3mjk::P64 = P64[R1 + 23];
           _s3mjf::I64 = I64[R1 + 31];
           _s3mjg::I64 = I64[R1 + 39];
           _s3mji::I64 = I64[R1 + 47];
           R1 = _s3mja::P64;
           I64[Sp - 40] = _s3mjg::I64;
           P64[Sp - 32] = _s3mjh::P64;
           I64[Sp - 24] = _s3mji::I64;
           P64[Sp - 16] = _s3mjj::P64;
           P64[Sp - 8] = _s3mjk::P64;
           I64[Sp] = _s3mjf::I64;
           P64[Sp + 8] = _s3mje::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3mPG; else goto c3mNf;
       u3mPG: // global
           call _c3mNd(R1) args: 0, res: 0, upd: 0;
       c3mNf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mN5: // global
           I64[Sp] = block_c3mPk_info;
           _s3mje::P64 = R1;
           _s3mjE::I64 = I64[R1 + 14];
           R1 = _s3mja::P64;
           I64[Sp + 8] = _s3mjE::I64;
           P64[Sp + 16] = _s3mje::P64;
           if (R1 & 7 != 0) goto u3mPH; else goto c3mPm;
       u3mPH: // global
           call _c3mPk(R1) args: 0, res: 0, upd: 0;
       c3mPm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u3mPE: // global
           Sp = Sp + 24;
           call _c3mN6() args: 0, res: 0, upd: 0;
     }
 },
 _c3mNd() //  [R1]
         { info_tbl: [(c3mNd,
                       label: block_c3mNd_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mNd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mNl; else goto c3mNk;
       c3mNl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mNk: // global
           _s3mjf::I64 = I64[Sp + 48];
           _s3mji::I64 = I64[Sp + 24];
           _s3mjm::I64 = I64[R1 + 7];
           _s3mjo::I64 = (_s3mji::I64 + -1) ^ _s3mji::I64 ^ 18446744073709551615;
           if (_s3mjm::I64 & _s3mjo::I64 == _s3mjf::I64 & _s3mjo::I64) goto c3mPg; else goto c3mPh;
       c3mPg: // global
           _s3mjj::P64 = P64[Sp + 32];
           _s3mjk::P64 = P64[Sp + 40];
           if (_s3mjm::I64 == _s3mjf::I64) goto c3mPe; else goto c3mPb;
       c3mPe: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3mji::I64;
           R4 = _s3mjk::P64;
           R3 = _s3mjj::P64;
           R2 = Hp - 7;
           Sp = Sp + 72;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c3mPb: // global
           Hp = Hp - 16;
           _s3mjc::P64 = P64[Sp + 64];
           if (_s3mjm::I64 & _s3mji::I64 == 0) goto c3mOD; else goto c3mO1;
       c3mOD: // global
           I64[Sp] = block_c3mOC_info;
           R2 = _s3mjj::P64;
           R1 = _s3mjc::P64;
           call go1_s3mjc_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3mO1: // global
           I64[Sp] = block_c3mNZ_info;
           R2 = _s3mjk::P64;
           R1 = _s3mjc::P64;
           call go1_s3mjc_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3mPh: // global
           Hp = Hp - 16;
           R1 = P64[Sp + 56] & (-8);
           Sp = Sp + 72;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mOC() //  [R1]
         { info_tbl: [(c3mOC,
                       label: block_c3mOC_info
                       rep:StackRep [True, False, True, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mOC: // global
           _s3mjk::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3mOS; else goto c3mOK;
       c3mOS: // global
           I64[Sp] = block_c3mOQ_info;
           R1 = _s3mjk::P64;
           if (R1 & 7 != 0) goto u3mPL; else goto c3mOT;
       u3mPL: // global
           call _c3mOQ(R1) args: 0, res: 0, upd: 0;
       c3mOT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mOK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mON; else goto c3mOM;
       c3mON: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mOM: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3mjk::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mOQ() //  [R1]
         { info_tbl: [(c3mOQ,
                       label: block_c3mOQ_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mOQ: // global
           _s3mjf::I64 = I64[Sp + 48];
           _s3mjg::I64 = I64[Sp + 8];
           _s3mjh::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3mP6; else goto c3mOZ;
       c3mP6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mP9; else goto c3mP8;
       c3mP9: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mP8: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3mjh::P64;
           I64[Hp - 8] = _s3mjf::I64;
           I64[Hp] = _s3mjg::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mOZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mP2; else goto c3mP1;
       c3mP2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mP1: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3mjh::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3mjf::I64;
           I64[Hp - 8] = _s3mjg::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mNZ() //  [R1]
         { info_tbl: [(c3mNZ,
                       label: block_c3mNZ_info
                       rep:StackRep [True, False, True, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mNZ: // global
           _s3mjj::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3mOg; else goto c3mO8;
       c3mOg: // global
           I64[Sp] = block_c3mOe_info;
           R1 = _s3mjj::P64;
           if (R1 & 7 != 0) goto u3mPK; else goto c3mOh;
       u3mPK: // global
           call _c3mOe(R1) args: 0, res: 0, upd: 0;
       c3mOh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mO8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mOb; else goto c3mOa;
       c3mOb: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mOa: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3mjj::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mOe() //  [R1]
         { info_tbl: [(c3mOe,
                       label: block_c3mOe_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mOe: // global
           _s3mjf::I64 = I64[Sp + 48];
           _s3mjg::I64 = I64[Sp + 8];
           _s3mjh::P64 = P64[Sp + 16];
           if (R1 & 7 == 3) goto c3mOu; else goto c3mOn;
       c3mOu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mOx; else goto c3mOw;
       c3mOx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mOw: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3mjh::P64;
           I64[Hp - 8] = _s3mjf::I64;
           I64[Hp] = _s3mjg::I64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mOn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mOq; else goto c3mOp;
       c3mOq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mOp: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3mjh::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3mjf::I64;
           I64[Hp - 8] = _s3mjg::I64;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mPk() //  [R1]
         { info_tbl: [(c3mPk,
                       label: block_c3mPk_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mPk: // global
           if (I64[R1 + 7] == I64[Sp + 8]) goto u3mPF; else goto c3mPu;
       u3mPF: // global
           Sp = Sp + 24;
           call _c3mN6() args: 0, res: 0, upd: 0;
       c3mPu: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mN6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mN6: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.delete_entry() //  [R2, R3]
         { info_tbl: [(c3mPN,
                       label: GHC.Event.PSQ.delete_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mPN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mPR; else goto c3mPQ;
       c3mPR: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.delete_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mPQ: // global
           I64[Hp - 8] = go1_s3mjc_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go1_s3mjc_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.744735341 UTC

[section ""data" . GHC.Event.PSQ.deleteView_closure" {
     GHC.Event.PSQ.deleteView_closure:
         const GHC.Event.PSQ.deleteView_info;
 },
 delFrom_s3mjM_entry() //  [R1, R2]
         { info_tbl: [(c3mRE,
                       label: delFrom_s3mjM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mRE: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c3mRF; else goto c3mRG;
       c3mRF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mRG: // global
           I64[Sp - 24] = block_c3mRw_info;
           _s3mjM::P64 = R1;
           _s3mjK::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s3mjK::P64;
           P64[Sp - 8] = _s3mjM::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u3mUB; else goto c3mRx;
       u3mUB: // global
           call _c3mRw(R1) args: 0, res: 0, upd: 0;
       c3mRx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mRw() //  [R1]
         { info_tbl: [(c3mRw,
                       label: block_c3mRw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mRw: // global
           _c3mRD::P64 = R1 & 7;
           if (_c3mRD::P64 < 3) goto u3mUy; else goto c3mRC;
       u3mUy: // global
           _s3mjK::P64 = P64[Sp + 8];
           if (_c3mRD::P64 < 2) goto c3mRA; else goto c3mRB;
       c3mRA: // global
           I64[Sp - 48] = block_c3mRJ_info;
           _s3mjO::P64 = R1;
           _s3mjR::P64 = P64[R1 + 7];
           _s3mjT::P64 = P64[R1 + 15];
           _s3mjU::P64 = P64[R1 + 23];
           _s3mjP::I64 = I64[R1 + 31];
           _s3mjQ::I64 = I64[R1 + 39];
           _s3mjS::I64 = I64[R1 + 47];
           R1 = _s3mjK::P64;
           I64[Sp - 40] = _s3mjQ::I64;
           P64[Sp - 32] = _s3mjR::P64;
           I64[Sp - 24] = _s3mjS::I64;
           P64[Sp - 16] = _s3mjT::P64;
           P64[Sp - 8] = _s3mjU::P64;
           I64[Sp] = _s3mjP::I64;
           P64[Sp + 8] = _s3mjO::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u3mUz; else goto c3mRL;
       u3mUz: // global
           call _c3mRJ(R1) args: 0, res: 0, upd: 0;
       c3mRL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mRB: // global
           I64[Sp - 16] = block_c3mU8_info;
           _s3mjO::P64 = R1;
           _s3mkw::P64 = P64[R1 + 6];
           _s3mku::I64 = I64[R1 + 14];
           _s3mkv::I64 = I64[R1 + 22];
           R1 = _s3mjK::P64;
           P64[Sp - 8] = _s3mkw::P64;
           I64[Sp] = _s3mkv::I64;
           I64[Sp + 8] = _s3mku::I64;
           P64[Sp + 16] = _s3mjO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u3mUA; else goto c3mUa;
       u3mUA: // global
           call _c3mU8(R1) args: 0, res: 0, upd: 0;
       c3mUa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mRC: // global
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mRJ() //  [R1]
         { info_tbl: [(c3mRJ,
                       label: block_c3mRJ_info
                       rep:StackRep [True, False, True, False, False, True, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mRJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mRR; else goto c3mRQ;
       c3mRR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mRQ: // global
           _s3mjP::I64 = I64[Sp + 48];
           _s3mjS::I64 = I64[Sp + 24];
           _s3mjW::I64 = I64[R1 + 7];
           _s3mjY::I64 = (_s3mjS::I64 + -1) ^ _s3mjS::I64 ^ 18446744073709551615;
           if (_s3mjW::I64 & _s3mjY::I64 == _s3mjP::I64 & _s3mjY::I64) goto c3mU4; else goto c3mU5;
       c3mU4: // global
           _s3mjT::P64 = P64[Sp + 32];
           _s3mjU::P64 = P64[Sp + 40];
           if (_s3mjW::I64 == _s3mjP::I64) goto c3mTZ; else goto c3mTP;
       c3mTZ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s3mjS::I64;
           I64[Sp] = block_c3mTS_info;
           R4 = _s3mjU::P64;
           R3 = _s3mjT::P64;
           R2 = Hp - 7;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c3mTP: // global
           Hp = Hp - 16;
           _s3mjM::P64 = P64[Sp + 64];
           if (_s3mjW::I64 & _s3mjS::I64 == 0) goto c3mTf; else goto c3mSz;
       c3mTf: // global
           I64[Sp] = block_c3mTc_info;
           R2 = _s3mjT::P64;
           R1 = _s3mjM::P64;
           call delFrom_s3mjM_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3mSz: // global
           I64[Sp] = block_c3mSv_info;
           R2 = _s3mjU::P64;
           R1 = _s3mjM::P64;
           call delFrom_s3mjM_entry(R2, R1) args: 8, res: 8, upd: 8;
       c3mU5: // global
           Hp = Hp - 16;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 56];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mTS() //  [R1]
         { info_tbl: [(c3mTS,
                       label: block_c3mTS_info
                       rep:StackRep [True, False, True, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mTS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mU2; else goto c3mU1;
       c3mU2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mU1: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = R1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mTc() //  [R1, R2]
         { info_tbl: [(c3mTc,
                       label: block_c3mTc_info
                       rep:StackRep [True, False, True, True, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mTc: // global
           I64[Sp] = block_c3mTe_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3mUE; else goto c3mTi;
       u3mUE: // global
           call _c3mTe(R1) args: 0, res: 0, upd: 0;
       c3mTi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mTe() //  [R1]
         { info_tbl: [(c3mTe,
                       label: block_c3mTe_info
                       rep:StackRep [True, False, True, True, False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mTe: // global
           _s3mjU::P64 = P64[Sp + 40];
           if (R1 & 7 == 3) goto c3mTw; else goto c3mTo;
       c3mTw: // global
           I64[Sp] = block_c3mTu_info;
           R1 = _s3mjU::P64;
           if (R1 & 7 != 0) goto u3mUF; else goto c3mTx;
       u3mUF: // global
           call _c3mTu(R1) args: 0, res: 0, upd: 0;
       c3mTx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mTo: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mTr; else goto c3mTq;
       c3mTr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mTq: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _s3mjU::P64;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mTu() //  [R1]
         { info_tbl: [(c3mTu,
                       label: block_c3mTu_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mTu: // global
           _s3mjP::I64 = I64[Sp + 48];
           _s3mjQ::I64 = I64[Sp + 8];
           _s3mjR::P64 = P64[Sp + 16];
           _s3mkj::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3mTK; else goto c3mTD;
       c3mTK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mTN; else goto c3mTM;
       c3mTN: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mTM: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3mjR::P64;
           I64[Hp - 8] = _s3mjP::I64;
           I64[Hp] = _s3mjQ::I64;
           R2 = _s3mkj::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3mTD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mTG; else goto c3mTF;
       c3mTG: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mTF: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3mjR::P64;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = _s3mjP::I64;
           I64[Hp - 8] = _s3mjQ::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3mkj::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mSv() //  [R1, R2]
         { info_tbl: [(c3mSv,
                       label: block_c3mSv_info
                       rep:StackRep [True, False, True, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mSv: // global
           I64[Sp] = block_c3mSx_info;
           R1 = R1;
           P64[Sp + 64] = R2;
           if (R1 & 7 != 0) goto u3mUC; else goto c3mSC;
       u3mUC: // global
           call _c3mSx(R1) args: 0, res: 0, upd: 0;
       c3mSC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mSx() //  [R1]
         { info_tbl: [(c3mSx,
                       label: block_c3mSx_info
                       rep:StackRep [True, False, True, False, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mSx: // global
           _s3mjT::P64 = P64[Sp + 32];
           if (R1 & 7 == 3) goto c3mSQ; else goto c3mSI;
       c3mSQ: // global
           I64[Sp] = block_c3mSO_info;
           R1 = _s3mjT::P64;
           if (R1 & 7 != 0) goto u3mUD; else goto c3mSR;
       u3mUD: // global
           call _c3mSO(R1) args: 0, res: 0, upd: 0;
       c3mSR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c3mSI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mSL; else goto c3mSK;
       c3mSL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mSK: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = _s3mjT::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R2 = P64[Sp + 64];
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mSO() //  [R1]
         { info_tbl: [(c3mSO,
                       label: block_c3mSO_info
                       rep:StackRep [True, False, True, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mSO: // global
           _s3mjP::I64 = I64[Sp + 48];
           _s3mjQ::I64 = I64[Sp + 8];
           _s3mjR::P64 = P64[Sp + 16];
           _s3mkb::P64 = P64[Sp + 64];
           if (R1 & 7 == 3) goto c3mT4; else goto c3mSX;
       c3mT4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3mT7; else goto c3mT6;
       c3mT7: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mT6: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = _s3mjR::P64;
           I64[Hp - 8] = _s3mjP::I64;
           I64[Hp] = _s3mjQ::I64;
           R2 = _s3mkb::P64;
           R1 = Hp - 22;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3mSX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mT0; else goto c3mSZ;
       c3mT0: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mSZ: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = _s3mjR::P64;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = _s3mjP::I64;
           I64[Hp - 8] = _s3mjQ::I64;
           I64[Hp] = I64[Sp + 24];
           R2 = _s3mkb::P64;
           R1 = Hp - 47;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mU8() //  [R1]
         { info_tbl: [(c3mU8,
                       label: block_c3mU8_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mU8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3mUg; else goto c3mUf;
       c3mUg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mUf: // global
           if (I64[R1 + 7] == I64[Sp + 24]) goto c3mUq; else goto c3mUk;
       c3mUq: // global
           I64[Hp - 48] = GHC.Word.W64#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R2 = Hp - 6;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       c3mUk: // global
           Hp = Hp - 56;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[Sp + 32];
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.deleteView_entry() //  [R2, R3]
         { info_tbl: [(c3mUP,
                       label: GHC.Event.PSQ.deleteView_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mUP: // global
           _s3mjL::P64 = R3;
           _s3mjK::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c3mUQ; else goto c3mUR;
       c3mUR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mUT; else goto c3mUS;
       c3mUT: // global
           HpAlloc = 16;
           goto c3mUQ;
       c3mUQ: // global
           R3 = _s3mjL::P64;
           R2 = _s3mjK::P64;
           R1 = GHC.Event.PSQ.deleteView_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c3mUS: // global
           I64[Hp - 8] = delFrom_s3mjM_info;
           P64[Hp] = _s3mjK::P64;
           I64[Sp - 8] = block_c3mUG_info;
           R2 = _s3mjL::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call delFrom_s3mjM_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mUG() //  [R1, R2]
         { info_tbl: [(c3mUG,
                       label: block_c3mUG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mUG: // global
           I64[Sp - 8] = block_c3mUI_info;
           _s3mkE::P64 = R1;
           R1 = R2;
           P64[Sp] = _s3mkE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mVb; else goto c3mUJ;
       u3mVb: // global
           call _c3mUI(R1) args: 0, res: 0, upd: 0;
       c3mUJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mUI() //  [R1]
         { info_tbl: [(c3mUI,
                       label: block_c3mUI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mUI: // global
           if (R1 & 7 == 1) goto c3mUM; else goto c3mUN;
       c3mUM: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mUN: // global
           I64[Sp] = block_c3mV0_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3mVc; else goto c3mV1;
       u3mVc: // global
           call _c3mV0(R1) args: 0, res: 0, upd: 0;
       c3mV1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mV0() //  [R1]
         { info_tbl: [(c3mV0,
                       label: block_c3mV0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mV0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c3mVa; else goto c3mV9;
       c3mVa: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3mV9: // global
           _s3mkJ::P64 = P64[R1 + 7];
           _s3mkK::P64 = P64[R1 + 15];
           I64[Hp - 40] = (,,)_con_info;
           P64[Hp - 32] = _s3mkJ::P64;
           P64[Hp - 24] = _s3mkK::P64;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.78363107 UTC

[section ""data" . GHC.Event.PSQ.$wsize_closure" {
     GHC.Event.PSQ.$wsize_closure:
         const GHC.Event.PSQ.$wsize_info;
 },
 GHC.Event.PSQ.$wsize_entry() //  [R2]
         { info_tbl: [(c3mXL,
                       label: GHC.Event.PSQ.$wsize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mXL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c3mXM; else goto c3mXN;
       c3mXM: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.$wsize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mXN: // global
           I64[Sp - 8] = block_c3mXD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3mYc; else goto c3mXE;
       u3mYc: // global
           call _c3mXD(R1) args: 0, res: 0, upd: 0;
       c3mXE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mXD() //  [R1]
         { info_tbl: [(c3mXD,
                       label: block_c3mXD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mXD: // global
           _c3mXK::P64 = R1 & 7;
           if (_c3mXK::P64 < 3) goto u3mYb; else goto c3mXJ;
       u3mYb: // global
           if (_c3mXK::P64 < 2) goto c3mXH; else goto c3mXI;
       c3mXH: // global
           I64[Sp - 8] = block_c3mXQ_info;
           R2 = P64[R1 + 15];
           P64[Sp] = P64[R1 + 23];
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
       c3mXI: // global
           R1 = 1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3mXJ: // global
           R1 = 0;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3mXQ() //  [R1]
         { info_tbl: [(c3mXQ,
                       label: block_c3mXQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mXQ: // global
           I64[Sp] = block_c3mXU_info;
           R2 = P64[Sp + 8];
           I64[Sp + 8] = R1;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3mXU() //  [R1]
         { info_tbl: [(c3mXU,
                       label: block_c3mXU_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mXU: // global
           R1 = I64[Sp + 8] + (R1 + 1);
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.798210175 UTC

[section ""data" . GHC.Event.PSQ.size_closure" {
     GHC.Event.PSQ.size_closure:
         const GHC.Event.PSQ.size_info;
 },
 GHC.Event.PSQ.size_entry() //  [R2]
         { info_tbl: [(c3mYI,
                       label: GHC.Event.PSQ.size_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mYI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c3mYM; else goto c3mYN;
       c3mYM: // global
           R2 = R2;
           R1 = GHC.Event.PSQ.size_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3mYN: // global
           I64[Sp - 8] = block_c3mYG_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.PSQ.$wsize_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3mYG() //  [R1]
         { info_tbl: [(c3mYG,
                       label: block_c3mYG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mYG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3mYQ; else goto c3mYP;
       c3mYQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3mYP: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.815840621 UTC

[section ""data" . GHC.Event.PSQ.$wunsafeInsertNew_closure" {
     GHC.Event.PSQ.$wunsafeInsertNew_closure:
         const GHC.Event.PSQ.$wunsafeInsertNew_info;
 },
 GHC.Event.PSQ.$wunsafeInsertNew_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mZ3: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.$wunsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3mZf,
                       label: GHC.Event.PSQ.$wunsafeInsertNew_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [True, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mZf: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c3mZg; else goto c3mZh;
       c3mZg: // global
           R1 = GHC.Event.PSQ.$wunsafeInsertNew_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c3mZh: // global
           I64[Sp - 32] = block_c3mZ7_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3n6L; else goto c3mZ8;
       u3n6L: // global
           call _c3mZ7(R1) args: 0, res: 0, upd: 0;
       c3mZ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3mZ7() //  [R1]
         { info_tbl: [(c3mZ7,
                       label: block_c3mZ7_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3mZ7: // global
           _s3ml4::P64 = P64[Sp + 24];
           _c3mZe::P64 = R1 & 7;
           if (_c3mZe::P64 < 3) goto u3n6H; else goto c3mZd;
       u3n6H: // global
           _s3ml2::I64 = I64[Sp + 8];
           _s3ml3::I64 = I64[Sp + 16];
           if (_c3mZe::P64 < 2) goto c3mZb; else goto c3mZc;
       c3mZb: // global
           _s3ml9::P64 = P64[R1 + 7];
           _s3mlb::P64 = P64[R1 + 15];
           _s3mlc::P64 = P64[R1 + 23];
           _s3ml7::I64 = I64[R1 + 31];
           _s3ml8::I64 = I64[R1 + 39];
           _s3mla::I64 = I64[R1 + 47];
           _s3mle::I64 = (_s3mla::I64 + -1) ^ _s3mla::I64 ^ 18446744073709551615;
           if (_s3ml2::I64 & _s3mle::I64 == _s3ml7::I64 & _s3mle::I64) goto c3n1s; else goto c3n47;
       c3n1s: // global
           if (_s3ml3::I64 == _s3ml8::I64) goto c3n1q; else goto c3n1j;
       c3n1q: // global
           _s3mld::I64 = _s3mla::I64;
           if (%MO_S_Ge_W64(_s3ml2::I64,
                            _s3ml7::I64)) goto s3mlm; else goto s3mlr;
       c3n1j: // global
           _s3mld::I64 = _s3mla::I64;
           if (_s3ml3::I64 > _s3ml8::I64) goto s3mlm; else goto s3mlr;
       s3mlm: // global
           if (_s3ml2::I64 & _s3mld::I64 == 0) goto c3n0l; else goto c3n07;
       c3n0l: // global
           I64[Sp - 16] = block_c3n0g_info;
           R5 = _s3mlb::P64;
           R4 = _s3ml4::P64;
           R3 = _s3ml3::I64;
           R2 = _s3ml2::I64;
           P64[Sp - 8] = _s3mlc::P64;
           I64[Sp] = _s3mla::I64;
           P64[Sp + 8] = _s3ml9::P64;
           I64[Sp + 16] = _s3ml8::I64;
           I64[Sp + 24] = _s3ml7::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       c3n07: // global
           I64[Sp - 16] = block_c3n01_info;
           R5 = _s3mlc::P64;
           R4 = _s3ml4::P64;
           R3 = _s3ml3::I64;
           R2 = _s3ml2::I64;
           P64[Sp - 8] = _s3mlb::P64;
           I64[Sp] = _s3mla::I64;
           P64[Sp + 8] = _s3ml9::P64;
           I64[Sp + 16] = _s3ml8::I64;
           I64[Sp + 24] = _s3ml7::I64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
       s3mlr: // global
           if (_s3ml7::I64 & _s3mld::I64 == 0) goto c3n14; else goto c3n0N;
       c3n14: // global
           I64[Sp - 40] = block_c3n0X_info;
           R1 = _s3ml4::P64;
           P64[Sp - 32] = _s3ml9::P64;
           I64[Sp - 24] = _s3mla::I64;
           P64[Sp - 16] = _s3mlb::P64;
           P64[Sp - 8] = _s3mlc::P64;
           I64[Sp] = _s3ml8::I64;
           I64[Sp + 24] = _s3ml7::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3n0N: // global
           I64[Sp - 40] = block_c3n0F_info;
           R1 = _s3ml4::P64;
           P64[Sp - 32] = _s3ml9::P64;
           I64[Sp - 24] = _s3mla::I64;
           P64[Sp - 16] = _s3mlb::P64;
           P64[Sp - 8] = _s3mlc::P64;
           I64[Sp] = _s3ml8::I64;
           I64[Sp + 24] = _s3ml7::I64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3n47: // global
           if (_s3ml3::I64 == _s3ml8::I64) goto c3n46; else goto c3n3Z;
       c3n46: // global
           _s3ml6::P64 = R1;
           if (%MO_S_Ge_W64(_s3ml2::I64,
                            _s3ml7::I64)) goto s3mlB; else goto s3mlV;
       c3n3Z: // global
           _s3ml6::P64 = R1;
           if (_s3ml3::I64 > _s3ml8::I64) goto s3mlB; else goto s3mlV;
       s3mlB: // global
           (_c3n1J::I64) = call MO_Clz W64(_s3ml7::I64 ^ _s3ml2::I64);
           _s3mlC::I64 = 1 << 63 - _c3n1J::I64;
           _s3mlM::I64 = _s3mlC::I64 & _s3ml2::I64;
           if (_s3mlM::I64 != 0) goto u3n6I; else goto c3n2G;
       u3n6I: // global
           I64[Sp - 56] = _s3ml8::I64;
           P64[Sp - 48] = _s3ml9::P64;
           I64[Sp - 40] = _s3mla::I64;
           P64[Sp - 32] = _s3mlb::P64;
           P64[Sp - 24] = _s3mlc::P64;
           I64[Sp - 16] = _s3mlC::I64;
           I64[Sp - 8] = _s3mlM::I64;
           I64[Sp] = _s3ml7::I64;
           Sp = Sp - 56;
           call _c3n29() args: 0, res: 0, upd: 0;
       c3n2G: // global
           I64[Sp - 48] = block_c3n2x_info;
           R1 = _s3ml4::P64;
           P64[Sp - 40] = _s3ml9::P64;
           I64[Sp - 32] = _s3mla::I64;
           P64[Sp - 24] = _s3mlb::P64;
           P64[Sp - 16] = _s3mlc::P64;
           I64[Sp - 8] = _s3mlC::I64;
           I64[Sp] = _s3ml8::I64;
           I64[Sp + 24] = _s3ml7::I64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3mlV: // global
           (_c3n33::I64) = call MO_Clz W64(_s3ml2::I64 ^ _s3ml7::I64);
           _s3mlW::I64 = 1 << 63 - _c3n33::I64;
           if (_s3mlW::I64 & _s3ml7::I64 == 0) goto c3n3L; else goto c3n3z;
       c3n3L: // global
           I64[Sp - 8] = block_c3n3I_info;
           R1 = _s3ml4::P64;
           I64[Sp] = _s3mlW::I64;
           P64[Sp + 24] = _s3ml6::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3n3z: // global
           I64[Sp - 8] = block_c3n3v_info;
           R1 = _s3ml4::P64;
           I64[Sp] = _s3mlW::I64;
           P64[Sp + 24] = _s3ml6::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3mZc: // global
           _s3mme::P64 = P64[R1 + 6];
           _s3mmc::I64 = I64[R1 + 14];
           _s3mmd::I64 = I64[R1 + 22];
           if (_s3ml3::I64 == _s3mmd::I64) goto c3n6x; else goto c3n6q;
       c3n6x: // global
           _s3ml6::P64 = R1;
           if (%MO_S_Ge_W64(_s3ml2::I64,
                            _s3mmc::I64)) goto s3mmf; else goto s3mmv;
       c3n6q: // global
           _s3ml6::P64 = R1;
           if (_s3ml3::I64 > _s3mmd::I64) goto s3mmf; else goto s3mmv;
       s3mmf: // global
           (_c3n4q::I64) = call MO_Clz W64(_s3mmc::I64 ^ _s3ml2::I64);
           _s3mmg::I64 = 1 << 63 - _c3n4q::I64;
           if (_s3mmg::I64 & _s3ml2::I64 == 0) goto c3n5a; else goto c3n4X;
       c3n5a: // global
           I64[Sp - 24] = block_c3n56_info;
           R1 = _s3ml4::P64;
           P64[Sp - 16] = _s3mme::P64;
           I64[Sp - 8] = _s3mmg::I64;
           I64[Sp] = _s3mmd::I64;
           I64[Sp + 24] = _s3mmc::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3n4X: // global
           I64[Sp - 24] = block_c3n4S_info;
           R1 = _s3ml4::P64;
           P64[Sp - 16] = _s3mme::P64;
           I64[Sp - 8] = _s3mmg::I64;
           I64[Sp] = _s3mmd::I64;
           I64[Sp + 24] = _s3mmc::I64;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       s3mmv: // global
           (_c3n5u::I64) = call MO_Clz W64(_s3ml2::I64 ^ _s3mmc::I64);
           _s3mmw::I64 = 1 << 63 - _c3n5u::I64;
           if (_s3mmw::I64 & _s3mmc::I64 == 0) goto c3n6c; else goto c3n60;
       c3n6c: // global
           I64[Sp - 8] = block_c3n69_info;
           R1 = _s3ml4::P64;
           I64[Sp] = _s3mmw::I64;
           P64[Sp + 24] = _s3ml6::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3n60: // global
           I64[Sp - 8] = block_c3n5W_info;
           R1 = _s3ml4::P64;
           I64[Sp] = _s3mmw::I64;
           P64[Sp + 24] = _s3ml6::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c3mZd: // global
           I64[Sp] = block_c3n6A_info;
           R1 = _s3ml4::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3n0g() //  [R1]
         { info_tbl: [(c3n0g,
                       label: block_c3n0g_info
                       rep:StackRep [False, True, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n0g: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n0p; else goto c3n0o;
       c3n0p: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n0o: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n01() //  [R1]
         { info_tbl: [(c3n01,
                       label: block_c3n01_info
                       rep:StackRep [False, True, False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n01: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n0b; else goto c3n0a;
       c3n0b: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n0a: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n0X() //  [R1]
         { info_tbl: [(c3n0X,
                       label: block_c3n0X_info
                       rep:StackRep [False, True, False, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n0X: // global
           _s3ml9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3n0Z_info;
           R5 = P64[Sp + 24];
           R4 = _s3ml9::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3n0Z() //  [R1]
         { info_tbl: [(c3n0Z,
                       label: block_c3n0Z_info
                       rep:StackRep [True, True, False, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n0Z: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n19; else goto c3n18;
       c3n19: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n18: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n0F() //  [R1]
         { info_tbl: [(c3n0F,
                       label: block_c3n0F_info
                       rep:StackRep [False, True, False, False, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n0F: // global
           _s3ml9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c3n0H_info;
           R5 = P64[Sp + 32];
           R4 = _s3ml9::P64;
           R3 = I64[Sp + 40];
           R2 = I64[Sp + 64];
           P64[Sp + 64] = R1;
           Sp = Sp + 8;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3n0H() //  [R1]
         { info_tbl: [(c3n0H,
                       label: block_c3n0H_info
                       rep:StackRep [True, False, True, True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n0H: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n0S; else goto c3n0R;
       c3n0S: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n0R: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n29() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n29: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3n2o; else goto c3n2n;
       c3n2o: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_c3n28_info;
           R1 = I64[Sp + 48];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c3n2n: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp - 8] = block_c3n2c_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           Sp = Sp - 8;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3n28() //  [R1]
         { info_tbl: [(c3n28,
                       label: block_c3n28_info
                       rep:StackRep [True, False, True, False, False, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n28: // global
           I64[Sp + 56] = R1;
           Sp = Sp + 8;
           call _c3n29() args: 0, res: 0, upd: 0;
     }
 },
 _c3n2c() //  [R1]
         { info_tbl: [(c3n2c,
                       label: block_c3n2c_info
                       rep:StackRep [True, False, True, True, True, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n2c: // global
           I64[Sp] = block_c3n2g_info;
           _s3mlO::P64 = R1;
           R1 = P64[Sp + 88];
           P64[Sp + 88] = _s3mlO::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3n2g() //  [R1]
         { info_tbl: [(c3n2g,
                       label: block_c3n2g_info
                       rep:StackRep [True, False, True, True, True, True, True, True,
                                     True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n2g: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3n2s; else goto c3n2r;
       c3n2s: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n2r: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 80];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 64];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 48];
           R1 = Hp - 47;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n2x() //  [R1]
         { info_tbl: [(c3n2x,
                       label: block_c3n2x_info
                       rep:StackRep [False, True, False, False, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n2x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3n2K; else goto c3n2J;
       c3n2K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n2J: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp] = block_c3n2A_info;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = Hp - 7;
           P64[Sp + 32] = R1;
           call GHC.Event.PSQ.merge_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3n2A() //  [R1]
         { info_tbl: [(c3n2A,
                       label: block_c3n2A_info
                       rep:StackRep [False, True, True, False, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n2A: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3n2N; else goto c3n2M;
       c3n2N: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n2M: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = P64[Sp + 32];
           I64[Hp - 64] = I64[Sp + 56];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 48];
           I64[Hp] = I64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n3I() //  [R1]
         { info_tbl: [(c3n3I,
                       label: block_c3n3I_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n3I: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n3P; else goto c3n3O;
       c3n3P: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n3O: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n3v() //  [R1]
         { info_tbl: [(c3n3v,
                       label: block_c3n3v_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n3v: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n3D; else goto c3n3C;
       c3n3D: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n3C: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n56() //  [R1]
         { info_tbl: [(c3n56,
                       label: block_c3n56_info
                       rep:StackRep [False, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n56: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3n5e; else goto c3n5d;
       c3n5e: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n5d: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = Hp - 78;
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n4S() //  [R1]
         { info_tbl: [(c3n4S,
                       label: block_c3n4S_info
                       rep:StackRep [False, True, True, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n4S: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c3n51; else goto c3n50;
       c3n51: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n50: // global
           I64[Hp - 80] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = I64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = Hp - 78;
           I64[Hp - 16] = I64[Sp + 48];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n69() //  [R1]
         { info_tbl: [(c3n69,
                       label: block_c3n69_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n69: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n6g; else goto c3n6f;
       c3n6g: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n6f: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = GHC.Event.PSQ.Nil_closure+3;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n5W() //  [R1]
         { info_tbl: [(c3n5W,
                       label: block_c3n5W_info
                       rep:StackRep [True, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n5W: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3n64; else goto c3n63;
       c3n64: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n63: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = GHC.Event.PSQ.Nil_closure+3;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c3n6A() //  [R1]
         { info_tbl: [(c3n6A,
                       label: block_c3n6A_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3n6A: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3n6G; else goto c3n6F;
       c3n6G: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3n6F: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R1;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 22;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.878099802 UTC

[section ""data" . GHC.Event.PSQ.unsafeInsertNew_closure" {
     GHC.Event.PSQ.unsafeInsertNew_closure:
         const GHC.Event.PSQ.unsafeInsertNew_info;
 },
 GHC.Event.PSQ.unsafeInsertNew_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3naI,
                       label: GHC.Event.PSQ.unsafeInsertNew_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3naI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3naM; else goto c3naN;
       c3naM: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.unsafeInsertNew_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3naN: // global
           I64[Sp - 32] = block_c3naF_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3naV; else goto c3naG;
       u3naV: // global
           call _c3naF(R1) args: 0, res: 0, upd: 0;
       c3naG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3naF() //  [R1]
         { info_tbl: [(c3naF,
                       label: block_c3naF_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3naF: // global
           I64[Sp] = block_c3naL_info;
           _s3mmS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3mmS::I64;
           if (R1 & 7 != 0) goto u3naU; else goto c3naP;
       u3naU: // global
           call _c3naL(R1) args: 0, res: 0, upd: 0;
       c3naP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3naL() //  [R1]
         { info_tbl: [(c3naL,
                       label: block_c3naL_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3naL: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.885666401 UTC

[section ""data" . GHC.Event.PSQ.insert_closure" {
     GHC.Event.PSQ.insert_closure:
         const GHC.Event.PSQ.insert_info;
 },
 GHC.Event.PSQ.insert_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c3nbi,
                       label: GHC.Event.PSQ.insert_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nbi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3nbr; else goto c3nbs;
       c3nbr: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.insert_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3nbs: // global
           I64[Sp - 32] = block_c3nbf_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u3nbA; else goto c3nbg;
       u3nbA: // global
           call _c3nbf(R1) args: 0, res: 0, upd: 0;
       c3nbg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3nbf() //  [R1]
         { info_tbl: [(c3nbf,
                       label: block_c3nbf_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nbf: // global
           I64[Sp - 8] = block_c3nbl_info;
           _s3mmZ::P64 = R1;
           _s3mn0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s3mn0::I64;
           P64[Sp + 8] = _s3mmZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3nbz; else goto c3nbm;
       u3nbz: // global
           call _c3nbl(R1) args: 0, res: 0, upd: 0;
       c3nbm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3nbl() //  [R1]
         { info_tbl: [(c3nbl,
                       label: block_c3nbl_info
                       rep:StackRep [True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nbl: // global
           I64[Sp] = block_c3nbq_info;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 16];
           I64[Sp + 32] = I64[R1 + 7];
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3nbq() //  [R1]
         { info_tbl: [(c3nbq,
                       label: block_c3nbq_info
                       rep:StackRep [True, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nbq: // global
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = I64[Sp + 32];
           R2 = I64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.895645706 UTC

[section ""data" . go_r3kd8_closure" {
     go_r3kd8_closure:
         const go_r3kd8_info;
 },
 go_r3kd8_entry() //  [R2]
         { info_tbl: [(c3nc6,
                       label: go_r3kd8_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nc6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c3nc7; else goto c3nc8;
       c3nc7: // global
           R2 = R2;
           R1 = go_r3kd8_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c3nc8: // global
           I64[Sp - 8] = block_c3nbZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ncz; else goto c3nc0;
       u3ncz: // global
           call _c3nbZ(R1) args: 0, res: 0, upd: 0;
       c3nc0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3nbZ() //  [R1]
         { info_tbl: [(c3nbZ,
                       label: block_c3nbZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nbZ: // global
           if (R1 & 7 == 1) goto c3nc3; else goto c3nc4;
       c3nc3: // global
           R1 = GHC.Event.PSQ.Nil_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c3nc4: // global
           I64[Sp - 8] = block_c3nce_info;
           _s3mn7::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3mn7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ncy; else goto c3ncf;
       u3ncy: // global
           call _c3nce(R1) args: 0, res: 0, upd: 0;
       c3ncf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3nce() //  [R1]
         { info_tbl: [(c3nce,
                       label: block_c3nce_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nce: // global
           I64[Sp - 16] = block_c3ncj_info;
           R2 = P64[Sp + 8];
           P64[Sp - 8] = P64[R1 + 7];
           I64[Sp] = I64[R1 + 23];
           I64[Sp + 8] = I64[R1 + 15];
           Sp = Sp - 16;
           call go_r3kd8_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ncj() //  [R1]
         { info_tbl: [(c3ncj,
                       label: block_c3ncj_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ncj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c3nct; else goto c3ncs;
       c3nct: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c3ncs: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_c3nco_info;
           R3 = R1;
           R2 = Hp - 7;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3nco() //  [R1]
         { info_tbl: [(c3nco,
                       label: block_c3nco_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nco: // global
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.907554295 UTC

[section ""data" . GHC.Event.PSQ.fromList_closure" {
     GHC.Event.PSQ.fromList_closure:
         const GHC.Event.PSQ.fromList_info;
 },
 GHC.Event.PSQ.fromList_entry() //  [R2]
         { info_tbl: [(c3nd9,
                       label: GHC.Event.PSQ.fromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nd9: // global
           R2 = R2;
           call go_r3kd8_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.911404575 UTC

[section ""data" . GHC.Event.PSQ.adjust_closure" {
     GHC.Event.PSQ.adjust_closure:
         const GHC.Event.PSQ.adjust_info;
 },
 GHC.Event.PSQ.adjust_entry() //  [R2, R3, R4]
         { info_tbl: [(c3ndq,
                       label: GHC.Event.PSQ.adjust_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ndq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c3ndr; else goto c3nds;
       c3ndr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.adjust_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3nds: // global
           I64[Sp - 32] = block_c3ndk_info;
           _s3mng::P64 = R3;
           R3 = R4;
           _s3mnf::P64 = R2;
           R2 = _s3mng::P64;
           P64[Sp - 24] = _s3mnf::P64;
           P64[Sp - 16] = _s3mng::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Event.PSQ.deleteView_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 _c3ndk() //  [R1]
         { info_tbl: [(c3ndk,
                       label: block_c3ndk_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ndk: // global
           if (R1 & 7 == 1) goto c3ndn; else goto c3ndo;
       c3ndn: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c3ndo: // global
           I64[Sp] = block_c3ndy_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u3ndQ; else goto c3ndz;
       u3ndQ: // global
           call _c3ndy(R1) args: 0, res: 0, upd: 0;
       c3ndz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ndy() //  [R1]
         { info_tbl: [(c3ndy,
                       label: block_c3ndy_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ndy: // global
           I64[Sp - 8] = block_c3ndD_info;
           _s3mnl::P64 = P64[R1 + 7];
           _s3mnm::P64 = P64[R1 + 15];
           _s3mnn::P64 = P64[R1 + 23];
           R1 = P64[Sp + 16];
           P64[Sp] = _s3mnn::P64;
           P64[Sp + 16] = _s3mnm::P64;
           P64[Sp + 24] = _s3mnl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u3ndR; else goto c3ndE;
       u3ndR: // global
           call _c3ndD(R1) args: 0, res: 0, upd: 0;
       c3ndE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ndD() //  [R1]
         { info_tbl: [(c3ndD,
                       label: block_c3ndD_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ndD: // global
           I64[Sp] = block_c3ndI_info;
           R2 = P64[Sp + 32];
           _s3mnp::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s3mnp::I64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c3ndI() //  [R1]
         { info_tbl: [(c3ndI,
                       label: block_c3ndI_info
                       rep:StackRep [False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3ndI: // global
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 24];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 32];
           Sp = Sp + 40;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.923150503 UTC

[section ""data" . GHC.Event.PSQ.Bin_closure" {
     GHC.Event.PSQ.Bin_closure:
         const GHC.Event.PSQ.Bin_info;
 },
 GHC.Event.PSQ.Bin_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nek: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.PSQ.Bin_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 GHC.Event.PSQ.Bin_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c3nep,
                       label: GHC.Event.PSQ.Bin_info
                       rep:HeapRep static {
                             Fun {arity: 6
                                  fun_type: ArgGen [True, True, False, True, False, False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nep: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c3net; else goto c3nes;
       c3net: // global
           HpAlloc = 56;
           R1 = GHC.Event.PSQ.Bin_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c3nes: // global
           I64[Hp - 48] = GHC.Event.PSQ.Bin_con_info;
           P64[Hp - 40] = R4;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = P64[Sp];
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R5;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.929153943 UTC

[section ""data" . GHC.Event.PSQ.Tip_closure" {
     GHC.Event.PSQ.Tip_closure:
         const GHC.Event.PSQ.Tip_info;
 },
 GHC.Event.PSQ.Tip_entry() //  [R2, R3, R4]
         { info_tbl: [(c3neI,
                       label: GHC.Event.PSQ.Tip_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3neI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3neM; else goto c3neL;
       c3neM: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.Tip_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3neL: // global
           I64[Hp - 24] = GHC.Event.PSQ.Tip_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.933001523 UTC

[section ""data" . GHC.Event.PSQ.Nil_closure" {
     GHC.Event.PSQ.Nil_closure:
         const GHC.Event.PSQ.Nil_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.935126265 UTC

[section ""data" . GHC.Event.PSQ.E_closure" {
     GHC.Event.PSQ.E_closure:
         const GHC.Event.PSQ.E_info;
 },
 GHC.Event.PSQ.E_entry() //  [R2, R3, R4]
         { info_tbl: [(c3neZ,
                       label: GHC.Event.PSQ.E_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 17} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3neZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c3nf3; else goto c3nf2;
       c3nf3: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.PSQ.E_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c3nf2: // global
           I64[Hp - 24] = GHC.Event.PSQ.E_con_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.939405489 UTC

[GHC.Event.PSQ.Bin_con_entry() //  [R1]
         { info_tbl: [(c3nfa,
                       label: GHC.Event.PSQ.Bin_con_info
                       rep:HeapRep 3 ptrs 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,66,105,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nfa: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.942733802 UTC

[GHC.Event.PSQ.Tip_con_entry() //  [R1]
         { info_tbl: [(c3nfh,
                       label: GHC.Event.PSQ.Tip_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,84,105,112]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nfh: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.946344453 UTC

[GHC.Event.PSQ.Nil_con_entry() //  [R1]
         { info_tbl: [(c3nfo,
                       label: GHC.Event.PSQ.Nil_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,78,105,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nfo: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.949768721 UTC

[GHC.Event.PSQ.E_con_entry() //  [R1]
         { info_tbl: [(c3nfv,
                       label: GHC.Event.PSQ.E_con_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,83,81,46,69]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c3nfv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:59.954142019 UTC

[section ""relreadonly" . S3nfC_srt" { S3nfC_srt:
 }]

