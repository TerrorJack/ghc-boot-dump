
==================== Tidy Core ====================
2018-03-16 16:02:59.792916382 UTC

Result size of Tidy Core
  = {terms: 1,078, types: 1,720, coercions: 143, joins: 7/18}

-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$WBucket [InlPrag=INLINE[2]]
  :: forall a. Int -> a -> Bucket a -> Bucket a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a7RTi)
                 (dt_a7RVx [Occ=Once!] :: Int)
                 (dt_a7RVy [Occ=Once] :: a_a7RTi[sk:1])
                 (dt_a7RVz [Occ=Once] :: Bucket a_a7RTi[sk:1]) ->
                 case dt_a7RVx of { I# dt_a7RVA [Occ=Once] ->
                 GHC.Event.IntTable.Bucket @ a_a7RTi dt_a7RVA dt_a7RVy dt_a7RVz
                 }}]
GHC.Event.IntTable.$WBucket
  = \ (@ a_a7RTi)
      (dt_a7RVx [Occ=Once!] :: Int)
      (dt_a7RVy [Occ=Once] :: a_a7RTi[sk:1])
      (dt_a7RVz [Occ=Once] :: Bucket a_a7RTi[sk:1]) ->
      case dt_a7RVx of { I# dt_a7RVA [Occ=Once] ->
      GHC.Event.IntTable.Bucket @ a_a7RTi dt_a7RVA dt_a7RVy dt_a7RVz
      }

-- RHS size: {terms: 13, types: 19, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$WIT [InlPrag=INLINE[2]]
  :: forall a. Arr (Bucket a) -> ForeignPtr Int -> IT a
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a7RTj)
                 (dt_a7RWd [Occ=Once!] :: Arr (Bucket a_a7RTj[sk:1]))
                 (dt_a7RWe [Occ=Once!] :: ForeignPtr Int) ->
                 case dt_a7RWd of { Arr.Arr dt_a7RWf [Occ=Once] ->
                 case dt_a7RWe of
                 { GHC.ForeignPtr.ForeignPtr dt_a7RWg [Occ=Once]
                                             dt_a7RWh [Occ=Once] ->
                 GHC.Event.IntTable.IT @ a_a7RTj dt_a7RWf dt_a7RWg dt_a7RWh
                 }
                 }}]
GHC.Event.IntTable.$WIT
  = \ (@ a_a7RTj)
      (dt_a7RWd [Occ=Once!] :: Arr (Bucket a_a7RTj[sk:1]))
      (dt_a7RWe [Occ=Once!] :: ForeignPtr Int) ->
      case dt_a7RWd of { Arr.Arr dt_a7RWf [Occ=Once] ->
      case dt_a7RWe of
      { GHC.ForeignPtr.ForeignPtr dt_a7RWg [Occ=Once]
                                  dt_a7RWh [Occ=Once] ->
      GHC.Event.IntTable.IT @ a_a7RTj dt_a7RWf dt_a7RWg dt_a7RWh
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_r7SZ3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_r7SZ3 = "bucketNext"#

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
GHC.Event.IntTable.bucketNext1 :: forall a. Bucket a
[GblId, Str=x]
GHC.Event.IntTable.bucketNext1
  = \ (@ a_a7RVJ) ->
      Control.Exception.Base.recSelError
        @ 'GHC.Types.LiftedRep @ (Bucket a_a7RVJ) lvl_r7SZ3

-- RHS size: {terms: 8, types: 11, coercions: 0, joins: 0/0}
bucketNext :: forall a. Bucket a -> Bucket a
[GblId[[RecSel]],
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a7RVJ) (ds_d7Sec [Occ=Once!] :: Bucket a_a7RVJ) ->
                 case ds_d7Sec of {
                   Empty -> GHC.Event.IntTable.bucketNext1 @ a_a7RVJ;
                   Bucket _ [Occ=Dead] _ [Occ=Dead] ds2_d7Sef [Occ=Once] -> ds2_d7Sef
                 }}]
bucketNext
  = \ (@ a_a7RVJ) (ds_d7Sec :: Bucket a_a7RVJ) ->
      case ds_d7Sec of {
        Empty -> GHC.Event.IntTable.bucketNext1 @ a_a7RVJ;
        Bucket dt_d7SeN ds1_d7See ds2_d7Sef -> ds2_d7Sef
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_r7SZ4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl1_r7SZ4 = "bucketValue"#

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.Event.IntTable.bucketValue1 :: forall a. a
[GblId, Str=x]
GHC.Event.IntTable.bucketValue1
  = \ (@ a_a7RVF) ->
      Control.Exception.Base.recSelError
        @ 'GHC.Types.LiftedRep @ a_a7RVF lvl1_r7SZ4

-- RHS size: {terms: 8, types: 11, coercions: 0, joins: 0/0}
bucketValue :: forall a. Bucket a -> a
[GblId[[RecSel]],
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a7RVF) (ds_d7Se5 [Occ=Once!] :: Bucket a_a7RVF) ->
                 case ds_d7Se5 of {
                   Empty -> GHC.Event.IntTable.bucketValue1 @ a_a7RVF;
                   Bucket _ [Occ=Dead] ds1_d7Se7 [Occ=Once] _ [Occ=Dead] -> ds1_d7Se7
                 }}]
bucketValue
  = \ (@ a_a7RVF) (ds_d7Se5 :: Bucket a_a7RVF) ->
      case ds_d7Se5 of {
        Empty -> GHC.Event.IntTable.bucketValue1 @ a_a7RVF;
        Bucket dt_d7SeM ds1_d7Se7 ds2_d7Se8 -> ds1_d7Se7
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_r7SZ5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_r7SZ5 = "bucketKey"#

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.Event.IntTable.bucketKey1 :: Int
[GblId, Str=x]
GHC.Event.IntTable.bucketKey1
  = Control.Exception.Base.recSelError
      @ 'GHC.Types.LiftedRep @ Int lvl2_r7SZ5

-- RHS size: {terms: 9, types: 10, coercions: 0, joins: 0/0}
bucketKey :: forall a. Bucket a -> Int
[GblId[[RecSel]],
 Arity=1,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a7RVB) (ds_d7SdY [Occ=Once!] :: Bucket a_a7RVB) ->
                 case ds_d7SdY of {
                   Empty -> GHC.Event.IntTable.bucketKey1;
                   Bucket dt_d7SeL [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                     GHC.Types.I# dt_d7SeL
                 }}]
bucketKey
  = \ (@ a_a7RVB) (ds_d7SdY :: Bucket a_a7RVB) ->
      case ds_d7SdY of {
        Empty -> GHC.Event.IntTable.bucketKey1;
        Bucket dt_d7SeL ds1_d7Se0 ds2_d7Se1 -> GHC.Types.I# dt_d7SeL
      }

-- RHS size: {terms: 8, types: 13, coercions: 0, joins: 0/0}
tabSize :: forall a. IT a -> ForeignPtr Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,U,U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a7RWk) (ds_d7SdU [Occ=Once!] :: IT a_a7RWk) ->
                 case ds_d7SdU of
                 { IT _ [Occ=Dead] dt1_d7SeJ [Occ=Once] dt2_d7SeK [Occ=Once] ->
                 GHC.ForeignPtr.ForeignPtr @ Int dt1_d7SeJ dt2_d7SeK
                 }}]
tabSize
  = \ (@ a_a7RWk) (ds_d7SdU :: IT a_a7RWk) ->
      case ds_d7SdU of { IT dt_d7SeI dt1_d7SeJ dt2_d7SeK ->
      GHC.ForeignPtr.ForeignPtr @ Int dt1_d7SeJ dt2_d7SeK
      }

-- RHS size: {terms: 7, types: 14, coercions: 0, joins: 0/0}
tabArr :: forall a. IT a -> Arr (Bucket a)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(U,A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a7RWi) (ds_d7SdQ [Occ=Once!] :: IT a_a7RWi) ->
                 case ds_d7SdQ of
                 { IT dt_d7SeF [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 GHC.Event.Arr.Arr @ (Bucket a_a7RWi) dt_d7SeF
                 }}]
tabArr
  = \ (@ a_a7RWi) (ds_d7SdQ :: IT a_a7RWi) ->
      case ds_d7SdQ of { IT dt_d7SeF dt1_d7SeG dt2_d7SeH ->
      GHC.Event.Arr.Arr @ (Bucket a_a7RWi) dt_d7SeF
      }

-- RHS size: {terms: 51, types: 98, coercions: 13, joins: 0/2}
GHC.Event.IntTable.$wnew [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, IntTable a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 96 30}]
GHC.Event.IntTable.$wnew
  = \ (@ a_s7SLw)
      (ww_s7SLB :: GHC.Prim.Int#)
      (w_s7SLy :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.Prim.newArray#
             @ (Bucket a_s7SLw)
             @ GHC.Prim.RealWorld
             ww_s7SLB
             (GHC.Event.IntTable.Empty @ a_s7SLw)
             w_s7SLy
      of
      { (# ipv_i7Sf8, ipv1_i7Sf9 #) ->
      case GHC.Prim.newMutVar#
             @ GHC.ForeignPtr.Finalizers
             @ GHC.Prim.RealWorld
             GHC.ForeignPtr.NoFinalizers
             ipv_i7Sf8
      of
      { (# ipv2_i7IAN, ipv3_i7IAO #) ->
      case GHC.Prim.newAlignedPinnedByteArray#
             @ GHC.Prim.RealWorld 8# 8# ipv2_i7IAN
      of
      { (# ipv4_s7JhN, ipv5_s7JhO #) ->
      let {
        ipv6_s7SrY [Dmd=<S,U>] :: GHC.Prim.Addr#
        [LclId]
        ipv6_s7SrY
          = GHC.Prim.byteArrayContents#
              (ipv5_s7JhO
               `cast` (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                    GHC.Prim.RealWorld) GHC.Prim.ByteArray#
                       :: (GHC.Prim.MutableByteArray# GHC.Prim.RealWorld :: TYPE
                                                                              'GHC.Types.UnliftedRep)
                          ~R# (GHC.Prim.ByteArray# :: TYPE 'GHC.Types.UnliftedRep))) } in
      case GHC.Prim.writeIntOffAddr#
             @ GHC.Prim.RealWorld ipv6_s7SrY 0# 0# ipv4_s7JhN
      of s2_i7SfF
      { __DEFAULT ->
      let {
        ipv7_s7SrZ :: GHC.ForeignPtr.ForeignPtrContents
        [LclId, Unf=OtherCon []]
        ipv7_s7SrZ = GHC.ForeignPtr.MallocPtr ipv5_s7JhO ipv3_i7IAO } in
      case GHC.Prim.touch#
             @ 'GHC.Types.LiftedRep
             @ GHC.ForeignPtr.ForeignPtrContents
             ipv7_s7SrZ
             s2_i7SfF
      of s'_a7ILd
      { __DEFAULT ->
      case GHC.Prim.newMutVar#
             @ (IT a_s7SLw)
             @ GHC.Prim.RealWorld
             (GHC.Event.IntTable.IT @ a_s7SLw ipv1_i7Sf9 ipv6_s7SrY ipv7_s7SrZ)
             s'_a7ILd
      of
      { (# ipv8_X7ICQ, ipv9_X7ICS #) ->
      (# ipv8_X7ICQ,
         (GHC.STRef.STRef @ GHC.Prim.RealWorld @ (IT a_s7SLw) ipv9_X7ICS)
         `cast` (Sym (GHC.IORef.N:IORef[0]) <IT
                                               a_s7SLw>_N ; Sym (GHC.Event.IntTable.N:IntTable[0]
                                                                     <a_s7SLw>_R)
                 :: (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_s7SLw) :: *)
                    ~R# (IntTable a_s7SLw :: *)) #)
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 9, types: 8, coercions: 0, joins: 0/0}
GHC.Event.IntTable.new1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, IntTable a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s7SLw)
                 (w_s7SLx [Occ=Once!] :: Int)
                 (w1_s7SLy [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w_s7SLx of { I# ww1_s7SLB [Occ=Once] ->
                 GHC.Event.IntTable.$wnew @ a_s7SLw ww1_s7SLB w1_s7SLy
                 }}]
GHC.Event.IntTable.new1
  = \ (@ a_s7SLw)
      (w_s7SLx :: Int)
      (w1_s7SLy :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case w_s7SLx of { I# ww1_s7SLB ->
      GHC.Event.IntTable.$wnew @ a_s7SLw ww1_s7SLB w1_s7SLy
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
new :: forall a. Int -> IO (IntTable a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.IntTable.new1
               `cast` (forall (a :: <*>_N).
                       <Int>_R ->_R Sym (GHC.Types.N:IO[0] <IntTable a>_R)
                       :: (forall a.
                           Int
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, IntTable a #) :: *)
                          ~R# (forall a. Int -> IO (IntTable a) :: *))}]
new
  = GHC.Event.IntTable.new1
    `cast` (forall (a :: <*>_N).
            <Int>_R ->_R Sym (GHC.Types.N:IO[0] <IntTable a>_R)
            :: (forall a.
                Int
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, IntTable a #) :: *)
               ~R# (forall a. Int -> IO (IntTable a) :: *))

-- RHS size: {terms: 119, types: 198, coercions: 0, joins: 0/2}
GHC.Event.IntTable.$wupdateWith [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> Maybe a)
     -> GHC.Prim.Int#
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [60 0 0 0] 261 90}]
GHC.Event.IntTable.$wupdateWith
  = \ (@ a_s7SLJ)
      (w_s7SLK :: a_s7SLJ -> Maybe a_s7SLJ)
      (ww_s7SLQ :: GHC.Prim.Int#)
      (ww1_s7SLU :: GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a_s7SLJ))
      (w1_s7SLN :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.Prim.readMutVar#
             @ GHC.Prim.RealWorld @ (IT a_s7SLJ) ww1_s7SLU w1_s7SLN
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of { IT dt_d7Sem dt1_d7Sen dt2_d7Seo ->
      let {
        n#_i7SgH [Dmd=<S,U>] :: GHC.Prim.Int#
        [LclId]
        n#_i7SgH
          = GHC.Prim.andI#
              ww_s7SLQ
              (GHC.Prim.-#
                 (GHC.Prim.sizeofMutableArray#
                    @ GHC.Prim.RealWorld @ (Bucket a_s7SLJ) dt_d7Sem)
                 1#) } in
      case GHC.Prim.readArray#
             @ GHC.Prim.RealWorld @ (Bucket a_s7SLJ) dt_d7Sem n#_i7SgH ipv_i7IAy
      of
      { (# ipv2_X7IBS, ipv3_X7IBU #) ->
      letrec {
        $wgo_s7SLI [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
          :: Bucket a_s7SLJ -> (# Bool, Maybe a_s7SLJ, Bucket a_s7SLJ #)
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        $wgo_s7SLI
          = \ (w2_s7SLE :: Bucket a_s7SLJ) ->
              case w2_s7SLE of {
                Empty ->
                  (# GHC.Types.False, GHC.Base.Nothing @ a_s7SLJ,
                     GHC.Event.IntTable.Empty @ a_s7SLJ #);
                Bucket dt3_d7Sep ds_d7SaO ds3_d7SaP ->
                  case GHC.Prim.==# dt3_d7Sep ww_s7SLQ of {
                    __DEFAULT ->
                      case $wgo_s7SLI ds3_d7SaP of
                      { (# ww3_s7SNM, ww4_s7SNN, ww5_s7SNO #) ->
                      (# ww3_s7SNM, ww4_s7SNN,
                         GHC.Event.IntTable.Bucket @ a_s7SLJ dt3_d7Sep ds_d7SaO ww5_s7SNO #)
                      };
                    1# ->
                      case w_s7SLK ds_d7SaO of {
                        Nothing ->
                          (# GHC.Types.True, GHC.Base.Just @ a_s7SLJ ds_d7SaO, ds3_d7SaP #);
                        Just val_a7RUN ->
                          (# GHC.Types.False, GHC.Base.Just @ a_s7SLJ ds_d7SaO,
                             GHC.Event.IntTable.Bucket
                               @ a_s7SLJ dt3_d7Sep val_a7RUN ds3_d7SaP #)
                      }
                  }
              }; } in
      case $wgo_s7SLI ipv3_X7IBU of
      { (# ww3_s7SNM, ww4_s7SNN, ww5_s7SNO #) ->
      case ww4_s7SNN of wild1_i7S9D {
        Nothing -> (# ipv2_X7IBS, GHC.Base.Nothing @ a_s7SLJ #);
        Just ipv4_i7Ssm ->
          case GHC.Prim.writeArray#
                 @ GHC.Prim.RealWorld
                 @ (Bucket a_s7SLJ)
                 dt_d7Sem
                 n#_i7SgH
                 ww5_s7SNO
                 ipv2_X7IBS
          of s1#_i7Shm
          { __DEFAULT ->
          case ww3_s7SNM of {
            False -> (# s1#_i7Shm, wild1_i7S9D #);
            True ->
              case GHC.Prim.readIntOffAddr#
                     @ GHC.Prim.RealWorld dt1_d7Sen 0# s1#_i7Shm
              of
              { (# ipv5_i7Shz, ipv6_i7ShA #) ->
              case GHC.Prim.writeIntOffAddr#
                     @ GHC.Prim.RealWorld
                     dt1_d7Sen
                     0#
                     (GHC.Prim.-# ipv6_i7ShA 1#)
                     ipv5_i7Shz
              of s2_i7SfF
              { __DEFAULT ->
              case GHC.Prim.touch#
                     @ 'GHC.Types.LiftedRep
                     @ GHC.ForeignPtr.ForeignPtrContents
                     dt2_d7Seo
                     s2_i7SfF
              of s'_a7ILd
              { __DEFAULT ->
              (# s'_a7ILd, wild1_i7S9D #)
              }
              }
              }
          }
          }
      }
      }
      }
      }
      }

-- RHS size: {terms: 16, types: 21, coercions: 6, joins: 0/0}
GHC.Event.IntTable.delete3 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> Maybe a)
     -> Int
     -> IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s7SLJ)
                 (w_s7SLK [Occ=Once] :: a_s7SLJ -> Maybe a_s7SLJ)
                 (w1_s7SLL [Occ=Once!] :: Int)
                 (w2_s7SLM [Occ=Once] :: IntTable a_s7SLJ)
                 (w3_s7SLN [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1_s7SLL of { I# ww1_s7SLQ [Occ=Once] ->
                 case w2_s7SLM
                      `cast` (GHC.Event.IntTable.N:IntTable[0]
                                  <a_s7SLJ>_R ; GHC.IORef.N:IORef[0] <IT a_s7SLJ>_N
                              :: (IntTable a_s7SLJ :: *)
                                 ~R# (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_s7SLJ) :: *))
                 of
                 { GHC.STRef.STRef ww3_s7SLU [Occ=Once] ->
                 GHC.Event.IntTable.$wupdateWith
                   @ a_s7SLJ w_s7SLK ww1_s7SLQ ww3_s7SLU w3_s7SLN
                 }
                 }}]
GHC.Event.IntTable.delete3
  = \ (@ a_s7SLJ)
      (w_s7SLK :: a_s7SLJ -> Maybe a_s7SLJ)
      (w1_s7SLL :: Int)
      (w2_s7SLM :: IntTable a_s7SLJ)
      (w3_s7SLN :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case w1_s7SLL of { I# ww1_s7SLQ ->
      case w2_s7SLM
           `cast` (GHC.Event.IntTable.N:IntTable[0]
                       <a_s7SLJ>_R ; GHC.IORef.N:IORef[0] <IT a_s7SLJ>_N
                   :: (IntTable a_s7SLJ :: *)
                      ~R# (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_s7SLJ) :: *))
      of
      { GHC.STRef.STRef ww3_s7SLU ->
      GHC.Event.IntTable.$wupdateWith
        @ a_s7SLJ w_s7SLK ww1_s7SLQ ww3_s7SLU w3_s7SLN
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
updateWith
  :: forall a. (a -> Maybe a) -> Int -> IntTable a -> IO (Maybe a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.IntTable.delete3
               `cast` (forall (a :: <*>_N).
                       <a -> Maybe a>_R
                       ->_R <Int>_R
                       ->_R <IntTable a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Maybe a>_R)
                       :: (forall a.
                           (a -> Maybe a)
                           -> Int
                           -> IntTable a
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #) :: *)
                          ~R# (forall a.
                               (a -> Maybe a) -> Int -> IntTable a -> IO (Maybe a) :: *))}]
updateWith
  = GHC.Event.IntTable.delete3
    `cast` (forall (a :: <*>_N).
            <a -> Maybe a>_R
            ->_R <Int>_R
            ->_R <IntTable a>_R
            ->_R Sym (GHC.Types.N:IO[0] <Maybe a>_R)
            :: (forall a.
                (a -> Maybe a)
                -> Int
                -> IntTable a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #) :: *)
               ~R# (forall a.
                    (a -> Maybe a) -> Int -> IntTable a -> IO (Maybe a) :: *))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.Event.IntTable.delete2 :: forall a. a -> Maybe a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a7S1q) _ [Occ=Dead] -> GHC.Base.Nothing @ a_a7S1q}]
GHC.Event.IntTable.delete2
  = \ (@ a_a7S1q) _ [Occ=Dead] -> GHC.Base.Nothing @ a_a7S1q

-- RHS size: {terms: 15, types: 19, coercions: 6, joins: 0/0}
GHC.Event.IntTable.delete1
  :: forall a.
     Int
     -> IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a7S1q)
                 (k_a7RUz [Occ=Once] :: Int)
                 (t_a7RUA [Occ=Once] :: IntTable a_a7S1q)
                 (eta_B1 [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Event.IntTable.delete3
                   @ a_a7S1q
                   (GHC.Event.IntTable.delete2 @ a_a7S1q)
                   k_a7RUz
                   t_a7RUA
                   eta_B1}]
GHC.Event.IntTable.delete1
  = \ (@ a_a7S1q)
      (k_a7RUz :: Int)
      (t_a7RUA :: IntTable a_a7S1q)
      (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case k_a7RUz of { I# ww1_s7SLQ ->
      case t_a7RUA
           `cast` (GHC.Event.IntTable.N:IntTable[0]
                       <a_a7S1q>_R ; GHC.IORef.N:IORef[0] <IT a_a7S1q>_N
                   :: (IntTable a_a7S1q :: *)
                      ~R# (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_a7S1q) :: *))
      of
      { GHC.STRef.STRef ww3_s7SLU ->
      GHC.Event.IntTable.$wupdateWith
        @ a_a7S1q
        (GHC.Event.IntTable.delete2 @ a_a7S1q)
        ww1_s7SLQ
        ww3_s7SLU
        eta_B1
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
delete :: forall a. Int -> IntTable a -> IO (Maybe a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.IntTable.delete1
               `cast` (forall (a :: <*>_N).
                       <Int>_R
                       ->_R <IntTable a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Maybe a>_R)
                       :: (forall a.
                           Int
                           -> IntTable a
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #) :: *)
                          ~R# (forall a. Int -> IntTable a -> IO (Maybe a) :: *))}]
delete
  = GHC.Event.IntTable.delete1
    `cast` (forall (a :: <*>_N).
            <Int>_R
            ->_R <IntTable a>_R
            ->_R Sym (GHC.Types.N:IO[0] <Maybe a>_R)
            :: (forall a.
                Int
                -> IntTable a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #) :: *)
               ~R# (forall a. Int -> IntTable a -> IO (Maybe a) :: *))

-- RHS size: {terms: 145, types: 206, coercions: 5, joins: 4/7}
GHC.Event.IntTable.$wgrow [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MutableArray# GHC.Prim.RealWorld (Bucket a)
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a)
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 170 0}]
GHC.Event.IntTable.$wgrow
  = \ (@ a_s7SMk)
      (ww_s7SMr
         :: GHC.Prim.MutableArray# GHC.Prim.RealWorld (Bucket a_s7SMk))
      (ww1_s7SMx :: GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a_s7SMk))
      (ww2_s7SMB :: GHC.Prim.Int#)
      (w_s7SMo :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.Prim.newArray#
             @ (Bucket a_s7SMk)
             @ GHC.Prim.RealWorld
             (GHC.Prim.uncheckedIShiftL#
                (GHC.Prim.sizeofMutableArray#
                   @ GHC.Prim.RealWorld @ (Bucket a_s7SMk) ww_s7SMr)
                1#)
             (GHC.Event.IntTable.Empty @ a_s7SMk)
             w_s7SMo
      of
      { (# ipv_i7Sf8, ipv1_i7Sf9 #) ->
      case GHC.Prim.newMutVar#
             @ GHC.ForeignPtr.Finalizers
             @ GHC.Prim.RealWorld
             GHC.ForeignPtr.NoFinalizers
             ipv_i7Sf8
      of
      { (# ipv2_i7IAN, ipv3_i7IAO #) ->
      case GHC.Prim.newAlignedPinnedByteArray#
             @ GHC.Prim.RealWorld 8# 8# ipv2_i7IAN
      of
      { (# ipv4_s7JhN, ipv5_s7JhO #) ->
      let {
        ipv6_s7SrY [Dmd=<S,U>] :: GHC.Prim.Addr#
        [LclId]
        ipv6_s7SrY
          = GHC.Prim.byteArrayContents#
              (ipv5_s7JhO
               `cast` (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                    GHC.Prim.RealWorld) GHC.Prim.ByteArray#
                       :: (GHC.Prim.MutableByteArray# GHC.Prim.RealWorld :: TYPE
                                                                              'GHC.Types.UnliftedRep)
                          ~R# (GHC.Prim.ByteArray# :: TYPE 'GHC.Types.UnliftedRep))) } in
      case GHC.Prim.writeIntOffAddr#
             @ GHC.Prim.RealWorld ipv6_s7SrY 0# 0# ipv4_s7JhN
      of s2_i7SfF
      { __DEFAULT ->
      let {
        ipv7_s7SrZ :: GHC.ForeignPtr.ForeignPtrContents
        [LclId, Unf=OtherCon []]
        ipv7_s7SrZ = GHC.ForeignPtr.MallocPtr ipv5_s7JhO ipv3_i7IAO } in
      case GHC.Prim.touch#
             @ 'GHC.Types.LiftedRep
             @ GHC.ForeignPtr.ForeignPtrContents
             ipv7_s7SrZ
             s2_i7SfF
      of s'_a7ILd
      { __DEFAULT ->
      join {
        exit_X1D [Dmd=<C(S),C(U(U,U))>]
          :: GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
        [LclId[JoinId(1)], Arity=1, Str=<S,U>]
        exit_X1D (w1_s7SMa [OS=OneShot]
                    :: GHC.Prim.State# GHC.Prim.RealWorld)
          = case GHC.Prim.writeIntOffAddr#
                   @ GHC.Prim.RealWorld ipv6_s7SrY 0# ww2_s7SMB w1_s7SMa
            of s1_X7Sig
            { __DEFAULT ->
            case GHC.Prim.touch#
                   @ 'GHC.Types.LiftedRep
                   @ GHC.ForeignPtr.ForeignPtrContents
                   ipv7_s7SrZ
                   s1_X7Sig
            of s'1_X7INU
            { __DEFAULT ->
            case GHC.Prim.writeMutVar#
                   @ GHC.Prim.RealWorld
                   @ (IT a_s7SMk)
                   ww1_s7SMx
                   (GHC.Event.IntTable.IT @ a_s7SMk ipv1_i7Sf9 ipv6_s7SrY ipv7_s7SrZ)
                   s'1_X7INU
            of s2#_i7IBe
            { __DEFAULT ->
            (# s2#_i7IBe, GHC.Tuple.() #)
            }
            }
            } } in
      joinrec {
        $wcopySlot_s7SMj [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
          :: GHC.Prim.Int#
             -> GHC.Prim.Int#
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
        [LclId[JoinId(3)], Arity=3, Str=<S,U><L,U><S,U>, Unf=OtherCon []]
        $wcopySlot_s7SMj (ww3_s7SMd :: GHC.Prim.Int#)
                         (ww4_s7SMh :: GHC.Prim.Int#)
                         (w1_s7SMa :: GHC.Prim.State# GHC.Prim.RealWorld)
          = case GHC.Prim.==# ww3_s7SMd ww2_s7SMB of {
              __DEFAULT ->
                case GHC.Prim.readArray#
                       @ GHC.Prim.RealWorld @ (Bucket a_s7SMk) ww_s7SMr ww4_s7SMh w1_s7SMa
                of
                { (# ipv8_X7IBX, ipv9_X7IBZ #) ->
                join {
                  exit1_X1M [Dmd=<C(C(S)),C(C1(U(U,U)))>]
                    :: GHC.Prim.Int#
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                  [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>]
                  exit1_X1M (ww5_s7SM5 [OS=OneShot] :: GHC.Prim.Int#)
                            (w2_s7SM2 [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld)
                    = jump $wcopySlot_s7SMj
                        ww5_s7SM5 (GHC.Prim.+# ww4_s7SMh 1#) w2_s7SM2 } in
                joinrec {
                  $wcopyBucket_s7SM7 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                    :: GHC.Prim.Int#
                       -> Bucket a_s7SMk
                       -> GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                  [LclId[JoinId(3)], Arity=3, Str=<S,U><S,1*U><S,U>, Unf=OtherCon []]
                  $wcopyBucket_s7SM7 (ww5_s7SM5 :: GHC.Prim.Int#)
                                     (w2_s7SM1 :: Bucket a_s7SMk)
                                     (w3_s7SM2 :: GHC.Prim.State# GHC.Prim.RealWorld)
                    = case w2_s7SM1 of {
                        Empty -> jump exit1_X1M ww5_s7SM5 w3_s7SM2;
                        Bucket ipv10_s7Sic ipv11_s7Sid ipv12_s7Sie ->
                          let {
                            idx_s7SsH [Dmd=<S,U>] :: GHC.Prim.Int#
                            [LclId]
                            idx_s7SsH
                              = GHC.Prim.andI#
                                  ipv10_s7Sic
                                  (GHC.Prim.-#
                                     (GHC.Prim.sizeofMutableArray#
                                        @ GHC.Prim.RealWorld @ (Bucket a_s7SMk) ipv1_i7Sf9)
                                     1#) } in
                          case GHC.Prim.readArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Bucket a_s7SMk)
                                 ipv1_i7Sf9
                                 idx_s7SsH
                                 w3_s7SM2
                          of
                          { (# ipv13_X7ICp, ipv14_X7ICr #) ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Bucket a_s7SMk)
                                 ipv1_i7Sf9
                                 idx_s7SsH
                                 (GHC.Event.IntTable.Bucket
                                    @ a_s7SMk ipv10_s7Sic ipv11_s7Sid ipv14_X7ICr)
                                 ipv13_X7ICp
                          of s1#_i7Shm
                          { __DEFAULT ->
                          jump $wcopyBucket_s7SM7
                            (GHC.Prim.+# ww5_s7SM5 1#) ipv12_s7Sie s1#_i7Shm
                          }
                          }
                      }; } in
                jump $wcopyBucket_s7SM7 ww3_s7SMd ipv9_X7IBZ ipv8_X7IBX
                };
              1# -> jump exit_X1D w1_s7SMa
            }; } in
      jump $wcopySlot_s7SMj 0# 0# s'_a7ILd
      }
      }
      }
      }
      }

Rec {
-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
poly_<>_r7SZ6 :: forall a. Bucket a -> Bucket a -> Bucket a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []]
poly_<>_r7SZ6
  = \ (@ a_a7S4Y)
      (ds_d7Sc2 :: Bucket a_a7S4Y)
      (bs_a7RUi :: Bucket a_a7S4Y) ->
      case ds_d7Sc2 of {
        Empty -> bs_a7RUi;
        Bucket dt_d7Sey ds1_d7Scp ds2_d7Scq ->
          GHC.Event.IntTable.Bucket
            @ a_a7S4Y
            dt_d7Sey
            ds1_d7Scp
            (poly_<>_r7SZ6 @ a_a7S4Y ds2_d7Scq bs_a7RUi)
      }
end Rec }

Rec {
-- RHS size: {terms: 14, types: 17, coercions: 8, joins: 0/0}
GHC.Event.IntTable.$winsertWith [InlPrag=INLINABLE[0],
                                 Occ=LoopBreaker]
  :: forall a.
     (a -> a -> a)
     -> GHC.Prim.Int#
     -> a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,U><S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [60 0 20 0 0] 509 0
         Tmpl= \ (@ a_X7SOt)
                 (w_X7SOv [Occ=OnceL*] :: a_X7SOt -> a_X7SOt -> a_X7SOt)
                 (ww_s7SMP :: GHC.Prim.Int#)
                 (w1_X7SOz [Occ=OnceL*] :: a_X7SOt)
                 (ww1_s7SMT :: GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a_X7SOt))
                 (w2_s7SMM [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld @ (IT a_X7SOt) ww1_s7SMT w2_s7SMM
                 of
                 { (# ipv_i7IAy [Occ=Once], ipv1_i7IAz [Occ=Once!] #) ->
                 case ipv1_i7IAz of
                 { IT dt_d7Seu dt1_d7Sev dt2_d7Sew [Occ=OnceL*] ->
                 let {
                   n#_i7SgH :: GHC.Prim.Int#
                   [LclId]
                   n#_i7SgH
                     = GHC.Prim.andI#
                         ww_s7SMP
                         (GHC.Prim.-#
                            (GHC.Prim.sizeofMutableArray#
                               @ GHC.Prim.RealWorld @ (Bucket a_X7SOt) dt_d7Seu)
                            1#) } in
                 case GHC.Prim.readArray#
                        @ GHC.Prim.RealWorld @ (Bucket a_X7SOt) dt_d7Seu n#_i7SgH ipv_i7IAy
                 of
                 { (# ipv2_X7ICc [Occ=Once], ipv3_X7ICe [Occ=Once] #) ->
                 letrec {
                   go_a7S5f [Occ=LoopBreaker]
                     :: Bucket a_X7SOt -> Bucket a_X7SOt -> IO (Maybe a_X7SOt)
                   [LclId, Arity=2, Unf=OtherCon []]
                   go_a7S5f
                     = \ (seen_a7RUa [Occ=Once*] :: Bucket a_X7SOt)
                         (bkt_a7RUb [Occ=Once!] :: Bucket a_X7SOt) ->
                         case bkt_a7RUb of {
                           Empty ->
                             (\ (s_X7ICk [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case GHC.Prim.readIntOffAddr#
                                       @ GHC.Prim.RealWorld dt1_d7Sev 0# s_X7ICk
                                of
                                { (# ipv4_i7Shz [Occ=Once*], ipv5_i7ShA #) ->
                                case GHC.Prim.>=#
                                       (GHC.Prim.+# ipv5_i7ShA 1#)
                                       (GHC.Prim.-#
                                          (GHC.Prim.sizeofMutableArray#
                                             @ GHC.Prim.RealWorld @ (Bucket a_X7SOt) dt_d7Seu)
                                          (GHC.Prim.uncheckedIShiftRA#
                                             (GHC.Prim.sizeofMutableArray#
                                                @ GHC.Prim.RealWorld @ (Bucket a_X7SOt) dt_d7Seu)
                                             2#))
                                of {
                                  __DEFAULT ->
                                    case w1_X7SOz of v_X7RUn { __DEFAULT ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Bucket a_X7SOt)
                                           dt_d7Seu
                                           n#_i7SgH
                                           (GHC.Event.IntTable.Bucket
                                              @ a_X7SOt ww_s7SMP v_X7RUn seen_a7RUa)
                                           ipv4_i7Shz
                                    of s1#_i7Shm
                                    { __DEFAULT ->
                                    case GHC.Prim.writeIntOffAddr#
                                           @ GHC.Prim.RealWorld
                                           dt1_d7Sev
                                           0#
                                           (GHC.Prim.+# ipv5_i7ShA 1#)
                                           s1#_i7Shm
                                    of s2_i7SfF
                                    { __DEFAULT ->
                                    case GHC.Prim.touch#
                                           @ 'GHC.Types.LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt2_d7Sew
                                           s2_i7SfF
                                    of s'_a7ILd
                                    { __DEFAULT ->
                                    (# s'_a7ILd, GHC.Base.Nothing @ a_X7SOt #)
                                    }
                                    }
                                    }
                                    };
                                  1# ->
                                    case GHC.Event.IntTable.$wgrow
                                           @ a_X7SOt dt_d7Seu ww1_s7SMT ipv5_i7ShA ipv4_i7Shz
                                    of
                                    { (# ipv6_i7JiK [Occ=Once], _ [Occ=Dead] #) ->
                                    case GHC.Event.IntTable.$winsertWith
                                           @ a_X7SOt w_X7SOv ww_s7SMP w1_X7SOz ww1_s7SMT ipv6_i7JiK
                                    of
                                    { (# ipv8_X7IF5 [Occ=Once], ipv9_X7IF8 [Occ=Once] #) ->
                                    case GHC.Prim.touch#
                                           @ 'GHC.Types.LiftedRep
                                           @ GHC.ForeignPtr.ForeignPtrContents
                                           dt2_d7Sew
                                           ipv8_X7IF5
                                    of s'_a7ILd
                                    { __DEFAULT ->
                                    (# s'_a7ILd, ipv9_X7IF8 #)
                                    }
                                    }
                                    }
                                }
                                })
                             `cast` (Sym (GHC.Types.N:IO[0] <Maybe a_X7SOt>_R)
                                     :: (GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               Maybe a_X7SOt #) :: *)
                                        ~R# (IO (Maybe a_X7SOt) :: *));
                           Bucket dt3_d7Sex ds_d7ScR ds3_d7ScS [Occ=Once*] ->
                             case GHC.Prim.==# dt3_d7Sex ww_s7SMP of {
                               __DEFAULT ->
                                 go_a7S5f
                                   (GHC.Event.IntTable.Bucket
                                      @ a_X7SOt dt3_d7Sex ds_d7ScR seen_a7RUa)
                                   ds3_d7ScS;
                               1# ->
                                 letrec {
                                   <>_a7S5u [Occ=LoopBreaker]
                                     :: Bucket a_X7SOt -> Bucket a_X7SOt -> Bucket a_X7SOt
                                   [LclId, Arity=2, Unf=OtherCon []]
                                   <>_a7S5u
                                     = \ (ds4_d7Sc2 [Occ=Once!] :: Bucket a_X7SOt)
                                         (bs_a7RUi [Occ=Once*] :: Bucket a_X7SOt) ->
                                         case ds4_d7Sc2 of {
                                           Empty -> bs_a7RUi;
                                           Bucket dt4_d7Sey [Occ=Once] ds5_d7Scp [Occ=Once]
                                                  ds6_d7Scq [Occ=Once] ->
                                             GHC.Event.IntTable.Bucket
                                               @ a_X7SOt
                                               dt4_d7Sey
                                               ds5_d7Scp
                                               (<>_a7S5u ds6_d7Scq bs_a7RUi)
                                         }; } in
                                 case <>_a7S5u seen_a7RUa ds3_d7ScS of next_a7RUg { __DEFAULT ->
                                 case w_X7SOv w1_X7SOz ds_d7ScR of v'_a7RUf { __DEFAULT ->
                                 (\ (s_i7JiH [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Bucket a_X7SOt)
                                           dt_d7Seu
                                           n#_i7SgH
                                           (GHC.Event.IntTable.Bucket
                                              @ a_X7SOt ww_s7SMP v'_a7RUf next_a7RUg)
                                           s_i7JiH
                                    of s1#_i7Shm
                                    { __DEFAULT ->
                                    (# s1#_i7Shm, GHC.Base.Just @ a_X7SOt ds_d7ScR #)
                                    })
                                 `cast` (Sym (GHC.Types.N:IO[0] <Maybe a_X7SOt>_R)
                                         :: (GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   Maybe a_X7SOt #) :: *)
                                            ~R# (IO (Maybe a_X7SOt) :: *))
                                 }
                                 }
                             }
                         }; } in
                 ((go_a7S5f (GHC.Event.IntTable.Empty @ a_X7SOt) ipv3_X7ICe)
                  `cast` (GHC.Types.N:IO[0] <Maybe a_X7SOt>_R
                          :: (IO (Maybe a_X7SOt) :: *)
                             ~R# (GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a_X7SOt #) :: *)))
                   ipv2_X7ICc
                 }
                 }
                 }}]
GHC.Event.IntTable.$winsertWith
  = \ (@ a_X7SOt)
      (w_X7SOv :: a_X7SOt -> a_X7SOt -> a_X7SOt)
      (ww_s7SMP :: GHC.Prim.Int#)
      (w1_X7SOz :: a_X7SOt)
      (ww1_s7SMT :: GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a_X7SOt))
      (w2_s7SMM :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      insertWith1_r7SZ8
        @ a_X7SOt
        w_X7SOv
        (GHC.Types.I# ww_s7SMP)
        w1_X7SOz
        ((GHC.STRef.STRef @ GHC.Prim.RealWorld @ (IT a_X7SOt) ww1_s7SMT)
         `cast` (Sym (GHC.IORef.N:IORef[0]) <IT
                                               a_X7SOt>_N ; Sym (GHC.Event.IntTable.N:IntTable[0]
                                                                     <a_X7SOt>_R)
                 :: (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_X7SOt) :: *)
                    ~R# (IntTable a_X7SOt :: *)))
        w2_s7SMM

-- RHS size: {terms: 165, types: 226, coercions: 0, joins: 3/4}
$winsertWith1_r7SZ7
  :: forall a.
     (a -> a -> a)
     -> GHC.Prim.Int#
     -> a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,U><S,U><S,U>,
 Unf=OtherCon []]
$winsertWith1_r7SZ7
  = \ (@ a_s7SMZ)
      (w_s7SN0 :: a_s7SMZ -> a_s7SMZ -> a_s7SMZ)
      (ww_s7SN7 :: GHC.Prim.Int#)
      (w1_s7SN2 :: a_s7SMZ)
      (ww1_s7SNb :: GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a_s7SMZ))
      (w2_s7SN4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.Prim.readMutVar#
             @ GHC.Prim.RealWorld @ (IT a_s7SMZ) ww1_s7SNb w2_s7SN4
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of { IT dt_d7Seu dt1_d7Sev dt2_d7Sew ->
      let {
        n#_i7SgH [Dmd=<S,U>] :: GHC.Prim.Int#
        [LclId]
        n#_i7SgH
          = GHC.Prim.andI#
              ww_s7SN7
              (GHC.Prim.-#
                 (GHC.Prim.sizeofMutableArray#
                    @ GHC.Prim.RealWorld @ (Bucket a_s7SMZ) dt_d7Seu)
                 1#) } in
      case GHC.Prim.readArray#
             @ GHC.Prim.RealWorld @ (Bucket a_s7SMZ) dt_d7Seu n#_i7SgH ipv_i7IAy
      of
      { (# ipv2_X7IC6, ipv3_X7IC8 #) ->
      join {
        exit_X1D [Dmd=<L,C(C1(U(U,U)))>]
          :: Bucket a_s7SMZ
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a_s7SMZ #)
        [LclId[JoinId(2)], Arity=2, Str=<L,U><S,U>]
        exit_X1D (seen_a7RUa [OS=OneShot] :: Bucket a_s7SMZ)
                 (eta_B1 [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld)
          = case GHC.Prim.readIntOffAddr#
                   @ GHC.Prim.RealWorld dt1_d7Sev 0# eta_B1
            of
            { (# ipv4_i7Shz, ipv5_i7ShA #) ->
            case GHC.Prim.>=#
                   (GHC.Prim.+# ipv5_i7ShA 1#)
                   (GHC.Prim.-#
                      (GHC.Prim.sizeofMutableArray#
                         @ GHC.Prim.RealWorld @ (Bucket a_s7SMZ) dt_d7Seu)
                      (GHC.Prim.uncheckedIShiftRA#
                         (GHC.Prim.sizeofMutableArray#
                            @ GHC.Prim.RealWorld @ (Bucket a_s7SMZ) dt_d7Seu)
                         2#))
            of {
              __DEFAULT ->
                case w1_s7SN2 of v_X7RUz { __DEFAULT ->
                case GHC.Prim.writeArray#
                       @ GHC.Prim.RealWorld
                       @ (Bucket a_s7SMZ)
                       dt_d7Seu
                       n#_i7SgH
                       (GHC.Event.IntTable.Bucket @ a_s7SMZ ww_s7SN7 v_X7RUz seen_a7RUa)
                       ipv4_i7Shz
                of s1#_i7Shm
                { __DEFAULT ->
                case GHC.Prim.writeIntOffAddr#
                       @ GHC.Prim.RealWorld
                       dt1_d7Sev
                       0#
                       (GHC.Prim.+# ipv5_i7ShA 1#)
                       s1#_i7Shm
                of s2_i7SfF
                { __DEFAULT ->
                case GHC.Prim.touch#
                       @ 'GHC.Types.LiftedRep
                       @ GHC.ForeignPtr.ForeignPtrContents
                       dt2_d7Sew
                       s2_i7SfF
                of s'_a7ILd
                { __DEFAULT ->
                (# s'_a7ILd, GHC.Base.Nothing @ a_s7SMZ #)
                }
                }
                }
                };
              1# ->
                case GHC.Event.IntTable.$wgrow
                       @ a_s7SMZ dt_d7Seu ww1_s7SNb ipv5_i7ShA ipv4_i7Shz
                of
                { (# ipv6_i7JiK, ipv7_i7JiL #) ->
                case GHC.Event.IntTable.$winsertWith
                       @ a_s7SMZ w_s7SN0 ww_s7SN7 w1_s7SN2 ww1_s7SNb ipv6_i7JiK
                of
                { (# ipv8_X7IF4, ipv9_X7IF7 #) ->
                case GHC.Prim.touch#
                       @ 'GHC.Types.LiftedRep
                       @ GHC.ForeignPtr.ForeignPtrContents
                       dt2_d7Sew
                       ipv8_X7IF4
                of s'_a7ILd
                { __DEFAULT ->
                (# s'_a7ILd, ipv9_X7IF7 #)
                }
                }
                }
            }
            } } in
      join {
        exit1_X1I [Dmd=<L,C(C1(C1(C1(U(U,U)))))>]
          :: Bucket a_s7SMZ
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> a_s7SMZ
             -> Bucket a_s7SMZ
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a_s7SMZ #)
        [LclId[JoinId(4)], Arity=4, Str=<S,1*U><S,U><L,U><L,1*U>]
        exit1_X1I (seen_a7RUa [OS=OneShot] :: Bucket a_s7SMZ)
                  (eta_B1 [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld)
                  (ds_d7ScR [OS=OneShot] :: a_s7SMZ)
                  (ds3_d7ScS [OS=OneShot] :: Bucket a_s7SMZ)
          = case poly_<>_r7SZ6 @ a_s7SMZ seen_a7RUa ds3_d7ScS of next_a7RUg
            { __DEFAULT ->
            case w_s7SN0 w1_s7SN2 ds_d7ScR of v'_a7RUf { __DEFAULT ->
            case GHC.Prim.writeArray#
                   @ GHC.Prim.RealWorld
                   @ (Bucket a_s7SMZ)
                   dt_d7Seu
                   n#_i7SgH
                   (GHC.Event.IntTable.Bucket @ a_s7SMZ ww_s7SN7 v'_a7RUf next_a7RUg)
                   eta_B1
            of s1#_i7Shm
            { __DEFAULT ->
            (# s1#_i7Shm, GHC.Base.Just @ a_s7SMZ ds_d7ScR #)
            }
            }
            } } in
      joinrec {
        go_s7Sre [Occ=LoopBreaker]
          :: Bucket a_s7SMZ
             -> Bucket a_s7SMZ
             -> GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a_s7SMZ #)
        [LclId[JoinId(3)], Arity=3, Str=<L,U><S,1*U><S,U>, Unf=OtherCon []]
        go_s7Sre (seen_a7RUa :: Bucket a_s7SMZ)
                 (bkt_a7RUb :: Bucket a_s7SMZ)
                 (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld)
          = case bkt_a7RUb of {
              Empty -> jump exit_X1D seen_a7RUa eta_B1;
              Bucket dt3_d7Sex ds_d7ScR ds3_d7ScS ->
                case GHC.Prim.==# dt3_d7Sex ww_s7SN7 of {
                  __DEFAULT ->
                    jump go_s7Sre
                      (GHC.Event.IntTable.Bucket @ a_s7SMZ dt3_d7Sex ds_d7ScR seen_a7RUa)
                      ds3_d7ScS
                      eta_B1;
                  1# -> jump exit1_X1I seen_a7RUa eta_B1 ds_d7ScR ds3_d7ScS
                }
            }; } in
      jump go_s7Sre
        (GHC.Event.IntTable.Empty @ a_s7SMZ) ipv3_X7IC8 ipv2_X7IC6
      }
      }
      }

-- RHS size: {terms: 18, types: 22, coercions: 6, joins: 0/0}
insertWith1_r7SZ8
  :: forall a.
     (a -> a -> a)
     -> Int
     -> a
     -> IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []]
insertWith1_r7SZ8
  = \ (@ a_s7SMZ)
      (w_s7SN0 :: a_s7SMZ -> a_s7SMZ -> a_s7SMZ)
      (w1_s7SN1 :: Int)
      (w2_s7SN2 :: a_s7SMZ)
      (w3_s7SN3 :: IntTable a_s7SMZ)
      (w4_s7SN4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case w1_s7SN1 of { I# ww1_s7SN7 ->
      case w3_s7SN3
           `cast` (GHC.Event.IntTable.N:IntTable[0]
                       <a_s7SMZ>_R ; GHC.IORef.N:IORef[0] <IT a_s7SMZ>_N
                   :: (IntTable a_s7SMZ :: *)
                      ~R# (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_s7SMZ) :: *))
      of
      { GHC.STRef.STRef ww3_s7SNb ->
      $winsertWith1_r7SZ7
        @ a_s7SMZ w_s7SN0 ww1_s7SN7 w2_s7SN2 ww3_s7SNb w4_s7SN4
      }
      }
end Rec }

-- RHS size: {terms: 18, types: 22, coercions: 6, joins: 0/0}
insertWith2_r7SZ9
  :: forall a.
     (a -> a -> a)
     -> Int
     -> a
     -> IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []]
insertWith2_r7SZ9
  = \ (@ a_s7SMH)
      (w_s7SMI :: a_s7SMH -> a_s7SMH -> a_s7SMH)
      (w1_s7SMJ :: Int)
      (w2_s7SMK :: a_s7SMH)
      (w3_s7SML :: IntTable a_s7SMH)
      (w4_s7SMM :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case w1_s7SMJ of { I# ww1_s7SMP ->
      case w3_s7SML
           `cast` (GHC.Event.IntTable.N:IntTable[0]
                       <a_s7SMH>_R ; GHC.IORef.N:IORef[0] <IT a_s7SMH>_N
                   :: (IntTable a_s7SMH :: *)
                      ~R# (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_s7SMH) :: *))
      of
      { GHC.STRef.STRef ww3_s7SMT ->
      GHC.Event.IntTable.$winsertWith
        @ a_s7SMH w_s7SMI ww1_s7SMP w2_s7SMK ww3_s7SMT w4_s7SMM
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 18, joins: 0/0}
insertWith [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> a -> a) -> Int -> a -> IntTable a -> IO (Maybe a)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= (\ (@ a_X7SOs)
                  (w_X7SOu [Occ=Once] :: a_X7SOs -> a_X7SOs -> a_X7SOs)
                  (w1_X7SOw [Occ=Once!] :: Int)
                  (w2_X7SOy [Occ=Once] :: a_X7SOs)
                  (w3_X7SOA [Occ=Once] :: IntTable a_X7SOs)
                  (w4_s7SMM [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case w1_X7SOw of { I# ww1_s7SMP [Occ=Once] ->
                  case w3_X7SOA
                       `cast` (GHC.Event.IntTable.N:IntTable[0]
                                   <a_X7SOs>_R ; GHC.IORef.N:IORef[0] <IT a_X7SOs>_N
                               :: (IntTable a_X7SOs :: *)
                                  ~R# (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_X7SOs) :: *))
                  of
                  { GHC.STRef.STRef ww3_s7SMT [Occ=Once] ->
                  GHC.Event.IntTable.$winsertWith
                    @ a_X7SOs w_X7SOu ww1_s7SMP w2_X7SOy ww3_s7SMT w4_s7SMM
                  }
                  })
               `cast` (forall (a :: <*>_N).
                       <a -> a -> a>_R
                       ->_R <Int>_R
                       ->_R <a>_R
                       ->_R <IntTable a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Maybe a>_R)
                       :: (forall a.
                           (a -> a -> a)
                           -> Int
                           -> a
                           -> IntTable a
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #) :: *)
                          ~R# (forall a.
                               (a -> a -> a) -> Int -> a -> IntTable a -> IO (Maybe a) :: *))}]
insertWith
  = insertWith2_r7SZ9
    `cast` (forall (a :: <*>_N).
            <a -> a -> a>_R
            ->_R <Int>_R
            ->_R <a>_R
            ->_R <IntTable a>_R
            ->_R Sym (GHC.Types.N:IO[0] <Maybe a>_R)
            :: (forall a.
                (a -> a -> a)
                -> Int
                -> a
                -> IntTable a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #) :: *)
               ~R# (forall a.
                    (a -> a -> a) -> Int -> a -> IntTable a -> IO (Maybe a) :: *))

-- RHS size: {terms: 121, types: 206, coercions: 0, joins: 0/2}
GHC.Event.IntTable.$wreset [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> Maybe a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 90 0 0] 281 120}]
GHC.Event.IntTable.$wreset
  = \ (@ a_s7SNj)
      (ww_s7SNq :: GHC.Prim.Int#)
      (w_s7SNl :: Maybe a_s7SNj)
      (ww1_s7SNu :: GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a_s7SNj))
      (w1_s7SNn :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case w_s7SNl of {
        Nothing ->
          case GHC.Prim.readMutVar#
                 @ GHC.Prim.RealWorld @ (IT a_s7SNj) ww1_s7SNu w1_s7SNn
          of
          { (# ipv_i7IAy, ipv1_i7IAz #) ->
          case ipv1_i7IAz of { IT dt_d7Sem dt1_d7Sen dt2_d7Seo ->
          let {
            n#_i7SgH [Dmd=<S,U>] :: GHC.Prim.Int#
            [LclId]
            n#_i7SgH
              = GHC.Prim.andI#
                  ww_s7SNq
                  (GHC.Prim.-#
                     (GHC.Prim.sizeofMutableArray#
                        @ GHC.Prim.RealWorld @ (Bucket a_s7SNj) dt_d7Sem)
                     1#) } in
          case GHC.Prim.readArray#
                 @ GHC.Prim.RealWorld @ (Bucket a_s7SNj) dt_d7Sem n#_i7SgH ipv_i7IAy
          of
          { (# ipv2_X7IBS, ipv3_X7IBU #) ->
          letrec {
            $wgo_s7SNi [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
              :: Bucket a_s7SNj -> (# Bool, Maybe a_s7SNj, Bucket a_s7SNj #)
            [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
            $wgo_s7SNi
              = \ (w2_s7SNe :: Bucket a_s7SNj) ->
                  case w2_s7SNe of {
                    Empty ->
                      (# GHC.Types.False, GHC.Base.Nothing @ a_s7SNj,
                         GHC.Event.IntTable.Empty @ a_s7SNj #);
                    Bucket dt3_d7Sep ds_d7SaO ds3_d7SaP ->
                      case GHC.Prim.==# dt3_d7Sep ww_s7SNq of {
                        __DEFAULT ->
                          case $wgo_s7SNi ds3_d7SaP of
                          { (# ww3_s7SNQ, ww4_s7SNR, ww5_s7SNS #) ->
                          (# ww3_s7SNQ, ww4_s7SNR,
                             GHC.Event.IntTable.Bucket @ a_s7SNj dt3_d7Sep ds_d7SaO ww5_s7SNS #)
                          };
                        1# ->
                          (# GHC.Types.True, GHC.Base.Just @ a_s7SNj ds_d7SaO, ds3_d7SaP #)
                      }
                  }; } in
          case $wgo_s7SNi ipv3_X7IBU of
          { (# ww3_s7SNQ, ww4_s7SNR, ww5_s7SNS #) ->
          case ww4_s7SNR of {
            Nothing -> (# ipv2_X7IBS, GHC.Tuple.() #);
            Just ipv4_i7Ssm ->
              case GHC.Prim.writeArray#
                     @ GHC.Prim.RealWorld
                     @ (Bucket a_s7SNj)
                     dt_d7Sem
                     n#_i7SgH
                     ww5_s7SNS
                     ipv2_X7IBS
              of s1#_i7Shm
              { __DEFAULT ->
              case ww3_s7SNQ of {
                False -> (# s1#_i7Shm, GHC.Tuple.() #);
                True ->
                  case GHC.Prim.readIntOffAddr#
                         @ GHC.Prim.RealWorld dt1_d7Sen 0# s1#_i7Shm
                  of
                  { (# ipv5_i7Shz, ipv6_i7ShA #) ->
                  case GHC.Prim.writeIntOffAddr#
                         @ GHC.Prim.RealWorld
                         dt1_d7Sen
                         0#
                         (GHC.Prim.-# ipv6_i7ShA 1#)
                         ipv5_i7Shz
                  of s2_i7SfF
                  { __DEFAULT ->
                  case GHC.Prim.touch#
                         @ 'GHC.Types.LiftedRep
                         @ GHC.ForeignPtr.ForeignPtrContents
                         dt2_d7Seo
                         s2_i7SfF
                  of s'_a7ILd
                  { __DEFAULT ->
                  (# s'_a7ILd, GHC.Tuple.() #)
                  }
                  }
                  }
              }
              }
          }
          }
          }
          }
          };
        Just v_a7RUs ->
          case GHC.Event.IntTable.$winsertWith
                 @ a_s7SNj
                 (const @ a_s7SNj @ a_s7SNj)
                 ww_s7SNq
                 v_a7RUs
                 ww1_s7SNu
                 w1_s7SNn
          of
          { (# ipv_i7JiK, ipv1_i7JiL #) ->
          (# ipv_i7JiK, GHC.Tuple.() #)
          }
      }

-- RHS size: {terms: 16, types: 20, coercions: 6, joins: 0/0}
GHC.Event.IntTable.reset1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Int
     -> Maybe a
     -> IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s7SNj)
                 (w_s7SNk [Occ=Once!] :: Int)
                 (w1_s7SNl [Occ=Once] :: Maybe a_s7SNj)
                 (w2_s7SNm [Occ=Once] :: IntTable a_s7SNj)
                 (w3_s7SNn [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w_s7SNk of { I# ww1_s7SNq [Occ=Once] ->
                 case w2_s7SNm
                      `cast` (GHC.Event.IntTable.N:IntTable[0]
                                  <a_s7SNj>_R ; GHC.IORef.N:IORef[0] <IT a_s7SNj>_N
                              :: (IntTable a_s7SNj :: *)
                                 ~R# (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_s7SNj) :: *))
                 of
                 { GHC.STRef.STRef ww3_s7SNu [Occ=Once] ->
                 GHC.Event.IntTable.$wreset
                   @ a_s7SNj ww1_s7SNq w1_s7SNl ww3_s7SNu w3_s7SNn
                 }
                 }}]
GHC.Event.IntTable.reset1
  = \ (@ a_s7SNj)
      (w_s7SNk :: Int)
      (w1_s7SNl :: Maybe a_s7SNj)
      (w2_s7SNm :: IntTable a_s7SNj)
      (w3_s7SNn :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case w_s7SNk of { I# ww1_s7SNq ->
      case w2_s7SNm
           `cast` (GHC.Event.IntTable.N:IntTable[0]
                       <a_s7SNj>_R ; GHC.IORef.N:IORef[0] <IT a_s7SNj>_N
                   :: (IntTable a_s7SNj :: *)
                      ~R# (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_s7SNj) :: *))
      of
      { GHC.STRef.STRef ww3_s7SNu ->
      GHC.Event.IntTable.$wreset
        @ a_s7SNj ww1_s7SNq w1_s7SNl ww3_s7SNu w3_s7SNn
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
reset :: forall a. Int -> Maybe a -> IntTable a -> IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.IntTable.reset1
               `cast` (forall (a :: <*>_N).
                       <Int>_R
                       ->_R <Maybe a>_R
                       ->_R <IntTable a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           Int
                           -> Maybe a
                           -> IntTable a
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #) :: *)
                          ~R# (forall a. Int -> Maybe a -> IntTable a -> IO () :: *))}]
reset
  = GHC.Event.IntTable.reset1
    `cast` (forall (a :: <*>_N).
            <Int>_R
            ->_R <Maybe a>_R
            ->_R <IntTable a>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                Int
                -> Maybe a
                -> IntTable a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #) :: *)
               ~R# (forall a. Int -> Maybe a -> IntTable a -> IO () :: *))

-- RHS size: {terms: 48, types: 83, coercions: 0, joins: 0/1}
GHC.Event.IntTable.$wlookup [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 136 30}]
GHC.Event.IntTable.$wlookup
  = \ (@ a_s7SNz)
      (ww_s7SNF :: GHC.Prim.Int#)
      (ww1_s7SNJ :: GHC.Prim.MutVar# GHC.Prim.RealWorld (IT a_s7SNz))
      (w_s7SNC :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.Prim.readMutVar#
             @ GHC.Prim.RealWorld @ (IT a_s7SNz) ww1_s7SNJ w_s7SNC
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of { IT dt_d7SeB dt1_d7SeC dt2_d7SeD ->
      case GHC.Prim.readArray#
             @ GHC.Prim.RealWorld
             @ (Bucket a_s7SNz)
             dt_d7SeB
             (GHC.Prim.andI#
                ww_s7SNF
                (GHC.Prim.-#
                   (GHC.Prim.sizeofMutableArray#
                      @ GHC.Prim.RealWorld @ (Bucket a_s7SNz) dt_d7SeB)
                   1#))
             ipv_i7IAy
      of
      { (# ipv2_X7IC9, ipv3_X7ICb #) ->
      letrec {
        go_s7Srb [Occ=LoopBreaker] :: forall a1. Bucket a1 -> Maybe a1
        [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
        go_s7Srb
          = \ (@ a1_a7S8k) (ds_d7Sdx :: Bucket a1_a7S8k) ->
              case ds_d7Sdx of {
                Empty -> GHC.Base.Nothing @ a1_a7S8k;
                Bucket dt3_d7SeE ds3_d7SdG ds4_d7SdH ->
                  case GHC.Prim.==# dt3_d7SeE ww_s7SNF of {
                    __DEFAULT -> go_s7Srb @ a1_a7S8k ds4_d7SdH;
                    1# -> GHC.Base.Just @ a1_a7S8k ds3_d7SdG
                  }
              }; } in
      case go_s7Srb @ a_s7SNz ipv3_X7ICb of vx_i7Sdn { __DEFAULT ->
      (# ipv2_X7IC9, vx_i7Sdn #)
      }
      }
      }
      }

-- RHS size: {terms: 14, types: 18, coercions: 6, joins: 0/0}
GHC.Event.IntTable.lookup1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Int
     -> IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s7SNz)
                 (w_s7SNA [Occ=Once!] :: Int)
                 (w1_s7SNB [Occ=Once] :: IntTable a_s7SNz)
                 (w2_s7SNC [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w_s7SNA of { I# ww1_s7SNF [Occ=Once] ->
                 case w1_s7SNB
                      `cast` (GHC.Event.IntTable.N:IntTable[0]
                                  <a_s7SNz>_R ; GHC.IORef.N:IORef[0] <IT a_s7SNz>_N
                              :: (IntTable a_s7SNz :: *)
                                 ~R# (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_s7SNz) :: *))
                 of
                 { GHC.STRef.STRef ww3_s7SNJ [Occ=Once] ->
                 GHC.Event.IntTable.$wlookup @ a_s7SNz ww1_s7SNF ww3_s7SNJ w2_s7SNC
                 }
                 }}]
GHC.Event.IntTable.lookup1
  = \ (@ a_s7SNz)
      (w_s7SNA :: Int)
      (w1_s7SNB :: IntTable a_s7SNz)
      (w2_s7SNC :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case w_s7SNA of { I# ww1_s7SNF ->
      case w1_s7SNB
           `cast` (GHC.Event.IntTable.N:IntTable[0]
                       <a_s7SNz>_R ; GHC.IORef.N:IORef[0] <IT a_s7SNz>_N
                   :: (IntTable a_s7SNz :: *)
                      ~R# (GHC.STRef.STRef GHC.Prim.RealWorld (IT a_s7SNz) :: *))
      of
      { GHC.STRef.STRef ww3_s7SNJ ->
      GHC.Event.IntTable.$wlookup @ a_s7SNz ww1_s7SNF ww3_s7SNJ w2_s7SNC
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
lookup :: forall a. Int -> IntTable a -> IO (Maybe a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.IntTable.lookup1
               `cast` (forall (a :: <*>_N).
                       <Int>_R
                       ->_R <IntTable a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Maybe a>_R)
                       :: (forall a.
                           Int
                           -> IntTable a
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #) :: *)
                          ~R# (forall a. Int -> IntTable a -> IO (Maybe a) :: *))}]
lookup
  = GHC.Event.IntTable.lookup1
    `cast` (forall (a :: <*>_N).
            <Int>_R
            ->_R <IntTable a>_R
            ->_R Sym (GHC.Types.N:IO[0] <Maybe a>_R)
            :: (forall a.
                Int
                -> IntTable a
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, Maybe a #) :: *)
               ~R# (forall a. Int -> IntTable a -> IO (Maybe a) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.IntTable.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.IntTable.$trModule3
  = GHC.Types.TrNameS GHC.Event.IntTable.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Event.IntTable.$trModule2 = "GHC.Event.IntTable"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.IntTable.$trModule1
  = GHC.Types.TrNameS GHC.Event.IntTable.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Event.IntTable.$trModule
  = GHC.Types.Module
      GHC.Event.IntTable.$trModule3 GHC.Event.IntTable.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r7SZa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r7SZa
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1_r7SZb :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep1_r7SZb
  = GHC.Types.:
      @ GHC.Types.KindRep $krep_r7SZa (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r7SZc :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r7SZc
  = GHC.Types.KindRepTyConApp
      GHC.ForeignPtr.$tcForeignPtr $krep1_r7SZb

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep3_r7SZd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep3_r7SZd = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tcBucket2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.IntTable.$tcBucket2 = "Bucket"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tcBucket1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.IntTable.$tcBucket1
  = GHC.Types.TrNameS GHC.Event.IntTable.$tcBucket2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tcBucket :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.IntTable.$tcBucket
  = GHC.Types.TyCon
      17735724201551259799##
      1580619789810252778##
      GHC.Event.IntTable.$trModule
      GHC.Event.IntTable.$tcBucket1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4_r7SZe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep4_r7SZe
  = GHC.Types.:
      @ GHC.Types.KindRep $krep3_r7SZd (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'Empty1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.Event.IntTable.$tc'Empty1
  = GHC.Types.KindRepTyConApp
      GHC.Event.IntTable.$tcBucket $krep4_r7SZe

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'Empty3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.IntTable.$tc'Empty3 = "'Empty"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'Empty2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.IntTable.$tc'Empty2
  = GHC.Types.TrNameS GHC.Event.IntTable.$tc'Empty3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'Empty :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.IntTable.$tc'Empty
  = GHC.Types.TyCon
      14716594083905147916##
      6006296133869125928##
      GHC.Event.IntTable.$trModule
      GHC.Event.IntTable.$tc'Empty2
      1#
      GHC.Event.IntTable.$tc'Empty1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_r7SZf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep5_r7SZf
  = GHC.Types.KindRepFun
      GHC.Event.IntTable.$tc'Empty1 GHC.Event.IntTable.$tc'Empty1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_r7SZg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep6_r7SZg = GHC.Types.KindRepFun $krep3_r7SZd $krep5_r7SZf

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'Bucket1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.IntTable.$tc'Bucket1
  = GHC.Types.KindRepFun $krep_r7SZa $krep6_r7SZg

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'Bucket3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.IntTable.$tc'Bucket3 = "'Bucket"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'Bucket2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.IntTable.$tc'Bucket2
  = GHC.Types.TrNameS GHC.Event.IntTable.$tc'Bucket3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'Bucket :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.IntTable.$tc'Bucket
  = GHC.Types.TyCon
      13477734220520722226##
      15099239145624852322##
      GHC.Event.IntTable.$trModule
      GHC.Event.IntTable.$tc'Bucket2
      1#
      GHC.Event.IntTable.$tc'Bucket1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_r7SZh :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_r7SZh
  = GHC.Types.:
      @ GHC.Types.KindRep
      GHC.Event.IntTable.$tc'Empty1
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r7SZi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep8_r7SZi
  = GHC.Types.KindRepTyConApp GHC.Event.Arr.$tcArr $krep7_r7SZh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tcIT2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.IntTable.$tcIT2 = "IT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tcIT1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.IntTable.$tcIT1
  = GHC.Types.TrNameS GHC.Event.IntTable.$tcIT2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tcIT :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.IntTable.$tcIT
  = GHC.Types.TyCon
      1485413372890074222##
      7871673693356487434##
      GHC.Event.IntTable.$trModule
      GHC.Event.IntTable.$tcIT1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r7SZj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep9_r7SZj
  = GHC.Types.KindRepTyConApp GHC.Event.IntTable.$tcIT $krep4_r7SZe

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r7SZk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep10_r7SZk = GHC.Types.KindRepFun $krep2_r7SZc $krep9_r7SZj

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'IT1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.IntTable.$tc'IT1
  = GHC.Types.KindRepFun $krep8_r7SZi $krep10_r7SZk

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'IT3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.IntTable.$tc'IT3 = "'IT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'IT2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.IntTable.$tc'IT2
  = GHC.Types.TrNameS GHC.Event.IntTable.$tc'IT3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'IT :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.IntTable.$tc'IT
  = GHC.Types.TyCon
      2061931487051656996##
      1303251193055522557##
      GHC.Event.IntTable.$trModule
      GHC.Event.IntTable.$tc'IT2
      1#
      GHC.Event.IntTable.$tc'IT1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep11_r7SZl :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep11_r7SZl
  = GHC.Types.:
      @ GHC.Types.KindRep $krep9_r7SZj (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r7SZm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep12_r7SZm
  = GHC.Types.KindRepTyConApp GHC.IORef.$tcIORef $krep11_r7SZl

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tcIntTable2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.IntTable.$tcIntTable2 = "IntTable"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tcIntTable1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.IntTable.$tcIntTable1
  = GHC.Types.TrNameS GHC.Event.IntTable.$tcIntTable2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tcIntTable :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.IntTable.$tcIntTable
  = GHC.Types.TyCon
      12646307913912198429##
      5258607314097228638##
      GHC.Event.IntTable.$trModule
      GHC.Event.IntTable.$tcIntTable1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r7SZn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep13_r7SZn
  = GHC.Types.KindRepTyConApp
      GHC.Event.IntTable.$tcIntTable $krep4_r7SZe

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'IntTable1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.IntTable.$tc'IntTable1
  = GHC.Types.KindRepFun $krep12_r7SZm $krep13_r7SZn

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'IntTable3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.IntTable.$tc'IntTable3 = "'IntTable"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'IntTable2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.IntTable.$tc'IntTable2
  = GHC.Types.TrNameS GHC.Event.IntTable.$tc'IntTable3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.IntTable.$tc'IntTable :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.IntTable.$tc'IntTable
  = GHC.Types.TyCon
      17952658267866828845##
      12036984593740445577##
      GHC.Event.IntTable.$trModule
      GHC.Event.IntTable.$tc'IntTable2
      1#
      GHC.Event.IntTable.$tc'IntTable1


