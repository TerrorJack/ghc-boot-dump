
==================== Raw Cmm ====================
2018-03-16 16:04:29.095419376 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:29.096545209 UTC

[section ""cstring" . lvl_r9ldZ_bytes" {
     lvl_r9ldZ_bytes:
         I8[] [75,81,117,101,117,101,32,98,97,99,107,32,101,110,100,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,116,104,105,115,32,112,108,97,116,102,111,114,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.099054739 UTC

[section ""data" . GHC.Event.KQueue.new_closure" {
     GHC.Event.KQueue.new_closure:
         const GHC.Event.KQueue.new_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.KQueue.new_entry() //  [R1]
         { []
         }
     {offset
       c9leE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9leF; else goto c9leG;
       c9leF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9leG: // global
           (_c9lez::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9lez::I64 == 0) goto c9leB; else goto c9leA;
       c9leB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9leA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9lez::I64;
           I64[Sp - 24] = block_c9leC_info;
           R2 = lvl_r9ldZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.KQueue.new_info" {
     GHC.Event.KQueue.new_info:
         const GHC.Event.KQueue.new_entry;
         const 0;
         const 4294967317;
         const S9leg_srt;
 },
 _c9leC() //  [R1]
         { []
         }
     {offset
       c9leC: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9leC_info" {
     block_c9leC_info:
         const _c9leC;
         const 0;
         const 4294967326;
         const S9leg_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.104079735 UTC

[section ""data" . GHC.Event.KQueue.available_closure" {
     GHC.Event.KQueue.available_closure:
         const GHC.Types.False_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.106275179 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule4_bytes" {
     GHC.Event.KQueue.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.108620632 UTC

[section ""data" . GHC.Event.KQueue.$trModule3_closure" {
     GHC.Event.KQueue.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.1102789 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule2_bytes" {
     GHC.Event.KQueue.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,75,81,117,101,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.111948277 UTC

[section ""data" . GHC.Event.KQueue.$trModule1_closure" {
     GHC.Event.KQueue.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.113698888 UTC

[section ""data" . GHC.Event.KQueue.$trModule_closure" {
     GHC.Event.KQueue.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.KQueue.$trModule3_closure+1;
         const GHC.Event.KQueue.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.115313082 UTC

[section ""relreadonly" . S9leg_srt" {
     S9leg_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.136127017 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:29.137158356 UTC

[section ""cstring" . lvl_r9ldZ_bytes" {
     lvl_r9ldZ_bytes:
         I8[] [75,81,117,101,117,101,32,98,97,99,107,32,101,110,100,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,116,104,105,115,32,112,108,97,116,102,111,114,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.139965773 UTC

[section ""data" . GHC.Event.KQueue.new_closure" {
     GHC.Event.KQueue.new_closure:
         const GHC.Event.KQueue.new_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.KQueue.new_entry() //  [R1]
         { []
         }
     {offset
       c9lfb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9lfc; else goto c9lfd;
       c9lfc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9lfd: // global
           (_c9lf6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9lf6::I64 == 0) goto c9lf8; else goto c9lf7;
       c9lf8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9lf7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9lf6::I64;
           I64[Sp - 24] = block_c9lf9_info;
           R2 = lvl_r9ldZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.KQueue.new_info" {
     GHC.Event.KQueue.new_info:
         const GHC.Event.KQueue.new_entry;
         const 0;
         const 4294967317;
         const S9lfh_srt;
 },
 _c9lf9() //  [R1]
         { []
         }
     {offset
       c9lf9: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9lf9_info" {
     block_c9lf9_info:
         const _c9lf9;
         const 0;
         const 4294967326;
         const S9lfh_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.147125601 UTC

[section ""data" . GHC.Event.KQueue.available_closure" {
     GHC.Event.KQueue.available_closure:
         const GHC.Types.False_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.149873019 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule4_bytes" {
     GHC.Event.KQueue.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.152069252 UTC

[section ""data" . GHC.Event.KQueue.$trModule3_closure" {
     GHC.Event.KQueue.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.154361695 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule2_bytes" {
     GHC.Event.KQueue.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,75,81,117,101,117,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.156608368 UTC

[section ""data" . GHC.Event.KQueue.$trModule1_closure" {
     GHC.Event.KQueue.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.159024106 UTC

[section ""data" . GHC.Event.KQueue.$trModule_closure" {
     GHC.Event.KQueue.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.KQueue.$trModule3_closure+1;
         const GHC.Event.KQueue.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:29.161407823 UTC

[section ""relreadonly" . S9lfh_srt" {
     S9lfh_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
 }]

