
==================== Tidy Core ====================
2018-03-16 16:04:26.071918634 UTC

Result size of Tidy Core
  = {terms: 1,216, types: 1,039, coercions: 111, joins: 0/3}

-- RHS size: {terms: 15, types: 28, coercions: 0, joins: 0/0}
GHC.Event.Internal.$WBackend [InlPrag=INLINE[2]]
  :: forall a.
     a
     -> (a -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Int)
     -> (a -> Fd -> Event -> Event -> IO Bool)
     -> (a -> Fd -> Event -> IO Bool)
     -> (a -> IO ())
     -> Backend
[GblId[DataConWrapper],
 Arity=5,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9i4k)
                 (dt_a9i8c [Occ=Once] :: a_a9i4k)
                 (dt_a9i8d [Occ=Once]
                    :: a_a9i4k -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Int)
                 (dt_a9i8e [Occ=Once] :: a_a9i4k -> Fd -> Event -> Event -> IO Bool)
                 (dt_a9i8f [Occ=Once] :: a_a9i4k -> Fd -> Event -> IO Bool)
                 (dt_a9i8g [Occ=Once] :: a_a9i4k -> IO ()) ->
                 case dt_a9i8c of dt_X9i8j { __DEFAULT ->
                 GHC.Event.Internal.Backend
                   @ a_a9i4k dt_X9i8j dt_a9i8d dt_a9i8e dt_a9i8f dt_a9i8g
                 }}]
GHC.Event.Internal.$WBackend
  = \ (@ a_a9i4k)
      (dt_a9i8c [Occ=Once] :: a_a9i4k)
      (dt_a9i8d [Occ=Once]
         :: a_a9i4k -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Int)
      (dt_a9i8e [Occ=Once] :: a_a9i4k -> Fd -> Event -> Event -> IO Bool)
      (dt_a9i8f [Occ=Once] :: a_a9i4k -> Fd -> Event -> IO Bool)
      (dt_a9i8g [Occ=Once] :: a_a9i4k -> IO ()) ->
      case dt_a9i8c of dt_X9i8j { __DEFAULT ->
      GHC.Event.Internal.Backend
        @ a_a9i4k dt_X9i8j dt_a9i8d dt_a9i8e dt_a9i8f dt_a9i8g
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.Event.Internal.$WTimeout [InlPrag=INLINE[2]]
  :: Word64 -> Timeout
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (dt_a9i6N [Occ=Once!] :: Word64) ->
                 case dt_a9i6N of { GHC.Word.W64# dt_a9i6O [Occ=Once] ->
                 GHC.Event.Internal.Timeout dt_a9i6O
                 }}]
GHC.Event.Internal.$WTimeout
  = \ (dt_a9i6N [Occ=Once!] :: Word64) ->
      case dt_a9i6N of { GHC.Word.W64# dt_a9i6O [Occ=Once] ->
      GHC.Event.Internal.Timeout dt_a9i6O
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fMonoidEventLifetime1 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$fMonoidEventLifetime1 = GHC.Types.I# 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowTimeout4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$fShowTimeout4 = "Forever"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowTimeout3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowTimeout3
  = unpackCString# GHC.Event.Internal.$fShowTimeout4

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowTimeout2 :: [Char] -> [Char]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Event.Internal.$fShowTimeout2
  = ++ @ Char GHC.Event.Internal.$fShowTimeout3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowTimeout5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$fShowTimeout5 = "Timeout "#

-- RHS size: {terms: 58, types: 34, coercions: 0, joins: 0/2}
GHC.Event.Internal.$fShowTimeout_$cshowsPrec
  :: Int -> Timeout -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 30] 342 180}]
GHC.Event.Internal.$fShowTimeout_$cshowsPrec
  = \ (a_a9i9s :: Int) (ds_d9imT :: Timeout) ->
      case ds_d9imT of {
        Timeout dt_d9inX ->
          case a_a9i9s of { I# x_alMY ->
          let {
            w1_s9itd :: integer-simple-0.1.1.1:GHC.Integer.Type.Integer
            [LclId]
            w1_s9itd
              = let {
                  i#_s9itg [Dmd=<S,U>] :: Int#
                  [LclId]
                  i#_s9itg = word2Int# dt_d9inX } in
                case >=# i#_s9itg 0# of {
                  __DEFAULT ->
                    integer-simple-0.1.1.1:GHC.Integer.Type.wordToInteger dt_d9inX;
                  1# -> integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger i#_s9itg
                } } in
          case >=# x_alMY 11# of {
            __DEFAULT ->
              \ (x1_i7Rxi :: String) ->
                unpackAppendCString#
                  GHC.Event.Internal.$fShowTimeout5
                  (case GHC.Show.$w$cshowsPrec4 11# w1_s9itd x1_i7Rxi of
                   { (# ww3_i9hmN, ww4_i9hmO #) ->
                   GHC.Types.: @ Char ww3_i9hmN ww4_i9hmO
                   });
            1# ->
              \ (x1_i88RR :: String) ->
                GHC.Types.:
                  @ Char
                  GHC.Show.$fShow(,)4
                  (unpackAppendCString#
                     GHC.Event.Internal.$fShowTimeout5
                     (case GHC.Show.$w$cshowsPrec4
                             11# w1_s9itd (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x1_i88RR)
                      of
                      { (# ww3_i9hmN, ww4_i9hmO #) ->
                      GHC.Types.: @ Char ww3_i9hmN ww4_i9hmO
                      }))
          }
          };
        Forever -> GHC.Event.Internal.$fShowTimeout2
      }

-- RHS size: {terms: 37, types: 27, coercions: 0, joins: 0/1}
GHC.Event.Internal.$fShowTimeout_$cshow :: Timeout -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 231 0}]
GHC.Event.Internal.$fShowTimeout_$cshow
  = \ (x_i7Jay :: Timeout) ->
      case x_i7Jay of {
        Timeout dt_d9inX ->
          unpackAppendCString#
            GHC.Event.Internal.$fShowTimeout5
            (let {
               i#_s9itg [Dmd=<S,U>] :: Int#
               [LclId]
               i#_s9itg = word2Int# dt_d9inX } in
             case >=# i#_s9itg 0# of {
               __DEFAULT ->
                 case GHC.Show.$w$cshowsPrec4
                        11#
                        (integer-simple-0.1.1.1:GHC.Integer.Type.wordToInteger dt_d9inX)
                        (GHC.Types.[] @ Char)
                 of
                 { (# ww3_i9hmN, ww4_i9hmO #) ->
                 GHC.Types.: @ Char ww3_i9hmN ww4_i9hmO
                 };
               1# ->
                 case GHC.Show.$w$cshowsPrec4
                        11#
                        (integer-simple-0.1.1.1:GHC.Integer.Type.smallInteger i#_s9itg)
                        (GHC.Types.[] @ Char)
                 of
                 { (# ww3_i9hmN, ww4_i9hmO #) ->
                 GHC.Types.: @ Char ww3_i9hmN ww4_i9hmO
                 }
             });
        Forever -> GHC.Event.Internal.$fShowTimeout3
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowTimeout1 :: Timeout -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Event.Internal.$fShowTimeout1
  = GHC.Event.Internal.$fShowTimeout_$cshowsPrec
      GHC.Event.Internal.$fMonoidEventLifetime1

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowTimeout_$cshowList
  :: [Timeout] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [Timeout])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ Timeout GHC.Event.Internal.$fShowTimeout1 ls_i7JaB s_i7JaC}]
GHC.Event.Internal.$fShowTimeout_$cshowList
  = \ (ls_i7JaB :: [Timeout]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ Timeout GHC.Event.Internal.$fShowTimeout1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowTimeout [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Timeout
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Timeout
                       GHC.Event.Internal.$fShowTimeout_$cshowsPrec
                       GHC.Event.Internal.$fShowTimeout_$cshow
                       GHC.Event.Internal.$fShowTimeout_$cshowList]
GHC.Event.Internal.$fShowTimeout
  = GHC.Show.C:Show
      @ Timeout
      GHC.Event.Internal.$fShowTimeout_$cshowsPrec
      GHC.Event.Internal.$fShowTimeout_$cshow
      GHC.Event.Internal.$fShowTimeout_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEventLifetime2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowEventLifetime2 = "EL "#

-- RHS size: {terms: 41, types: 30, coercions: 2, joins: 0/0}
GHC.Event.Internal.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int# -> EventLifetime -> String -> String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 40 0] 241 30}]
GHC.Event.Internal.$w$cshowsPrec
  = \ (ww_s9iKl :: Int#)
      (w_s9iKh :: EventLifetime)
      (w1_s9iKi :: String) ->
      case >=# ww_s9iKl 11# of {
        __DEFAULT ->
          unpackAppendCString#
            GHC.Event.Internal.$fShowEventLifetime2
            (case w_s9iKh
                  `cast` (GHC.Event.Internal.N:EventLifetime[0]
                          :: (EventLifetime :: *) ~R# (Int :: *))
             of
             { I# ww3_i7NVa ->
             case GHC.Show.$wshowSignedInt 11# ww3_i7NVa w1_s9iKi of
             { (# ww5_i7NVe, ww6_i7NVf #) ->
             GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
             }
             });
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (unpackAppendCString#
               GHC.Event.Internal.$fShowEventLifetime2
               (case w_s9iKh
                     `cast` (GHC.Event.Internal.N:EventLifetime[0]
                             :: (EventLifetime :: *) ~R# (Int :: *))
                of
                { I# ww3_i7NVa ->
                case GHC.Show.$wshowSignedInt
                       11# ww3_i7NVa (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w1_s9iKi)
                of
                { (# ww5_i7NVe, ww6_i7NVf #) ->
                GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
                }
                }))
      }

-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEventLifetime_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> EventLifetime -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9iKg [Occ=Once!] :: Int)
                 (w1_s9iKh [Occ=Once] :: EventLifetime)
                 (w2_s9iKi [Occ=Once] :: String) ->
                 case w_s9iKg of { I# ww1_s9iKl [Occ=Once] ->
                 GHC.Event.Internal.$w$cshowsPrec ww1_s9iKl w1_s9iKh w2_s9iKi
                 }}]
GHC.Event.Internal.$fShowEventLifetime_$cshowsPrec
  = \ (w_s9iKg :: Int)
      (w1_s9iKh :: EventLifetime)
      (w2_s9iKi :: String) ->
      case w_s9iKg of { I# ww1_s9iKl ->
      GHC.Event.Internal.$w$cshowsPrec ww1_s9iKl w1_s9iKh w2_s9iKi
      }

-- RHS size: {terms: 15, types: 14, coercions: 1, joins: 0/0}
GHC.Event.Internal.$fShowEventLifetime_$cshow
  :: EventLifetime -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 100 0}]
GHC.Event.Internal.$fShowEventLifetime_$cshow
  = \ (x_i7Jay :: EventLifetime) ->
      unpackAppendCString#
        GHC.Event.Internal.$fShowEventLifetime2
        (case x_i7Jay
              `cast` (GHC.Event.Internal.N:EventLifetime[0]
                      :: (EventLifetime :: *) ~R# (Int :: *))
         of
         { I# ww3_i7NVa ->
         case GHC.Show.$wshowSignedInt 11# ww3_i7NVa (GHC.Types.[] @ Char)
         of
         { (# ww5_i7NVe, ww6_i7NVf #) ->
         GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
         }
         })

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEventLifetime1
  :: EventLifetime -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
GHC.Event.Internal.$fShowEventLifetime1
  = \ (w_s9iKh :: EventLifetime) (w1_s9iKi :: String) ->
      GHC.Event.Internal.$w$cshowsPrec 0# w_s9iKh w1_s9iKi

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEventLifetime_$cshowList
  :: [EventLifetime] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [EventLifetime])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ EventLifetime
                   GHC.Event.Internal.$fShowEventLifetime1
                   ls_i7JaB
                   s_i7JaC}]
GHC.Event.Internal.$fShowEventLifetime_$cshowList
  = \ (ls_i7JaB :: [EventLifetime]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ EventLifetime
        GHC.Event.Internal.$fShowEventLifetime1
        ls_i7JaB
        s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEventLifetime [InlPrag=NOUSERINLINE CONLIKE]
  :: Show EventLifetime
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: EventLifetime
                       GHC.Event.Internal.$fShowEventLifetime_$cshowsPrec
                       GHC.Event.Internal.$fShowEventLifetime_$cshow
                       GHC.Event.Internal.$fShowEventLifetime_$cshowList]
GHC.Event.Internal.$fShowEventLifetime
  = GHC.Show.C:Show
      @ EventLifetime
      GHC.Event.Internal.$fShowEventLifetime_$cshowsPrec
      GHC.Event.Internal.$fShowEventLifetime_$cshow
      GHC.Event.Internal.$fShowEventLifetime_$cshowList

-- RHS size: {terms: 18, types: 5, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fEqLifetime_$c==
  :: Lifetime -> Lifetime -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9imO [Occ=Once!] :: Lifetime)
                 (ds1_d9imP [Occ=Once*!] :: Lifetime) ->
                 case ds_d9imO of {
                   OneShot ->
                     case ds1_d9imP of {
                       OneShot -> GHC.Types.True;
                       MultiShot -> GHC.Types.False
                     };
                   MultiShot ->
                     case ds1_d9imP of {
                       OneShot -> GHC.Types.False;
                       MultiShot -> GHC.Types.True
                     }
                 }}]
GHC.Event.Internal.$fEqLifetime_$c==
  = \ (ds_d9imO :: Lifetime) (ds1_d9imP :: Lifetime) ->
      case ds_d9imO of {
        OneShot ->
          case ds1_d9imP of {
            OneShot -> GHC.Types.True;
            MultiShot -> GHC.Types.False
          };
        MultiShot ->
          case ds1_d9imP of {
            OneShot -> GHC.Types.False;
            MultiShot -> GHC.Types.True
          }
      }

-- RHS size: {terms: 18, types: 5, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fEqLifetime_$c/= [InlPrag=INLINE (sat-args=2)]
  :: Lifetime -> Lifetime -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: Lifetime)
                 (y_a22c [Occ=Once*!] :: Lifetime) ->
                 case x_a22b of {
                   OneShot ->
                     case y_a22c of {
                       OneShot -> GHC.Types.False;
                       MultiShot -> GHC.Types.True
                     };
                   MultiShot ->
                     case y_a22c of {
                       OneShot -> GHC.Types.True;
                       MultiShot -> GHC.Types.False
                     }
                 }}]
GHC.Event.Internal.$fEqLifetime_$c/=
  = \ (eta_B2 :: Lifetime) (eta1_B1 :: Lifetime) ->
      case eta_B2 of {
        OneShot ->
          case eta1_B1 of {
            OneShot -> GHC.Types.False;
            MultiShot -> GHC.Types.True
          };
        MultiShot ->
          case eta1_B1 of {
            OneShot -> GHC.Types.True;
            MultiShot -> GHC.Types.False
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fEqLifetime [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Lifetime
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Lifetime
                        GHC.Event.Internal.$fEqLifetime_$c==
                        GHC.Event.Internal.$fEqLifetime_$c/=]
GHC.Event.Internal.$fEqLifetime
  = GHC.Classes.C:Eq
      @ Lifetime
      GHC.Event.Internal.$fEqLifetime_$c==
      GHC.Event.Internal.$fEqLifetime_$c/=

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowLifetime5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$fShowLifetime5 = "OneShot"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowLifetime4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowLifetime4
  = unpackCString# GHC.Event.Internal.$fShowLifetime5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowLifetime3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.Internal.$fShowLifetime3 = "MultiShot"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowLifetime2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowLifetime2
  = unpackCString# GHC.Event.Internal.$fShowLifetime3

-- RHS size: {terms: 13, types: 6, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowLifetime_$cshowsPrec
  :: Int -> Lifetime -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (ds1_d9imN [Occ=Once!] :: Lifetime)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds1_d9imN of {
                   OneShot ->
                     augment
                       @ Char
                       (\ (@ b_i7JbU)
                          (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                          (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                          foldr
                            @ Char
                            @ b_i7JbU
                            c_i7JbV
                            n_i7JbW
                            GHC.Event.Internal.$fShowLifetime4)
                       eta_B1;
                   MultiShot ->
                     augment
                       @ Char
                       (\ (@ b_i7JbU)
                          (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                          (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                          foldr
                            @ Char
                            @ b_i7JbU
                            c_i7JbV
                            n_i7JbW
                            GHC.Event.Internal.$fShowLifetime2)
                       eta_B1
                 }}]
GHC.Event.Internal.$fShowLifetime_$cshowsPrec
  = \ _ [Occ=Dead] (ds1_d9imN :: Lifetime) (eta_B1 :: String) ->
      case ds1_d9imN of {
        OneShot -> ++ @ Char GHC.Event.Internal.$fShowLifetime4 eta_B1;
        MultiShot -> ++ @ Char GHC.Event.Internal.$fShowLifetime2 eta_B1
      }

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowLifetime_$cshow :: Lifetime -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: Lifetime) ->
                 case x_i7Jay of {
                   OneShot -> GHC.Event.Internal.$fShowLifetime4;
                   MultiShot -> GHC.Event.Internal.$fShowLifetime2
                 }}]
GHC.Event.Internal.$fShowLifetime_$cshow
  = \ (x_i7Jay :: Lifetime) ->
      case x_i7Jay of {
        OneShot -> GHC.Event.Internal.$fShowLifetime4;
        MultiShot -> GHC.Event.Internal.$fShowLifetime2
      }

-- RHS size: {terms: 12, types: 5, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowLifetime1 :: Lifetime -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9imN [Occ=Once!] :: Lifetime)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds_d9imN of {
                   OneShot ->
                     augment
                       @ Char
                       (\ (@ b_i7JbU)
                          (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                          (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                          foldr
                            @ Char
                            @ b_i7JbU
                            c_i7JbV
                            n_i7JbW
                            GHC.Event.Internal.$fShowLifetime4)
                       eta_B1;
                   MultiShot ->
                     augment
                       @ Char
                       (\ (@ b_i7JbU)
                          (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                          (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                          foldr
                            @ Char
                            @ b_i7JbU
                            c_i7JbV
                            n_i7JbW
                            GHC.Event.Internal.$fShowLifetime2)
                       eta_B1
                 }}]
GHC.Event.Internal.$fShowLifetime1
  = \ (ds_d9imN :: Lifetime) (eta_B1 :: String) ->
      case ds_d9imN of {
        OneShot -> ++ @ Char GHC.Event.Internal.$fShowLifetime4 eta_B1;
        MultiShot -> ++ @ Char GHC.Event.Internal.$fShowLifetime2 eta_B1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowLifetime_$cshowList
  :: [Lifetime] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [Lifetime])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ Lifetime GHC.Event.Internal.$fShowLifetime1 ls_i7JaB s_i7JaC}]
GHC.Event.Internal.$fShowLifetime_$cshowList
  = \ (ls_i7JaB :: [Lifetime]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ Lifetime GHC.Event.Internal.$fShowLifetime1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowLifetime [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Lifetime
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Lifetime
                       GHC.Event.Internal.$fShowLifetime_$cshowsPrec
                       GHC.Event.Internal.$fShowLifetime_$cshow
                       GHC.Event.Internal.$fShowLifetime_$cshowList]
GHC.Event.Internal.$fShowLifetime
  = GHC.Show.C:Show
      @ Lifetime
      GHC.Event.Internal.$fShowLifetime_$cshowsPrec
      GHC.Event.Internal.$fShowLifetime_$cshow
      GHC.Event.Internal.$fShowLifetime_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
_beDelete :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
_beDelete = GHC.Tuple.()

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
_beModifyFdOnce :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
_beModifyFdOnce = GHC.Tuple.()

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
_beModifyFd :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
_beModifyFd = GHC.Tuple.()

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
_bePoll :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
_bePoll = GHC.Tuple.()

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
_beState :: ()
[GblId[[RecSel(naughty)]],
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Tuple.()}]
_beState = GHC.Tuple.()

-- RHS size: {terms: 1, types: 0, coercions: 2, joins: 0/0}
evtNothing [InlPrag=INLINE (sat-args=0)] :: Event
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=False)
         Tmpl= (GHC.Types.I# 0#)
               `cast` (Sym (GHC.Event.Internal.N:Event[0])
                       :: (Int :: *) ~R# (Event :: *))}]
evtNothing
  = GHC.Event.Internal.$fMonoidEventLifetime1
    `cast` (Sym (GHC.Event.Internal.N:Event[0])
            :: (Int :: *) ~R# (Event :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
evtRead1_r9iWk :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
evtRead1_r9iWk = GHC.Types.I# 1#

-- RHS size: {terms: 1, types: 0, coercions: 2, joins: 0/0}
evtRead [InlPrag=INLINE (sat-args=0)] :: Event
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=False)
         Tmpl= (GHC.Types.I# 1#)
               `cast` (Sym (GHC.Event.Internal.N:Event[0])
                       :: (Int :: *) ~R# (Event :: *))}]
evtRead
  = evtRead1_r9iWk
    `cast` (Sym (GHC.Event.Internal.N:Event[0])
            :: (Int :: *) ~R# (Event :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
evtWrite1_r9iWl :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
evtWrite1_r9iWl = GHC.Types.I# 2#

-- RHS size: {terms: 1, types: 0, coercions: 2, joins: 0/0}
evtWrite [InlPrag=INLINE (sat-args=0)] :: Event
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=False)
         Tmpl= (GHC.Types.I# 2#)
               `cast` (Sym (GHC.Event.Internal.N:Event[0])
                       :: (Int :: *) ~R# (Event :: *))}]
evtWrite
  = evtWrite1_r9iWl
    `cast` (Sym (GHC.Event.Internal.N:Event[0])
            :: (Int :: *) ~R# (Event :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
evtClose1_r9iWm :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
evtClose1_r9iWm = GHC.Types.I# 4#

-- RHS size: {terms: 1, types: 0, coercions: 2, joins: 0/0}
evtClose [InlPrag=INLINE (sat-args=0)] :: Event
[GblId,
 Str=m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=False)
         Tmpl= (GHC.Types.I# 4#)
               `cast` (Sym (GHC.Event.Internal.N:Event[0])
                       :: (Int :: *) ~R# (Event :: *))}]
evtClose
  = evtClose1_r9iWm
    `cast` (Sym (GHC.Event.Internal.N:Event[0])
            :: (Int :: *) ~R# (Event :: *))

-- RHS size: {terms: 8, types: 3, coercions: 0, joins: 0/0}
elSupremum [InlPrag=INLINE (sat-args=2)]
  :: Lifetime -> Lifetime -> Lifetime
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (ds_d9im9 [Occ=Once!] :: Lifetime)
                 (ds1_d9ima [Occ=Once] :: Lifetime) ->
                 case ds_d9im9 of {
                   OneShot -> ds1_d9ima;
                   MultiShot -> GHC.Event.Internal.MultiShot
                 }}]
elSupremum
  = \ (ds_d9im9 :: Lifetime) (ds1_d9ima :: Lifetime) ->
      case ds_d9im9 of {
        OneShot -> ds1_d9ima;
        MultiShot -> GHC.Event.Internal.MultiShot
      }

Rec {
-- RHS size: {terms: 15, types: 9, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fSemigroupLifetime_go [Occ=LoopBreaker]
  :: Lifetime -> [Lifetime] -> Lifetime
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []]
GHC.Event.Internal.$fSemigroupLifetime_go
  = \ (b_i9ine :: Lifetime) (ds1_i9inf :: [Lifetime]) ->
      case ds1_i9inf of {
        [] -> b_i9ine;
        : c_i9inn cs_i9ino ->
          case b_i9ine of {
            OneShot ->
              GHC.Event.Internal.$fSemigroupLifetime_go c_i9inn cs_i9ino;
            MultiShot -> GHC.Event.Internal.MultiShot
          }
      }
end Rec }

-- RHS size: {terms: 7, types: 7, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fSemigroupLifetime_$csconcat
  :: NonEmpty Lifetime -> Lifetime
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_i9in9 [Occ=Once!] :: NonEmpty Lifetime) ->
                 case ds_i9in9 of { :| a1_i9ing [Occ=Once] as_i9inh [Occ=Once] ->
                 GHC.Event.Internal.$fSemigroupLifetime_go a1_i9ing as_i9inh
                 }}]
GHC.Event.Internal.$fSemigroupLifetime_$csconcat
  = \ (ds_i9in9 :: NonEmpty Lifetime) ->
      case ds_i9in9 of { :| a1_i9ing as_i9inh ->
      GHC.Event.Internal.$fSemigroupLifetime_go a1_i9ing as_i9inh
      }

Rec {
-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fMonoidLifetime_go [Occ=LoopBreaker]
  :: [Lifetime] -> Lifetime
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
GHC.Event.Internal.$fMonoidLifetime_go
  = \ (ds_i7Jck :: [Lifetime]) ->
      case ds_i7Jck of {
        [] -> GHC.Event.Internal.OneShot;
        : y_i7Jcp ys_i7Jcq ->
          case y_i7Jcp of {
            OneShot -> GHC.Event.Internal.$fMonoidLifetime_go ys_i7Jcq;
            MultiShot -> GHC.Event.Internal.MultiShot
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fSemigroupLifetime [InlPrag=NOUSERINLINE CONLIKE]
  :: Semigroup Lifetime
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Semigroup TYPE: Lifetime
                            elSupremum
                            GHC.Event.Internal.$fSemigroupLifetime_$csconcat
                            GHC.Event.Internal.$fSemigroupLifetime_$cstimes]
GHC.Event.Internal.$fSemigroupLifetime
  = GHC.Base.C:Semigroup
      @ Lifetime
      elSupremum
      GHC.Event.Internal.$fSemigroupLifetime_$csconcat
      GHC.Event.Internal.$fSemigroupLifetime_$cstimes

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fMonoidLifetime [InlPrag=NOUSERINLINE CONLIKE]
  :: Monoid Lifetime
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monoid TYPE: Lifetime
                         GHC.Event.Internal.$fSemigroupLifetime
                         GHC.Event.Internal.OneShot
                         elSupremum
                         GHC.Event.Internal.$fMonoidLifetime_go]
GHC.Event.Internal.$fMonoidLifetime
  = GHC.Base.C:Monoid
      @ Lifetime
      GHC.Event.Internal.$fSemigroupLifetime
      GHC.Event.Internal.OneShot
      elSupremum
      GHC.Event.Internal.$fMonoidLifetime_go

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fSemigroupLifetime_$cstimes [Occ=LoopBreaker]
  :: forall b. GHC.Real.Integral b => b -> Lifetime -> Lifetime
[GblId,
 Arity=3,
 Str=<L,U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)>,
 Unf=OtherCon []]
GHC.Event.Internal.$fSemigroupLifetime_$cstimes
  = \ (@ b_a9ihI) ($dIntegral_a9ihK :: GHC.Real.Integral b_a9ihI) ->
      stimesMonoid
        @ b_a9ihI
        @ Lifetime
        $dIntegral_a9ihK
        GHC.Event.Internal.$fMonoidLifetime
end Rec }

-- RHS size: {terms: 12, types: 27, coercions: 0, joins: 0/0}
backend [InlPrag=INLINE (sat-args=5)]
  :: forall a.
     (a -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Int)
     -> (a -> Fd -> Event -> Event -> IO Bool)
     -> (a -> Fd -> Event -> IO Bool)
     -> (a -> IO ())
     -> a
     -> Backend
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=5,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ a_a9id7)
                 (bPoll_a9i4C [Occ=Once]
                    :: a_a9id7 -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Int)
                 (bModifyFd_a9i4D [Occ=Once]
                    :: a_a9id7 -> Fd -> Event -> Event -> IO Bool)
                 (bModifyFdOnce_a9i4E [Occ=Once]
                    :: a_a9id7 -> Fd -> Event -> IO Bool)
                 (bDelete_a9i4F [Occ=Once] :: a_a9id7 -> IO ())
                 (state_a9i4G [Occ=Once] :: a_a9id7) ->
                 GHC.Event.Internal.$WBackend
                   @ a_a9id7
                   state_a9i4G
                   bPoll_a9i4C
                   bModifyFd_a9i4D
                   bModifyFdOnce_a9i4E
                   bDelete_a9i4F}]
backend
  = \ (@ a_a9id7)
      (bPoll_a9i4C
         :: a_a9id7 -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Int)
      (bModifyFd_a9i4D :: a_a9id7 -> Fd -> Event -> Event -> IO Bool)
      (bModifyFdOnce_a9i4E :: a_a9id7 -> Fd -> Event -> IO Bool)
      (bDelete_a9i4F :: a_a9id7 -> IO ())
      (state_a9i4G :: a_a9id7) ->
      GHC.Event.Internal.$WBackend
        @ a_a9id7
        state_a9i4G
        bPoll_a9i4C
        bModifyFd_a9i4D
        bModifyFdOnce_a9i4E
        bDelete_a9i4F

-- RHS size: {terms: 6, types: 28, coercions: 0, joins: 0/0}
poll [InlPrag=INLINE (sat-args=1)]
  :: Backend -> Maybe Timeout -> (Fd -> Event -> IO ()) -> IO Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
         Tmpl= \ (ds_d9ilB [Occ=Once!] :: Backend) ->
                 case ds_d9ilB of
                 { Backend @ a_a9id6 bState_a9i4H [Occ=Once] bPoll_a9i4I [Occ=Once!]
                           _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 bPoll_a9i4I bState_a9i4H
                 }}]
poll
  = \ (ds_d9ilB :: Backend) ->
      case ds_d9ilB of
      { Backend @ a_a9id6 bState_a9i4H bPoll_a9i4I ds1_d9ilO ds2_d9ilP
                ds3_d9ilQ ->
      bPoll_a9i4I bState_a9i4H
      }

-- RHS size: {terms: 6, types: 28, coercions: 0, joins: 0/0}
modifyFd [InlPrag=INLINE (sat-args=1)]
  :: Backend -> Fd -> Event -> Event -> IO Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
         Tmpl= \ (ds_d9ilk [Occ=Once!] :: Backend) ->
                 case ds_d9ilk of
                 { Backend @ a_a9id4 bState_a9i4J [Occ=Once] _ [Occ=Dead]
                           bModifyFd_a9i4K [Occ=Once!] _ [Occ=Dead] _ [Occ=Dead] ->
                 bModifyFd_a9i4K bState_a9i4J
                 }}]
modifyFd
  = \ (ds_d9ilk :: Backend) ->
      case ds_d9ilk of
      { Backend @ a_a9id4 bState_a9i4J ds1_d9ilx bModifyFd_a9i4K
                ds2_d9ily ds3_d9ilz ->
      bModifyFd_a9i4K bState_a9i4J
      }

-- RHS size: {terms: 6, types: 28, coercions: 0, joins: 0/0}
modifyFdOnce [InlPrag=INLINE (sat-args=1)]
  :: Backend -> Fd -> Event -> IO Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
         Tmpl= \ (ds_d9il3 [Occ=Once!] :: Backend) ->
                 case ds_d9il3 of
                 { Backend @ a_a9id2 bState_a9i4L [Occ=Once] _ [Occ=Dead]
                           _ [Occ=Dead] bModifyFdOnce_a9i4M [Occ=Once!] _ [Occ=Dead] ->
                 bModifyFdOnce_a9i4M bState_a9i4L
                 }}]
modifyFdOnce
  = \ (ds_d9il3 :: Backend) ->
      case ds_d9il3 of
      { Backend @ a_a9id2 bState_a9i4L ds1_d9ilg ds2_d9ilh
                bModifyFdOnce_a9i4M ds3_d9ili ->
      bModifyFdOnce_a9i4M bState_a9i4L
      }

-- RHS size: {terms: 6, types: 28, coercions: 0, joins: 0/0}
delete [InlPrag=INLINE (sat-args=1)] :: Backend -> IO ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
         Tmpl= \ (ds_d9ikM [Occ=Once!] :: Backend) ->
                 case ds_d9ikM of
                 { Backend @ a_a9id0 bState_a9i4N [Occ=Once] _ [Occ=Dead]
                           _ [Occ=Dead] _ [Occ=Dead] bDelete_a9i4O [Occ=Once!] ->
                 bDelete_a9i4O bState_a9i4N
                 }}]
delete
  = \ (ds_d9ikM :: Backend) ->
      case ds_d9ikM of
      { Backend @ a_a9id0 bState_a9i4N ds1_d9ikZ ds2_d9il0 ds3_d9il1
                bDelete_a9i4O ->
      bDelete_a9i4O bState_a9i4N
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.throwErrnoIfMinus1NoRetry2
  :: integer-simple-0.1.1.1:GHC.Integer.Type.Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
GHC.Event.Internal.throwErrnoIfMinus1NoRetry2 = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.throwErrnoIfMinus1NoRetry3
  :: integer-simple-0.1.1.1:GHC.Integer.Type.Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
GHC.Event.Internal.throwErrnoIfMinus1NoRetry3 = 1

-- RHS size: {terms: 39, types: 47, coercions: 2, joins: 0/0}
GHC.Event.Internal.throwErrnoIfMinus1NoRetry1
  :: forall a.
     (Eq a, Num a) =>
     String -> IO a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,C(U))><L,U><C(S),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 90 0 60 0] 221 30}]
GHC.Event.Internal.throwErrnoIfMinus1NoRetry1
  = \ (@ a_a9icv)
      ($dEq_a9icx :: Eq a_a9icv)
      ($dNum_a9icy :: Num a_a9icv)
      (loc_a9i4P :: String)
      (f_a9i4Q :: IO a_a9icv)
      (s_i7IAv :: State# RealWorld) ->
      case (f_a9i4Q
            `cast` (GHC.Types.N:IO[0] <a_a9icv>_R
                    :: (IO a_a9icv :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a9icv #) :: *)))
             s_i7IAv
      of ds1_i7IAw
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ==
             @ a_a9icv
             $dEq_a9icx
             ipv1_i7IAz
             (negate
                @ a_a9icv
                $dNum_a9icy
                (fromInteger
                   @ a_a9icv
                   $dNum_a9icy
                   GHC.Event.Internal.throwErrnoIfMinus1NoRetry3))
      of {
        False -> ds1_i7IAw;
        True ->
          case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                 ipv_i7IAy
          of
          { (# ds_d924s, ds2_d924r #) ->
          case narrow32Int# ds2_d924r of {
            __DEFAULT ->
              Foreign.C.Error.throwErrno1 @ a_a9icv loc_a9i4P ds_d924s;
            4# ->
              (# ds_d924s,
                 fromInteger
                   @ a_a9icv
                   $dNum_a9icy
                   GHC.Event.Internal.throwErrnoIfMinus1NoRetry2 #)
          }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
throwErrnoIfMinus1NoRetry
  :: forall a. (Eq a, Num a) => String -> IO a -> IO a
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A)><L,U(A,A,A,1*C1(U),A,A,C(U))><L,U><C(S),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.Internal.throwErrnoIfMinus1NoRetry1
               `cast` (forall (a :: <*>_N).
                       <Eq a>_R
                       ->_R <Num a>_R
                       ->_R <String>_R
                       ->_R <IO a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           (Eq a, Num a) =>
                           String
                           -> IO a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. (Eq a, Num a) => String -> IO a -> IO a :: *))}]
throwErrnoIfMinus1NoRetry
  = GHC.Event.Internal.throwErrnoIfMinus1NoRetry1
    `cast` (forall (a :: <*>_N).
            <Eq a>_R
            ->_R <Num a>_R
            ->_R <String>_R
            ->_R <IO a>_R
            ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                (Eq a, Num a) =>
                String
                -> IO a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. (Eq a, Num a) => String -> IO a -> IO a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$trModule3
  = GHC.Types.TrNameS GHC.Event.Internal.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Event.Internal.$trModule2 = "GHC.Event.Internal"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$trModule1
  = GHC.Types.TrNameS GHC.Event.Internal.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Event.Internal.$trModule
  = GHC.Types.Module
      GHC.Event.Internal.$trModule3 GHC.Event.Internal.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r9iWn :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r9iWn
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord64 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r9iWo :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r9iWo
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcBool (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r9iWp :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r9iWp
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r9iWq :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_r9iWq
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc() (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r9iWr :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_r9iWr
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcFd (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep5_r9iWs :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep5_r9iWs
  = GHC.Types.: @ KindRep $krep1_r9iWo (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_r9iWt :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep6_r9iWt
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep5_r9iWs

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_r9iWu :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_r9iWu
  = GHC.Types.: @ KindRep $krep2_r9iWp (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r9iWv :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep8_r9iWv
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep7_r9iWu

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep9_r9iWw :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep9_r9iWw
  = GHC.Types.: @ KindRep $krep3_r9iWq (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r9iWx :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_r9iWx
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep9_r9iWw

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep11_r9iWy :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep11_r9iWy = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r9iWz :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep12_r9iWz = GHC.Types.KindRepFun $krep11_r9iWy $krep10_r9iWx

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcEvent2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$tcEvent2 = "Event"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcEvent1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tcEvent1
  = GHC.Types.TrNameS GHC.Event.Internal.$tcEvent2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcEvent :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tcEvent
  = GHC.Types.TyCon
      6453162546660085965##
      4509047211634842293##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tcEvent1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep13_r9iWA :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep13_r9iWA
  = GHC.Types.KindRepTyConApp
      GHC.Event.Internal.$tcEvent (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r9iWB :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep14_r9iWB = GHC.Types.KindRepFun $krep13_r9iWA $krep10_r9iWx

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_r9iWC :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep15_r9iWC = GHC.Types.KindRepFun $krep4_r9iWr $krep14_r9iWB

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_r9iWD :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep16_r9iWD = GHC.Types.KindRepFun $krep15_r9iWC $krep8_r9iWv

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_r9iWE :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep17_r9iWE = GHC.Types.KindRepFun $krep13_r9iWA $krep6_r9iWt

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_r9iWF :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep18_r9iWF = GHC.Types.KindRepFun $krep13_r9iWA $krep17_r9iWE

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_r9iWG :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep19_r9iWG = GHC.Types.KindRepFun $krep4_r9iWr $krep18_r9iWF

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_r9iWH :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep20_r9iWH = GHC.Types.KindRepFun $krep11_r9iWy $krep19_r9iWG

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_r9iWI :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep21_r9iWI = GHC.Types.KindRepFun $krep4_r9iWr $krep17_r9iWE

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_r9iWJ :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep22_r9iWJ = GHC.Types.KindRepFun $krep11_r9iWy $krep21_r9iWI

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Event1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.Internal.$tc'Event1
  = GHC.Types.KindRepFun $krep2_r9iWp $krep13_r9iWA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Event3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$tc'Event3 = "'Event"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Event2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tc'Event2
  = GHC.Types.TrNameS GHC.Event.Internal.$tc'Event3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Event :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tc'Event
  = GHC.Types.TyCon
      3843507504600839845##
      12172955723408562945##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tc'Event2
      0#
      GHC.Event.Internal.$tc'Event1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcLifetime2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$tcLifetime2 = "Lifetime"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcLifetime1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tcLifetime1
  = GHC.Types.TrNameS GHC.Event.Internal.$tcLifetime2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcLifetime :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tcLifetime
  = GHC.Types.TyCon
      16879554565198773712##
      8198822807138459060##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tcLifetime1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'MultiShot1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.Event.Internal.$tc'MultiShot1
  = GHC.Types.KindRepTyConApp
      GHC.Event.Internal.$tcLifetime (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'OneShot2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$tc'OneShot2 = "'OneShot"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'OneShot1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tc'OneShot1
  = GHC.Types.TrNameS GHC.Event.Internal.$tc'OneShot2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'OneShot :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tc'OneShot
  = GHC.Types.TyCon
      4428239562170783460##
      11248279118174204528##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tc'OneShot1
      0#
      GHC.Event.Internal.$tc'MultiShot1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'MultiShot3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.Internal.$tc'MultiShot3 = "'MultiShot"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'MultiShot2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tc'MultiShot2
  = GHC.Types.TrNameS GHC.Event.Internal.$tc'MultiShot3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'MultiShot :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tc'MultiShot
  = GHC.Types.TyCon
      963080519453727549##
      5499435804578671723##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tc'MultiShot2
      0#
      GHC.Event.Internal.$tc'MultiShot1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcEventLifetime2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Event.Internal.$tcEventLifetime2 = "EventLifetime"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcEventLifetime1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tcEventLifetime1
  = GHC.Types.TrNameS GHC.Event.Internal.$tcEventLifetime2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcEventLifetime :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tcEventLifetime
  = GHC.Types.TyCon
      11472987326402547198##
      14676184191233842558##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tcEventLifetime1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep23_r9iWK :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep23_r9iWK
  = GHC.Types.KindRepTyConApp
      GHC.Event.Internal.$tcEventLifetime (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'EL1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.Internal.$tc'EL1
  = GHC.Types.KindRepFun $krep2_r9iWp $krep23_r9iWK

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'EL3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$tc'EL3 = "'EL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'EL2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tc'EL2
  = GHC.Types.TrNameS GHC.Event.Internal.$tc'EL3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'EL :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tc'EL
  = GHC.Types.TyCon
      13328424765260461560##
      17004947518967325218##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tc'EL2
      0#
      GHC.Event.Internal.$tc'EL1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcTimeout2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$tcTimeout2 = "Timeout"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcTimeout1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tcTimeout1
  = GHC.Types.TrNameS GHC.Event.Internal.$tcTimeout2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcTimeout :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tcTimeout
  = GHC.Types.TyCon
      3071157695468345159##
      2371669836431867052##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tcTimeout1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Forever1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.Event.Internal.$tc'Forever1
  = GHC.Types.KindRepTyConApp
      GHC.Event.Internal.$tcTimeout (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Forever3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$tc'Forever3 = "'Forever"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Forever2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tc'Forever2
  = GHC.Types.TrNameS GHC.Event.Internal.$tc'Forever3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Forever :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tc'Forever
  = GHC.Types.TyCon
      15890326801882711521##
      6940845280791152844##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tc'Forever2
      0#
      GHC.Event.Internal.$tc'Forever1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Timeout1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.Internal.$tc'Timeout1
  = GHC.Types.KindRepFun $krep_r9iWn GHC.Event.Internal.$tc'Forever1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Timeout3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$tc'Timeout3 = "'Timeout"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Timeout2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tc'Timeout2
  = GHC.Types.TrNameS GHC.Event.Internal.$tc'Timeout3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Timeout :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tc'Timeout
  = GHC.Types.TyCon
      11507111740173521793##
      14582130137848061687##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tc'Timeout2
      0#
      GHC.Event.Internal.$tc'Timeout1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep24_r9iWL :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep24_r9iWL
  = GHC.Types.:
      @ KindRep GHC.Event.Internal.$tc'Forever1 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_r9iWM :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep25_r9iWM
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep24_r9iWL

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep26_r9iWN :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep26_r9iWN = GHC.Types.KindRepFun $krep25_r9iWM $krep16_r9iWD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep27_r9iWO :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep27_r9iWO = GHC.Types.KindRepFun $krep11_r9iWy $krep26_r9iWN

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcBackend2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$tcBackend2 = "Backend"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcBackend1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tcBackend1
  = GHC.Types.TrNameS GHC.Event.Internal.$tcBackend2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tcBackend :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tcBackend
  = GHC.Types.TyCon
      5241936179624485302##
      3407160178235461245##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tcBackend1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep28_r9iWP :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep28_r9iWP
  = GHC.Types.KindRepTyConApp
      GHC.Event.Internal.$tcBackend (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep29_r9iWQ :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep29_r9iWQ = GHC.Types.KindRepFun $krep12_r9iWz $krep28_r9iWP

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep30_r9iWR :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep30_r9iWR = GHC.Types.KindRepFun $krep22_r9iWJ $krep29_r9iWQ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep31_r9iWS :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep31_r9iWS = GHC.Types.KindRepFun $krep20_r9iWH $krep30_r9iWR

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep32_r9iWT :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep32_r9iWT = GHC.Types.KindRepFun $krep27_r9iWO $krep31_r9iWS

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Backend1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.Internal.$tc'Backend1
  = GHC.Types.KindRepFun $krep11_r9iWy $krep32_r9iWT

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Backend3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$tc'Backend3 = "'Backend"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Backend2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$tc'Backend2
  = GHC.Types.TrNameS GHC.Event.Internal.$tc'Backend3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$tc'Backend :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.Internal.$tc'Backend
  = GHC.Types.TyCon
      2097061961478251755##
      1358985482759746540##
      GHC.Event.Internal.$trModule
      GHC.Event.Internal.$tc'Backend2
      1#
      GHC.Event.Internal.$tc'Backend1

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
GHC.Event.Internal.$fEqEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq Event
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Event
                        eqInt
                        `cast` (Sym (GHC.Event.Internal.N:Event[0])
                                ->_R Sym (GHC.Event.Internal.N:Event[0])
                                ->_R <Bool>_R
                                :: (Int -> Int -> Bool :: *) ~R# (Event -> Event -> Bool :: *))
                        neInt
                        `cast` (Sym (GHC.Event.Internal.N:Event[0])
                                ->_R Sym (GHC.Event.Internal.N:Event[0])
                                ->_R <Bool>_R
                                :: (Int -> Int -> Bool :: *) ~R# (Event -> Event -> Bool :: *))]
GHC.Event.Internal.$fEqEvent
  = GHC.Classes.C:Eq
      @ Event
      (eqInt
       `cast` (Sym (GHC.Event.Internal.N:Event[0])
               ->_R Sym (GHC.Event.Internal.N:Event[0])
               ->_R <Bool>_R
               :: (Int -> Int -> Bool :: *) ~R# (Event -> Event -> Bool :: *)))
      (neInt
       `cast` (Sym (GHC.Event.Internal.N:Event[0])
               ->_R Sym (GHC.Event.Internal.N:Event[0])
               ->_R <Bool>_R
               :: (Int -> Int -> Bool :: *) ~R# (Event -> Event -> Bool :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
GHC.Event.Internal.$fEqEventLifetime [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq EventLifetime
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: EventLifetime
                        eqInt
                        `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
                                ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
                                ->_R <Bool>_R
                                :: (Int -> Int -> Bool :: *)
                                   ~R# (EventLifetime -> EventLifetime -> Bool :: *))
                        neInt
                        `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
                                ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
                                ->_R <Bool>_R
                                :: (Int -> Int -> Bool :: *)
                                   ~R# (EventLifetime -> EventLifetime -> Bool :: *))]
GHC.Event.Internal.$fEqEventLifetime
  = GHC.Classes.C:Eq
      @ EventLifetime
      (eqInt
       `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
               ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
               ->_R <Bool>_R
               :: (Int -> Int -> Bool :: *)
                  ~R# (EventLifetime -> EventLifetime -> Bool :: *)))
      (neInt
       `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
               ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
               ->_R <Bool>_R
               :: (Int -> Int -> Bool :: *)
                  ~R# (EventLifetime -> EventLifetime -> Bool :: *)))

-- RHS size: {terms: 8, types: 3, coercions: 1, joins: 0/0}
elEvent1_r9iWU :: EventLifetime -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []]
elEvent1_r9iWU
  = \ (ds_d9ilT :: EventLifetime) ->
      case ds_d9ilT
           `cast` (GHC.Event.Internal.N:EventLifetime[0]
                   :: (EventLifetime :: *) ~R# (Int :: *))
      of
      { I# x#_i7Sgh ->
      GHC.Types.I# (andI# x#_i7Sgh 7#)
      }

-- RHS size: {terms: 1, types: 0, coercions: 4, joins: 0/0}
elEvent [InlPrag=INLINE (sat-args=1)] :: EventLifetime -> Event
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
         Tmpl= (\ (ds_X9iq0 [Occ=Once] :: EventLifetime) ->
                  case ds_X9iq0
                       `cast` (GHC.Event.Internal.N:EventLifetime[0]
                               :: (EventLifetime :: *) ~R# (Int :: *))
                  of
                  { I# x#_i7Sgh [Occ=Once] ->
                  GHC.Types.I# (andI# x#_i7Sgh 7#)
                  })
               `cast` (<EventLifetime>_R ->_R Sym (GHC.Event.Internal.N:Event[0])
                       :: (EventLifetime -> Int :: *) ~R# (EventLifetime -> Event :: *))}]
elEvent
  = elEvent1_r9iWU
    `cast` (<EventLifetime>_R ->_R Sym (GHC.Event.Internal.N:Event[0])
            :: (EventLifetime -> Int :: *) ~R# (EventLifetime -> Event :: *))

Rec {
-- RHS size: {terms: 18, types: 11, coercions: 1, joins: 0/0}
GHC.Event.Internal.$wgo2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: Int# -> [EventLifetime] -> Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,1*U>, Unf=OtherCon []]
GHC.Event.Internal.$wgo2
  = \ (ww_s9iKE :: Int#) (w_s9iKB :: [EventLifetime]) ->
      case w_s9iKB of {
        [] -> ww_s9iKE;
        : c_i9inn cs_i9ino ->
          case c_i9inn
               `cast` (GHC.Event.Internal.N:EventLifetime[0]
                       :: (EventLifetime :: *) ~R# (Int :: *))
          of
          { I# ww2_X9iQb ->
          case GHC.Event.Internal.$wgo2 ww2_X9iQb cs_i9ino of ww3_s9iKI
          { __DEFAULT ->
          orI# ww_s9iKE ww3_s9iKI
          }
          }
      }
end Rec }

-- RHS size: {terms: 12, types: 6, coercions: 3, joins: 0/0}
GHC.Event.Internal.$fSemigroupEventLifetime_go [InlPrag=NOUSERINLINE[0]]
  :: EventLifetime -> [EventLifetime] -> EventLifetime
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9iKA [Occ=Once] :: EventLifetime)
                 (w1_s9iKB [Occ=Once] :: [EventLifetime]) ->
                 case w_s9iKA
                      `cast` (GHC.Event.Internal.N:EventLifetime[0]
                              :: (EventLifetime :: *) ~R# (Int :: *))
                 of
                 { I# ww1_s9iKE [Occ=Once] ->
                 case GHC.Event.Internal.$wgo2 ww1_s9iKE w1_s9iKB of ww2_s9iKI
                 { __DEFAULT ->
                 (GHC.Types.I# ww2_s9iKI)
                 `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
                         :: (Int :: *) ~R# (EventLifetime :: *))
                 }
                 }}]
GHC.Event.Internal.$fSemigroupEventLifetime_go
  = \ (w_s9iKA :: EventLifetime) (w1_s9iKB :: [EventLifetime]) ->
      case w_s9iKA
           `cast` (GHC.Event.Internal.N:EventLifetime[0]
                   :: (EventLifetime :: *) ~R# (Int :: *))
      of
      { I# ww1_s9iKE ->
      case GHC.Event.Internal.$wgo2 ww1_s9iKE w1_s9iKB of ww2_s9iKI
      { __DEFAULT ->
      (GHC.Types.I# ww2_s9iKI)
      `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
              :: (Int :: *) ~R# (EventLifetime :: *))
      }
      }

-- RHS size: {terms: 7, types: 7, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fSemigroupEventLifetime_$csconcat
  :: NonEmpty EventLifetime -> EventLifetime
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S),1*U(1*U(U),1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_i9in9 [Occ=Once!] :: NonEmpty EventLifetime) ->
                 case ds_i9in9 of { :| a1_i9ing [Occ=Once] as_i9inh [Occ=Once] ->
                 GHC.Event.Internal.$fSemigroupEventLifetime_go a1_i9ing as_i9inh
                 }}]
GHC.Event.Internal.$fSemigroupEventLifetime_$csconcat
  = \ (ds_i9in9 :: NonEmpty EventLifetime) ->
      case ds_i9in9 of { :| a1_i9ing as_i9inh ->
      GHC.Event.Internal.$fSemigroupEventLifetime_go a1_i9ing as_i9inh
      }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 8, joins: 0/0}
GHC.Event.Internal.$fSemigroupEventLifetime [InlPrag=NOUSERINLINE CONLIKE]
  :: Semigroup EventLifetime
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Semigroup TYPE: EventLifetime
                            Data.Bits.$fBitsInt_$c.|.
                            `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
                                    ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
                                    ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
                                    :: (Int -> Int -> Int :: *)
                                       ~R# (EventLifetime -> EventLifetime -> EventLifetime :: *))
                            GHC.Event.Internal.$fSemigroupEventLifetime_$csconcat
                            GHC.Event.Internal.$fSemigroupEventLifetime_$cstimes]
GHC.Event.Internal.$fSemigroupEventLifetime
  = GHC.Base.C:Semigroup
      @ EventLifetime
      (Data.Bits.$fBitsInt_$c.|.
       `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
               ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
               ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
               :: (Int -> Int -> Int :: *)
                  ~R# (EventLifetime -> EventLifetime -> EventLifetime :: *)))
      GHC.Event.Internal.$fSemigroupEventLifetime_$csconcat
      GHC.Event.Internal.$fSemigroupEventLifetime_$cstimes

-- RHS size: {terms: 6, types: 17, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fSemigroupEventLifetime_$cstimes [Occ=LoopBreaker]
  :: forall b.
     GHC.Real.Integral b =>
     b -> EventLifetime -> EventLifetime
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []]
GHC.Event.Internal.$fSemigroupEventLifetime_$cstimes
  = \ (@ b_a9ih3) ($dIntegral_a9ih5 :: GHC.Real.Integral b_a9ih3) ->
      noinline
        @ (forall b1 a.
           (GHC.Real.Integral b1, Semigroup a) =>
           b1 -> a -> a)
        Data.Semigroup.Internal.stimesDefault
        @ b_a9ih3
        @ EventLifetime
        $dIntegral_a9ih5
        GHC.Event.Internal.$fSemigroupEventLifetime
end Rec }

Rec {
-- RHS size: {terms: 16, types: 10, coercions: 1, joins: 0/0}
GHC.Event.Internal.$wgo1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: [EventLifetime] -> Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
GHC.Event.Internal.$wgo1
  = \ (w_s9iKM :: [EventLifetime]) ->
      case w_s9iKM of {
        [] -> 0#;
        : y_i7Jcp ys_i7Jcq ->
          case y_i7Jcp
               `cast` (GHC.Event.Internal.N:EventLifetime[0]
                       :: (EventLifetime :: *) ~R# (Int :: *))
          of
          { I# x#_i7Vds ->
          case GHC.Event.Internal.$wgo1 ys_i7Jcq of ww_s9iKP { __DEFAULT ->
          orI# x#_i7Vds ww_s9iKP
          }
          }
      }
end Rec }

-- RHS size: {terms: 7, types: 3, coercions: 2, joins: 0/0}
GHC.Event.Internal.$fMonoidEventLifetime_go [InlPrag=NOUSERINLINE[0]]
  :: [EventLifetime] -> EventLifetime
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9iKM [Occ=Once] :: [EventLifetime]) ->
                 case GHC.Event.Internal.$wgo1 w_s9iKM of ww_s9iKP { __DEFAULT ->
                 (GHC.Types.I# ww_s9iKP)
                 `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
                         :: (Int :: *) ~R# (EventLifetime :: *))
                 }}]
GHC.Event.Internal.$fMonoidEventLifetime_go
  = \ (w_s9iKM :: [EventLifetime]) ->
      case GHC.Event.Internal.$wgo1 w_s9iKM of ww_s9iKP { __DEFAULT ->
      (GHC.Types.I# ww_s9iKP)
      `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
              :: (Int :: *) ~R# (EventLifetime :: *))
      }

-- RHS size: {terms: 5, types: 1, coercions: 10, joins: 0/0}
GHC.Event.Internal.$fMonoidEventLifetime [InlPrag=NOUSERINLINE CONLIKE]
  :: Monoid EventLifetime
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monoid TYPE: EventLifetime
                         GHC.Event.Internal.$fSemigroupEventLifetime
                         GHC.Event.Internal.$fMonoidEventLifetime1
                         `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
                                 :: (Int :: *) ~R# (EventLifetime :: *))
                         Data.Bits.$fBitsInt_$c.|.
                         `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
                                 ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
                                 ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
                                 :: (Int -> Int -> Int :: *)
                                    ~R# (EventLifetime -> EventLifetime -> EventLifetime :: *))
                         GHC.Event.Internal.$fMonoidEventLifetime_go]
GHC.Event.Internal.$fMonoidEventLifetime
  = GHC.Base.C:Monoid
      @ EventLifetime
      GHC.Event.Internal.$fSemigroupEventLifetime
      (GHC.Event.Internal.$fMonoidEventLifetime1
       `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
               :: (Int :: *) ~R# (EventLifetime :: *)))
      (Data.Bits.$fBitsInt_$c.|.
       `cast` (Sym (GHC.Event.Internal.N:EventLifetime[0])
               ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
               ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
               :: (Int -> Int -> Int :: *)
                  ~R# (EventLifetime -> EventLifetime -> EventLifetime :: *)))
      GHC.Event.Internal.$fMonoidEventLifetime_go

-- RHS size: {terms: 12, types: 4, coercions: 1, joins: 0/0}
elLifetime [InlPrag=INLINE (sat-args=1)]
  :: EventLifetime -> Lifetime
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
         Tmpl= \ (ds_d9ilX [Occ=Once] :: EventLifetime) ->
                 case ds_d9ilX
                      `cast` (GHC.Event.Internal.N:EventLifetime[0]
                              :: (EventLifetime :: *) ~R# (Int :: *))
                 of
                 { I# x#_i7Sgh [Occ=Once] ->
                 case eqInt (GHC.Types.I# (andI# x#_i7Sgh 8#)) (GHC.Types.I# 0#)
                 of {
                   False -> GHC.Event.Internal.MultiShot;
                   True -> GHC.Event.Internal.OneShot
                 }
                 }}]
elLifetime
  = \ (ds_d9ilX :: EventLifetime) ->
      case ds_d9ilX
           `cast` (GHC.Event.Internal.N:EventLifetime[0]
                   :: (EventLifetime :: *) ~R# (Int :: *))
      of
      { I# x#_i7Sgh ->
      case andI# x#_i7Sgh 8# of {
        __DEFAULT -> GHC.Event.Internal.MultiShot;
        0# -> GHC.Event.Internal.OneShot
      }
      }

-- RHS size: {terms: 14, types: 5, coercions: 1, joins: 0/0}
eventLifetime1_r9iWV :: Event -> Lifetime -> Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,1*U>m,
 Unf=OtherCon []]
eventLifetime1_r9iWV
  = \ (ds_d9im1 :: Event) (l_a9i4y :: Lifetime) ->
      case ds_d9im1
           `cast` (GHC.Event.Internal.N:Event[0]
                   :: (Event :: *) ~R# (Int :: *))
      of wild_i7Vdq
      { I# x#_i7Vds ->
      case l_a9i4y of {
        OneShot -> wild_i7Vdq;
        MultiShot -> GHC.Types.I# (orI# x#_i7Vds 8#)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 6, joins: 0/0}
eventLifetime [InlPrag=INLINE (sat-args=2)]
  :: Event -> Lifetime -> EventLifetime
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= (\ (ds_X9iqk [Occ=Once] :: Event)
                  (l_X9i8S [Occ=Once!] :: Lifetime) ->
                  case ds_X9iqk
                       `cast` (GHC.Event.Internal.N:Event[0]
                               :: (Event :: *) ~R# (Int :: *))
                  of
                  { I# x#_i7Vds [Occ=Once*] ->
                  case l_X9i8S of {
                    OneShot -> GHC.Types.I# x#_i7Vds;
                    MultiShot -> GHC.Types.I# (orI# x#_i7Vds 8#)
                  }
                  })
               `cast` (<Event>_R
                       ->_R <Lifetime>_R
                       ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
                       :: (Event -> Lifetime -> Int :: *)
                          ~R# (Event -> Lifetime -> EventLifetime :: *))}]
eventLifetime
  = eventLifetime1_r9iWV
    `cast` (<Event>_R
            ->_R <Lifetime>_R
            ->_R Sym (GHC.Event.Internal.N:EventLifetime[0])
            :: (Event -> Lifetime -> Int :: *)
               ~R# (Event -> Lifetime -> EventLifetime :: *))

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
evtCombine [InlPrag=INLINE (sat-args=2)] :: Event -> Event -> Event
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=True)
         Tmpl= Data.Bits.$fBitsInt_$c.|.
               `cast` (Sym (GHC.Event.Internal.N:Event[0])
                       ->_R Sym (GHC.Event.Internal.N:Event[0])
                       ->_R Sym (GHC.Event.Internal.N:Event[0])
                       :: (Int -> Int -> Int :: *) ~R# (Event -> Event -> Event :: *))}]
evtCombine
  = Data.Bits.$fBitsInt_$c.|.
    `cast` (Sym (GHC.Event.Internal.N:Event[0])
            ->_R Sym (GHC.Event.Internal.N:Event[0])
            ->_R Sym (GHC.Event.Internal.N:Event[0])
            :: (Int -> Int -> Int :: *) ~R# (Event -> Event -> Event :: *))

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
evtConcat [InlPrag=INLINE (sat-args=0)] :: [Event] -> Event
[GblId,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=False)
         Tmpl= foldl' @ Event @ Event evtCombine evtNothing}]
evtConcat = foldl' @ Event @ Event evtCombine evtNothing

Rec {
-- RHS size: {terms: 18, types: 11, coercions: 1, joins: 0/0}
GHC.Event.Internal.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: Int# -> [Event] -> Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,1*U>, Unf=OtherCon []]
GHC.Event.Internal.$wgo
  = \ (ww_s9iKV :: Int#) (w_s9iKS :: [Event]) ->
      case w_s9iKS of {
        [] -> ww_s9iKV;
        : c_i9inn cs_i9ino ->
          case c_i9inn
               `cast` (GHC.Event.Internal.N:Event[0]
                       :: (Event :: *) ~R# (Int :: *))
          of
          { I# ww2_X9iQF ->
          case GHC.Event.Internal.$wgo ww2_X9iQF cs_i9ino of ww3_s9iKZ
          { __DEFAULT ->
          orI# ww_s9iKV ww3_s9iKZ
          }
          }
      }
end Rec }

-- RHS size: {terms: 12, types: 6, coercions: 3, joins: 0/0}
GHC.Event.Internal.$fSemigroupEvent_go [InlPrag=NOUSERINLINE[0]]
  :: Event -> [Event] -> Event
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9iKR [Occ=Once] :: Event)
                 (w1_s9iKS [Occ=Once] :: [Event]) ->
                 case w_s9iKR
                      `cast` (GHC.Event.Internal.N:Event[0]
                              :: (Event :: *) ~R# (Int :: *))
                 of
                 { I# ww1_s9iKV [Occ=Once] ->
                 case GHC.Event.Internal.$wgo ww1_s9iKV w1_s9iKS of ww2_s9iKZ
                 { __DEFAULT ->
                 (GHC.Types.I# ww2_s9iKZ)
                 `cast` (Sym (GHC.Event.Internal.N:Event[0])
                         :: (Int :: *) ~R# (Event :: *))
                 }
                 }}]
GHC.Event.Internal.$fSemigroupEvent_go
  = \ (w_s9iKR :: Event) (w1_s9iKS :: [Event]) ->
      case w_s9iKR
           `cast` (GHC.Event.Internal.N:Event[0]
                   :: (Event :: *) ~R# (Int :: *))
      of
      { I# ww1_s9iKV ->
      case GHC.Event.Internal.$wgo ww1_s9iKV w1_s9iKS of ww2_s9iKZ
      { __DEFAULT ->
      (GHC.Types.I# ww2_s9iKZ)
      `cast` (Sym (GHC.Event.Internal.N:Event[0])
              :: (Int :: *) ~R# (Event :: *))
      }
      }

-- RHS size: {terms: 7, types: 7, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fSemigroupEvent_$csconcat
  :: NonEmpty Event -> Event
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S),1*U(1*U(U),1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_i9in9 [Occ=Once!] :: NonEmpty Event) ->
                 case ds_i9in9 of { :| a1_i9ing [Occ=Once] as_i9inh [Occ=Once] ->
                 GHC.Event.Internal.$fSemigroupEvent_go a1_i9ing as_i9inh
                 }}]
GHC.Event.Internal.$fSemigroupEvent_$csconcat
  = \ (ds_i9in9 :: NonEmpty Event) ->
      case ds_i9in9 of { :| a1_i9ing as_i9inh ->
      GHC.Event.Internal.$fSemigroupEvent_go a1_i9ing as_i9inh
      }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fSemigroupEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: Semigroup Event
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Semigroup TYPE: Event
                            evtCombine
                            GHC.Event.Internal.$fSemigroupEvent_$csconcat
                            GHC.Event.Internal.$fSemigroupEvent_$cstimes]
GHC.Event.Internal.$fSemigroupEvent
  = GHC.Base.C:Semigroup
      @ Event
      evtCombine
      GHC.Event.Internal.$fSemigroupEvent_$csconcat
      GHC.Event.Internal.$fSemigroupEvent_$cstimes

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fMonoidEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: Monoid Event
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monoid TYPE: Event
                         GHC.Event.Internal.$fSemigroupEvent
                         evtNothing
                         evtCombine
                         evtConcat]
GHC.Event.Internal.$fMonoidEvent
  = GHC.Base.C:Monoid
      @ Event
      GHC.Event.Internal.$fSemigroupEvent
      evtNothing
      evtCombine
      evtConcat

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fSemigroupEvent_$cstimes [Occ=LoopBreaker]
  :: forall b. GHC.Real.Integral b => b -> Event -> Event
[GblId,
 Arity=3,
 Str=<L,U(U(U(A,A,A,A,A,A,C(U)),U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)>,
 Unf=OtherCon []]
GHC.Event.Internal.$fSemigroupEvent_$cstimes
  = \ (@ b_a9iip) ($dIntegral_a9iir :: GHC.Real.Integral b_a9iip) ->
      stimesMonoid
        @ b_a9iip @ Event $dIntegral_a9iir GHC.Event.Internal.$fMonoidEvent
end Rec }

-- RHS size: {terms: 16, types: 7, coercions: 2, joins: 0/0}
eventIs :: Event -> Event -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9imr [Occ=Once] :: Event)
                 (ds1_d9ims [Occ=Once] :: Event) ->
                 case ds_d9imr
                      `cast` (GHC.Event.Internal.N:Event[0]
                              :: (Event :: *) ~R# (Int :: *))
                 of
                 { I# x#_i7Sgh [Occ=Once] ->
                 case ds1_d9ims
                      `cast` (GHC.Event.Internal.N:Event[0]
                              :: (Event :: *) ~R# (Int :: *))
                 of
                 { I# y#_i7Sgl [Occ=Once] ->
                 case andI# x#_i7Sgh y#_i7Sgl of {
                   __DEFAULT -> GHC.Types.True;
                   0# -> GHC.Types.False
                 }
                 }
                 }}]
eventIs
  = \ (ds_d9imr :: Event) (ds1_d9ims :: Event) ->
      case ds_d9imr
           `cast` (GHC.Event.Internal.N:Event[0]
                   :: (Event :: *) ~R# (Int :: *))
      of
      { I# x#_i7Sgh ->
      case ds1_d9ims
           `cast` (GHC.Event.Internal.N:Event[0]
                   :: (Event :: *) ~R# (Int :: *))
      of
      { I# y#_i7Sgl ->
      case andI# x#_i7Sgh y#_i7Sgl of {
        __DEFAULT -> GHC.Types.True;
        0# -> GHC.Types.False
      }
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent13 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.Internal.$fShowEvent13 = GHC.Types.C# '['#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowEvent5 = "]"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowEvent10 = ","#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent9 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowEvent9
  = unpackCString# GHC.Event.Internal.$fShowEvent10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$fShowEvent12 = "evtRead"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent11 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowEvent11
  = unpackCString# GHC.Event.Internal.$fShowEvent12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$fShowEvent8 = "evtWrite"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowEvent7
  = unpackCString# GHC.Event.Internal.$fShowEvent8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.Internal.$fShowEvent3 = "evtClose"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowEvent2
  = unpackCString# GHC.Event.Internal.$fShowEvent3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.Internal.$fShowEvent4
  = unpackCString# GHC.Event.Internal.$fShowEvent5

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent6 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Event.Internal.$fShowEvent6
  = GHC.Types.:
      @ [Char] GHC.Event.Internal.$fShowEvent2 (GHC.Types.[] @ [Char])

-- RHS size: {terms: 85, types: 49, coercions: 1, joins: 0/0}
GHC.Event.Internal.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: Event -> (# Char, [Char] #)
[GblId,
 Arity=1,
 Str=<L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 527 30}]
GHC.Event.Internal.$w$cshow
  = \ (w_s9iL5 :: Event) ->
      (# GHC.Event.Internal.$fShowEvent13,
         case w_s9iL5
              `cast` (GHC.Event.Internal.N:Event[0]
                      :: (Event :: *) ~R# (Int :: *))
         of
         { I# x#_i7Sgh ->
         case andI# x#_i7Sgh 1# of {
           __DEFAULT ->
             ++
               @ Char
               (Data.OldList.intercalate1
                  @ Char
                  (GHC.Types.:
                     @ [Char]
                     GHC.Event.Internal.$fShowEvent11
                     (case andI# x#_i7Sgh 2# of {
                        __DEFAULT ->
                          Data.OldList.prependToAll
                            @ [Char]
                            GHC.Event.Internal.$fShowEvent9
                            (GHC.Types.:
                               @ [Char]
                               GHC.Event.Internal.$fShowEvent7
                               (case andI# x#_i7Sgh 4# of {
                                  __DEFAULT -> GHC.Event.Internal.$fShowEvent6;
                                  0# -> GHC.Types.[] @ [Char]
                                }));
                        0# ->
                          case andI# x#_i7Sgh 4# of {
                            __DEFAULT ->
                              Data.OldList.prependToAll
                                @ [Char]
                                GHC.Event.Internal.$fShowEvent9
                                GHC.Event.Internal.$fShowEvent6;
                            0# ->
                              Data.OldList.prependToAll
                                @ [Char] GHC.Event.Internal.$fShowEvent9 (GHC.Types.[] @ [Char])
                          }
                      })))
               GHC.Event.Internal.$fShowEvent4;
           0# ->
             case andI# x#_i7Sgh 2# of {
               __DEFAULT ->
                 ++
                   @ Char
                   (Data.OldList.intercalate1
                      @ Char
                      (GHC.Types.:
                         @ [Char]
                         GHC.Event.Internal.$fShowEvent7
                         (case andI# x#_i7Sgh 4# of {
                            __DEFAULT ->
                              Data.OldList.prependToAll
                                @ [Char]
                                GHC.Event.Internal.$fShowEvent9
                                GHC.Event.Internal.$fShowEvent6;
                            0# ->
                              Data.OldList.prependToAll
                                @ [Char] GHC.Event.Internal.$fShowEvent9 (GHC.Types.[] @ [Char])
                          })))
                   GHC.Event.Internal.$fShowEvent4;
               0# ->
                 case andI# x#_i7Sgh 4# of {
                   __DEFAULT ->
                     ++
                       @ Char
                       (Data.OldList.intercalate1
                          @ Char
                          (GHC.Types.:
                             @ [Char]
                             GHC.Event.Internal.$fShowEvent2
                             (Data.OldList.prependToAll
                                @ [Char] GHC.Event.Internal.$fShowEvent9 (GHC.Types.[] @ [Char]))))
                       GHC.Event.Internal.$fShowEvent4;
                   0# -> GHC.Event.Internal.$fShowEvent4
                 }
             }
         }
         } #)

-- RHS size: {terms: 8, types: 11, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent_$cshow [InlPrag=NOUSERINLINE[0]]
  :: Event -> String
[GblId,
 Arity=1,
 Str=<L,1*U(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9iL5 [Occ=Once] :: Event) ->
                 case GHC.Event.Internal.$w$cshow w_s9iL5 of
                 { (# ww1_s9iLa [Occ=Once], ww2_s9iLb [Occ=Once] #) ->
                 GHC.Types.: @ Char ww1_s9iLa ww2_s9iLb
                 }}]
GHC.Event.Internal.$fShowEvent_$cshow
  = \ (w_s9iL5 :: Event) ->
      case GHC.Event.Internal.$w$cshow w_s9iL5 of
      { (# ww1_s9iLa, ww2_s9iLb #) ->
      GHC.Types.: @ Char ww1_s9iLa ww2_s9iLb
      }

-- RHS size: {terms: 12, types: 14, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent_$cshowsPrec
  :: Int -> Event -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><L,1*U(U)><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (x_i7QGZ [Occ=Once] :: Event)
                 (s_i7QH0 [Occ=Once] :: String) ->
                 augment
                   @ Char
                   (\ (@ b_i7JbU)
                      (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                      (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                      foldr
                        @ Char
                        @ b_i7JbU
                        c_i7JbV
                        n_i7JbW
                        (GHC.Event.Internal.$fShowEvent_$cshow x_i7QGZ))
                   s_i7QH0}]
GHC.Event.Internal.$fShowEvent_$cshowsPrec
  = \ _ [Occ=Dead] (x_i7QGZ :: Event) (s_i7QH0 :: String) ->
      case GHC.Event.Internal.$w$cshow x_i7QGZ of
      { (# ww1_s9iLa, ww2_s9iLb #) ->
      ++ @ Char (GHC.Types.: @ Char ww1_s9iLa ww2_s9iLb) s_i7QH0
      }

-- RHS size: {terms: 11, types: 13, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent1 :: Event -> String -> [Char]
[GblId,
 Arity=2,
 Str=<L,1*U(U)><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7QGZ [Occ=Once] :: Event)
                 (s_i7QH0 [Occ=Once, OS=OneShot] :: String) ->
                 augment
                   @ Char
                   (\ (@ b_i7JbU)
                      (c_i7JbV [Occ=Once, OS=OneShot] :: Char -> b_i7JbU -> b_i7JbU)
                      (n_i7JbW [Occ=Once, OS=OneShot] :: b_i7JbU) ->
                      foldr
                        @ Char
                        @ b_i7JbU
                        c_i7JbV
                        n_i7JbW
                        (GHC.Event.Internal.$fShowEvent_$cshow x_i7QGZ))
                   s_i7QH0}]
GHC.Event.Internal.$fShowEvent1
  = \ (x_i7QGZ :: Event) (s_i7QH0 [OS=OneShot] :: String) ->
      case GHC.Event.Internal.$w$cshow x_i7QGZ of
      { (# ww1_s9iLa, ww2_s9iLb #) ->
      ++ @ Char (GHC.Types.: @ Char ww1_s9iLa ww2_s9iLb) s_i7QH0
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent_$cshowList
  :: [Event] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [Event])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ Event GHC.Event.Internal.$fShowEvent1 ls_i7JaB s_i7JaC}]
GHC.Event.Internal.$fShowEvent_$cshowList
  = \ (ls_i7JaB :: [Event]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ Event GHC.Event.Internal.$fShowEvent1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.Internal.$fShowEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Event
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Event
                       GHC.Event.Internal.$fShowEvent_$cshowsPrec
                       GHC.Event.Internal.$fShowEvent_$cshow
                       GHC.Event.Internal.$fShowEvent_$cshowList]
GHC.Event.Internal.$fShowEvent
  = GHC.Show.C:Show
      @ Event
      GHC.Event.Internal.$fShowEvent_$cshowsPrec
      GHC.Event.Internal.$fShowEvent_$cshow
      GHC.Event.Internal.$fShowEvent_$cshowList


