
==================== Raw Cmm ====================
2018-03-16 16:03:03.050469132 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:03.053093395 UTC

[section ""data" . GHC.Event.Array.$WAC_closure" {
     GHC.Event.Array.$WAC_closure:
         const GHC.Event.Array.$WAC_info;
 },
 GHC.Event.Array.$WAC_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Ybr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7YbF; else goto c7YbG;
       c7YbF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$WAC_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YbG: // global
           I64[Sp - 24] = block_c7Ybo_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7YbN; else goto c7Ybp;
       u7YbN: // global
           call _c7Ybo(R1) args: 0, res: 0, upd: 0;
       c7Ybp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$WAC_info" {
     GHC.Event.Array.$WAC_info:
         const GHC.Event.Array.$WAC_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c7Ybo() //  [R1]
         { []
         }
     {offset
       c7Ybo: // global
           I64[Sp] = block_c7Ybu_info;
           _s7WN9::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7WN9::P64;
           if (R1 & 7 != 0) goto u7YbM; else goto c7Ybv;
       u7YbM: // global
           call _c7Ybu(R1) args: 0, res: 0, upd: 0;
       c7Ybv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ybo_info" {
     block_c7Ybo_info:
         const _c7Ybo;
         const 2;
         const 30;
 },
 _c7Ybu() //  [R1]
         { []
         }
     {offset
       c7Ybu: // global
           I64[Sp] = block_c7Ybz_info;
           _s7WNb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7WNb::I64;
           if (R1 & 7 != 0) goto u7YbO; else goto c7YbA;
       u7YbO: // global
           call _c7Ybz(R1) args: 0, res: 0, upd: 0;
       c7YbA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ybu_info" {
     block_c7Ybu_info:
         const _c7Ybu;
         const 2;
         const 30;
 },
 _c7Ybz() //  [R1]
         { []
         }
     {offset
       c7Ybz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YbL; else goto c7YbK;
       c7YbL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YbK: // global
           _s7WNd::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s7WNd::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ybz_info" {
     block_c7Ybz_info:
         const _c7Ybz;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.06349483 UTC

[section ""data" . GHC.Event.Array.empty1_closure" {
     GHC.Event.Array.empty1_closure:
         const GHC.Event.Array.empty1_info;
 },
 GHC.Event.Array.empty1_entry() //  []
         { []
         }
     {offset
       c7Ycl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ycm; else goto c7Ycn;
       c7Ycm: // global
           R1 = GHC.Event.Array.empty1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7Ycn: // global
           I64[Sp - 8] = block_c7Ycd_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.empty1_info" {
     GHC.Event.Array.empty1_info:
         const GHC.Event.Array.empty1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c7Ycd() //  [R1]
         { []
         }
     {offset
       c7Ycd: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7Ycq; else goto c7Ycp;
       c7Ycq: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ycp: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp] = block_c7Yci_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ycd_info" {
     block_c7Ycd_info:
         const _c7Ycd;
         const 0;
         const 30;
 },
 _c7Yci() //  [R1]
         { []
         }
     {offset
       c7Yci: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Yct; else goto c7Ycs;
       c7Yct: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ycs: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yci_info" {
     block_c7Yci_info:
         const _c7Yci;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.07225331 UTC

[section ""data" . GHC.Event.Array.empty_closure" {
     GHC.Event.Array.empty_closure:
         const GHC.Event.Array.empty_info;
 },
 GHC.Event.Array.empty_entry() //  []
         { []
         }
     {offset
       c7YcM: // global
           call GHC.Event.Array.empty1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.empty_info" {
     GHC.Event.Array.empty_info:
         const GHC.Event.Array.empty_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.076408581 UTC

[section ""data" . GHC.Event.Array.length1_closure" {
     GHC.Event.Array.length1_closure:
         const GHC.Event.Array.length1_info;
 },
 GHC.Event.Array.length1_entry() //  [R2]
         { []
         }
     {offset
       c7Yd0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Yd9; else goto c7Yda;
       c7Yd9: // global
           R2 = R2;
           R1 = GHC.Event.Array.length1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Yda: // global
           I64[Sp - 8] = block_c7YcX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ydg; else goto c7YcY;
       u7Ydg: // global
           call _c7YcX(R1) args: 0, res: 0, upd: 0;
       c7YcY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.length1_info" {
     GHC.Event.Array.length1_info:
         const GHC.Event.Array.length1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7YcX() //  [R1]
         { []
         }
     {offset
       c7YcX: // global
           _s7WNv::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7Yd3_info;
           R1 = _s7WNv::P64;
           if (R1 & 7 != 0) goto u7Ydf; else goto c7Yd4;
       u7Ydf: // global
           call _c7Yd3(R1) args: 0, res: 0, upd: 0;
       c7Yd4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YcX_info" {
     block_c7YcX_info:
         const _c7YcX;
         const 0;
         const 30;
 },
 _c7Yd3() //  [R1]
         { []
         }
     {offset
       c7Yd3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Yde; else goto c7Ydd;
       c7Yde: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ydd: // global
           _s7WNy::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7WNy::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yd3_info" {
     block_c7Yd3_info:
         const _c7Yd3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.083248378 UTC

[section ""data" . GHC.Event.Array.length_closure" {
     GHC.Event.Array.length_closure:
         const GHC.Event.Array.length_info;
 },
 GHC.Event.Array.length_entry() //  [R2]
         { []
         }
     {offset
       c7YdA: // global
           R2 = R2;
           call GHC.Event.Array.length1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.length_info" {
     GHC.Event.Array.length_info:
         const GHC.Event.Array.length_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.087395268 UTC

[section ""data" . GHC.Event.Array.capacity1_closure" {
     GHC.Event.Array.capacity1_closure:
         const GHC.Event.Array.capacity1_info;
 },
 GHC.Event.Array.capacity1_entry() //  [R2]
         { []
         }
     {offset
       c7YdO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7YdX; else goto c7YdY;
       c7YdX: // global
           R2 = R2;
           R1 = GHC.Event.Array.capacity1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7YdY: // global
           I64[Sp - 8] = block_c7YdL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ye4; else goto c7YdM;
       u7Ye4: // global
           call _c7YdL(R1) args: 0, res: 0, upd: 0;
       c7YdM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.capacity1_info" {
     GHC.Event.Array.capacity1_info:
         const GHC.Event.Array.capacity1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7YdL() //  [R1]
         { []
         }
     {offset
       c7YdL: // global
           _s7WNH::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7YdR_info;
           R1 = _s7WNH::P64;
           if (R1 & 7 != 0) goto u7Ye3; else goto c7YdS;
       u7Ye3: // global
           call _c7YdR(R1) args: 0, res: 0, upd: 0;
       c7YdS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YdL_info" {
     block_c7YdL_info:
         const _c7YdL;
         const 0;
         const 30;
 },
 _c7YdR() //  [R1]
         { []
         }
     {offset
       c7YdR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Ye2; else goto c7Ye1;
       c7Ye2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ye1: // global
           _s7WNL::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7WNL::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YdR_info" {
     block_c7YdR_info:
         const _c7YdR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.094829321 UTC

[section ""data" . GHC.Event.Array.capacity_closure" {
     GHC.Event.Array.capacity_closure:
         const GHC.Event.Array.capacity_info;
 },
 GHC.Event.Array.capacity_entry() //  [R2]
         { []
         }
     {offset
       c7Yeo: // global
           R2 = R2;
           call GHC.Event.Array.capacity1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.capacity_info" {
     GHC.Event.Array.capacity_info:
         const GHC.Event.Array.capacity_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.097821248 UTC

[section ""cstring" . lvl_r7WM4_bytes" {
     lvl_r7WM4_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,65,114,114,97,121,46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.099433432 UTC

[section ""cstring" . lvl1_r7WM5_bytes" {
     lvl1_r7WM5_bytes:
         I8[] [117,110,115,97,102,101,82,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.101060756 UTC

[section ""cstring" . lvl2_r7WM6_bytes" {
     lvl2_r7WM6_bytes:
         I8[] [58,32,98,111,117,110,100,115,32,101,114,114,111,114,44,32,105,110,100,101,120,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.1027113 UTC

[section ""cstring" . lvl3_r7WM7_bytes" {
     lvl3_r7WM7_bytes:
         I8[] [44,32,99,97,112,97,99,105,116,121,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.108418829 UTC

[section ""data" . GHC.Event.Array.$wlvl1_closure" {
     GHC.Event.Array.$wlvl1_closure:
         const GHC.Event.Array.$wlvl1_info;
         const 0;
 },
 sat_s7WNW_entry() //  [R1]
         { []
         }
     {offset
       c7Yf2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Yf3; else goto c7Yf4;
       c7Yf3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yf4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7YeZ_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WNW_info" {
     sat_s7WNW_info:
         const sat_s7WNW_entry;
         const 4294967296;
         const 17;
 },
 _c7YeZ() //  [R1, R2]
         { []
         }
     {offset
       c7YeZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Yf7; else goto c7Yf6;
       c7Yf7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7Yf6: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7YeZ_info" {
     block_c7YeZ_info:
         const _c7YeZ;
         const 0;
         const 30;
 },
 sat_s7WNX_entry() //  [R1]
         { []
         }
     {offset
       c7Yf8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Yfc; else goto c7Yfb;
       c7Yfc: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yfb: // global
           _s7WNN::I64 = I64[R1 + 16];
           I64[Hp - 16] = sat_s7WNW_info;
           I64[Hp] = _s7WNN::I64;
           R3 = Hp - 16;
           R2 = lvl3_r7WM7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7WNX_info" {
     sat_s7WNX_info:
         const sat_s7WNX_entry;
         const 4294967296;
         const 17;
 },
 sat_s7WNY_entry() //  [R1]
         { []
         }
     {offset
       c7Yfe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Yff; else goto c7Yfg;
       c7Yff: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yfg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c7YeP_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 24];
           R2 = 0;
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WNY_info" {
     sat_s7WNY_info:
         const sat_s7WNY_entry;
         const 8589934592;
         const 20;
 },
 _c7YeP() //  [R1, R2]
         { []
         }
     {offset
       c7YeP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7Yfj; else goto c7Yfi;
       c7Yfj: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7Yfi: // global
           I64[Hp - 40] = sat_s7WNX_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7YeP_info" {
     block_c7YeP_info:
         const _c7YeP;
         const 65;
         const 30;
 },
 sat_s7WNZ_entry() //  [R1]
         { []
         }
     {offset
       c7Yfk: // global
           _s7WNZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7Yfl; else goto c7Yfm;
       c7Yfm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Yfo; else goto c7Yfn;
       c7Yfo: // global
           HpAlloc = 32;
           goto c7Yfl;
       c7Yfl: // global
           R1 = _s7WNZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yfn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7WNZ::P64;
           _s7WNN::I64 = I64[_s7WNZ::P64 + 16];
           _s7WNO::I64 = I64[_s7WNZ::P64 + 24];
           I64[Hp - 24] = sat_s7WNY_info;
           I64[Hp - 8] = _s7WNN::I64;
           I64[Hp] = _s7WNO::I64;
           R3 = Hp - 24;
           R2 = lvl2_r7WM6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WNZ_info" {
     sat_s7WNZ_info:
         const sat_s7WNZ_entry;
         const 8589934592;
         const 20;
 },
 sat_s7WO0_entry() //  [R1]
         { []
         }
     {offset
       c7Yfp: // global
           _s7WO0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7Yfq; else goto c7Yfr;
       c7Yfr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Yft; else goto c7Yfs;
       c7Yft: // global
           HpAlloc = 32;
           goto c7Yfq;
       c7Yfq: // global
           R1 = _s7WO0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yfs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7WO0::P64;
           _s7WNN::I64 = I64[_s7WO0::P64 + 16];
           _s7WNO::I64 = I64[_s7WO0::P64 + 24];
           I64[Hp - 24] = sat_s7WNZ_info;
           I64[Hp - 8] = _s7WNN::I64;
           I64[Hp] = _s7WNO::I64;
           R3 = Hp - 24;
           R2 = lvl1_r7WM5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WO0_info" {
     sat_s7WO0_info:
         const sat_s7WO0_entry;
         const 8589934592;
         const 20;
 },
 GHC.Event.Array.$wlvl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Yfw: // global
           _s7WNO::I64 = R3;
           _s7WNN::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c7Yfx; else goto c7Yfy;
       c7Yfy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YfA; else goto c7Yfz;
       c7YfA: // global
           HpAlloc = 32;
           goto c7Yfx;
       c7Yfx: // global
           R3 = _s7WNO::I64;
           R2 = _s7WNN::I64;
           R1 = GHC.Event.Array.$wlvl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Yfz: // global
           I64[Hp - 24] = sat_s7WO0_info;
           I64[Hp - 8] = _s7WNN::I64;
           I64[Hp] = _s7WNO::I64;
           I64[Sp - 8] = block_c7Yfu_info;
           R3 = Hp - 24;
           R2 = lvl_r7WM4_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wlvl1_info" {
     GHC.Event.Array.$wlvl1_info:
         const GHC.Event.Array.$wlvl1_entry;
         const 0;
         const 12884901902;
         const 8589934604;
         const S7X3q_srt;
 },
 _c7Yfu() //  [R1]
         { []
         }
     {offset
       c7Yfu: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yfu_info" {
     block_c7Yfu_info:
         const _c7Yfu;
         const 0;
         const 4294967326;
         const S7X3q_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.128705392 UTC

[section ""data" . GHC.Event.Array.$wunsafeRead_closure" {
     GHC.Event.Array.$wunsafeRead_closure:
         const GHC.Event.Array.$wunsafeRead_info;
         const 0;
 },
 GHC.Event.Array.$wunsafeRead_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Ygl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7Ygp; else goto c7Ygq;
       c7Ygp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wunsafeRead_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ygq: // global
           I64[Sp - 24] = block_c7Ygi_info;
           R1 = P64[R3 + 8];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7YgS; else goto c7Ygj;
       u7YgS: // global
           call _c7Ygi(R1) args: 0, res: 0, upd: 0;
       c7Ygj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wunsafeRead_info" {
     GHC.Event.Array.$wunsafeRead_info:
         const GHC.Event.Array.$wunsafeRead_entry;
         const 0;
         const 12884901902;
         const 17179869206;
         const S7X3q_srt+8;
 },
 _c7Ygi() //  [R1]
         { []
         }
     {offset
       c7Ygi: // global
           I64[Sp - 8] = block_c7Ygo_info;
           _s7WOc::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7WOc::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YgR; else goto c7Ygs;
       u7YgR: // global
           call _c7Ygo(R1) args: 0, res: 0, upd: 0;
       c7Ygs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ygi_info" {
     block_c7Ygi_info:
         const _c7Ygi;
         const 130;
         const 4294967326;
         const S7X3q_srt+8;
 },
 _c7Ygo() //  [R1]
         { []
         }
     {offset
       c7Ygo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Ygy; else goto c7Ygx;
       c7Ygy: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ygx: // global
           _s7WO4::I64 = I64[Sp + 24];
           _s7WOc::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s7WO4::I64, 0)) goto c7YgP; else goto c7YgO;
       c7YgO: // global
           if (%MO_S_Ge_W64(_s7WO4::I64,
                            _s7WOc::I64)) goto c7YgP; else goto c7YgJ;
       c7YgP: // global
           Hp = Hp - 32;
           R3 = _s7WO4::I64;
           R2 = _s7WOc::I64;
           Sp = Sp + 32;
           call GHC.Event.Array.$wlvl1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7YgJ: // global
           _s7WOf::P64 = P64[R1 + 7];
           _s7WOe::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s7WO4::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7WOe::I64;
           _s7WO2::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7YgH_info;
           R2 = _s7WO2::P64;
           I64[Sp - 8] = stg_ap_ppv_info;
           P64[Sp] = Hp - 7;
           P64[Sp + 8] = Hp - 23;
           P64[Sp + 24] = _s7WOf::P64;
           Sp = Sp - 8;
           call Foreign.Storable.peekElemOff_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ygo_info" {
     block_c7Ygo_info:
         const _c7Ygo;
         const 323;
         const 4294967326;
         const S7X3q_srt+8;
 },
 _c7YgH() //  [R1]
         { []
         }
     {offset
       c7YgH: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YgH_info" {
     block_c7YgH_info:
         const _c7YgH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.138555406 UTC

[section ""data" . GHC.Event.Array.unsafeRead1_closure" {
     GHC.Event.Array.unsafeRead1_closure:
         const GHC.Event.Array.unsafeRead1_info;
         const 0;
 },
 GHC.Event.Array.unsafeRead1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Yhj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Yhn; else goto c7Yho;
       c7Yhn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.unsafeRead1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Yho: // global
           I64[Sp - 24] = block_c7Yhg_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Yhw; else goto c7Yhh;
       u7Yhw: // global
           call _c7Yhg(R1) args: 0, res: 0, upd: 0;
       c7Yhh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeRead1_info" {
     GHC.Event.Array.unsafeRead1_info:
         const GHC.Event.Array.unsafeRead1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S7X3q_srt+16;
 },
 _c7Yhg() //  [R1]
         { []
         }
     {offset
       c7Yhg: // global
           I64[Sp] = block_c7Yhm_info;
           _s7WOv::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s7WOv::P64;
           if (R1 & 7 != 0) goto u7Yhv; else goto c7Yhq;
       u7Yhv: // global
           call _c7Yhm(R1) args: 0, res: 0, upd: 0;
       c7Yhq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yhg_info" {
     block_c7Yhg_info:
         const _c7Yhg;
         const 2;
         const 4294967326;
         const S7X3q_srt+16;
 },
 _c7Yhm() //  [R1]
         { []
         }
     {offset
       c7Yhm: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Array.$wunsafeRead_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yhm_info" {
     block_c7Yhm_info:
         const _c7Yhm;
         const 2;
         const 4294967326;
         const S7X3q_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.146311557 UTC

[section ""data" . GHC.Event.Array.unsafeRead_closure" {
     GHC.Event.Array.unsafeRead_closure:
         const GHC.Event.Array.unsafeRead_info;
         const 0;
 },
 GHC.Event.Array.unsafeRead_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7YhO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.unsafeRead1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeRead_info" {
     GHC.Event.Array.unsafeRead_info:
         const GHC.Event.Array.unsafeRead_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7X3q_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.149284069 UTC

[section ""cstring" . lvl4_r7WM8_bytes" {
     lvl4_r7WM8_bytes:
         I8[] [117,110,115,97,102,101,87,114,105,116,101,39]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.154642082 UTC

[section ""data" . GHC.Event.Array.$wlvl_closure" {
     GHC.Event.Array.$wlvl_closure:
         const GHC.Event.Array.$wlvl_info;
         const 0;
 },
 sat_s7WOH_entry() //  [R1]
         { []
         }
     {offset
       c7Yip: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Yiq; else goto c7Yir;
       c7Yiq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yir: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7Yim_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WOH_info" {
     sat_s7WOH_info:
         const sat_s7WOH_entry;
         const 4294967296;
         const 17;
 },
 _c7Yim() //  [R1, R2]
         { []
         }
     {offset
       c7Yim: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Yiu; else goto c7Yit;
       c7Yiu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7Yit: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Yim_info" {
     block_c7Yim_info:
         const _c7Yim;
         const 0;
         const 30;
 },
 sat_s7WOI_entry() //  [R1]
         { []
         }
     {offset
       c7Yiv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Yiz; else goto c7Yiy;
       c7Yiz: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yiy: // global
           _s7WOy::I64 = I64[R1 + 16];
           I64[Hp - 16] = sat_s7WOH_info;
           I64[Hp] = _s7WOy::I64;
           R3 = Hp - 16;
           R2 = lvl3_r7WM7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7WOI_info" {
     sat_s7WOI_info:
         const sat_s7WOI_entry;
         const 4294967296;
         const 17;
 },
 sat_s7WOJ_entry() //  [R1]
         { []
         }
     {offset
       c7YiB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7YiC; else goto c7YiD;
       c7YiC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c7Yic_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 24];
           R2 = 0;
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WOJ_info" {
     sat_s7WOJ_info:
         const sat_s7WOJ_entry;
         const 8589934592;
         const 20;
 },
 _c7Yic() //  [R1, R2]
         { []
         }
     {offset
       c7Yic: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7YiG; else goto c7YiF;
       c7YiG: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7YiF: // global
           I64[Hp - 40] = sat_s7WOI_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Yic_info" {
     block_c7Yic_info:
         const _c7Yic;
         const 65;
         const 30;
 },
 sat_s7WOK_entry() //  [R1]
         { []
         }
     {offset
       c7YiH: // global
           _s7WOK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7YiI; else goto c7YiJ;
       c7YiJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YiL; else goto c7YiK;
       c7YiL: // global
           HpAlloc = 32;
           goto c7YiI;
       c7YiI: // global
           R1 = _s7WOK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YiK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7WOK::P64;
           _s7WOy::I64 = I64[_s7WOK::P64 + 16];
           _s7WOz::I64 = I64[_s7WOK::P64 + 24];
           I64[Hp - 24] = sat_s7WOJ_info;
           I64[Hp - 8] = _s7WOy::I64;
           I64[Hp] = _s7WOz::I64;
           R3 = Hp - 24;
           R2 = lvl2_r7WM6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WOK_info" {
     sat_s7WOK_info:
         const sat_s7WOK_entry;
         const 8589934592;
         const 20;
 },
 sat_s7WOL_entry() //  [R1]
         { []
         }
     {offset
       c7YiM: // global
           _s7WOL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7YiN; else goto c7YiO;
       c7YiO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YiQ; else goto c7YiP;
       c7YiQ: // global
           HpAlloc = 32;
           goto c7YiN;
       c7YiN: // global
           R1 = _s7WOL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YiP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7WOL::P64;
           _s7WOy::I64 = I64[_s7WOL::P64 + 16];
           _s7WOz::I64 = I64[_s7WOL::P64 + 24];
           I64[Hp - 24] = sat_s7WOK_info;
           I64[Hp - 8] = _s7WOy::I64;
           I64[Hp] = _s7WOz::I64;
           R3 = Hp - 24;
           R2 = lvl4_r7WM8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WOL_info" {
     sat_s7WOL_info:
         const sat_s7WOL_entry;
         const 8589934592;
         const 20;
 },
 GHC.Event.Array.$wlvl_entry() //  [R2, R3]
         { []
         }
     {offset
       c7YiT: // global
           _s7WOz::I64 = R3;
           _s7WOy::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c7YiU; else goto c7YiV;
       c7YiV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YiX; else goto c7YiW;
       c7YiX: // global
           HpAlloc = 32;
           goto c7YiU;
       c7YiU: // global
           R3 = _s7WOz::I64;
           R2 = _s7WOy::I64;
           R1 = GHC.Event.Array.$wlvl_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YiW: // global
           I64[Hp - 24] = sat_s7WOL_info;
           I64[Hp - 8] = _s7WOy::I64;
           I64[Hp] = _s7WOz::I64;
           I64[Sp - 8] = block_c7YiR_info;
           R3 = Hp - 24;
           R2 = lvl_r7WM4_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wlvl_info" {
     GHC.Event.Array.$wlvl_info:
         const GHC.Event.Array.$wlvl_entry;
         const 0;
         const 73014444046;
         const 8589934604;
         const S7X3q_srt;
 },
 _c7YiR() //  [R1]
         { []
         }
     {offset
       c7YiR: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YiR_info" {
     block_c7YiR_info:
         const _c7YiR;
         const 0;
         const 4294967326;
         const S7X3q_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.174220318 UTC

[section ""data" . GHC.Event.Array.$wunsafeWrite'_closure" {
     GHC.Event.Array.$wunsafeWrite'_closure:
         const GHC.Event.Array.$wunsafeWrite'_info;
         const 0;
 },
 GHC.Event.Array.$wunsafeWrite'_slow() //  [R1]
         { []
         }
     {offset
       c7YjC: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 16, res: 0, upd: 8;
     }
 },
 GHC.Event.Array.$wunsafeWrite'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7YjL: // global
           _s7WOR::I64 = R6;
           _s7WOQ::I64 = R5;
           _s7WOP::P64 = R4;
           _s7WOO::I64 = R3;
           _s7WON::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c7YjM; else goto c7YjN;
       c7YjN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YjP; else goto c7YjO;
       c7YjP: // global
           HpAlloc = 32;
           goto c7YjM;
       c7YjM: // global
           R1 = GHC.Event.Array.$wunsafeWrite'_closure;
           P64[Sp - 40] = _s7WON::P64;
           I64[Sp - 32] = _s7WOO::I64;
           P64[Sp - 24] = _s7WOP::P64;
           I64[Sp - 16] = _s7WOQ::I64;
           I64[Sp - 8] = _s7WOR::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c7YjO: // global
           if (%MO_S_Lt_W64(_s7WOR::I64, 0)) goto c7YjK; else goto c7YjJ;
       c7YjJ: // global
           if (%MO_S_Ge_W64(_s7WOR::I64,
                            _s7WOQ::I64)) goto c7YjK; else goto c7YjY;
       c7YjK: // global
           Hp = Hp - 32;
           R3 = _s7WOR::I64;
           R2 = _s7WOQ::I64;
           Sp = Sp + 8;
           call GHC.Event.Array.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7YjY: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s7WOR::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7WOO::I64;
           I64[Sp - 8] = block_c7YjW_info;
           R2 = _s7WON::P64;
           I64[Sp - 40] = stg_ap_pppv_info;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           P64[Sp - 16] = P64[Sp];
           P64[Sp] = _s7WOP::P64;
           Sp = Sp - 40;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wunsafeWrite'_info" {
     GHC.Event.Array.$wunsafeWrite'_info:
         const GHC.Event.Array.$wunsafeWrite'_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const S7X3q_srt+32;
         const 1670;
         const GHC.Event.Array.$wunsafeWrite'_slow;
 },
 _c7YjW() //  [R1]
         { []
         }
     {offset
       c7YjW: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YjW_info" {
     block_c7YjW_info:
         const _c7YjW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.182579336 UTC

[section ""data" . GHC.Event.Array.unsafeWrite2_closure" {
     GHC.Event.Array.unsafeWrite2_closure:
         const GHC.Event.Array.unsafeWrite2_info;
         const 0;
 },
 GHC.Event.Array.unsafeWrite2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c7Yko: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7Ykx; else goto c7Yky;
       c7Ykx: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.unsafeWrite2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Yky: // global
           I64[Sp - 32] = block_c7Ykl_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7YkH; else goto c7Ykm;
       u7YkH: // global
           call _c7Ykl(R1) args: 0, res: 0, upd: 0;
       c7Ykm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeWrite2_info" {
     GHC.Event.Array.unsafeWrite2_info:
         const GHC.Event.Array.unsafeWrite2_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S7X3q_srt+40;
 },
 _c7Ykl() //  [R1]
         { []
         }
     {offset
       c7Ykl: // global
           I64[Sp - 8] = block_c7Ykr_info;
           _s7WPc::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7WPc::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YkG; else goto c7Yks;
       u7YkG: // global
           call _c7Ykr(R1) args: 0, res: 0, upd: 0;
       c7Yks: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ykl_info" {
     block_c7Ykl_info:
         const _c7Ykl;
         const 3;
         const 4294967326;
         const S7X3q_srt+40;
 },
 _c7Ykr() //  [R1]
         { []
         }
     {offset
       c7Ykr: // global
           I64[Sp - 8] = block_c7Ykw_info;
           _s7WPf::P64 = P64[R1 + 7];
           _s7WPe::I64 = I64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s7WPf::P64;
           I64[Sp + 24] = _s7WPe::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YkI; else goto c7YkB;
       u7YkI: // global
           call _c7Ykw(R1) args: 0, res: 0, upd: 0;
       c7YkB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ykr_info" {
     block_c7Ykr_info:
         const _c7Ykr;
         const 68;
         const 4294967326;
         const S7X3q_srt+40;
 },
 _c7Ykw() //  [R1]
         { []
         }
     {offset
       c7Ykw: // global
           R6 = I64[R1 + 7];
           R5 = I64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 32];
           R2 = P64[Sp + 24];
           Sp = Sp + 40;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ykw_info" {
     block_c7Ykw_info:
         const _c7Ykw;
         const 645;
         const 4294967326;
         const S7X3q_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.191931584 UTC

[section ""data" . GHC.Event.Array.unsafeWrite1_closure" {
     GHC.Event.Array.unsafeWrite1_closure:
         const GHC.Event.Array.unsafeWrite1_info;
         const 0;
 },
 GHC.Event.Array.unsafeWrite1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c7Yl7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Yl8; else goto c7Yl9;
       c7Yl8: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.unsafeWrite1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Yl9: // global
           I64[Sp - 32] = block_c7Yl4_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7Yld; else goto c7Yl5;
       u7Yld: // global
           call _c7Yl4(R1) args: 0, res: 0, upd: 0;
       c7Yl5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeWrite1_info" {
     GHC.Event.Array.unsafeWrite1_info:
         const GHC.Event.Array.unsafeWrite1_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S7X3q_srt+48;
 },
 _c7Yl4() //  [R1]
         { []
         }
     {offset
       c7Yl4: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[P64[R1 + 7] + 8];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.Array.unsafeWrite2_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yl4_info" {
     block_c7Yl4_info:
         const _c7Yl4;
         const 3;
         const 4294967326;
         const S7X3q_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.198306619 UTC

[section ""data" . GHC.Event.Array.unsafeWrite_closure" {
     GHC.Event.Array.unsafeWrite_closure:
         const GHC.Event.Array.unsafeWrite_info;
         const 0;
 },
 GHC.Event.Array.unsafeWrite_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c7Yls: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.unsafeWrite1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeWrite_info" {
     GHC.Event.Array.unsafeWrite_info:
         const GHC.Event.Array.unsafeWrite_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S7X3q_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.204070776 UTC

[section ""data" . GHC.Event.Array.$wunsafeLoad_closure" {
     GHC.Event.Array.$wunsafeLoad_closure:
         const GHC.Event.Array.$wunsafeLoad_info;
 },
 sat_s7WPN_entry() //  [R1]
         { []
         }
     {offset
       c7YlZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7Ym3; else goto c7Ym4;
       c7Ym3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Ym4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c7YlW_info;
           _s7WPC::P64 = P64[R1 + 16];
           _s7WPB::I64 = I64[R1 + 32];
           R1 = P64[R1 + 24];
           I64[Sp - 32] = _s7WPB::I64;
           P64[Sp - 24] = _s7WPC::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7Ym8; else goto c7YlX;
       u7Ym8: // global
           call _c7YlW(R1) args: 0, res: 0, upd: 0;
       c7YlX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WPN_info" {
     sat_s7WPN_info:
         const sat_s7WPN_entry;
         const 4294967298;
         const 15;
 },
 _c7YlW() //  [R1]
         { []
         }
     {offset
       c7YlW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Ym7; else goto c7Ym6;
       c7Ym7: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7Ym6: // global
           _s7WPM::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = _s7WPM::I64;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7YlW_info" {
     block_c7YlW_info:
         const _c7YlW;
         const 66;
         const 30;
 },
 GHC.Event.Array.$wunsafeLoad_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Ym9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7Yma; else goto c7Ymb;
       c7Yma: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wunsafeLoad_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ymb: // global
           I64[Sp - 24] = block_c7YlD_info;
           R1 = P64[R2 + 8];
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Ymn; else goto c7YlE;
       u7Ymn: // global
           call _c7YlD(R1) args: 0, res: 0, upd: 0;
       c7YlE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wunsafeLoad_info" {
     GHC.Event.Array.$wunsafeLoad_info:
         const GHC.Event.Array.$wunsafeLoad_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7YlD() //  [R1]
         { []
         }
     {offset
       c7YlD: // global
           I64[Sp - 8] = block_c7YlI_info;
           _s7WPB::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7WPB::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ymm; else goto c7YlJ;
       u7Ymm: // global
           call _c7YlI(R1) args: 0, res: 0, upd: 0;
       c7YlJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YlD_info" {
     block_c7YlD_info:
         const _c7YlD;
         const 2;
         const 30;
 },
 _c7YlI() //  [R1]
         { []
         }
     {offset
       c7YlI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Ymf; else goto c7Yme;
       c7Ymf: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Yme: // global
           _s7WPE::P64 = P64[R1 + 7];
           _s7WPD::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7WPD::I64;
           I64[Sp - 8] = block_c7YlP_info;
           R3 = Hp - 23;
           R2 = Hp - 7;
           _s7WPC::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp] = _s7WPE::P64;
           P64[Sp + 24] = _s7WPC::P64;
           Sp = Sp - 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YlI_info" {
     block_c7YlI_info:
         const _c7YlI;
         const 67;
         const 30;
 },
 _c7YlP() //  [R1]
         { []
         }
     {offset
       c7YlP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Ymi; else goto c7Ymh;
       c7Ymi: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ymh: // global
           _s7WPs::P64 = P64[Sp + 24];
           _s7WPB::I64 = I64[Sp + 16];
           _s7WPC::P64 = P64[Sp + 32];
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 32] = sat_s7WPN_info;
           P64[Hp - 16] = _s7WPC::P64;
           P64[Hp - 8] = R1;
           I64[Hp] = _s7WPB::I64;
           call MO_WriteBarrier();
           P64[_s7WPs::P64 + 8] = Hp - 32;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WPs::P64);
           R1 = R1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YlP_info" {
     block_c7YlP_info:
         const _c7YlP;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.217503811 UTC

[section ""data" . GHC.Event.Array.unsafeLoad1_closure" {
     GHC.Event.Array.unsafeLoad1_closure:
         const GHC.Event.Array.unsafeLoad1_info;
 },
 GHC.Event.Array.unsafeLoad1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Yn0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Yn1; else goto c7Yn2;
       c7Yn1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.unsafeLoad1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Yn2: // global
           I64[Sp - 16] = block_c7YmX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Yn6; else goto c7YmY;
       u7Yn6: // global
           call _c7YmX(R1) args: 0, res: 0, upd: 0;
       c7YmY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeLoad1_info" {
     GHC.Event.Array.unsafeLoad1_info:
         const GHC.Event.Array.unsafeLoad1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7YmX() //  [R1]
         { []
         }
     {offset
       c7YmX: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Event.Array.$wunsafeLoad_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YmX_info" {
     block_c7YmX_info:
         const _c7YmX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.223612563 UTC

[section ""data" . GHC.Event.Array.unsafeLoad_closure" {
     GHC.Event.Array.unsafeLoad_closure:
         const GHC.Event.Array.unsafeLoad_info;
 },
 GHC.Event.Array.unsafeLoad_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Ynk: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.unsafeLoad1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeLoad_info" {
     GHC.Event.Array.unsafeLoad_info:
         const GHC.Event.Array.unsafeLoad_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.228476438 UTC

[section ""data" . GHC.Event.Array.useAsPtr1_closure" {
     GHC.Event.Array.useAsPtr1_closure:
         const GHC.Event.Array.useAsPtr1_info;
 },
 GHC.Event.Array.useAsPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Yny: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7YnH; else goto c7YnI;
       c7YnH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.useAsPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YnI: // global
           I64[Sp - 16] = block_c7Ynv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7YnZ; else goto c7Ynw;
       u7YnZ: // global
           call _c7Ynv(R1) args: 0, res: 0, upd: 0;
       c7Ynw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.useAsPtr1_info" {
     GHC.Event.Array.useAsPtr1_info:
         const GHC.Event.Array.useAsPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7Ynv() //  [R1]
         { []
         }
     {offset
       c7Ynv: // global
           _s7WQ1::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7YnB_info;
           R1 = _s7WQ1::P64;
           if (R1 & 7 != 0) goto u7YnY; else goto c7YnC;
       u7YnY: // global
           call _c7YnB(R1) args: 0, res: 0, upd: 0;
       c7YnC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ynv_info" {
     block_c7Ynv_info:
         const _c7Ynv;
         const 1;
         const 30;
 },
 _c7YnB() //  [R1]
         { []
         }
     {offset
       c7YnB: // global
           I64[Sp - 8] = block_c7YnG_info;
           _s7WQ4::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7WQ4::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Yo0; else goto c7YnL;
       u7Yo0: // global
           call _c7YnG(R1) args: 0, res: 0, upd: 0;
       c7YnL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YnB_info" {
     block_c7YnB_info:
         const _c7YnB;
         const 1;
         const 30;
 },
 _c7YnG() //  [R1]
         { []
         }
     {offset
       c7YnG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YnU; else goto c7YnT;
       c7YnU: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YnT: // global
           _s7WQ8::P64 = P64[R1 + 7];
           _s7WQ7::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7WQ7::I64;
           I64[Sp + 8] = block_c7YnR_info;
           R3 = Hp - 23;
           R2 = Hp - 7;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s7WQ8::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YnG_info" {
     block_c7YnG_info:
         const _c7YnG;
         const 66;
         const 30;
 },
 _c7YnR() //  [R1]
         { []
         }
     {offset
       c7YnR: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YnR_info" {
     block_c7YnR_info:
         const _c7YnR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.2386763 UTC

[section ""data" . GHC.Event.Array.useAsPtr_closure" {
     GHC.Event.Array.useAsPtr_closure:
         const GHC.Event.Array.useAsPtr_info;
 },
 GHC.Event.Array.useAsPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Yos: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.useAsPtr1_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.useAsPtr_info" {
     GHC.Event.Array.useAsPtr_info:
         const GHC.Event.Array.useAsPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.243791005 UTC

[section ""data" . GHC.Event.Array.clear2_closure" {
     GHC.Event.Array.clear2_closure:
         const GHC.Event.Array.clear2_info;
 },
 GHC.Event.Array.clear2_entry() //  [R2]
         { []
         }
     {offset
       c7YoG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7YoL; else goto c7YoM;
       c7YoL: // global
           R2 = R2;
           R1 = GHC.Event.Array.clear2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7YoM: // global
           I64[Sp - 8] = block_c7YoD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YoQ; else goto c7YoE;
       u7YoQ: // global
           call _c7YoD(R1) args: 0, res: 0, upd: 0;
       c7YoE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.clear2_info" {
     GHC.Event.Array.clear2_info:
         const GHC.Event.Array.clear2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7YoD() //  [R1]
         { []
         }
     {offset
       c7YoD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YoP; else goto c7YoO;
       c7YoP: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YoO: // global
           _s7WQh::P64 = P64[R1 + 7];
           _s7WQj::I64 = I64[R1 + 23];
           I64[Hp - 48] = GHC.Event.Array.AC_con_info;
           P64[Hp - 40] = _s7WQh::P64;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = _s7WQj::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = GHC.Tuple.()_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YoD_info" {
     block_c7YoD_info:
         const _c7YoD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.250683933 UTC

[section ""data" . GHC.Event.Array.clear1_closure" {
     GHC.Event.Array.clear1_closure:
         const GHC.Event.Array.clear1_info;
 },
 GHC.Event.Array.clear1_entry() //  [R2]
         { []
         }
     {offset
       c7Yp9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ypf; else goto c7Ypg;
       c7Ypf: // global
           R2 = R2;
           R1 = GHC.Event.Array.clear1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ypg: // global
           I64[Sp - 8] = block_c7Yp6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ypo; else goto c7Yp7;
       u7Ypo: // global
           call _c7Yp6(R1) args: 0, res: 0, upd: 0;
       c7Yp7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.clear1_info" {
     GHC.Event.Array.clear1_info:
         const GHC.Event.Array.clear1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7Yp6() //  [R1]
         { []
         }
     {offset
       c7Yp6: // global
           I64[Sp] = block_c7Ypc_info;
           R2 = GHC.Event.Array.clear2_closure+1;
           R1 = P64[R1 + 7];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yp6_info" {
     block_c7Yp6_info:
         const _c7Yp6;
         const 0;
         const 30;
 },
 _c7Ypc() //  [R1]
         { []
         }
     {offset
       c7Ypc: // global
           I64[Sp] = block_c7Ype_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7Ypp; else goto c7Ypj;
       u7Ypp: // global
           call _c7Ype() args: 0, res: 0, upd: 0;
       c7Ypj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ypc_info" {
     block_c7Ypc_info:
         const _c7Ypc;
         const 0;
         const 30;
 },
 _c7Ype() //  []
         { []
         }
     {offset
       c7Ype: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ype_info" {
     block_c7Ype_info:
         const _c7Ype;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.258921793 UTC

[section ""data" . GHC.Event.Array.clear_closure" {
     GHC.Event.Array.clear_closure:
         const GHC.Event.Array.clear_info;
 },
 GHC.Event.Array.clear_entry() //  [R2]
         { []
         }
     {offset
       c7YpL: // global
           R2 = R2;
           call GHC.Event.Array.clear1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.clear_info" {
     GHC.Event.Array.clear_info:
         const GHC.Event.Array.clear_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.261882807 UTC

[section ""cstring" . lvl5_r7WM9_bytes" {
     lvl5_r7WM9_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.264198496 UTC

[section ""data" . lvl6_r7WMa_closure" {
     lvl6_r7WMa_closure:
         const lvl6_r7WMa_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r7WMa_entry() //  [R1]
         { []
         }
     {offset
       c7YpZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Yq0; else goto c7Yq1;
       c7Yq0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yq1: // global
           (_c7YpW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7YpW::I64 == 0) goto c7YpY; else goto c7YpX;
       c7YpY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7YpX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7YpW::I64;
           R2 = lvl5_r7WM9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r7WMa_info" {
     lvl6_r7WMa_info:
         const lvl6_r7WMa_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.267828296 UTC

[section ""cstring" . GHC.Event.Array.$trModule4_bytes" {
     GHC.Event.Array.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.270160212 UTC

[section ""data" . lvl7_r7WMb_closure" {
     lvl7_r7WMb_closure:
         const lvl7_r7WMb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r7WMb_entry() //  [R1]
         { []
         }
     {offset
       c7Yqg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Yqh; else goto c7Yqi;
       c7Yqh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yqi: // global
           (_c7Yqd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Yqd::I64 == 0) goto c7Yqf; else goto c7Yqe;
       c7Yqf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Yqe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Yqd::I64;
           R2 = GHC.Event.Array.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r7WMb_info" {
     lvl7_r7WMb_info:
         const lvl7_r7WMb_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.27405125 UTC

[section ""cstring" . GHC.Event.Array.$trModule2_bytes" {
     GHC.Event.Array.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.27627805 UTC

[section ""data" . lvl8_r7WMc_closure" {
     lvl8_r7WMc_closure:
         const lvl8_r7WMc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r7WMc_entry() //  [R1]
         { []
         }
     {offset
       c7Yqx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Yqy; else goto c7Yqz;
       c7Yqy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yqz: // global
           (_c7Yqu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Yqu::I64 == 0) goto c7Yqw; else goto c7Yqv;
       c7Yqw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Yqv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Yqu::I64;
           R2 = GHC.Event.Array.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_r7WMc_info" {
     lvl8_r7WMc_info:
         const lvl8_r7WMc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.280375989 UTC

[section ""cstring" . lvl9_r7WMd_bytes" {
     lvl9_r7WMd_bytes:
         I8[] [46,47,71,72,67,47,69,118,101,110,116,47,65,114,114,97,121,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.282660001 UTC

[section ""data" . lvl10_r7WMe_closure" {
     lvl10_r7WMe_closure:
         const lvl10_r7WMe_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r7WMe_entry() //  [R1]
         { []
         }
     {offset
       c7YqO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7YqP; else goto c7YqQ;
       c7YqP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YqQ: // global
           (_c7YqL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7YqL::I64 == 0) goto c7YqN; else goto c7YqM;
       c7YqN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7YqM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7YqL::I64;
           R2 = lvl9_r7WMd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_r7WMe_info" {
     lvl10_r7WMe_info:
         const lvl10_r7WMe_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.286281407 UTC

[section ""data" . lvl11_r7WMf_closure" {
     lvl11_r7WMf_closure:
         const GHC.Types.I#_con_info;
         const 179;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.287920269 UTC

[section ""data" . lvl12_r7WMg_closure" {
     lvl12_r7WMg_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.290078265 UTC

[section ""data" . lvl13_r7WMh_closure" {
     lvl13_r7WMh_closure:
         const GHC.Types.I#_con_info;
         const 38;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.291869514 UTC

[section ""data" . lvl14_r7WMi_closure" {
     lvl14_r7WMi_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl11_r7WMf_closure+1;
         const lvl12_r7WMg_closure+1;
         const lvl11_r7WMf_closure+1;
         const lvl13_r7WMh_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.293838777 UTC

[section ""data" . lvl15_r7WMj_closure" {
     lvl15_r7WMj_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl14_r7WMi_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.296797458 UTC

[section ""data" . GHC.Event.Array.forM_1_closure" {
     GHC.Event.Array.forM_1_closure:
         const GHC.Event.Array.forM_1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.forM_1_entry() //  [R1]
         { []
         }
     {offset
       c7Yr9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Yra; else goto c7Yrb;
       c7Yra: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yrb: // global
           (_c7Yr6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Yr6::I64 == 0) goto c7Yr8; else goto c7Yr7;
       c7Yr8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Yr7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Yr6::I64;
           R2 = lvl15_r7WMj_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.forM_1_info" {
     GHC.Event.Array.forM_1_info:
         const GHC.Event.Array.forM_1_entry;
         const 0;
         const 12884901909;
         const S7X3q_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.304203221 UTC

[section ""data" . GHC.Event.Array.forM__closure" {
     GHC.Event.Array.forM__closure:
         const GHC.Event.Array.forM__info;
         const 0;
 },
 size_s7WQu_entry() //  [R1]
         { []
         }
     {offset
       c7Yrr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Yrs; else goto c7Yrt;
       c7Yrs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yrt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.forM_1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . size_s7WQu_info" {
     size_s7WQu_info:
         const size_s7WQu_entry;
         const 1;
         const 4294967312;
         const S7X3q_srt+80;
 },
 sat_s7WR3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c7YrC: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c7YrQ; else goto c7YrR;
       c7YrQ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YrR: // global
           I64[Sp - 32] = block_c7Yrz_info;
           _s7WQt::P64 = P64[R1 + 5];
           _s7WQu::P64 = P64[R1 + 13];
           R1 = R2;
           P64[Sp - 24] = _s7WQt::P64;
           P64[Sp - 16] = _s7WQu::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7YsD; else goto c7YrA;
       u7YsD: // global
           call _c7Yrz(R1) args: 0, res: 0, upd: 0;
       c7YrA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7WR3_info" {
     sat_s7WR3_info:
         const sat_s7WR3_entry;
         const 2;
         const 11;
         const 12884901903;
 },
 _c7Yrz() //  [R1]
         { []
         }
     {offset
       c7Yrz: // global
           _s7WQC::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7YrF_info;
           R1 = _s7WQC::P64;
           if (R1 & 7 != 0) goto u7YsC; else goto c7YrG;
       u7YsC: // global
           call _c7YrF(R1) args: 0, res: 0, upd: 0;
       c7YrG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yrz_info" {
     block_c7Yrz_info:
         const _c7Yrz;
         const 3;
         const 30;
 },
 _c7YrF() //  [R1]
         { []
         }
     {offset
       c7YrF: // global
           I64[Sp - 8] = block_c7YrK_info;
           _s7WQF::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7WQF::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YsE; else goto c7YrL;
       u7YsE: // global
           call _c7YrK(R1) args: 0, res: 0, upd: 0;
       c7YrL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YrF_info" {
     block_c7YrF_info:
         const _c7YrF;
         const 3;
         const 30;
 },
 _c7YrK() //  [R1]
         { []
         }
     {offset
       c7YrK: // global
           I64[Sp - 8] = block_c7YrP_info;
           _s7WQJ::P64 = P64[R1 + 7];
           _s7WQI::I64 = I64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s7WQJ::P64;
           I64[Sp + 24] = _s7WQI::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YsF; else goto c7YrV;
       u7YsF: // global
           call _c7YrP(R1) args: 0, res: 0, upd: 0;
       c7YrV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YrK_info" {
     block_c7YrK_info:
         const _c7YrK;
         const 68;
         const 30;
 },
 _c7YrP() //  [R1]
         { []
         }
     {offset
       c7YrP: // global
           I64[Sp - 8] = 0;
           _s7WQL::I64 = I64[R1 + 7];
           I64[Sp] = I64[Sp + 16] * _s7WQL::I64;
           I64[Sp + 16] = _s7WQL::I64;
           Sp = Sp - 8;
           call _c7Ysc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7YrP_info" {
     block_c7YrP_info:
         const _c7YrP;
         const 645;
         const 30;
 },
 _c7Ysc() //  []
         { []
         }
     {offset
       c7Ysc: // global
           Hp = Hp + 16;
           _s7WQR::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c7Ysg; else goto c7Ysf;
       c7Ysg: // global
           HpAlloc = 16;
           I64[Sp] = block_c7Ysb_info;
           R1 = _s7WQR::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7Ysf: // global
           if (%MO_S_Lt_W64(_s7WQR::I64,
                            I64[Sp + 8])) goto c7Yss; else goto c7Ysw;
       c7Yss: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 40] + _s7WQR::I64;
           I64[Sp - 8] = block_c7Yso_info;
           R2 = P64[Sp + 32];
           I64[Sp - 24] = stg_ap_pv_info;
           P64[Sp - 16] = Hp - 7;
           Sp = Sp - 24;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 8, upd: 8;
       c7Ysw: // global
           Hp = Hp - 16;
           call MO_Touch(P64[Sp + 16]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Ysb() //  [R1]
         { []
         }
     {offset
       c7Ysb: // global
           I64[Sp] = R1;
           call _c7Ysc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Ysb_info" {
     block_c7Ysb_info:
         const _c7Ysb;
         const 1350;
         const 30;
 },
 _c7Yso() //  [R1]
         { []
         }
     {offset
       c7Yso: // global
           I64[Sp] = block_c7Ysq_info;
           R2 = R1;
           R1 = P64[Sp + 56];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yso_info" {
     block_c7Yso_info:
         const _c7Yso;
         const 2759;
         const 30;
 },
 _c7Ysq() //  []
         { []
         }
     {offset
       c7Ysq: // global
           I64[Sp + 8] = I64[Sp + 8] + I64[Sp + 32];
           Sp = Sp + 8;
           call _c7Ysc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Ysq_info" {
     block_c7Ysq_info:
         const _c7Ysq;
         const 2759;
         const 30;
 },
 GHC.Event.Array.forM__entry() //  [R2]
         { []
         }
     {offset
       c7YsJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7YsN; else goto c7YsM;
       c7YsN: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Event.Array.forM__closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7YsM: // global
           I64[Hp - 40] = size_s7WQu_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s7WR3_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.forM__info" {
     GHC.Event.Array.forM__info:
         const GHC.Event.Array.forM__entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S7X3q_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.323325926 UTC

[section ""data" . lvl16_r7WMk_closure" {
     lvl16_r7WMk_closure:
         const GHC.Types.I#_con_info;
         const 194;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.324983908 UTC

[section ""data" . lvl17_r7WMl_closure" {
     lvl17_r7WMl_closure:
         const GHC.Types.I#_con_info;
         const 33;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.326578764 UTC

[section ""data" . lvl18_r7WMm_closure" {
     lvl18_r7WMm_closure:
         const GHC.Types.I#_con_info;
         const 42;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.328254948 UTC

[section ""data" . lvl19_r7WMn_closure" {
     lvl19_r7WMn_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl16_r7WMk_closure+1;
         const lvl17_r7WMl_closure+1;
         const lvl16_r7WMk_closure+1;
         const lvl18_r7WMm_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.330397315 UTC

[section ""data" . lvl20_r7WMo_closure" {
     lvl20_r7WMo_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl19_r7WMn_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.332689632 UTC

[section ""data" . GHC.Event.Array.loop1_closure" {
     GHC.Event.Array.loop1_closure:
         const GHC.Event.Array.loop1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.loop1_entry() //  [R1]
         { []
         }
     {offset
       c7YtN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7YtO; else goto c7YtP;
       c7YtO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YtP: // global
           (_c7YtK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7YtK::I64 == 0) goto c7YtM; else goto c7YtL;
       c7YtM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7YtL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7YtK::I64;
           R2 = lvl20_r7WMo_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.loop1_info" {
     GHC.Event.Array.loop1_info:
         const GHC.Event.Array.loop1_entry;
         const 0;
         const 73014444053;
         const S7X3q_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.340955144 UTC

[section ""data" . GHC.Event.Array.loop_closure" {
     GHC.Event.Array.loop_closure:
         const GHC.Event.Array.loop_info;
         const 0;
 },
 size_s7WR5_entry() //  [R1]
         { []
         }
     {offset
       c7Yu5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Yu6; else goto c7Yu7;
       c7Yu6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yu7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.loop1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . size_s7WR5_info" {
     size_s7WR5_info:
         const size_s7WR5_entry;
         const 1;
         const 4294967312;
         const S7X3q_srt+104;
 },
 sat_s7WRN_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c7Yug: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c7Yuu; else goto c7Yuv;
       c7Yuu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Yuv: // global
           I64[Sp - 40] = block_c7Yud_info;
           _s7WR4::P64 = P64[R1 + 4];
           _s7WR5::P64 = P64[R1 + 12];
           R1 = R2;
           P64[Sp - 32] = _s7WR4::P64;
           P64[Sp - 24] = _s7WR5::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7YvG; else goto c7Yue;
       u7YvG: // global
           call _c7Yud(R1) args: 0, res: 0, upd: 0;
       c7Yue: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7WRN_info" {
     sat_s7WRN_info:
         const sat_s7WRN_entry;
         const 2;
         const 11;
         const 17179869207;
 },
 _c7Yud() //  [R1]
         { []
         }
     {offset
       c7Yud: // global
           _s7WRe::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7Yuj_info;
           R1 = _s7WRe::P64;
           if (R1 & 7 != 0) goto u7YvF; else goto c7Yuk;
       u7YvF: // global
           call _c7Yuj(R1) args: 0, res: 0, upd: 0;
       c7Yuk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yud_info" {
     block_c7Yud_info:
         const _c7Yud;
         const 4;
         const 30;
 },
 _c7Yuj() //  [R1]
         { []
         }
     {offset
       c7Yuj: // global
           I64[Sp - 8] = block_c7Yuo_info;
           _s7WRh::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7WRh::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YvH; else goto c7Yup;
       u7YvH: // global
           call _c7Yuo(R1) args: 0, res: 0, upd: 0;
       c7Yup: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yuj_info" {
     block_c7Yuj_info:
         const _c7Yuj;
         const 4;
         const 30;
 },
 _c7Yuo() //  [R1]
         { []
         }
     {offset
       c7Yuo: // global
           I64[Sp - 8] = block_c7Yut_info;
           _s7WRl::P64 = P64[R1 + 7];
           _s7WRk::I64 = I64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s7WRl::P64;
           I64[Sp + 24] = _s7WRk::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YvI; else goto c7Yuz;
       u7YvI: // global
           call _c7Yut(R1) args: 0, res: 0, upd: 0;
       c7Yuz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yuo_info" {
     block_c7Yuo_info:
         const _c7Yuo;
         const 69;
         const 30;
 },
 _c7Yut() //  [R1]
         { []
         }
     {offset
       c7Yut: // global
           P64[Sp - 8] = P64[Sp + 40];
           I64[Sp] = 0;
           _s7WRn::I64 = I64[R1 + 7];
           I64[Sp + 16] = I64[Sp + 16] * _s7WRn::I64;
           I64[Sp + 40] = _s7WRn::I64;
           Sp = Sp - 16;
           call _c7YuV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Yut_info" {
     block_c7Yut_info:
         const _c7Yut;
         const 646;
         const 30;
 },
 _c7YuV() //  []
         { []
         }
     {offset
       c7YuV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Yv0; else goto c7YuZ;
       c7Yv0: // global
           HpAlloc = 16;
           I64[Sp] = block_c7YuV_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7YuZ: // global
           _s7WRw::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s7WRw::I64,
                            I64[Sp + 32])) goto c7Yve; else goto c7Yvy;
       c7Yve: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 48] + _s7WRw::I64;
           I64[Sp] = block_c7Yv8_info;
           R2 = P64[Sp + 40];
           I64[Sp - 16] = stg_ap_pv_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 8, upd: 8;
       c7Yvy: // global
           Hp = Hp - 16;
           call MO_Touch(P64[Sp + 24]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YuV_info" {
     block_c7YuV_info:
         const _c7YuV;
         const 6792;
         const 30;
 },
 _c7Yv8() //  [R1]
         { []
         }
     {offset
       c7Yv8: // global
           _s7WRx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7Yva_info;
           R3 = R1;
           R2 = _s7WRx::P64;
           R1 = P64[Sp + 64];
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yv8_info" {
     block_c7Yv8_info:
         const _c7Yv8;
         const 6792;
         const 30;
 },
 _c7Yva() //  [R1]
         { []
         }
     {offset
       c7Yva: // global
           I64[Sp] = block_c7Yvc_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7YvK; else goto c7Yvh;
       u7YvK: // global
           call _c7Yvc(R1) args: 0, res: 0, upd: 0;
       c7Yvh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yva_info" {
     block_c7Yva_info:
         const _c7Yva;
         const 3399;
         const 30;
 },
 _c7Yvc() //  [R1]
         { []
         }
     {offset
       c7Yvc: // global
           I64[Sp - 8] = block_c7Yvl_info;
           _s7WRJ::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s7WRJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YvL; else goto c7Yvn;
       u7YvL: // global
           call _c7Yvl(R1) args: 0, res: 0, upd: 0;
       c7Yvn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yvc_info" {
     block_c7Yvc_info:
         const _c7Yvc;
         const 3399;
         const 30;
 },
 _c7Yvl() //  [R1]
         { []
         }
     {offset
       c7Yvl: // global
           if (R1 & 7 == 1) goto c7Yvt; else goto c7Yvx;
       c7Yvt: // global
           call MO_Touch(P64[Sp + 24]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Yvx: // global
           I64[Sp + 16] = I64[Sp + 16] + I64[Sp + 56];
           P64[Sp + 8] = P64[Sp + 8];
           call _c7YuV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Yvl_info" {
     block_c7Yvl_info:
         const _c7Yvl;
         const 6792;
         const 30;
 },
 GHC.Event.Array.loop_entry() //  [R2]
         { []
         }
     {offset
       c7YvN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7YvR; else goto c7YvQ;
       c7YvR: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Event.Array.loop_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7YvQ: // global
           I64[Hp - 40] = size_s7WR5_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s7WRN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.loop_info" {
     GHC.Event.Array.loop_info:
         const GHC.Event.Array.loop_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S7X3q_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.363276744 UTC

[section ""data" . GHC.Event.Array.$trModule3_closure" {
     GHC.Event.Array.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.36495606 UTC

[section ""data" . GHC.Event.Array.$trModule1_closure" {
     GHC.Event.Array.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.367051286 UTC

[section ""data" . GHC.Event.Array.$trModule_closure" {
     GHC.Event.Array.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Array.$trModule3_closure+1;
         const GHC.Event.Array.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.368973504 UTC

[section ""data" . $krep_r7WMp_closure" {
     $krep_r7WMp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.37128799 UTC

[section ""data" . $krep1_r7WMq_closure" {
     $krep1_r7WMq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.372986938 UTC

[section ""data" . $krep2_r7WMr_closure" {
     $krep2_r7WMr_closure:
         const :_con_info;
         const $krep1_r7WMq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.374765733 UTC

[section ""data" . $krep3_r7WMs_closure" {
     $krep3_r7WMs_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep2_r7WMr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.376438718 UTC

[section ""cstring" . GHC.Event.Array.$tcAC2_bytes" {
     GHC.Event.Array.$tcAC2_bytes:
         I8[] [65,67]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.378482841 UTC

[section ""data" . GHC.Event.Array.$tcAC1_closure" {
     GHC.Event.Array.$tcAC1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$tcAC2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.380295045 UTC

[section ""data" . GHC.Event.Array.$tcAC_closure" {
     GHC.Event.Array.$tcAC_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Array.$trModule_closure+1;
         const GHC.Event.Array.$tcAC1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 14339520722473255067;
         const 15778732457674388659;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.382245461 UTC

[section ""data" . $krep4_r7WMt_closure" {
     $krep4_r7WMt_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcAC_closure+1;
         const $krep2_r7WMr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.384031679 UTC

[section ""data" . $krep5_r7WMu_closure" {
     $krep5_r7WMu_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7WMp_closure+1;
         const $krep4_r7WMt_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.386058942 UTC

[section ""data" . $krep6_r7WMv_closure" {
     $krep6_r7WMv_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7WMp_closure+1;
         const $krep5_r7WMu_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.387797235 UTC

[section ""data" . GHC.Event.Array.$tc'AC1_closure" {
     GHC.Event.Array.$tc'AC1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7WMs_closure+1;
         const $krep6_r7WMv_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.389609017 UTC

[section ""cstring" . GHC.Event.Array.$tc'AC3_bytes" {
     GHC.Event.Array.$tc'AC3_bytes:
         I8[] [39,65,67]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.391376823 UTC

[section ""data" . GHC.Event.Array.$tc'AC2_closure" {
     GHC.Event.Array.$tc'AC2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$tc'AC3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.393838508 UTC

[section ""data" . GHC.Event.Array.$tc'AC_closure" {
     GHC.Event.Array.$tc'AC_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Array.$trModule_closure+1;
         const GHC.Event.Array.$tc'AC2_closure+1;
         const GHC.Event.Array.$tc'AC1_closure+4;
         const 954782197074941232;
         const 8411064637322477330;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.395647279 UTC

[section ""data" . $krep7_r7WMw_closure" {
     $krep7_r7WMw_closure:
         const :_con_info;
         const $krep4_r7WMt_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.397430913 UTC

[section ""data" . $krep8_r7WMx_closure" {
     $krep8_r7WMx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep7_r7WMw_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.399146602 UTC

[section ""cstring" . GHC.Event.Array.$tcArray2_bytes" {
     GHC.Event.Array.$tcArray2_bytes:
         I8[] [65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.400794935 UTC

[section ""data" . GHC.Event.Array.$tcArray1_closure" {
     GHC.Event.Array.$tcArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$tcArray2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.402951528 UTC

[section ""data" . GHC.Event.Array.$tcArray_closure" {
     GHC.Event.Array.$tcArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Array.$trModule_closure+1;
         const GHC.Event.Array.$tcArray1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 18201768782471713089;
         const 1209293416176401920;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.4047587 UTC

[section ""data" . $krep9_r7WMy_closure" {
     $krep9_r7WMy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcArray_closure+1;
         const $krep2_r7WMr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.406509778 UTC

[section ""data" . GHC.Event.Array.$tc'Array1_closure" {
     GHC.Event.Array.$tc'Array1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7WMx_closure+1;
         const $krep9_r7WMy_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.408256728 UTC

[section ""cstring" . GHC.Event.Array.$tc'Array3_bytes" {
     GHC.Event.Array.$tc'Array3_bytes:
         I8[] [39,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.409997177 UTC

[section ""data" . GHC.Event.Array.$tc'Array2_closure" {
     GHC.Event.Array.$tc'Array2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$tc'Array3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.411851517 UTC

[section ""data" . GHC.Event.Array.$tc'Array_closure" {
     GHC.Event.Array.$tc'Array_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Array.$trModule_closure+1;
         const GHC.Event.Array.$tc'Array2_closure+1;
         const GHC.Event.Array.$tc'Array1_closure+4;
         const 1928439007980526225;
         const 8720085055779125030;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.413823998 UTC

[section ""data" . lvl21_r7WMz_closure" {
     lvl21_r7WMz_closure:
         const GHC.Types.I#_con_info;
         const 265;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.415650133 UTC

[section ""data" . lvl22_r7WMA_closure" {
     lvl22_r7WMA_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl21_r7WMz_closure+1;
         const lvl12_r7WMg_closure+1;
         const lvl21_r7WMz_closure+1;
         const lvl13_r7WMh_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.41851056 UTC

[section ""data" . lvl23_r7WMB_closure" {
     lvl23_r7WMB_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl22_r7WMA_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.420920157 UTC

[section ""data" . GHC.Event.Array.removeAt2_closure" {
     GHC.Event.Array.removeAt2_closure:
         const GHC.Event.Array.removeAt2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.removeAt2_entry() //  [R1]
         { []
         }
     {offset
       c7Yxr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Yxs; else goto c7Yxt;
       c7Yxs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yxt: // global
           (_c7Yxo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Yxo::I64 == 0) goto c7Yxq; else goto c7Yxp;
       c7Yxq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Yxp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Yxo::I64;
           R2 = lvl23_r7WMB_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.removeAt2_info" {
     GHC.Event.Array.removeAt2_info:
         const GHC.Event.Array.removeAt2_entry;
         const 0;
         const 554050781205;
         const S7X3q_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.424586711 UTC

[section ""cstring" . lvl24_r7WMC_bytes" {
     lvl24_r7WMC_bytes:
         I8[] [114,101,109,111,118,101,65,116,58,32,105,110,118,97,108,105,100,32,105,110,100,101,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.427119146 UTC

[section ""data" . GHC.Event.Array.removeAt1_closure" {
     GHC.Event.Array.removeAt1_closure:
         const GHC.Event.Array.removeAt1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.removeAt1_entry() //  [R1]
         { []
         }
     {offset
       c7YxK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7YxL; else goto c7YxM;
       c7YxL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YxM: // global
           (_c7YxF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7YxF::I64 == 0) goto c7YxH; else goto c7YxG;
       c7YxH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7YxG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7YxF::I64;
           I64[Sp - 24] = block_c7YxI_info;
           R2 = lvl24_r7WMC_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.removeAt1_info" {
     GHC.Event.Array.removeAt1_info:
         const GHC.Event.Array.removeAt1_entry;
         const 0;
         const 4294967317;
         const S7X3q_srt;
 },
 _c7YxI() //  [R1]
         { []
         }
     {offset
       c7YxI: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7YxI_info" {
     block_c7YxI_info:
         const _c7YxI;
         const 0;
         const 4294967326;
         const S7X3q_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.437464155 UTC

[section ""data" . GHC.Event.Array.removeAt_closure" {
     GHC.Event.Array.removeAt_closure:
         const GHC.Event.Array.removeAt_info;
         const 0;
 },
 size_s7WRQ_entry() //  [R1]
         { []
         }
     {offset
       c7Yy8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Yy9; else goto c7Yya;
       c7Yy9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Yya: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.removeAt2_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . size_s7WRQ_info" {
     size_s7WRQ_info:
         const size_s7WRQ_entry;
         const 1;
         const 4294967312;
         const S7X3q_srt+128;
 },
 sat_s7WSA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c7Yyj: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7Yyx; else goto c7Yyy;
       c7Yyx: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Yyy: // global
           I64[Sp - 24] = block_c7Yyg_info;
           _s7WRQ::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 16] = _s7WRQ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7YA0; else goto c7Yyh;
       u7YA0: // global
           call _c7Yyg(R1) args: 0, res: 0, upd: 0;
       c7Yyh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7WSA_info" {
     sat_s7WSA_info:
         const sat_s7WSA_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const S7X3q_srt+136;
 },
 _c7Yyg() //  [R1]
         { []
         }
     {offset
       c7Yyg: // global
           I64[Sp - 8] = block_c7Yym_info;
           _s7WRV::P64 = P64[R1 + 7];
           R1 = P64[_s7WRV::P64 + 8];
           P64[Sp] = _s7WRV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YzZ; else goto c7Yyn;
       u7YzZ: // global
           call _c7Yym(R1) args: 0, res: 0, upd: 0;
       c7Yyn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yyg_info" {
     block_c7Yyg_info:
         const _c7Yyg;
         const 2;
         const 4294967326;
         const S7X3q_srt+136;
 },
 _c7Yym() //  [R1]
         { []
         }
     {offset
       c7Yym: // global
           I64[Sp - 16] = block_c7Yyr_info;
           _s7WS1::I64 = I64[R1 + 15];
           _s7WS2::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _s7WS2::I64;
           I64[Sp] = _s7WS1::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7YA1; else goto c7Yys;
       u7YA1: // global
           call _c7Yyr(R1) args: 0, res: 0, upd: 0;
       c7Yys: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yym_info" {
     block_c7Yym_info:
         const _c7Yym;
         const 3;
         const 4294967326;
         const S7X3q_srt+136;
 },
 _c7Yyr() //  [R1]
         { []
         }
     {offset
       c7Yyr: // global
           I64[Sp - 16] = block_c7Yyw_info;
           _s7WS3::P64 = R1;
           _s7WS5::P64 = P64[R1 + 7];
           _s7WS4::I64 = I64[R1 + 15];
           R1 = P64[Sp + 40];
           P64[Sp - 8] = _s7WS5::P64;
           I64[Sp] = _s7WS4::I64;
           P64[Sp + 40] = _s7WS3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7YA2; else goto c7YyC;
       u7YA2: // global
           call _c7Yyw(R1) args: 0, res: 0, upd: 0;
       c7YyC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yyr_info" {
     block_c7Yyr_info:
         const _c7Yyr;
         const 197;
         const 4294967326;
         const S7X3q_srt+136;
 },
 _c7Yyw() //  [R1]
         { []
         }
     {offset
       c7Yyw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YyI; else goto c7YyH;
       c7YyI: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YyH: // global
           _s7WS7::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s7WS7::I64, 0)) goto c7Yzj; else goto c7Yzi;
       c7Yzi: // global
           _s7WS1::I64 = I64[Sp + 32];
           if (%MO_S_Ge_W64(_s7WS7::I64,
                            _s7WS1::I64)) goto c7Yzj; else goto c7Yzf;
       c7Yzj: // global
           Hp = Hp - 32;
           R1 = GHC.Event.Array.removeAt1_closure;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7Yzf: // global
           _s7WRV::P64 = P64[Sp + 40];
           _s7WS2::I64 = I64[Sp + 24];
           _s7WS3::P64 = P64[Sp + 56];
           _s7WSa::I64 = _s7WS1::I64 - 1;
           if (%MO_S_Le_W64(_s7WSa::I64, 0)) goto c7YyV; else goto c7Yzd;
       c7YyV: // global
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = _s7WS3::P64;
           I64[Hp - 8] = _s7WSa::I64;
           I64[Hp] = _s7WS2::I64;
           call MO_WriteBarrier();
           P64[_s7WRV::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WRV::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Yzd: // global
           if (%MO_S_Ge_W64(_s7WS7::I64,
                            _s7WSa::I64)) goto c7Yz1; else goto c7Yz5;
       c7Yz1: // global
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = _s7WS3::P64;
           I64[Hp - 8] = _s7WSa::I64;
           I64[Hp] = _s7WS2::I64;
           call MO_WriteBarrier();
           P64[_s7WRV::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WRV::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Yz5: // global
           Hp = Hp - 32;
           I64[Sp] = block_c7Yz4_info;
           R1 = P64[Sp + 48];
           I64[Sp + 32] = _s7WSa::I64;
           I64[Sp + 48] = _s7WS7::I64;
           if (R1 & 7 != 0) goto u7YA3; else goto c7Yz6;
       u7YA3: // global
           call _c7Yz4(R1) args: 0, res: 0, upd: 0;
       c7Yz6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yyw_info" {
     block_c7Yyw_info:
         const _c7Yyw;
         const 903;
         const 4294967326;
         const S7X3q_srt+136;
 },
 _c7Yz4() //  [R1]
         { []
         }
     {offset
       c7Yz4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Yzc; else goto c7Yzb;
       c7Yzc: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Yzb: // global
           _s7WRV::P64 = P64[Sp + 40];
           _s7WS2::I64 = I64[Sp + 24];
           _s7WS3::P64 = P64[Sp + 56];
           _s7WS4::I64 = I64[Sp + 16];
           _s7WS5::P64 = P64[Sp + 8];
           _s7WS7::I64 = I64[Sp + 48];
           _s7WSa::I64 = I64[Sp + 32];
           _s7WSi::I64 = I64[R1 + 7];
           (_s7WSu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memmove(_s7WS4::I64 + _s7WSi::I64 * _s7WS7::I64, _s7WS4::I64 + _s7WSi::I64 * (_s7WS7::I64 + 1), _s7WSi::I64 * (_s7WSa::I64 - _s7WS7::I64));
           call MO_Touch(_s7WS5::P64);
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = _s7WS3::P64;
           I64[Hp - 8] = _s7WSa::I64;
           I64[Hp] = _s7WS2::I64;
           call MO_WriteBarrier();
           P64[_s7WRV::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WRV::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Yz4_info" {
     block_c7Yz4_info:
         const _c7Yz4;
         const 2951;
         const 30;
 },
 GHC.Event.Array.removeAt_entry() //  [R2]
         { []
         }
     {offset
       c7YA4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7YA8; else goto c7YA7;
       c7YA8: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Event.Array.removeAt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7YA7: // global
           I64[Hp - 32] = size_s7WRQ_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s7WSA_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.removeAt_info" {
     GHC.Event.Array.removeAt_info:
         const GHC.Event.Array.removeAt_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S7X3q_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.457997348 UTC

[section ""data" . lvl25_r7WMD_closure" {
     lvl25_r7WMD_closure:
         const GHC.Types.I#_con_info;
         const 211;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.459746076 UTC

[section ""data" . lvl26_r7WME_closure" {
     lvl26_r7WME_closure:
         const GHC.Types.I#_con_info;
         const 22;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.461699485 UTC

[section ""data" . lvl27_r7WMF_closure" {
     lvl27_r7WMF_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.463931243 UTC

[section ""data" . lvl28_r7WMG_closure" {
     lvl28_r7WMG_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl25_r7WMD_closure+1;
         const lvl26_r7WME_closure+1;
         const lvl25_r7WMD_closure+1;
         const lvl27_r7WMF_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.466067101 UTC

[section ""data" . lvl29_r7WMH_closure" {
     lvl29_r7WMH_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl28_r7WMG_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.468649858 UTC

[section ""data" . GHC.Event.Array.findIndex1_closure" {
     GHC.Event.Array.findIndex1_closure:
         const GHC.Event.Array.findIndex1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.findIndex1_entry() //  [R1]
         { []
         }
     {offset
       c7YBd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7YBe; else goto c7YBf;
       c7YBe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YBf: // global
           (_c7YBa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7YBa::I64 == 0) goto c7YBc; else goto c7YBb;
       c7YBc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7YBb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7YBa::I64;
           R2 = lvl29_r7WMH_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.findIndex1_info" {
     GHC.Event.Array.findIndex1_info:
         const GHC.Event.Array.findIndex1_entry;
         const 0;
         const 8800387989525;
         const S7X3q_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.477764122 UTC

[section ""data" . GHC.Event.Array.findIndex_closure" {
     GHC.Event.Array.findIndex_closure:
         const GHC.Event.Array.findIndex_info;
         const 0;
 },
 size_s7WSC_entry() //  [R1]
         { []
         }
     {offset
       c7YBv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7YBw; else goto c7YBx;
       c7YBw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YBx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.findIndex1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . size_s7WSC_info" {
     size_s7WSC_info:
         const size_s7WSC_entry;
         const 1;
         const 4294967312;
         const S7X3q_srt+160;
 },
 sat_s7WTj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c7YBG: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c7YBU; else goto c7YBV;
       c7YBU: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YBV: // global
           I64[Sp - 32] = block_c7YBD_info;
           _s7WSB::P64 = P64[R1 + 5];
           _s7WSC::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 24] = _s7WSB::P64;
           P64[Sp - 16] = _s7WSC::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7YD5; else goto c7YBE;
       u7YD5: // global
           call _c7YBD(R1) args: 0, res: 0, upd: 0;
       c7YBE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7WTj_info" {
     sat_s7WTj_info:
         const sat_s7WTj_entry;
         const 2;
         const 11;
         const 12884901903;
 },
 _c7YBD() //  [R1]
         { []
         }
     {offset
       c7YBD: // global
           _s7WSK::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7YBJ_info;
           R1 = _s7WSK::P64;
           if (R1 & 7 != 0) goto u7YD4; else goto c7YBK;
       u7YD4: // global
           call _c7YBJ(R1) args: 0, res: 0, upd: 0;
       c7YBK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YBD_info" {
     block_c7YBD_info:
         const _c7YBD;
         const 3;
         const 30;
 },
 _c7YBJ() //  [R1]
         { []
         }
     {offset
       c7YBJ: // global
           I64[Sp - 8] = block_c7YBO_info;
           _s7WSN::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7WSN::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YD6; else goto c7YBP;
       u7YD6: // global
           call _c7YBO(R1) args: 0, res: 0, upd: 0;
       c7YBP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YBJ_info" {
     block_c7YBJ_info:
         const _c7YBJ;
         const 3;
         const 30;
 },
 _c7YBO() //  [R1]
         { []
         }
     {offset
       c7YBO: // global
           I64[Sp - 8] = block_c7YBT_info;
           _s7WSR::P64 = P64[R1 + 7];
           _s7WSQ::I64 = I64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s7WSR::P64;
           I64[Sp + 24] = _s7WSQ::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YD7; else goto c7YBZ;
       u7YD7: // global
           call _c7YBT(R1) args: 0, res: 0, upd: 0;
       c7YBZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YBO_info" {
     block_c7YBO_info:
         const _c7YBO;
         const 68;
         const 30;
 },
 _c7YBT() //  [R1]
         { []
         }
     {offset
       c7YBT: // global
           I64[Sp - 16] = 0;
           I64[Sp - 8] = 0;
           _s7WST::I64 = I64[R1 + 7];
           I64[Sp] = I64[Sp + 16] * _s7WST::I64;
           I64[Sp + 16] = _s7WST::I64;
           Sp = Sp - 24;
           call _c7YCr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7YBT_info" {
     block_c7YBT_info:
         const _c7YBT;
         const 645;
         const 30;
 },
 _c7YCr() //  []
         { []
         }
     {offset
       c7YCr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7YCw; else goto c7YCv;
       c7YCw: // global
           HpAlloc = 16;
           I64[Sp] = block_c7YCr_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7YCv: // global
           _s7WT7::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s7WT7::I64,
                            I64[Sp + 24])) goto c7YCI; else goto c7YCU;
       c7YCI: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 56] + _s7WT7::I64;
           I64[Sp] = block_c7YCE_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_pv_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 8, upd: 8;
       c7YCU: // global
           Hp = Hp - 16;
           call MO_Touch(P64[Sp + 32]);
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YCr_info" {
     block_c7YCr_info:
         const _c7YCr;
         const 5576;
         const 30;
 },
 _c7YCE() //  [R1]
         { []
         }
     {offset
       c7YCE: // global
           I64[Sp - 8] = block_c7YCG_info;
           R2 = R1;
           _s7WTf::P64 = R1;
           R1 = P64[Sp + 64];
           P64[Sp] = _s7WTf::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YCE_info" {
     block_c7YCE_info:
         const _c7YCE;
         const 5576;
         const 30;
 },
 _c7YCG() //  [R1]
         { []
         }
     {offset
       c7YCG: // global
           _s7WT8::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c7YCP; else goto c7YCT;
       c7YCP: // global
           I64[Sp + 16] = I64[Sp + 16] + I64[Sp + 48];
           I64[Sp + 24] = _s7WT8::I64 + 1;
           Sp = Sp + 8;
           call _c7YCr() args: 0, res: 0, upd: 0;
       c7YCT: // global
           P64[Sp + 64] = P64[Sp + 8];
           I64[Sp + 72] = _s7WT8::I64;
           Sp = Sp + 32;
           call _c7YC9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7YCG_info" {
     block_c7YCG_info:
         const _c7YCG;
         const 11145;
         const 30;
 },
 _c7YC9() //  []
         { []
         }
     {offset
       c7YC9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YCi; else goto c7YCh;
       c7YCi: // global
           HpAlloc = 56;
           I64[Sp] = block_c7YC9_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7YCh: // global
           _s7WSW::I64 = I64[Sp + 40];
           _s7WSY::P64 = P64[Sp + 32];
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s7WSW::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s7WSY::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YC9_info" {
     block_c7YC9_info:
         const _c7YC9;
         const 1413;
         const 30;
 },
 GHC.Event.Array.findIndex_entry() //  [R2]
         { []
         }
     {offset
       c7YDb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7YDf; else goto c7YDe;
       c7YDf: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Event.Array.findIndex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7YDe: // global
           I64[Hp - 40] = size_s7WSC_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s7WTj_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.findIndex_info" {
     GHC.Event.Array.findIndex_info:
         const GHC.Event.Array.findIndex_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S7X3q_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.500987048 UTC

[section ""data" . lvl30_r7WMI_closure" {
     lvl30_r7WMI_closure:
         const GHC.Types.I#_con_info;
         const 74;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.503100047 UTC

[section ""data" . lvl31_r7WMJ_closure" {
     lvl31_r7WMJ_closure:
         const GHC.Types.I#_con_info;
         const 46;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.504737254 UTC

[section ""data" . lvl32_r7WMK_closure" {
     lvl32_r7WMK_closure:
         const GHC.Types.I#_con_info;
         const 55;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.506480554 UTC

[section ""data" . lvl33_r7WML_closure" {
     lvl33_r7WML_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl30_r7WMI_closure+1;
         const lvl31_r7WMJ_closure+1;
         const lvl30_r7WMI_closure+1;
         const lvl32_r7WMK_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.508099547 UTC

[section ""data" . lvl34_r7WMM_closure" {
     lvl34_r7WMM_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl33_r7WML_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.510660762 UTC

[section ""data" . GHC.Event.Array.ensureCapacity2_closure" {
     GHC.Event.Array.ensureCapacity2_closure:
         const GHC.Event.Array.ensureCapacity2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.ensureCapacity2_entry() //  [R1]
         { []
         }
     {offset
       c7YEn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7YEo; else goto c7YEp;
       c7YEo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YEp: // global
           (_c7YEk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7YEk::I64 == 0) goto c7YEm; else goto c7YEl;
       c7YEm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7YEl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7YEk::I64;
           R2 = lvl34_r7WMM_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.ensureCapacity2_info" {
     GHC.Event.Array.ensureCapacity2_info:
         const GHC.Event.Array.ensureCapacity2_entry;
         const 0;
         const 70373039144981;
         const S7X3q_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.518561768 UTC

[section ""data" . GHC.Event.Array.$wensureCapacity_closure" {
     GHC.Event.Array.$wensureCapacity_closure:
         const GHC.Event.Array.$wensureCapacity_info;
         const 0;
 },
 GHC.Event.Array.$wensureCapacity_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7YEE: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c7YEI; else goto c7YEJ;
       c7YEI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wensureCapacity_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YEJ: // global
           I64[Sp - 32] = block_c7YEB_info;
           R1 = P64[R3 + 8];
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7YH3; else goto c7YEC;
       u7YH3: // global
           call _c7YEB(R1) args: 0, res: 0, upd: 0;
       c7YEC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wensureCapacity_info" {
     GHC.Event.Array.$wensureCapacity_info:
         const GHC.Event.Array.$wensureCapacity_entry;
         const 0;
         const 30064771086;
         const 17179869206;
         const S7X3q_srt+184;
 },
 _c7YEB() //  [R1]
         { []
         }
     {offset
       c7YEB: // global
           I64[Sp - 16] = block_c7YEH_info;
           _s7WTt::I64 = I64[R1 + 15];
           _s7WTu::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _s7WTu::I64;
           I64[Sp] = _s7WTt::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7YH2; else goto c7YEL;
       u7YH2: // global
           call _c7YEH(R1) args: 0, res: 0, upd: 0;
       c7YEL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YEB_info" {
     block_c7YEB_info:
         const _c7YEB;
         const 259;
         const 21474836510;
         const S7X3q_srt+184;
 },
 _c7YEH() //  [R1]
         { []
         }
     {offset
       c7YEH: // global
           if (%MO_S_Le_W64(I64[Sp + 40],
                            I64[Sp + 8])) goto c7YET; else goto c7YEX;
       c7YET: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7YEX: // global
           I64[Sp - 8] = block_c7YEW_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = GHC.Event.Array.ensureCapacity2_closure;
           P64[Sp] = P64[R1 + 7];
           I64[Sp + 24] = I64[R1 + 15];
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YEH_info" {
     block_c7YEH_info:
         const _c7YEH;
         const 1221;
         const 21474836510;
         const S7X3q_srt+184;
 },
 _c7YEW() //  [R1]
         { []
         }
     {offset
       c7YEW: // global
           _s7WTA::I64 = I64[R1 + 7];
           _s7WTB::I64 = I64[Sp + 48] - 1;
           _s7WTC::I64 = _s7WTB::I64 | %MO_S_Shr_W64(_s7WTB::I64, 1);
           _s7WTE::I64 = _s7WTC::I64 | %MO_S_Shr_W64(_s7WTC::I64, 2);
           _s7WTG::I64 = _s7WTE::I64 | %MO_S_Shr_W64(_s7WTE::I64, 4);
           _s7WTI::I64 = _s7WTG::I64 | %MO_S_Shr_W64(_s7WTG::I64, 8);
           _s7WTK::I64 = _s7WTI::I64 | %MO_S_Shr_W64(_s7WTI::I64, 16);
           _s7WTM::I64 = _s7WTK::I64 | %MO_S_Shr_W64(_s7WTK::I64, 32) + 1;
           _s7WTP::I64 = _s7WTM::I64 * _s7WTA::I64;
           if (%MO_S_Ge_W64(_s7WTP::I64, 0)) goto c7YFQ; else goto c7YGG;
       c7YFQ: // global
           I64[Sp - 8] = block_c7YFO_info;
           R1 = _s7WTP::I64;
           I64[Sp] = _s7WTM::I64;
           I64[Sp + 48] = _s7WTA::I64;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7YGG: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YEW_info" {
     block_c7YEW_info:
         const _c7YEW;
         const 2950;
         const 4294967326;
         const S7X3q_srt+184;
 },
 _c7YFO() //  [R1]
         { []
         }
     {offset
       c7YFO: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7YFU; else goto c7YFT;
       c7YFU: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YFT: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = R1;
           _s7WTl::P64 = P64[Sp + 48];
           _s7WTt::I64 = I64[Sp + 32];
           _s7WTu::I64 = I64[Sp + 24];
           _s7WTw::I64 = I64[Sp + 40];
           _s7WTx::P64 = P64[Sp + 16];
           _s7WTM::I64 = I64[Sp + 8];
           _s7WTU::I64 = R1 + 16;
           _c7YFY::P64 = Hp - 61;
           if (_s7WTw::I64 == 0) goto c7YGF; else goto c7YGx;
       c7YGF: // global
           call MO_Touch(_s7WTx::P64);
           if (_s7WTM::I64 == _s7WTu::I64) goto c7YGD; else goto c7YGE;
       c7YGE: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _c7YFY::P64;
           I64[Hp - 32] = _s7WTU::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7WTt::I64;
           I64[Hp] = _s7WTM::I64;
           call MO_WriteBarrier();
           P64[_s7WTl::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WTl::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7YGx: // global
           if (%MO_S_Le_W64(_s7WTu::I64, 0)) goto c7YGc; else goto c7YGv;
       c7YGc: // global
           call MO_Touch(_s7WTx::P64);
           if (_s7WTM::I64 == _s7WTu::I64) goto c7YGD; else goto c7YGa;
       c7YGa: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _c7YFY::P64;
           I64[Hp - 32] = _s7WTU::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7WTt::I64;
           I64[Hp] = _s7WTM::I64;
           call MO_WriteBarrier();
           P64[_s7WTl::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WTl::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7YGv: // global
           (_s7WU8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7WTU::I64, _s7WTw::I64, _s7WTu::I64 * I64[Sp + 56]);
           call MO_Touch(_c7YFY::P64);
           call MO_Touch(_s7WTx::P64);
           if (_s7WTM::I64 == _s7WTu::I64) goto c7YGD; else goto c7YGu;
       c7YGD: // global
           Hp = Hp - 56;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7YGu: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _c7YFY::P64;
           I64[Hp - 32] = _s7WTU::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7WTt::I64;
           I64[Hp] = _s7WTM::I64;
           call MO_WriteBarrier();
           P64[_s7WTl::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WTl::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YFO_info" {
     block_c7YFO_info:
         const _c7YFO;
         const 5959;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.533486174 UTC

[section ""data" . GHC.Event.Array.ensureCapacity1_closure" {
     GHC.Event.Array.ensureCapacity1_closure:
         const GHC.Event.Array.ensureCapacity1_info;
         const 0;
 },
 GHC.Event.Array.ensureCapacity1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7YI3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7YI7; else goto c7YI8;
       c7YI7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.ensureCapacity1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YI8: // global
           I64[Sp - 24] = block_c7YI0_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7YIg; else goto c7YI1;
       u7YIg: // global
           call _c7YI0(R1) args: 0, res: 0, upd: 0;
       c7YI1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.ensureCapacity1_info" {
     GHC.Event.Array.ensureCapacity1_info:
         const GHC.Event.Array.ensureCapacity1_entry;
         const 0;
         const 21474836494;
         const 17179869207;
         const S7X3q_srt+192;
 },
 _c7YI0() //  [R1]
         { []
         }
     {offset
       c7YI0: // global
           I64[Sp] = block_c7YI6_info;
           _s7WUq::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s7WUq::P64;
           if (R1 & 7 != 0) goto u7YIf; else goto c7YIa;
       u7YIf: // global
           call _c7YI6(R1) args: 0, res: 0, upd: 0;
       c7YIa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YI0_info" {
     block_c7YI0_info:
         const _c7YI0;
         const 2;
         const 4294967326;
         const S7X3q_srt+192;
 },
 _c7YI6() //  [R1]
         { []
         }
     {offset
       c7YI6: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Array.$wensureCapacity_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YI6_info" {
     block_c7YI6_info:
         const _c7YI6;
         const 2;
         const 4294967326;
         const S7X3q_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.540531682 UTC

[section ""data" . GHC.Event.Array.ensureCapacity_closure" {
     GHC.Event.Array.ensureCapacity_closure:
         const GHC.Event.Array.ensureCapacity_info;
         const 0;
 },
 GHC.Event.Array.ensureCapacity_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7YIy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.ensureCapacity1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.ensureCapacity_info" {
     GHC.Event.Array.ensureCapacity_info:
         const GHC.Event.Array.ensureCapacity_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7X3q_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.550093456 UTC

[section ""data" . GHC.Event.Array.$wsnoc_closure" {
     GHC.Event.Array.$wsnoc_closure:
         const GHC.Event.Array.$wsnoc_info;
         const 0;
 },
 GHC.Event.Array.$wsnoc_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7YIM: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c7YIQ; else goto c7YIR;
       c7YIQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wsnoc_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YIR: // global
           I64[Sp - 32] = block_c7YIJ_info;
           R1 = P64[R3 + 8];
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7YLh; else goto c7YIK;
       u7YLh: // global
           call _c7YIJ(R1) args: 0, res: 0, upd: 0;
       c7YIK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wsnoc_info" {
     GHC.Event.Array.$wsnoc_info:
         const GHC.Event.Array.$wsnoc_entry;
         const 0;
         const 23643902338662414;
         const 17179869207;
         const S7X3q_srt+40;
 },
 _c7YIJ() //  [R1]
         { []
         }
     {offset
       c7YIJ: // global
           I64[Sp - 16] = block_c7YIP_info;
           _s7WUC::I64 = I64[R1 + 15];
           _s7WUD::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _s7WUD::I64;
           I64[Sp] = _s7WUC::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7YLg; else goto c7YIT;
       u7YLg: // global
           call _c7YIP(R1) args: 0, res: 0, upd: 0;
       c7YIT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YIJ_info" {
     block_c7YIJ_info:
         const _c7YIJ;
         const 3;
         const 5629503829180446;
         const S7X3q_srt+40;
 },
 _c7YIP() //  [R1]
         { []
         }
     {offset
       c7YIP: // global
           _s7WUt::P64 = P64[Sp + 24];
           _s7WUC::I64 = I64[Sp + 16];
           _s7WUD::I64 = I64[Sp + 8];
           _s7WUG::P64 = P64[R1 + 7];
           _s7WUF::I64 = I64[R1 + 15];
           _s7WUH::I64 = _s7WUC::I64 + 1;
           if (%MO_S_Le_W64(_s7WUH::I64,
                            _s7WUD::I64)) goto c7YJ6; else goto c7YJd;
       c7YJ6: // global
           I64[Sp] = block_c7YJ4_info;
           R6 = _s7WUC::I64;
           R5 = _s7WUD::I64;
           R4 = _s7WUG::P64;
           R3 = _s7WUF::I64;
           R2 = _s7WUt::P64;
           P64[Sp - 8] = P64[Sp + 40];
           I64[Sp + 24] = _s7WUH::I64;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 8, upd: 8;
       c7YJd: // global
           I64[Sp - 24] = block_c7YJc_info;
           R2 = _s7WUt::P64;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = GHC.Event.Array.ensureCapacity2_closure;
           P64[Sp - 16] = _s7WUG::P64;
           I64[Sp - 8] = _s7WUH::I64;
           I64[Sp] = _s7WUF::I64;
           Sp = Sp - 40;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YIP_info" {
     block_c7YIP_info:
         const _c7YIP;
         const 197;
         const 5629503829180446;
         const S7X3q_srt+40;
 },
 _c7YJ4() //  [R1]
         { []
         }
     {offset
       c7YJ4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YJa; else goto c7YJ9;
       c7YJa: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YJ9: // global
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = P64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           _s7WUu::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_s7WUu::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WUu::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YJ4_info" {
     block_c7YJ4_info:
         const _c7YJ4;
         const 453;
         const 30;
 },
 _c7YJc() //  [R1]
         { []
         }
     {offset
       c7YJc: // global
           _s7WUP::I64 = I64[R1 + 7];
           _s7WUQ::I64 = I64[Sp + 16] - 1;
           _s7WUR::I64 = _s7WUQ::I64 | %MO_S_Shr_W64(_s7WUQ::I64, 1);
           _s7WUT::I64 = _s7WUR::I64 | %MO_S_Shr_W64(_s7WUR::I64, 2);
           _s7WUV::I64 = _s7WUT::I64 | %MO_S_Shr_W64(_s7WUT::I64, 4);
           _s7WUX::I64 = _s7WUV::I64 | %MO_S_Shr_W64(_s7WUV::I64, 8);
           _s7WUZ::I64 = _s7WUX::I64 | %MO_S_Shr_W64(_s7WUX::I64, 16);
           _s7WV1::I64 = _s7WUZ::I64 | %MO_S_Shr_W64(_s7WUZ::I64, 32) + 1;
           _s7WV4::I64 = _s7WV1::I64 * _s7WUP::I64;
           if (%MO_S_Ge_W64(_s7WV4::I64, 0)) goto c7YK6; else goto c7YKW;
       c7YK6: // global
           I64[Sp - 16] = block_c7YK4_info;
           R1 = _s7WV4::I64;
           I64[Sp - 8] = _s7WV1::I64;
           I64[Sp] = _s7WUP::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7YKW: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 72;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YJc_info" {
     block_c7YJc_info:
         const _c7YJc;
         const 1928;
         const 1125904201809950;
         const S7X3q_srt+40;
 },
 _c7YK4() //  [R1]
         { []
         }
     {offset
       c7YK4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7YKa; else goto c7YK9;
       c7YKa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YK9: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp] = R1;
           _s7WUt::P64 = P64[Sp + 64];
           _s7WUv::P64 = P64[Sp + 80];
           _s7WUC::I64 = I64[Sp + 56];
           _s7WUF::I64 = I64[Sp + 40];
           _s7WUG::P64 = P64[Sp + 24];
           _s7WV1::I64 = I64[Sp + 8];
           _s7WV9::I64 = R1 + 16;
           _c7YKe::P64 = Hp - 5;
           if (_s7WUF::I64 == 0) goto c7YKR; else goto c7YKN;
       c7YKR: // global
           call MO_Touch(_s7WUG::P64);
           I64[Sp] = block_c7YKQ_info;
           R6 = _s7WUC::I64;
           R5 = _s7WV1::I64;
           R4 = _c7YKe::P64;
           R3 = _s7WV9::I64;
           R2 = _s7WUt::P64;
           P64[Sp - 8] = _s7WUv::P64;
           I64[Sp + 64] = _s7WV9::I64;
           P64[Sp + 80] = _c7YKe::P64;
           Sp = Sp - 8;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 8, upd: 8;
       c7YKN: // global
           _s7WUD::I64 = I64[Sp + 48];
           if (%MO_S_Le_W64(_s7WUD::I64, 0)) goto c7YKo; else goto c7YKH;
       c7YKo: // global
           call MO_Touch(_s7WUG::P64);
           I64[Sp] = block_c7YKm_info;
           R6 = _s7WUC::I64;
           R5 = _s7WV1::I64;
           R4 = _c7YKe::P64;
           R3 = _s7WV9::I64;
           R2 = _s7WUt::P64;
           P64[Sp - 8] = _s7WUv::P64;
           I64[Sp + 64] = _s7WV9::I64;
           P64[Sp + 80] = _c7YKe::P64;
           Sp = Sp - 8;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 8, upd: 8;
       c7YKH: // global
           (_s7WVp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7WV9::I64, _s7WUF::I64, _s7WUD::I64 * I64[Sp + 16]);
           call MO_Touch(_c7YKe::P64);
           call MO_Touch(_s7WUG::P64);
           I64[Sp] = block_c7YKG_info;
           R6 = _s7WUC::I64;
           R5 = _s7WV1::I64;
           R4 = _c7YKe::P64;
           R3 = _s7WV9::I64;
           R2 = _s7WUt::P64;
           P64[Sp - 8] = _s7WUv::P64;
           I64[Sp + 64] = _s7WV9::I64;
           P64[Sp + 80] = _c7YKe::P64;
           Sp = Sp - 8;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YK4_info" {
     block_c7YK4_info:
         const _c7YK4;
         const 7882;
         const 4294967326;
         const S7X3q_srt+40;
 },
 _c7YKQ() //  [R1]
         { []
         }
     {offset
       c7YKQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YKV; else goto c7YKU;
       c7YKV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YKU: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 80];
           I64[Hp - 32] = I64[Sp + 64];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 8];
           _s7WUu::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_s7WUu::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WUu::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YKQ_info" {
     block_c7YKQ_info:
         const _c7YKQ;
         const 16330;
         const 30;
 },
 _c7YKm() //  [R1]
         { []
         }
     {offset
       c7YKm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YKs; else goto c7YKr;
       c7YKs: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YKr: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 80];
           I64[Hp - 32] = I64[Sp + 64];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 8];
           _s7WUu::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_s7WUu::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WUu::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YKm_info" {
     block_c7YKm_info:
         const _c7YKm;
         const 16330;
         const 30;
 },
 _c7YKG() //  [R1]
         { []
         }
     {offset
       c7YKG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YKL; else goto c7YKK;
       c7YKL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YKK: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 80];
           I64[Hp - 32] = I64[Sp + 64];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 8];
           _s7WUu::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_s7WUu::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WUu::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YKG_info" {
     block_c7YKG_info:
         const _c7YKG;
         const 16330;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.572059213 UTC

[section ""data" . GHC.Event.Array.snoc1_closure" {
     GHC.Event.Array.snoc1_closure:
         const GHC.Event.Array.snoc1_info;
         const 0;
 },
 GHC.Event.Array.snoc1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7YMH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7YMI; else goto c7YMJ;
       c7YMI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.snoc1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YMJ: // global
           I64[Sp - 24] = block_c7YME_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7YMN; else goto c7YMF;
       u7YMN: // global
           call _c7YME(R1) args: 0, res: 0, upd: 0;
       c7YMF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.snoc1_info" {
     GHC.Event.Array.snoc1_info:
         const GHC.Event.Array.snoc1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S7X3q_srt+216;
 },
 _c7YME() //  [R1]
         { []
         }
     {offset
       c7YME: // global
           R4 = P64[Sp + 16];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Array.$wsnoc_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YME_info" {
     block_c7YME_info:
         const _c7YME;
         const 2;
         const 4294967326;
         const S7X3q_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.578104082 UTC

[section ""data" . GHC.Event.Array.snoc_closure" {
     GHC.Event.Array.snoc_closure:
         const GHC.Event.Array.snoc_info;
         const 0;
 },
 GHC.Event.Array.snoc_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7YN1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.snoc1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.snoc_info" {
     GHC.Event.Array.snoc_info:
         const GHC.Event.Array.snoc_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7X3q_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.58129221 UTC

[section ""data" . lvl35_r7WMN_closure" {
     lvl35_r7WMN_closure:
         const GHC.Types.I#_con_info;
         const 245;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.583016409 UTC

[section ""data" . lvl36_r7WMO_closure" {
     lvl36_r7WMO_closure:
         const GHC.Types.I#_con_info;
         const 49;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.584706644 UTC

[section ""data" . lvl37_r7WMP_closure" {
     lvl37_r7WMP_closure:
         const GHC.Types.I#_con_info;
         const 58;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.586557349 UTC

[section ""data" . lvl38_r7WMQ_closure" {
     lvl38_r7WMQ_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl35_r7WMN_closure+1;
         const lvl36_r7WMO_closure+1;
         const lvl35_r7WMN_closure+1;
         const lvl37_r7WMP_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.588410631 UTC

[section ""data" . lvl39_r7WMR_closure" {
     lvl39_r7WMR_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl38_r7WMQ_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.591286831 UTC

[section ""data" . lvl40_r7WMS_closure" {
     lvl40_r7WMS_closure:
         const lvl40_r7WMS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl40_r7WMS_entry() //  [R1]
         { []
         }
     {offset
       c7YNj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7YNk; else goto c7YNl;
       c7YNk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YNl: // global
           (_c7YNg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7YNg::I64 == 0) goto c7YNi; else goto c7YNh;
       c7YNi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7YNh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7YNg::I64;
           R2 = lvl39_r7WMR_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl40_r7WMS_info" {
     lvl40_r7WMS_info:
         const lvl40_r7WMS_entry;
         const 0;
         const 9007203549708309;
         const S7X3q_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.595035975 UTC

[section ""cstring" . lvl41_r7WMT_bytes" {
     lvl41_r7WMT_bytes:
         I8[] [99,111,112,121,58,32,98,97,100,32,111,102,102,115,101,116,115,32,111,114,32,108,101,110,103,116,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.597673675 UTC

[section ""data" . lvl42_r7WMU_closure" {
     lvl42_r7WMU_closure:
         const lvl42_r7WMU_info;
         const 0;
         const 0;
         const 0;
 },
 lvl42_r7WMU_entry() //  [R1]
         { []
         }
     {offset
       c7YNC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7YND; else goto c7YNE;
       c7YND: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YNE: // global
           (_c7YNx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7YNx::I64 == 0) goto c7YNz; else goto c7YNy;
       c7YNz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7YNy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7YNx::I64;
           I64[Sp - 24] = block_c7YNA_info;
           R2 = lvl41_r7WMT_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl42_r7WMU_info" {
     lvl42_r7WMU_info:
         const lvl42_r7WMU_entry;
         const 0;
         const 4294967317;
         const S7X3q_srt;
 },
 _c7YNA() //  [R1]
         { []
         }
     {offset
       c7YNA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7YNA_info" {
     block_c7YNA_info:
         const _c7YNA;
         const 0;
         const 4294967326;
         const S7X3q_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.617176467 UTC

[section ""data" . GHC.Event.Array.concat3_closure" {
     GHC.Event.Array.concat3_closure:
         const GHC.Event.Array.concat3_info;
         const 0;
 },
 sat_s7WWE_entry() //  [R1]
         { []
         }
     {offset
       c7YPB: // global
           _s7WWE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7YPC; else goto c7YPD;
       c7YPD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YPF; else goto c7YPE;
       c7YPF: // global
           HpAlloc = 32;
           goto c7YPC;
       c7YPC: // global
           R1 = _s7WWE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YPE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7WWE::P64;
           _s7WWn::I64 = I64[_s7WWE::P64 + 48];
           if (%MO_S_Gt_W64(I64[_s7WWE::P64 + 32],
                            _s7WWn::I64)) goto c7YPz; else goto c7YPA;
       c7YPz: // global
           _s7WVU::P64 = P64[_s7WWE::P64 + 16];
           Hp = Hp - 32;
           R1 = _s7WVU::P64 & (-8);
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c7YPA: // global
           _s7WVY::P64 = P64[_s7WWE::P64 + 24];
           _s7WVX::I64 = I64[_s7WWE::P64 + 40];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = _s7WVY::P64;
           I64[Hp - 8] = _s7WWn::I64;
           I64[Hp] = _s7WVX::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WWE_info" {
     sat_s7WWE_info:
         const sat_s7WWE_entry;
         const 12884901890;
         const 15;
 },
 sat_s7WXm_entry() //  [R1]
         { []
         }
     {offset
       c7YRo: // global
           _s7WXm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7YRp; else goto c7YRq;
       c7YRq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YRs; else goto c7YRr;
       c7YRs: // global
           HpAlloc = 56;
           goto c7YRp;
       c7YRp: // global
           R1 = _s7WXm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YRr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7WXm::P64;
           _s7WX1::P64 = P64[_s7WXm::P64 + 16];
           _s7WVW::I64 = I64[_s7WXm::P64 + 24];
           _s7WWn::I64 = I64[_s7WXm::P64 + 32];
           _s7WWS::I64 = I64[_s7WXm::P64 + 40];
           _s7WX0::I64 = I64[_s7WXm::P64 + 48];
           if (%MO_S_Gt_W64(_s7WVW::I64,
                            _s7WWn::I64)) goto c7YRm; else goto c7YRn;
       c7YRm: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7WX1::P64;
           I64[Hp - 32] = _s7WX0::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7WVW::I64;
           I64[Hp] = _s7WWS::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7YRn: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7WX1::P64;
           I64[Hp - 32] = _s7WX0::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7WWn::I64;
           I64[Hp] = _s7WWS::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WXm_info" {
     sat_s7WXm_info:
         const sat_s7WXm_entry;
         const 17179869185;
         const 15;
 },
 sat_s7WXM_entry() //  [R1]
         { []
         }
     {offset
       c7YSn: // global
           _s7WXM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7YSo; else goto c7YSp;
       c7YSp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YSr; else goto c7YSq;
       c7YSr: // global
           HpAlloc = 56;
           goto c7YSo;
       c7YSo: // global
           R1 = _s7WXM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YSq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7WXM::P64;
           _s7WX1::P64 = P64[_s7WXM::P64 + 16];
           _s7WVW::I64 = I64[_s7WXM::P64 + 24];
           _s7WWn::I64 = I64[_s7WXM::P64 + 32];
           _s7WWS::I64 = I64[_s7WXM::P64 + 40];
           _s7WX0::I64 = I64[_s7WXM::P64 + 48];
           if (%MO_S_Gt_W64(_s7WVW::I64,
                            _s7WWn::I64)) goto c7YSl; else goto c7YSm;
       c7YSl: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7WX1::P64;
           I64[Hp - 32] = _s7WX0::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7WVW::I64;
           I64[Hp] = _s7WWS::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7YSm: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7WX1::P64;
           I64[Hp - 32] = _s7WX0::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7WWn::I64;
           I64[Hp] = _s7WWS::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WXM_info" {
     sat_s7WXM_info:
         const sat_s7WXM_entry;
         const 17179869185;
         const 15;
 },
 sat_s7WY5_entry() //  [R1]
         { []
         }
     {offset
       c7YTb: // global
           _s7WY5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7YTc; else goto c7YTd;
       c7YTd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YTf; else goto c7YTe;
       c7YTf: // global
           HpAlloc = 56;
           goto c7YTc;
       c7YTc: // global
           R1 = _s7WY5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YTe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7WY5::P64;
           _s7WX1::P64 = P64[_s7WY5::P64 + 16];
           _s7WVW::I64 = I64[_s7WY5::P64 + 24];
           _s7WWn::I64 = I64[_s7WY5::P64 + 32];
           _s7WWS::I64 = I64[_s7WY5::P64 + 40];
           _s7WX0::I64 = I64[_s7WY5::P64 + 48];
           if (%MO_S_Gt_W64(_s7WVW::I64,
                            _s7WWn::I64)) goto c7YT9; else goto c7YTa;
       c7YT9: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7WX1::P64;
           I64[Hp - 32] = _s7WX0::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7WVW::I64;
           I64[Hp] = _s7WWS::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7YTa: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7WX1::P64;
           I64[Hp - 32] = _s7WX0::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7WWn::I64;
           I64[Hp] = _s7WWS::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7WY5_info" {
     sat_s7WY5_info:
         const sat_s7WY5_entry;
         const 17179869185;
         const 15;
 },
 GHC.Event.Array.concat3_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7YTm: // global
           if ((Sp + -120) < SpLim) (likely: False) goto c7YTn; else goto c7YTo;
       c7YTn: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.concat3_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c7YTo: // global
           I64[Sp - 40] = block_c7YNW_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7YUC; else goto c7YNX;
       u7YUC: // global
           call _c7YNW(R1) args: 0, res: 0, upd: 0;
       c7YNX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.concat3_info" {
     GHC.Event.Array.concat3_info:
         const GHC.Event.Array.concat3_entry;
         const 0;
         const 3869765533710;
         const 30064771098;
         const S7X3q_srt+184;
 },
 _c7YNW() //  [R1]
         { []
         }
     {offset
       c7YNW: // global
           I64[Sp - 24] = block_c7YO1_info;
           _s7WVU::P64 = R1;
           _s7WVW::I64 = I64[R1 + 15];
           _s7WVX::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp - 16] = _s7WVW::I64;
           I64[Sp - 8] = _s7WVX::I64;
           P64[Sp] = _s7WVU::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7YUr; else goto c7YO2;
       u7YUr: // global
           call _c7YO1(R1) args: 0, res: 0, upd: 0;
       c7YO2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YNW_info" {
     block_c7YNW_info:
         const _c7YNW;
         const 5;
         const 3320009719838;
         const S7X3q_srt+184;
 },
 _c7YO1() //  [R1]
         { []
         }
     {offset
       c7YO1: // global
           I64[Sp - 16] = block_c7YO6_info;
           _s7WVY::P64 = R1;
           _s7WW0::P64 = P64[R1 + 7];
           _s7WVZ::I64 = I64[R1 + 15];
           R1 = P64[Sp + 48];
           P64[Sp - 8] = _s7WW0::P64;
           I64[Sp] = _s7WVZ::I64;
           P64[Sp + 48] = _s7WVY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7YUs; else goto c7YO7;
       u7YUs: // global
           call _c7YO6(R1) args: 0, res: 0, upd: 0;
       c7YO7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YO1_info" {
     block_c7YO1_info:
         const _c7YO1;
         const 200;
         const 3320009719838;
         const S7X3q_srt+184;
 },
 _c7YO6() //  [R1]
         { []
         }
     {offset
       c7YO6: // global
           I64[Sp - 8] = block_c7YOb_info;
           _s7WW3::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7WW3::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YUt; else goto c7YOc;
       u7YUt: // global
           call _c7YOb(R1) args: 0, res: 0, upd: 0;
       c7YOc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YO6_info" {
     block_c7YO6_info:
         const _c7YO6;
         const 906;
         const 3320009719838;
         const S7X3q_srt+184;
 },
 _c7YOb() //  [R1]
         { []
         }
     {offset
       c7YOb: // global
           I64[Sp - 8] = block_c7YOg_info;
           _s7WW7::P64 = P64[R1 + 7];
           _s7WW6::I64 = I64[R1 + 15];
           R1 = P64[Sp + 88];
           P64[Sp] = _s7WW7::P64;
           I64[Sp + 88] = _s7WW6::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YUu; else goto c7YOh;
       u7YUu: // global
           call _c7YOg(R1) args: 0, res: 0, upd: 0;
       c7YOh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YOb_info" {
     block_c7YOb_info:
         const _c7YOb;
         const 1867;
         const 3320009719838;
         const S7X3q_srt+184;
 },
 _c7YOg() //  [R1]
         { []
         }
     {offset
       c7YOg: // global
           _s7WW9::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7WW9::I64, 0)) goto c7YTv; else goto u7YUm;
       c7YTv: // global
           I64[Sp] = block_c7YOo_info;
           R1 = P64[Sp + 72];
           I64[Sp + 72] = _s7WW9::I64;
           if (R1 & 7 != 0) goto u7YUv; else goto c7YOp;
       u7YUv: // global
           call _c7YOo(R1) args: 0, res: 0, upd: 0;
       c7YOp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u7YUm: // global
           Sp = Sp + 104;
           call _c7YUl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7YOg_info" {
     block_c7YOg_info:
         const _c7YOg;
         const 134796;
         const 3320009719838;
         const S7X3q_srt+184;
 },
 _c7YOo() //  [R1]
         { []
         }
     {offset
       c7YOo: // global
           _s7WWc::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7WWc::I64, 0)) goto c7YUj; else goto u7YUn;
       c7YUj: // global
           if (%MO_S_Le_W64(_s7WWc::I64,
                            I64[Sp + 40])) goto c7YTy; else goto u7YUo;
       c7YTy: // global
           I64[Sp] = block_c7YOz_info;
           R1 = P64[Sp + 88];
           I64[Sp + 88] = _s7WWc::I64;
           if (R1 & 7 != 0) goto u7YUx; else goto c7YOA;
       u7YUx: // global
           call _c7YOz(R1) args: 0, res: 0, upd: 0;
       c7YOA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u7YUo: // global
           Sp = Sp + 104;
           goto u7YUz;
       u7YUn: // global
           Sp = Sp + 104;
           goto u7YUz;
       u7YUz: // global
           call _c7YUl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7YOo_info" {
     block_c7YOo_info:
         const _c7YOo;
         const 151180;
         const 3320009719838;
         const S7X3q_srt+184;
 },
 _c7YOz() //  [R1]
         { []
         }
     {offset
       c7YOz: // global
           _s7WWg::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7WWg::I64, 0)) goto c7YUf; else goto u7YUp;
       c7YUf: // global
           _s7WW3::I64 = I64[Sp + 16];
           if (%MO_S_Le_W64(_s7WWg::I64,
                            _s7WW3::I64)) goto c7YUc; else goto u7YUq;
       c7YUc: // global
           _s7WVN::P64 = P64[Sp + 64];
           _s7WVU::P64 = P64[Sp + 56];
           _s7WVX::I64 = I64[Sp + 48];
           _s7WW9::I64 = I64[Sp + 72];
           _s7WWc::I64 = I64[Sp + 88];
           _s7WWj::I64 = _s7WW3::I64 - _s7WWg::I64;
           if (%MO_S_Gt_W64(_s7WW9::I64,
                            _s7WWj::I64)) goto c7YU9; else goto c7YUa;
       c7YU9: // global
           _s7WWl::I64 = _s7WWj::I64;
           goto s7WWk;
       c7YUa: // global
           _s7WWl::I64 = _s7WW9::I64;
           goto s7WWk;
       s7WWk: // global
           if (_s7WWl::I64 == 0) goto c7YU5; else goto c7YU4;
       c7YU5: // global
           R1 = _s7WVU::P64;
           Sp = Sp + 104;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7YU4: // global
           _s7WWn::I64 = _s7WWc::I64 + _s7WWl::I64;
           if (%MO_S_Le_W64(_s7WWn::I64,
                            _s7WVX::I64)) goto c7YTC; else goto c7YTG;
       c7YTC: // global
           I64[Sp] = block_c7YP0_info;
           R2 = _s7WVN::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = lvl40_r7WMS_closure;
           I64[Sp + 16] = _s7WWn::I64;
           I64[Sp + 64] = _s7WWl::I64;
           I64[Sp + 72] = _s7WWg::I64;
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
       c7YTG: // global
           I64[Sp] = block_c7YPK_info;
           R2 = _s7WVN::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Event.Array.ensureCapacity2_closure;
           I64[Sp + 56] = _s7WWn::I64;
           I64[Sp + 72] = _s7WWl::I64;
           I64[Sp + 80] = _s7WWg::I64;
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
       u7YUq: // global
           Sp = Sp + 104;
           goto u7YUB;
       u7YUp: // global
           Sp = Sp + 104;
           goto u7YUB;
       u7YUB: // global
           call _c7YUl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7YOz_info" {
     block_c7YOz_info:
         const _c7YOz;
         const 216716;
         const 3320009719838;
         const S7X3q_srt+184;
 },
 _c7YP0() //  [R1]
         { []
         }
     {offset
       c7YP0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YTF; else goto c7YTE;
       c7YTF: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YTE: // global
           _s7WVU::P64 = P64[Sp + 56];
           _s7WVW::I64 = I64[Sp + 40];
           _s7WVX::I64 = I64[Sp + 48];
           _s7WVY::P64 = P64[Sp + 80];
           _s7WW0::P64 = P64[Sp + 24];
           _s7WW7::P64 = P64[Sp + 8];
           _s7WWn::I64 = I64[Sp + 16];
           _s7WWq::I64 = I64[R1 + 7];
           (_s7WWA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[Sp + 32] + I64[Sp + 88] * _s7WWq::I64, I64[Sp + 96] + I64[Sp + 72] * _s7WWq::I64, I64[Sp + 64] * _s7WWq::I64);
           call MO_Touch(_s7WW7::P64);
           call MO_Touch(_s7WW0::P64);
           I64[Hp - 48] = sat_s7WWE_info;
           P64[Hp - 32] = _s7WVU::P64;
           P64[Hp - 24] = _s7WVY::P64;
           I64[Hp - 16] = _s7WVW::I64;
           I64[Hp - 8] = _s7WVX::I64;
           I64[Hp] = _s7WWn::I64;
           R1 = Hp - 48;
           Sp = Sp + 104;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YP0_info" {
     block_c7YP0_info:
         const _c7YP0;
         const 224908;
         const 30;
 },
 _c7YPK() //  [R1]
         { []
         }
     {offset
       c7YPK: // global
           _s7WWG::I64 = I64[R1 + 7];
           _s7WWH::I64 = I64[Sp + 56] - 1;
           _s7WWI::I64 = _s7WWH::I64 | %MO_S_Shr_W64(_s7WWH::I64, 1);
           _s7WWK::I64 = _s7WWI::I64 | %MO_S_Shr_W64(_s7WWI::I64, 2);
           _s7WWM::I64 = _s7WWK::I64 | %MO_S_Shr_W64(_s7WWK::I64, 4);
           _s7WWO::I64 = _s7WWM::I64 | %MO_S_Shr_W64(_s7WWM::I64, 8);
           _s7WWQ::I64 = _s7WWO::I64 | %MO_S_Shr_W64(_s7WWO::I64, 16);
           _s7WWS::I64 = _s7WWQ::I64 | %MO_S_Shr_W64(_s7WWQ::I64, 32) + 1;
           _s7WWV::I64 = _s7WWS::I64 * _s7WWG::I64;
           if (%MO_S_Ge_W64(_s7WWV::I64, 0)) goto c7YTJ; else goto c7YU2;
       c7YTJ: // global
           I64[Sp - 8] = block_c7YQA_info;
           R1 = _s7WWV::I64;
           I64[Sp] = _s7WWS::I64;
           I64[Sp + 16] = _s7WWG::I64;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7YU2: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 104;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YPK_info" {
     block_c7YPK_info:
         const _c7YPK;
         const 253580;
         const 1103806595102;
         const S7X3q_srt+184;
 },
 _c7YQA() //  [R1]
         { []
         }
     {offset
       c7YQA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7YTM; else goto c7YTL;
       c7YTM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YTL: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp] = R1;
           _s7WVN::P64 = P64[Sp + 72];
           _s7WVZ::I64 = I64[Sp + 40];
           _s7WW0::P64 = P64[Sp + 32];
           _s7WX0::I64 = R1 + 16;
           _c7YQF::P64 = Hp - 5;
           if (_s7WVZ::I64 == 0) goto c7YTY; else goto c7YTX;
       c7YTY: // global
           call MO_Touch(_s7WW0::P64);
           I64[Sp] = block_c7YSA_info;
           R2 = _s7WVN::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = lvl40_r7WMS_closure;
           I64[Sp + 56] = _s7WX0::I64;
           P64[Sp + 72] = _c7YQF::P64;
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
       c7YTX: // global
           _s7WVX::I64 = I64[Sp + 56];
           if (%MO_S_Le_W64(_s7WVX::I64, 0)) goto c7YTO; else goto c7YTS;
       c7YTO: // global
           call MO_Touch(_s7WW0::P64);
           I64[Sp] = block_c7YQN_info;
           R2 = _s7WVN::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = lvl40_r7WMS_closure;
           I64[Sp + 56] = _s7WX0::I64;
           P64[Sp + 72] = _c7YQF::P64;
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
       c7YTS: // global
           (_s7WXs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7WX0::I64, _s7WVZ::I64, _s7WVX::I64 * I64[Sp + 24]);
           call MO_Touch(_c7YQF::P64);
           call MO_Touch(_s7WW0::P64);
           I64[Sp] = block_c7YRM_info;
           R2 = _s7WVN::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = lvl40_r7WMS_closure;
           I64[Sp + 56] = _s7WX0::I64;
           P64[Sp + 72] = _c7YQF::P64;
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YQA_info" {
     block_c7YQA_info:
         const _c7YQA;
         const 507213;
         const 4294967326;
         const S7X3q_srt+248;
 },
 _c7YSA() //  [R1]
         { []
         }
     {offset
       c7YSA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YU1; else goto c7YU0;
       c7YU1: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YU0: // global
           _c7YQF::P64 = P64[Sp + 72];
           _s7WVW::I64 = I64[Sp + 48];
           _s7WW7::P64 = P64[Sp + 16];
           _s7WWn::I64 = I64[Sp + 64];
           _s7WWS::I64 = I64[Sp + 8];
           _s7WX0::I64 = I64[Sp + 56];
           _s7WXP::I64 = I64[R1 + 7];
           (_s7WXZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7WX0::I64 + I64[Sp + 96] * _s7WXP::I64, I64[Sp + 104] + I64[Sp + 88] * _s7WXP::I64, I64[Sp + 80] * _s7WXP::I64);
           call MO_Touch(_s7WW7::P64);
           call MO_Touch(_c7YQF::P64);
           I64[Hp - 48] = sat_s7WY5_info;
           P64[Hp - 32] = _c7YQF::P64;
           I64[Hp - 24] = _s7WVW::I64;
           I64[Hp - 16] = _s7WWn::I64;
           I64[Hp - 8] = _s7WWS::I64;
           I64[Hp] = _s7WX0::I64;
           R1 = Hp - 48;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YSA_info" {
     block_c7YSA_info:
         const _c7YSA;
         const 507725;
         const 30;
 },
 _c7YQN() //  [R1]
         { []
         }
     {offset
       c7YQN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YTR; else goto c7YTQ;
       c7YTR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YTQ: // global
           _c7YQF::P64 = P64[Sp + 72];
           _s7WVW::I64 = I64[Sp + 48];
           _s7WW7::P64 = P64[Sp + 16];
           _s7WWn::I64 = I64[Sp + 64];
           _s7WWS::I64 = I64[Sp + 8];
           _s7WX0::I64 = I64[Sp + 56];
           _s7WX6::I64 = I64[R1 + 7];
           (_s7WXg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7WX0::I64 + I64[Sp + 96] * _s7WX6::I64, I64[Sp + 104] + I64[Sp + 88] * _s7WX6::I64, I64[Sp + 80] * _s7WX6::I64);
           call MO_Touch(_s7WW7::P64);
           call MO_Touch(_c7YQF::P64);
           I64[Hp - 48] = sat_s7WXm_info;
           P64[Hp - 32] = _c7YQF::P64;
           I64[Hp - 24] = _s7WVW::I64;
           I64[Hp - 16] = _s7WWn::I64;
           I64[Hp - 8] = _s7WWS::I64;
           I64[Hp] = _s7WX0::I64;
           R1 = Hp - 48;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YQN_info" {
     block_c7YQN_info:
         const _c7YQN;
         const 507725;
         const 30;
 },
 _c7YRM() //  [R1]
         { []
         }
     {offset
       c7YRM: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7YTV; else goto c7YTU;
       c7YTV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YTU: // global
           _c7YQF::P64 = P64[Sp + 72];
           _s7WVW::I64 = I64[Sp + 48];
           _s7WW7::P64 = P64[Sp + 16];
           _s7WWn::I64 = I64[Sp + 64];
           _s7WWS::I64 = I64[Sp + 8];
           _s7WX0::I64 = I64[Sp + 56];
           _s7WXw::I64 = I64[R1 + 7];
           (_s7WXG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7WX0::I64 + I64[Sp + 96] * _s7WXw::I64, I64[Sp + 104] + I64[Sp + 88] * _s7WXw::I64, I64[Sp + 80] * _s7WXw::I64);
           call MO_Touch(_s7WW7::P64);
           call MO_Touch(_c7YQF::P64);
           I64[Hp - 48] = sat_s7WXM_info;
           P64[Hp - 32] = _c7YQF::P64;
           I64[Hp - 24] = _s7WVW::I64;
           I64[Hp - 16] = _s7WWn::I64;
           I64[Hp - 8] = _s7WWS::I64;
           I64[Hp] = _s7WX0::I64;
           R1 = Hp - 48;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YRM_info" {
     block_c7YRM_info:
         const _c7YRM;
         const 507725;
         const 30;
 },
 _c7YUl() //  []
         { []
         }
     {offset
       c7YUl: // global
           R1 = lvl42_r7WMU_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.65869546 UTC

[section ""data" . GHC.Event.Array.concat2_closure" {
     GHC.Event.Array.concat2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.662739992 UTC

[section ""data" . GHC.Event.Array.$wconcat_closure" {
     GHC.Event.Array.$wconcat_closure:
         const GHC.Event.Array.$wconcat_info;
         const 0;
 },
 GHC.Event.Array.$wconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7YX7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7YXb; else goto c7YXc;
       c7YXb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YXc: // global
           I64[Sp - 32] = block_c7YX4_info;
           R1 = P64[R3 + 8];
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7YXu; else goto c7YX5;
       u7YXu: // global
           call _c7YX4(R1) args: 0, res: 0, upd: 0;
       c7YX5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wconcat_info" {
     GHC.Event.Array.$wconcat_info:
         const GHC.Event.Array.$wconcat_entry;
         const 0;
         const 38654705678;
         const 17179869207;
         const S7X3q_srt+240;
 },
 _c7YX4() //  [R1]
         { []
         }
     {offset
       c7YX4: // global
           _s7WYq::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp - 8] = block_c7YXa_info;
           _s7WYk::P64 = R1;
           _s7WYm::I64 = I64[R1 + 15];
           R1 = _s7WYq::P64;
           I64[Sp] = _s7WYm::I64;
           P64[Sp + 24] = _s7WYk::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YXt; else goto c7YXe;
       u7YXt: // global
           call _c7YXa(R1) args: 0, res: 0, upd: 0;
       c7YXe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YX4_info" {
     block_c7YX4_info:
         const _c7YX4;
         const 3;
         const 4294967326;
         const S7X3q_srt+240;
 },
 _c7YXa() //  [R1]
         { []
         }
     {offset
       c7YXa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7YXn; else goto c7YXm;
       c7YXn: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7YXm: // global
           _s7WYt::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s7WYt::I64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           _s7WYd::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7YXk_info;
           R6 = GHC.Event.Array.concat2_closure+1;
           R5 = R1;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = _s7WYd::P64;
           P64[Sp + 8] = Hp - 23;
           Sp = Sp + 8;
           call GHC.Event.Array.concat3_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YXa_info" {
     block_c7YXa_info:
         const _c7YXa;
         const 68;
         const 4294967326;
         const S7X3q_srt+240;
 },
 _c7YXk() //  [R1]
         { []
         }
     {offset
       c7YXk: // global
           _s7WYe::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_s7WYe::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WYe::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YXk_info" {
     block_c7YXk_info:
         const _c7YXk;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.672713707 UTC

[section ""data" . GHC.Event.Array.concat1_closure" {
     GHC.Event.Array.concat1_closure:
         const GHC.Event.Array.concat1_info;
         const 0;
 },
 GHC.Event.Array.concat1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7YXX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7YY1; else goto c7YY2;
       c7YY1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.concat1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YY2: // global
           I64[Sp - 24] = block_c7YXU_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7YYa; else goto c7YXV;
       u7YYa: // global
           call _c7YXU(R1) args: 0, res: 0, upd: 0;
       c7YXV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.concat1_info" {
     GHC.Event.Array.concat1_info:
         const GHC.Event.Array.concat1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S7X3q_srt+264;
 },
 _c7YXU() //  [R1]
         { []
         }
     {offset
       c7YXU: // global
           I64[Sp] = block_c7YY0_info;
           _s7WYG::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s7WYG::P64;
           if (R1 & 7 != 0) goto u7YY9; else goto c7YY4;
       u7YY9: // global
           call _c7YY0(R1) args: 0, res: 0, upd: 0;
       c7YY4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YXU_info" {
     block_c7YXU_info:
         const _c7YXU;
         const 2;
         const 4294967326;
         const S7X3q_srt+264;
 },
 _c7YY0() //  [R1]
         { []
         }
     {offset
       c7YY0: // global
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Array.$wconcat_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YY0_info" {
     block_c7YY0_info:
         const _c7YY0;
         const 2;
         const 4294967326;
         const S7X3q_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.680193212 UTC

[section ""data" . GHC.Event.Array.concat_closure" {
     GHC.Event.Array.concat_closure:
         const GHC.Event.Array.concat_info;
         const 0;
 },
 GHC.Event.Array.concat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7YYs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.concat1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.concat_info" {
     GHC.Event.Array.concat_info:
         const GHC.Event.Array.concat_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7X3q_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.685416483 UTC

[section ""data" . GHC.Event.Array.copy1_closure" {
     GHC.Event.Array.copy1_closure:
         const GHC.Event.Array.copy1_info;
         const 0;
 },
 GHC.Event.Array.copy1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7YYG: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7YYK; else goto c7YYL;
       c7YYK: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.copy1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c7YYL: // global
           I64[Sp - 40] = block_c7YYD_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7YYZ; else goto c7YYE;
       u7YYZ: // global
           call _c7YYD(R1) args: 0, res: 0, upd: 0;
       c7YYE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.copy1_info" {
     GHC.Event.Array.copy1_info:
         const GHC.Event.Array.copy1_entry;
         const 0;
         const 141733920782;
         const 30064771098;
         const S7X3q_srt+240;
 },
 _c7YYD() //  [R1]
         { []
         }
     {offset
       c7YYD: // global
           I64[Sp - 8] = block_c7YYJ_info;
           _s7WYR::P64 = P64[R1 + 7];
           R1 = P64[Sp + 24];
           P64[Sp] = P64[_s7WYR::P64 + 8];
           P64[Sp + 24] = _s7WYR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7YYY; else goto c7YYN;
       u7YYY: // global
           call _c7YYJ(R1) args: 0, res: 0, upd: 0;
       c7YYN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YYD_info" {
     block_c7YYD_info:
         const _c7YYD;
         const 5;
         const 4294967326;
         const S7X3q_srt+240;
 },
 _c7YYJ() //  [R1]
         { []
         }
     {offset
       c7YYJ: // global
           _s7WYL::P64 = P64[Sp + 24];
           _s7WYZ::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp + 24] = block_c7YYR_info;
           R6 = P64[Sp + 40];
           R5 = _s7WYZ::P64;
           R4 = _s7WYL::P64;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[Sp + 48];
           Sp = Sp + 16;
           call GHC.Event.Array.concat3_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YYJ_info" {
     block_c7YYJ_info:
         const _c7YYJ;
         const 6;
         const 4294967326;
         const S7X3q_srt+240;
 },
 _c7YYR() //  [R1]
         { []
         }
     {offset
       c7YYR: // global
           _s7WYR::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_s7WYR::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7WYR::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YYR_info" {
     block_c7YYR_info:
         const _c7YYR;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.694612069 UTC

[section ""data" . GHC.Event.Array.copy_closure" {
     GHC.Event.Array.copy_closure:
         const GHC.Event.Array.copy_info;
         const 0;
 },
 GHC.Event.Array.copy_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7YZp: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.copy1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.copy_info" {
     GHC.Event.Array.copy_info:
         const GHC.Event.Array.copy_entry;
         const 0;
         const 4294967310;
         const 30064771098;
         const S7X3q_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.697753082 UTC

[section ""data" . lvl43_r7WMV_closure" {
     lvl43_r7WMV_closure:
         const GHC.Types.I#_con_info;
         const 68;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.699530039 UTC

[section ""data" . lvl44_r7WMW_closure" {
     lvl44_r7WMW_closure:
         const GHC.Types.I#_con_info;
         const 26;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.701384266 UTC

[section ""data" . lvl45_r7WMX_closure" {
     lvl45_r7WMX_closure:
         const GHC.Types.I#_con_info;
         const 35;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.703634702 UTC

[section ""data" . lvl46_r7WMY_closure" {
     lvl46_r7WMY_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl43_r7WMV_closure+1;
         const lvl44_r7WMW_closure+1;
         const lvl43_r7WMV_closure+1;
         const lvl45_r7WMX_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.705663911 UTC

[section ""data" . lvl47_r7WMZ_closure" {
     lvl47_r7WMZ_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl46_r7WMY_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.708110223 UTC

[section ""data" . GHC.Event.Array.duplicate1_closure" {
     GHC.Event.Array.duplicate1_closure:
         const GHC.Event.Array.duplicate1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.duplicate1_entry() //  [R1]
         { []
         }
     {offset
       c7YZH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7YZI; else goto c7YZJ;
       c7YZI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7YZJ: // global
           (_c7YZE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7YZE::I64 == 0) goto c7YZG; else goto c7YZF;
       c7YZG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7YZF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7YZE::I64;
           R2 = lvl47_r7WMZ_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.duplicate1_info" {
     GHC.Event.Array.duplicate1_info:
         const GHC.Event.Array.duplicate1_entry;
         const 0;
         const 1152921508901814293;
         const S7X3q_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.71384891 UTC

[section ""data" . GHC.Event.Array.$wnew_closure" {
     GHC.Event.Array.$wnew_closure:
         const GHC.Event.Array.$wnew_info;
         const 0;
 },
 GHC.Event.Array.$wnew_entry() //  [R2, R3]
         { []
         }
     {offset
       c7YZX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7YZY; else goto c7YZZ;
       c7YZY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wnew_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7YZZ: // global
           I64[Sp - 16] = block_c7YZV_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.duplicate1_closure;
           I64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wnew_info" {
     GHC.Event.Array.$wnew_info:
         const GHC.Event.Array.$wnew_entry;
         const 0;
         const 211110527500302;
         const 12884901902;
         const S7X3q_srt+184;
 },
 _c7YZV() //  [R1]
         { []
         }
     {offset
       c7YZV: // global
           _s7WZ9::I64 = I64[Sp + 8] - 1;
           _s7WZa::I64 = _s7WZ9::I64 | %MO_S_Shr_W64(_s7WZ9::I64, 1);
           _s7WZc::I64 = _s7WZa::I64 | %MO_S_Shr_W64(_s7WZa::I64, 2);
           _s7WZe::I64 = _s7WZc::I64 | %MO_S_Shr_W64(_s7WZc::I64, 4);
           _s7WZg::I64 = _s7WZe::I64 | %MO_S_Shr_W64(_s7WZe::I64, 8);
           _s7WZi::I64 = _s7WZg::I64 | %MO_S_Shr_W64(_s7WZg::I64, 16);
           _s7WZk::I64 = _s7WZi::I64 | %MO_S_Shr_W64(_s7WZi::I64, 32) + 1;
           _s7WZn::I64 = _s7WZk::I64 * I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7WZn::I64, 0)) goto c7Z11; else goto c7Z18;
       c7Z11: // global
           I64[Sp] = block_c7Z0P_info;
           R1 = _s7WZn::I64;
           I64[Sp + 8] = _s7WZk::I64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7Z18: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7YZV_info" {
     block_c7YZV_info:
         const _c7YZV;
         const 65;
         const 4294967326;
         const S7X3q_srt+184;
 },
 _c7Z0P() //  [R1]
         { []
         }
     {offset
       c7Z0P: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7Z14; else goto c7Z13;
       c7Z14: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Z13: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 61;
           P64[Hp - 32] = R1 + 16;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = I64[Sp + 8];
           I64[Sp + 8] = block_c7Z0X_info;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Z0P_info" {
     block_c7Z0P_info:
         const _c7Z0P;
         const 65;
         const 30;
 },
 _c7Z0X() //  [R1]
         { []
         }
     {offset
       c7Z0X: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Z17; else goto c7Z16;
       c7Z17: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Z16: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Z0X_info" {
     block_c7Z0X_info:
         const _c7Z0X;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.724086337 UTC

[section ""data" . GHC.Event.Array.new1_closure" {
     GHC.Event.Array.new1_closure:
         const GHC.Event.Array.new1_info;
         const 0;
 },
 GHC.Event.Array.new1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Z1P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Z1Q; else goto c7Z1R;
       c7Z1Q: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.new1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Z1R: // global
           I64[Sp - 16] = block_c7Z1M_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Z1V; else goto c7Z1N;
       u7Z1V: // global
           call _c7Z1M(R1) args: 0, res: 0, upd: 0;
       c7Z1N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.new1_info" {
     GHC.Event.Array.new1_info:
         const GHC.Event.Array.new1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S7X3q_srt+304;
 },
 _c7Z1M() //  [R1]
         { []
         }
     {offset
       c7Z1M: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.Array.$wnew_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Z1M_info" {
     block_c7Z1M_info:
         const _c7Z1M;
         const 1;
         const 4294967326;
         const S7X3q_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.730072037 UTC

[section ""data" . GHC.Event.Array.new_closure" {
     GHC.Event.Array.new_closure:
         const GHC.Event.Array.new_info;
         const 0;
 },
 GHC.Event.Array.new_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Z29: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.new1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.new_info" {
     GHC.Event.Array.new_info:
         const GHC.Event.Array.new_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7X3q_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.733166185 UTC

[section ""data" . lvl48_r7WN0_closure" {
     lvl48_r7WN0_closure:
         const GHC.Types.I#_con_info;
         const 95;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.734851013 UTC

[section ""data" . lvl49_r7WN1_closure" {
     lvl49_r7WN1_closure:
         const GHC.Types.I#_con_info;
         const 23;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.736555796 UTC

[section ""data" . lvl50_r7WN2_closure" {
     lvl50_r7WN2_closure:
         const GHC.Types.I#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.738483644 UTC

[section ""data" . lvl51_r7WN3_closure" {
     lvl51_r7WN3_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl48_r7WN0_closure+1;
         const lvl49_r7WN1_closure+1;
         const lvl48_r7WN0_closure+1;
         const lvl50_r7WN2_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.740342234 UTC

[section ""data" . lvl52_r7WN4_closure" {
     lvl52_r7WN4_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl51_r7WN3_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.742841162 UTC

[section ""data" . GHC.Event.Array.duplicate2_closure" {
     GHC.Event.Array.duplicate2_closure:
         const GHC.Event.Array.duplicate2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.duplicate2_entry() //  [R1]
         { []
         }
     {offset
       c7Z2r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Z2s; else goto c7Z2t;
       c7Z2s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Z2t: // global
           (_c7Z2o::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Z2o::I64 == 0) goto c7Z2q; else goto c7Z2p;
       c7Z2q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Z2p: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Z2o::I64;
           R2 = lvl52_r7WN4_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.duplicate2_info" {
     GHC.Event.Array.duplicate2_info:
         const GHC.Event.Array.duplicate2_entry;
         const 0;
         const 12884901909;
         const S7X3q_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.751240851 UTC

[section ""data" . GHC.Event.Array.duplicate_closure" {
     GHC.Event.Array.duplicate_closure:
         const GHC.Event.Array.duplicate_info;
         const 0;
 },
 lvl53_s7WZH_entry() //  [R1]
         { []
         }
     {offset
       c7Z2J: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Z2K; else goto c7Z2L;
       c7Z2K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Z2L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.duplicate2_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_s7WZH_info" {
     lvl53_s7WZH_info:
         const lvl53_s7WZH_entry;
         const 1;
         const 4294967312;
         const S7X3q_srt+336;
 },
 lvl54_s7WZI_entry() //  [R1]
         { []
         }
     {offset
       c7Z2Q: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Z2R; else goto c7Z2S;
       c7Z2R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Z2S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.duplicate1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl54_s7WZI_info" {
     lvl54_s7WZI_info:
         const lvl54_s7WZI_entry;
         const 1;
         const 4294967312;
         const S7X3q_srt+296;
 },
 sat_s7X0n_entry() //  [R1, R2]
         { []
         }
     {offset
       c7Z31: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7Z3f; else goto c7Z3g;
       c7Z3f: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Z3g: // global
           I64[Sp - 24] = block_c7Z2Y_info;
           _s7WZH::P64 = P64[R1 + 6];
           _s7WZI::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _s7WZH::P64;
           P64[Sp - 8] = _s7WZI::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Z48; else goto c7Z2Z;
       u7Z48: // global
           call _c7Z2Y(R1) args: 0, res: 0, upd: 0;
       c7Z2Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7X0n_info" {
     sat_s7X0n_info:
         const sat_s7X0n_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const S7X3q_srt+184;
 },
 _c7Z2Y() //  [R1]
         { []
         }
     {offset
       c7Z2Y: // global
           _s7WZP::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7Z34_info;
           R1 = _s7WZP::P64;
           if (R1 & 7 != 0) goto u7Z47; else goto c7Z35;
       u7Z47: // global
           call _c7Z34(R1) args: 0, res: 0, upd: 0;
       c7Z35: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Z2Y_info" {
     block_c7Z2Y_info:
         const _c7Z2Y;
         const 2;
         const 4294967326;
         const S7X3q_srt+184;
 },
 _c7Z34() //  [R1]
         { []
         }
     {offset
       c7Z34: // global
           I64[Sp - 16] = block_c7Z39_info;
           _s7WZS::I64 = I64[R1 + 15];
           _s7WZT::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _s7WZT::I64;
           I64[Sp] = _s7WZS::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Z49; else goto c7Z3a;
       u7Z49: // global
           call _c7Z39(R1) args: 0, res: 0, upd: 0;
       c7Z3a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Z34_info" {
     block_c7Z34_info:
         const _c7Z34;
         const 2;
         const 4294967326;
         const S7X3q_srt+184;
 },
 _c7Z39() //  [R1]
         { []
         }
     {offset
       c7Z39: // global
           I64[Sp - 8] = block_c7Z3e_info;
           _s7WZW::P64 = P64[R1 + 7];
           _s7WZV::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _s7WZW::P64;
           I64[Sp + 32] = _s7WZV::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Z4a; else goto c7Z3k;
       u7Z4a: // global
           call _c7Z3e(R1) args: 0, res: 0, upd: 0;
       c7Z3k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Z39_info" {
     block_c7Z39_info:
         const _c7Z39;
         const 196;
         const 4294967326;
         const S7X3q_srt+184;
 },
 _c7Z3e() //  [R1]
         { []
         }
     {offset
       c7Z3e: // global
           _s7WZZ::I64 = I64[Sp + 16] * I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7WZZ::I64, 0)) goto c7Z3Y; else goto c7Z46;
       c7Z3Y: // global
           I64[Sp] = block_c7Z3v_info;
           R1 = _s7WZZ::I64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7Z46: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Z3e_info" {
     block_c7Z3e_info:
         const _c7Z3e;
         const 1413;
         const 4294967326;
         const S7X3q_srt+184;
 },
 _c7Z3v() //  [R1]
         { []
         }
     {offset
       c7Z3v: // global
           I64[Sp] = block_c7Z3x_info;
           _s7X03::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _s7X03::P64;
           if (R1 & 7 != 0) goto u7Z4b; else goto c7Z3y;
       u7Z4b: // global
           call _c7Z3x(R1) args: 0, res: 0, upd: 0;
       c7Z3y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Z3v_info" {
     block_c7Z3v_info:
         const _c7Z3v;
         const 1413;
         const 30;
 },
 _c7Z3x() //  [R1]
         { []
         }
     {offset
       c7Z3x: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7Z42; else goto c7Z41;
       c7Z42: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Z41: // global
           _s7WZS::I64 = I64[Sp + 24];
           _s7WZT::I64 = I64[Sp + 16];
           _s7WZW::P64 = P64[Sp + 8];
           _s7X03::P64 = P64[Sp + 32];
           _s7X06::I64 = _s7X03::P64 + 16;
           (_s7X0c::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7X06::I64, I64[Sp + 40], _s7WZS::I64 * I64[R1 + 7]);
           call MO_Touch(_s7WZW::P64);
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = _s7X03::P64;
           _c7Z3Q::P64 = Hp - 61;
           call MO_Touch(_c7Z3Q::P64);
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _c7Z3Q::P64;
           I64[Hp - 32] = _s7X06::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7WZS::I64;
           I64[Hp] = _s7WZT::I64;
           I64[Sp + 40] = block_c7Z3U_info;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Z3x_info" {
     block_c7Z3x_info:
         const _c7Z3x;
         const 1413;
         const 30;
 },
 _c7Z3U() //  [R1]
         { []
         }
     {offset
       c7Z3U: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Z45; else goto c7Z44;
       c7Z45: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Z44: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Z3U_info" {
     block_c7Z3U_info:
         const _c7Z3U;
         const 0;
         const 30;
 },
 GHC.Event.Array.duplicate_entry() //  [R2]
         { []
         }
     {offset
       c7Z4c: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7Z4g; else goto c7Z4f;
       c7Z4g: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Event.Array.duplicate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Z4f: // global
           I64[Hp - 64] = lvl53_s7WZH_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl54_s7WZI_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s7X0n_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.duplicate_info" {
     GHC.Event.Array.duplicate_info:
         const GHC.Event.Array.duplicate_entry;
         const 0;
         const 6825772480200718;
         const 4294967301;
         const S7X3q_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.77506813 UTC

[section ""data" . GHC.Event.Array.AC_closure" {
     GHC.Event.Array.AC_closure:
         const GHC.Event.Array.AC_info;
 },
 GHC.Event.Array.AC_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Z5d: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Z5h; else goto c7Z5g;
       c7Z5h: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.AC_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Z5g: // global
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.AC_info" {
     GHC.Event.Array.AC_info:
         const GHC.Event.Array.AC_entry;
         const 0;
         const 14;
         const 12884901908;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.779692605 UTC

[section ""cstring" . i7Ybj_str" {
     i7Ybj_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,65,114,114,97,121,46,65,67]
 },
 GHC.Event.Array.AC_con_entry() //  [R1]
         { []
         }
     {offset
       c7Z5n: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.AC_con_info" {
     GHC.Event.Array.AC_con_info:
         const GHC.Event.Array.AC_con_entry;
         const 8589934593;
         const 1;
         const i7Ybj_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:03.783109677 UTC

[section ""relreadonly" . S7X3q_srt" {
     S7X3q_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Event.Array.$wlvl1_closure;
         const GHC.Event.Array.$wunsafeRead_closure;
         const GHC.Event.Array.unsafeRead1_closure;
         const GHC.Event.Array.$wlvl_closure;
         const GHC.Event.Array.$wunsafeWrite'_closure;
         const GHC.Event.Array.unsafeWrite2_closure;
         const GHC.Event.Array.unsafeWrite1_closure;
         const GHC.Err.undefined_closure;
         const lvl15_r7WMj_closure;
         const GHC.Event.Array.forM_1_closure;
         const GHC.Event.Array.forM__closure;
         const lvl20_r7WMo_closure;
         const GHC.Event.Array.loop1_closure;
         const GHC.Event.Array.loop_closure;
         const lvl23_r7WMB_closure;
         const GHC.Event.Array.removeAt2_closure;
         const GHC.Event.Array.removeAt1_closure;
         const GHC.Event.Array.removeAt_closure;
         const lvl29_r7WMH_closure;
         const GHC.Event.Array.findIndex1_closure;
         const GHC.Event.Array.findIndex_closure;
         const lvl34_r7WMM_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const GHC.Event.Array.$wensureCapacity_closure;
         const GHC.Event.Array.ensureCapacity2_closure;
         const GHC.Event.Array.ensureCapacity1_closure;
         const GHC.Event.Array.$wsnoc_closure;
         const GHC.Event.Array.snoc1_closure;
         const lvl39_r7WMR_closure;
         const GHC.Event.Array.concat3_closure;
         const lvl40_r7WMS_closure;
         const lvl42_r7WMU_closure;
         const GHC.Event.Array.$wconcat_closure;
         const GHC.Event.Array.concat1_closure;
         const GHC.Event.Array.copy1_closure;
         const lvl47_r7WMZ_closure;
         const GHC.Event.Array.duplicate1_closure;
         const GHC.Event.Array.$wnew_closure;
         const GHC.Event.Array.new1_closure;
         const lvl52_r7WN4_closure;
         const GHC.Err.undefined_closure;
         const GHC.Event.Array.duplicate2_closure;
         const GHC.Event.Array.duplicate_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.174088386 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:07.176891917 UTC

[section ""data" . GHC.Event.Array.$WAC_closure" {
     GHC.Event.Array.$WAC_closure:
         const GHC.Event.Array.$WAC_info;
 },
 GHC.Event.Array.$WAC_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7ZiT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Zj7; else goto c7Zj8;
       c7Zj7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$WAC_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Zj8: // global
           I64[Sp - 24] = block_c7ZiQ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Zjf; else goto c7ZiR;
       u7Zjf: // global
           call _c7ZiQ(R1) args: 0, res: 0, upd: 0;
       c7ZiR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$WAC_info" {
     GHC.Event.Array.$WAC_info:
         const GHC.Event.Array.$WAC_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c7ZiQ() //  [R1]
         { []
         }
     {offset
       c7ZiQ: // global
           I64[Sp] = block_c7ZiW_info;
           _s7Z5x::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7Z5x::P64;
           if (R1 & 7 != 0) goto u7Zje; else goto c7ZiX;
       u7Zje: // global
           call _c7ZiW(R1) args: 0, res: 0, upd: 0;
       c7ZiX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZiQ_info" {
     block_c7ZiQ_info:
         const _c7ZiQ;
         const 2;
         const 30;
 },
 _c7ZiW() //  [R1]
         { []
         }
     {offset
       c7ZiW: // global
           I64[Sp] = block_c7Zj1_info;
           _s7Z5z::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7Z5z::I64;
           if (R1 & 7 != 0) goto u7Zjg; else goto c7Zj2;
       u7Zjg: // global
           call _c7Zj1(R1) args: 0, res: 0, upd: 0;
       c7Zj2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZiW_info" {
     block_c7ZiW_info:
         const _c7ZiW;
         const 2;
         const 30;
 },
 _c7Zj1() //  [R1]
         { []
         }
     {offset
       c7Zj1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Zjd; else goto c7Zjc;
       c7Zjd: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Zjc: // global
           _s7Z5B::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _s7Z5B::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zj1_info" {
     block_c7Zj1_info:
         const _c7Zj1;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.188175042 UTC

[section ""data" . GHC.Event.Array.empty1_closure" {
     GHC.Event.Array.empty1_closure:
         const GHC.Event.Array.empty1_info;
 },
 GHC.Event.Array.empty1_entry() //  []
         { []
         }
     {offset
       c7ZjR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7ZjS; else goto c7ZjT;
       c7ZjS: // global
           R1 = GHC.Event.Array.empty1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7ZjT: // global
           I64[Sp - 8] = block_c7ZjJ_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.empty1_info" {
     GHC.Event.Array.empty1_info:
         const GHC.Event.Array.empty1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c7ZjJ() //  [R1]
         { []
         }
     {offset
       c7ZjJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7ZjW; else goto c7ZjV;
       c7ZjW: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZjV: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp] = block_c7ZjO_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZjJ_info" {
     block_c7ZjJ_info:
         const _c7ZjJ;
         const 0;
         const 30;
 },
 _c7ZjO() //  [R1]
         { []
         }
     {offset
       c7ZjO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7ZjZ; else goto c7ZjY;
       c7ZjZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZjY: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZjO_info" {
     block_c7ZjO_info:
         const _c7ZjO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.195073103 UTC

[section ""data" . GHC.Event.Array.empty_closure" {
     GHC.Event.Array.empty_closure:
         const GHC.Event.Array.empty_info;
 },
 GHC.Event.Array.empty_entry() //  []
         { []
         }
     {offset
       c7Zkp: // global
           call GHC.Event.Array.empty1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.empty_info" {
     GHC.Event.Array.empty_info:
         const GHC.Event.Array.empty_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.199009078 UTC

[section ""data" . GHC.Event.Array.length1_closure" {
     GHC.Event.Array.length1_closure:
         const GHC.Event.Array.length1_info;
 },
 GHC.Event.Array.length1_entry() //  [R2]
         { []
         }
     {offset
       c7ZkD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7ZkM; else goto c7ZkN;
       c7ZkM: // global
           R2 = R2;
           R1 = GHC.Event.Array.length1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ZkN: // global
           I64[Sp - 8] = block_c7ZkA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZkT; else goto c7ZkB;
       u7ZkT: // global
           call _c7ZkA(R1) args: 0, res: 0, upd: 0;
       c7ZkB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.length1_info" {
     GHC.Event.Array.length1_info:
         const GHC.Event.Array.length1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7ZkA() //  [R1]
         { []
         }
     {offset
       c7ZkA: // global
           _s7Z5T::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7ZkG_info;
           R1 = _s7Z5T::P64;
           if (R1 & 7 != 0) goto u7ZkS; else goto c7ZkH;
       u7ZkS: // global
           call _c7ZkG(R1) args: 0, res: 0, upd: 0;
       c7ZkH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZkA_info" {
     block_c7ZkA_info:
         const _c7ZkA;
         const 0;
         const 30;
 },
 _c7ZkG() //  [R1]
         { []
         }
     {offset
       c7ZkG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7ZkR; else goto c7ZkQ;
       c7ZkR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZkQ: // global
           _s7Z5W::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7Z5W::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZkG_info" {
     block_c7ZkG_info:
         const _c7ZkG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.20551672 UTC

[section ""data" . GHC.Event.Array.length_closure" {
     GHC.Event.Array.length_closure:
         const GHC.Event.Array.length_info;
 },
 GHC.Event.Array.length_entry() //  [R2]
         { []
         }
     {offset
       c7Zlg: // global
           R2 = R2;
           call GHC.Event.Array.length1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.length_info" {
     GHC.Event.Array.length_info:
         const GHC.Event.Array.length_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.209725582 UTC

[section ""data" . GHC.Event.Array.capacity1_closure" {
     GHC.Event.Array.capacity1_closure:
         const GHC.Event.Array.capacity1_info;
 },
 GHC.Event.Array.capacity1_entry() //  [R2]
         { []
         }
     {offset
       c7Zlu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7ZlD; else goto c7ZlE;
       c7ZlD: // global
           R2 = R2;
           R1 = GHC.Event.Array.capacity1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ZlE: // global
           I64[Sp - 8] = block_c7Zlr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZlK; else goto c7Zls;
       u7ZlK: // global
           call _c7Zlr(R1) args: 0, res: 0, upd: 0;
       c7Zls: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.capacity1_info" {
     GHC.Event.Array.capacity1_info:
         const GHC.Event.Array.capacity1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7Zlr() //  [R1]
         { []
         }
     {offset
       c7Zlr: // global
           _s7Z65::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7Zlx_info;
           R1 = _s7Z65::P64;
           if (R1 & 7 != 0) goto u7ZlJ; else goto c7Zly;
       u7ZlJ: // global
           call _c7Zlx(R1) args: 0, res: 0, upd: 0;
       c7Zly: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zlr_info" {
     block_c7Zlr_info:
         const _c7Zlr;
         const 0;
         const 30;
 },
 _c7Zlx() //  [R1]
         { []
         }
     {offset
       c7Zlx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7ZlI; else goto c7ZlH;
       c7ZlI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZlH: // global
           _s7Z69::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7Z69::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zlx_info" {
     block_c7Zlx_info:
         const _c7Zlx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.216921947 UTC

[section ""data" . GHC.Event.Array.capacity_closure" {
     GHC.Event.Array.capacity_closure:
         const GHC.Event.Array.capacity_info;
 },
 GHC.Event.Array.capacity_entry() //  [R2]
         { []
         }
     {offset
       c7Zm7: // global
           R2 = R2;
           call GHC.Event.Array.capacity1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.capacity_info" {
     GHC.Event.Array.capacity_info:
         const GHC.Event.Array.capacity_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.21989196 UTC

[section ""cstring" . lvl_r7WM4_bytes" {
     lvl_r7WM4_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,65,114,114,97,121,46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.222050889 UTC

[section ""cstring" . lvl1_r7WM5_bytes" {
     lvl1_r7WM5_bytes:
         I8[] [117,110,115,97,102,101,82,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.223642282 UTC

[section ""cstring" . lvl2_r7WM6_bytes" {
     lvl2_r7WM6_bytes:
         I8[] [58,32,98,111,117,110,100,115,32,101,114,114,111,114,44,32,105,110,100,101,120,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.225174956 UTC

[section ""cstring" . lvl3_r7WM7_bytes" {
     lvl3_r7WM7_bytes:
         I8[] [44,32,99,97,112,97,99,105,116,121,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.23050915 UTC

[section ""data" . GHC.Event.Array.$wlvl1_closure" {
     GHC.Event.Array.$wlvl1_closure:
         const GHC.Event.Array.$wlvl1_info;
         const 0;
 },
 sat_s7Z6k_entry() //  [R1]
         { []
         }
     {offset
       c7ZmL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ZmM; else goto c7ZmN;
       c7ZmM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZmN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7ZmI_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Z6k_info" {
     sat_s7Z6k_info:
         const sat_s7Z6k_entry;
         const 4294967296;
         const 17;
 },
 _c7ZmI() //  [R1, R2]
         { []
         }
     {offset
       c7ZmI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7ZmQ; else goto c7ZmP;
       c7ZmQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7ZmP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7ZmI_info" {
     block_c7ZmI_info:
         const _c7ZmI;
         const 0;
         const 30;
 },
 sat_s7Z6l_entry() //  [R1]
         { []
         }
     {offset
       c7ZmR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7ZmV; else goto c7ZmU;
       c7ZmV: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZmU: // global
           _s7Z6b::I64 = I64[R1 + 16];
           I64[Hp - 16] = sat_s7Z6k_info;
           I64[Hp] = _s7Z6b::I64;
           R3 = Hp - 16;
           R2 = lvl3_r7WM7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Z6l_info" {
     sat_s7Z6l_info:
         const sat_s7Z6l_entry;
         const 4294967296;
         const 17;
 },
 sat_s7Z6m_entry() //  [R1]
         { []
         }
     {offset
       c7ZmX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ZmY; else goto c7ZmZ;
       c7ZmY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZmZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c7Zmy_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 24];
           R2 = 0;
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Z6m_info" {
     sat_s7Z6m_info:
         const sat_s7Z6m_entry;
         const 8589934592;
         const 20;
 },
 _c7Zmy() //  [R1, R2]
         { []
         }
     {offset
       c7Zmy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7Zn2; else goto c7Zn1;
       c7Zn2: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7Zn1: // global
           I64[Hp - 40] = sat_s7Z6l_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Zmy_info" {
     block_c7Zmy_info:
         const _c7Zmy;
         const 65;
         const 30;
 },
 sat_s7Z6n_entry() //  [R1]
         { []
         }
     {offset
       c7Zn3: // global
           _s7Z6n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7Zn4; else goto c7Zn5;
       c7Zn5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Zn7; else goto c7Zn6;
       c7Zn7: // global
           HpAlloc = 32;
           goto c7Zn4;
       c7Zn4: // global
           R1 = _s7Z6n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Zn6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7Z6n::P64;
           _s7Z6b::I64 = I64[_s7Z6n::P64 + 16];
           _s7Z6c::I64 = I64[_s7Z6n::P64 + 24];
           I64[Hp - 24] = sat_s7Z6m_info;
           I64[Hp - 8] = _s7Z6b::I64;
           I64[Hp] = _s7Z6c::I64;
           R3 = Hp - 24;
           R2 = lvl2_r7WM6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Z6n_info" {
     sat_s7Z6n_info:
         const sat_s7Z6n_entry;
         const 8589934592;
         const 20;
 },
 sat_s7Z6o_entry() //  [R1]
         { []
         }
     {offset
       c7Zn8: // global
           _s7Z6o::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7Zn9; else goto c7Zna;
       c7Zna: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Znc; else goto c7Znb;
       c7Znc: // global
           HpAlloc = 32;
           goto c7Zn9;
       c7Zn9: // global
           R1 = _s7Z6o::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Znb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7Z6o::P64;
           _s7Z6b::I64 = I64[_s7Z6o::P64 + 16];
           _s7Z6c::I64 = I64[_s7Z6o::P64 + 24];
           I64[Hp - 24] = sat_s7Z6n_info;
           I64[Hp - 8] = _s7Z6b::I64;
           I64[Hp] = _s7Z6c::I64;
           R3 = Hp - 24;
           R2 = lvl1_r7WM5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Z6o_info" {
     sat_s7Z6o_info:
         const sat_s7Z6o_entry;
         const 8589934592;
         const 20;
 },
 GHC.Event.Array.$wlvl1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Znf: // global
           _s7Z6c::I64 = R3;
           _s7Z6b::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c7Zng; else goto c7Znh;
       c7Znh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Znj; else goto c7Zni;
       c7Znj: // global
           HpAlloc = 32;
           goto c7Zng;
       c7Zng: // global
           R3 = _s7Z6c::I64;
           R2 = _s7Z6b::I64;
           R1 = GHC.Event.Array.$wlvl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Zni: // global
           I64[Hp - 24] = sat_s7Z6o_info;
           I64[Hp - 8] = _s7Z6b::I64;
           I64[Hp] = _s7Z6c::I64;
           I64[Sp - 8] = block_c7Znd_info;
           R3 = Hp - 24;
           R2 = lvl_r7WM4_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wlvl1_info" {
     GHC.Event.Array.$wlvl1_info:
         const GHC.Event.Array.$wlvl1_entry;
         const 0;
         const 12884901902;
         const 8589934604;
         const S7Znn_srt;
 },
 _c7Znd() //  [R1]
         { []
         }
     {offset
       c7Znd: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Znd_info" {
     block_c7Znd_info:
         const _c7Znd;
         const 0;
         const 4294967326;
         const S7Znn_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.249791349 UTC

[section ""data" . GHC.Event.Array.$wunsafeRead_closure" {
     GHC.Event.Array.$wunsafeRead_closure:
         const GHC.Event.Array.$wunsafeRead_info;
         const 0;
 },
 GHC.Event.Array.$wunsafeRead_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Zol: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7Zop; else goto c7Zoq;
       c7Zop: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wunsafeRead_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Zoq: // global
           I64[Sp - 24] = block_c7Zoi_info;
           R1 = P64[R3 + 8];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7ZoS; else goto c7Zoj;
       u7ZoS: // global
           call _c7Zoi(R1) args: 0, res: 0, upd: 0;
       c7Zoj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wunsafeRead_info" {
     GHC.Event.Array.$wunsafeRead_info:
         const GHC.Event.Array.$wunsafeRead_entry;
         const 0;
         const 12884901902;
         const 17179869206;
         const S7Znn_srt+8;
 },
 _c7Zoi() //  [R1]
         { []
         }
     {offset
       c7Zoi: // global
           I64[Sp - 8] = block_c7Zoo_info;
           _s7Z6A::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7Z6A::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZoR; else goto c7Zos;
       u7ZoR: // global
           call _c7Zoo(R1) args: 0, res: 0, upd: 0;
       c7Zos: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zoi_info" {
     block_c7Zoi_info:
         const _c7Zoi;
         const 130;
         const 4294967326;
         const S7Znn_srt+8;
 },
 _c7Zoo() //  [R1]
         { []
         }
     {offset
       c7Zoo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Zoy; else goto c7Zox;
       c7Zoy: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Zox: // global
           _s7Z6s::I64 = I64[Sp + 24];
           _s7Z6A::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s7Z6s::I64, 0)) goto c7ZoP; else goto c7ZoO;
       c7ZoO: // global
           if (%MO_S_Ge_W64(_s7Z6s::I64,
                            _s7Z6A::I64)) goto c7ZoP; else goto c7ZoJ;
       c7ZoP: // global
           Hp = Hp - 32;
           R3 = _s7Z6s::I64;
           R2 = _s7Z6A::I64;
           Sp = Sp + 32;
           call GHC.Event.Array.$wlvl1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7ZoJ: // global
           _s7Z6D::P64 = P64[R1 + 7];
           _s7Z6C::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s7Z6s::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7Z6C::I64;
           _s7Z6q::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c7ZoH_info;
           R2 = _s7Z6q::P64;
           I64[Sp - 8] = stg_ap_ppv_info;
           P64[Sp] = Hp - 7;
           P64[Sp + 8] = Hp - 23;
           P64[Sp + 24] = _s7Z6D::P64;
           Sp = Sp - 8;
           call Foreign.Storable.peekElemOff_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zoo_info" {
     block_c7Zoo_info:
         const _c7Zoo;
         const 323;
         const 4294967326;
         const S7Znn_srt+8;
 },
 _c7ZoH() //  [R1]
         { []
         }
     {offset
       c7ZoH: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZoH_info" {
     block_c7ZoH_info:
         const _c7ZoH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.260269244 UTC

[section ""data" . GHC.Event.Array.unsafeRead1_closure" {
     GHC.Event.Array.unsafeRead1_closure:
         const GHC.Event.Array.unsafeRead1_info;
         const 0;
 },
 GHC.Event.Array.unsafeRead1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Zpp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Zpt; else goto c7Zpu;
       c7Zpt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.unsafeRead1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Zpu: // global
           I64[Sp - 24] = block_c7Zpm_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7ZpC; else goto c7Zpn;
       u7ZpC: // global
           call _c7Zpm(R1) args: 0, res: 0, upd: 0;
       c7Zpn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeRead1_info" {
     GHC.Event.Array.unsafeRead1_info:
         const GHC.Event.Array.unsafeRead1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S7Znn_srt+16;
 },
 _c7Zpm() //  [R1]
         { []
         }
     {offset
       c7Zpm: // global
           I64[Sp] = block_c7Zps_info;
           _s7Z6T::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s7Z6T::P64;
           if (R1 & 7 != 0) goto u7ZpB; else goto c7Zpw;
       u7ZpB: // global
           call _c7Zps(R1) args: 0, res: 0, upd: 0;
       c7Zpw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zpm_info" {
     block_c7Zpm_info:
         const _c7Zpm;
         const 2;
         const 4294967326;
         const S7Znn_srt+16;
 },
 _c7Zps() //  [R1]
         { []
         }
     {offset
       c7Zps: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Array.$wunsafeRead_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zps_info" {
     block_c7Zps_info:
         const _c7Zps;
         const 2;
         const 4294967326;
         const S7Znn_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.267041354 UTC

[section ""data" . GHC.Event.Array.unsafeRead_closure" {
     GHC.Event.Array.unsafeRead_closure:
         const GHC.Event.Array.unsafeRead_info;
         const 0;
 },
 GHC.Event.Array.unsafeRead_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7ZpW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.unsafeRead1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeRead_info" {
     GHC.Event.Array.unsafeRead_info:
         const GHC.Event.Array.unsafeRead_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7Znn_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.270132861 UTC

[section ""cstring" . lvl4_r7WM8_bytes" {
     lvl4_r7WM8_bytes:
         I8[] [117,110,115,97,102,101,87,114,105,116,101,39]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.275764426 UTC

[section ""data" . GHC.Event.Array.$wlvl_closure" {
     GHC.Event.Array.$wlvl_closure:
         const GHC.Event.Array.$wlvl_info;
         const 0;
 },
 sat_s7Z75_entry() //  [R1]
         { []
         }
     {offset
       c7Zqx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Zqy; else goto c7Zqz;
       c7Zqy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Zqz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7Zqu_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Z75_info" {
     sat_s7Z75_info:
         const sat_s7Z75_entry;
         const 4294967296;
         const 17;
 },
 _c7Zqu() //  [R1, R2]
         { []
         }
     {offset
       c7Zqu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7ZqC; else goto c7ZqB;
       c7ZqC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7ZqB: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Zqu_info" {
     block_c7Zqu_info:
         const _c7Zqu;
         const 0;
         const 30;
 },
 sat_s7Z76_entry() //  [R1]
         { []
         }
     {offset
       c7ZqD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7ZqH; else goto c7ZqG;
       c7ZqH: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZqG: // global
           _s7Z6W::I64 = I64[R1 + 16];
           I64[Hp - 16] = sat_s7Z75_info;
           I64[Hp] = _s7Z6W::I64;
           R3 = Hp - 16;
           R2 = lvl3_r7WM7_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Z76_info" {
     sat_s7Z76_info:
         const sat_s7Z76_entry;
         const 4294967296;
         const 17;
 },
 sat_s7Z77_entry() //  [R1]
         { []
         }
     {offset
       c7ZqJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ZqK; else goto c7ZqL;
       c7ZqK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZqL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c7Zqk_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 24];
           R2 = 0;
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Z77_info" {
     sat_s7Z77_info:
         const sat_s7Z77_entry;
         const 8589934592;
         const 20;
 },
 _c7Zqk() //  [R1, R2]
         { []
         }
     {offset
       c7Zqk: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7ZqO; else goto c7ZqN;
       c7ZqO: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7ZqN: // global
           I64[Hp - 40] = sat_s7Z76_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Zqk_info" {
     block_c7Zqk_info:
         const _c7Zqk;
         const 65;
         const 30;
 },
 sat_s7Z78_entry() //  [R1]
         { []
         }
     {offset
       c7ZqP: // global
           _s7Z78::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZqQ; else goto c7ZqR;
       c7ZqR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ZqT; else goto c7ZqS;
       c7ZqT: // global
           HpAlloc = 32;
           goto c7ZqQ;
       c7ZqQ: // global
           R1 = _s7Z78::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZqS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7Z78::P64;
           _s7Z6W::I64 = I64[_s7Z78::P64 + 16];
           _s7Z6X::I64 = I64[_s7Z78::P64 + 24];
           I64[Hp - 24] = sat_s7Z77_info;
           I64[Hp - 8] = _s7Z6W::I64;
           I64[Hp] = _s7Z6X::I64;
           R3 = Hp - 24;
           R2 = lvl2_r7WM6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Z78_info" {
     sat_s7Z78_info:
         const sat_s7Z78_entry;
         const 8589934592;
         const 20;
 },
 sat_s7Z79_entry() //  [R1]
         { []
         }
     {offset
       c7ZqU: // global
           _s7Z79::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZqV; else goto c7ZqW;
       c7ZqW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ZqY; else goto c7ZqX;
       c7ZqY: // global
           HpAlloc = 32;
           goto c7ZqV;
       c7ZqV: // global
           R1 = _s7Z79::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZqX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7Z79::P64;
           _s7Z6W::I64 = I64[_s7Z79::P64 + 16];
           _s7Z6X::I64 = I64[_s7Z79::P64 + 24];
           I64[Hp - 24] = sat_s7Z78_info;
           I64[Hp - 8] = _s7Z6W::I64;
           I64[Hp] = _s7Z6X::I64;
           R3 = Hp - 24;
           R2 = lvl4_r7WM8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Z79_info" {
     sat_s7Z79_info:
         const sat_s7Z79_entry;
         const 8589934592;
         const 20;
 },
 GHC.Event.Array.$wlvl_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Zr1: // global
           _s7Z6X::I64 = R3;
           _s7Z6W::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c7Zr2; else goto c7Zr3;
       c7Zr3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Zr5; else goto c7Zr4;
       c7Zr5: // global
           HpAlloc = 32;
           goto c7Zr2;
       c7Zr2: // global
           R3 = _s7Z6X::I64;
           R2 = _s7Z6W::I64;
           R1 = GHC.Event.Array.$wlvl_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Zr4: // global
           I64[Hp - 24] = sat_s7Z79_info;
           I64[Hp - 8] = _s7Z6W::I64;
           I64[Hp] = _s7Z6X::I64;
           I64[Sp - 8] = block_c7ZqZ_info;
           R3 = Hp - 24;
           R2 = lvl_r7WM4_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wlvl_info" {
     GHC.Event.Array.$wlvl_info:
         const GHC.Event.Array.$wlvl_entry;
         const 0;
         const 73014444046;
         const 8589934604;
         const S7Znn_srt;
 },
 _c7ZqZ() //  [R1]
         { []
         }
     {offset
       c7ZqZ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZqZ_info" {
     block_c7ZqZ_info:
         const _c7ZqZ;
         const 0;
         const 4294967326;
         const S7Znn_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.295109013 UTC

[section ""data" . GHC.Event.Array.$wunsafeWrite'_closure" {
     GHC.Event.Array.$wunsafeWrite'_closure:
         const GHC.Event.Array.$wunsafeWrite'_info;
         const 0;
 },
 GHC.Event.Array.$wunsafeWrite'_slow() //  [R1]
         { []
         }
     {offset
       c7Zs0: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 16, res: 0, upd: 8;
     }
 },
 GHC.Event.Array.$wunsafeWrite'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7Zs9: // global
           _s7Z7f::I64 = R6;
           _s7Z7e::I64 = R5;
           _s7Z7d::P64 = R4;
           _s7Z7c::I64 = R3;
           _s7Z7b::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c7Zsa; else goto c7Zsb;
       c7Zsb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Zsd; else goto c7Zsc;
       c7Zsd: // global
           HpAlloc = 32;
           goto c7Zsa;
       c7Zsa: // global
           R1 = GHC.Event.Array.$wunsafeWrite'_closure;
           P64[Sp - 40] = _s7Z7b::P64;
           I64[Sp - 32] = _s7Z7c::I64;
           P64[Sp - 24] = _s7Z7d::P64;
           I64[Sp - 16] = _s7Z7e::I64;
           I64[Sp - 8] = _s7Z7f::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c7Zsc: // global
           if (%MO_S_Lt_W64(_s7Z7f::I64, 0)) goto c7Zs8; else goto c7Zs7;
       c7Zs7: // global
           if (%MO_S_Ge_W64(_s7Z7f::I64,
                            _s7Z7e::I64)) goto c7Zs8; else goto c7Zsm;
       c7Zs8: // global
           Hp = Hp - 32;
           R3 = _s7Z7f::I64;
           R2 = _s7Z7e::I64;
           Sp = Sp + 8;
           call GHC.Event.Array.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7Zsm: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s7Z7f::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7Z7c::I64;
           I64[Sp - 8] = block_c7Zsk_info;
           R2 = _s7Z7b::P64;
           I64[Sp - 40] = stg_ap_pppv_info;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           P64[Sp - 16] = P64[Sp];
           P64[Sp] = _s7Z7d::P64;
           Sp = Sp - 40;
           call Foreign.Storable.pokeElemOff_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wunsafeWrite'_info" {
     GHC.Event.Array.$wunsafeWrite'_info:
         const GHC.Event.Array.$wunsafeWrite'_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const S7Znn_srt+32;
         const 1670;
         const GHC.Event.Array.$wunsafeWrite'_slow;
 },
 _c7Zsk() //  [R1]
         { []
         }
     {offset
       c7Zsk: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zsk_info" {
     block_c7Zsk_info:
         const _c7Zsk;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.302720916 UTC

[section ""data" . GHC.Event.Array.unsafeWrite2_closure" {
     GHC.Event.Array.unsafeWrite2_closure:
         const GHC.Event.Array.unsafeWrite2_info;
         const 0;
 },
 GHC.Event.Array.unsafeWrite2_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c7ZsQ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7ZsZ; else goto c7Zt0;
       c7ZsZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.unsafeWrite2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Zt0: // global
           I64[Sp - 32] = block_c7ZsN_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7Zt9; else goto c7ZsO;
       u7Zt9: // global
           call _c7ZsN(R1) args: 0, res: 0, upd: 0;
       c7ZsO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeWrite2_info" {
     GHC.Event.Array.unsafeWrite2_info:
         const GHC.Event.Array.unsafeWrite2_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S7Znn_srt+40;
 },
 _c7ZsN() //  [R1]
         { []
         }
     {offset
       c7ZsN: // global
           I64[Sp - 8] = block_c7ZsT_info;
           _s7Z7A::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7Z7A::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Zt8; else goto c7ZsU;
       u7Zt8: // global
           call _c7ZsT(R1) args: 0, res: 0, upd: 0;
       c7ZsU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZsN_info" {
     block_c7ZsN_info:
         const _c7ZsN;
         const 3;
         const 4294967326;
         const S7Znn_srt+40;
 },
 _c7ZsT() //  [R1]
         { []
         }
     {offset
       c7ZsT: // global
           I64[Sp - 8] = block_c7ZsY_info;
           _s7Z7D::P64 = P64[R1 + 7];
           _s7Z7C::I64 = I64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s7Z7D::P64;
           I64[Sp + 24] = _s7Z7C::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Zta; else goto c7Zt3;
       u7Zta: // global
           call _c7ZsY(R1) args: 0, res: 0, upd: 0;
       c7Zt3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZsT_info" {
     block_c7ZsT_info:
         const _c7ZsT;
         const 68;
         const 4294967326;
         const S7Znn_srt+40;
 },
 _c7ZsY() //  [R1]
         { []
         }
     {offset
       c7ZsY: // global
           R6 = I64[R1 + 7];
           R5 = I64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = I64[Sp + 32];
           R2 = P64[Sp + 24];
           Sp = Sp + 40;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZsY_info" {
     block_c7ZsY_info:
         const _c7ZsY;
         const 645;
         const 4294967326;
         const S7Znn_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.312047895 UTC

[section ""data" . GHC.Event.Array.unsafeWrite1_closure" {
     GHC.Event.Array.unsafeWrite1_closure:
         const GHC.Event.Array.unsafeWrite1_info;
         const 0;
 },
 GHC.Event.Array.unsafeWrite1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c7ZtC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ZtD; else goto c7ZtE;
       c7ZtD: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.unsafeWrite1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZtE: // global
           I64[Sp - 32] = block_c7Ztz_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7ZtI; else goto c7ZtA;
       u7ZtI: // global
           call _c7Ztz(R1) args: 0, res: 0, upd: 0;
       c7ZtA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeWrite1_info" {
     GHC.Event.Array.unsafeWrite1_info:
         const GHC.Event.Array.unsafeWrite1_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S7Znn_srt+48;
 },
 _c7Ztz() //  [R1]
         { []
         }
     {offset
       c7Ztz: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[P64[R1 + 7] + 8];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Event.Array.unsafeWrite2_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ztz_info" {
     block_c7Ztz_info:
         const _c7Ztz;
         const 3;
         const 4294967326;
         const S7Znn_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.317208117 UTC

[section ""data" . GHC.Event.Array.unsafeWrite_closure" {
     GHC.Event.Array.unsafeWrite_closure:
         const GHC.Event.Array.unsafeWrite_info;
         const 0;
 },
 GHC.Event.Array.unsafeWrite_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c7ZtY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.unsafeWrite1_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeWrite_info" {
     GHC.Event.Array.unsafeWrite_info:
         const GHC.Event.Array.unsafeWrite_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S7Znn_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.323017468 UTC

[section ""data" . GHC.Event.Array.$wunsafeLoad_closure" {
     GHC.Event.Array.$wunsafeLoad_closure:
         const GHC.Event.Array.$wunsafeLoad_info;
 },
 sat_s7Z8b_entry() //  [R1]
         { []
         }
     {offset
       c7Zuv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7Zuz; else goto c7ZuA;
       c7Zuz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZuA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c7Zus_info;
           _s7Z80::P64 = P64[R1 + 16];
           _s7Z7Z::I64 = I64[R1 + 32];
           R1 = P64[R1 + 24];
           I64[Sp - 32] = _s7Z7Z::I64;
           P64[Sp - 24] = _s7Z80::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7ZuE; else goto c7Zut;
       u7ZuE: // global
           call _c7Zus(R1) args: 0, res: 0, upd: 0;
       c7Zut: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Z8b_info" {
     sat_s7Z8b_info:
         const sat_s7Z8b_entry;
         const 4294967298;
         const 15;
 },
 _c7Zus() //  [R1]
         { []
         }
     {offset
       c7Zus: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ZuD; else goto c7ZuC;
       c7ZuD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7ZuC: // global
           _s7Z8a::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = _s7Z8a::I64;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Zus_info" {
     block_c7Zus_info:
         const _c7Zus;
         const 66;
         const 30;
 },
 GHC.Event.Array.$wunsafeLoad_entry() //  [R2, R3]
         { []
         }
     {offset
       c7ZuF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7ZuG; else goto c7ZuH;
       c7ZuG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wunsafeLoad_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZuH: // global
           I64[Sp - 24] = block_c7Zu9_info;
           R1 = P64[R2 + 8];
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7ZuT; else goto c7Zua;
       u7ZuT: // global
           call _c7Zu9(R1) args: 0, res: 0, upd: 0;
       c7Zua: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wunsafeLoad_info" {
     GHC.Event.Array.$wunsafeLoad_info:
         const GHC.Event.Array.$wunsafeLoad_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7Zu9() //  [R1]
         { []
         }
     {offset
       c7Zu9: // global
           I64[Sp - 8] = block_c7Zue_info;
           _s7Z7Z::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7Z7Z::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZuS; else goto c7Zuf;
       u7ZuS: // global
           call _c7Zue(R1) args: 0, res: 0, upd: 0;
       c7Zuf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zu9_info" {
     block_c7Zu9_info:
         const _c7Zu9;
         const 2;
         const 30;
 },
 _c7Zue() //  [R1]
         { []
         }
     {offset
       c7Zue: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ZuL; else goto c7ZuK;
       c7ZuL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZuK: // global
           _s7Z82::P64 = P64[R1 + 7];
           _s7Z81::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7Z81::I64;
           I64[Sp - 8] = block_c7Zul_info;
           R3 = Hp - 23;
           R2 = Hp - 7;
           _s7Z80::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp] = _s7Z82::P64;
           P64[Sp + 24] = _s7Z80::P64;
           Sp = Sp - 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zue_info" {
     block_c7Zue_info:
         const _c7Zue;
         const 67;
         const 30;
 },
 _c7Zul() //  [R1]
         { []
         }
     {offset
       c7Zul: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7ZuO; else goto c7ZuN;
       c7ZuO: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZuN: // global
           _s7Z7Q::P64 = P64[Sp + 24];
           _s7Z7Z::I64 = I64[Sp + 16];
           _s7Z80::P64 = P64[Sp + 32];
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 32] = sat_s7Z8b_info;
           P64[Hp - 16] = _s7Z80::P64;
           P64[Hp - 8] = R1;
           I64[Hp] = _s7Z7Z::I64;
           call MO_WriteBarrier();
           P64[_s7Z7Q::P64 + 8] = Hp - 32;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7Z7Q::P64);
           R1 = R1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zul_info" {
     block_c7Zul_info:
         const _c7Zul;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.336816741 UTC

[section ""data" . GHC.Event.Array.unsafeLoad1_closure" {
     GHC.Event.Array.unsafeLoad1_closure:
         const GHC.Event.Array.unsafeLoad1_info;
 },
 GHC.Event.Array.unsafeLoad1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7ZvF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZvG; else goto c7ZvH;
       c7ZvG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.unsafeLoad1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZvH: // global
           I64[Sp - 16] = block_c7ZvC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ZvL; else goto c7ZvD;
       u7ZvL: // global
           call _c7ZvC(R1) args: 0, res: 0, upd: 0;
       c7ZvD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeLoad1_info" {
     GHC.Event.Array.unsafeLoad1_info:
         const GHC.Event.Array.unsafeLoad1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7ZvC() //  [R1]
         { []
         }
     {offset
       c7ZvC: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Event.Array.$wunsafeLoad_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZvC_info" {
     block_c7ZvC_info:
         const _c7ZvC;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.342058754 UTC

[section ""data" . GHC.Event.Array.unsafeLoad_closure" {
     GHC.Event.Array.unsafeLoad_closure:
         const GHC.Event.Array.unsafeLoad_info;
 },
 GHC.Event.Array.unsafeLoad_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Zw0: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.unsafeLoad1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.unsafeLoad_info" {
     GHC.Event.Array.unsafeLoad_info:
         const GHC.Event.Array.unsafeLoad_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.346995906 UTC

[section ""data" . GHC.Event.Array.useAsPtr1_closure" {
     GHC.Event.Array.useAsPtr1_closure:
         const GHC.Event.Array.useAsPtr1_info;
 },
 GHC.Event.Array.useAsPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Zwe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Zwn; else goto c7Zwo;
       c7Zwn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.useAsPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Zwo: // global
           I64[Sp - 16] = block_c7Zwb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ZwF; else goto c7Zwc;
       u7ZwF: // global
           call _c7Zwb(R1) args: 0, res: 0, upd: 0;
       c7Zwc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.useAsPtr1_info" {
     GHC.Event.Array.useAsPtr1_info:
         const GHC.Event.Array.useAsPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7Zwb() //  [R1]
         { []
         }
     {offset
       c7Zwb: // global
           _s7Z8p::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7Zwh_info;
           R1 = _s7Z8p::P64;
           if (R1 & 7 != 0) goto u7ZwE; else goto c7Zwi;
       u7ZwE: // global
           call _c7Zwh(R1) args: 0, res: 0, upd: 0;
       c7Zwi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zwb_info" {
     block_c7Zwb_info:
         const _c7Zwb;
         const 1;
         const 30;
 },
 _c7Zwh() //  [R1]
         { []
         }
     {offset
       c7Zwh: // global
           I64[Sp - 8] = block_c7Zwm_info;
           _s7Z8s::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7Z8s::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZwG; else goto c7Zwr;
       u7ZwG: // global
           call _c7Zwm(R1) args: 0, res: 0, upd: 0;
       c7Zwr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zwh_info" {
     block_c7Zwh_info:
         const _c7Zwh;
         const 1;
         const 30;
 },
 _c7Zwm() //  [R1]
         { []
         }
     {offset
       c7Zwm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ZwA; else goto c7Zwz;
       c7ZwA: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Zwz: // global
           _s7Z8w::P64 = P64[R1 + 7];
           _s7Z8v::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7Z8v::I64;
           I64[Sp + 8] = block_c7Zwx_info;
           R3 = Hp - 23;
           R2 = Hp - 7;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s7Z8w::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zwm_info" {
     block_c7Zwm_info:
         const _c7Zwm;
         const 66;
         const 30;
 },
 _c7Zwx() //  [R1]
         { []
         }
     {offset
       c7Zwx: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zwx_info" {
     block_c7Zwx_info:
         const _c7Zwx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.356875186 UTC

[section ""data" . GHC.Event.Array.useAsPtr_closure" {
     GHC.Event.Array.useAsPtr_closure:
         const GHC.Event.Array.useAsPtr_info;
 },
 GHC.Event.Array.useAsPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Zxe: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.useAsPtr1_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.useAsPtr_info" {
     GHC.Event.Array.useAsPtr_info:
         const GHC.Event.Array.useAsPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.361081214 UTC

[section ""data" . GHC.Event.Array.clear2_closure" {
     GHC.Event.Array.clear2_closure:
         const GHC.Event.Array.clear2_info;
 },
 GHC.Event.Array.clear2_entry() //  [R2]
         { []
         }
     {offset
       c7Zxs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Zxx; else goto c7Zxy;
       c7Zxx: // global
           R2 = R2;
           R1 = GHC.Event.Array.clear2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Zxy: // global
           I64[Sp - 8] = block_c7Zxp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZxC; else goto c7Zxq;
       u7ZxC: // global
           call _c7Zxp(R1) args: 0, res: 0, upd: 0;
       c7Zxq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.clear2_info" {
     GHC.Event.Array.clear2_info:
         const GHC.Event.Array.clear2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Zxp() //  [R1]
         { []
         }
     {offset
       c7Zxp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7ZxB; else goto c7ZxA;
       c7ZxB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZxA: // global
           _s7Z8F::P64 = P64[R1 + 7];
           _s7Z8H::I64 = I64[R1 + 23];
           I64[Hp - 48] = GHC.Event.Array.AC_con_info;
           P64[Hp - 40] = _s7Z8F::P64;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = _s7Z8H::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = GHC.Tuple.()_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zxp_info" {
     block_c7Zxp_info:
         const _c7Zxp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.367162854 UTC

[section ""data" . GHC.Event.Array.clear1_closure" {
     GHC.Event.Array.clear1_closure:
         const GHC.Event.Array.clear1_info;
 },
 GHC.Event.Array.clear1_entry() //  [R2]
         { []
         }
     {offset
       c7Zy0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Zy6; else goto c7Zy7;
       c7Zy6: // global
           R2 = R2;
           R1 = GHC.Event.Array.clear1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Zy7: // global
           I64[Sp - 8] = block_c7ZxX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Zyf; else goto c7ZxY;
       u7Zyf: // global
           call _c7ZxX(R1) args: 0, res: 0, upd: 0;
       c7ZxY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.clear1_info" {
     GHC.Event.Array.clear1_info:
         const GHC.Event.Array.clear1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7ZxX() //  [R1]
         { []
         }
     {offset
       c7ZxX: // global
           I64[Sp] = block_c7Zy3_info;
           R2 = GHC.Event.Array.clear2_closure+1;
           R1 = P64[R1 + 7];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZxX_info" {
     block_c7ZxX_info:
         const _c7ZxX;
         const 0;
         const 30;
 },
 _c7Zy3() //  [R1]
         { []
         }
     {offset
       c7Zy3: // global
           I64[Sp] = block_c7Zy5_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7Zyg; else goto c7Zya;
       u7Zyg: // global
           call _c7Zy5() args: 0, res: 0, upd: 0;
       c7Zya: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zy3_info" {
     block_c7Zy3_info:
         const _c7Zy3;
         const 0;
         const 30;
 },
 _c7Zy5() //  []
         { []
         }
     {offset
       c7Zy5: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Zy5_info" {
     block_c7Zy5_info:
         const _c7Zy5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.37539834 UTC

[section ""data" . GHC.Event.Array.clear_closure" {
     GHC.Event.Array.clear_closure:
         const GHC.Event.Array.clear_info;
 },
 GHC.Event.Array.clear_entry() //  [R2]
         { []
         }
     {offset
       c7ZyG: // global
           R2 = R2;
           call GHC.Event.Array.clear1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.clear_info" {
     GHC.Event.Array.clear_info:
         const GHC.Event.Array.clear_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.378344729 UTC

[section ""cstring" . lvl5_r7WM9_bytes" {
     lvl5_r7WM9_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.380631273 UTC

[section ""data" . lvl6_r7WMa_closure" {
     lvl6_r7WMa_closure:
         const lvl6_r7WMa_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r7WMa_entry() //  [R1]
         { []
         }
     {offset
       c7ZyU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZyV; else goto c7ZyW;
       c7ZyV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZyW: // global
           (_c7ZyR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ZyR::I64 == 0) goto c7ZyT; else goto c7ZyS;
       c7ZyT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ZyS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ZyR::I64;
           R2 = lvl5_r7WM9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r7WMa_info" {
     lvl6_r7WMa_info:
         const lvl6_r7WMa_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.384416922 UTC

[section ""cstring" . GHC.Event.Array.$trModule4_bytes" {
     GHC.Event.Array.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.386948457 UTC

[section ""data" . lvl7_r7WMb_closure" {
     lvl7_r7WMb_closure:
         const lvl7_r7WMb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r7WMb_entry() //  [R1]
         { []
         }
     {offset
       c7Zzc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Zzd; else goto c7Zze;
       c7Zzd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Zze: // global
           (_c7Zz9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Zz9::I64 == 0) goto c7Zzb; else goto c7Zza;
       c7Zzb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Zza: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Zz9::I64;
           R2 = GHC.Event.Array.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r7WMb_info" {
     lvl7_r7WMb_info:
         const lvl7_r7WMb_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.390340506 UTC

[section ""cstring" . GHC.Event.Array.$trModule2_bytes" {
     GHC.Event.Array.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.392490736 UTC

[section ""data" . lvl8_r7WMc_closure" {
     lvl8_r7WMc_closure:
         const lvl8_r7WMc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r7WMc_entry() //  [R1]
         { []
         }
     {offset
       c7Zzu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Zzv; else goto c7Zzw;
       c7Zzv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Zzw: // global
           (_c7Zzr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Zzr::I64 == 0) goto c7Zzt; else goto c7Zzs;
       c7Zzt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Zzs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Zzr::I64;
           R2 = GHC.Event.Array.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_r7WMc_info" {
     lvl8_r7WMc_info:
         const lvl8_r7WMc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.395829548 UTC

[section ""cstring" . lvl9_r7WMd_bytes" {
     lvl9_r7WMd_bytes:
         I8[] [46,47,71,72,67,47,69,118,101,110,116,47,65,114,114,97,121,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.398338681 UTC

[section ""data" . lvl10_r7WMe_closure" {
     lvl10_r7WMe_closure:
         const lvl10_r7WMe_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r7WMe_entry() //  [R1]
         { []
         }
     {offset
       c7ZzM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZzN; else goto c7ZzO;
       c7ZzN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZzO: // global
           (_c7ZzJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ZzJ::I64 == 0) goto c7ZzL; else goto c7ZzK;
       c7ZzL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ZzK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ZzJ::I64;
           R2 = lvl9_r7WMd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_r7WMe_info" {
     lvl10_r7WMe_info:
         const lvl10_r7WMe_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.402255364 UTC

[section ""data" . lvl11_r7WMf_closure" {
     lvl11_r7WMf_closure:
         const GHC.Types.I#_con_info;
         const 179;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.40390228 UTC

[section ""data" . lvl12_r7WMg_closure" {
     lvl12_r7WMg_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.405590457 UTC

[section ""data" . lvl13_r7WMh_closure" {
     lvl13_r7WMh_closure:
         const GHC.Types.I#_con_info;
         const 38;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.407267907 UTC

[section ""data" . lvl14_r7WMi_closure" {
     lvl14_r7WMi_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl11_r7WMf_closure+1;
         const lvl12_r7WMg_closure+1;
         const lvl11_r7WMf_closure+1;
         const lvl13_r7WMh_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.409055001 UTC

[section ""data" . lvl15_r7WMj_closure" {
     lvl15_r7WMj_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl14_r7WMi_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.413854289 UTC

[section ""data" . GHC.Event.Array.forM_1_closure" {
     GHC.Event.Array.forM_1_closure:
         const GHC.Event.Array.forM_1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.forM_1_entry() //  [R1]
         { []
         }
     {offset
       c7ZA8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZA9; else goto c7ZAa;
       c7ZA9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZAa: // global
           (_c7ZA5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ZA5::I64 == 0) goto c7ZA7; else goto c7ZA6;
       c7ZA7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ZA6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ZA5::I64;
           R2 = lvl15_r7WMj_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.forM_1_info" {
     GHC.Event.Array.forM_1_info:
         const GHC.Event.Array.forM_1_entry;
         const 0;
         const 12884901909;
         const S7Znn_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.421181447 UTC

[section ""data" . GHC.Event.Array.forM__closure" {
     GHC.Event.Array.forM__closure:
         const GHC.Event.Array.forM__info;
         const 0;
 },
 size_s7Z8S_entry() //  [R1]
         { []
         }
     {offset
       c7ZAr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ZAs; else goto c7ZAt;
       c7ZAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZAt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.forM_1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . size_s7Z8S_info" {
     size_s7Z8S_info:
         const size_s7Z8S_entry;
         const 1;
         const 4294967312;
         const S7Znn_srt+80;
 },
 sat_s7Z9r_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c7ZAC: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c7ZAQ; else goto c7ZAR;
       c7ZAQ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZAR: // global
           I64[Sp - 32] = block_c7ZAz_info;
           _s7Z8R::P64 = P64[R1 + 5];
           _s7Z8S::P64 = P64[R1 + 13];
           R1 = R2;
           P64[Sp - 24] = _s7Z8R::P64;
           P64[Sp - 16] = _s7Z8S::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7ZBD; else goto c7ZAA;
       u7ZBD: // global
           call _c7ZAz(R1) args: 0, res: 0, upd: 0;
       c7ZAA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Z9r_info" {
     sat_s7Z9r_info:
         const sat_s7Z9r_entry;
         const 2;
         const 11;
         const 12884901903;
 },
 _c7ZAz() //  [R1]
         { []
         }
     {offset
       c7ZAz: // global
           _s7Z90::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7ZAF_info;
           R1 = _s7Z90::P64;
           if (R1 & 7 != 0) goto u7ZBC; else goto c7ZAG;
       u7ZBC: // global
           call _c7ZAF(R1) args: 0, res: 0, upd: 0;
       c7ZAG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZAz_info" {
     block_c7ZAz_info:
         const _c7ZAz;
         const 3;
         const 30;
 },
 _c7ZAF() //  [R1]
         { []
         }
     {offset
       c7ZAF: // global
           I64[Sp - 8] = block_c7ZAK_info;
           _s7Z93::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7Z93::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZBE; else goto c7ZAL;
       u7ZBE: // global
           call _c7ZAK(R1) args: 0, res: 0, upd: 0;
       c7ZAL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZAF_info" {
     block_c7ZAF_info:
         const _c7ZAF;
         const 3;
         const 30;
 },
 _c7ZAK() //  [R1]
         { []
         }
     {offset
       c7ZAK: // global
           I64[Sp - 8] = block_c7ZAP_info;
           _s7Z97::P64 = P64[R1 + 7];
           _s7Z96::I64 = I64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s7Z97::P64;
           I64[Sp + 24] = _s7Z96::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZBF; else goto c7ZAV;
       u7ZBF: // global
           call _c7ZAP(R1) args: 0, res: 0, upd: 0;
       c7ZAV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZAK_info" {
     block_c7ZAK_info:
         const _c7ZAK;
         const 68;
         const 30;
 },
 _c7ZAP() //  [R1]
         { []
         }
     {offset
       c7ZAP: // global
           I64[Sp - 8] = 0;
           _s7Z99::I64 = I64[R1 + 7];
           I64[Sp] = I64[Sp + 16] * _s7Z99::I64;
           I64[Sp + 16] = _s7Z99::I64;
           Sp = Sp - 8;
           call _c7ZBc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ZAP_info" {
     block_c7ZAP_info:
         const _c7ZAP;
         const 645;
         const 30;
 },
 _c7ZBc() //  []
         { []
         }
     {offset
       c7ZBc: // global
           Hp = Hp + 16;
           _s7Z9f::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c7ZBg; else goto c7ZBf;
       c7ZBg: // global
           HpAlloc = 16;
           I64[Sp] = block_c7ZBb_info;
           R1 = _s7Z9f::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7ZBf: // global
           if (%MO_S_Lt_W64(_s7Z9f::I64,
                            I64[Sp + 8])) goto c7ZBs; else goto c7ZBw;
       c7ZBs: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 40] + _s7Z9f::I64;
           I64[Sp - 8] = block_c7ZBo_info;
           R2 = P64[Sp + 32];
           I64[Sp - 24] = stg_ap_pv_info;
           P64[Sp - 16] = Hp - 7;
           Sp = Sp - 24;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 8, upd: 8;
       c7ZBw: // global
           Hp = Hp - 16;
           call MO_Touch(P64[Sp + 16]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7ZBb() //  [R1]
         { []
         }
     {offset
       c7ZBb: // global
           I64[Sp] = R1;
           call _c7ZBc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ZBb_info" {
     block_c7ZBb_info:
         const _c7ZBb;
         const 1350;
         const 30;
 },
 _c7ZBo() //  [R1]
         { []
         }
     {offset
       c7ZBo: // global
           I64[Sp] = block_c7ZBq_info;
           R2 = R1;
           R1 = P64[Sp + 56];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZBo_info" {
     block_c7ZBo_info:
         const _c7ZBo;
         const 2759;
         const 30;
 },
 _c7ZBq() //  []
         { []
         }
     {offset
       c7ZBq: // global
           I64[Sp + 8] = I64[Sp + 8] + I64[Sp + 32];
           Sp = Sp + 8;
           call _c7ZBc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ZBq_info" {
     block_c7ZBq_info:
         const _c7ZBq;
         const 2759;
         const 30;
 },
 GHC.Event.Array.forM__entry() //  [R2]
         { []
         }
     {offset
       c7ZBJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7ZBN; else goto c7ZBM;
       c7ZBN: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Event.Array.forM__closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ZBM: // global
           I64[Hp - 40] = size_s7Z8S_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s7Z9r_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.forM__info" {
     GHC.Event.Array.forM__info:
         const GHC.Event.Array.forM__entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S7Znn_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.440204794 UTC

[section ""data" . lvl16_r7WMk_closure" {
     lvl16_r7WMk_closure:
         const GHC.Types.I#_con_info;
         const 194;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.441997707 UTC

[section ""data" . lvl17_r7WMl_closure" {
     lvl17_r7WMl_closure:
         const GHC.Types.I#_con_info;
         const 33;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.44364945 UTC

[section ""data" . lvl18_r7WMm_closure" {
     lvl18_r7WMm_closure:
         const GHC.Types.I#_con_info;
         const 42;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.445256951 UTC

[section ""data" . lvl19_r7WMn_closure" {
     lvl19_r7WMn_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl16_r7WMk_closure+1;
         const lvl17_r7WMl_closure+1;
         const lvl16_r7WMk_closure+1;
         const lvl18_r7WMm_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.446915116 UTC

[section ""data" . lvl20_r7WMo_closure" {
     lvl20_r7WMo_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl19_r7WMn_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.449733591 UTC

[section ""data" . GHC.Event.Array.loop1_closure" {
     GHC.Event.Array.loop1_closure:
         const GHC.Event.Array.loop1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.loop1_entry() //  [R1]
         { []
         }
     {offset
       c7ZD2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZD3; else goto c7ZD4;
       c7ZD3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZD4: // global
           (_c7ZCZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ZCZ::I64 == 0) goto c7ZD1; else goto c7ZD0;
       c7ZD1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ZD0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ZCZ::I64;
           R2 = lvl20_r7WMo_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.loop1_info" {
     GHC.Event.Array.loop1_info:
         const GHC.Event.Array.loop1_entry;
         const 0;
         const 73014444053;
         const S7Znn_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.457757412 UTC

[section ""data" . GHC.Event.Array.loop_closure" {
     GHC.Event.Array.loop_closure:
         const GHC.Event.Array.loop_info;
         const 0;
 },
 size_s7Z9t_entry() //  [R1]
         { []
         }
     {offset
       c7ZDl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ZDm; else goto c7ZDn;
       c7ZDm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZDn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.loop1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . size_s7Z9t_info" {
     size_s7Z9t_info:
         const size_s7Z9t_entry;
         const 1;
         const 4294967312;
         const S7Znn_srt+104;
 },
 sat_s7Zab_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c7ZDw: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c7ZDK; else goto c7ZDL;
       c7ZDK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZDL: // global
           I64[Sp - 40] = block_c7ZDt_info;
           _s7Z9s::P64 = P64[R1 + 4];
           _s7Z9t::P64 = P64[R1 + 12];
           R1 = R2;
           P64[Sp - 32] = _s7Z9s::P64;
           P64[Sp - 24] = _s7Z9t::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7ZEW; else goto c7ZDu;
       u7ZEW: // global
           call _c7ZDt(R1) args: 0, res: 0, upd: 0;
       c7ZDu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Zab_info" {
     sat_s7Zab_info:
         const sat_s7Zab_entry;
         const 2;
         const 11;
         const 17179869207;
 },
 _c7ZDt() //  [R1]
         { []
         }
     {offset
       c7ZDt: // global
           _s7Z9C::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7ZDz_info;
           R1 = _s7Z9C::P64;
           if (R1 & 7 != 0) goto u7ZEV; else goto c7ZDA;
       u7ZEV: // global
           call _c7ZDz(R1) args: 0, res: 0, upd: 0;
       c7ZDA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZDt_info" {
     block_c7ZDt_info:
         const _c7ZDt;
         const 4;
         const 30;
 },
 _c7ZDz() //  [R1]
         { []
         }
     {offset
       c7ZDz: // global
           I64[Sp - 8] = block_c7ZDE_info;
           _s7Z9F::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7Z9F::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZEX; else goto c7ZDF;
       u7ZEX: // global
           call _c7ZDE(R1) args: 0, res: 0, upd: 0;
       c7ZDF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZDz_info" {
     block_c7ZDz_info:
         const _c7ZDz;
         const 4;
         const 30;
 },
 _c7ZDE() //  [R1]
         { []
         }
     {offset
       c7ZDE: // global
           I64[Sp - 8] = block_c7ZDJ_info;
           _s7Z9J::P64 = P64[R1 + 7];
           _s7Z9I::I64 = I64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s7Z9J::P64;
           I64[Sp + 24] = _s7Z9I::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZEY; else goto c7ZDP;
       u7ZEY: // global
           call _c7ZDJ(R1) args: 0, res: 0, upd: 0;
       c7ZDP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZDE_info" {
     block_c7ZDE_info:
         const _c7ZDE;
         const 69;
         const 30;
 },
 _c7ZDJ() //  [R1]
         { []
         }
     {offset
       c7ZDJ: // global
           P64[Sp - 8] = P64[Sp + 40];
           I64[Sp] = 0;
           _s7Z9L::I64 = I64[R1 + 7];
           I64[Sp + 16] = I64[Sp + 16] * _s7Z9L::I64;
           I64[Sp + 40] = _s7Z9L::I64;
           Sp = Sp - 16;
           call _c7ZEb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ZDJ_info" {
     block_c7ZDJ_info:
         const _c7ZDJ;
         const 646;
         const 30;
 },
 _c7ZEb() //  []
         { []
         }
     {offset
       c7ZEb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7ZEg; else goto c7ZEf;
       c7ZEg: // global
           HpAlloc = 16;
           I64[Sp] = block_c7ZEb_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7ZEf: // global
           _s7Z9U::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s7Z9U::I64,
                            I64[Sp + 32])) goto c7ZEu; else goto c7ZEO;
       c7ZEu: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 48] + _s7Z9U::I64;
           I64[Sp] = block_c7ZEo_info;
           R2 = P64[Sp + 40];
           I64[Sp - 16] = stg_ap_pv_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 8, upd: 8;
       c7ZEO: // global
           Hp = Hp - 16;
           call MO_Touch(P64[Sp + 24]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZEb_info" {
     block_c7ZEb_info:
         const _c7ZEb;
         const 6792;
         const 30;
 },
 _c7ZEo() //  [R1]
         { []
         }
     {offset
       c7ZEo: // global
           _s7Z9V::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7ZEq_info;
           R3 = R1;
           R2 = _s7Z9V::P64;
           R1 = P64[Sp + 64];
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZEo_info" {
     block_c7ZEo_info:
         const _c7ZEo;
         const 6792;
         const 30;
 },
 _c7ZEq() //  [R1]
         { []
         }
     {offset
       c7ZEq: // global
           I64[Sp] = block_c7ZEs_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7ZF0; else goto c7ZEx;
       u7ZF0: // global
           call _c7ZEs(R1) args: 0, res: 0, upd: 0;
       c7ZEx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZEq_info" {
     block_c7ZEq_info:
         const _c7ZEq;
         const 3399;
         const 30;
 },
 _c7ZEs() //  [R1]
         { []
         }
     {offset
       c7ZEs: // global
           I64[Sp - 8] = block_c7ZEB_info;
           _s7Za7::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s7Za7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZF1; else goto c7ZED;
       u7ZF1: // global
           call _c7ZEB(R1) args: 0, res: 0, upd: 0;
       c7ZED: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZEs_info" {
     block_c7ZEs_info:
         const _c7ZEs;
         const 3399;
         const 30;
 },
 _c7ZEB() //  [R1]
         { []
         }
     {offset
       c7ZEB: // global
           if (R1 & 7 == 1) goto c7ZEJ; else goto c7ZEN;
       c7ZEJ: // global
           call MO_Touch(P64[Sp + 24]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ZEN: // global
           I64[Sp + 16] = I64[Sp + 16] + I64[Sp + 56];
           P64[Sp + 8] = P64[Sp + 8];
           call _c7ZEb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ZEB_info" {
     block_c7ZEB_info:
         const _c7ZEB;
         const 6792;
         const 30;
 },
 GHC.Event.Array.loop_entry() //  [R2]
         { []
         }
     {offset
       c7ZF3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7ZF7; else goto c7ZF6;
       c7ZF7: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Event.Array.loop_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ZF6: // global
           I64[Hp - 40] = size_s7Z9t_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s7Zab_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 12;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.loop_info" {
     GHC.Event.Array.loop_info:
         const GHC.Event.Array.loop_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S7Znn_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.47904761 UTC

[section ""data" . GHC.Event.Array.$trModule3_closure" {
     GHC.Event.Array.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.480686855 UTC

[section ""data" . GHC.Event.Array.$trModule1_closure" {
     GHC.Event.Array.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.482312784 UTC

[section ""data" . GHC.Event.Array.$trModule_closure" {
     GHC.Event.Array.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Array.$trModule3_closure+1;
         const GHC.Event.Array.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.483984292 UTC

[section ""data" . $krep_r7WMp_closure" {
     $krep_r7WMp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.485878761 UTC

[section ""data" . $krep1_r7WMq_closure" {
     $krep1_r7WMq_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.487488134 UTC

[section ""data" . $krep2_r7WMr_closure" {
     $krep2_r7WMr_closure:
         const :_con_info;
         const $krep1_r7WMq_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.48912659 UTC

[section ""data" . $krep3_r7WMs_closure" {
     $krep3_r7WMs_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep2_r7WMr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.490728732 UTC

[section ""cstring" . GHC.Event.Array.$tcAC2_bytes" {
     GHC.Event.Array.$tcAC2_bytes:
         I8[] [65,67]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.492316847 UTC

[section ""data" . GHC.Event.Array.$tcAC1_closure" {
     GHC.Event.Array.$tcAC1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$tcAC2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.494046942 UTC

[section ""data" . GHC.Event.Array.$tcAC_closure" {
     GHC.Event.Array.$tcAC_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Array.$trModule_closure+1;
         const GHC.Event.Array.$tcAC1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 14339520722473255067;
         const 15778732457674388659;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.495765223 UTC

[section ""data" . $krep4_r7WMt_closure" {
     $krep4_r7WMt_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcAC_closure+1;
         const $krep2_r7WMr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.497930775 UTC

[section ""data" . $krep5_r7WMu_closure" {
     $krep5_r7WMu_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7WMp_closure+1;
         const $krep4_r7WMt_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.499465349 UTC

[section ""data" . $krep6_r7WMv_closure" {
     $krep6_r7WMv_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7WMp_closure+1;
         const $krep5_r7WMu_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.501086109 UTC

[section ""data" . GHC.Event.Array.$tc'AC1_closure" {
     GHC.Event.Array.$tc'AC1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7WMs_closure+1;
         const $krep6_r7WMv_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.503201416 UTC

[section ""cstring" . GHC.Event.Array.$tc'AC3_bytes" {
     GHC.Event.Array.$tc'AC3_bytes:
         I8[] [39,65,67]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.504774984 UTC

[section ""data" . GHC.Event.Array.$tc'AC2_closure" {
     GHC.Event.Array.$tc'AC2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$tc'AC3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.506460593 UTC

[section ""data" . GHC.Event.Array.$tc'AC_closure" {
     GHC.Event.Array.$tc'AC_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Array.$trModule_closure+1;
         const GHC.Event.Array.$tc'AC2_closure+1;
         const GHC.Event.Array.$tc'AC1_closure+4;
         const 954782197074941232;
         const 8411064637322477330;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.508137159 UTC

[section ""data" . $krep7_r7WMw_closure" {
     $krep7_r7WMw_closure:
         const :_con_info;
         const $krep4_r7WMt_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.510410379 UTC

[section ""data" . $krep8_r7WMx_closure" {
     $krep8_r7WMx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep7_r7WMw_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.51205308 UTC

[section ""cstring" . GHC.Event.Array.$tcArray2_bytes" {
     GHC.Event.Array.$tcArray2_bytes:
         I8[] [65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.513783232 UTC

[section ""data" . GHC.Event.Array.$tcArray1_closure" {
     GHC.Event.Array.$tcArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$tcArray2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.51545277 UTC

[section ""data" . GHC.Event.Array.$tcArray_closure" {
     GHC.Event.Array.$tcArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Array.$trModule_closure+1;
         const GHC.Event.Array.$tcArray1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 18201768782471713089;
         const 1209293416176401920;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.517220325 UTC

[section ""data" . $krep9_r7WMy_closure" {
     $krep9_r7WMy_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcArray_closure+1;
         const $krep2_r7WMr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.518950497 UTC

[section ""data" . GHC.Event.Array.$tc'Array1_closure" {
     GHC.Event.Array.$tc'Array1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7WMx_closure+1;
         const $krep9_r7WMy_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.520612048 UTC

[section ""cstring" . GHC.Event.Array.$tc'Array3_bytes" {
     GHC.Event.Array.$tc'Array3_bytes:
         I8[] [39,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.522723991 UTC

[section ""data" . GHC.Event.Array.$tc'Array2_closure" {
     GHC.Event.Array.$tc'Array2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Array.$tc'Array3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.524548086 UTC

[section ""data" . GHC.Event.Array.$tc'Array_closure" {
     GHC.Event.Array.$tc'Array_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Array.$trModule_closure+1;
         const GHC.Event.Array.$tc'Array2_closure+1;
         const GHC.Event.Array.$tc'Array1_closure+4;
         const 1928439007980526225;
         const 8720085055779125030;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.526322638 UTC

[section ""data" . lvl21_r7WMz_closure" {
     lvl21_r7WMz_closure:
         const GHC.Types.I#_con_info;
         const 265;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.527992223 UTC

[section ""data" . lvl22_r7WMA_closure" {
     lvl22_r7WMA_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl21_r7WMz_closure+1;
         const lvl12_r7WMg_closure+1;
         const lvl21_r7WMz_closure+1;
         const lvl13_r7WMh_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.530076606 UTC

[section ""data" . lvl23_r7WMB_closure" {
     lvl23_r7WMB_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl22_r7WMA_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.532441961 UTC

[section ""data" . GHC.Event.Array.removeAt2_closure" {
     GHC.Event.Array.removeAt2_closure:
         const GHC.Event.Array.removeAt2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.removeAt2_entry() //  [R1]
         { []
         }
     {offset
       c7ZGZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZH0; else goto c7ZH1;
       c7ZH0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZH1: // global
           (_c7ZGW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ZGW::I64 == 0) goto c7ZGY; else goto c7ZGX;
       c7ZGY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ZGX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ZGW::I64;
           R2 = lvl23_r7WMB_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.removeAt2_info" {
     GHC.Event.Array.removeAt2_info:
         const GHC.Event.Array.removeAt2_entry;
         const 0;
         const 554050781205;
         const S7Znn_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.536157023 UTC

[section ""cstring" . lvl24_r7WMC_bytes" {
     lvl24_r7WMC_bytes:
         I8[] [114,101,109,111,118,101,65,116,58,32,105,110,118,97,108,105,100,32,105,110,100,101,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.53845543 UTC

[section ""data" . GHC.Event.Array.removeAt1_closure" {
     GHC.Event.Array.removeAt1_closure:
         const GHC.Event.Array.removeAt1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.removeAt1_entry() //  [R1]
         { []
         }
     {offset
       c7ZHj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ZHk; else goto c7ZHl;
       c7ZHk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZHl: // global
           (_c7ZHe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ZHe::I64 == 0) goto c7ZHg; else goto c7ZHf;
       c7ZHg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ZHf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ZHe::I64;
           I64[Sp - 24] = block_c7ZHh_info;
           R2 = lvl24_r7WMC_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.removeAt1_info" {
     GHC.Event.Array.removeAt1_info:
         const GHC.Event.Array.removeAt1_entry;
         const 0;
         const 4294967317;
         const S7Znn_srt;
 },
 _c7ZHh() //  [R1]
         { []
         }
     {offset
       c7ZHh: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7ZHh_info" {
     block_c7ZHh_info:
         const _c7ZHh;
         const 0;
         const 4294967326;
         const S7Znn_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.548150471 UTC

[section ""data" . GHC.Event.Array.removeAt_closure" {
     GHC.Event.Array.removeAt_closure:
         const GHC.Event.Array.removeAt_info;
         const 0;
 },
 size_s7Zae_entry() //  [R1]
         { []
         }
     {offset
       c7ZHJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ZHK; else goto c7ZHL;
       c7ZHK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZHL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.removeAt2_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . size_s7Zae_info" {
     size_s7Zae_info:
         const size_s7Zae_entry;
         const 1;
         const 4294967312;
         const S7Znn_srt+128;
 },
 sat_s7ZaY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c7ZHU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7ZI8; else goto c7ZI9;
       c7ZI8: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZI9: // global
           I64[Sp - 24] = block_c7ZHR_info;
           _s7Zae::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 16] = _s7Zae::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7ZJB; else goto c7ZHS;
       u7ZJB: // global
           call _c7ZHR(R1) args: 0, res: 0, upd: 0;
       c7ZHS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7ZaY_info" {
     sat_s7ZaY_info:
         const sat_s7ZaY_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const S7Znn_srt+136;
 },
 _c7ZHR() //  [R1]
         { []
         }
     {offset
       c7ZHR: // global
           I64[Sp - 8] = block_c7ZHX_info;
           _s7Zaj::P64 = P64[R1 + 7];
           R1 = P64[_s7Zaj::P64 + 8];
           P64[Sp] = _s7Zaj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZJA; else goto c7ZHY;
       u7ZJA: // global
           call _c7ZHX(R1) args: 0, res: 0, upd: 0;
       c7ZHY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZHR_info" {
     block_c7ZHR_info:
         const _c7ZHR;
         const 2;
         const 4294967326;
         const S7Znn_srt+136;
 },
 _c7ZHX() //  [R1]
         { []
         }
     {offset
       c7ZHX: // global
           I64[Sp - 16] = block_c7ZI2_info;
           _s7Zap::I64 = I64[R1 + 15];
           _s7Zaq::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _s7Zaq::I64;
           I64[Sp] = _s7Zap::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ZJC; else goto c7ZI3;
       u7ZJC: // global
           call _c7ZI2(R1) args: 0, res: 0, upd: 0;
       c7ZI3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZHX_info" {
     block_c7ZHX_info:
         const _c7ZHX;
         const 3;
         const 4294967326;
         const S7Znn_srt+136;
 },
 _c7ZI2() //  [R1]
         { []
         }
     {offset
       c7ZI2: // global
           I64[Sp - 16] = block_c7ZI7_info;
           _s7Zar::P64 = R1;
           _s7Zat::P64 = P64[R1 + 7];
           _s7Zas::I64 = I64[R1 + 15];
           R1 = P64[Sp + 40];
           P64[Sp - 8] = _s7Zat::P64;
           I64[Sp] = _s7Zas::I64;
           P64[Sp + 40] = _s7Zar::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ZJD; else goto c7ZId;
       u7ZJD: // global
           call _c7ZI7(R1) args: 0, res: 0, upd: 0;
       c7ZId: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZI2_info" {
     block_c7ZI2_info:
         const _c7ZI2;
         const 197;
         const 4294967326;
         const S7Znn_srt+136;
 },
 _c7ZI7() //  [R1]
         { []
         }
     {offset
       c7ZI7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ZIj; else goto c7ZIi;
       c7ZIj: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZIi: // global
           _s7Zav::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_s7Zav::I64, 0)) goto c7ZIU; else goto c7ZIT;
       c7ZIT: // global
           _s7Zap::I64 = I64[Sp + 32];
           if (%MO_S_Ge_W64(_s7Zav::I64,
                            _s7Zap::I64)) goto c7ZIU; else goto c7ZIQ;
       c7ZIU: // global
           Hp = Hp - 32;
           R1 = GHC.Event.Array.removeAt1_closure;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7ZIQ: // global
           _s7Zaj::P64 = P64[Sp + 40];
           _s7Zaq::I64 = I64[Sp + 24];
           _s7Zar::P64 = P64[Sp + 56];
           _s7Zay::I64 = _s7Zap::I64 - 1;
           if (%MO_S_Le_W64(_s7Zay::I64, 0)) goto c7ZIw; else goto c7ZIO;
       c7ZIw: // global
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = _s7Zar::P64;
           I64[Hp - 8] = _s7Zay::I64;
           I64[Hp] = _s7Zaq::I64;
           call MO_WriteBarrier();
           P64[_s7Zaj::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7Zaj::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ZIO: // global
           if (%MO_S_Ge_W64(_s7Zav::I64,
                            _s7Zay::I64)) goto c7ZIC; else goto c7ZIG;
       c7ZIC: // global
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = _s7Zar::P64;
           I64[Hp - 8] = _s7Zay::I64;
           I64[Hp] = _s7Zaq::I64;
           call MO_WriteBarrier();
           P64[_s7Zaj::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7Zaj::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ZIG: // global
           Hp = Hp - 32;
           I64[Sp] = block_c7ZIF_info;
           R1 = P64[Sp + 48];
           I64[Sp + 32] = _s7Zay::I64;
           I64[Sp + 48] = _s7Zav::I64;
           if (R1 & 7 != 0) goto u7ZJE; else goto c7ZIH;
       u7ZJE: // global
           call _c7ZIF(R1) args: 0, res: 0, upd: 0;
       c7ZIH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZI7_info" {
     block_c7ZI7_info:
         const _c7ZI7;
         const 903;
         const 4294967326;
         const S7Znn_srt+136;
 },
 _c7ZIF() //  [R1]
         { []
         }
     {offset
       c7ZIF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ZIN; else goto c7ZIM;
       c7ZIN: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZIM: // global
           _s7Zaj::P64 = P64[Sp + 40];
           _s7Zaq::I64 = I64[Sp + 24];
           _s7Zar::P64 = P64[Sp + 56];
           _s7Zas::I64 = I64[Sp + 16];
           _s7Zat::P64 = P64[Sp + 8];
           _s7Zav::I64 = I64[Sp + 48];
           _s7Zay::I64 = I64[Sp + 32];
           _s7ZaG::I64 = I64[R1 + 7];
           (_s7ZaS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memmove(_s7Zas::I64 + _s7ZaG::I64 * _s7Zav::I64, _s7Zas::I64 + _s7ZaG::I64 * (_s7Zav::I64 + 1), _s7ZaG::I64 * (_s7Zay::I64 - _s7Zav::I64));
           call MO_Touch(_s7Zat::P64);
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = _s7Zar::P64;
           I64[Hp - 8] = _s7Zay::I64;
           I64[Hp] = _s7Zaq::I64;
           call MO_WriteBarrier();
           P64[_s7Zaj::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7Zaj::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZIF_info" {
     block_c7ZIF_info:
         const _c7ZIF;
         const 2951;
         const 30;
 },
 GHC.Event.Array.removeAt_entry() //  [R2]
         { []
         }
     {offset
       c7ZJF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7ZJJ; else goto c7ZJI;
       c7ZJJ: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Event.Array.removeAt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ZJI: // global
           I64[Hp - 32] = size_s7Zae_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s7ZaY_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.removeAt_info" {
     GHC.Event.Array.removeAt_info:
         const GHC.Event.Array.removeAt_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S7Znn_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.566249098 UTC

[section ""data" . lvl25_r7WMD_closure" {
     lvl25_r7WMD_closure:
         const GHC.Types.I#_con_info;
         const 211;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.567910687 UTC

[section ""data" . lvl26_r7WME_closure" {
     lvl26_r7WME_closure:
         const GHC.Types.I#_con_info;
         const 22;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.569608074 UTC

[section ""data" . lvl27_r7WMF_closure" {
     lvl27_r7WMF_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.571287667 UTC

[section ""data" . lvl28_r7WMG_closure" {
     lvl28_r7WMG_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl25_r7WMD_closure+1;
         const lvl26_r7WME_closure+1;
         const lvl25_r7WMD_closure+1;
         const lvl27_r7WMF_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.573038552 UTC

[section ""data" . lvl29_r7WMH_closure" {
     lvl29_r7WMH_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl28_r7WMG_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.575634923 UTC

[section ""data" . GHC.Event.Array.findIndex1_closure" {
     GHC.Event.Array.findIndex1_closure:
         const GHC.Event.Array.findIndex1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.findIndex1_entry() //  [R1]
         { []
         }
     {offset
       c7ZL4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZL5; else goto c7ZL6;
       c7ZL5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZL6: // global
           (_c7ZL1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ZL1::I64 == 0) goto c7ZL3; else goto c7ZL2;
       c7ZL3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ZL2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ZL1::I64;
           R2 = lvl29_r7WMH_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.findIndex1_info" {
     GHC.Event.Array.findIndex1_info:
         const GHC.Event.Array.findIndex1_entry;
         const 0;
         const 8800387989525;
         const S7Znn_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.583700695 UTC

[section ""data" . GHC.Event.Array.findIndex_closure" {
     GHC.Event.Array.findIndex_closure:
         const GHC.Event.Array.findIndex_info;
         const 0;
 },
 size_s7Zb0_entry() //  [R1]
         { []
         }
     {offset
       c7ZLn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ZLo; else goto c7ZLp;
       c7ZLo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZLp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.findIndex1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . size_s7Zb0_info" {
     size_s7Zb0_info:
         const size_s7Zb0_entry;
         const 1;
         const 4294967312;
         const S7Znn_srt+160;
 },
 sat_s7ZbH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c7ZLy: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c7ZLM; else goto c7ZLN;
       c7ZLM: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZLN: // global
           I64[Sp - 32] = block_c7ZLv_info;
           _s7ZaZ::P64 = P64[R1 + 5];
           _s7Zb0::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 24] = _s7ZaZ::P64;
           P64[Sp - 16] = _s7Zb0::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7ZMX; else goto c7ZLw;
       u7ZMX: // global
           call _c7ZLv(R1) args: 0, res: 0, upd: 0;
       c7ZLw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7ZbH_info" {
     sat_s7ZbH_info:
         const sat_s7ZbH_entry;
         const 2;
         const 11;
         const 12884901903;
 },
 _c7ZLv() //  [R1]
         { []
         }
     {offset
       c7ZLv: // global
           _s7Zb8::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c7ZLB_info;
           R1 = _s7Zb8::P64;
           if (R1 & 7 != 0) goto u7ZMW; else goto c7ZLC;
       u7ZMW: // global
           call _c7ZLB(R1) args: 0, res: 0, upd: 0;
       c7ZLC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZLv_info" {
     block_c7ZLv_info:
         const _c7ZLv;
         const 3;
         const 30;
 },
 _c7ZLB() //  [R1]
         { []
         }
     {offset
       c7ZLB: // global
           I64[Sp - 8] = block_c7ZLG_info;
           _s7Zbb::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7Zbb::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZMY; else goto c7ZLH;
       u7ZMY: // global
           call _c7ZLG(R1) args: 0, res: 0, upd: 0;
       c7ZLH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZLB_info" {
     block_c7ZLB_info:
         const _c7ZLB;
         const 3;
         const 30;
 },
 _c7ZLG() //  [R1]
         { []
         }
     {offset
       c7ZLG: // global
           I64[Sp - 8] = block_c7ZLL_info;
           _s7Zbf::P64 = P64[R1 + 7];
           _s7Zbe::I64 = I64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s7Zbf::P64;
           I64[Sp + 24] = _s7Zbe::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7ZMZ; else goto c7ZLR;
       u7ZMZ: // global
           call _c7ZLL(R1) args: 0, res: 0, upd: 0;
       c7ZLR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZLG_info" {
     block_c7ZLG_info:
         const _c7ZLG;
         const 68;
         const 30;
 },
 _c7ZLL() //  [R1]
         { []
         }
     {offset
       c7ZLL: // global
           I64[Sp - 16] = 0;
           I64[Sp - 8] = 0;
           _s7Zbh::I64 = I64[R1 + 7];
           I64[Sp] = I64[Sp + 16] * _s7Zbh::I64;
           I64[Sp + 16] = _s7Zbh::I64;
           Sp = Sp - 24;
           call _c7ZMj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ZLL_info" {
     block_c7ZLL_info:
         const _c7ZLL;
         const 645;
         const 30;
 },
 _c7ZMj() //  []
         { []
         }
     {offset
       c7ZMj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7ZMo; else goto c7ZMn;
       c7ZMo: // global
           HpAlloc = 16;
           I64[Sp] = block_c7ZMj_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7ZMn: // global
           _s7Zbv::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s7Zbv::I64,
                            I64[Sp + 24])) goto c7ZMA; else goto c7ZMM;
       c7ZMA: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 56] + _s7Zbv::I64;
           I64[Sp] = block_c7ZMw_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_pv_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Foreign.Storable.peek_entry(R2) args: 24, res: 8, upd: 8;
       c7ZMM: // global
           Hp = Hp - 16;
           call MO_Touch(P64[Sp + 32]);
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZMj_info" {
     block_c7ZMj_info:
         const _c7ZMj;
         const 5576;
         const 30;
 },
 _c7ZMw() //  [R1]
         { []
         }
     {offset
       c7ZMw: // global
           I64[Sp - 8] = block_c7ZMy_info;
           R2 = R1;
           _s7ZbD::P64 = R1;
           R1 = P64[Sp + 64];
           P64[Sp] = _s7ZbD::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZMw_info" {
     block_c7ZMw_info:
         const _c7ZMw;
         const 5576;
         const 30;
 },
 _c7ZMy() //  [R1]
         { []
         }
     {offset
       c7ZMy: // global
           _s7Zbw::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c7ZMH; else goto c7ZML;
       c7ZMH: // global
           I64[Sp + 16] = I64[Sp + 16] + I64[Sp + 48];
           I64[Sp + 24] = _s7Zbw::I64 + 1;
           Sp = Sp + 8;
           call _c7ZMj() args: 0, res: 0, upd: 0;
       c7ZML: // global
           P64[Sp + 64] = P64[Sp + 8];
           I64[Sp + 72] = _s7Zbw::I64;
           Sp = Sp + 32;
           call _c7ZM1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ZMy_info" {
     block_c7ZMy_info:
         const _c7ZMy;
         const 11145;
         const 30;
 },
 _c7ZM1() //  []
         { []
         }
     {offset
       c7ZM1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7ZMa; else goto c7ZM9;
       c7ZMa: // global
           HpAlloc = 56;
           I64[Sp] = block_c7ZM1_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c7ZM9: // global
           _s7Zbk::I64 = I64[Sp + 40];
           _s7Zbm::P64 = P64[Sp + 32];
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s7Zbk::I64;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = _s7Zbm::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZM1_info" {
     block_c7ZM1_info:
         const _c7ZM1;
         const 1413;
         const 30;
 },
 GHC.Event.Array.findIndex_entry() //  [R2]
         { []
         }
     {offset
       c7ZN3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7ZN7; else goto c7ZN6;
       c7ZN7: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.Event.Array.findIndex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ZN6: // global
           I64[Hp - 40] = size_s7Zb0_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s7ZbH_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.findIndex_info" {
     GHC.Event.Array.findIndex_info:
         const GHC.Event.Array.findIndex_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S7Znn_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.604214436 UTC

[section ""data" . lvl30_r7WMI_closure" {
     lvl30_r7WMI_closure:
         const GHC.Types.I#_con_info;
         const 74;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.605871457 UTC

[section ""data" . lvl31_r7WMJ_closure" {
     lvl31_r7WMJ_closure:
         const GHC.Types.I#_con_info;
         const 46;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.607543428 UTC

[section ""data" . lvl32_r7WMK_closure" {
     lvl32_r7WMK_closure:
         const GHC.Types.I#_con_info;
         const 55;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.609201556 UTC

[section ""data" . lvl33_r7WML_closure" {
     lvl33_r7WML_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl30_r7WMI_closure+1;
         const lvl31_r7WMJ_closure+1;
         const lvl30_r7WMI_closure+1;
         const lvl32_r7WMK_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.610987264 UTC

[section ""data" . lvl34_r7WMM_closure" {
     lvl34_r7WMM_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl33_r7WML_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.613443737 UTC

[section ""data" . GHC.Event.Array.ensureCapacity2_closure" {
     GHC.Event.Array.ensureCapacity2_closure:
         const GHC.Event.Array.ensureCapacity2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.ensureCapacity2_entry() //  [R1]
         { []
         }
     {offset
       c7ZOy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZOz; else goto c7ZOA;
       c7ZOz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZOA: // global
           (_c7ZOv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ZOv::I64 == 0) goto c7ZOx; else goto c7ZOw;
       c7ZOx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ZOw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ZOv::I64;
           R2 = lvl34_r7WMM_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.ensureCapacity2_info" {
     GHC.Event.Array.ensureCapacity2_info:
         const GHC.Event.Array.ensureCapacity2_entry;
         const 0;
         const 70373039144981;
         const S7Znn_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.621184924 UTC

[section ""data" . GHC.Event.Array.$wensureCapacity_closure" {
     GHC.Event.Array.$wensureCapacity_closure:
         const GHC.Event.Array.$wensureCapacity_info;
         const 0;
 },
 GHC.Event.Array.$wensureCapacity_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7ZOQ: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c7ZOU; else goto c7ZOV;
       c7ZOU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wensureCapacity_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZOV: // global
           I64[Sp - 32] = block_c7ZON_info;
           R1 = P64[R3 + 8];
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7ZRf; else goto c7ZOO;
       u7ZRf: // global
           call _c7ZON(R1) args: 0, res: 0, upd: 0;
       c7ZOO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wensureCapacity_info" {
     GHC.Event.Array.$wensureCapacity_info:
         const GHC.Event.Array.$wensureCapacity_entry;
         const 0;
         const 30064771086;
         const 17179869206;
         const S7Znn_srt+184;
 },
 _c7ZON() //  [R1]
         { []
         }
     {offset
       c7ZON: // global
           I64[Sp - 16] = block_c7ZOT_info;
           _s7ZbR::I64 = I64[R1 + 15];
           _s7ZbS::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _s7ZbS::I64;
           I64[Sp] = _s7ZbR::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ZRe; else goto c7ZOX;
       u7ZRe: // global
           call _c7ZOT(R1) args: 0, res: 0, upd: 0;
       c7ZOX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZON_info" {
     block_c7ZON_info:
         const _c7ZON;
         const 259;
         const 21474836510;
         const S7Znn_srt+184;
 },
 _c7ZOT() //  [R1]
         { []
         }
     {offset
       c7ZOT: // global
           if (%MO_S_Le_W64(I64[Sp + 40],
                            I64[Sp + 8])) goto c7ZP5; else goto c7ZP9;
       c7ZP5: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ZP9: // global
           I64[Sp - 8] = block_c7ZP8_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = GHC.Event.Array.ensureCapacity2_closure;
           P64[Sp] = P64[R1 + 7];
           I64[Sp + 24] = I64[R1 + 15];
           Sp = Sp - 24;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZOT_info" {
     block_c7ZOT_info:
         const _c7ZOT;
         const 1221;
         const 21474836510;
         const S7Znn_srt+184;
 },
 _c7ZP8() //  [R1]
         { []
         }
     {offset
       c7ZP8: // global
           _s7ZbY::I64 = I64[R1 + 7];
           _s7ZbZ::I64 = I64[Sp + 48] - 1;
           _s7Zc0::I64 = _s7ZbZ::I64 | %MO_S_Shr_W64(_s7ZbZ::I64, 1);
           _s7Zc2::I64 = _s7Zc0::I64 | %MO_S_Shr_W64(_s7Zc0::I64, 2);
           _s7Zc4::I64 = _s7Zc2::I64 | %MO_S_Shr_W64(_s7Zc2::I64, 4);
           _s7Zc6::I64 = _s7Zc4::I64 | %MO_S_Shr_W64(_s7Zc4::I64, 8);
           _s7Zc8::I64 = _s7Zc6::I64 | %MO_S_Shr_W64(_s7Zc6::I64, 16);
           _s7Zca::I64 = _s7Zc8::I64 | %MO_S_Shr_W64(_s7Zc8::I64, 32) + 1;
           _s7Zcd::I64 = _s7Zca::I64 * _s7ZbY::I64;
           if (%MO_S_Ge_W64(_s7Zcd::I64, 0)) goto c7ZQ2; else goto c7ZQS;
       c7ZQ2: // global
           I64[Sp - 8] = block_c7ZQ0_info;
           R1 = _s7Zcd::I64;
           I64[Sp] = _s7Zca::I64;
           I64[Sp + 48] = _s7ZbY::I64;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7ZQS: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZP8_info" {
     block_c7ZP8_info:
         const _c7ZP8;
         const 2950;
         const 4294967326;
         const S7Znn_srt+184;
 },
 _c7ZQ0() //  [R1]
         { []
         }
     {offset
       c7ZQ0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7ZQ6; else goto c7ZQ5;
       c7ZQ6: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZQ5: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = R1;
           _s7ZbJ::P64 = P64[Sp + 48];
           _s7ZbR::I64 = I64[Sp + 32];
           _s7ZbS::I64 = I64[Sp + 24];
           _s7ZbU::I64 = I64[Sp + 40];
           _s7ZbV::P64 = P64[Sp + 16];
           _s7Zca::I64 = I64[Sp + 8];
           _s7Zci::I64 = R1 + 16;
           _c7ZQa::P64 = Hp - 61;
           if (_s7ZbU::I64 == 0) goto c7ZQR; else goto c7ZQJ;
       c7ZQR: // global
           call MO_Touch(_s7ZbV::P64);
           if (_s7Zca::I64 == _s7ZbS::I64) goto c7ZQP; else goto c7ZQQ;
       c7ZQQ: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _c7ZQa::P64;
           I64[Hp - 32] = _s7Zci::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7ZbR::I64;
           I64[Hp] = _s7Zca::I64;
           call MO_WriteBarrier();
           P64[_s7ZbJ::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7ZbJ::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ZQJ: // global
           if (%MO_S_Le_W64(_s7ZbS::I64, 0)) goto c7ZQo; else goto c7ZQH;
       c7ZQo: // global
           call MO_Touch(_s7ZbV::P64);
           if (_s7Zca::I64 == _s7ZbS::I64) goto c7ZQP; else goto c7ZQm;
       c7ZQm: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _c7ZQa::P64;
           I64[Hp - 32] = _s7Zci::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7ZbR::I64;
           I64[Hp] = _s7Zca::I64;
           call MO_WriteBarrier();
           P64[_s7ZbJ::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7ZbJ::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ZQH: // global
           (_s7Zcw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7Zci::I64, _s7ZbU::I64, _s7ZbS::I64 * I64[Sp + 56]);
           call MO_Touch(_c7ZQa::P64);
           call MO_Touch(_s7ZbV::P64);
           if (_s7Zca::I64 == _s7ZbS::I64) goto c7ZQP; else goto c7ZQG;
       c7ZQP: // global
           Hp = Hp - 56;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ZQG: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _c7ZQa::P64;
           I64[Hp - 32] = _s7Zci::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7ZbR::I64;
           I64[Hp] = _s7Zca::I64;
           call MO_WriteBarrier();
           P64[_s7ZbJ::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7ZbJ::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZQ0_info" {
     block_c7ZQ0_info:
         const _c7ZQ0;
         const 5959;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.635915038 UTC

[section ""data" . GHC.Event.Array.ensureCapacity1_closure" {
     GHC.Event.Array.ensureCapacity1_closure:
         const GHC.Event.Array.ensureCapacity1_info;
         const 0;
 },
 GHC.Event.Array.ensureCapacity1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7ZSx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ZSB; else goto c7ZSC;
       c7ZSB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.ensureCapacity1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZSC: // global
           I64[Sp - 24] = block_c7ZSu_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7ZSK; else goto c7ZSv;
       u7ZSK: // global
           call _c7ZSu(R1) args: 0, res: 0, upd: 0;
       c7ZSv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.ensureCapacity1_info" {
     GHC.Event.Array.ensureCapacity1_info:
         const GHC.Event.Array.ensureCapacity1_entry;
         const 0;
         const 21474836494;
         const 17179869207;
         const S7Znn_srt+192;
 },
 _c7ZSu() //  [R1]
         { []
         }
     {offset
       c7ZSu: // global
           I64[Sp] = block_c7ZSA_info;
           _s7ZcO::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s7ZcO::P64;
           if (R1 & 7 != 0) goto u7ZSJ; else goto c7ZSE;
       u7ZSJ: // global
           call _c7ZSA(R1) args: 0, res: 0, upd: 0;
       c7ZSE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZSu_info" {
     block_c7ZSu_info:
         const _c7ZSu;
         const 2;
         const 4294967326;
         const S7Znn_srt+192;
 },
 _c7ZSA() //  [R1]
         { []
         }
     {offset
       c7ZSA: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Array.$wensureCapacity_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZSA_info" {
     block_c7ZSA_info:
         const _c7ZSA;
         const 2;
         const 4294967326;
         const S7Znn_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.643256518 UTC

[section ""data" . GHC.Event.Array.ensureCapacity_closure" {
     GHC.Event.Array.ensureCapacity_closure:
         const GHC.Event.Array.ensureCapacity_info;
         const 0;
 },
 GHC.Event.Array.ensureCapacity_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7ZT4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.ensureCapacity1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.ensureCapacity_info" {
     GHC.Event.Array.ensureCapacity_info:
         const GHC.Event.Array.ensureCapacity_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7Znn_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.652157557 UTC

[section ""data" . GHC.Event.Array.$wsnoc_closure" {
     GHC.Event.Array.$wsnoc_closure:
         const GHC.Event.Array.$wsnoc_info;
         const 0;
 },
 GHC.Event.Array.$wsnoc_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7ZTi: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c7ZTm; else goto c7ZTn;
       c7ZTm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wsnoc_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZTn: // global
           I64[Sp - 32] = block_c7ZTf_info;
           R1 = P64[R3 + 8];
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7ZVN; else goto c7ZTg;
       u7ZVN: // global
           call _c7ZTf(R1) args: 0, res: 0, upd: 0;
       c7ZTg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wsnoc_info" {
     GHC.Event.Array.$wsnoc_info:
         const GHC.Event.Array.$wsnoc_entry;
         const 0;
         const 23643902338662414;
         const 17179869207;
         const S7Znn_srt+40;
 },
 _c7ZTf() //  [R1]
         { []
         }
     {offset
       c7ZTf: // global
           I64[Sp - 16] = block_c7ZTl_info;
           _s7Zd0::I64 = I64[R1 + 15];
           _s7Zd1::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _s7Zd1::I64;
           I64[Sp] = _s7Zd0::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7ZVM; else goto c7ZTp;
       u7ZVM: // global
           call _c7ZTl(R1) args: 0, res: 0, upd: 0;
       c7ZTp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZTf_info" {
     block_c7ZTf_info:
         const _c7ZTf;
         const 3;
         const 5629503829180446;
         const S7Znn_srt+40;
 },
 _c7ZTl() //  [R1]
         { []
         }
     {offset
       c7ZTl: // global
           _s7ZcR::P64 = P64[Sp + 24];
           _s7Zd0::I64 = I64[Sp + 16];
           _s7Zd1::I64 = I64[Sp + 8];
           _s7Zd4::P64 = P64[R1 + 7];
           _s7Zd3::I64 = I64[R1 + 15];
           _s7Zd5::I64 = _s7Zd0::I64 + 1;
           if (%MO_S_Le_W64(_s7Zd5::I64,
                            _s7Zd1::I64)) goto c7ZTC; else goto c7ZTJ;
       c7ZTC: // global
           I64[Sp] = block_c7ZTA_info;
           R6 = _s7Zd0::I64;
           R5 = _s7Zd1::I64;
           R4 = _s7Zd4::P64;
           R3 = _s7Zd3::I64;
           R2 = _s7ZcR::P64;
           P64[Sp - 8] = P64[Sp + 40];
           I64[Sp + 24] = _s7Zd5::I64;
           P64[Sp + 40] = R1;
           Sp = Sp - 8;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 8, upd: 8;
       c7ZTJ: // global
           I64[Sp - 24] = block_c7ZTI_info;
           R2 = _s7ZcR::P64;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = GHC.Event.Array.ensureCapacity2_closure;
           P64[Sp - 16] = _s7Zd4::P64;
           I64[Sp - 8] = _s7Zd5::I64;
           I64[Sp] = _s7Zd3::I64;
           Sp = Sp - 40;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZTl_info" {
     block_c7ZTl_info:
         const _c7ZTl;
         const 197;
         const 5629503829180446;
         const S7Znn_srt+40;
 },
 _c7ZTA() //  [R1]
         { []
         }
     {offset
       c7ZTA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ZTG; else goto c7ZTF;
       c7ZTG: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZTF: // global
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = P64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 8];
           _s7ZcS::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_s7ZcS::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7ZcS::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZTA_info" {
     block_c7ZTA_info:
         const _c7ZTA;
         const 453;
         const 30;
 },
 _c7ZTI() //  [R1]
         { []
         }
     {offset
       c7ZTI: // global
           _s7Zdd::I64 = I64[R1 + 7];
           _s7Zde::I64 = I64[Sp + 16] - 1;
           _s7Zdf::I64 = _s7Zde::I64 | %MO_S_Shr_W64(_s7Zde::I64, 1);
           _s7Zdh::I64 = _s7Zdf::I64 | %MO_S_Shr_W64(_s7Zdf::I64, 2);
           _s7Zdj::I64 = _s7Zdh::I64 | %MO_S_Shr_W64(_s7Zdh::I64, 4);
           _s7Zdl::I64 = _s7Zdj::I64 | %MO_S_Shr_W64(_s7Zdj::I64, 8);
           _s7Zdn::I64 = _s7Zdl::I64 | %MO_S_Shr_W64(_s7Zdl::I64, 16);
           _s7Zdp::I64 = _s7Zdn::I64 | %MO_S_Shr_W64(_s7Zdn::I64, 32) + 1;
           _s7Zds::I64 = _s7Zdp::I64 * _s7Zdd::I64;
           if (%MO_S_Ge_W64(_s7Zds::I64, 0)) goto c7ZUC; else goto c7ZVs;
       c7ZUC: // global
           I64[Sp - 16] = block_c7ZUA_info;
           R1 = _s7Zds::I64;
           I64[Sp - 8] = _s7Zdp::I64;
           I64[Sp] = _s7Zdd::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7ZVs: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 72;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZTI_info" {
     block_c7ZTI_info:
         const _c7ZTI;
         const 1928;
         const 1125904201809950;
         const S7Znn_srt+40;
 },
 _c7ZUA() //  [R1]
         { []
         }
     {offset
       c7ZUA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7ZUG; else goto c7ZUF;
       c7ZUG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZUF: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp] = R1;
           _s7ZcR::P64 = P64[Sp + 64];
           _s7ZcT::P64 = P64[Sp + 80];
           _s7Zd0::I64 = I64[Sp + 56];
           _s7Zd3::I64 = I64[Sp + 40];
           _s7Zd4::P64 = P64[Sp + 24];
           _s7Zdp::I64 = I64[Sp + 8];
           _s7Zdx::I64 = R1 + 16;
           _c7ZUK::P64 = Hp - 5;
           if (_s7Zd3::I64 == 0) goto c7ZVn; else goto c7ZVj;
       c7ZVn: // global
           call MO_Touch(_s7Zd4::P64);
           I64[Sp] = block_c7ZVm_info;
           R6 = _s7Zd0::I64;
           R5 = _s7Zdp::I64;
           R4 = _c7ZUK::P64;
           R3 = _s7Zdx::I64;
           R2 = _s7ZcR::P64;
           P64[Sp - 8] = _s7ZcT::P64;
           I64[Sp + 64] = _s7Zdx::I64;
           P64[Sp + 80] = _c7ZUK::P64;
           Sp = Sp - 8;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 8, upd: 8;
       c7ZVj: // global
           _s7Zd1::I64 = I64[Sp + 48];
           if (%MO_S_Le_W64(_s7Zd1::I64, 0)) goto c7ZUU; else goto c7ZVd;
       c7ZUU: // global
           call MO_Touch(_s7Zd4::P64);
           I64[Sp] = block_c7ZUS_info;
           R6 = _s7Zd0::I64;
           R5 = _s7Zdp::I64;
           R4 = _c7ZUK::P64;
           R3 = _s7Zdx::I64;
           R2 = _s7ZcR::P64;
           P64[Sp - 8] = _s7ZcT::P64;
           I64[Sp + 64] = _s7Zdx::I64;
           P64[Sp + 80] = _c7ZUK::P64;
           Sp = Sp - 8;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 8, upd: 8;
       c7ZVd: // global
           (_s7ZdN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7Zdx::I64, _s7Zd3::I64, _s7Zd1::I64 * I64[Sp + 16]);
           call MO_Touch(_c7ZUK::P64);
           call MO_Touch(_s7Zd4::P64);
           I64[Sp] = block_c7ZVc_info;
           R6 = _s7Zd0::I64;
           R5 = _s7Zdp::I64;
           R4 = _c7ZUK::P64;
           R3 = _s7Zdx::I64;
           R2 = _s7ZcR::P64;
           P64[Sp - 8] = _s7ZcT::P64;
           I64[Sp + 64] = _s7Zdx::I64;
           P64[Sp + 80] = _c7ZUK::P64;
           Sp = Sp - 8;
           call GHC.Event.Array.$wunsafeWrite'_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZUA_info" {
     block_c7ZUA_info:
         const _c7ZUA;
         const 7882;
         const 4294967326;
         const S7Znn_srt+40;
 },
 _c7ZVm() //  [R1]
         { []
         }
     {offset
       c7ZVm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7ZVr; else goto c7ZVq;
       c7ZVr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZVq: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 80];
           I64[Hp - 32] = I64[Sp + 64];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 8];
           _s7ZcS::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_s7ZcS::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7ZcS::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZVm_info" {
     block_c7ZVm_info:
         const _c7ZVm;
         const 16330;
         const 30;
 },
 _c7ZUS() //  [R1]
         { []
         }
     {offset
       c7ZUS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7ZUY; else goto c7ZUX;
       c7ZUY: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZUX: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 80];
           I64[Hp - 32] = I64[Sp + 64];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 8];
           _s7ZcS::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_s7ZcS::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7ZcS::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZUS_info" {
     block_c7ZUS_info:
         const _c7ZUS;
         const 16330;
         const 30;
 },
 _c7ZVc() //  [R1]
         { []
         }
     {offset
       c7ZVc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7ZVh; else goto c7ZVg;
       c7ZVh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ZVg: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 80];
           I64[Hp - 32] = I64[Sp + 64];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 8];
           _s7ZcS::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_s7ZcS::P64 + 8] = Hp - 23;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7ZcS::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZVc_info" {
     block_c7ZVc_info:
         const _c7ZVc;
         const 16330;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.674230156 UTC

[section ""data" . GHC.Event.Array.snoc1_closure" {
     GHC.Event.Array.snoc1_closure:
         const GHC.Event.Array.snoc1_info;
         const 0;
 },
 GHC.Event.Array.snoc1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7ZXz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ZXA; else goto c7ZXB;
       c7ZXA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.snoc1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ZXB: // global
           I64[Sp - 24] = block_c7ZXw_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7ZXF; else goto c7ZXx;
       u7ZXF: // global
           call _c7ZXw(R1) args: 0, res: 0, upd: 0;
       c7ZXx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.snoc1_info" {
     GHC.Event.Array.snoc1_info:
         const GHC.Event.Array.snoc1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S7Znn_srt+216;
 },
 _c7ZXw() //  [R1]
         { []
         }
     {offset
       c7ZXw: // global
           R4 = P64[Sp + 16];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Array.$wsnoc_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZXw_info" {
     block_c7ZXw_info:
         const _c7ZXw;
         const 2;
         const 4294967326;
         const S7Znn_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.679574077 UTC

[section ""data" . GHC.Event.Array.snoc_closure" {
     GHC.Event.Array.snoc_closure:
         const GHC.Event.Array.snoc_info;
         const 0;
 },
 GHC.Event.Array.snoc_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7ZXU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.snoc1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.snoc_info" {
     GHC.Event.Array.snoc_info:
         const GHC.Event.Array.snoc_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7Znn_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.683364226 UTC

[section ""data" . lvl35_r7WMN_closure" {
     lvl35_r7WMN_closure:
         const GHC.Types.I#_con_info;
         const 245;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.685023804 UTC

[section ""data" . lvl36_r7WMO_closure" {
     lvl36_r7WMO_closure:
         const GHC.Types.I#_con_info;
         const 49;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.687097598 UTC

[section ""data" . lvl37_r7WMP_closure" {
     lvl37_r7WMP_closure:
         const GHC.Types.I#_con_info;
         const 58;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.688799598 UTC

[section ""data" . lvl38_r7WMQ_closure" {
     lvl38_r7WMQ_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl35_r7WMN_closure+1;
         const lvl36_r7WMO_closure+1;
         const lvl35_r7WMN_closure+1;
         const lvl37_r7WMP_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.690604027 UTC

[section ""data" . lvl39_r7WMR_closure" {
     lvl39_r7WMR_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl38_r7WMQ_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.69286483 UTC

[section ""data" . lvl40_r7WMS_closure" {
     lvl40_r7WMS_closure:
         const lvl40_r7WMS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl40_r7WMS_entry() //  [R1]
         { []
         }
     {offset
       c7ZYc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ZYd; else goto c7ZYe;
       c7ZYd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZYe: // global
           (_c7ZY9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ZY9::I64 == 0) goto c7ZYb; else goto c7ZYa;
       c7ZYb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ZYa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ZY9::I64;
           R2 = lvl39_r7WMR_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl40_r7WMS_info" {
     lvl40_r7WMS_info:
         const lvl40_r7WMS_entry;
         const 0;
         const 9007203549708309;
         const S7Znn_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.696653861 UTC

[section ""cstring" . lvl41_r7WMT_bytes" {
     lvl41_r7WMT_bytes:
         I8[] [99,111,112,121,58,32,98,97,100,32,111,102,102,115,101,116,115,32,111,114,32,108,101,110,103,116,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.699251932 UTC

[section ""data" . lvl42_r7WMU_closure" {
     lvl42_r7WMU_closure:
         const lvl42_r7WMU_info;
         const 0;
         const 0;
         const 0;
 },
 lvl42_r7WMU_entry() //  [R1]
         { []
         }
     {offset
       c7ZYw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ZYx; else goto c7ZYy;
       c7ZYx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ZYy: // global
           (_c7ZYr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7ZYr::I64 == 0) goto c7ZYt; else goto c7ZYs;
       c7ZYt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7ZYs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7ZYr::I64;
           I64[Sp - 24] = block_c7ZYu_info;
           R2 = lvl41_r7WMT_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl42_r7WMU_info" {
     lvl42_r7WMU_info:
         const lvl42_r7WMU_entry;
         const 0;
         const 4294967317;
         const S7Znn_srt;
 },
 _c7ZYu() //  [R1]
         { []
         }
     {offset
       c7ZYu: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7ZYu_info" {
     block_c7ZYu_info:
         const _c7ZYu;
         const 0;
         const 4294967326;
         const S7Znn_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.717957069 UTC

[section ""data" . GHC.Event.Array.concat3_closure" {
     GHC.Event.Array.concat3_closure:
         const GHC.Event.Array.concat3_info;
         const 0;
 },
 sat_s7Zf2_entry() //  [R1]
         { []
         }
     {offset
       c800x: // global
           _s7Zf2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c800y; else goto c800z;
       c800z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c800B; else goto c800A;
       c800B: // global
           HpAlloc = 32;
           goto c800y;
       c800y: // global
           R1 = _s7Zf2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c800A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7Zf2::P64;
           _s7ZeL::I64 = I64[_s7Zf2::P64 + 48];
           if (%MO_S_Gt_W64(I64[_s7Zf2::P64 + 32],
                            _s7ZeL::I64)) goto c800v; else goto c800w;
       c800v: // global
           _s7Zei::P64 = P64[_s7Zf2::P64 + 16];
           Hp = Hp - 32;
           R1 = _s7Zei::P64 & (-8);
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c800w: // global
           _s7Zem::P64 = P64[_s7Zf2::P64 + 24];
           _s7Zel::I64 = I64[_s7Zf2::P64 + 40];
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = _s7Zem::P64;
           I64[Hp - 8] = _s7ZeL::I64;
           I64[Hp] = _s7Zel::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Zf2_info" {
     sat_s7Zf2_info:
         const sat_s7Zf2_entry;
         const 12884901890;
         const 15;
 },
 sat_s7ZfK_entry() //  [R1]
         { []
         }
     {offset
       c802k: // global
           _s7ZfK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c802l; else goto c802m;
       c802m: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c802o; else goto c802n;
       c802o: // global
           HpAlloc = 56;
           goto c802l;
       c802l: // global
           R1 = _s7ZfK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c802n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7ZfK::P64;
           _s7Zfp::P64 = P64[_s7ZfK::P64 + 16];
           _s7Zek::I64 = I64[_s7ZfK::P64 + 24];
           _s7ZeL::I64 = I64[_s7ZfK::P64 + 32];
           _s7Zfg::I64 = I64[_s7ZfK::P64 + 40];
           _s7Zfo::I64 = I64[_s7ZfK::P64 + 48];
           if (%MO_S_Gt_W64(_s7Zek::I64,
                            _s7ZeL::I64)) goto c802i; else goto c802j;
       c802i: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7Zfp::P64;
           I64[Hp - 32] = _s7Zfo::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7Zek::I64;
           I64[Hp] = _s7Zfg::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c802j: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7Zfp::P64;
           I64[Hp - 32] = _s7Zfo::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7ZeL::I64;
           I64[Hp] = _s7Zfg::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7ZfK_info" {
     sat_s7ZfK_info:
         const sat_s7ZfK_entry;
         const 17179869185;
         const 15;
 },
 sat_s7Zga_entry() //  [R1]
         { []
         }
     {offset
       c803j: // global
           _s7Zga::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c803k; else goto c803l;
       c803l: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c803n; else goto c803m;
       c803n: // global
           HpAlloc = 56;
           goto c803k;
       c803k: // global
           R1 = _s7Zga::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c803m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7Zga::P64;
           _s7Zfp::P64 = P64[_s7Zga::P64 + 16];
           _s7Zek::I64 = I64[_s7Zga::P64 + 24];
           _s7ZeL::I64 = I64[_s7Zga::P64 + 32];
           _s7Zfg::I64 = I64[_s7Zga::P64 + 40];
           _s7Zfo::I64 = I64[_s7Zga::P64 + 48];
           if (%MO_S_Gt_W64(_s7Zek::I64,
                            _s7ZeL::I64)) goto c803h; else goto c803i;
       c803h: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7Zfp::P64;
           I64[Hp - 32] = _s7Zfo::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7Zek::I64;
           I64[Hp] = _s7Zfg::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c803i: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7Zfp::P64;
           I64[Hp - 32] = _s7Zfo::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7ZeL::I64;
           I64[Hp] = _s7Zfg::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Zga_info" {
     sat_s7Zga_info:
         const sat_s7Zga_entry;
         const 17179869185;
         const 15;
 },
 sat_s7Zgt_entry() //  [R1]
         { []
         }
     {offset
       c8047: // global
           _s7Zgt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8048; else goto c8049;
       c8049: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c804b; else goto c804a;
       c804b: // global
           HpAlloc = 56;
           goto c8048;
       c8048: // global
           R1 = _s7Zgt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c804a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7Zgt::P64;
           _s7Zfp::P64 = P64[_s7Zgt::P64 + 16];
           _s7Zek::I64 = I64[_s7Zgt::P64 + 24];
           _s7ZeL::I64 = I64[_s7Zgt::P64 + 32];
           _s7Zfg::I64 = I64[_s7Zgt::P64 + 40];
           _s7Zfo::I64 = I64[_s7Zgt::P64 + 48];
           if (%MO_S_Gt_W64(_s7Zek::I64,
                            _s7ZeL::I64)) goto c8045; else goto c8046;
       c8045: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7Zfp::P64;
           I64[Hp - 32] = _s7Zfo::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7Zek::I64;
           I64[Hp] = _s7Zfg::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c8046: // global
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _s7Zfp::P64;
           I64[Hp - 32] = _s7Zfo::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7ZeL::I64;
           I64[Hp] = _s7Zfg::I64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Zgt_info" {
     sat_s7Zgt_info:
         const sat_s7Zgt_entry;
         const 17179869185;
         const 15;
 },
 GHC.Event.Array.concat3_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c804i: // global
           if ((Sp + -120) < SpLim) (likely: False) goto c804j; else goto c804k;
       c804j: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.concat3_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c804k: // global
           I64[Sp - 40] = block_c7ZYS_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u805y; else goto c7ZYT;
       u805y: // global
           call _c7ZYS(R1) args: 0, res: 0, upd: 0;
       c7ZYT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.concat3_info" {
     GHC.Event.Array.concat3_info:
         const GHC.Event.Array.concat3_entry;
         const 0;
         const 3869765533710;
         const 30064771098;
         const S7Znn_srt+184;
 },
 _c7ZYS() //  [R1]
         { []
         }
     {offset
       c7ZYS: // global
           I64[Sp - 24] = block_c7ZYX_info;
           _s7Zei::P64 = R1;
           _s7Zek::I64 = I64[R1 + 15];
           _s7Zel::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp - 16] = _s7Zek::I64;
           I64[Sp - 8] = _s7Zel::I64;
           P64[Sp] = _s7Zei::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u805n; else goto c7ZYY;
       u805n: // global
           call _c7ZYX(R1) args: 0, res: 0, upd: 0;
       c7ZYY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZYS_info" {
     block_c7ZYS_info:
         const _c7ZYS;
         const 5;
         const 3320009719838;
         const S7Znn_srt+184;
 },
 _c7ZYX() //  [R1]
         { []
         }
     {offset
       c7ZYX: // global
           I64[Sp - 16] = block_c7ZZ2_info;
           _s7Zem::P64 = R1;
           _s7Zeo::P64 = P64[R1 + 7];
           _s7Zen::I64 = I64[R1 + 15];
           R1 = P64[Sp + 48];
           P64[Sp - 8] = _s7Zeo::P64;
           I64[Sp] = _s7Zen::I64;
           P64[Sp + 48] = _s7Zem::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u805o; else goto c7ZZ3;
       u805o: // global
           call _c7ZZ2(R1) args: 0, res: 0, upd: 0;
       c7ZZ3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZYX_info" {
     block_c7ZYX_info:
         const _c7ZYX;
         const 200;
         const 3320009719838;
         const S7Znn_srt+184;
 },
 _c7ZZ2() //  [R1]
         { []
         }
     {offset
       c7ZZ2: // global
           I64[Sp - 8] = block_c7ZZ7_info;
           _s7Zer::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _s7Zer::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u805p; else goto c7ZZ8;
       u805p: // global
           call _c7ZZ7(R1) args: 0, res: 0, upd: 0;
       c7ZZ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZZ2_info" {
     block_c7ZZ2_info:
         const _c7ZZ2;
         const 906;
         const 3320009719838;
         const S7Znn_srt+184;
 },
 _c7ZZ7() //  [R1]
         { []
         }
     {offset
       c7ZZ7: // global
           I64[Sp - 8] = block_c7ZZc_info;
           _s7Zev::P64 = P64[R1 + 7];
           _s7Zeu::I64 = I64[R1 + 15];
           R1 = P64[Sp + 88];
           P64[Sp] = _s7Zev::P64;
           I64[Sp + 88] = _s7Zeu::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u805q; else goto c7ZZd;
       u805q: // global
           call _c7ZZc(R1) args: 0, res: 0, upd: 0;
       c7ZZd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZZ7_info" {
     block_c7ZZ7_info:
         const _c7ZZ7;
         const 1867;
         const 3320009719838;
         const S7Znn_srt+184;
 },
 _c7ZZc() //  [R1]
         { []
         }
     {offset
       c7ZZc: // global
           _s7Zex::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Zex::I64, 0)) goto c804r; else goto u805i;
       c804r: // global
           I64[Sp] = block_c7ZZk_info;
           R1 = P64[Sp + 72];
           I64[Sp + 72] = _s7Zex::I64;
           if (R1 & 7 != 0) goto u805r; else goto c7ZZl;
       u805r: // global
           call _c7ZZk(R1) args: 0, res: 0, upd: 0;
       c7ZZl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u805i: // global
           Sp = Sp + 104;
           call _c805h() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ZZc_info" {
     block_c7ZZc_info:
         const _c7ZZc;
         const 134796;
         const 3320009719838;
         const S7Znn_srt+184;
 },
 _c7ZZk() //  [R1]
         { []
         }
     {offset
       c7ZZk: // global
           _s7ZeA::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7ZeA::I64, 0)) goto c805f; else goto u805j;
       c805f: // global
           if (%MO_S_Le_W64(_s7ZeA::I64,
                            I64[Sp + 40])) goto c804u; else goto u805k;
       c804u: // global
           I64[Sp] = block_c7ZZv_info;
           R1 = P64[Sp + 88];
           I64[Sp + 88] = _s7ZeA::I64;
           if (R1 & 7 != 0) goto u805t; else goto c7ZZw;
       u805t: // global
           call _c7ZZv(R1) args: 0, res: 0, upd: 0;
       c7ZZw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u805k: // global
           Sp = Sp + 104;
           goto u805v;
       u805j: // global
           Sp = Sp + 104;
           goto u805v;
       u805v: // global
           call _c805h() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ZZk_info" {
     block_c7ZZk_info:
         const _c7ZZk;
         const 151180;
         const 3320009719838;
         const S7Znn_srt+184;
 },
 _c7ZZv() //  [R1]
         { []
         }
     {offset
       c7ZZv: // global
           _s7ZeE::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7ZeE::I64, 0)) goto c805b; else goto u805l;
       c805b: // global
           _s7Zer::I64 = I64[Sp + 16];
           if (%MO_S_Le_W64(_s7ZeE::I64,
                            _s7Zer::I64)) goto c8058; else goto u805m;
       c8058: // global
           _s7Zeb::P64 = P64[Sp + 64];
           _s7Zei::P64 = P64[Sp + 56];
           _s7Zel::I64 = I64[Sp + 48];
           _s7Zex::I64 = I64[Sp + 72];
           _s7ZeA::I64 = I64[Sp + 88];
           _s7ZeH::I64 = _s7Zer::I64 - _s7ZeE::I64;
           if (%MO_S_Gt_W64(_s7Zex::I64,
                            _s7ZeH::I64)) goto c8055; else goto c8056;
       c8055: // global
           _s7ZeJ::I64 = _s7ZeH::I64;
           goto s7ZeI;
       c8056: // global
           _s7ZeJ::I64 = _s7Zex::I64;
           goto s7ZeI;
       s7ZeI: // global
           if (_s7ZeJ::I64 == 0) goto c8051; else goto c8050;
       c8051: // global
           R1 = _s7Zei::P64;
           Sp = Sp + 104;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8050: // global
           _s7ZeL::I64 = _s7ZeA::I64 + _s7ZeJ::I64;
           if (%MO_S_Le_W64(_s7ZeL::I64,
                            _s7Zel::I64)) goto c804y; else goto c804C;
       c804y: // global
           I64[Sp] = block_c7ZZW_info;
           R2 = _s7Zeb::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = lvl40_r7WMS_closure;
           I64[Sp + 16] = _s7ZeL::I64;
           I64[Sp + 64] = _s7ZeJ::I64;
           I64[Sp + 72] = _s7ZeE::I64;
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
       c804C: // global
           I64[Sp] = block_c800G_info;
           R2 = _s7Zeb::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Event.Array.ensureCapacity2_closure;
           I64[Sp + 56] = _s7ZeL::I64;
           I64[Sp + 72] = _s7ZeJ::I64;
           I64[Sp + 80] = _s7ZeE::I64;
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
       u805m: // global
           Sp = Sp + 104;
           goto u805x;
       u805l: // global
           Sp = Sp + 104;
           goto u805x;
       u805x: // global
           call _c805h() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ZZv_info" {
     block_c7ZZv_info:
         const _c7ZZv;
         const 216716;
         const 3320009719838;
         const S7Znn_srt+184;
 },
 _c7ZZW() //  [R1]
         { []
         }
     {offset
       c7ZZW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c804B; else goto c804A;
       c804B: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c804A: // global
           _s7Zei::P64 = P64[Sp + 56];
           _s7Zek::I64 = I64[Sp + 40];
           _s7Zel::I64 = I64[Sp + 48];
           _s7Zem::P64 = P64[Sp + 80];
           _s7Zeo::P64 = P64[Sp + 24];
           _s7Zev::P64 = P64[Sp + 8];
           _s7ZeL::I64 = I64[Sp + 16];
           _s7ZeO::I64 = I64[R1 + 7];
           (_s7ZeY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(I64[Sp + 32] + I64[Sp + 88] * _s7ZeO::I64, I64[Sp + 96] + I64[Sp + 72] * _s7ZeO::I64, I64[Sp + 64] * _s7ZeO::I64);
           call MO_Touch(_s7Zev::P64);
           call MO_Touch(_s7Zeo::P64);
           I64[Hp - 48] = sat_s7Zf2_info;
           P64[Hp - 32] = _s7Zei::P64;
           P64[Hp - 24] = _s7Zem::P64;
           I64[Hp - 16] = _s7Zek::I64;
           I64[Hp - 8] = _s7Zel::I64;
           I64[Hp] = _s7ZeL::I64;
           R1 = Hp - 48;
           Sp = Sp + 104;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ZZW_info" {
     block_c7ZZW_info:
         const _c7ZZW;
         const 224908;
         const 30;
 },
 _c800G() //  [R1]
         { []
         }
     {offset
       c800G: // global
           _s7Zf4::I64 = I64[R1 + 7];
           _s7Zf5::I64 = I64[Sp + 56] - 1;
           _s7Zf6::I64 = _s7Zf5::I64 | %MO_S_Shr_W64(_s7Zf5::I64, 1);
           _s7Zf8::I64 = _s7Zf6::I64 | %MO_S_Shr_W64(_s7Zf6::I64, 2);
           _s7Zfa::I64 = _s7Zf8::I64 | %MO_S_Shr_W64(_s7Zf8::I64, 4);
           _s7Zfc::I64 = _s7Zfa::I64 | %MO_S_Shr_W64(_s7Zfa::I64, 8);
           _s7Zfe::I64 = _s7Zfc::I64 | %MO_S_Shr_W64(_s7Zfc::I64, 16);
           _s7Zfg::I64 = _s7Zfe::I64 | %MO_S_Shr_W64(_s7Zfe::I64, 32) + 1;
           _s7Zfj::I64 = _s7Zfg::I64 * _s7Zf4::I64;
           if (%MO_S_Ge_W64(_s7Zfj::I64, 0)) goto c804F; else goto c804Y;
       c804F: // global
           I64[Sp - 8] = block_c801w_info;
           R1 = _s7Zfj::I64;
           I64[Sp] = _s7Zfg::I64;
           I64[Sp + 16] = _s7Zf4::I64;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c804Y: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 104;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c800G_info" {
     block_c800G_info:
         const _c800G;
         const 253580;
         const 1103806595102;
         const S7Znn_srt+184;
 },
 _c801w() //  [R1]
         { []
         }
     {offset
       c801w: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c804I; else goto c804H;
       c804I: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c804H: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp] = R1;
           _s7Zeb::P64 = P64[Sp + 72];
           _s7Zen::I64 = I64[Sp + 40];
           _s7Zeo::P64 = P64[Sp + 32];
           _s7Zfo::I64 = R1 + 16;
           _c801B::P64 = Hp - 5;
           if (_s7Zen::I64 == 0) goto c804U; else goto c804T;
       c804U: // global
           call MO_Touch(_s7Zeo::P64);
           I64[Sp] = block_c803w_info;
           R2 = _s7Zeb::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = lvl40_r7WMS_closure;
           I64[Sp + 56] = _s7Zfo::I64;
           P64[Sp + 72] = _c801B::P64;
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
       c804T: // global
           _s7Zel::I64 = I64[Sp + 56];
           if (%MO_S_Le_W64(_s7Zel::I64, 0)) goto c804K; else goto c804O;
       c804K: // global
           call MO_Touch(_s7Zeo::P64);
           I64[Sp] = block_c801J_info;
           R2 = _s7Zeb::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = lvl40_r7WMS_closure;
           I64[Sp + 56] = _s7Zfo::I64;
           P64[Sp + 72] = _c801B::P64;
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
       c804O: // global
           (_s7ZfQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7Zfo::I64, _s7Zen::I64, _s7Zel::I64 * I64[Sp + 24]);
           call MO_Touch(_c801B::P64);
           call MO_Touch(_s7Zeo::P64);
           I64[Sp] = block_c802I_info;
           R2 = _s7Zeb::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = lvl40_r7WMS_closure;
           I64[Sp + 56] = _s7Zfo::I64;
           P64[Sp + 72] = _c801B::P64;
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c801w_info" {
     block_c801w_info:
         const _c801w;
         const 507213;
         const 4294967326;
         const S7Znn_srt+248;
 },
 _c803w() //  [R1]
         { []
         }
     {offset
       c803w: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c804X; else goto c804W;
       c804X: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c804W: // global
           _c801B::P64 = P64[Sp + 72];
           _s7Zek::I64 = I64[Sp + 48];
           _s7Zev::P64 = P64[Sp + 16];
           _s7ZeL::I64 = I64[Sp + 64];
           _s7Zfg::I64 = I64[Sp + 8];
           _s7Zfo::I64 = I64[Sp + 56];
           _s7Zgd::I64 = I64[R1 + 7];
           (_s7Zgn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7Zfo::I64 + I64[Sp + 96] * _s7Zgd::I64, I64[Sp + 104] + I64[Sp + 88] * _s7Zgd::I64, I64[Sp + 80] * _s7Zgd::I64);
           call MO_Touch(_s7Zev::P64);
           call MO_Touch(_c801B::P64);
           I64[Hp - 48] = sat_s7Zgt_info;
           P64[Hp - 32] = _c801B::P64;
           I64[Hp - 24] = _s7Zek::I64;
           I64[Hp - 16] = _s7ZeL::I64;
           I64[Hp - 8] = _s7Zfg::I64;
           I64[Hp] = _s7Zfo::I64;
           R1 = Hp - 48;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c803w_info" {
     block_c803w_info:
         const _c803w;
         const 507725;
         const 30;
 },
 _c801J() //  [R1]
         { []
         }
     {offset
       c801J: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c804N; else goto c804M;
       c804N: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c804M: // global
           _c801B::P64 = P64[Sp + 72];
           _s7Zek::I64 = I64[Sp + 48];
           _s7Zev::P64 = P64[Sp + 16];
           _s7ZeL::I64 = I64[Sp + 64];
           _s7Zfg::I64 = I64[Sp + 8];
           _s7Zfo::I64 = I64[Sp + 56];
           _s7Zfu::I64 = I64[R1 + 7];
           (_s7ZfE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7Zfo::I64 + I64[Sp + 96] * _s7Zfu::I64, I64[Sp + 104] + I64[Sp + 88] * _s7Zfu::I64, I64[Sp + 80] * _s7Zfu::I64);
           call MO_Touch(_s7Zev::P64);
           call MO_Touch(_c801B::P64);
           I64[Hp - 48] = sat_s7ZfK_info;
           P64[Hp - 32] = _c801B::P64;
           I64[Hp - 24] = _s7Zek::I64;
           I64[Hp - 16] = _s7ZeL::I64;
           I64[Hp - 8] = _s7Zfg::I64;
           I64[Hp] = _s7Zfo::I64;
           R1 = Hp - 48;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c801J_info" {
     block_c801J_info:
         const _c801J;
         const 507725;
         const 30;
 },
 _c802I() //  [R1]
         { []
         }
     {offset
       c802I: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c804R; else goto c804Q;
       c804R: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c804Q: // global
           _c801B::P64 = P64[Sp + 72];
           _s7Zek::I64 = I64[Sp + 48];
           _s7Zev::P64 = P64[Sp + 16];
           _s7ZeL::I64 = I64[Sp + 64];
           _s7Zfg::I64 = I64[Sp + 8];
           _s7Zfo::I64 = I64[Sp + 56];
           _s7ZfU::I64 = I64[R1 + 7];
           (_s7Zg4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7Zfo::I64 + I64[Sp + 96] * _s7ZfU::I64, I64[Sp + 104] + I64[Sp + 88] * _s7ZfU::I64, I64[Sp + 80] * _s7ZfU::I64);
           call MO_Touch(_s7Zev::P64);
           call MO_Touch(_c801B::P64);
           I64[Hp - 48] = sat_s7Zga_info;
           P64[Hp - 32] = _c801B::P64;
           I64[Hp - 24] = _s7Zek::I64;
           I64[Hp - 16] = _s7ZeL::I64;
           I64[Hp - 8] = _s7Zfg::I64;
           I64[Hp] = _s7Zfo::I64;
           R1 = Hp - 48;
           Sp = Sp + 112;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c802I_info" {
     block_c802I_info:
         const _c802I;
         const 507725;
         const 30;
 },
 _c805h() //  []
         { []
         }
     {offset
       c805h: // global
           R1 = lvl42_r7WMU_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.758604076 UTC

[section ""data" . GHC.Event.Array.concat2_closure" {
     GHC.Event.Array.concat2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.762546953 UTC

[section ""data" . GHC.Event.Array.$wconcat_closure" {
     GHC.Event.Array.$wconcat_closure:
         const GHC.Event.Array.$wconcat_info;
         const 0;
 },
 GHC.Event.Array.$wconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c808M: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c808Q; else goto c808R;
       c808Q: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c808R: // global
           I64[Sp - 32] = block_c808J_info;
           R1 = P64[R3 + 8];
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8099; else goto c808K;
       u8099: // global
           call _c808J(R1) args: 0, res: 0, upd: 0;
       c808K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wconcat_info" {
     GHC.Event.Array.$wconcat_info:
         const GHC.Event.Array.$wconcat_entry;
         const 0;
         const 38654705678;
         const 17179869207;
         const S7Znn_srt+240;
 },
 _c808J() //  [R1]
         { []
         }
     {offset
       c808J: // global
           _s7ZgO::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp - 8] = block_c808P_info;
           _s7ZgI::P64 = R1;
           _s7ZgK::I64 = I64[R1 + 15];
           R1 = _s7ZgO::P64;
           I64[Sp] = _s7ZgK::I64;
           P64[Sp + 24] = _s7ZgI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8098; else goto c808T;
       u8098: // global
           call _c808P(R1) args: 0, res: 0, upd: 0;
       c808T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c808J_info" {
     block_c808J_info:
         const _c808J;
         const 3;
         const 4294967326;
         const S7Znn_srt+240;
 },
 _c808P() //  [R1]
         { []
         }
     {offset
       c808P: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8092; else goto c8091;
       c8092: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8091: // global
           _s7ZgR::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _s7ZgR::I64;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           _s7ZgB::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c808Z_info;
           R6 = GHC.Event.Array.concat2_closure+1;
           R5 = R1;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = _s7ZgB::P64;
           P64[Sp + 8] = Hp - 23;
           Sp = Sp + 8;
           call GHC.Event.Array.concat3_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c808P_info" {
     block_c808P_info:
         const _c808P;
         const 68;
         const 4294967326;
         const S7Znn_srt+240;
 },
 _c808Z() //  [R1]
         { []
         }
     {offset
       c808Z: // global
           _s7ZgC::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_s7ZgC::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7ZgC::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c808Z_info" {
     block_c808Z_info:
         const _c808Z;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.772903452 UTC

[section ""data" . GHC.Event.Array.concat1_closure" {
     GHC.Event.Array.concat1_closure:
         const GHC.Event.Array.concat1_info;
         const 0;
 },
 GHC.Event.Array.concat1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c809I: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c809M; else goto c809N;
       c809M: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.concat1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c809N: // global
           I64[Sp - 24] = block_c809F_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u809V; else goto c809G;
       u809V: // global
           call _c809F(R1) args: 0, res: 0, upd: 0;
       c809G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.concat1_info" {
     GHC.Event.Array.concat1_info:
         const GHC.Event.Array.concat1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S7Znn_srt+264;
 },
 _c809F() //  [R1]
         { []
         }
     {offset
       c809F: // global
           I64[Sp] = block_c809L_info;
           _s7Zh4::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s7Zh4::P64;
           if (R1 & 7 != 0) goto u809U; else goto c809P;
       u809U: // global
           call _c809L(R1) args: 0, res: 0, upd: 0;
       c809P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c809F_info" {
     block_c809F_info:
         const _c809F;
         const 2;
         const 4294967326;
         const S7Znn_srt+264;
 },
 _c809L() //  [R1]
         { []
         }
     {offset
       c809L: // global
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Array.$wconcat_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c809L_info" {
     block_c809L_info:
         const _c809L;
         const 2;
         const 4294967326;
         const S7Znn_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.780971588 UTC

[section ""data" . GHC.Event.Array.concat_closure" {
     GHC.Event.Array.concat_closure:
         const GHC.Event.Array.concat_info;
         const 0;
 },
 GHC.Event.Array.concat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80af: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.concat1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.concat_info" {
     GHC.Event.Array.concat_info:
         const GHC.Event.Array.concat_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7Znn_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.785809111 UTC

[section ""data" . GHC.Event.Array.copy1_closure" {
     GHC.Event.Array.copy1_closure:
         const GHC.Event.Array.copy1_info;
         const 0;
 },
 GHC.Event.Array.copy1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c80at: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c80ax; else goto c80ay;
       c80ax: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.copy1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c80ay: // global
           I64[Sp - 40] = block_c80aq_info;
           R1 = R3;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u80aM; else goto c80ar;
       u80aM: // global
           call _c80aq(R1) args: 0, res: 0, upd: 0;
       c80ar: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.copy1_info" {
     GHC.Event.Array.copy1_info:
         const GHC.Event.Array.copy1_entry;
         const 0;
         const 141733920782;
         const 30064771098;
         const S7Znn_srt+240;
 },
 _c80aq() //  [R1]
         { []
         }
     {offset
       c80aq: // global
           I64[Sp - 8] = block_c80aw_info;
           _s7Zhf::P64 = P64[R1 + 7];
           R1 = P64[Sp + 24];
           P64[Sp] = P64[_s7Zhf::P64 + 8];
           P64[Sp + 24] = _s7Zhf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u80aL; else goto c80aA;
       u80aL: // global
           call _c80aw(R1) args: 0, res: 0, upd: 0;
       c80aA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c80aq_info" {
     block_c80aq_info:
         const _c80aq;
         const 5;
         const 4294967326;
         const S7Znn_srt+240;
 },
 _c80aw() //  [R1]
         { []
         }
     {offset
       c80aw: // global
           _s7Zh9::P64 = P64[Sp + 24];
           _s7Zhn::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp + 24] = block_c80aE_info;
           R6 = P64[Sp + 40];
           R5 = _s7Zhn::P64;
           R4 = _s7Zh9::P64;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           P64[Sp + 16] = P64[Sp + 48];
           Sp = Sp + 16;
           call GHC.Event.Array.concat3_entry(R6,
                                              R5,
                                              R4,
                                              R3,
                                              R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c80aw_info" {
     block_c80aw_info:
         const _c80aw;
         const 6;
         const 4294967326;
         const S7Znn_srt+240;
 },
 _c80aE() //  [R1]
         { []
         }
     {offset
       c80aE: // global
           _s7Zhf::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_s7Zhf::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s7Zhf::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80aE_info" {
     block_c80aE_info:
         const _c80aE;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.795038324 UTC

[section ""data" . GHC.Event.Array.copy_closure" {
     GHC.Event.Array.copy_closure:
         const GHC.Event.Array.copy_info;
         const 0;
 },
 GHC.Event.Array.copy_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c80bg: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.copy1_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.copy_info" {
     GHC.Event.Array.copy_info:
         const GHC.Event.Array.copy_entry;
         const 0;
         const 4294967310;
         const 30064771098;
         const S7Znn_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.798262385 UTC

[section ""data" . lvl43_r7WMV_closure" {
     lvl43_r7WMV_closure:
         const GHC.Types.I#_con_info;
         const 68;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.799906749 UTC

[section ""data" . lvl44_r7WMW_closure" {
     lvl44_r7WMW_closure:
         const GHC.Types.I#_con_info;
         const 26;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.80164789 UTC

[section ""data" . lvl45_r7WMX_closure" {
     lvl45_r7WMX_closure:
         const GHC.Types.I#_con_info;
         const 35;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.803315313 UTC

[section ""data" . lvl46_r7WMY_closure" {
     lvl46_r7WMY_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl43_r7WMV_closure+1;
         const lvl44_r7WMW_closure+1;
         const lvl43_r7WMV_closure+1;
         const lvl45_r7WMX_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.805670583 UTC

[section ""data" . lvl47_r7WMZ_closure" {
     lvl47_r7WMZ_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl46_r7WMY_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.808037027 UTC

[section ""data" . GHC.Event.Array.duplicate1_closure" {
     GHC.Event.Array.duplicate1_closure:
         const GHC.Event.Array.duplicate1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.duplicate1_entry() //  [R1]
         { []
         }
     {offset
       c80by: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c80bz; else goto c80bA;
       c80bz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c80bA: // global
           (_c80bv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c80bv::I64 == 0) goto c80bx; else goto c80bw;
       c80bx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c80bw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c80bv::I64;
           R2 = lvl47_r7WMZ_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.duplicate1_info" {
     GHC.Event.Array.duplicate1_info:
         const GHC.Event.Array.duplicate1_entry;
         const 0;
         const 1152921508901814293;
         const S7Znn_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.814000068 UTC

[section ""data" . GHC.Event.Array.$wnew_closure" {
     GHC.Event.Array.$wnew_closure:
         const GHC.Event.Array.$wnew_info;
         const 0;
 },
 GHC.Event.Array.$wnew_entry() //  [R2, R3]
         { []
         }
     {offset
       c80bP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c80bQ; else goto c80bR;
       c80bQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.$wnew_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c80bR: // global
           I64[Sp - 16] = block_c80bN_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.duplicate1_closure;
           I64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.$wnew_info" {
     GHC.Event.Array.$wnew_info:
         const GHC.Event.Array.$wnew_entry;
         const 0;
         const 211110527500302;
         const 12884901902;
         const S7Znn_srt+184;
 },
 _c80bN() //  [R1]
         { []
         }
     {offset
       c80bN: // global
           _s7Zhx::I64 = I64[Sp + 8] - 1;
           _s7Zhy::I64 = _s7Zhx::I64 | %MO_S_Shr_W64(_s7Zhx::I64, 1);
           _s7ZhA::I64 = _s7Zhy::I64 | %MO_S_Shr_W64(_s7Zhy::I64, 2);
           _s7ZhC::I64 = _s7ZhA::I64 | %MO_S_Shr_W64(_s7ZhA::I64, 4);
           _s7ZhE::I64 = _s7ZhC::I64 | %MO_S_Shr_W64(_s7ZhC::I64, 8);
           _s7ZhG::I64 = _s7ZhE::I64 | %MO_S_Shr_W64(_s7ZhE::I64, 16);
           _s7ZhI::I64 = _s7ZhG::I64 | %MO_S_Shr_W64(_s7ZhG::I64, 32) + 1;
           _s7ZhL::I64 = _s7ZhI::I64 * I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7ZhL::I64, 0)) goto c80cT; else goto c80d0;
       c80cT: // global
           I64[Sp] = block_c80cH_info;
           R1 = _s7ZhL::I64;
           I64[Sp + 8] = _s7ZhI::I64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c80d0: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80bN_info" {
     block_c80bN_info:
         const _c80bN;
         const 65;
         const 4294967326;
         const S7Znn_srt+184;
 },
 _c80cH() //  [R1]
         { []
         }
     {offset
       c80cH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c80cW; else goto c80cV;
       c80cW: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c80cV: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 61;
           P64[Hp - 32] = R1 + 16;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = I64[Sp + 8];
           I64[Sp + 8] = block_c80cP_info;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c80cH_info" {
     block_c80cH_info:
         const _c80cH;
         const 65;
         const 30;
 },
 _c80cP() //  [R1]
         { []
         }
     {offset
       c80cP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c80cZ; else goto c80cY;
       c80cZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c80cY: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80cP_info" {
     block_c80cP_info:
         const _c80cP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.823663963 UTC

[section ""data" . GHC.Event.Array.new1_closure" {
     GHC.Event.Array.new1_closure:
         const GHC.Event.Array.new1_info;
         const 0;
 },
 GHC.Event.Array.new1_entry() //  [R2, R3]
         { []
         }
     {offset
       c80dQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c80dR; else goto c80dS;
       c80dR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.new1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c80dS: // global
           I64[Sp - 16] = block_c80dN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u80dW; else goto c80dO;
       u80dW: // global
           call _c80dN(R1) args: 0, res: 0, upd: 0;
       c80dO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.new1_info" {
     GHC.Event.Array.new1_info:
         const GHC.Event.Array.new1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S7Znn_srt+304;
 },
 _c80dN() //  [R1]
         { []
         }
     {offset
       c80dN: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.Array.$wnew_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80dN_info" {
     block_c80dN_info:
         const _c80dN;
         const 1;
         const 4294967326;
         const S7Znn_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.828728083 UTC

[section ""data" . GHC.Event.Array.new_closure" {
     GHC.Event.Array.new_closure:
         const GHC.Event.Array.new_info;
         const 0;
 },
 GHC.Event.Array.new_entry() //  [R2, R3]
         { []
         }
     {offset
       c80eb: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Array.new1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.new_info" {
     GHC.Event.Array.new_info:
         const GHC.Event.Array.new_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7Znn_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.831797562 UTC

[section ""data" . lvl48_r7WN0_closure" {
     lvl48_r7WN0_closure:
         const GHC.Types.I#_con_info;
         const 95;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.834078769 UTC

[section ""data" . lvl49_r7WN1_closure" {
     lvl49_r7WN1_closure:
         const GHC.Types.I#_con_info;
         const 23;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.835722111 UTC

[section ""data" . lvl50_r7WN2_closure" {
     lvl50_r7WN2_closure:
         const GHC.Types.I#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.837430942 UTC

[section ""data" . lvl51_r7WN3_closure" {
     lvl51_r7WN3_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r7WMb_closure;
         const lvl8_r7WMc_closure;
         const lvl10_r7WMe_closure;
         const lvl48_r7WN0_closure+1;
         const lvl49_r7WN1_closure+1;
         const lvl48_r7WN0_closure+1;
         const lvl50_r7WN2_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.839795292 UTC

[section ""data" . lvl52_r7WN4_closure" {
     lvl52_r7WN4_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl6_r7WMa_closure;
         const lvl51_r7WN3_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.842384267 UTC

[section ""data" . GHC.Event.Array.duplicate2_closure" {
     GHC.Event.Array.duplicate2_closure:
         const GHC.Event.Array.duplicate2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Array.duplicate2_entry() //  [R1]
         { []
         }
     {offset
       c80et: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c80eu; else goto c80ev;
       c80eu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c80ev: // global
           (_c80eq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c80eq::I64 == 0) goto c80es; else goto c80er;
       c80es: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c80er: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c80eq::I64;
           R2 = lvl52_r7WN4_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Array.duplicate2_info" {
     GHC.Event.Array.duplicate2_info:
         const GHC.Event.Array.duplicate2_entry;
         const 0;
         const 12884901909;
         const S7Znn_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.850227706 UTC

[section ""data" . GHC.Event.Array.duplicate_closure" {
     GHC.Event.Array.duplicate_closure:
         const GHC.Event.Array.duplicate_info;
         const 0;
 },
 lvl53_s7Zi5_entry() //  [R1]
         { []
         }
     {offset
       c80eM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c80eN; else goto c80eO;
       c80eN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c80eO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.duplicate2_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_s7Zi5_info" {
     lvl53_s7Zi5_info:
         const lvl53_s7Zi5_entry;
         const 1;
         const 4294967312;
         const S7Znn_srt+336;
 },
 lvl54_s7Zi6_entry() //  [R1]
         { []
         }
     {offset
       c80eT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c80eU; else goto c80eV;
       c80eU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c80eV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Event.Array.duplicate1_closure;
           Sp = Sp - 32;
           call Foreign.Storable.sizeOf_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl54_s7Zi6_info" {
     lvl54_s7Zi6_info:
         const lvl54_s7Zi6_entry;
         const 1;
         const 4294967312;
         const S7Znn_srt+296;
 },
 sat_s7ZiL_entry() //  [R1, R2]
         { []
         }
     {offset
       c80f4: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c80fi; else goto c80fj;
       c80fi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c80fj: // global
           I64[Sp - 24] = block_c80f1_info;
           _s7Zi5::P64 = P64[R1 + 6];
           _s7Zi6::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _s7Zi5::P64;
           P64[Sp - 8] = _s7Zi6::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u80gb; else goto c80f2;
       u80gb: // global
           call _c80f1(R1) args: 0, res: 0, upd: 0;
       c80f2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7ZiL_info" {
     sat_s7ZiL_info:
         const sat_s7ZiL_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const S7Znn_srt+184;
 },
 _c80f1() //  [R1]
         { []
         }
     {offset
       c80f1: // global
           _s7Zid::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_c80f7_info;
           R1 = _s7Zid::P64;
           if (R1 & 7 != 0) goto u80ga; else goto c80f8;
       u80ga: // global
           call _c80f7(R1) args: 0, res: 0, upd: 0;
       c80f8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c80f1_info" {
     block_c80f1_info:
         const _c80f1;
         const 2;
         const 4294967326;
         const S7Znn_srt+184;
 },
 _c80f7() //  [R1]
         { []
         }
     {offset
       c80f7: // global
           I64[Sp - 16] = block_c80fc_info;
           _s7Zig::I64 = I64[R1 + 15];
           _s7Zih::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _s7Zih::I64;
           I64[Sp] = _s7Zig::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u80gc; else goto c80fd;
       u80gc: // global
           call _c80fc(R1) args: 0, res: 0, upd: 0;
       c80fd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c80f7_info" {
     block_c80f7_info:
         const _c80f7;
         const 2;
         const 4294967326;
         const S7Znn_srt+184;
 },
 _c80fc() //  [R1]
         { []
         }
     {offset
       c80fc: // global
           I64[Sp - 8] = block_c80fh_info;
           _s7Zik::P64 = P64[R1 + 7];
           _s7Zij::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _s7Zik::P64;
           I64[Sp + 32] = _s7Zij::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u80gd; else goto c80fn;
       u80gd: // global
           call _c80fh(R1) args: 0, res: 0, upd: 0;
       c80fn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c80fc_info" {
     block_c80fc_info:
         const _c80fc;
         const 196;
         const 4294967326;
         const S7Znn_srt+184;
 },
 _c80fh() //  [R1]
         { []
         }
     {offset
       c80fh: // global
           _s7Zin::I64 = I64[Sp + 16] * I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Zin::I64, 0)) goto c80g1; else goto c80g9;
       c80g1: // global
           I64[Sp] = block_c80fy_info;
           R1 = _s7Zin::I64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c80g9: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80fh_info" {
     block_c80fh_info:
         const _c80fh;
         const 1413;
         const 4294967326;
         const S7Znn_srt+184;
 },
 _c80fy() //  [R1]
         { []
         }
     {offset
       c80fy: // global
           I64[Sp] = block_c80fA_info;
           _s7Zir::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _s7Zir::P64;
           if (R1 & 7 != 0) goto u80ge; else goto c80fB;
       u80ge: // global
           call _c80fA(R1) args: 0, res: 0, upd: 0;
       c80fB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c80fy_info" {
     block_c80fy_info:
         const _c80fy;
         const 1413;
         const 30;
 },
 _c80fA() //  [R1]
         { []
         }
     {offset
       c80fA: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c80g5; else goto c80g4;
       c80g5: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c80g4: // global
           _s7Zig::I64 = I64[Sp + 24];
           _s7Zih::I64 = I64[Sp + 16];
           _s7Zik::P64 = P64[Sp + 8];
           _s7Zir::P64 = P64[Sp + 32];
           _s7Ziu::I64 = _s7Zir::P64 + 16;
           (_s7ZiA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s7Ziu::I64, I64[Sp + 40], _s7Zig::I64 * I64[R1 + 7]);
           call MO_Touch(_s7Zik::P64);
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = _s7Zir::P64;
           _c80fT::P64 = Hp - 61;
           call MO_Touch(_c80fT::P64);
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = _c80fT::P64;
           I64[Hp - 32] = _s7Ziu::I64;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _s7Zig::I64;
           I64[Hp] = _s7Zih::I64;
           I64[Sp + 40] = block_c80fX_info;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c80fA_info" {
     block_c80fA_info:
         const _c80fA;
         const 1413;
         const 30;
 },
 _c80fX() //  [R1]
         { []
         }
     {offset
       c80fX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c80g8; else goto c80g7;
       c80g8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c80g7: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c80fX_info" {
     block_c80fX_info:
         const _c80fX;
         const 0;
         const 30;
 },
 GHC.Event.Array.duplicate_entry() //  [R2]
         { []
         }
     {offset
       c80gf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c80gj; else goto c80gi;
       c80gj: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Event.Array.duplicate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c80gi: // global
           I64[Hp - 64] = lvl53_s7Zi5_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl54_s7Zi6_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s7ZiL_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.duplicate_info" {
     GHC.Event.Array.duplicate_info:
         const GHC.Event.Array.duplicate_entry;
         const 0;
         const 6825772480200718;
         const 4294967301;
         const S7Znn_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.871689872 UTC

[section ""data" . GHC.Event.Array.AC_closure" {
     GHC.Event.Array.AC_closure:
         const GHC.Event.Array.AC_info;
 },
 GHC.Event.Array.AC_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c80hA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c80hE; else goto c80hD;
       c80hE: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Array.AC_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80hD: // global
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.AC_info" {
     GHC.Event.Array.AC_info:
         const GHC.Event.Array.AC_entry;
         const 0;
         const 14;
         const 12884901908;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.87540415 UTC

[section ""cstring" . i80hM_str" {
     i80hM_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,65,114,114,97,121,46,65,67]
 },
 GHC.Event.Array.AC_con_entry() //  [R1]
         { []
         }
     {offset
       c80hL: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Array.AC_con_info" {
     GHC.Event.Array.AC_con_info:
         const GHC.Event.Array.AC_con_entry;
         const 8589934593;
         const 1;
         const i80hM_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:07.879186198 UTC

[section ""relreadonly" . S7Znn_srt" {
     S7Znn_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Event.Array.$wlvl1_closure;
         const GHC.Event.Array.$wunsafeRead_closure;
         const GHC.Event.Array.unsafeRead1_closure;
         const GHC.Event.Array.$wlvl_closure;
         const GHC.Event.Array.$wunsafeWrite'_closure;
         const GHC.Event.Array.unsafeWrite2_closure;
         const GHC.Event.Array.unsafeWrite1_closure;
         const GHC.Err.undefined_closure;
         const lvl15_r7WMj_closure;
         const GHC.Event.Array.forM_1_closure;
         const GHC.Event.Array.forM__closure;
         const lvl20_r7WMo_closure;
         const GHC.Event.Array.loop1_closure;
         const GHC.Event.Array.loop_closure;
         const lvl23_r7WMB_closure;
         const GHC.Event.Array.removeAt2_closure;
         const GHC.Event.Array.removeAt1_closure;
         const GHC.Event.Array.removeAt_closure;
         const lvl29_r7WMH_closure;
         const GHC.Event.Array.findIndex1_closure;
         const GHC.Event.Array.findIndex_closure;
         const lvl34_r7WMM_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const GHC.Event.Array.$wensureCapacity_closure;
         const GHC.Event.Array.ensureCapacity2_closure;
         const GHC.Event.Array.ensureCapacity1_closure;
         const GHC.Event.Array.$wsnoc_closure;
         const GHC.Event.Array.snoc1_closure;
         const lvl39_r7WMR_closure;
         const GHC.Event.Array.concat3_closure;
         const lvl40_r7WMS_closure;
         const lvl42_r7WMU_closure;
         const GHC.Event.Array.$wconcat_closure;
         const GHC.Event.Array.concat1_closure;
         const GHC.Event.Array.copy1_closure;
         const lvl47_r7WMZ_closure;
         const GHC.Event.Array.duplicate1_closure;
         const GHC.Event.Array.$wnew_closure;
         const GHC.Event.Array.new1_closure;
         const lvl52_r7WN4_closure;
         const GHC.Err.undefined_closure;
         const GHC.Event.Array.duplicate2_closure;
         const GHC.Event.Array.duplicate_closure;
 }]

