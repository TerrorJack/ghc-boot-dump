
==================== Output Cmm ====================
2018-03-16 15:56:30.614507131 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:56:30.615664373 UTC

[section ""data" . GHC.ST.$fFunctorST2_closure" {
     GHC.ST.$fFunctorST2_closure:
         const GHC.ST.$fFunctorST2_info;
 },
 GHC.ST.$fFunctorST2_entry() //  [R2, R3]
         { info_tbl: [(c1JCU,
                       label: GHC.ST.$fFunctorST2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JCU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JCV; else goto c1JCW;
       c1JCV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JCW: // global
           I64[Sp - 16] = block_c1JCR_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JCR() //  [R1]
         { info_tbl: [(c1JCR,
                       label: block_c1JCR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JCR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1JCZ; else goto c1JCY;
       c1JCZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JCY: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.61704738 UTC

[section ""data" . GHC.ST.$fFunctorST1_closure" {
     GHC.ST.$fFunctorST1_closure:
         const GHC.ST.$fFunctorST1_info;
 },
 GHC.ST.$fFunctorST1_entry() //  [R2, R3]
         { info_tbl: [(c1JD6,
                       label: GHC.ST.$fFunctorST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JD6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JD7; else goto c1JD8;
       c1JD7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JD8: // global
           I64[Sp - 16] = block_c1JD4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JD4() //  []
         { info_tbl: [(c1JD4,
                       label: block_c1JD4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JD4: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.618134475 UTC

[section ""data" . GHC.ST.$fFunctorST_closure" {
     GHC.ST.$fFunctorST_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.ST.$fFunctorST2_closure+3;
         const GHC.ST.$fFunctorST1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.618918167 UTC

[section ""data" . $cpure_r1Jzx_closure" {
     $cpure_r1Jzx_closure:
         const $cpure_r1Jzx_info;
 },
 $cpure_r1Jzx_entry() //  [R2]
         { info_tbl: [(c1JDe,
                       label: $cpure_r1Jzx_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JDe: // global
           R1 = R2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.619840526 UTC

[section ""data" . GHC.ST.$fApplicativeST_$cpure_closure" {
     GHC.ST.$fApplicativeST_$cpure_closure:
         const GHC.ST.$fApplicativeST_$cpure_info;
 },
 GHC.ST.$fApplicativeST_$cpure_entry() //  [R2]
         { info_tbl: [(c1JDl,
                       label: GHC.ST.$fApplicativeST_$cpure_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JDl: // global
           R2 = R2;
           call $cpure_r1Jzx_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.620774579 UTC

[section ""data" . $c>>=_r1Jzy_closure" {
     $c>>=_r1Jzy_closure:
         const $c>>=_r1Jzy_info;
 },
 $c>>=_r1Jzy_entry() //  [R2, R3]
         { info_tbl: [(c1JDu,
                       label: $c>>=_r1Jzy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JDu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JDv; else goto c1JDw;
       c1JDv: // global
           R3 = R3;
           R2 = R2;
           R1 = $c>>=_r1Jzy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JDw: // global
           I64[Sp - 16] = block_c1JDs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JDs() //  [R1]
         { info_tbl: [(c1JDs,
                       label: block_c1JDs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JDs: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.621928464 UTC

[section ""data" . GHC.ST.$fMonadST_$c>>=_closure" {
     GHC.ST.$fMonadST_$c>>=_closure:
         const GHC.ST.$fMonadST_$c>>=_info;
 },
 GHC.ST.$fMonadST_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c1JDC,
                       label: GHC.ST.$fMonadST_$c>>=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JDC: // global
           R3 = R3;
           R2 = R2;
           call $c>>=_r1Jzy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.623031369 UTC

[section ""data" . GHC.ST.$fApplicativeST2_closure" {
     GHC.ST.$fApplicativeST2_closure:
         const GHC.ST.$fApplicativeST2_info;
 },
 GHC.ST.$fApplicativeST2_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JDO,
                       label: GHC.ST.$fApplicativeST2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JDO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JDP; else goto c1JDQ;
       c1JDP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JDQ: // global
           I64[Sp - 24] = block_c1JDJ_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JDJ() //  [R1]
         { info_tbl: [(c1JDJ,
                       label: block_c1JDJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JDJ: // global
           I64[Sp] = block_c1JDL_info;
           _s1JAo::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JAo::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JDL() //  [R1]
         { info_tbl: [(c1JDL,
                       label: block_c1JDL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JDL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JDU; else goto c1JDT;
       c1JDU: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JDT: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.624563869 UTC

[section ""data" . GHC.ST.$fApplicativeST1_closure" {
     GHC.ST.$fApplicativeST1_closure:
         const GHC.ST.$fApplicativeST1_info;
 },
 GHC.ST.$fApplicativeST1_entry() //  [R2, R3]
         { info_tbl: [(c1JE3,
                       label: GHC.ST.$fApplicativeST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JE3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JE4; else goto c1JE5;
       c1JE4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JE5: // global
           I64[Sp - 16] = block_c1JDZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JDZ() //  [R1]
         { info_tbl: [(c1JDZ,
                       label: block_c1JDZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JDZ: // global
           I64[Sp] = block_c1JE1_info;
           _s1JAy::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1JAy::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JE1() //  []
         { info_tbl: [(c1JE1,
                       label: block_c1JE1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JE1: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.62614596 UTC

[section ""data" . GHC.ST.$fApplicativeST3_closure" {
     GHC.ST.$fApplicativeST3_closure:
         const GHC.ST.$fApplicativeST3_info;
 },
 GHC.ST.$fApplicativeST3_entry() //  [R2, R3]
         { info_tbl: [(c1JEh,
                       label: GHC.ST.$fApplicativeST3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JEh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JEi; else goto c1JEj;
       c1JEi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JEj: // global
           I64[Sp - 16] = block_c1JEc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JEc() //  [R1]
         { info_tbl: [(c1JEc,
                       label: block_c1JEc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JEc: // global
           I64[Sp] = block_c1JEe_info;
           _s1JAH::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1JAH::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JEe() //  [R1]
         { info_tbl: [(c1JEe,
                       label: block_c1JEe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JEe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1JEn; else goto c1JEm;
       c1JEn: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JEm: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.627609985 UTC

[section ""data" . $c*>_r1Jzz_closure" {
     $c*>_r1Jzz_closure:
         const $c*>_r1Jzz_info;
 },
 $c*>_r1Jzz_entry() //  [R2, R3]
         { info_tbl: [(c1JEu,
                       label: $c*>_r1Jzz_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JEu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JEv; else goto c1JEw;
       c1JEv: // global
           R3 = R3;
           R2 = R2;
           R1 = $c*>_r1Jzz_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JEw: // global
           I64[Sp - 16] = block_c1JEs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JEs() //  []
         { info_tbl: [(c1JEs,
                       label: block_c1JEs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JEs: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.629660284 UTC

[section ""data" . GHC.ST.$fApplicativeST_$c*>_closure" {
     GHC.ST.$fApplicativeST_$c*>_closure:
         const GHC.ST.$fApplicativeST_$c*>_info;
 },
 GHC.ST.$fApplicativeST_$c*>_entry() //  [R2, R3]
         { info_tbl: [(c1JEC,
                       label: GHC.ST.$fApplicativeST_$c*>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JEC: // global
           R3 = R3;
           R2 = R2;
           call $c*>_r1Jzz_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.630752824 UTC

[section ""data" . GHC.ST.$fApplicativeST_closure" {
     GHC.ST.$fApplicativeST_closure:
         const GHC.Base.C:Applicative_con_info;
         const GHC.ST.$fFunctorST_closure+1;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fApplicativeST3_closure+3;
         const GHC.ST.$fApplicativeST2_closure+4;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.631578512 UTC

[section ""data" . GHC.ST.$fMonadFailST1_closure" {
     GHC.ST.$fMonadFailST1_closure:
         const GHC.ST.$fMonadFailST1_info;
         const 0;
 },
 GHC.ST.$fMonadFailST1_entry() //  [R2]
         { info_tbl: [(c1JEJ,
                       label: GHC.ST.$fMonadFailST1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JEJ: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.632411669 UTC

[section ""data" . GHC.ST.$fMonadST_closure" {
     GHC.ST.$fMonadST_closure:
         const GHC.Base.C:Monad_con_info;
         const GHC.ST.$fApplicativeST_closure+1;
         const GHC.ST.$fMonadST_$c>>=_closure+3;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.633079604 UTC

[section ""data" . GHC.ST.$fMonadFailST_closure" {
     GHC.ST.$fMonadFailST_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const GHC.ST.$fMonadST_closure+1;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.634376609 UTC

[section ""data" . GHC.ST.$fSemigroupST2_closure" {
     GHC.ST.$fSemigroupST2_closure:
         const GHC.ST.$fSemigroupST2_info;
 },
 sat_s1JB3_entry() //  [R1]
         { info_tbl: [(c1JEZ,
                       label: sat_s1JB3_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JEZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JF0; else goto c1JF1;
       c1JF0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JF1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 GHC.ST.$fSemigroupST2_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JF2,
                       label: GHC.ST.$fSemigroupST2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JF2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JF3; else goto c1JF4;
       c1JF3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JF4: // global
           I64[Sp - 24] = block_c1JER_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JER() //  [R1]
         { info_tbl: [(c1JER,
                       label: block_c1JER_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JER: // global
           I64[Sp] = block_c1JET_info;
           _s1JAZ::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JAZ::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JET() //  [R1]
         { info_tbl: [(c1JET,
                       label: block_c1JET_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JET: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JF8; else goto c1JF7;
       c1JF8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JF7: // global
           I64[Hp - 32] = sat_s1JB3_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.637016778 UTC

[section ""data" . GHC.ST.$w$csconcat_closure" {
     GHC.ST.$w$csconcat_closure:
         const GHC.ST.$w$csconcat_info;
 },
 sat_s1JBl_entry() //  [R1]
         { info_tbl: [(c1JFw,
                       label: sat_s1JBl_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JFw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JFx; else goto c1JFy;
       c1JFx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JFy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 go_s1JB8_entry() //  [R1, R2, R3]
         { info_tbl: [(c1JFD,
                       label: go_s1JB8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JFD: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JFE; else goto c1JFF;
       c1JFE: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JFF: // global
           I64[Sp - 32] = block_c1JFi_info;
           _s1JB8::P64 = R1;
           _s1JB4::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _s1JB4::P64;
           P64[Sp - 16] = _s1JB8::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1JFN; else goto c1JFj;
       u1JFN: // global
           call _c1JFi(R1) args: 0, res: 0, upd: 0;
       c1JFj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JFi() //  [R1]
         { info_tbl: [(c1JFi,
                       label: block_c1JFi_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JFi: // global
           _s1JB9::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1JFA; else goto c1JFB;
       c1JFA: // global
           R1 = _s1JB9::P64;
           Sp = Sp + 32;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       c1JFB: // global
           I64[Sp - 8] = block_c1JFo_info;
           _s1JBd::P64 = P64[R1 + 6];
           _s1JBe::P64 = P64[R1 + 14];
           R1 = _s1JB9::P64;
           P64[Sp] = _s1JBe::P64;
           P64[Sp + 24] = _s1JBd::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JFo() //  [R1]
         { info_tbl: [(c1JFo,
                       label: block_c1JFo_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JFo: // global
           _s1JBe::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1JFq_info;
           R3 = _s1JBe::P64;
           R2 = P64[Sp + 32];
           _s1JBh::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 32] = _s1JBh::P64;
           Sp = Sp + 8;
           call go_s1JB8_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JFq() //  [R1]
         { info_tbl: [(c1JFq,
                       label: block_c1JFq_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JFq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JFM; else goto c1JFL;
       c1JFM: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JFL: // global
           I64[Hp - 32] = sat_s1JBl_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$w$csconcat_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JFO,
                       label: GHC.ST.$w$csconcat_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JFO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1JFS; else goto c1JFR;
       c1JFS: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JFR: // global
           I64[Hp - 8] = go_s1JB8_info;
           P64[Hp] = R2;
           _s1JB5::P64 = R3;
           R3 = R4;
           R2 = _s1JB5::P64;
           R1 = Hp - 5;
           call go_s1JB8_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.639628124 UTC

[section ""data" . GHC.ST.$fSemigroupST1_closure" {
     GHC.ST.$fSemigroupST1_closure:
         const GHC.ST.$fSemigroupST1_info;
 },
 GHC.ST.$fSemigroupST1_entry() //  [R2, R3]
         { info_tbl: [(c1JG0,
                       label: GHC.ST.$fSemigroupST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JG0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JG1; else goto c1JG2;
       c1JG1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JG2: // global
           I64[Sp - 16] = block_c1JFX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1JG6; else goto c1JFY;
       u1JG6: // global
           call _c1JFX(R1) args: 0, res: 0, upd: 0;
       c1JFY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JFX() //  [R1]
         { info_tbl: [(c1JFX,
                       label: block_c1JFX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JFX: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ST.$w$csconcat_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.641554295 UTC

[section ""data" . GHC.ST.$fSemigroupST_closure" {
     GHC.ST.$fSemigroupST_closure:
         const GHC.ST.$fSemigroupST_info;
         const 0;
 },
 sat_s1JBv_entry() //  [R1, R2]
         { info_tbl: [(c1JGg,
                       label: sat_s1JBv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JGg: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.ST.$fSemigroupST_$cstimes_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JBu_entry() //  [R1, R2]
         { info_tbl: [(c1JGo,
                       label: sat_s1JBu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JGo: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fSemigroupST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JBt_entry() //  [R1, R2, R3]
         { info_tbl: [(c1JGw,
                       label: sat_s1JBt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JGw: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fSemigroupST2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$fSemigroupST_entry() //  [R2]
         { info_tbl: [(c1JGA,
                       label: GHC.ST.$fSemigroupST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JGA: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1JGE; else goto c1JGD;
       c1JGE: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JGD: // global
           I64[Hp - 72] = sat_s1JBv_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1JBu_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1JBt_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 37;
           P64[Hp - 8] = Hp - 54;
           P64[Hp] = Hp - 71;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . GHC.ST.$fSemigroupST_$cstimes_closure" {
     GHC.ST.$fSemigroupST_$cstimes_closure:
         const GHC.ST.$fSemigroupST_$cstimes_info;
         const 0;
 },
 sat_s1JBy_entry() //  [R1]
         { info_tbl: [(c1JGN,
                       label: sat_s1JBy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JGN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JGO; else goto c1JGP;
       c1JGO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JGP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fSemigroupST_$cstimes_entry() //  [R2, R3]
         { info_tbl: [(c1JGQ,
                       label: GHC.ST.$fSemigroupST_$cstimes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JGQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JGU; else goto c1JGT;
       c1JGU: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JGT: // global
           I64[Hp - 16] = sat_s1JBy_info;
           P64[Hp] = R2;
           _s1JBx::P64 = R3;
           R3 = Hp - 16;
           R2 = _s1JBx::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.643918925 UTC

[section ""data" . GHC.ST.$fMonoidST_$cp1Monoid_closure" {
     GHC.ST.$fMonoidST_$cp1Monoid_closure:
         const GHC.ST.$fMonoidST_$cp1Monoid_info;
         const 0;
 },
 sat_s1JBA_entry() //  [R1]
         { info_tbl: [(c1JH3,
                       label: sat_s1JBA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JH3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JH4; else goto c1JH5;
       c1JH4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JH5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fMonoidST_$cp1Monoid_entry() //  [R2]
         { info_tbl: [(c1JH6,
                       label: GHC.ST.$fMonoidST_$cp1Monoid_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JH6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JHa; else goto c1JH9;
       c1JHa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JH9: // global
           I64[Hp - 16] = sat_s1JBA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.645649501 UTC

[section ""data" . $cmappend_r1JzA_closure" {
     $cmappend_r1JzA_closure:
         const $cmappend_r1JzA_info;
 },
 sat_s1JBM_entry() //  [R1]
         { info_tbl: [(c1JHp,
                       label: sat_s1JBM_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JHp: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JHq; else goto c1JHr;
       c1JHq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JHr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1JHn_info;
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c1JHn() //  [R1]
         { info_tbl: [(c1JHn,
                       label: block_c1JHn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JHn: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 $cmappend_r1JzA_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JHv,
                       label: $cmappend_r1JzA_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JHv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JHw; else goto c1JHx;
       c1JHw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $cmappend_r1JzA_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JHx: // global
           I64[Sp - 24] = block_c1JHf_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JHf() //  [R1]
         { info_tbl: [(c1JHf,
                       label: block_c1JHf_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JHf: // global
           I64[Sp] = block_c1JHh_info;
           _s1JBH::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JBH::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JHh() //  [R1]
         { info_tbl: [(c1JHh,
                       label: block_c1JHh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JHh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JHB; else goto c1JHA;
       c1JHB: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JHA: // global
           I64[Hp - 32] = sat_s1JBM_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.647524628 UTC

[section ""data" . GHC.ST.$fMonoidST_$cmappend_closure" {
     GHC.ST.$fMonoidST_$cmappend_closure:
         const GHC.ST.$fMonoidST_$cmappend_info;
 },
 GHC.ST.$fMonoidST_$cmappend_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JHG,
                       label: GHC.ST.$fMonoidST_$cmappend_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JHG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $cmappend_r1JzA_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.649468391 UTC

[section ""data" . GHC.ST.$fMonoidST1_closure" {
     GHC.ST.$fMonoidST1_closure:
         const GHC.ST.$fMonoidST1_info;
 },
 $dSemigroup_s1JBQ_entry() //  [R1]
         { info_tbl: [(c1JHR,
                       label: $dSemigroup_s1JBQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JHR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JHS; else goto c1JHT;
       c1JHS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JHT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl_s1JBR_entry() //  [R1]
         { info_tbl: [(c1JHY,
                       label: lvl_s1JBR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JHY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JHZ; else goto c1JI0;
       c1JHZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JI0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s1JC4_entry() //  [R1]
         { info_tbl: [(c1JIk,
                       label: sat_s1JC4_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JIk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JIl; else goto c1JIm;
       c1JIl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JIm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 go_s1JBS_entry() //  [R1, R2]
         { info_tbl: [(c1JIr,
                       label: go_s1JBS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JIr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1JIs; else goto c1JIt;
       c1JIs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JIt: // global
           I64[Sp - 32] = block_c1JI6_info;
           _s1JBS::P64 = R1;
           _s1JBQ::P64 = P64[R1 + 6];
           _s1JBR::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s1JBQ::P64;
           P64[Sp - 16] = _s1JBR::P64;
           P64[Sp - 8] = _s1JBS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1JIB; else goto c1JI7;
       u1JIB: // global
           call _c1JI6(R1) args: 0, res: 0, upd: 0;
       c1JI7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JI6() //  [R1]
         { info_tbl: [(c1JI6,
                       label: block_c1JI6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JI6: // global
           if (R1 & 7 == 1) goto c1JIo; else goto c1JIp;
       c1JIo: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1JIp: // global
           I64[Sp] = block_c1JIc_info;
           _s1JBX::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _s1JBX::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JIc() //  [R1]
         { info_tbl: [(c1JIc,
                       label: block_c1JIc_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JIc: // global
           I64[Sp] = block_c1JIe_info;
           R2 = P64[Sp + 16];
           _s1JC0::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s1JC0::P64;
           call go_s1JBS_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JIe() //  [R1]
         { info_tbl: [(c1JIe,
                       label: block_c1JIe_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JIe: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JIA; else goto c1JIz;
       c1JIA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JIz: // global
           I64[Hp - 32] = sat_s1JC4_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$fMonoidST1_entry() //  [R2, R3]
         { info_tbl: [(c1JIC,
                       label: GHC.ST.$fMonoidST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JIC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1JIG; else goto c1JIF;
       c1JIG: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JIF: // global
           I64[Hp - 64] = $dSemigroup_s1JBQ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl_s1JBR_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s1JBS_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 14;
           call go_s1JBS_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.653368746 UTC

[section ""data" . GHC.ST.$fMonoidST_closure" {
     GHC.ST.$fMonoidST_closure:
         const GHC.ST.$fMonoidST_info;
         const 0;
 },
 sat_s1JCb_entry() //  [R1, R2]
         { info_tbl: [(c1JIQ,
                       label: sat_s1JCb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JIQ: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fMonoidST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JCa_entry() //  [R1, R2, R3]
         { info_tbl: [(c1JIY,
                       label: sat_s1JCa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JIY: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fMonoidST_$cmappend_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JC8_entry() //  [R1]
         { info_tbl: [(c1JJa,
                       label: sat_s1JC8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JJa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JJb; else goto c1JJc;
       c1JJb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JJc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s1JC9_entry() //  [R1]
         { info_tbl: [(c1JJd,
                       label: sat_s1JC9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JJd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JJh; else goto c1JJg;
       c1JJh: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1JJg: // global
           _s1JC5::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s1JC8_info;
           P64[Hp] = _s1JC5::P64;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JC6_entry() //  [R1]
         { info_tbl: [(c1JJm,
                       label: sat_s1JC6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JJm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JJn; else goto c1JJo;
       c1JJn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JJo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fMonoidST_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fMonoidST_entry() //  [R2]
         { info_tbl: [(c1JJq,
                       label: GHC.ST.$fMonoidST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JJq: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1JJu; else goto c1JJt;
       c1JJu: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JJt: // global
           I64[Hp - 104] = sat_s1JCb_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1JCa_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1JC9_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1JC6_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 71;
           P64[Hp - 8] = Hp - 85;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.65543434 UTC

[section ""cstring" . GHC.ST.$fShowST4_bytes" {
     GHC.ST.$fShowST4_bytes:
         I8[] [60,60,83,84,32,97,99,116,105,111,110,62,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.656221516 UTC

[section ""data" . GHC.ST.$fShowST3_closure" {
     GHC.ST.$fShowST3_closure:
         const GHC.ST.$fShowST3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ST.$fShowST3_entry() //  [R1]
         { info_tbl: [(c1JJB,
                       label: GHC.ST.$fShowST3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JJB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JJC; else goto c1JJD;
       c1JJC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JJD: // global
           (_c1JJy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1JJy::I64 == 0) goto c1JJA; else goto c1JJz;
       c1JJA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1JJz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1JJy::I64;
           R2 = GHC.ST.$fShowST4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.657395488 UTC

[section ""data" . GHC.ST.$fShowST2_closure" {
     GHC.ST.$fShowST2_closure:
         const GHC.ST.$fShowST2_info;
         const 0;
 },
 GHC.ST.$fShowST2_entry() //  [R2]
         { info_tbl: [(c1JJI,
                       label: GHC.ST.$fShowST2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JJI: // global
           R3 = R2;
           R2 = GHC.ST.$fShowST3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.658291006 UTC

[section ""data" . GHC.ST.$fShowST_$cshowsPrec_closure" {
     GHC.ST.$fShowST_$cshowsPrec_closure:
         const GHC.ST.$fShowST_$cshowsPrec_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowsPrec_entry() //  [R4]
         { info_tbl: [(c1JJP,
                       label: GHC.ST.$fShowST_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JJP: // global
           R2 = R4;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.659170052 UTC

[section ""data" . GHC.ST.$fShowST_$cshow_closure" {
     GHC.ST.$fShowST_$cshow_closure:
         const GHC.ST.$fShowST_$cshow_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshow_entry() //  []
         { info_tbl: [(c1JJW,
                       label: GHC.ST.$fShowST_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JJW: // global
           R1 = GHC.ST.$fShowST3_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.660084742 UTC

[section ""data" . GHC.ST.$fShowST1_closure" {
     GHC.ST.$fShowST1_closure:
         const GHC.ST.$fShowST1_info;
         const 0;
 },
 GHC.ST.$fShowST1_entry() //  [R3]
         { info_tbl: [(c1JK3,
                       label: GHC.ST.$fShowST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JK3: // global
           R2 = R3;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.660989592 UTC

[section ""data" . GHC.ST.$fShowST_$cshowList_closure" {
     GHC.ST.$fShowST_$cshowList_closure:
         const GHC.ST.$fShowST_$cshowList_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c1JKa,
                       label: GHC.ST.$fShowST_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JKa: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ST.$fShowST1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.661850223 UTC

[section ""data" . GHC.ST.$fShowST_closure" {
     GHC.ST.$fShowST_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ST.$fShowST_$cshowsPrec_closure+3;
         const GHC.ST.$fShowST_$cshow_closure+1;
         const GHC.ST.$fShowST_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.662794445 UTC

[section ""data" . GHC.ST.liftST_closure" {
     GHC.ST.liftST_closure:
         const GHC.ST.liftST_info;
 },
 GHC.ST.liftST_entry() //  [R2]
         { info_tbl: [(c1JKk,
                       label: GHC.ST.liftST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JKk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1JKl; else goto c1JKm;
       c1JKl: // global
           R2 = R2;
           R1 = GHC.ST.liftST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JKm: // global
           I64[Sp - 8] = block_c1JKh_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JKh() //  [R1]
         { info_tbl: [(c1JKh,
                       label: block_c1JKh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JKh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1JKp; else goto c1JKo;
       c1JKp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JKo: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.664460063 UTC

[section ""data" . GHC.ST.fixST1_closure" {
     GHC.ST.fixST1_closure:
         const GHC.ST.fixST1_info;
 },
 ans_s1JCn_entry() //  [R1]
         { info_tbl: [(c1JKC,
                       label: ans_s1JCn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JKC: // global
           _s1JCn::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1JKD; else goto c1JKE;
       c1JKE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JKG; else goto c1JKF;
       c1JKG: // global
           HpAlloc = 24;
           goto c1JKD;
       c1JKD: // global
           R1 = _s1JCn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JKF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1JCn::P64;
           _s1JCl::P64 = P64[_s1JCn::P64 + 16];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1JCn::P64;
           I64[Sp - 24] = block_c1JKz_info;
           R2 = Hp - 16;
           R1 = _s1JCl::P64;
           Sp = Sp - 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c1JKz() //  [R1]
         { info_tbl: [(c1JKz,
                       label: block_c1JKz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JKz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1JKJ; else goto c1JKI;
       c1JKJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1JKI: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.fixST1_entry() //  [R2]
         { info_tbl: [(c1JKN,
                       label: GHC.ST.fixST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JKN: // global
           _s1JCl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c1JKO; else goto c1JKP;
       c1JKP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JKR; else goto c1JKQ;
       c1JKR: // global
           HpAlloc = 24;
           goto c1JKO;
       c1JKO: // global
           R2 = _s1JCl::P64;
           R1 = GHC.ST.fixST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JKQ: // global
           I64[Hp - 16] = ans_s1JCn_info;
           P64[Hp] = _s1JCl::P64;
           I64[Sp - 8] = block_c1JKK_info;
           R1 = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1JKV; else goto c1JKL;
       u1JKV: // global
           call _c1JKK(R1) args: 0, res: 0, upd: 0;
       c1JKL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JKK() //  [R1]
         { info_tbl: [(c1JKK,
                       label: block_c1JKK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JKK: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.666389972 UTC

[section ""data" . GHC.ST.fixST_closure" {
     GHC.ST.fixST_closure:
         const GHC.ST.fixST_info;
 },
 GHC.ST.fixST_entry() //  [R2]
         { info_tbl: [(c1JL0,
                       label: GHC.ST.fixST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JL0: // global
           R2 = R2;
           call GHC.ST.fixST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.667462952 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST1_closure" {
     GHC.ST.unsafeDupableInterleaveST1_closure:
         const GHC.ST.unsafeDupableInterleaveST1_info;
 },
 sat_s1JCD_entry() //  [R1]
         { info_tbl: [(c1JLd,
                       label: sat_s1JCD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JLd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JLe; else goto c1JLf;
       c1JLe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JLf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1JLb_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c1JLb() //  [R1]
         { info_tbl: [(c1JLb,
                       label: block_c1JLb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JLb: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.unsafeDupableInterleaveST1_entry() //  [R2]
         { info_tbl: [(c1JLh,
                       label: GHC.ST.unsafeDupableInterleaveST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JLh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JLl; else goto c1JLk;
       c1JLl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.unsafeDupableInterleaveST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JLk: // global
           I64[Hp - 16] = sat_s1JCD_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.668829826 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST_closure" {
     GHC.ST.unsafeDupableInterleaveST_closure:
         const GHC.ST.unsafeDupableInterleaveST_info;
 },
 GHC.ST.unsafeDupableInterleaveST_entry() //  [R2]
         { info_tbl: [(c1JLq,
                       label: GHC.ST.unsafeDupableInterleaveST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JLq: // global
           R2 = R2;
           call GHC.ST.unsafeDupableInterleaveST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.670676728 UTC

[section ""data" . unsafeInterleaveST1_r1JzB_closure" {
     unsafeInterleaveST1_r1JzB_closure:
         const unsafeInterleaveST1_r1JzB_info;
 },
 sat_s1JCI_entry() //  [R1]
         { info_tbl: [(c1JLE,
                       label: sat_s1JCI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JLE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JLF; else goto c1JLG;
       c1JLF: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1JLG: // global
           I64[Sp - 16] = block_c1JLC_info;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c1JLC() //  []
         { info_tbl: [(c1JLC,
                       label: block_c1JLC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JLC: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 unsafeInterleaveST1_r1JzB_entry() //  [R2]
         { info_tbl: [(c1JLI,
                       label: unsafeInterleaveST1_r1JzB_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JLI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1JLM; else goto c1JLL;
       c1JLM: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = unsafeInterleaveST1_r1JzB_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JLL: // global
           I64[Hp - 8] = sat_s1JCI_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           call GHC.ST.unsafeDupableInterleaveST_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.673606152 UTC

[section ""data" . GHC.ST.unsafeInterleaveST_closure" {
     GHC.ST.unsafeInterleaveST_closure:
         const GHC.ST.unsafeInterleaveST_info;
 },
 GHC.ST.unsafeInterleaveST_entry() //  [R2]
         { info_tbl: [(c1JLR,
                       label: GHC.ST.unsafeInterleaveST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JLR: // global
           R2 = R2;
           call unsafeInterleaveST1_r1JzB_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.674598782 UTC

[section ""data" . GHC.ST.runST_closure" {
     GHC.ST.runST_closure:
         const GHC.ST.runST_info;
 },
 GHC.ST.runST_entry() //  [R2]
         { info_tbl: [(c1JM0,
                       label: GHC.ST.runST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JM0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1JM1; else goto c1JM2;
       c1JM1: // global
           R2 = R2;
           R1 = GHC.ST.runST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JM2: // global
           I64[Sp - 8] = block_c1JLY_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JLY() //  [R1]
         { info_tbl: [(c1JLY,
                       label: block_c1JLY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JLY: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.675685588 UTC

[section ""cstring" . GHC.ST.$trModule4_bytes" {
     GHC.ST.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.676220959 UTC

[section ""data" . GHC.ST.$trModule3_closure" {
     GHC.ST.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.676824419 UTC

[section ""cstring" . GHC.ST.$trModule2_bytes" {
     GHC.ST.$trModule2_bytes:
         I8[] [71,72,67,46,83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.677418628 UTC

[section ""data" . GHC.ST.$trModule1_closure" {
     GHC.ST.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.677941943 UTC

[section ""data" . GHC.ST.$trModule_closure" {
     GHC.ST.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ST.$trModule3_closure+1;
         const GHC.ST.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.678560501 UTC

[section ""data" . $krep_r1JzC_closure" {
     $krep_r1JzC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'LiftedRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.679164844 UTC

[section ""data" . $krep1_r1JzD_closure" {
     $krep1_r1JzD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRuntimeRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.679734208 UTC

[section ""data" . $krep2_r1JzE_closure" {
     $krep2_r1JzE_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.680316145 UTC

[section ""data" . $krep3_r1JzF_closure" {
     $krep3_r1JzF_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.680906509 UTC

[section ""data" . $krep4_r1JzG_closure" {
     $krep4_r1JzG_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.681553743 UTC

[section ""data" . $krep5_r1JzH_closure" {
     $krep5_r1JzH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcState#_closure;
         const $krep4_r1JzG_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.682195781 UTC

[section ""data" . $krep6_r1JzI_closure" {
     $krep6_r1JzI_closure:
         const :_con_info;
         const $krep1_r1JzD_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.682761295 UTC

[section ""data" . $krep7_r1JzJ_closure" {
     $krep7_r1JzJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'[]_closure;
         const $krep6_r1JzI_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.683336779 UTC

[section ""data" . $krep8_r1JzK_closure" {
     $krep8_r1JzK_closure:
         const :_con_info;
         const $krep7_r1JzJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.683974032 UTC

[section ""data" . $krep9_r1JzL_closure" {
     $krep9_r1JzL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'TupleRep_closure;
         const $krep8_r1JzK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.6845302 UTC

[section ""data" . $krep10_r1JzM_closure" {
     $krep10_r1JzM_closure:
         const :_con_info;
         const $krep2_r1JzE_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.685103389 UTC

[section ""data" . $krep11_r1JzN_closure" {
     $krep11_r1JzN_closure:
         const :_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.685764103 UTC

[section ""data" . $krep12_r1JzO_closure" {
     $krep12_r1JzO_closure:
         const :_con_info;
         const $krep_r1JzC_closure+1;
         const $krep11_r1JzN_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.686360207 UTC

[section ""data" . $krep13_r1JzP_closure" {
     $krep13_r1JzP_closure:
         const :_con_info;
         const $krep9_r1JzL_closure+1;
         const $krep12_r1JzO_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.686947818 UTC

[section ""data" . $krep14_r1JzQ_closure" {
     $krep14_r1JzQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc(#,#)_closure;
         const $krep13_r1JzP_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.687758361 UTC

[section ""data" . $krep15_r1JzR_closure" {
     $krep15_r1JzR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep14_r1JzQ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.688349862 UTC

[section ""cstring" . GHC.ST.$tcST2_bytes" {
     GHC.ST.$tcST2_bytes:
         I8[] [83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.688928514 UTC

[section ""data" . GHC.ST.$tcST1_closure" {
     GHC.ST.$tcST1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcST2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.689559073 UTC

[section ""data" . GHC.ST.$tcST_closure" {
     GHC.ST.$tcST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcST1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 6436416558974291297;
         const 634350057185658725;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.690202021 UTC

[section ""data" . $krep16_r1JzS_closure" {
     $krep16_r1JzS_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.690888192 UTC

[section ""data" . $krep17_r1JzT_closure" {
     $krep17_r1JzT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcST_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.691476265 UTC

[section ""data" . GHC.ST.$tc'ST1_closure" {
     GHC.ST.$tc'ST1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep15_r1JzR_closure+4;
         const $krep17_r1JzT_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.692050767 UTC

[section ""cstring" . GHC.ST.$tc'ST3_bytes" {
     GHC.ST.$tc'ST3_bytes:
         I8[] [39,83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.69266427 UTC

[section ""data" . GHC.ST.$tc'ST2_closure" {
     GHC.ST.$tc'ST2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'ST3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.693302876 UTC

[section ""data" . GHC.ST.$tc'ST_closure" {
     GHC.ST.$tc'ST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'ST2_closure+1;
         const GHC.ST.$tc'ST1_closure+4;
         const 13769291328326942007;
         const 10130644975726413154;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.693956774 UTC

[section ""cstring" . GHC.ST.$tcSTret2_bytes" {
     GHC.ST.$tcSTret2_bytes:
         I8[] [83,84,114,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.694573515 UTC

[section ""data" . GHC.ST.$tcSTret1_closure" {
     GHC.ST.$tcSTret1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcSTret2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.695188319 UTC

[section ""data" . GHC.ST.$tcSTret_closure" {
     GHC.ST.$tcSTret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcSTret1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 18266429679521839845;
         const 6736124203785980802;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.695803977 UTC

[section ""data" . $krep18_r1JzU_closure" {
     $krep18_r1JzU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcSTret_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.69642219 UTC

[section ""data" . $krep19_r1JzV_closure" {
     $krep19_r1JzV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1JzE_closure+2;
         const $krep18_r1JzU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.697016682 UTC

[section ""data" . GHC.ST.$tc'STret1_closure" {
     GHC.ST.$tc'STret1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep19_r1JzV_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.697759102 UTC

[section ""cstring" . GHC.ST.$tc'STret3_bytes" {
     GHC.ST.$tc'STret3_bytes:
         I8[] [39,83,84,114,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.698381497 UTC

[section ""data" . GHC.ST.$tc'STret2_closure" {
     GHC.ST.$tc'STret2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'STret3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.69897212 UTC

[section ""data" . GHC.ST.$tc'STret_closure" {
     GHC.ST.$tc'STret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'STret2_closure+1;
         const GHC.ST.$tc'STret1_closure+4;
         const 12272761794237483025;
         const 16570602352537544279;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.699872069 UTC

[section ""data" . GHC.ST.STret_closure" {
     GHC.ST.STret_closure:
         const GHC.ST.STret_info;
 },
 GHC.ST.STret_entry() //  [R2]
         { info_tbl: [(c1JM9,
                       label: GHC.ST.STret_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JM9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1JMd; else goto c1JMc;
       c1JMd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ST.STret_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JMc: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.701727067 UTC

[GHC.ST.STret_con_entry() //  [R1]
         { info_tbl: [(c1JMe,
                       label: GHC.ST.STret_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,84,46,83,84,114,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JMe: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.702428805 UTC

[section ""relreadonly" . S1JEM_srt" {
     S1JEM_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ST.$fSemigroupST_$cstimes_closure;
         const GHC.ST.$fSemigroupST_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const GHC.ST.$fMonoidST_$cp1Monoid_closure;
         const GHC.ST.$fMonoidST_closure;
         const GHC.ST.$fShowST3_closure;
         const GHC.ST.$fShowST2_closure;
         const GHC.ST.$fShowST1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.70311706 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:56:30.703991199 UTC

[section ""data" . GHC.ST.$fFunctorST2_closure" {
     GHC.ST.$fFunctorST2_closure:
         const GHC.ST.$fFunctorST2_info;
 },
 GHC.ST.$fFunctorST2_entry() //  [R2, R3]
         { info_tbl: [(c1JMm,
                       label: GHC.ST.$fFunctorST2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JMm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JMn; else goto c1JMo;
       c1JMn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JMo: // global
           I64[Sp - 16] = block_c1JMj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JMj() //  [R1]
         { info_tbl: [(c1JMj,
                       label: block_c1JMj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JMj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1JMr; else goto c1JMq;
       c1JMr: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JMq: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.705318898 UTC

[section ""data" . GHC.ST.$fFunctorST1_closure" {
     GHC.ST.$fFunctorST1_closure:
         const GHC.ST.$fFunctorST1_info;
 },
 GHC.ST.$fFunctorST1_entry() //  [R2, R3]
         { info_tbl: [(c1JMy,
                       label: GHC.ST.$fFunctorST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JMy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JMz; else goto c1JMA;
       c1JMz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JMA: // global
           I64[Sp - 16] = block_c1JMw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JMw() //  []
         { info_tbl: [(c1JMw,
                       label: block_c1JMw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JMw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.706382111 UTC

[section ""data" . GHC.ST.$fFunctorST_closure" {
     GHC.ST.$fFunctorST_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.ST.$fFunctorST2_closure+3;
         const GHC.ST.$fFunctorST1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.707074431 UTC

[section ""data" . $cpure_r1Jzx_closure" {
     $cpure_r1Jzx_closure:
         const $cpure_r1Jzx_info;
 },
 $cpure_r1Jzx_entry() //  [R2]
         { info_tbl: [(c1JMG,
                       label: $cpure_r1Jzx_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JMG: // global
           R1 = R2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.707872859 UTC

[section ""data" . GHC.ST.$fApplicativeST_$cpure_closure" {
     GHC.ST.$fApplicativeST_$cpure_closure:
         const GHC.ST.$fApplicativeST_$cpure_info;
 },
 GHC.ST.$fApplicativeST_$cpure_entry() //  [R2]
         { info_tbl: [(c1JMN,
                       label: GHC.ST.$fApplicativeST_$cpure_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JMN: // global
           R2 = R2;
           call $cpure_r1Jzx_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.708864086 UTC

[section ""data" . $c>>=_r1Jzy_closure" {
     $c>>=_r1Jzy_closure:
         const $c>>=_r1Jzy_info;
 },
 $c>>=_r1Jzy_entry() //  [R2, R3]
         { info_tbl: [(c1JMW,
                       label: $c>>=_r1Jzy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JMW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JMX; else goto c1JMY;
       c1JMX: // global
           R3 = R3;
           R2 = R2;
           R1 = $c>>=_r1Jzy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JMY: // global
           I64[Sp - 16] = block_c1JMU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JMU() //  [R1]
         { info_tbl: [(c1JMU,
                       label: block_c1JMU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JMU: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.710036654 UTC

[section ""data" . GHC.ST.$fMonadST_$c>>=_closure" {
     GHC.ST.$fMonadST_$c>>=_closure:
         const GHC.ST.$fMonadST_$c>>=_info;
 },
 GHC.ST.$fMonadST_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c1JN4,
                       label: GHC.ST.$fMonadST_$c>>=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JN4: // global
           R3 = R3;
           R2 = R2;
           call $c>>=_r1Jzy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.711102968 UTC

[section ""data" . GHC.ST.$fApplicativeST2_closure" {
     GHC.ST.$fApplicativeST2_closure:
         const GHC.ST.$fApplicativeST2_info;
 },
 GHC.ST.$fApplicativeST2_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JNg,
                       label: GHC.ST.$fApplicativeST2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JNh; else goto c1JNi;
       c1JNh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JNi: // global
           I64[Sp - 24] = block_c1JNb_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JNb() //  [R1]
         { info_tbl: [(c1JNb,
                       label: block_c1JNb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNb: // global
           I64[Sp] = block_c1JNd_info;
           _s1JAo::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JAo::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JNd() //  [R1]
         { info_tbl: [(c1JNd,
                       label: block_c1JNd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JNm; else goto c1JNl;
       c1JNm: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JNl: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.712517331 UTC

[section ""data" . GHC.ST.$fApplicativeST1_closure" {
     GHC.ST.$fApplicativeST1_closure:
         const GHC.ST.$fApplicativeST1_info;
 },
 GHC.ST.$fApplicativeST1_entry() //  [R2, R3]
         { info_tbl: [(c1JNv,
                       label: GHC.ST.$fApplicativeST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JNw; else goto c1JNx;
       c1JNw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JNx: // global
           I64[Sp - 16] = block_c1JNr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JNr() //  [R1]
         { info_tbl: [(c1JNr,
                       label: block_c1JNr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNr: // global
           I64[Sp] = block_c1JNt_info;
           _s1JAy::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1JAy::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JNt() //  []
         { info_tbl: [(c1JNt,
                       label: block_c1JNt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNt: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.714521398 UTC

[section ""data" . GHC.ST.$fApplicativeST3_closure" {
     GHC.ST.$fApplicativeST3_closure:
         const GHC.ST.$fApplicativeST3_info;
 },
 GHC.ST.$fApplicativeST3_entry() //  [R2, R3]
         { info_tbl: [(c1JNJ,
                       label: GHC.ST.$fApplicativeST3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JNK; else goto c1JNL;
       c1JNK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JNL: // global
           I64[Sp - 16] = block_c1JNE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JNE() //  [R1]
         { info_tbl: [(c1JNE,
                       label: block_c1JNE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNE: // global
           I64[Sp] = block_c1JNG_info;
           _s1JAH::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1JAH::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JNG() //  [R1]
         { info_tbl: [(c1JNG,
                       label: block_c1JNG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1JNP; else goto c1JNO;
       c1JNP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JNO: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.716349955 UTC

[section ""data" . $c*>_r1Jzz_closure" {
     $c*>_r1Jzz_closure:
         const $c*>_r1Jzz_info;
 },
 $c*>_r1Jzz_entry() //  [R2, R3]
         { info_tbl: [(c1JNW,
                       label: $c*>_r1Jzz_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JNX; else goto c1JNY;
       c1JNX: // global
           R3 = R3;
           R2 = R2;
           R1 = $c*>_r1Jzz_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JNY: // global
           I64[Sp - 16] = block_c1JNU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JNU() //  []
         { info_tbl: [(c1JNU,
                       label: block_c1JNU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JNU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.717450542 UTC

[section ""data" . GHC.ST.$fApplicativeST_$c*>_closure" {
     GHC.ST.$fApplicativeST_$c*>_closure:
         const GHC.ST.$fApplicativeST_$c*>_info;
 },
 GHC.ST.$fApplicativeST_$c*>_entry() //  [R2, R3]
         { info_tbl: [(c1JO4,
                       label: GHC.ST.$fApplicativeST_$c*>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JO4: // global
           R3 = R3;
           R2 = R2;
           call $c*>_r1Jzz_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.718237238 UTC

[section ""data" . GHC.ST.$fApplicativeST_closure" {
     GHC.ST.$fApplicativeST_closure:
         const GHC.Base.C:Applicative_con_info;
         const GHC.ST.$fFunctorST_closure+1;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fApplicativeST3_closure+3;
         const GHC.ST.$fApplicativeST2_closure+4;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.719026095 UTC

[section ""data" . GHC.ST.$fMonadFailST1_closure" {
     GHC.ST.$fMonadFailST1_closure:
         const GHC.ST.$fMonadFailST1_info;
         const 0;
 },
 GHC.ST.$fMonadFailST1_entry() //  [R2]
         { info_tbl: [(c1JOb,
                       label: GHC.ST.$fMonadFailST1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JOb: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.719793896 UTC

[section ""data" . GHC.ST.$fMonadST_closure" {
     GHC.ST.$fMonadST_closure:
         const GHC.Base.C:Monad_con_info;
         const GHC.ST.$fApplicativeST_closure+1;
         const GHC.ST.$fMonadST_$c>>=_closure+3;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.720523389 UTC

[section ""data" . GHC.ST.$fMonadFailST_closure" {
     GHC.ST.$fMonadFailST_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const GHC.ST.$fMonadST_closure+1;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.721707903 UTC

[section ""data" . GHC.ST.$fSemigroupST2_closure" {
     GHC.ST.$fSemigroupST2_closure:
         const GHC.ST.$fSemigroupST2_info;
 },
 sat_s1JB3_entry() //  [R1]
         { info_tbl: [(c1JOq,
                       label: sat_s1JB3_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JOq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JOr; else goto c1JOs;
       c1JOr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JOs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 GHC.ST.$fSemigroupST2_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JOt,
                       label: GHC.ST.$fSemigroupST2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JOt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JOu; else goto c1JOv;
       c1JOu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JOv: // global
           I64[Sp - 24] = block_c1JOi_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JOi() //  [R1]
         { info_tbl: [(c1JOi,
                       label: block_c1JOi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JOi: // global
           I64[Sp] = block_c1JOk_info;
           _s1JAZ::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JAZ::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JOk() //  [R1]
         { info_tbl: [(c1JOk,
                       label: block_c1JOk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JOk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JOz; else goto c1JOy;
       c1JOz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JOy: // global
           I64[Hp - 32] = sat_s1JB3_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.724362182 UTC

[section ""data" . GHC.ST.$w$csconcat_closure" {
     GHC.ST.$w$csconcat_closure:
         const GHC.ST.$w$csconcat_info;
 },
 sat_s1JBl_entry() //  [R1]
         { info_tbl: [(c1JOX,
                       label: sat_s1JBl_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JOX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JOY; else goto c1JOZ;
       c1JOY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JOZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 go_s1JB8_entry() //  [R1, R2, R3]
         { info_tbl: [(c1JP4,
                       label: go_s1JB8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JP4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JP5; else goto c1JP6;
       c1JP5: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JP6: // global
           I64[Sp - 32] = block_c1JOJ_info;
           _s1JB8::P64 = R1;
           _s1JB4::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _s1JB4::P64;
           P64[Sp - 16] = _s1JB8::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1JPe; else goto c1JOK;
       u1JPe: // global
           call _c1JOJ(R1) args: 0, res: 0, upd: 0;
       c1JOK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JOJ() //  [R1]
         { info_tbl: [(c1JOJ,
                       label: block_c1JOJ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JOJ: // global
           _s1JB9::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1JP1; else goto c1JP2;
       c1JP1: // global
           R1 = _s1JB9::P64;
           Sp = Sp + 32;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       c1JP2: // global
           I64[Sp - 8] = block_c1JOP_info;
           _s1JBd::P64 = P64[R1 + 6];
           _s1JBe::P64 = P64[R1 + 14];
           R1 = _s1JB9::P64;
           P64[Sp] = _s1JBe::P64;
           P64[Sp + 24] = _s1JBd::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JOP() //  [R1]
         { info_tbl: [(c1JOP,
                       label: block_c1JOP_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JOP: // global
           _s1JBe::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1JOR_info;
           R3 = _s1JBe::P64;
           R2 = P64[Sp + 32];
           _s1JBh::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 32] = _s1JBh::P64;
           Sp = Sp + 8;
           call go_s1JB8_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JOR() //  [R1]
         { info_tbl: [(c1JOR,
                       label: block_c1JOR_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JOR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JPd; else goto c1JPc;
       c1JPd: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JPc: // global
           I64[Hp - 32] = sat_s1JBl_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$w$csconcat_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JPf,
                       label: GHC.ST.$w$csconcat_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JPf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1JPj; else goto c1JPi;
       c1JPj: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JPi: // global
           I64[Hp - 8] = go_s1JB8_info;
           P64[Hp] = R2;
           _s1JB5::P64 = R3;
           R3 = R4;
           R2 = _s1JB5::P64;
           R1 = Hp - 5;
           call go_s1JB8_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.726936597 UTC

[section ""data" . GHC.ST.$fSemigroupST1_closure" {
     GHC.ST.$fSemigroupST1_closure:
         const GHC.ST.$fSemigroupST1_info;
 },
 GHC.ST.$fSemigroupST1_entry() //  [R2, R3]
         { info_tbl: [(c1JPr,
                       label: GHC.ST.$fSemigroupST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JPr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JPs; else goto c1JPt;
       c1JPs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JPt: // global
           I64[Sp - 16] = block_c1JPo_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1JPx; else goto c1JPp;
       u1JPx: // global
           call _c1JPo(R1) args: 0, res: 0, upd: 0;
       c1JPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JPo() //  [R1]
         { info_tbl: [(c1JPo,
                       label: block_c1JPo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JPo: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ST.$w$csconcat_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.728782112 UTC

[section ""data" . GHC.ST.$fSemigroupST_closure" {
     GHC.ST.$fSemigroupST_closure:
         const GHC.ST.$fSemigroupST_info;
         const 0;
 },
 sat_s1JBv_entry() //  [R1, R2]
         { info_tbl: [(c1JPH,
                       label: sat_s1JBv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JPH: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.ST.$fSemigroupST_$cstimes_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JBu_entry() //  [R1, R2]
         { info_tbl: [(c1JPP,
                       label: sat_s1JBu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JPP: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fSemigroupST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JBt_entry() //  [R1, R2, R3]
         { info_tbl: [(c1JPX,
                       label: sat_s1JBt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JPX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fSemigroupST2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$fSemigroupST_entry() //  [R2]
         { info_tbl: [(c1JQ1,
                       label: GHC.ST.$fSemigroupST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JQ1: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1JQ5; else goto c1JQ4;
       c1JQ5: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JQ4: // global
           I64[Hp - 72] = sat_s1JBv_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1JBu_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1JBt_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 37;
           P64[Hp - 8] = Hp - 54;
           P64[Hp] = Hp - 71;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . GHC.ST.$fSemigroupST_$cstimes_closure" {
     GHC.ST.$fSemigroupST_$cstimes_closure:
         const GHC.ST.$fSemigroupST_$cstimes_info;
         const 0;
 },
 sat_s1JBy_entry() //  [R1]
         { info_tbl: [(c1JQe,
                       label: sat_s1JBy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JQe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JQf; else goto c1JQg;
       c1JQf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JQg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fSemigroupST_$cstimes_entry() //  [R2, R3]
         { info_tbl: [(c1JQh,
                       label: GHC.ST.$fSemigroupST_$cstimes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JQh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JQl; else goto c1JQk;
       c1JQl: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JQk: // global
           I64[Hp - 16] = sat_s1JBy_info;
           P64[Hp] = R2;
           _s1JBx::P64 = R3;
           R3 = Hp - 16;
           R2 = _s1JBx::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.731049079 UTC

[section ""data" . GHC.ST.$fMonoidST_$cp1Monoid_closure" {
     GHC.ST.$fMonoidST_$cp1Monoid_closure:
         const GHC.ST.$fMonoidST_$cp1Monoid_info;
         const 0;
 },
 sat_s1JBA_entry() //  [R1]
         { info_tbl: [(c1JQu,
                       label: sat_s1JBA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JQu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JQv; else goto c1JQw;
       c1JQv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JQw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fMonoidST_$cp1Monoid_entry() //  [R2]
         { info_tbl: [(c1JQx,
                       label: GHC.ST.$fMonoidST_$cp1Monoid_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JQx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JQB; else goto c1JQA;
       c1JQB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JQA: // global
           I64[Hp - 16] = sat_s1JBA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.732718538 UTC

[section ""data" . $cmappend_r1JzA_closure" {
     $cmappend_r1JzA_closure:
         const $cmappend_r1JzA_info;
 },
 sat_s1JBM_entry() //  [R1]
         { info_tbl: [(c1JQQ,
                       label: sat_s1JBM_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JQQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JQR; else goto c1JQS;
       c1JQR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JQS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1JQO_info;
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c1JQO() //  [R1]
         { info_tbl: [(c1JQO,
                       label: block_c1JQO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JQO: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 $cmappend_r1JzA_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JQW,
                       label: $cmappend_r1JzA_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JQW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JQX; else goto c1JQY;
       c1JQX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $cmappend_r1JzA_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JQY: // global
           I64[Sp - 24] = block_c1JQG_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JQG() //  [R1]
         { info_tbl: [(c1JQG,
                       label: block_c1JQG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JQG: // global
           I64[Sp] = block_c1JQI_info;
           _s1JBH::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JBH::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JQI() //  [R1]
         { info_tbl: [(c1JQI,
                       label: block_c1JQI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JQI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JR2; else goto c1JR1;
       c1JR2: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JR1: // global
           I64[Hp - 32] = sat_s1JBM_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.739202212 UTC

[section ""data" . GHC.ST.$fMonoidST_$cmappend_closure" {
     GHC.ST.$fMonoidST_$cmappend_closure:
         const GHC.ST.$fMonoidST_$cmappend_info;
 },
 GHC.ST.$fMonoidST_$cmappend_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JR7,
                       label: GHC.ST.$fMonoidST_$cmappend_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JR7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $cmappend_r1JzA_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.741742813 UTC

[section ""data" . GHC.ST.$fMonoidST1_closure" {
     GHC.ST.$fMonoidST1_closure:
         const GHC.ST.$fMonoidST1_info;
 },
 $dSemigroup_s1JBQ_entry() //  [R1]
         { info_tbl: [(c1JRi,
                       label: $dSemigroup_s1JBQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JRi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JRj; else goto c1JRk;
       c1JRj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JRk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl_s1JBR_entry() //  [R1]
         { info_tbl: [(c1JRp,
                       label: lvl_s1JBR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JRp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JRq; else goto c1JRr;
       c1JRq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JRr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s1JC4_entry() //  [R1]
         { info_tbl: [(c1JRL,
                       label: sat_s1JC4_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JRL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JRM; else goto c1JRN;
       c1JRM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JRN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 go_s1JBS_entry() //  [R1, R2]
         { info_tbl: [(c1JRS,
                       label: go_s1JBS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JRS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1JRT; else goto c1JRU;
       c1JRT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JRU: // global
           I64[Sp - 32] = block_c1JRx_info;
           _s1JBS::P64 = R1;
           _s1JBQ::P64 = P64[R1 + 6];
           _s1JBR::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s1JBQ::P64;
           P64[Sp - 16] = _s1JBR::P64;
           P64[Sp - 8] = _s1JBS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1JS2; else goto c1JRy;
       u1JS2: // global
           call _c1JRx(R1) args: 0, res: 0, upd: 0;
       c1JRy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JRx() //  [R1]
         { info_tbl: [(c1JRx,
                       label: block_c1JRx_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JRx: // global
           if (R1 & 7 == 1) goto c1JRP; else goto c1JRQ;
       c1JRP: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1JRQ: // global
           I64[Sp] = block_c1JRD_info;
           _s1JBX::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _s1JBX::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JRD() //  [R1]
         { info_tbl: [(c1JRD,
                       label: block_c1JRD_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JRD: // global
           I64[Sp] = block_c1JRF_info;
           R2 = P64[Sp + 16];
           _s1JC0::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s1JC0::P64;
           call go_s1JBS_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JRF() //  [R1]
         { info_tbl: [(c1JRF,
                       label: block_c1JRF_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JRF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JS1; else goto c1JS0;
       c1JS1: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JS0: // global
           I64[Hp - 32] = sat_s1JC4_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$fMonoidST1_entry() //  [R2, R3]
         { info_tbl: [(c1JS3,
                       label: GHC.ST.$fMonoidST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JS3: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1JS7; else goto c1JS6;
       c1JS7: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JS6: // global
           I64[Hp - 64] = $dSemigroup_s1JBQ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl_s1JBR_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s1JBS_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 14;
           call go_s1JBS_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.746893865 UTC

[section ""data" . GHC.ST.$fMonoidST_closure" {
     GHC.ST.$fMonoidST_closure:
         const GHC.ST.$fMonoidST_info;
         const 0;
 },
 sat_s1JCb_entry() //  [R1, R2]
         { info_tbl: [(c1JSh,
                       label: sat_s1JCb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JSh: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fMonoidST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JCa_entry() //  [R1, R2, R3]
         { info_tbl: [(c1JSp,
                       label: sat_s1JCa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JSp: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fMonoidST_$cmappend_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JC8_entry() //  [R1]
         { info_tbl: [(c1JSB,
                       label: sat_s1JC8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JSB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JSC; else goto c1JSD;
       c1JSC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JSD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s1JC9_entry() //  [R1]
         { info_tbl: [(c1JSE,
                       label: sat_s1JC9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JSE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JSI; else goto c1JSH;
       c1JSI: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1JSH: // global
           _s1JC5::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s1JC8_info;
           P64[Hp] = _s1JC5::P64;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JC6_entry() //  [R1]
         { info_tbl: [(c1JSN,
                       label: sat_s1JC6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JSN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JSO; else goto c1JSP;
       c1JSO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JSP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fMonoidST_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fMonoidST_entry() //  [R2]
         { info_tbl: [(c1JSR,
                       label: GHC.ST.$fMonoidST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JSR: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1JSV; else goto c1JSU;
       c1JSV: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JSU: // global
           I64[Hp - 104] = sat_s1JCb_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1JCa_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1JC9_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1JC6_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 71;
           P64[Hp - 8] = Hp - 85;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.751839525 UTC

[section ""cstring" . GHC.ST.$fShowST4_bytes" {
     GHC.ST.$fShowST4_bytes:
         I8[] [60,60,83,84,32,97,99,116,105,111,110,62,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.753173139 UTC

[section ""data" . GHC.ST.$fShowST3_closure" {
     GHC.ST.$fShowST3_closure:
         const GHC.ST.$fShowST3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ST.$fShowST3_entry() //  [R1]
         { info_tbl: [(c1JT2,
                       label: GHC.ST.$fShowST3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JT2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JT3; else goto c1JT4;
       c1JT3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JT4: // global
           (_c1JSZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1JSZ::I64 == 0) goto c1JT1; else goto c1JT0;
       c1JT1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1JT0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1JSZ::I64;
           R2 = GHC.ST.$fShowST4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.755155611 UTC

[section ""data" . GHC.ST.$fShowST2_closure" {
     GHC.ST.$fShowST2_closure:
         const GHC.ST.$fShowST2_info;
         const 0;
 },
 GHC.ST.$fShowST2_entry() //  [R2]
         { info_tbl: [(c1JT9,
                       label: GHC.ST.$fShowST2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JT9: // global
           R3 = R2;
           R2 = GHC.ST.$fShowST3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.756220866 UTC

[section ""data" . GHC.ST.$fShowST_$cshowsPrec_closure" {
     GHC.ST.$fShowST_$cshowsPrec_closure:
         const GHC.ST.$fShowST_$cshowsPrec_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowsPrec_entry() //  [R4]
         { info_tbl: [(c1JTg,
                       label: GHC.ST.$fShowST_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JTg: // global
           R2 = R4;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.75738763 UTC

[section ""data" . GHC.ST.$fShowST_$cshow_closure" {
     GHC.ST.$fShowST_$cshow_closure:
         const GHC.ST.$fShowST_$cshow_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshow_entry() //  []
         { info_tbl: [(c1JTn,
                       label: GHC.ST.$fShowST_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JTn: // global
           R1 = GHC.ST.$fShowST3_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.758485947 UTC

[section ""data" . GHC.ST.$fShowST1_closure" {
     GHC.ST.$fShowST1_closure:
         const GHC.ST.$fShowST1_info;
         const 0;
 },
 GHC.ST.$fShowST1_entry() //  [R3]
         { info_tbl: [(c1JTu,
                       label: GHC.ST.$fShowST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JTu: // global
           R2 = R3;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.759718414 UTC

[section ""data" . GHC.ST.$fShowST_$cshowList_closure" {
     GHC.ST.$fShowST_$cshowList_closure:
         const GHC.ST.$fShowST_$cshowList_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c1JTB,
                       label: GHC.ST.$fShowST_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JTB: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ST.$fShowST1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.760771707 UTC

[section ""data" . GHC.ST.$fShowST_closure" {
     GHC.ST.$fShowST_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ST.$fShowST_$cshowsPrec_closure+3;
         const GHC.ST.$fShowST_$cshow_closure+1;
         const GHC.ST.$fShowST_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.762020639 UTC

[section ""data" . GHC.ST.liftST_closure" {
     GHC.ST.liftST_closure:
         const GHC.ST.liftST_info;
 },
 GHC.ST.liftST_entry() //  [R2]
         { info_tbl: [(c1JTL,
                       label: GHC.ST.liftST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JTL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1JTM; else goto c1JTN;
       c1JTM: // global
           R2 = R2;
           R1 = GHC.ST.liftST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JTN: // global
           I64[Sp - 8] = block_c1JTI_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JTI() //  [R1]
         { info_tbl: [(c1JTI,
                       label: block_c1JTI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JTI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1JTQ; else goto c1JTP;
       c1JTQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JTP: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.764043535 UTC

[section ""data" . GHC.ST.fixST1_closure" {
     GHC.ST.fixST1_closure:
         const GHC.ST.fixST1_info;
 },
 ans_s1JCn_entry() //  [R1]
         { info_tbl: [(c1JU3,
                       label: ans_s1JCn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JU3: // global
           _s1JCn::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1JU4; else goto c1JU5;
       c1JU5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JU7; else goto c1JU6;
       c1JU7: // global
           HpAlloc = 24;
           goto c1JU4;
       c1JU4: // global
           R1 = _s1JCn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JU6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1JCn::P64;
           _s1JCl::P64 = P64[_s1JCn::P64 + 16];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1JCn::P64;
           I64[Sp - 24] = block_c1JU0_info;
           R2 = Hp - 16;
           R1 = _s1JCl::P64;
           Sp = Sp - 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c1JU0() //  [R1]
         { info_tbl: [(c1JU0,
                       label: block_c1JU0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JU0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1JUa; else goto c1JU9;
       c1JUa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1JU9: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.fixST1_entry() //  [R2]
         { info_tbl: [(c1JUe,
                       label: GHC.ST.fixST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JUe: // global
           _s1JCl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c1JUf; else goto c1JUg;
       c1JUg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JUi; else goto c1JUh;
       c1JUi: // global
           HpAlloc = 24;
           goto c1JUf;
       c1JUf: // global
           R2 = _s1JCl::P64;
           R1 = GHC.ST.fixST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JUh: // global
           I64[Hp - 16] = ans_s1JCn_info;
           P64[Hp] = _s1JCl::P64;
           I64[Sp - 8] = block_c1JUb_info;
           R1 = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1JUm; else goto c1JUc;
       u1JUm: // global
           call _c1JUb(R1) args: 0, res: 0, upd: 0;
       c1JUc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JUb() //  [R1]
         { info_tbl: [(c1JUb,
                       label: block_c1JUb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JUb: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.766335393 UTC

[section ""data" . GHC.ST.fixST_closure" {
     GHC.ST.fixST_closure:
         const GHC.ST.fixST_info;
 },
 GHC.ST.fixST_entry() //  [R2]
         { info_tbl: [(c1JUr,
                       label: GHC.ST.fixST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JUr: // global
           R2 = R2;
           call GHC.ST.fixST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.767793354 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST1_closure" {
     GHC.ST.unsafeDupableInterleaveST1_closure:
         const GHC.ST.unsafeDupableInterleaveST1_info;
 },
 sat_s1JCD_entry() //  [R1]
         { info_tbl: [(c1JUE,
                       label: sat_s1JCD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JUE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JUF; else goto c1JUG;
       c1JUF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JUG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1JUC_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c1JUC() //  [R1]
         { info_tbl: [(c1JUC,
                       label: block_c1JUC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JUC: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.unsafeDupableInterleaveST1_entry() //  [R2]
         { info_tbl: [(c1JUI,
                       label: GHC.ST.unsafeDupableInterleaveST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JUI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1JUM; else goto c1JUL;
       c1JUM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.unsafeDupableInterleaveST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JUL: // global
           I64[Hp - 16] = sat_s1JCD_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.769630935 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST_closure" {
     GHC.ST.unsafeDupableInterleaveST_closure:
         const GHC.ST.unsafeDupableInterleaveST_info;
 },
 GHC.ST.unsafeDupableInterleaveST_entry() //  [R2]
         { info_tbl: [(c1JUR,
                       label: GHC.ST.unsafeDupableInterleaveST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JUR: // global
           R2 = R2;
           call GHC.ST.unsafeDupableInterleaveST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.770840689 UTC

[section ""data" . unsafeInterleaveST1_r1JzB_closure" {
     unsafeInterleaveST1_r1JzB_closure:
         const unsafeInterleaveST1_r1JzB_info;
 },
 sat_s1JCI_entry() //  [R1]
         { info_tbl: [(c1JV5,
                       label: sat_s1JCI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JV5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JV6; else goto c1JV7;
       c1JV6: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1JV7: // global
           I64[Sp - 16] = block_c1JV3_info;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c1JV3() //  []
         { info_tbl: [(c1JV3,
                       label: block_c1JV3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JV3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 unsafeInterleaveST1_r1JzB_entry() //  [R2]
         { info_tbl: [(c1JV9,
                       label: unsafeInterleaveST1_r1JzB_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JV9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1JVd; else goto c1JVc;
       c1JVd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = unsafeInterleaveST1_r1JzB_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JVc: // global
           I64[Hp - 8] = sat_s1JCI_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           call GHC.ST.unsafeDupableInterleaveST_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.772653368 UTC

[section ""data" . GHC.ST.unsafeInterleaveST_closure" {
     GHC.ST.unsafeInterleaveST_closure:
         const GHC.ST.unsafeInterleaveST_info;
 },
 GHC.ST.unsafeInterleaveST_entry() //  [R2]
         { info_tbl: [(c1JVi,
                       label: GHC.ST.unsafeInterleaveST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JVi: // global
           R2 = R2;
           call unsafeInterleaveST1_r1JzB_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.773981459 UTC

[section ""data" . GHC.ST.runST_closure" {
     GHC.ST.runST_closure:
         const GHC.ST.runST_info;
 },
 GHC.ST.runST_entry() //  [R2]
         { info_tbl: [(c1JVr,
                       label: GHC.ST.runST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JVr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1JVs; else goto c1JVt;
       c1JVs: // global
           R2 = R2;
           R1 = GHC.ST.runST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JVt: // global
           I64[Sp - 8] = block_c1JVp_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JVp() //  [R1]
         { info_tbl: [(c1JVp,
                       label: block_c1JVp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JVp: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.775234345 UTC

[section ""cstring" . GHC.ST.$trModule4_bytes" {
     GHC.ST.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.776107495 UTC

[section ""data" . GHC.ST.$trModule3_closure" {
     GHC.ST.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.776849062 UTC

[section ""cstring" . GHC.ST.$trModule2_bytes" {
     GHC.ST.$trModule2_bytes:
         I8[] [71,72,67,46,83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.777731432 UTC

[section ""data" . GHC.ST.$trModule1_closure" {
     GHC.ST.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.778489543 UTC

[section ""data" . GHC.ST.$trModule_closure" {
     GHC.ST.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ST.$trModule3_closure+1;
         const GHC.ST.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.779418222 UTC

[section ""data" . $krep_r1JzC_closure" {
     $krep_r1JzC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'LiftedRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.780197256 UTC

[section ""data" . $krep1_r1JzD_closure" {
     $krep1_r1JzD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRuntimeRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.781030441 UTC

[section ""data" . $krep2_r1JzE_closure" {
     $krep2_r1JzE_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.781965454 UTC

[section ""data" . $krep3_r1JzF_closure" {
     $krep3_r1JzF_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.782804692 UTC

[section ""data" . $krep4_r1JzG_closure" {
     $krep4_r1JzG_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.78370588 UTC

[section ""data" . $krep5_r1JzH_closure" {
     $krep5_r1JzH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcState#_closure;
         const $krep4_r1JzG_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.784473691 UTC

[section ""data" . $krep6_r1JzI_closure" {
     $krep6_r1JzI_closure:
         const :_con_info;
         const $krep1_r1JzD_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.786532811 UTC

[section ""data" . $krep7_r1JzJ_closure" {
     $krep7_r1JzJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'[]_closure;
         const $krep6_r1JzI_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.787406788 UTC

[section ""data" . $krep8_r1JzK_closure" {
     $krep8_r1JzK_closure:
         const :_con_info;
         const $krep7_r1JzJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.788244908 UTC

[section ""data" . $krep9_r1JzL_closure" {
     $krep9_r1JzL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'TupleRep_closure;
         const $krep8_r1JzK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.789121415 UTC

[section ""data" . $krep10_r1JzM_closure" {
     $krep10_r1JzM_closure:
         const :_con_info;
         const $krep2_r1JzE_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.789951207 UTC

[section ""data" . $krep11_r1JzN_closure" {
     $krep11_r1JzN_closure:
         const :_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.790697638 UTC

[section ""data" . $krep12_r1JzO_closure" {
     $krep12_r1JzO_closure:
         const :_con_info;
         const $krep_r1JzC_closure+1;
         const $krep11_r1JzN_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.791196571 UTC

[section ""data" . $krep13_r1JzP_closure" {
     $krep13_r1JzP_closure:
         const :_con_info;
         const $krep9_r1JzL_closure+1;
         const $krep12_r1JzO_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.791803814 UTC

[section ""data" . $krep14_r1JzQ_closure" {
     $krep14_r1JzQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc(#,#)_closure;
         const $krep13_r1JzP_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.792419201 UTC

[section ""data" . $krep15_r1JzR_closure" {
     $krep15_r1JzR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep14_r1JzQ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.793001439 UTC

[section ""cstring" . GHC.ST.$tcST2_bytes" {
     GHC.ST.$tcST2_bytes:
         I8[] [83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.793666275 UTC

[section ""data" . GHC.ST.$tcST1_closure" {
     GHC.ST.$tcST1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcST2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.794251957 UTC

[section ""data" . GHC.ST.$tcST_closure" {
     GHC.ST.$tcST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcST1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 6436416558974291297;
         const 634350057185658725;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.794912559 UTC

[section ""data" . $krep16_r1JzS_closure" {
     $krep16_r1JzS_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.795438982 UTC

[section ""data" . $krep17_r1JzT_closure" {
     $krep17_r1JzT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcST_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.797120498 UTC

[section ""data" . GHC.ST.$tc'ST1_closure" {
     GHC.ST.$tc'ST1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep15_r1JzR_closure+4;
         const $krep17_r1JzT_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.797827508 UTC

[section ""cstring" . GHC.ST.$tc'ST3_bytes" {
     GHC.ST.$tc'ST3_bytes:
         I8[] [39,83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.798423626 UTC

[section ""data" . GHC.ST.$tc'ST2_closure" {
     GHC.ST.$tc'ST2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'ST3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.798996165 UTC

[section ""data" . GHC.ST.$tc'ST_closure" {
     GHC.ST.$tc'ST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'ST2_closure+1;
         const GHC.ST.$tc'ST1_closure+4;
         const 13769291328326942007;
         const 10130644975726413154;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.79955721 UTC

[section ""cstring" . GHC.ST.$tcSTret2_bytes" {
     GHC.ST.$tcSTret2_bytes:
         I8[] [83,84,114,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.800100185 UTC

[section ""data" . GHC.ST.$tcSTret1_closure" {
     GHC.ST.$tcSTret1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcSTret2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.800638346 UTC

[section ""data" . GHC.ST.$tcSTret_closure" {
     GHC.ST.$tcSTret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcSTret1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 18266429679521839845;
         const 6736124203785980802;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.801219797 UTC

[section ""data" . $krep18_r1JzU_closure" {
     $krep18_r1JzU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcSTret_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.801848915 UTC

[section ""data" . $krep19_r1JzV_closure" {
     $krep19_r1JzV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1JzE_closure+2;
         const $krep18_r1JzU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.802391654 UTC

[section ""data" . GHC.ST.$tc'STret1_closure" {
     GHC.ST.$tc'STret1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep19_r1JzV_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.802934483 UTC

[section ""cstring" . GHC.ST.$tc'STret3_bytes" {
     GHC.ST.$tc'STret3_bytes:
         I8[] [39,83,84,114,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.803458767 UTC

[section ""data" . GHC.ST.$tc'STret2_closure" {
     GHC.ST.$tc'STret2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'STret3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.80408353 UTC

[section ""data" . GHC.ST.$tc'STret_closure" {
     GHC.ST.$tc'STret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'STret2_closure+1;
         const GHC.ST.$tc'STret1_closure+4;
         const 12272761794237483025;
         const 16570602352537544279;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.804971067 UTC

[section ""data" . GHC.ST.STret_closure" {
     GHC.ST.STret_closure:
         const GHC.ST.STret_info;
 },
 GHC.ST.STret_entry() //  [R2]
         { info_tbl: [(c1JVA,
                       label: GHC.ST.STret_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JVA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1JVE; else goto c1JVD;
       c1JVE: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ST.STret_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1JVD: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.806542689 UTC

[GHC.ST.STret_con_entry() //  [R1]
         { info_tbl: [(c1JVF,
                       label: GHC.ST.STret_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,84,46,83,84,114,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JVF: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.8072301 UTC

[section ""relreadonly" . S1JEM_srt" {
     S1JEM_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ST.$fSemigroupST_$cstimes_closure;
         const GHC.ST.$fSemigroupST_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const GHC.ST.$fMonoidST_$cp1Monoid_closure;
         const GHC.ST.$fMonoidST_closure;
         const GHC.ST.$fShowST3_closure;
         const GHC.ST.$fShowST2_closure;
         const GHC.ST.$fShowST1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.808036093 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:56:30.821813198 UTC

[section ""data" . GHC.ST.$fFunctorST2_closure" {
     GHC.ST.$fFunctorST2_closure:
         const GHC.ST.$fFunctorST2_info;
 },
 GHC.ST.$fFunctorST2_entry() //  [R2, R3]
         { info_tbl: [(c1JVO,
                       label: GHC.ST.$fFunctorST2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JVO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JVP; else goto c1JVQ;
       c1JVP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JVQ: // global
           I64[Sp - 16] = block_c1JVL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JVL() //  [R1]
         { info_tbl: [(c1JVL,
                       label: block_c1JVL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JVL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1JVT; else goto c1JVS;
       c1JVT: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JVS: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.828193264 UTC

[section ""data" . GHC.ST.$fFunctorST1_closure" {
     GHC.ST.$fFunctorST1_closure:
         const GHC.ST.$fFunctorST1_info;
 },
 GHC.ST.$fFunctorST1_entry() //  [R2, R3]
         { info_tbl: [(c1JWa,
                       label: GHC.ST.$fFunctorST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JWa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JWb; else goto c1JWc;
       c1JWb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JWc: // global
           I64[Sp - 16] = block_c1JW8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JW8() //  []
         { info_tbl: [(c1JW8,
                       label: block_c1JW8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JW8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.83339412 UTC

[section ""data" . GHC.ST.$fFunctorST_closure" {
     GHC.ST.$fFunctorST_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.ST.$fFunctorST2_closure+3;
         const GHC.ST.$fFunctorST1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.835326763 UTC

[section ""data" . $cpure_r1Jzx_closure" {
     $cpure_r1Jzx_closure:
         const $cpure_r1Jzx_info;
 },
 $cpure_r1Jzx_entry() //  [R2]
         { info_tbl: [(c1JWs,
                       label: $cpure_r1Jzx_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JWs: // global
           R1 = R2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.838768569 UTC

[section ""data" . GHC.ST.$fApplicativeST_$cpure_closure" {
     GHC.ST.$fApplicativeST_$cpure_closure:
         const GHC.ST.$fApplicativeST_$cpure_info;
 },
 GHC.ST.$fApplicativeST_$cpure_entry() //  [R2]
         { info_tbl: [(c1JWE,
                       label: GHC.ST.$fApplicativeST_$cpure_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JWE: // global
           R2 = R2;
           call $cpure_r1Jzx_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.843215248 UTC

[section ""data" . $c>>=_r1Jzy_closure" {
     $c>>=_r1Jzy_closure:
         const $c>>=_r1Jzy_info;
 },
 $c>>=_r1Jzy_entry() //  [R2, R3]
         { info_tbl: [(c1JWR,
                       label: $c>>=_r1Jzy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JWR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JWS; else goto c1JWT;
       c1JWS: // global
           R3 = R3;
           R2 = R2;
           R1 = $c>>=_r1Jzy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JWT: // global
           I64[Sp - 16] = block_c1JWP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JWP() //  [R1]
         { info_tbl: [(c1JWP,
                       label: block_c1JWP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JWP: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.848498372 UTC

[section ""data" . GHC.ST.$fMonadST_$c>>=_closure" {
     GHC.ST.$fMonadST_$c>>=_closure:
         const GHC.ST.$fMonadST_$c>>=_info;
 },
 GHC.ST.$fMonadST_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c1JX7,
                       label: GHC.ST.$fMonadST_$c>>=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JX7: // global
           R3 = R3;
           R2 = R2;
           call $c>>=_r1Jzy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.852223552 UTC

[section ""data" . GHC.ST.$fApplicativeST2_closure" {
     GHC.ST.$fApplicativeST2_closure:
         const GHC.ST.$fApplicativeST2_info;
 },
 GHC.ST.$fApplicativeST2_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JXn,
                       label: GHC.ST.$fApplicativeST2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JXn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JXo; else goto c1JXp;
       c1JXo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JXp: // global
           I64[Sp - 24] = block_c1JXi_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JXi() //  [R1]
         { info_tbl: [(c1JXi,
                       label: block_c1JXi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JXi: // global
           I64[Sp] = block_c1JXk_info;
           _s1JAo::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JAo::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JXk() //  [R1]
         { info_tbl: [(c1JXk,
                       label: block_c1JXk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JXk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JXt; else goto c1JXs;
       c1JXt: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JXs: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.859757195 UTC

[section ""data" . GHC.ST.$fApplicativeST1_closure" {
     GHC.ST.$fApplicativeST1_closure:
         const GHC.ST.$fApplicativeST1_info;
 },
 GHC.ST.$fApplicativeST1_entry() //  [R2, R3]
         { info_tbl: [(c1JXQ,
                       label: GHC.ST.$fApplicativeST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JXQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JXR; else goto c1JXS;
       c1JXR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JXS: // global
           I64[Sp - 16] = block_c1JXM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JXM() //  [R1]
         { info_tbl: [(c1JXM,
                       label: block_c1JXM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JXM: // global
           I64[Sp] = block_c1JXO_info;
           _s1JAy::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1JAy::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JXO() //  []
         { info_tbl: [(c1JXO,
                       label: block_c1JXO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JXO: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.86787603 UTC

[section ""data" . GHC.ST.$fApplicativeST3_closure" {
     GHC.ST.$fApplicativeST3_closure:
         const GHC.ST.$fApplicativeST3_info;
 },
 GHC.ST.$fApplicativeST3_entry() //  [R2, R3]
         { info_tbl: [(c1JYg,
                       label: GHC.ST.$fApplicativeST3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JYg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JYh; else goto c1JYi;
       c1JYh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JYi: // global
           I64[Sp - 16] = block_c1JYb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JYb() //  [R1]
         { info_tbl: [(c1JYb,
                       label: block_c1JYb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JYb: // global
           I64[Sp] = block_c1JYd_info;
           _s1JAH::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1JAH::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JYd() //  [R1]
         { info_tbl: [(c1JYd,
                       label: block_c1JYd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JYd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1JYm; else goto c1JYl;
       c1JYm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JYl: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.875450475 UTC

[section ""data" . $c*>_r1Jzz_closure" {
     $c*>_r1Jzz_closure:
         const $c*>_r1Jzz_info;
 },
 $c*>_r1Jzz_entry() //  [R2, R3]
         { info_tbl: [(c1JYG,
                       label: $c*>_r1Jzz_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JYG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JYH; else goto c1JYI;
       c1JYH: // global
           R3 = R3;
           R2 = R2;
           R1 = $c*>_r1Jzz_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JYI: // global
           I64[Sp - 16] = block_c1JYE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JYE() //  []
         { info_tbl: [(c1JYE,
                       label: block_c1JYE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JYE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.881476703 UTC

[section ""data" . GHC.ST.$fApplicativeST_$c*>_closure" {
     GHC.ST.$fApplicativeST_$c*>_closure:
         const GHC.ST.$fApplicativeST_$c*>_info;
 },
 GHC.ST.$fApplicativeST_$c*>_entry() //  [R2, R3]
         { info_tbl: [(c1JYW,
                       label: GHC.ST.$fApplicativeST_$c*>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JYW: // global
           R3 = R3;
           R2 = R2;
           call $c*>_r1Jzz_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.884746058 UTC

[section ""data" . GHC.ST.$fApplicativeST_closure" {
     GHC.ST.$fApplicativeST_closure:
         const GHC.Base.C:Applicative_con_info;
         const GHC.ST.$fFunctorST_closure+1;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fApplicativeST3_closure+3;
         const GHC.ST.$fApplicativeST2_closure+4;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.886812841 UTC

[section ""data" . GHC.ST.$fMonadFailST1_closure" {
     GHC.ST.$fMonadFailST1_closure:
         const GHC.ST.$fMonadFailST1_info;
         const 0;
 },
 GHC.ST.$fMonadFailST1_entry() //  [R2]
         { info_tbl: [(c1JZ8,
                       label: GHC.ST.$fMonadFailST1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JZ8: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.889991394 UTC

[section ""data" . GHC.ST.$fMonadST_closure" {
     GHC.ST.$fMonadST_closure:
         const GHC.Base.C:Monad_con_info;
         const GHC.ST.$fApplicativeST_closure+1;
         const GHC.ST.$fMonadST_$c>>=_closure+3;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.891796786 UTC

[section ""data" . GHC.ST.$fMonadFailST_closure" {
     GHC.ST.$fMonadFailST_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const GHC.ST.$fMonadST_closure+1;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.894715199 UTC

[section ""data" . GHC.ST.$fSemigroupST2_closure" {
     GHC.ST.$fSemigroupST2_closure:
         const GHC.ST.$fSemigroupST2_info;
 },
 sat_s1JB3_entry() //  [R1]
         { info_tbl: [(c1JZt,
                       label: sat_s1JB3_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JZt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JZu; else goto c1JZv;
       c1JZu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JZv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 GHC.ST.$fSemigroupST2_entry() //  [R2, R3, R4]
         { info_tbl: [(c1JZw,
                       label: GHC.ST.$fSemigroupST2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JZw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JZx; else goto c1JZy;
       c1JZx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JZy: // global
           I64[Sp - 24] = block_c1JZl_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JZl() //  [R1]
         { info_tbl: [(c1JZl,
                       label: block_c1JZl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JZl: // global
           I64[Sp] = block_c1JZn_info;
           _s1JAZ::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JAZ::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1JZn() //  [R1]
         { info_tbl: [(c1JZn,
                       label: block_c1JZn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1JZn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JZC; else goto c1JZB;
       c1JZC: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JZB: // global
           I64[Hp - 32] = sat_s1JB3_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.9047682 UTC

[section ""data" . GHC.ST.$w$csconcat_closure" {
     GHC.ST.$w$csconcat_closure:
         const GHC.ST.$w$csconcat_info;
 },
 sat_s1JBl_entry() //  [R1]
         { info_tbl: [(c1K0k,
                       label: sat_s1JBl_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K0k: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1K0l; else goto c1K0m;
       c1K0l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K0m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 go_s1JB8_entry() //  [R1, R2, R3]
         { info_tbl: [(c1K0r,
                       label: go_s1JB8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K0r: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1K0s; else goto c1K0t;
       c1K0s: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K0t: // global
           I64[Sp - 32] = block_c1K06_info;
           _s1JB8::P64 = R1;
           _s1JB4::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _s1JB4::P64;
           P64[Sp - 16] = _s1JB8::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1K0B; else goto c1K07;
       u1K0B: // global
           call _c1K06(R1) args: 0, res: 0, upd: 0;
       c1K07: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K06() //  [R1]
         { info_tbl: [(c1K06,
                       label: block_c1K06_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K06: // global
           _s1JB9::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1K0o; else goto c1K0p;
       c1K0o: // global
           R1 = _s1JB9::P64;
           Sp = Sp + 32;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       c1K0p: // global
           I64[Sp - 8] = block_c1K0c_info;
           _s1JBd::P64 = P64[R1 + 6];
           _s1JBe::P64 = P64[R1 + 14];
           R1 = _s1JB9::P64;
           P64[Sp] = _s1JBe::P64;
           P64[Sp + 24] = _s1JBd::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K0c() //  [R1]
         { info_tbl: [(c1K0c,
                       label: block_c1K0c_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K0c: // global
           _s1JBe::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1K0e_info;
           R3 = _s1JBe::P64;
           R2 = P64[Sp + 32];
           _s1JBh::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 32] = _s1JBh::P64;
           Sp = Sp + 8;
           call go_s1JB8_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K0e() //  [R1]
         { info_tbl: [(c1K0e,
                       label: block_c1K0e_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K0e: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1K0A; else goto c1K0z;
       c1K0A: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1K0z: // global
           I64[Hp - 32] = sat_s1JBl_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$w$csconcat_entry() //  [R2, R3, R4]
         { info_tbl: [(c1K0C,
                       label: GHC.ST.$w$csconcat_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K0C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1K0G; else goto c1K0F;
       c1K0G: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K0F: // global
           I64[Hp - 8] = go_s1JB8_info;
           P64[Hp] = R2;
           _s1JB5::P64 = R3;
           R3 = R4;
           R2 = _s1JB5::P64;
           R1 = Hp - 5;
           call go_s1JB8_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.91922899 UTC

[section ""data" . GHC.ST.$fSemigroupST1_closure" {
     GHC.ST.$fSemigroupST1_closure:
         const GHC.ST.$fSemigroupST1_info;
 },
 GHC.ST.$fSemigroupST1_entry() //  [R2, R3]
         { info_tbl: [(c1K1h,
                       label: GHC.ST.$fSemigroupST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K1h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K1i; else goto c1K1j;
       c1K1i: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K1j: // global
           I64[Sp - 16] = block_c1K1e_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1K1n; else goto c1K1f;
       u1K1n: // global
           call _c1K1e(R1) args: 0, res: 0, upd: 0;
       c1K1f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K1e() //  [R1]
         { info_tbl: [(c1K1e,
                       label: block_c1K1e_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K1e: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ST.$w$csconcat_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.925740656 UTC

[section ""data" . GHC.ST.$fSemigroupST_closure" {
     GHC.ST.$fSemigroupST_closure:
         const GHC.ST.$fSemigroupST_info;
         const 0;
 },
 sat_s1JBv_entry() //  [R1, R2]
         { info_tbl: [(c1K1G,
                       label: sat_s1JBv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K1G: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.ST.$fSemigroupST_$cstimes_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JBu_entry() //  [R1, R2]
         { info_tbl: [(c1K1O,
                       label: sat_s1JBu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K1O: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fSemigroupST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JBt_entry() //  [R1, R2, R3]
         { info_tbl: [(c1K1W,
                       label: sat_s1JBt_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K1W: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fSemigroupST2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$fSemigroupST_entry() //  [R2]
         { info_tbl: [(c1K20,
                       label: GHC.ST.$fSemigroupST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K20: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1K24; else goto c1K23;
       c1K24: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K23: // global
           I64[Hp - 72] = sat_s1JBv_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1JBu_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1JBt_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 37;
           P64[Hp - 8] = Hp - 54;
           P64[Hp] = Hp - 71;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . GHC.ST.$fSemigroupST_$cstimes_closure" {
     GHC.ST.$fSemigroupST_$cstimes_closure:
         const GHC.ST.$fSemigroupST_$cstimes_info;
         const 0;
 },
 sat_s1JBy_entry() //  [R1]
         { info_tbl: [(c1K2d,
                       label: sat_s1JBy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K2d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K2e; else goto c1K2f;
       c1K2e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K2f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fSemigroupST_$cstimes_entry() //  [R2, R3]
         { info_tbl: [(c1K2g,
                       label: GHC.ST.$fSemigroupST_$cstimes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K2g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K2k; else goto c1K2j;
       c1K2k: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K2j: // global
           I64[Hp - 16] = sat_s1JBy_info;
           P64[Hp] = R2;
           _s1JBx::P64 = R3;
           R3 = Hp - 16;
           R2 = _s1JBx::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.939499197 UTC

[section ""data" . GHC.ST.$fMonoidST_$cp1Monoid_closure" {
     GHC.ST.$fMonoidST_$cp1Monoid_closure:
         const GHC.ST.$fMonoidST_$cp1Monoid_info;
         const 0;
 },
 sat_s1JBA_entry() //  [R1]
         { info_tbl: [(c1K2S,
                       label: sat_s1JBA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K2S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K2T; else goto c1K2U;
       c1K2T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K2U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fMonoidST_$cp1Monoid_entry() //  [R2]
         { info_tbl: [(c1K2V,
                       label: GHC.ST.$fMonoidST_$cp1Monoid_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K2V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K2Z; else goto c1K2Y;
       c1K2Z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K2Y: // global
           I64[Hp - 16] = sat_s1JBA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.946451993 UTC

[section ""data" . $cmappend_r1JzA_closure" {
     $cmappend_r1JzA_closure:
         const $cmappend_r1JzA_info;
 },
 sat_s1JBM_entry() //  [R1]
         { info_tbl: [(c1K3m,
                       label: sat_s1JBM_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K3m: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1K3n; else goto c1K3o;
       c1K3n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K3o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1K3k_info;
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c1K3k() //  [R1]
         { info_tbl: [(c1K3k,
                       label: block_c1K3k_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K3k: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 $cmappend_r1JzA_entry() //  [R2, R3, R4]
         { info_tbl: [(c1K3s,
                       label: $cmappend_r1JzA_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K3s: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1K3t; else goto c1K3u;
       c1K3t: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $cmappend_r1JzA_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K3u: // global
           I64[Sp - 24] = block_c1K3c_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K3c() //  [R1]
         { info_tbl: [(c1K3c,
                       label: block_c1K3c_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K3c: // global
           I64[Sp] = block_c1K3e_info;
           _s1JBH::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JBH::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K3e() //  [R1]
         { info_tbl: [(c1K3e,
                       label: block_c1K3e_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K3e: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1K3y; else goto c1K3x;
       c1K3y: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1K3x: // global
           I64[Hp - 32] = sat_s1JBM_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.957725081 UTC

[section ""data" . GHC.ST.$fMonoidST_$cmappend_closure" {
     GHC.ST.$fMonoidST_$cmappend_closure:
         const GHC.ST.$fMonoidST_$cmappend_info;
 },
 GHC.ST.$fMonoidST_$cmappend_entry() //  [R2, R3, R4]
         { info_tbl: [(c1K40,
                       label: GHC.ST.$fMonoidST_$cmappend_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K40: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $cmappend_r1JzA_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.963333839 UTC

[section ""data" . GHC.ST.$fMonoidST1_closure" {
     GHC.ST.$fMonoidST1_closure:
         const GHC.ST.$fMonoidST1_info;
 },
 $dSemigroup_s1JBQ_entry() //  [R1]
         { info_tbl: [(c1K4f,
                       label: $dSemigroup_s1JBQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K4f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K4g; else goto c1K4h;
       c1K4g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K4h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl_s1JBR_entry() //  [R1]
         { info_tbl: [(c1K4m,
                       label: lvl_s1JBR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K4m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K4n; else goto c1K4o;
       c1K4n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K4o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s1JC4_entry() //  [R1]
         { info_tbl: [(c1K4I,
                       label: sat_s1JC4_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K4I: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1K4J; else goto c1K4K;
       c1K4J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K4K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 go_s1JBS_entry() //  [R1, R2]
         { info_tbl: [(c1K4P,
                       label: go_s1JBS_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K4P: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1K4Q; else goto c1K4R;
       c1K4Q: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K4R: // global
           I64[Sp - 32] = block_c1K4u_info;
           _s1JBS::P64 = R1;
           _s1JBQ::P64 = P64[R1 + 6];
           _s1JBR::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s1JBQ::P64;
           P64[Sp - 16] = _s1JBR::P64;
           P64[Sp - 8] = _s1JBS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1K4Z; else goto c1K4v;
       u1K4Z: // global
           call _c1K4u(R1) args: 0, res: 0, upd: 0;
       c1K4v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K4u() //  [R1]
         { info_tbl: [(c1K4u,
                       label: block_c1K4u_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K4u: // global
           if (R1 & 7 == 1) goto c1K4M; else goto c1K4N;
       c1K4M: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1K4N: // global
           I64[Sp] = block_c1K4A_info;
           _s1JBX::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _s1JBX::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K4A() //  [R1]
         { info_tbl: [(c1K4A,
                       label: block_c1K4A_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K4A: // global
           I64[Sp] = block_c1K4C_info;
           R2 = P64[Sp + 16];
           _s1JC0::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s1JC0::P64;
           call go_s1JBS_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K4C() //  [R1]
         { info_tbl: [(c1K4C,
                       label: block_c1K4C_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K4C: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1K4Y; else goto c1K4X;
       c1K4Y: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1K4X: // global
           I64[Hp - 32] = sat_s1JC4_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$fMonoidST1_entry() //  [R2, R3]
         { info_tbl: [(c1K50,
                       label: GHC.ST.$fMonoidST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K50: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1K54; else goto c1K53;
       c1K54: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K53: // global
           I64[Hp - 64] = $dSemigroup_s1JBQ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl_s1JBR_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s1JBS_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 14;
           call go_s1JBS_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.982717691 UTC

[section ""data" . GHC.ST.$fMonoidST_closure" {
     GHC.ST.$fMonoidST_closure:
         const GHC.ST.$fMonoidST_info;
         const 0;
 },
 sat_s1JCb_entry() //  [R1, R2]
         { info_tbl: [(c1K5S,
                       label: sat_s1JCb_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K5S: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fMonoidST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JCa_entry() //  [R1, R2, R3]
         { info_tbl: [(c1K60,
                       label: sat_s1JCa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K60: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fMonoidST_$cmappend_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JC8_entry() //  [R1]
         { info_tbl: [(c1K6c,
                       label: sat_s1JC8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K6c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K6d; else goto c1K6e;
       c1K6d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K6e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s1JC9_entry() //  [R1]
         { info_tbl: [(c1K6f,
                       label: sat_s1JC9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K6f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K6j; else goto c1K6i;
       c1K6j: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1K6i: // global
           _s1JC5::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s1JC8_info;
           P64[Hp] = _s1JC5::P64;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1JC6_entry() //  [R1]
         { info_tbl: [(c1K6o,
                       label: sat_s1JC6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K6o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K6p; else goto c1K6q;
       c1K6p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K6q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fMonoidST_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fMonoidST_entry() //  [R2]
         { info_tbl: [(c1K6s,
                       label: GHC.ST.$fMonoidST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K6s: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1K6w; else goto c1K6v;
       c1K6w: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K6v: // global
           I64[Hp - 104] = sat_s1JCb_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1JCa_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1JC9_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1JC6_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 71;
           P64[Hp - 8] = Hp - 85;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.99611328 UTC

[section ""cstring" . GHC.ST.$fShowST4_bytes" {
     GHC.ST.$fShowST4_bytes:
         I8[] [60,60,83,84,32,97,99,116,105,111,110,62,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:30.998169578 UTC

[section ""data" . GHC.ST.$fShowST3_closure" {
     GHC.ST.$fShowST3_closure:
         const GHC.ST.$fShowST3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ST.$fShowST3_entry() //  [R1]
         { info_tbl: [(c1K75,
                       label: GHC.ST.$fShowST3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K75: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K76; else goto c1K77;
       c1K76: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K77: // global
           (_c1K72::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1K72::I64 == 0) goto c1K74; else goto c1K73;
       c1K74: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1K73: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1K72::I64;
           R2 = GHC.ST.$fShowST4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.002682741 UTC

[section ""data" . GHC.ST.$fShowST2_closure" {
     GHC.ST.$fShowST2_closure:
         const GHC.ST.$fShowST2_info;
         const 0;
 },
 GHC.ST.$fShowST2_entry() //  [R2]
         { info_tbl: [(c1K7j,
                       label: GHC.ST.$fShowST2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K7j: // global
           R3 = R2;
           R2 = GHC.ST.$fShowST3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.006198942 UTC

[section ""data" . GHC.ST.$fShowST_$cshowsPrec_closure" {
     GHC.ST.$fShowST_$cshowsPrec_closure:
         const GHC.ST.$fShowST_$cshowsPrec_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowsPrec_entry() //  [R4]
         { info_tbl: [(c1K7u,
                       label: GHC.ST.$fShowST_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K7u: // global
           R2 = R4;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.009621239 UTC

[section ""data" . GHC.ST.$fShowST_$cshow_closure" {
     GHC.ST.$fShowST_$cshow_closure:
         const GHC.ST.$fShowST_$cshow_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshow_entry() //  []
         { info_tbl: [(c1K7F,
                       label: GHC.ST.$fShowST_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K7F: // global
           R1 = GHC.ST.$fShowST3_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.01285737 UTC

[section ""data" . GHC.ST.$fShowST1_closure" {
     GHC.ST.$fShowST1_closure:
         const GHC.ST.$fShowST1_info;
         const 0;
 },
 GHC.ST.$fShowST1_entry() //  [R3]
         { info_tbl: [(c1K7R,
                       label: GHC.ST.$fShowST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K7R: // global
           R2 = R3;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.016323684 UTC

[section ""data" . GHC.ST.$fShowST_$cshowList_closure" {
     GHC.ST.$fShowST_$cshowList_closure:
         const GHC.ST.$fShowST_$cshowList_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c1K82,
                       label: GHC.ST.$fShowST_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K82: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ST.$fShowST1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.020136859 UTC

[section ""data" . GHC.ST.$fShowST_closure" {
     GHC.ST.$fShowST_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ST.$fShowST_$cshowsPrec_closure+3;
         const GHC.ST.$fShowST_$cshow_closure+1;
         const GHC.ST.$fShowST_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.022350752 UTC

[section ""data" . GHC.ST.liftST_closure" {
     GHC.ST.liftST_closure:
         const GHC.ST.liftST_info;
 },
 GHC.ST.liftST_entry() //  [R2]
         { info_tbl: [(c1K8h,
                       label: GHC.ST.liftST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K8h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1K8i; else goto c1K8j;
       c1K8i: // global
           R2 = R2;
           R1 = GHC.ST.liftST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K8j: // global
           I64[Sp - 8] = block_c1K8e_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K8e() //  [R1]
         { info_tbl: [(c1K8e,
                       label: block_c1K8e_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K8e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1K8m; else goto c1K8l;
       c1K8m: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1K8l: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.028411294 UTC

[section ""data" . GHC.ST.fixST1_closure" {
     GHC.ST.fixST1_closure:
         const GHC.ST.fixST1_info;
 },
 ans_s1JCn_entry() //  [R1]
         { info_tbl: [(c1K8I,
                       label: ans_s1JCn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K8I: // global
           _s1JCn::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1K8J; else goto c1K8K;
       c1K8K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K8M; else goto c1K8L;
       c1K8M: // global
           HpAlloc = 24;
           goto c1K8J;
       c1K8J: // global
           R1 = _s1JCn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K8L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1JCn::P64;
           _s1JCl::P64 = P64[_s1JCn::P64 + 16];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1JCn::P64;
           I64[Sp - 24] = block_c1K8F_info;
           R2 = Hp - 16;
           R1 = _s1JCl::P64;
           Sp = Sp - 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c1K8F() //  [R1]
         { info_tbl: [(c1K8F,
                       label: block_c1K8F_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K8F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1K8P; else goto c1K8O;
       c1K8P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1K8O: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.fixST1_entry() //  [R2]
         { info_tbl: [(c1K8T,
                       label: GHC.ST.fixST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K8T: // global
           _s1JCl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c1K8U; else goto c1K8V;
       c1K8V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K8X; else goto c1K8W;
       c1K8X: // global
           HpAlloc = 24;
           goto c1K8U;
       c1K8U: // global
           R2 = _s1JCl::P64;
           R1 = GHC.ST.fixST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K8W: // global
           I64[Hp - 16] = ans_s1JCn_info;
           P64[Hp] = _s1JCl::P64;
           I64[Sp - 8] = block_c1K8Q_info;
           R1 = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1K91; else goto c1K8R;
       u1K91: // global
           call _c1K8Q(R1) args: 0, res: 0, upd: 0;
       c1K8R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1K8Q() //  [R1]
         { info_tbl: [(c1K8Q,
                       label: block_c1K8Q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K8Q: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.038368481 UTC

[section ""data" . GHC.ST.fixST_closure" {
     GHC.ST.fixST_closure:
         const GHC.ST.fixST_info;
 },
 GHC.ST.fixST_entry() //  [R2]
         { info_tbl: [(c1K9o,
                       label: GHC.ST.fixST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K9o: // global
           R2 = R2;
           call GHC.ST.fixST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.042104492 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST1_closure" {
     GHC.ST.unsafeDupableInterleaveST1_closure:
         const GHC.ST.unsafeDupableInterleaveST1_info;
 },
 sat_s1JCD_entry() //  [R1]
         { info_tbl: [(c1K9F,
                       label: sat_s1JCD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K9F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1K9G; else goto c1K9H;
       c1K9G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K9H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1K9D_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c1K9D() //  [R1]
         { info_tbl: [(c1K9D,
                       label: block_c1K9D_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K9D: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.unsafeDupableInterleaveST1_entry() //  [R2]
         { info_tbl: [(c1K9J,
                       label: GHC.ST.unsafeDupableInterleaveST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1K9J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K9N; else goto c1K9M;
       c1K9N: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.unsafeDupableInterleaveST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K9M: // global
           I64[Hp - 16] = sat_s1JCD_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.049369143 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST_closure" {
     GHC.ST.unsafeDupableInterleaveST_closure:
         const GHC.ST.unsafeDupableInterleaveST_info;
 },
 GHC.ST.unsafeDupableInterleaveST_entry() //  [R2]
         { info_tbl: [(c1Ka4,
                       label: GHC.ST.unsafeDupableInterleaveST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Ka4: // global
           R2 = R2;
           call GHC.ST.unsafeDupableInterleaveST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.053916232 UTC

[section ""data" . unsafeInterleaveST1_r1JzB_closure" {
     unsafeInterleaveST1_r1JzB_closure:
         const unsafeInterleaveST1_r1JzB_info;
 },
 sat_s1JCI_entry() //  [R1]
         { info_tbl: [(c1Kam,
                       label: sat_s1JCI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kam: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kan; else goto c1Kao;
       c1Kan: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1Kao: // global
           I64[Sp - 16] = block_c1Kak_info;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c1Kak() //  []
         { info_tbl: [(c1Kak,
                       label: block_c1Kak_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kak: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 unsafeInterleaveST1_r1JzB_entry() //  [R2]
         { info_tbl: [(c1Kaq,
                       label: unsafeInterleaveST1_r1JzB_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kaq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Kau; else goto c1Kat;
       c1Kau: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = unsafeInterleaveST1_r1JzB_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Kat: // global
           I64[Hp - 8] = sat_s1JCI_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           call GHC.ST.unsafeDupableInterleaveST_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.060917979 UTC

[section ""data" . GHC.ST.unsafeInterleaveST_closure" {
     GHC.ST.unsafeInterleaveST_closure:
         const GHC.ST.unsafeInterleaveST_info;
 },
 GHC.ST.unsafeInterleaveST_entry() //  [R2]
         { info_tbl: [(c1KaL,
                       label: GHC.ST.unsafeInterleaveST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KaL: // global
           R2 = R2;
           call unsafeInterleaveST1_r1JzB_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.064548473 UTC

[section ""data" . GHC.ST.runST_closure" {
     GHC.ST.runST_closure:
         const GHC.ST.runST_info;
 },
 GHC.ST.runST_entry() //  [R2]
         { info_tbl: [(c1KaY,
                       label: GHC.ST.runST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KaY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1KaZ; else goto c1Kb0;
       c1KaZ: // global
           R2 = R2;
           R1 = GHC.ST.runST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Kb0: // global
           I64[Sp - 8] = block_c1KaW_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KaW() //  [R1]
         { info_tbl: [(c1KaW,
                       label: block_c1KaW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KaW: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.06982726 UTC

[section ""cstring" . GHC.ST.$trModule4_bytes" {
     GHC.ST.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.071479565 UTC

[section ""data" . GHC.ST.$trModule3_closure" {
     GHC.ST.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.073135559 UTC

[section ""cstring" . GHC.ST.$trModule2_bytes" {
     GHC.ST.$trModule2_bytes:
         I8[] [71,72,67,46,83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.074904881 UTC

[section ""data" . GHC.ST.$trModule1_closure" {
     GHC.ST.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.076581991 UTC

[section ""data" . GHC.ST.$trModule_closure" {
     GHC.ST.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ST.$trModule3_closure+1;
         const GHC.ST.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.078418366 UTC

[section ""data" . $krep_r1JzC_closure" {
     $krep_r1JzC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'LiftedRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.080271568 UTC

[section ""data" . $krep1_r1JzD_closure" {
     $krep1_r1JzD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRuntimeRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.082878474 UTC

[section ""data" . $krep2_r1JzE_closure" {
     $krep2_r1JzE_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.084636393 UTC

[section ""data" . $krep3_r1JzF_closure" {
     $krep3_r1JzF_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.086554787 UTC

[section ""data" . $krep4_r1JzG_closure" {
     $krep4_r1JzG_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.088227481 UTC

[section ""data" . $krep5_r1JzH_closure" {
     $krep5_r1JzH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcState#_closure;
         const $krep4_r1JzG_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.090033447 UTC

[section ""data" . $krep6_r1JzI_closure" {
     $krep6_r1JzI_closure:
         const :_con_info;
         const $krep1_r1JzD_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.091630027 UTC

[section ""data" . $krep7_r1JzJ_closure" {
     $krep7_r1JzJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'[]_closure;
         const $krep6_r1JzI_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.094098719 UTC

[section ""data" . $krep8_r1JzK_closure" {
     $krep8_r1JzK_closure:
         const :_con_info;
         const $krep7_r1JzJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.095794636 UTC

[section ""data" . $krep9_r1JzL_closure" {
     $krep9_r1JzL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'TupleRep_closure;
         const $krep8_r1JzK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.097708351 UTC

[section ""data" . $krep10_r1JzM_closure" {
     $krep10_r1JzM_closure:
         const :_con_info;
         const $krep2_r1JzE_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.09943776 UTC

[section ""data" . $krep11_r1JzN_closure" {
     $krep11_r1JzN_closure:
         const :_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.1009915 UTC

[section ""data" . $krep12_r1JzO_closure" {
     $krep12_r1JzO_closure:
         const :_con_info;
         const $krep_r1JzC_closure+1;
         const $krep11_r1JzN_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.104082571 UTC

[section ""data" . $krep13_r1JzP_closure" {
     $krep13_r1JzP_closure:
         const :_con_info;
         const $krep9_r1JzL_closure+1;
         const $krep12_r1JzO_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.105949648 UTC

[section ""data" . $krep14_r1JzQ_closure" {
     $krep14_r1JzQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc(#,#)_closure;
         const $krep13_r1JzP_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.107710032 UTC

[section ""data" . $krep15_r1JzR_closure" {
     $krep15_r1JzR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep14_r1JzQ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.110014011 UTC

[section ""cstring" . GHC.ST.$tcST2_bytes" {
     GHC.ST.$tcST2_bytes:
         I8[] [83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.111615452 UTC

[section ""data" . GHC.ST.$tcST1_closure" {
     GHC.ST.$tcST1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcST2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.113278392 UTC

[section ""data" . GHC.ST.$tcST_closure" {
     GHC.ST.$tcST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcST1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 6436416558974291297;
         const 634350057185658725;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.115099755 UTC

[section ""data" . $krep16_r1JzS_closure" {
     $krep16_r1JzS_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.116782953 UTC

[section ""data" . $krep17_r1JzT_closure" {
     $krep17_r1JzT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcST_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.118598775 UTC

[section ""data" . GHC.ST.$tc'ST1_closure" {
     GHC.ST.$tc'ST1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep15_r1JzR_closure+4;
         const $krep17_r1JzT_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.120292335 UTC

[section ""cstring" . GHC.ST.$tc'ST3_bytes" {
     GHC.ST.$tc'ST3_bytes:
         I8[] [39,83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.121975759 UTC

[section ""data" . GHC.ST.$tc'ST2_closure" {
     GHC.ST.$tc'ST2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'ST3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.123646168 UTC

[section ""data" . GHC.ST.$tc'ST_closure" {
     GHC.ST.$tc'ST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'ST2_closure+1;
         const GHC.ST.$tc'ST1_closure+4;
         const 13769291328326942007;
         const 10130644975726413154;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.125589759 UTC

[section ""cstring" . GHC.ST.$tcSTret2_bytes" {
     GHC.ST.$tcSTret2_bytes:
         I8[] [83,84,114,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.127233152 UTC

[section ""data" . GHC.ST.$tcSTret1_closure" {
     GHC.ST.$tcSTret1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcSTret2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.128962615 UTC

[section ""data" . GHC.ST.$tcSTret_closure" {
     GHC.ST.$tcSTret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcSTret1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 18266429679521839845;
         const 6736124203785980802;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.130925568 UTC

[section ""data" . $krep18_r1JzU_closure" {
     $krep18_r1JzU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcSTret_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.132597982 UTC

[section ""data" . $krep19_r1JzV_closure" {
     $krep19_r1JzV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1JzE_closure+2;
         const $krep18_r1JzU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.134315353 UTC

[section ""data" . GHC.ST.$tc'STret1_closure" {
     GHC.ST.$tc'STret1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep19_r1JzV_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.136637496 UTC

[section ""cstring" . GHC.ST.$tc'STret3_bytes" {
     GHC.ST.$tc'STret3_bytes:
         I8[] [39,83,84,114,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.138354296 UTC

[section ""data" . GHC.ST.$tc'STret2_closure" {
     GHC.ST.$tc'STret2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'STret3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.139976601 UTC

[section ""data" . GHC.ST.$tc'STret_closure" {
     GHC.ST.$tc'STret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'STret2_closure+1;
         const GHC.ST.$tc'STret1_closure+4;
         const 12272761794237483025;
         const 16570602352537544279;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.14220308 UTC

[section ""data" . GHC.ST.STret_closure" {
     GHC.ST.STret_closure:
         const GHC.ST.STret_info;
 },
 GHC.ST.STret_entry() //  [R2]
         { info_tbl: [(c1KbS,
                       label: GHC.ST.STret_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KbS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KbW; else goto c1KbV;
       c1KbW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ST.STret_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KbV: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.145982105 UTC

[GHC.ST.STret_con_entry() //  [R1]
         { info_tbl: [(c1Kc2,
                       label: GHC.ST.STret_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,84,46,83,84,114,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kc2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.149166601 UTC

[section ""relreadonly" . S1JEM_srt" {
     S1JEM_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ST.$fSemigroupST_$cstimes_closure;
         const GHC.ST.$fSemigroupST_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const GHC.ST.$fMonoidST_$cp1Monoid_closure;
         const GHC.ST.$fMonoidST_closure;
         const GHC.ST.$fShowST3_closure;
         const GHC.ST.$fShowST2_closure;
         const GHC.ST.$fShowST1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.704418755 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:56:31.706172448 UTC

[section ""data" . GHC.ST.$fFunctorST2_closure" {
     GHC.ST.$fFunctorST2_closure:
         const GHC.ST.$fFunctorST2_info;
 },
 GHC.ST.$fFunctorST2_entry() //  [R2, R3]
         { info_tbl: [(c1Kf6,
                       label: GHC.ST.$fFunctorST2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kf6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kf7; else goto c1Kf8;
       c1Kf7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kf8: // global
           I64[Sp - 16] = block_c1Kf3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Kf3() //  [R1]
         { info_tbl: [(c1Kf3,
                       label: block_c1Kf3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kf3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1Kfb; else goto c1Kfa;
       c1Kfb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Kfa: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.712396243 UTC

[section ""data" . GHC.ST.$fFunctorST1_closure" {
     GHC.ST.$fFunctorST1_closure:
         const GHC.ST.$fFunctorST1_info;
 },
 GHC.ST.$fFunctorST1_entry() //  [R2, R3]
         { info_tbl: [(c1Kfu,
                       label: GHC.ST.$fFunctorST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kfu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kfv; else goto c1Kfw;
       c1Kfv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kfw: // global
           I64[Sp - 16] = block_c1Kfs_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Kfs() //  []
         { info_tbl: [(c1Kfs,
                       label: block_c1Kfs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kfs: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.718208785 UTC

[section ""data" . GHC.ST.$fFunctorST_closure" {
     GHC.ST.$fFunctorST_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.ST.$fFunctorST2_closure+3;
         const GHC.ST.$fFunctorST1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.720326429 UTC

[section ""data" . $cpure_r1Jzx_closure" {
     $cpure_r1Jzx_closure:
         const $cpure_r1Jzx_info;
 },
 $cpure_r1Jzx_entry() //  [R2]
         { info_tbl: [(c1KfN,
                       label: $cpure_r1Jzx_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KfN: // global
           R1 = R2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.72405258 UTC

[section ""data" . GHC.ST.$fApplicativeST_$cpure_closure" {
     GHC.ST.$fApplicativeST_$cpure_closure:
         const GHC.ST.$fApplicativeST_$cpure_info;
 },
 GHC.ST.$fApplicativeST_$cpure_entry() //  [R2]
         { info_tbl: [(c1KfZ,
                       label: GHC.ST.$fApplicativeST_$cpure_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KfZ: // global
           R2 = R2;
           call $cpure_r1Jzx_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.728197323 UTC

[section ""data" . $c>>=_r1Jzy_closure" {
     $c>>=_r1Jzy_closure:
         const $c>>=_r1Jzy_info;
 },
 $c>>=_r1Jzy_entry() //  [R2, R3]
         { info_tbl: [(c1Kgc,
                       label: $c>>=_r1Jzy_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kgc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kgd; else goto c1Kge;
       c1Kgd: // global
           R3 = R3;
           R2 = R2;
           R1 = $c>>=_r1Jzy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kge: // global
           I64[Sp - 16] = block_c1Kga_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Kga() //  [R1]
         { info_tbl: [(c1Kga,
                       label: block_c1Kga_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kga: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.734098403 UTC

[section ""data" . GHC.ST.$fMonadST_$c>>=_closure" {
     GHC.ST.$fMonadST_$c>>=_closure:
         const GHC.ST.$fMonadST_$c>>=_info;
 },
 GHC.ST.$fMonadST_$c>>=_entry() //  [R2, R3]
         { info_tbl: [(c1Kgt,
                       label: GHC.ST.$fMonadST_$c>>=_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kgt: // global
           R3 = R3;
           R2 = R2;
           call $c>>=_r1Jzy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.737948947 UTC

[section ""data" . GHC.ST.$fApplicativeST2_closure" {
     GHC.ST.$fApplicativeST2_closure:
         const GHC.ST.$fApplicativeST2_info;
 },
 GHC.ST.$fApplicativeST2_entry() //  [R2, R3, R4]
         { info_tbl: [(c1KgJ,
                       label: GHC.ST.$fApplicativeST2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KgJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1KgK; else goto c1KgL;
       c1KgK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KgL: // global
           I64[Sp - 24] = block_c1KgE_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KgE() //  [R1]
         { info_tbl: [(c1KgE,
                       label: block_c1KgE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KgE: // global
           I64[Sp] = block_c1KgG_info;
           _s1KcA::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1KcA::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KgG() //  [R1]
         { info_tbl: [(c1KgG,
                       label: block_c1KgG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KgG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1KgP; else goto c1KgO;
       c1KgP: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KgO: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.746386983 UTC

[section ""data" . GHC.ST.$fApplicativeST1_closure" {
     GHC.ST.$fApplicativeST1_closure:
         const GHC.ST.$fApplicativeST1_info;
 },
 GHC.ST.$fApplicativeST1_entry() //  [R2, R3]
         { info_tbl: [(c1Khf,
                       label: GHC.ST.$fApplicativeST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Khf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Khg; else goto c1Khh;
       c1Khg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Khh: // global
           I64[Sp - 16] = block_c1Khb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Khb() //  [R1]
         { info_tbl: [(c1Khb,
                       label: block_c1Khb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Khb: // global
           I64[Sp] = block_c1Khd_info;
           _s1KcK::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KcK::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Khd() //  []
         { info_tbl: [(c1Khd,
                       label: block_c1Khd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Khd: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.754513159 UTC

[section ""data" . GHC.ST.$fApplicativeST3_closure" {
     GHC.ST.$fApplicativeST3_closure:
         const GHC.ST.$fApplicativeST3_info;
 },
 GHC.ST.$fApplicativeST3_entry() //  [R2, R3]
         { info_tbl: [(c1KhH,
                       label: GHC.ST.$fApplicativeST3_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KhH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KhI; else goto c1KhJ;
       c1KhI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KhJ: // global
           I64[Sp - 16] = block_c1KhC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KhC() //  [R1]
         { info_tbl: [(c1KhC,
                       label: block_c1KhC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KhC: // global
           I64[Sp] = block_c1KhE_info;
           _s1KcT::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KcT::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KhE() //  [R1]
         { info_tbl: [(c1KhE,
                       label: block_c1KhE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KhE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1KhN; else goto c1KhM;
       c1KhN: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KhM: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.762138186 UTC

[section ""data" . $c*>_r1Jzz_closure" {
     $c*>_r1Jzz_closure:
         const $c*>_r1Jzz_info;
 },
 $c*>_r1Jzz_entry() //  [R2, R3]
         { info_tbl: [(c1Kia,
                       label: $c*>_r1Jzz_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kia: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kib; else goto c1Kic;
       c1Kib: // global
           R3 = R3;
           R2 = R2;
           R1 = $c*>_r1Jzz_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kic: // global
           I64[Sp - 16] = block_c1Ki8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Ki8() //  []
         { info_tbl: [(c1Ki8,
                       label: block_c1Ki8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Ki8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.768032736 UTC

[section ""data" . GHC.ST.$fApplicativeST_$c*>_closure" {
     GHC.ST.$fApplicativeST_$c*>_closure:
         const GHC.ST.$fApplicativeST_$c*>_info;
 },
 GHC.ST.$fApplicativeST_$c*>_entry() //  [R2, R3]
         { info_tbl: [(c1Kir,
                       label: GHC.ST.$fApplicativeST_$c*>_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kir: // global
           R3 = R3;
           R2 = R2;
           call $c*>_r1Jzz_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.771608912 UTC

[section ""data" . GHC.ST.$fApplicativeST_closure" {
     GHC.ST.$fApplicativeST_closure:
         const GHC.Base.C:Applicative_con_info;
         const GHC.ST.$fFunctorST_closure+1;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fApplicativeST3_closure+3;
         const GHC.ST.$fApplicativeST2_closure+4;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST1_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.773805125 UTC

[section ""data" . GHC.ST.$fMonadFailST1_closure" {
     GHC.ST.$fMonadFailST1_closure:
         const GHC.ST.$fMonadFailST1_info;
         const 0;
 },
 GHC.ST.$fMonadFailST1_entry() //  [R2]
         { info_tbl: [(c1KiD,
                       label: GHC.ST.$fMonadFailST1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KiD: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.779695584 UTC

[section ""data" . GHC.ST.$fMonadST_closure" {
     GHC.ST.$fMonadST_closure:
         const GHC.Base.C:Monad_con_info;
         const GHC.ST.$fApplicativeST_closure+1;
         const GHC.ST.$fMonadST_$c>>=_closure+3;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.781747671 UTC

[section ""data" . GHC.ST.$fMonadFailST_closure" {
     GHC.ST.$fMonadFailST_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const GHC.ST.$fMonadST_closure+1;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.784578743 UTC

[section ""data" . GHC.ST.$fSemigroupST2_closure" {
     GHC.ST.$fSemigroupST2_closure:
         const GHC.ST.$fSemigroupST2_info;
 },
 sat_s1Kdf_entry() //  [R1]
         { info_tbl: [(c1KiZ,
                       label: sat_s1Kdf_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KiZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1Kj0; else goto c1Kj1;
       c1Kj0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Kj1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 GHC.ST.$fSemigroupST2_entry() //  [R2, R3, R4]
         { info_tbl: [(c1Kj2,
                       label: GHC.ST.$fSemigroupST2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kj2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Kj3; else goto c1Kj4;
       c1Kj3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kj4: // global
           I64[Sp - 24] = block_c1KiR_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KiR() //  [R1]
         { info_tbl: [(c1KiR,
                       label: block_c1KiR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KiR: // global
           I64[Sp] = block_c1KiT_info;
           _s1Kdb::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1Kdb::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KiT() //  [R1]
         { info_tbl: [(c1KiT,
                       label: block_c1KiT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KiT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1Kj8; else goto c1Kj7;
       c1Kj8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Kj7: // global
           I64[Hp - 32] = sat_s1Kdf_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.7978471 UTC

[section ""data" . GHC.ST.$w$csconcat_closure" {
     GHC.ST.$w$csconcat_closure:
         const GHC.ST.$w$csconcat_info;
 },
 sat_s1Kdx_entry() //  [R1]
         { info_tbl: [(c1KjV,
                       label: sat_s1Kdx_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KjV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1KjW; else goto c1KjX;
       c1KjW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1KjX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 go_s1Kdk_entry() //  [R1, R2, R3]
         { info_tbl: [(c1Kk2,
                       label: go_s1Kdk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kk2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1Kk3; else goto c1Kk4;
       c1Kk3: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kk4: // global
           I64[Sp - 32] = block_c1KjH_info;
           _s1Kdk::P64 = R1;
           _s1Kdg::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _s1Kdg::P64;
           P64[Sp - 16] = _s1Kdk::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1Kkc; else goto c1KjI;
       u1Kkc: // global
           call _c1KjH(R1) args: 0, res: 0, upd: 0;
       c1KjI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KjH() //  [R1]
         { info_tbl: [(c1KjH,
                       label: block_c1KjH_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KjH: // global
           _s1Kdl::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1KjZ; else goto c1Kk0;
       c1KjZ: // global
           R1 = _s1Kdl::P64;
           Sp = Sp + 32;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       c1Kk0: // global
           I64[Sp - 8] = block_c1KjN_info;
           _s1Kdp::P64 = P64[R1 + 6];
           _s1Kdq::P64 = P64[R1 + 14];
           R1 = _s1Kdl::P64;
           P64[Sp] = _s1Kdq::P64;
           P64[Sp + 24] = _s1Kdp::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KjN() //  [R1]
         { info_tbl: [(c1KjN,
                       label: block_c1KjN_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KjN: // global
           _s1Kdq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1KjP_info;
           R3 = _s1Kdq::P64;
           R2 = P64[Sp + 32];
           _s1Kdt::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 32] = _s1Kdt::P64;
           Sp = Sp + 8;
           call go_s1Kdk_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KjP() //  [R1]
         { info_tbl: [(c1KjP,
                       label: block_c1KjP_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KjP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1Kkb; else goto c1Kka;
       c1Kkb: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Kka: // global
           I64[Hp - 32] = sat_s1Kdx_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$w$csconcat_entry() //  [R2, R3, R4]
         { info_tbl: [(c1Kkd,
                       label: GHC.ST.$w$csconcat_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kkd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Kkh; else goto c1Kkg;
       c1Kkh: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kkg: // global
           I64[Hp - 8] = go_s1Kdk_info;
           P64[Hp] = R2;
           _s1Kdh::P64 = R3;
           R3 = R4;
           R2 = _s1Kdh::P64;
           R1 = Hp - 5;
           call go_s1Kdk_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.813756505 UTC

[section ""data" . GHC.ST.$fSemigroupST1_closure" {
     GHC.ST.$fSemigroupST1_closure:
         const GHC.ST.$fSemigroupST1_info;
 },
 GHC.ST.$fSemigroupST1_entry() //  [R2, R3]
         { info_tbl: [(c1KkZ,
                       label: GHC.ST.$fSemigroupST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KkZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kl0; else goto c1Kl1;
       c1Kl0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kl1: // global
           I64[Sp - 16] = block_c1KkW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Kl5; else goto c1KkX;
       u1Kl5: // global
           call _c1KkW(R1) args: 0, res: 0, upd: 0;
       c1KkX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KkW() //  [R1]
         { info_tbl: [(c1KkW,
                       label: block_c1KkW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KkW: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ST.$w$csconcat_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.820956609 UTC

[section ""data" . GHC.ST.$fSemigroupST_closure" {
     GHC.ST.$fSemigroupST_closure:
         const GHC.ST.$fSemigroupST_info;
         const 0;
 },
 sat_s1KdH_entry() //  [R1, R2]
         { info_tbl: [(c1Klp,
                       label: sat_s1KdH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Klp: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.ST.$fSemigroupST_$cstimes_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1KdG_entry() //  [R1, R2]
         { info_tbl: [(c1Klx,
                       label: sat_s1KdG_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Klx: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fSemigroupST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1KdF_entry() //  [R1, R2, R3]
         { info_tbl: [(c1KlF,
                       label: sat_s1KdF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KlF: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fSemigroupST2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$fSemigroupST_entry() //  [R2]
         { info_tbl: [(c1KlJ,
                       label: GHC.ST.$fSemigroupST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KlJ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1KlN; else goto c1KlM;
       c1KlN: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KlM: // global
           I64[Hp - 72] = sat_s1KdH_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1KdG_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1KdF_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 37;
           P64[Hp - 8] = Hp - 54;
           P64[Hp] = Hp - 71;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""data" . GHC.ST.$fSemigroupST_$cstimes_closure" {
     GHC.ST.$fSemigroupST_$cstimes_closure:
         const GHC.ST.$fSemigroupST_$cstimes_info;
         const 0;
 },
 sat_s1KdK_entry() //  [R1]
         { info_tbl: [(c1KlW,
                       label: sat_s1KdK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KlW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KlX; else goto c1KlY;
       c1KlX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1KlY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fSemigroupST_$cstimes_entry() //  [R2, R3]
         { info_tbl: [(c1KlZ,
                       label: GHC.ST.$fSemigroupST_$cstimes_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KlZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Km3; else goto c1Km2;
       c1Km3: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Km2: // global
           I64[Hp - 16] = sat_s1KdK_info;
           P64[Hp] = R2;
           _s1KdJ::P64 = R3;
           R3 = Hp - 16;
           R2 = _s1KdJ::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.836152146 UTC

[section ""data" . GHC.ST.$fMonoidST_$cp1Monoid_closure" {
     GHC.ST.$fMonoidST_$cp1Monoid_closure:
         const GHC.ST.$fMonoidST_$cp1Monoid_info;
         const 0;
 },
 sat_s1KdM_entry() //  [R1]
         { info_tbl: [(c1KmH,
                       label: sat_s1KdM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KmH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KmI; else goto c1KmJ;
       c1KmI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1KmJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fMonoidST_$cp1Monoid_entry() //  [R2]
         { info_tbl: [(c1KmK,
                       label: GHC.ST.$fMonoidST_$cp1Monoid_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KmK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1KmO; else goto c1KmN;
       c1KmO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KmN: // global
           I64[Hp - 16] = sat_s1KdM_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.843271832 UTC

[section ""data" . $cmappend_r1JzA_closure" {
     $cmappend_r1JzA_closure:
         const $cmappend_r1JzA_info;
 },
 sat_s1KdY_entry() //  [R1]
         { info_tbl: [(c1Knd,
                       label: sat_s1KdY_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Knd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1Kne; else goto c1Knf;
       c1Kne: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Knf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1Knb_info;
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c1Knb() //  [R1]
         { info_tbl: [(c1Knb,
                       label: block_c1Knb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Knb: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 $cmappend_r1JzA_entry() //  [R2, R3, R4]
         { info_tbl: [(c1Knj,
                       label: $cmappend_r1JzA_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Knj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Knk; else goto c1Knl;
       c1Knk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $cmappend_r1JzA_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Knl: // global
           I64[Sp - 24] = block_c1Kn3_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Kn3() //  [R1]
         { info_tbl: [(c1Kn3,
                       label: block_c1Kn3_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kn3: // global
           I64[Sp] = block_c1Kn5_info;
           _s1KdT::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1KdT::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Kn5() //  [R1]
         { info_tbl: [(c1Kn5,
                       label: block_c1Kn5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kn5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1Knp; else goto c1Kno;
       c1Knp: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Kno: // global
           I64[Hp - 32] = sat_s1KdY_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.855621664 UTC

[section ""data" . GHC.ST.$fMonoidST_$cmappend_closure" {
     GHC.ST.$fMonoidST_$cmappend_closure:
         const GHC.ST.$fMonoidST_$cmappend_info;
 },
 GHC.ST.$fMonoidST_$cmappend_entry() //  [R2, R3, R4]
         { info_tbl: [(c1KnX,
                       label: GHC.ST.$fMonoidST_$cmappend_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KnX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $cmappend_r1JzA_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.860131804 UTC

[section ""data" . GHC.ST.$fMonoidST1_closure" {
     GHC.ST.$fMonoidST1_closure:
         const GHC.ST.$fMonoidST1_info;
 },
 $dSemigroup_s1Ke2_entry() //  [R1]
         { info_tbl: [(c1Koc,
                       label: $dSemigroup_s1Ke2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Koc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kod; else goto c1Koe;
       c1Kod: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Koe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 lvl_s1Ke3_entry() //  [R1]
         { info_tbl: [(c1Koj,
                       label: lvl_s1Ke3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Koj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kok; else goto c1Kol;
       c1Kok: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Kol: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s1Keg_entry() //  [R1]
         { info_tbl: [(c1KoF,
                       label: sat_s1Keg_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KoF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1KoG; else goto c1KoH;
       c1KoG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1KoH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 go_s1Ke4_entry() //  [R1, R2]
         { info_tbl: [(c1KoM,
                       label: go_s1Ke4_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KoM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1KoN; else goto c1KoO;
       c1KoN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KoO: // global
           I64[Sp - 32] = block_c1Kor_info;
           _s1Ke4::P64 = R1;
           _s1Ke2::P64 = P64[R1 + 6];
           _s1Ke3::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s1Ke2::P64;
           P64[Sp - 16] = _s1Ke3::P64;
           P64[Sp - 8] = _s1Ke4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1KoW; else goto c1Kos;
       u1KoW: // global
           call _c1Kor(R1) args: 0, res: 0, upd: 0;
       c1Kos: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Kor() //  [R1]
         { info_tbl: [(c1Kor,
                       label: block_c1Kor_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kor: // global
           if (R1 & 7 == 1) goto c1KoJ; else goto c1KoK;
       c1KoJ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1KoK: // global
           I64[Sp] = block_c1Kox_info;
           _s1Ke9::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _s1Ke9::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Kox() //  [R1]
         { info_tbl: [(c1Kox,
                       label: block_c1Kox_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kox: // global
           I64[Sp] = block_c1Koz_info;
           R2 = P64[Sp + 16];
           _s1Kec::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s1Kec::P64;
           call go_s1Ke4_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Koz() //  [R1]
         { info_tbl: [(c1Koz,
                       label: block_c1Koz_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Koz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1KoV; else goto c1KoU;
       c1KoV: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KoU: // global
           I64[Hp - 32] = sat_s1Keg_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ST.$fMonoidST1_entry() //  [R2, R3]
         { info_tbl: [(c1KoX,
                       label: GHC.ST.$fMonoidST1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KoX: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1Kp1; else goto c1Kp0;
       c1Kp1: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kp0: // global
           I64[Hp - 64] = $dSemigroup_s1Ke2_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl_s1Ke3_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s1Ke4_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 14;
           call go_s1Ke4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.880175288 UTC

[section ""data" . GHC.ST.$fMonoidST_closure" {
     GHC.ST.$fMonoidST_closure:
         const GHC.ST.$fMonoidST_info;
         const 0;
 },
 sat_s1Ken_entry() //  [R1, R2]
         { info_tbl: [(c1Kq0,
                       label: sat_s1Ken_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kq0: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fMonoidST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1Kem_entry() //  [R1, R2, R3]
         { info_tbl: [(c1Kq8,
                       label: sat_s1Kem_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kq8: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fMonoidST_$cmappend_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1Kek_entry() //  [R1]
         { info_tbl: [(c1Kqk,
                       label: sat_s1Kek_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kqk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kql; else goto c1Kqm;
       c1Kql: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Kqm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s1Kel_entry() //  [R1]
         { info_tbl: [(c1Kqn,
                       label: sat_s1Kel_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kqn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Kqr; else goto c1Kqq;
       c1Kqr: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1Kqq: // global
           _s1Keh::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s1Kek_info;
           P64[Hp] = _s1Keh::P64;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1Kei_entry() //  [R1]
         { info_tbl: [(c1Kqw,
                       label: sat_s1Kei_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kqw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kqx; else goto c1Kqy;
       c1Kqx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Kqy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fMonoidST_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.$fMonoidST_entry() //  [R2]
         { info_tbl: [(c1KqA,
                       label: GHC.ST.$fMonoidST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KqA: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1KqE; else goto c1KqD;
       c1KqE: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KqD: // global
           I64[Hp - 104] = sat_s1Ken_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1Kem_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1Kel_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1Kei_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 71;
           P64[Hp - 8] = Hp - 85;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.893735676 UTC

[section ""cstring" . GHC.ST.$fShowST4_bytes" {
     GHC.ST.$fShowST4_bytes:
         I8[] [60,60,83,84,32,97,99,116,105,111,110,62,62]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.895709654 UTC

[section ""data" . GHC.ST.$fShowST3_closure" {
     GHC.ST.$fShowST3_closure:
         const GHC.ST.$fShowST3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ST.$fShowST3_entry() //  [R1]
         { info_tbl: [(c1Krl,
                       label: GHC.ST.$fShowST3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Krl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Krm; else goto c1Krn;
       c1Krm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Krn: // global
           (_c1Kri::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1Kri::I64 == 0) goto c1Krk; else goto c1Krj;
       c1Krk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1Krj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1Kri::I64;
           R2 = GHC.ST.$fShowST4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.899981237 UTC

[section ""data" . GHC.ST.$fShowST2_closure" {
     GHC.ST.$fShowST2_closure:
         const GHC.ST.$fShowST2_info;
         const 0;
 },
 GHC.ST.$fShowST2_entry() //  [R2]
         { info_tbl: [(c1KrA,
                       label: GHC.ST.$fShowST2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KrA: // global
           R3 = R2;
           R2 = GHC.ST.$fShowST3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.904177957 UTC

[section ""data" . GHC.ST.$fShowST_$cshowsPrec_closure" {
     GHC.ST.$fShowST_$cshowsPrec_closure:
         const GHC.ST.$fShowST_$cshowsPrec_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowsPrec_entry() //  [R4]
         { info_tbl: [(c1KrL,
                       label: GHC.ST.$fShowST_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KrL: // global
           R2 = R4;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.907623221 UTC

[section ""data" . GHC.ST.$fShowST_$cshow_closure" {
     GHC.ST.$fShowST_$cshow_closure:
         const GHC.ST.$fShowST_$cshow_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshow_entry() //  []
         { info_tbl: [(c1KrW,
                       label: GHC.ST.$fShowST_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KrW: // global
           R1 = GHC.ST.$fShowST3_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.91103195 UTC

[section ""data" . GHC.ST.$fShowST1_closure" {
     GHC.ST.$fShowST1_closure:
         const GHC.ST.$fShowST1_info;
         const 0;
 },
 GHC.ST.$fShowST1_entry() //  [R3]
         { info_tbl: [(c1Ks8,
                       label: GHC.ST.$fShowST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Ks8: // global
           R2 = R3;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.915125481 UTC

[section ""data" . GHC.ST.$fShowST_$cshowList_closure" {
     GHC.ST.$fShowST_$cshowList_closure:
         const GHC.ST.$fShowST_$cshowList_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c1Ksj,
                       label: GHC.ST.$fShowST_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Ksj: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ST.$fShowST1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.918535047 UTC

[section ""data" . GHC.ST.$fShowST_closure" {
     GHC.ST.$fShowST_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ST.$fShowST_$cshowsPrec_closure+3;
         const GHC.ST.$fShowST_$cshow_closure+1;
         const GHC.ST.$fShowST_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.920670382 UTC

[section ""data" . GHC.ST.liftST_closure" {
     GHC.ST.liftST_closure:
         const GHC.ST.liftST_info;
 },
 GHC.ST.liftST_entry() //  [R2]
         { info_tbl: [(c1Ksy,
                       label: GHC.ST.liftST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Ksy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Ksz; else goto c1KsA;
       c1Ksz: // global
           R2 = R2;
           R1 = GHC.ST.liftST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KsA: // global
           I64[Sp - 8] = block_c1Ksv_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Ksv() //  [R1]
         { info_tbl: [(c1Ksv,
                       label: block_c1Ksv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Ksv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KsD; else goto c1KsC;
       c1KsD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KsC: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.927605796 UTC

[section ""data" . GHC.ST.fixST1_closure" {
     GHC.ST.fixST1_closure:
         const GHC.ST.fixST1_info;
 },
 ans_s1Kez_entry() //  [R1]
         { info_tbl: [(c1Kt1,
                       label: ans_s1Kez_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kt1: // global
           _s1Kez::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1Kt2; else goto c1Kt3;
       c1Kt3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Kt5; else goto c1Kt4;
       c1Kt5: // global
           HpAlloc = 24;
           goto c1Kt2;
       c1Kt2: // global
           R1 = _s1Kez::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Kt4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1Kez::P64;
           _s1Kex::P64 = P64[_s1Kez::P64 + 16];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1Kez::P64;
           I64[Sp - 24] = block_c1KsY_info;
           R2 = Hp - 16;
           R1 = _s1Kex::P64;
           Sp = Sp - 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 _c1KsY() //  [R1]
         { info_tbl: [(c1KsY,
                       label: block_c1KsY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KsY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Kt8; else goto c1Kt7;
       c1Kt8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1Kt7: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.fixST1_entry() //  [R2]
         { info_tbl: [(c1Ktc,
                       label: GHC.ST.fixST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Ktc: // global
           _s1Kex::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c1Ktd; else goto c1Kte;
       c1Kte: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Ktg; else goto c1Ktf;
       c1Ktg: // global
           HpAlloc = 24;
           goto c1Ktd;
       c1Ktd: // global
           R2 = _s1Kex::P64;
           R1 = GHC.ST.fixST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Ktf: // global
           I64[Hp - 16] = ans_s1Kez_info;
           P64[Hp] = _s1Kex::P64;
           I64[Sp - 8] = block_c1Kt9_info;
           R1 = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Ktk; else goto c1Kta;
       u1Ktk: // global
           call _c1Kt9(R1) args: 0, res: 0, upd: 0;
       c1Kta: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Kt9() //  [R1]
         { info_tbl: [(c1Kt9,
                       label: block_c1Kt9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kt9: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.938528625 UTC

[section ""data" . GHC.ST.fixST_closure" {
     GHC.ST.fixST_closure:
         const GHC.ST.fixST_info;
 },
 GHC.ST.fixST_entry() //  [R2]
         { info_tbl: [(c1KtN,
                       label: GHC.ST.fixST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KtN: // global
           R2 = R2;
           call GHC.ST.fixST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.942297179 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST1_closure" {
     GHC.ST.unsafeDupableInterleaveST1_closure:
         const GHC.ST.unsafeDupableInterleaveST1_info;
 },
 sat_s1KeP_entry() //  [R1]
         { info_tbl: [(c1Ku4,
                       label: sat_s1KeP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Ku4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Ku5; else goto c1Ku6;
       c1Ku5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Ku6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1Ku2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c1Ku2() //  [R1]
         { info_tbl: [(c1Ku2,
                       label: block_c1Ku2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Ku2: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ST.unsafeDupableInterleaveST1_entry() //  [R2]
         { info_tbl: [(c1Ku8,
                       label: GHC.ST.unsafeDupableInterleaveST1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Ku8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Kuc; else goto c1Kub;
       c1Kuc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.unsafeDupableInterleaveST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Kub: // global
           I64[Hp - 16] = sat_s1KeP_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.950262146 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST_closure" {
     GHC.ST.unsafeDupableInterleaveST_closure:
         const GHC.ST.unsafeDupableInterleaveST_info;
 },
 GHC.ST.unsafeDupableInterleaveST_entry() //  [R2]
         { info_tbl: [(c1Kuw,
                       label: GHC.ST.unsafeDupableInterleaveST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kuw: // global
           R2 = R2;
           call GHC.ST.unsafeDupableInterleaveST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.953934844 UTC

[section ""data" . unsafeInterleaveST1_r1JzB_closure" {
     unsafeInterleaveST1_r1JzB_closure:
         const unsafeInterleaveST1_r1JzB_info;
 },
 sat_s1KeU_entry() //  [R1]
         { info_tbl: [(c1KuO,
                       label: sat_s1KeU_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KuO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KuP; else goto c1KuQ;
       c1KuP: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1KuQ: // global
           I64[Sp - 16] = block_c1KuM_info;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c1KuM() //  []
         { info_tbl: [(c1KuM,
                       label: block_c1KuM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KuM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 unsafeInterleaveST1_r1JzB_entry() //  [R2]
         { info_tbl: [(c1KuS,
                       label: unsafeInterleaveST1_r1JzB_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KuS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KuW; else goto c1KuV;
       c1KuW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = unsafeInterleaveST1_r1JzB_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KuV: // global
           I64[Hp - 8] = sat_s1KeU_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           call GHC.ST.unsafeDupableInterleaveST_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.961337423 UTC

[section ""data" . GHC.ST.unsafeInterleaveST_closure" {
     GHC.ST.unsafeInterleaveST_closure:
         const GHC.ST.unsafeInterleaveST_info;
 },
 GHC.ST.unsafeInterleaveST_entry() //  [R2]
         { info_tbl: [(c1Kvf,
                       label: GHC.ST.unsafeInterleaveST_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kvf: // global
           R2 = R2;
           call unsafeInterleaveST1_r1JzB_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.965153466 UTC

[section ""data" . GHC.ST.runST_closure" {
     GHC.ST.runST_closure:
         const GHC.ST.runST_info;
 },
 GHC.ST.runST_entry() //  [R2]
         { info_tbl: [(c1Kvs,
                       label: GHC.ST.runST_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kvs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Kvt; else goto c1Kvu;
       c1Kvt: // global
           R2 = R2;
           R1 = GHC.ST.runST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Kvu: // global
           I64[Sp - 8] = block_c1Kvq_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1Kvq() //  [R1]
         { info_tbl: [(c1Kvq,
                       label: block_c1Kvq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kvq: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.970401145 UTC

[section ""cstring" . GHC.ST.$trModule4_bytes" {
     GHC.ST.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.972119504 UTC

[section ""data" . GHC.ST.$trModule3_closure" {
     GHC.ST.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.974211943 UTC

[section ""cstring" . GHC.ST.$trModule2_bytes" {
     GHC.ST.$trModule2_bytes:
         I8[] [71,72,67,46,83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.975834073 UTC

[section ""data" . GHC.ST.$trModule1_closure" {
     GHC.ST.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.977844083 UTC

[section ""data" . GHC.ST.$trModule_closure" {
     GHC.ST.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ST.$trModule3_closure+1;
         const GHC.ST.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.979578723 UTC

[section ""data" . $krep_r1JzC_closure" {
     $krep_r1JzC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'LiftedRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.981364448 UTC

[section ""data" . $krep1_r1JzD_closure" {
     $krep1_r1JzD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRuntimeRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.983047785 UTC

[section ""data" . $krep2_r1JzE_closure" {
     $krep2_r1JzE_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.985115704 UTC

[section ""data" . $krep3_r1JzF_closure" {
     $krep3_r1JzF_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.986828934 UTC

[section ""data" . $krep4_r1JzG_closure" {
     $krep4_r1JzG_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.988519342 UTC

[section ""data" . $krep5_r1JzH_closure" {
     $krep5_r1JzH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcState#_closure;
         const $krep4_r1JzG_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.990563387 UTC

[section ""data" . $krep6_r1JzI_closure" {
     $krep6_r1JzI_closure:
         const :_con_info;
         const $krep1_r1JzD_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.992262736 UTC

[section ""data" . $krep7_r1JzJ_closure" {
     $krep7_r1JzJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'[]_closure;
         const $krep6_r1JzI_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.994053185 UTC

[section ""data" . $krep8_r1JzK_closure" {
     $krep8_r1JzK_closure:
         const :_con_info;
         const $krep7_r1JzJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.996074891 UTC

[section ""data" . $krep9_r1JzL_closure" {
     $krep9_r1JzL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'TupleRep_closure;
         const $krep8_r1JzK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.998064925 UTC

[section ""data" . $krep10_r1JzM_closure" {
     $krep10_r1JzM_closure:
         const :_con_info;
         const $krep2_r1JzE_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:31.999770113 UTC

[section ""data" . $krep11_r1JzN_closure" {
     $krep11_r1JzN_closure:
         const :_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.001460727 UTC

[section ""data" . $krep12_r1JzO_closure" {
     $krep12_r1JzO_closure:
         const :_con_info;
         const $krep_r1JzC_closure+1;
         const $krep11_r1JzN_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.003083086 UTC

[section ""data" . $krep13_r1JzP_closure" {
     $krep13_r1JzP_closure:
         const :_con_info;
         const $krep9_r1JzL_closure+1;
         const $krep12_r1JzO_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.004773588 UTC

[section ""data" . $krep14_r1JzQ_closure" {
     $krep14_r1JzQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc(#,#)_closure;
         const $krep13_r1JzP_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.006841401 UTC

[section ""data" . $krep15_r1JzR_closure" {
     $krep15_r1JzR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep14_r1JzQ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.008550221 UTC

[section ""cstring" . GHC.ST.$tcST2_bytes" {
     GHC.ST.$tcST2_bytes:
         I8[] [83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.010504774 UTC

[section ""data" . GHC.ST.$tcST1_closure" {
     GHC.ST.$tcST1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcST2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.012173193 UTC

[section ""data" . GHC.ST.$tcST_closure" {
     GHC.ST.$tcST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcST1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 6436416558974291297;
         const 634350057185658725;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.014210282 UTC

[section ""data" . $krep16_r1JzS_closure" {
     $krep16_r1JzS_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.015896262 UTC

[section ""data" . $krep17_r1JzT_closure" {
     $krep17_r1JzT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcST_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.018057736 UTC

[section ""data" . GHC.ST.$tc'ST1_closure" {
     GHC.ST.$tc'ST1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep15_r1JzR_closure+4;
         const $krep17_r1JzT_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.019746456 UTC

[section ""cstring" . GHC.ST.$tc'ST3_bytes" {
     GHC.ST.$tc'ST3_bytes:
         I8[] [39,83,84]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.021518271 UTC

[section ""data" . GHC.ST.$tc'ST2_closure" {
     GHC.ST.$tc'ST2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'ST3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.023238427 UTC

[section ""data" . GHC.ST.$tc'ST_closure" {
     GHC.ST.$tc'ST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'ST2_closure+1;
         const GHC.ST.$tc'ST1_closure+4;
         const 13769291328326942007;
         const 10130644975726413154;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.025046317 UTC

[section ""cstring" . GHC.ST.$tcSTret2_bytes" {
     GHC.ST.$tcSTret2_bytes:
         I8[] [83,84,114,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.027272179 UTC

[section ""data" . GHC.ST.$tcSTret1_closure" {
     GHC.ST.$tcSTret1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcSTret2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.029355148 UTC

[section ""data" . GHC.ST.$tcSTret_closure" {
     GHC.ST.$tcSTret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcSTret1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 18266429679521839845;
         const 6736124203785980802;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.031180097 UTC

[section ""data" . $krep18_r1JzU_closure" {
     $krep18_r1JzU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcSTret_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.032926812 UTC

[section ""data" . $krep19_r1JzV_closure" {
     $krep19_r1JzV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1JzE_closure+2;
         const $krep18_r1JzU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.034730264 UTC

[section ""data" . GHC.ST.$tc'STret1_closure" {
     GHC.ST.$tc'STret1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep19_r1JzV_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.036450065 UTC

[section ""cstring" . GHC.ST.$tc'STret3_bytes" {
     GHC.ST.$tc'STret3_bytes:
         I8[] [39,83,84,114,101,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.038844061 UTC

[section ""data" . GHC.ST.$tc'STret2_closure" {
     GHC.ST.$tc'STret2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'STret3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.040449486 UTC

[section ""data" . GHC.ST.$tc'STret_closure" {
     GHC.ST.$tc'STret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'STret2_closure+1;
         const GHC.ST.$tc'STret1_closure+4;
         const 12272761794237483025;
         const 16570602352537544279;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.042709485 UTC

[section ""data" . GHC.ST.STret_closure" {
     GHC.ST.STret_closure:
         const GHC.ST.STret_info;
 },
 GHC.ST.STret_entry() //  [R2]
         { info_tbl: [(c1Kwn,
                       label: GHC.ST.STret_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kwn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Kwr; else goto c1Kwq;
       c1Kwr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ST.STret_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Kwq: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.047105048 UTC

[GHC.ST.STret_con_entry() //  [R1]
         { info_tbl: [(c1Kwy,
                       label: GHC.ST.STret_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,84,46,83,84,114,101,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1Kwy: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.050856332 UTC

[section ""relreadonly" . S1KiG_srt" {
     S1KiG_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ST.$fSemigroupST_$cstimes_closure;
         const GHC.ST.$fSemigroupST_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const GHC.ST.$fMonoidST_$cp1Monoid_closure;
         const GHC.ST.$fMonoidST_closure;
         const GHC.ST.$fShowST3_closure;
         const GHC.ST.$fShowST2_closure;
         const GHC.ST.$fShowST1_closure;
 }]

