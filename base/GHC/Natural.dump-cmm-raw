
==================== Raw Cmm ====================
2018-03-16 15:59:04.181924779 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:04.183352115 UTC

[section ""data" . GHC.Natural.$fNumNatural_$cabs_closure" {
     GHC.Natural.$fNumNatural_$cabs_closure:
         const GHC.Natural.$fNumNatural_$cabs_info;
 },
 GHC.Natural.$fNumNatural_$cabs_entry() //  [R2]
         { []
         }
     {offset
       c4c3e: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$cabs_info" {
     GHC.Natural.$fNumNatural_$cabs_info:
         const GHC.Natural.$fNumNatural_$cabs_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.186879126 UTC

[section ""data" . GHC.Natural.$fRealNatural_$ctoRational_closure" {
     GHC.Natural.$fRealNatural_$ctoRational_closure:
         const GHC.Natural.$fRealNatural_$ctoRational_info;
         const 0;
 },
 GHC.Natural.$fRealNatural_$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c4c3r: // global
           R2 = R2;
           call GHC.Real.$fFractionalRatio_$s$cfromInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fRealNatural_$ctoRational_info" {
     GHC.Natural.$fRealNatural_$ctoRational_info:
         const GHC.Natural.$fRealNatural_$ctoRational_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S4byh_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.190180946 UTC

[section ""data" . GHC.Natural.$fEnumNatural_$cfromEnum_closure" {
     GHC.Natural.$fEnumNatural_$cfromEnum_closure:
         const GHC.Natural.$fEnumNatural_$cfromEnum_info;
 },
 GHC.Natural.$fEnumNatural_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c4c3C: // global
           R2 = R2;
           call GHC.Enum.$fEnumInteger_$cfromEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fEnumNatural_$cfromEnum_info" {
     GHC.Natural.$fEnumNatural_$cfromEnum_info:
         const GHC.Natural.$fEnumNatural_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.193113499 UTC

[section ""cstring" . lvl_r4bvC_bytes" {
     lvl_r4bvC_bytes:
         I8[] [78,97,116,117,114,97,108,46,116,111,69,110,117,109,58,32,110,101,103,97,116,105,118,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.195539422 UTC

[section ""data" . lvl1_r4bvD_closure" {
     lvl1_r4bvD_closure:
         const lvl1_r4bvD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r4bvD_entry() //  [R1]
         { []
         }
     {offset
       c4c3S: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4c3T; else goto c4c3U;
       c4c3T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4c3U: // global
           (_c4c3N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4c3N::I64 == 0) goto c4c3P; else goto c4c3O;
       c4c3P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4c3O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4c3N::I64;
           I64[Sp - 24] = block_c4c3Q_info;
           R2 = lvl_r4bvC_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r4bvD_info" {
     lvl1_r4bvD_info:
         const lvl1_r4bvD_entry;
         const 0;
         const 4294967317;
         const S4byh_srt+8;
 },
 _c4c3Q() //  [R1]
         { []
         }
     {offset
       c4c3Q: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4c3Q_info" {
     block_c4c3Q_info:
         const _c4c3Q;
         const 0;
         const 4294967326;
         const S4byh_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.201529862 UTC

[section ""data" . GHC.Natural.$fEnumNatural_$ctoEnum_closure" {
     GHC.Natural.$fEnumNatural_$ctoEnum_closure:
         const GHC.Natural.$fEnumNatural_$ctoEnum_info;
         const 0;
 },
 GHC.Natural.$fEnumNatural_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c4c4f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4c4g; else goto c4c4h;
       c4c4g: // global
           R2 = R2;
           R1 = GHC.Natural.$fEnumNatural_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4c4h: // global
           I64[Sp - 8] = block_c4c4c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4c4q; else goto c4c4d;
       u4c4q: // global
           call _c4c4c(R1) args: 0, res: 0, upd: 0;
       c4c4d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fEnumNatural_$ctoEnum_info" {
     GHC.Natural.$fEnumNatural_$ctoEnum_info:
         const GHC.Natural.$fEnumNatural_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4byh_srt+16;
 },
 _c4c4c() //  [R1]
         { []
         }
     {offset
       c4c4c: // global
           _s4bvR::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s4bvR::I64, 0)) goto c4c4o; else goto c4c4p;
       c4c4o: // global
           R2 = _s4bvR::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 0, upd: 8;
       c4c4p: // global
           R1 = lvl1_r4bvD_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4c4c_info" {
     block_c4c4c_info:
         const _c4c4c;
         const 0;
         const 4294967326;
         const S4byh_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.208435983 UTC

[section ""data" . GHC.Natural.$fBitsNatural1_closure" {
     GHC.Natural.$fBitsNatural1_closure:
         const GHC.Natural.$fBitsNatural1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.$fBitsNatural1_entry() //  [R1]
         { []
         }
     {offset
       c4c4H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4c4I; else goto c4c4J;
       c4c4I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4c4J: // global
           (_c4c4E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4c4E::I64 == 0) goto c4c4G; else goto c4c4F;
       c4c4G: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4c4F: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4c4E::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural1_info" {
     GHC.Natural.$fBitsNatural1_info:
         const GHC.Natural.$fBitsNatural1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.211909661 UTC

[section ""cstring" . lvl2_r4bvE_bytes" {
     lvl2_r4bvE_bytes:
         I8[] [78,97,116,117,114,97,108,46,112,114,101,100,58,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.214331096 UTC

[section ""data" . lvl3_r4bvF_closure" {
     lvl3_r4bvF_closure:
         const lvl3_r4bvF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r4bvF_entry() //  [R1]
         { []
         }
     {offset
       c4c50: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4c51; else goto c4c52;
       c4c51: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4c52: // global
           (_c4c4V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4c4V::I64 == 0) goto c4c4X; else goto c4c4W;
       c4c4X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4c4W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4c4V::I64;
           I64[Sp - 24] = block_c4c4Y_info;
           R2 = lvl2_r4bvE_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r4bvF_info" {
     lvl3_r4bvF_info:
         const lvl3_r4bvF_entry;
         const 0;
         const 4294967317;
         const S4byh_srt+8;
 },
 _c4c4Y() //  [R1]
         { []
         }
     {offset
       c4c4Y: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4c4Y_info" {
     block_c4c4Y_info:
         const _c4c4Y;
         const 0;
         const 4294967326;
         const S4byh_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.219970915 UTC

[section ""data" . GHC.Natural.$fEnumNatural_$cpred_closure" {
     GHC.Natural.$fEnumNatural_$cpred_closure:
         const GHC.Natural.$fEnumNatural_$cpred_info;
         const 0;
 },
 GHC.Natural.$fEnumNatural_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c4c5p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4c5q; else goto c4c5r;
       c4c5q: // global
           R2 = R2;
           R1 = GHC.Natural.$fEnumNatural_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4c5r: // global
           I64[Sp - 16] = block_c4c5k_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           _s4bvU::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s4bvU::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fEnumNatural_$cpred_info" {
     GHC.Natural.$fEnumNatural_$cpred_info:
         const GHC.Natural.$fEnumNatural_$cpred_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S4byh_srt+32;
 },
 _c4c5k() //  [R1]
         { []
         }
     {offset
       c4c5k: // global
           if (R1 == 1) goto c4c5o; else goto c4c5n;
       c4c5o: // global
           R1 = lvl3_r4bvF_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4c5n: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.$fEnumInteger_$cpred_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4c5k_info" {
     block_c4c5k_info:
         const _c4c5k;
         const 1;
         const 38654705694;
         const S4byh_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.225295622 UTC

[section ""data" . GHC.Natural.$fEnumNatural_$csucc_closure" {
     GHC.Natural.$fEnumNatural_$csucc_closure:
         const GHC.Natural.$fEnumNatural_$csucc_info;
         const 0;
 },
 GHC.Natural.$fEnumNatural_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c4c5L: // global
           R2 = R2;
           call GHC.Enum.$fEnumInteger_$csucc_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fEnumNatural_$csucc_info" {
     GHC.Natural.$fEnumNatural_$csucc_info:
         const GHC.Natural.$fEnumNatural_$csucc_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S4byh_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.228532137 UTC

[section ""data" . $ctoInteger_r4bvG_closure" {
     $ctoInteger_r4bvG_closure:
         const $ctoInteger_r4bvG_info;
 },
 $ctoInteger_r4bvG_entry() //  [R2]
         { []
         }
     {offset
       c4c5W: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $ctoInteger_r4bvG_info" {
     $ctoInteger_r4bvG_info:
         const $ctoInteger_r4bvG_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.232797537 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$ctoInteger_closure" {
     GHC.Natural.$fIntegralNatural_$ctoInteger_closure:
         const GHC.Natural.$fIntegralNatural_$ctoInteger_info;
 },
 GHC.Natural.$fIntegralNatural_$ctoInteger_entry() //  [R2]
         { []
         }
     {offset
       c4c69: // global
           R2 = R2;
           call $ctoInteger_r4bvG_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$ctoInteger_info" {
     GHC.Natural.$fIntegralNatural_$ctoInteger_info:
         const GHC.Natural.$fIntegralNatural_$ctoInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.237747657 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$cdivMod_closure" {
     GHC.Natural.$fIntegralNatural_$cdivMod_closure:
         const GHC.Natural.$fIntegralNatural_$cdivMod_info;
         const 0;
 },
 ds2_s4bvZ_entry() //  [R1]
         { []
         }
     {offset
       c4c6t: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c4c6u; else goto c4c6v;
       c4c6u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4c6v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c4c6o_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           _s4bvY::P64 = P64[R1 + 24];
           R2 = _s4bvY::P64;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s4bvY::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s4bvZ_info" {
     ds2_s4bvZ_info:
         const ds2_s4bvZ_entry;
         const 2;
         const 210453397522;
         const S4byh_srt+40;
 },
 _c4c6o() //  [R1]
         { []
         }
     {offset
       c4c6o: // global
           if (R1 == 1) goto c4c6s; else goto c4c6r;
       c4c6s: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c4c6r: // global
           _s4bvY::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c4c6y_info;
           R3 = _s4bvY::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.divModInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c4c6o_info" {
     block_c4c6o_info:
         const _c4c6o;
         const 2;
         const 12884901918;
         const S4byh_srt+72;
 },
 _c4c6y() //  [R1, R2]
         { []
         }
     {offset
       c4c6y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4c6E; else goto c4c6D;
       c4c6E: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c4c6D: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4c6y_info" {
     block_c4c6y_info:
         const _c4c6y;
         const 0;
         const 30;
 },
 GHC.Natural.$fIntegralNatural_$cdivMod_entry() //  [R2, R3]
         { []
         }
     {offset
       c4c6L: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c4c6P; else goto c4c6O;
       c4c6P: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fIntegralNatural_$cdivMod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4c6O: // global
           I64[Hp - 96] = ds2_s4bvZ_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c4c6k::P64 = Hp - 96;
           P64[Hp - 48] = _c4c6k::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c4c6k::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$cdivMod_info" {
     GHC.Natural.$fIntegralNatural_$cdivMod_info:
         const GHC.Natural.$fIntegralNatural_$cdivMod_entry;
         const 0;
         const 485331304462;
         const 8589934607;
         const S4byh_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.248043274 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$cquotRem_closure" {
     GHC.Natural.$fIntegralNatural_$cquotRem_closure:
         const GHC.Natural.$fIntegralNatural_$cquotRem_info;
         const 0;
 },
 ds2_s4bwe_entry() //  [R1]
         { []
         }
     {offset
       c4c7m: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c4c7n; else goto c4c7o;
       c4c7n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4c7o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c4c7h_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           _s4bwd::P64 = P64[R1 + 24];
           R2 = _s4bwd::P64;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s4bwd::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s4bwe_info" {
     ds2_s4bwe_info:
         const ds2_s4bwe_entry;
         const 2;
         const 141733920786;
         const S4byh_srt+40;
 },
 _c4c7h() //  [R1]
         { []
         }
     {offset
       c4c7h: // global
           if (R1 == 1) goto c4c7l; else goto c4c7k;
       c4c7l: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c4c7k: // global
           _s4bwd::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c4c7r_info;
           R3 = _s4bwd::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c4c7h_info" {
     block_c4c7h_info:
         const _c4c7h;
         const 2;
         const 4294967326;
         const S4byh_srt+80;
 },
 _c4c7r() //  [R1, R2]
         { []
         }
     {offset
       c4c7r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4c7x; else goto c4c7w;
       c4c7x: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c4c7w: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4c7r_info" {
     block_c4c7r_info:
         const _c4c7r;
         const 0;
         const 30;
 },
 GHC.Natural.$fIntegralNatural_$cquotRem_entry() //  [R2, R3]
         { []
         }
     {offset
       c4c7E: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c4c7I; else goto c4c7H;
       c4c7I: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fIntegralNatural_$cquotRem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4c7H: // global
           I64[Hp - 96] = ds2_s4bwe_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c4c7d::P64 = Hp - 96;
           P64[Hp - 48] = _c4c7d::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c4c7d::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$cquotRem_info" {
     GHC.Natural.$fIntegralNatural_$cquotRem_info:
         const GHC.Natural.$fIntegralNatural_$cquotRem_entry;
         const 0;
         const 691489734670;
         const 8589934607;
         const S4byh_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.256811597 UTC

[section ""data" . GHC.Natural.$fEqNatural_closure" {
     GHC.Natural.$fEqNatural_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Integer.Type.eqInteger_closure+2;
         const GHC.Integer.Type.neqInteger_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.258653729 UTC

[section ""data" . GHC.Natural.$fOrdNatural_closure" {
     GHC.Natural.$fOrdNatural_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Natural.$fEqNatural_closure+1;
         const GHC.Integer.Type.compareInteger_closure+2;
         const GHC.Integer.Type.ltInteger_closure+2;
         const GHC.Integer.Type.leInteger_closure+2;
         const GHC.Integer.Type.gtInteger_closure+2;
         const GHC.Integer.Type.geInteger_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmax_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.261189124 UTC

[section ""data" . GHC.Natural.underflowError_closure" {
     GHC.Natural.underflowError_closure:
         const GHC.Natural.underflowError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.underflowError_entry() //  [R1]
         { []
         }
     {offset
       c4c8a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4c8b; else goto c4c8c;
       c4c8b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4c8c: // global
           (_c4c87::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4c87::I64 == 0) goto c4c89; else goto c4c88;
       c4c89: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4c88: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4c87::I64;
           R1 = GHC.Exception.underflowException_closure;
           Sp = Sp - 16;
           call stg_raise#(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.underflowError_info" {
     GHC.Natural.underflowError_info:
         const GHC.Natural.underflowError_entry;
         const 0;
         const 4294967317;
         const S4byh_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.270905765 UTC

[section ""data" . GHC.Natural.$fNumNatural_$cnegate_closure" {
     GHC.Natural.$fNumNatural_$cnegate_closure:
         const GHC.Natural.$fNumNatural_$cnegate_info;
         const 0;
 },
 GHC.Natural.$fNumNatural_$cnegate_entry() //  [R2]
         { []
         }
     {offset
       c4c8q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4c8r; else goto c4c8s;
       c4c8r: // global
           R2 = R2;
           R1 = GHC.Natural.$fNumNatural_$cnegate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4c8s: // global
           I64[Sp - 8] = block_c4c8o_info;
           R3 = R2;
           R2 = GHC.Natural.$fBitsNatural1_closure;
           Sp = Sp - 8;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$cnegate_info" {
     GHC.Natural.$fNumNatural_$cnegate_info:
         const GHC.Natural.$fNumNatural_$cnegate_entry;
         const 0;
         const 15397457756174;
         const 4294967301;
         const S4byh_srt+40;
 },
 _c4c8o() //  [R1]
         { []
         }
     {offset
       c4c8o: // global
           I64[Sp - 8] = block_c4c8v_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4c8o_info" {
     block_c4c8o_info:
         const _c4c8o;
         const 0;
         const 4402341478430;
         const S4byh_srt+40;
 },
 _c4c8v() //  [R1]
         { []
         }
     {offset
       c4c8v: // global
           if (R1 == 1) goto c4c8G; else goto c4c8C;
       c4c8G: // global
           R1 = GHC.Natural.underflowError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4c8C: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4c8v_info" {
     block_c4c8v_info:
         const _c4c8v;
         const 1;
         const 4294967326;
         const S4byh_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.284075254 UTC

[section ""data" . GHC.Natural.naturalFromInteger_closure" {
     GHC.Natural.naturalFromInteger_closure:
         const GHC.Natural.naturalFromInteger_info;
         const 0;
 },
 GHC.Natural.naturalFromInteger_entry() //  [R2]
         { []
         }
     {offset
       c4c93: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4c94; else goto c4c95;
       c4c94: // global
           R2 = R2;
           R1 = GHC.Natural.naturalFromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4c95: // global
           I64[Sp - 16] = block_c4c8Y_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           _s4bwu::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s4bwu::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.naturalFromInteger_info" {
     GHC.Natural.naturalFromInteger_info:
         const GHC.Natural.naturalFromInteger_entry;
         const 0;
         const 21994527522830;
         const 4294967301;
         const S4byh_srt+40;
 },
 _c4c8Y() //  [R1]
         { []
         }
     {offset
       c4c8Y: // global
           if (R1 == 1) goto c4c92; else goto c4c91;
       c4c92: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4c91: // global
           R1 = GHC.Natural.underflowError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4c8Y_info" {
     block_c4c8Y_info:
         const _c4c8Y;
         const 1;
         const 4294967326;
         const S4byh_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.297683576 UTC

[section ""data" . GHC.Natural.$fNumNatural_$c-_closure" {
     GHC.Natural.$fNumNatural_$c-_closure:
         const GHC.Natural.$fNumNatural_$c-_info;
         const 0;
 },
 GHC.Natural.$fNumNatural_$c-_entry() //  [R2, R3]
         { []
         }
     {offset
       c4c9s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4c9t; else goto c4c9u;
       c4c9t: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fNumNatural_$c-_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4c9u: // global
           I64[Sp - 8] = block_c4c9q_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$c-_info" {
     GHC.Natural.$fNumNatural_$c-_info:
         const GHC.Natural.$fNumNatural_$c-_entry;
         const 0;
         const 41785736822798;
         const 8589934607;
         const S4byh_srt+40;
 },
 _c4c9q() //  [R1]
         { []
         }
     {offset
       c4c9q: // global
           I64[Sp - 8] = block_c4c9x_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4c9q_info" {
     block_c4c9q_info:
         const _c4c9q;
         const 0;
         const 4402341478430;
         const S4byh_srt+40;
 },
 _c4c9x() //  [R1]
         { []
         }
     {offset
       c4c9x: // global
           if (R1 == 1) goto c4c9I; else goto c4c9E;
       c4c9I: // global
           R1 = GHC.Natural.underflowError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4c9E: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4c9x_info" {
     block_c4c9x_info:
         const _c4c9x;
         const 1;
         const 4294967326;
         const S4byh_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.30979712 UTC

[section ""data" . GHC.Natural.$fNumNatural_$c+_closure" {
     GHC.Natural.$fNumNatural_$c+_closure:
         const GHC.Natural.$fNumNatural_$c+_info;
         const 0;
 },
 GHC.Natural.$fNumNatural_$c+_entry() //  [R2, R3]
         { []
         }
     {offset
       c4ca0: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$c+_info" {
     GHC.Natural.$fNumNatural_$c+_info:
         const GHC.Natural.$fNumNatural_$c+_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.314047357 UTC

[section ""data" . GHC.Natural.$fNumNatural_$c*_closure" {
     GHC.Natural.$fNumNatural_$c*_closure:
         const GHC.Natural.$fNumNatural_$c*_info;
         const 0;
 },
 GHC.Natural.$fNumNatural_$c*_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cab: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$c*_info" {
     GHC.Natural.$fNumNatural_$c*_info:
         const GHC.Natural.$fNumNatural_$c*_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.318875082 UTC

[section ""data" . GHC.Natural.$fNumNatural_$csignum_closure" {
     GHC.Natural.$fNumNatural_$csignum_closure:
         const GHC.Natural.$fNumNatural_$csignum_info;
 },
 GHC.Natural.$fNumNatural_$csignum_entry() //  [R2]
         { []
         }
     {offset
       c4cam: // global
           R2 = R2;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$csignum_info" {
     GHC.Natural.$fNumNatural_$csignum_info:
         const GHC.Natural.$fNumNatural_$csignum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.322687611 UTC

[section ""data" . GHC.Natural.$fNumNatural_closure" {
     GHC.Natural.$fNumNatural_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Natural.$fNumNatural_$c+_closure+2;
         const GHC.Natural.$fNumNatural_$c-_closure+2;
         const GHC.Natural.$fNumNatural_$c*_closure+2;
         const GHC.Natural.$fNumNatural_$cnegate_closure+1;
         const GHC.Natural.$fNumNatural_$cabs_closure+1;
         const GHC.Natural.$fNumNatural_$csignum_closure+1;
         const GHC.Natural.naturalFromInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.324687131 UTC

[section ""data" . GHC.Natural.$fRealNatural_closure" {
     GHC.Natural.$fRealNatural_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Natural.$fNumNatural_closure+1;
         const GHC.Natural.$fOrdNatural_closure+1;
         const GHC.Natural.$fRealNatural_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.327104085 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$cquot_closure" {
     GHC.Natural.$fIntegralNatural_$cquot_closure:
         const GHC.Natural.$fIntegralNatural_$cquot_info;
         const 0;
 },
 GHC.Natural.$fIntegralNatural_$cquot_entry() //  [R2, R3]
         { []
         }
     {offset
       c4caz: // global
           R3 = R3;
           R2 = R2;
           call GHC.Real.$fIntegralInteger_$cquot_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$cquot_info" {
     GHC.Natural.$fIntegralNatural_$cquot_info:
         const GHC.Natural.$fIntegralNatural_$cquot_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.330836097 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$crem_closure" {
     GHC.Natural.$fIntegralNatural_$crem_closure:
         const GHC.Natural.$fIntegralNatural_$crem_info;
         const 0;
 },
 GHC.Natural.$fIntegralNatural_$crem_entry() //  [R2, R3]
         { []
         }
     {offset
       c4caK: // global
           R3 = R3;
           R2 = R2;
           call GHC.Real.$fIntegralInteger_$crem_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$crem_info" {
     GHC.Natural.$fIntegralNatural_$crem_info:
         const GHC.Natural.$fIntegralNatural_$crem_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.334224881 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$cdiv_closure" {
     GHC.Natural.$fIntegralNatural_$cdiv_closure:
         const GHC.Natural.$fIntegralNatural_$cdiv_info;
         const 0;
 },
 GHC.Natural.$fIntegralNatural_$cdiv_entry() //  [R2, R3]
         { []
         }
     {offset
       c4caV: // global
           R3 = R3;
           R2 = R2;
           call GHC.Real.$fIntegralInteger_$cdiv_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$cdiv_info" {
     GHC.Natural.$fIntegralNatural_$cdiv_info:
         const GHC.Natural.$fIntegralNatural_$cdiv_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.337549181 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$cmod_closure" {
     GHC.Natural.$fIntegralNatural_$cmod_closure:
         const GHC.Natural.$fIntegralNatural_$cmod_info;
         const 0;
 },
 GHC.Natural.$fIntegralNatural_$cmod_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cb6: // global
           R3 = R3;
           R2 = R2;
           call GHC.Real.$fIntegralInteger_$cmod_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$cmod_info" {
     GHC.Natural.$fIntegralNatural_$cmod_info:
         const GHC.Natural.$fIntegralNatural_$cmod_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.341764196 UTC

[section ""data" . GHC.Natural.$fEnumNatural_$cenumFromThen_closure" {
     GHC.Natural.$fEnumNatural_$cenumFromThen_closure:
         const GHC.Natural.$fEnumNatural_$cenumFromThen_info;
         const 0;
 },
 GHC.Natural.$fEnumNatural_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cbm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4cbn; else goto c4cbo;
       c4cbn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fEnumNatural_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4cbo: // global
           I64[Sp - 24] = block_c4cbh_info;
           _s4bwB::P64 = R3;
           R3 = R3;
           _s4bwA::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s4bwA::P64;
           P64[Sp - 8] = _s4bwB::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fEnumNatural_$cenumFromThen_info" {
     GHC.Natural.$fEnumNatural_$cenumFromThen_info:
         const GHC.Natural.$fEnumNatural_$cenumFromThen_entry;
         const 0;
         const 31527400709816334;
         const 8589934607;
         const S4byh_srt+40;
 },
 _c4cbh() //  [R1]
         { []
         }
     {offset
       c4cbh: // global
           _s4bwA::P64 = P64[Sp + 8];
           _s4bwB::P64 = P64[Sp + 16];
           if (R1 == 1) goto c4cbl; else goto c4cbk;
       c4cbl: // global
           R3 = _s4bwB::P64;
           R2 = _s4bwA::P64;
           Sp = Sp + 24;
           call GHC.Enum.$fEnumInteger_$cenumFromThen_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
       c4cbk: // global
           I64[Sp] = block_c4cbr_info;
           R3 = _s4bwA::P64;
           R2 = _s4bwB::P64;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cbh_info" {
     block_c4cbh_info:
         const _c4cbh;
         const 2;
         const 13513002200334366;
         const S4byh_srt+40;
 },
 _c4cbr() //  [R1]
         { []
         }
     {offset
       c4cbr: // global
           R4 = GHC.Natural.$fBitsNatural1_closure;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Enum.enumDeltaToInteger_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cbr_info" {
     block_c4cbr_info:
         const _c4cbr;
         const 130;
         const 4503603922337822;
         const S4byh_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.348462848 UTC

[section ""data" . GHC.Natural.$fEnumNatural_closure" {
     GHC.Natural.$fEnumNatural_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Natural.$fEnumNatural_$csucc_closure+1;
         const GHC.Natural.$fEnumNatural_$cpred_closure+1;
         const GHC.Natural.$fEnumNatural_$ctoEnum_closure+1;
         const GHC.Natural.$fEnumNatural_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInteger_$cenumFrom_closure+1;
         const GHC.Natural.$fEnumNatural_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInteger_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.350840734 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_closure" {
     GHC.Natural.$fIntegralNatural_closure:
         const GHC.Real.C:Integral_con_info;
         const GHC.Natural.$fRealNatural_closure+1;
         const GHC.Natural.$fEnumNatural_closure+1;
         const GHC.Natural.$fIntegralNatural_$cquot_closure+2;
         const GHC.Natural.$fIntegralNatural_$crem_closure+2;
         const GHC.Natural.$fIntegralNatural_$cdiv_closure+2;
         const GHC.Natural.$fIntegralNatural_$cmod_closure+2;
         const GHC.Natural.$fIntegralNatural_$cquotRem_closure+2;
         const GHC.Natural.$fIntegralNatural_$cdivMod_closure+2;
         const GHC.Natural.$fIntegralNatural_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.352685808 UTC

[section ""data" . sat_s4bwE_closure" {
     sat_s4bwE_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.354858626 UTC

[section ""data" . sat_s4bwF_closure" {
     sat_s4bwF_closure:
         const :_con_info;
         const sat_s4bwE_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.357178431 UTC

[section ""data" . GHC.Natural.$seven_n_closure" {
     GHC.Natural.$seven_n_closure:
         const GHC.Natural.$seven_n_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.$seven_n_entry() //  [R1]
         { []
         }
     {offset
       c4cbV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cbW; else goto c4cbX;
       c4cbW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cbX: // global
           (_c4cbS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cbS::I64 == 0) goto c4cbU; else goto c4cbT;
       c4cbU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cbT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cbS::I64;
           R3 = sat_s4bwF_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.$seven_n_info" {
     GHC.Natural.$seven_n_info:
         const GHC.Natural.$seven_n_entry;
         const 0;
         const 4294967317;
         const S4byh_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.361744756 UTC

[section ""data" . GHC.Natural.$fShowNatural_$cshow_closure" {
     GHC.Natural.$fShowNatural_$cshow_closure:
         const GHC.Natural.$fShowNatural_$cshow_info;
         const 0;
 },
 GHC.Natural.$fShowNatural_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c4ccc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4ccd; else goto c4cce;
       c4ccd: // global
           R2 = R2;
           R1 = GHC.Natural.$fShowNatural_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cce: // global
           I64[Sp - 8] = block_c4cc9_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fShowNatural_$cshow_info" {
     GHC.Natural.$fShowNatural_$cshow_info:
         const GHC.Natural.$fShowNatural_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4byh_srt+232;
 },
 _c4cc9() //  [R1, R2]
         { []
         }
     {offset
       c4cc9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4cch; else goto c4ccg;
       c4cch: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c4ccg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cc9_info" {
     block_c4cc9_info:
         const _c4cc9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.367593855 UTC

[section ""data" . GHC.Natural.$fShowNatural1_closure" {
     GHC.Natural.$fShowNatural1_closure:
         const GHC.Natural.$fShowNatural1_info;
         const 0;
 },
 GHC.Natural.$fShowNatural1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4ccy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4ccz; else goto c4ccA;
       c4ccz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fShowNatural1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4ccA: // global
           I64[Sp - 8] = block_c4ccv_info;
           R4 = R3;
           R3 = R2;
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fShowNatural1_info" {
     GHC.Natural.$fShowNatural1_info:
         const GHC.Natural.$fShowNatural1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S4byh_srt+232;
 },
 _c4ccv() //  [R1, R2]
         { []
         }
     {offset
       c4ccv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4ccD; else goto c4ccC;
       c4ccD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c4ccC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4ccv_info" {
     block_c4ccv_info:
         const _c4ccv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.372986876 UTC

[section ""data" . GHC.Natural.$fShowNatural_$cshowList_closure" {
     GHC.Natural.$fShowNatural_$cshowList_closure:
         const GHC.Natural.$fShowNatural_$cshowList_info;
         const 0;
 },
 GHC.Natural.$fShowNatural_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c4ccR: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Natural.$fShowNatural1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fShowNatural_$cshowList_info" {
     GHC.Natural.$fShowNatural_$cshowList_info:
         const GHC.Natural.$fShowNatural_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.376332232 UTC

[section ""data" . GHC.Natural.$fShowNatural_closure" {
     GHC.Natural.$fShowNatural_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowInteger_$cshowsPrec_closure+3;
         const GHC.Natural.$fShowNatural_$cshow_closure+1;
         const GHC.Natural.$fShowNatural_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.378991041 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cpopCount_closure" {
     GHC.Natural.$fBitsNatural_$cpopCount_closure:
         const GHC.Natural.$fBitsNatural_$cpopCount_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cpopCount_entry() //  [R2]
         { []
         }
     {offset
       c4cd3: // global
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cpopCount_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cpopCount_info" {
     GHC.Natural.$fBitsNatural_$cpopCount_info:
         const GHC.Natural.$fBitsNatural_$cpopCount_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S4byh_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.382765754 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$crotateR_closure" {
     GHC.Natural.$fBitsNatural_$crotateR_closure:
         const GHC.Natural.$fBitsNatural_$crotateR_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$crotateR_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cde: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$crotateR_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$crotateR_info" {
     GHC.Natural.$fBitsNatural_$crotateR_info:
         const GHC.Natural.$fBitsNatural_$crotateR_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.386395881 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$crotateL_closure" {
     GHC.Natural.$fBitsNatural_$crotateL_closure:
         const GHC.Natural.$fBitsNatural_$crotateL_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$crotateL_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cdp: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$crotateL_info" {
     GHC.Natural.$fBitsNatural_$crotateL_info:
         const GHC.Natural.$fBitsNatural_$crotateL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.38981856 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cshiftR_closure" {
     GHC.Natural.$fBitsNatural_$cshiftR_closure:
         const GHC.Natural.$fBitsNatural_$cshiftR_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cshiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cdA: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshiftR_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cshiftR_info" {
     GHC.Natural.$fBitsNatural_$cshiftR_info:
         const GHC.Natural.$fBitsNatural_$cshiftR_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.393170272 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cshiftL_closure" {
     GHC.Natural.$fBitsNatural_$cshiftL_closure:
         const GHC.Natural.$fBitsNatural_$cshiftL_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cshiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cdL: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cshiftL_info" {
     GHC.Natural.$fBitsNatural_$cshiftL_info:
         const GHC.Natural.$fBitsNatural_$cshiftL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.396607545 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cisSigned_closure" {
     GHC.Natural.$fBitsNatural_$cisSigned_closure:
         const GHC.Natural.$fBitsNatural_$cisSigned_info;
 },
 GHC.Natural.$fBitsNatural_$cisSigned_entry() //  []
         { []
         }
     {offset
       c4cdW: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cisSigned_info" {
     GHC.Natural.$fBitsNatural_$cisSigned_info:
         const GHC.Natural.$fBitsNatural_$cisSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.399731761 UTC

[section ""cstring" . lvl4_r4bvH_bytes" {
     lvl4_r4bvH_bytes:
         I8[] [78,97,116,117,114,97,108,58,32,98,105,116,83,105,122,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.40293872 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cbitSize_closure" {
     GHC.Natural.$fBitsNatural_$cbitSize_closure:
         const GHC.Natural.$fBitsNatural_$cbitSize_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cbitSize_entry() //  [R1]
         { []
         }
     {offset
       c4ced: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4cee; else goto c4cef;
       c4cee: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cef: // global
           (_c4ce8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4ce8::I64 == 0) goto c4cea; else goto c4ce9;
       c4cea: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4ce9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4ce8::I64;
           I64[Sp - 24] = block_c4ceb_info;
           R2 = lvl4_r4bvH_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cbitSize_info" {
     GHC.Natural.$fBitsNatural_$cbitSize_info:
         const GHC.Natural.$fBitsNatural_$cbitSize_entry;
         const 0;
         const 4294967317;
         const S4byh_srt+288;
 },
 _c4ceb() //  [R1]
         { []
         }
     {offset
       c4ceb: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4ceb_info" {
     block_c4ceb_info:
         const _c4ceb;
         const 0;
         const 4294967326;
         const S4byh_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.409059953 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cbitSizeMaybe_closure" {
     GHC.Natural.$fBitsNatural_$cbitSizeMaybe_closure:
         const GHC.Natural.$fBitsNatural_$cbitSizeMaybe_info;
 },
 GHC.Natural.$fBitsNatural_$cbitSizeMaybe_entry() //  []
         { []
         }
     {offset
       c4cex: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cbitSizeMaybe_info" {
     GHC.Natural.$fBitsNatural_$cbitSizeMaybe_info:
         const GHC.Natural.$fBitsNatural_$cbitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.412548404 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$ctestBit_closure" {
     GHC.Natural.$fBitsNatural_$ctestBit_closure:
         const GHC.Natural.$fBitsNatural_$ctestBit_info;
 },
 GHC.Natural.$fBitsNatural_$ctestBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c4ceJ: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$ctestBit_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$ctestBit_info" {
     GHC.Natural.$fBitsNatural_$ctestBit_info:
         const GHC.Natural.$fBitsNatural_$ctestBit_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.41643867 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$ccomplementBit_closure" {
     GHC.Natural.$fBitsNatural_$ccomplementBit_closure:
         const GHC.Natural.$fBitsNatural_$ccomplementBit_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$ccomplementBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c4ceU: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$ccomplementBit_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$ccomplementBit_info" {
     GHC.Natural.$fBitsNatural_$ccomplementBit_info:
         const GHC.Natural.$fBitsNatural_$ccomplementBit_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.419979659 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cclearBit_closure" {
     GHC.Natural.$fBitsNatural_$cclearBit_closure:
         const GHC.Natural.$fBitsNatural_$cclearBit_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cclearBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cf5: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cclearBit_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cclearBit_info" {
     GHC.Natural.$fBitsNatural_$cclearBit_info:
         const GHC.Natural.$fBitsNatural_$cclearBit_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.423473192 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$csetBit_closure" {
     GHC.Natural.$fBitsNatural_$csetBit_closure:
         const GHC.Natural.$fBitsNatural_$csetBit_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$csetBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cfg: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$csetBit_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$csetBit_info" {
     GHC.Natural.$fBitsNatural_$csetBit_info:
         const GHC.Natural.$fBitsNatural_$csetBit_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.427108713 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$crotate_closure" {
     GHC.Natural.$fBitsNatural_$crotate_closure:
         const GHC.Natural.$fBitsNatural_$crotate_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$crotate_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cfr: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$crotate_info" {
     GHC.Natural.$fBitsNatural_$crotate_info:
         const GHC.Natural.$fBitsNatural_$crotate_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.430512022 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cshift_closure" {
     GHC.Natural.$fBitsNatural_$cshift_closure:
         const GHC.Natural.$fBitsNatural_$cshift_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cshift_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cfC: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cshift_info" {
     GHC.Natural.$fBitsNatural_$cshift_info:
         const GHC.Natural.$fBitsNatural_$cshift_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.433574682 UTC

[section ""cstring" . lvl5_r4bvI_bytes" {
     lvl5_r4bvI_bytes:
         I8[] [66,105,116,115,46,99,111,109,112,108,101,109,101,110,116,58,32,78,97,116,117,114,97,108,32,99,111,109,112,108,101,109,101,110,116,32,117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.435869211 UTC

[section ""data" . lvl6_r4bvJ_closure" {
     lvl6_r4bvJ_closure:
         const lvl6_r4bvJ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r4bvJ_entry() //  [R1]
         { []
         }
     {offset
       c4cfQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cfR; else goto c4cfS;
       c4cfR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cfS: // global
           (_c4cfN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cfN::I64 == 0) goto c4cfP; else goto c4cfO;
       c4cfP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cfO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cfN::I64;
           R2 = lvl5_r4bvI_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r4bvJ_info" {
     lvl6_r4bvJ_info:
         const lvl6_r4bvJ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.440679426 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$ccomplement_closure" {
     GHC.Natural.$fBitsNatural_$ccomplement_closure:
         const GHC.Natural.$fBitsNatural_$ccomplement_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$ccomplement_entry() //  []
         { []
         }
     {offset
       c4cg4: // global
           R2 = lvl6_r4bvJ_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$ccomplement_info" {
     GHC.Natural.$fBitsNatural_$ccomplement_info:
         const GHC.Natural.$fBitsNatural_$ccomplement_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const S4byh_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.444022357 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cxor_closure" {
     GHC.Natural.$fBitsNatural_$cxor_closure:
         const GHC.Natural.$fBitsNatural_$cxor_info;
 },
 GHC.Natural.$fBitsNatural_$cxor_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cgf: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.xorInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cxor_info" {
     GHC.Natural.$fBitsNatural_$cxor_info:
         const GHC.Natural.$fBitsNatural_$cxor_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.447337846 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$c.|._closure" {
     GHC.Natural.$fBitsNatural_$c.|._closure:
         const GHC.Natural.$fBitsNatural_$c.|._info;
 },
 GHC.Natural.$fBitsNatural_$c.|._entry() //  [R2, R3]
         { []
         }
     {offset
       c4cgq: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.orInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$c.|._info" {
     GHC.Natural.$fBitsNatural_$c.|._info:
         const GHC.Natural.$fBitsNatural_$c.|._entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.450882209 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$c.&._closure" {
     GHC.Natural.$fBitsNatural_$c.&._closure:
         const GHC.Natural.$fBitsNatural_$c.&._info;
 },
 GHC.Natural.$fBitsNatural_$c.&._entry() //  [R2, R3]
         { []
         }
     {offset
       c4cgB: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.andInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$c.&._info" {
     GHC.Natural.$fBitsNatural_$c.&._info:
         const GHC.Natural.$fBitsNatural_$c.&._entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.453999741 UTC

[section ""cstring" . GHC.Natural.$trModule4_bytes" {
     GHC.Natural.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.455688018 UTC

[section ""data" . GHC.Natural.$trModule3_closure" {
     GHC.Natural.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Natural.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.457381304 UTC

[section ""cstring" . GHC.Natural.$trModule2_bytes" {
     GHC.Natural.$trModule2_bytes:
         I8[] [71,72,67,46,78,97,116,117,114,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.459047691 UTC

[section ""data" . GHC.Natural.$trModule1_closure" {
     GHC.Natural.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Natural.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.46080804 UTC

[section ""data" . GHC.Natural.$trModule_closure" {
     GHC.Natural.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Natural.$trModule3_closure+1;
         const GHC.Natural.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.462839323 UTC

[section ""data" . $krep_r4bvK_closure" {
     $krep_r4bvK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.464523949 UTC

[section ""cstring" . GHC.Natural.$tcNatural2_bytes" {
     GHC.Natural.$tcNatural2_bytes:
         I8[] [78,97,116,117,114,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.466839349 UTC

[section ""data" . GHC.Natural.$tcNatural1_closure" {
     GHC.Natural.$tcNatural1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Natural.$tcNatural2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.468548492 UTC

[section ""data" . GHC.Natural.$tcNatural_closure" {
     GHC.Natural.$tcNatural_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Natural.$trModule_closure+1;
         const GHC.Natural.$tcNatural1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18275189520134122949;
         const 2097940004095541788;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.470343586 UTC

[section ""data" . $krep1_r4bvL_closure" {
     $krep1_r4bvL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Natural.$tcNatural_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.471994241 UTC

[section ""data" . GHC.Natural.$tc'Natural1_closure" {
     GHC.Natural.$tc'Natural1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4bvK_closure+1;
         const $krep1_r4bvL_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.473776238 UTC

[section ""cstring" . GHC.Natural.$tc'Natural3_bytes" {
     GHC.Natural.$tc'Natural3_bytes:
         I8[] [39,78,97,116,117,114,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.47535861 UTC

[section ""data" . GHC.Natural.$tc'Natural2_closure" {
     GHC.Natural.$tc'Natural2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Natural.$tc'Natural3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.477050252 UTC

[section ""data" . GHC.Natural.$tc'Natural_closure" {
     GHC.Natural.$tc'Natural_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Natural.$trModule_closure+1;
         const GHC.Natural.$tc'Natural2_closure+1;
         const GHC.Natural.$tc'Natural1_closure+4;
         const 11998593531750078056;
         const 1104420550366228074;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.479755355 UTC

[section ""data" . GHC.Natural.wordToNatural_closure" {
     GHC.Natural.wordToNatural_closure:
         const GHC.Natural.wordToNatural_info;
 },
 GHC.Natural.wordToNatural_entry() //  [R2]
         { []
         }
     {offset
       c4ch0: // global
           R2 = R2;
           call GHC.Real.$fIntegralWord_$ctoInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.wordToNatural_info" {
     GHC.Natural.wordToNatural_info:
         const GHC.Natural.wordToNatural_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.482877156 UTC

[section ""data" . sat_s4bwX_closure" {
     sat_s4bwX_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.484647288 UTC

[section ""data" . sat_s4bwY_closure" {
     sat_s4bwY_closure:
         const :_con_info;
         const sat_s4bwX_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.486380411 UTC

[section ""data" . sat_s4bwW_closure" {
     sat_s4bwW_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.488073551 UTC

[section ""data" . sat_s4bwZ_closure" {
     sat_s4bwZ_closure:
         const :_con_info;
         const sat_s4bwW_closure+1;
         const sat_s4bwY_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.489895376 UTC

[section ""data" . sat_s4bwV_closure" {
     sat_s4bwV_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.491663818 UTC

[section ""data" . sat_s4bx0_closure" {
     sat_s4bx0_closure:
         const :_con_info;
         const sat_s4bwV_closure+1;
         const sat_s4bwZ_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.494837941 UTC

[section ""data" . GHC.Natural.naturalToWordMaybe1_closure" {
     GHC.Natural.naturalToWordMaybe1_closure:
         const GHC.Natural.naturalToWordMaybe1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.naturalToWordMaybe1_entry() //  [R1]
         { []
         }
     {offset
       c4chj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4chk; else goto c4chl;
       c4chk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4chl: // global
           (_c4chg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4chg::I64 == 0) goto c4chi; else goto c4chh;
       c4chi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4chh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4chg::I64;
           R3 = sat_s4bx0_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.naturalToWordMaybe1_info" {
     GHC.Natural.naturalToWordMaybe1_info:
         const GHC.Natural.naturalToWordMaybe1_entry;
         const 0;
         const 4294967317;
         const S4byh_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.500088521 UTC

[section ""data" . GHC.Natural.naturalToWordMaybe_closure" {
     GHC.Natural.naturalToWordMaybe_closure:
         const GHC.Natural.naturalToWordMaybe_info;
         const 0;
 },
 sat_s4bx4_entry() //  [R1]
         { []
         }
     {offset
       c4chI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4chM; else goto c4chN;
       c4chM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4chN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c4chG_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToWord_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4bx4_info" {
     sat_s4bx4_info:
         const sat_s4bx4_entry;
         const 1;
         const 16;
 },
 _c4chG() //  [R1]
         { []
         }
     {offset
       c4chG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4chQ; else goto c4chP;
       c4chQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c4chP: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4chG_info" {
     block_c4chG_info:
         const _c4chG;
         const 0;
         const 30;
 },
 GHC.Natural.naturalToWordMaybe_entry() //  [R2]
         { []
         }
     {offset
       c4chU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4chV; else goto c4chW;
       c4chV: // global
           R2 = R2;
           R1 = GHC.Natural.naturalToWordMaybe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4chW: // global
           I64[Sp - 16] = block_c4chx_info;
           R3 = GHC.Natural.naturalToWordMaybe1_closure;
           _s4bx1::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s4bx1::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.naturalToWordMaybe_info" {
     GHC.Natural.naturalToWordMaybe_info:
         const GHC.Natural.naturalToWordMaybe_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4byh_srt+336;
 },
 _c4chx() //  [R1]
         { []
         }
     {offset
       c4chx: // global
           if (R1 == 1) goto c4chT; else goto c4chS;
       c4chT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c4ci2; else goto c4ci1;
       c4ci2: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4ci1: // global
           I64[Hp - 32] = sat_s4bx4_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4chS: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4chx_info" {
     block_c4chx_info:
         const _c4chx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.511267854 UTC

[section ""data" . GHC.Natural.$fReadNatural_go_closure" {
     GHC.Natural.$fReadNatural_go_closure:
         const GHC.Natural.$fReadNatural_go_info;
         const 0;
 },
 sat_s4bxe_entry() //  [R1]
         { []
         }
     {offset
       c4ciL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ciM; else goto c4ciN;
       c4ciM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4ciN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Natural.$fReadNatural_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4bxe_info" {
     sat_s4bxe_info:
         const sat_s4bxe_entry;
         const 1;
         const 4294967312;
         const S4byh_srt+352;
 },
 section ""relreadonly" . u4cje_srtd" {
     u4cje_srtd:
         const S4byh_srt+40;
         const 40;
         const 549755813889;
 },
 GHC.Natural.$fReadNatural_go_entry() //  [R2]
         { []
         }
     {offset
       c4ciS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4ciT; else goto u4cj8;
       c4ciT: // global
           R2 = R2;
           R1 = GHC.Natural.$fReadNatural_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u4cj8: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c4cio() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural_go_info" {
     GHC.Natural.$fReadNatural_go_info:
         const GHC.Natural.$fReadNatural_go_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u4cje_srtd;
 },
 _c4cio() //  []
         { []
         }
     {offset
       c4cio: // global
           _s4bx5::P64 = P64[Sp];
           I64[Sp] = block_c4cir_info;
           R1 = _s4bx5::P64;
           if (R1 & 7 != 0) goto u4cja; else goto c4cis;
       u4cja: // global
           call _c4cir(R1) args: 0, res: 0, upd: 0;
       c4cis: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u4cjf_srtd" {
     u4cjf_srtd:
         const S4byh_srt+40;
         const 40;
         const 549755813889;
 },
 _c4cir() //  [R1]
         { []
         }
     {offset
       c4cir: // global
           if (R1 & 7 == 1) goto c4ciP; else goto c4ciQ;
       c4ciP: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4ciQ: // global
           I64[Sp - 8] = block_c4cix_info;
           _s4bx8::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s4bx8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4cjb; else goto c4ciy;
       u4cjb: // global
           call _c4cix(R1) args: 0, res: 0, upd: 0;
       c4ciy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cir_info" {
     block_c4cir_info:
         const _c4cir;
         const 0;
         const 18446744069414584350;
         const u4cjf_srtd;
 },
 section ""relreadonly" . u4cjg_srtd" {
     u4cjg_srtd:
         const S4byh_srt+40;
         const 40;
         const 549755813889;
 },
 _c4cix() //  [R1]
         { []
         }
     {offset
       c4cix: // global
           I64[Sp - 8] = block_c4ciC_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = P64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cix_info" {
     block_c4cix_info:
         const _c4cix;
         const 1;
         const 18446744069414584350;
         const u4cjg_srtd;
 },
 section ""relreadonly" . u4cjh_srtd" {
     u4cjh_srtd:
         const S4byh_srt+40;
         const 40;
         const 549755813889;
 },
 _c4ciC() //  [R1]
         { []
         }
     {offset
       c4ciC: // global
           _s4bx8::P64 = P64[Sp + 16];
           if (R1 == 1) goto c4cj4; else goto c4cj2;
       c4cj4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c4cj7; else goto c4cj6;
       c4cj7: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4cj6: // global
           I64[Hp - 40] = sat_s4bxe_info;
           P64[Hp - 24] = _s4bx8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4cj2: // global
           P64[Sp + 16] = _s4bx8::P64;
           Sp = Sp + 16;
           call _c4cio() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4ciC_info" {
     block_c4ciC_info:
         const _c4ciC;
         const 2;
         const 18446744069414584350;
         const u4cjh_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.526819362 UTC

[section ""data" . GHC.Natural.$fReadNatural_$creadsPrec_closure" {
     GHC.Natural.$fReadNatural_$creadsPrec_closure:
         const GHC.Natural.$fReadNatural_$creadsPrec_info;
         const 0;
 },
 g_s4bxg_entry() //  [R1]
         { []
         }
     {offset
       c4cjW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cjX; else goto c4cjY;
       c4cjX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cjY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadInteger2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s4bxg_info" {
     g_s4bxg_info:
         const g_s4bxg_entry;
         const 1;
         const 12884901904;
         const S4byh_srt+360;
 },
 sat_s4bxj_entry() //  [R1, R2]
         { []
         }
     {offset
       c4ck6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4ck7; else goto c4ck8;
       c4ck7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4ck8: // global
           I64[Sp - 8] = block_c4ck4_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s4bxj_info" {
     sat_s4bxj_info:
         const sat_s4bxj_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S4byh_srt+352;
 },
 _c4ck4() //  [R1]
         { []
         }
     {offset
       c4ck4: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Natural.$fReadNatural_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4ck4_info" {
     block_c4ck4_info:
         const _c4ck4;
         const 0;
         const 4294967326;
         const S4byh_srt+352;
 },
 GHC.Natural.$fReadNatural_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c4ckc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c4ckg; else goto c4ckf;
       c4ckg: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Natural.$fReadNatural_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4ckf: // global
           I64[Hp - 32] = g_s4bxg_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s4bxj_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural_$creadsPrec_info" {
     GHC.Natural.$fReadNatural_$creadsPrec_info:
         const GHC.Natural.$fReadNatural_$creadsPrec_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S4byh_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.537718917 UTC

[section ""data" . GHC.Natural.$fReadNatural4_closure" {
     GHC.Natural.$fReadNatural4_closure:
         const GHC.Natural.$fReadNatural4_info;
         const 0;
 },
 g_s4bxl_entry() //  [R1]
         { []
         }
     {offset
       c4ckG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ckH; else goto c4ckI;
       c4ckH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4ckI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadInteger2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s4bxl_info" {
     g_s4bxl_info:
         const g_s4bxl_entry;
         const 1;
         const 12884901904;
         const S4byh_srt+360;
 },
 w_s4bxm_entry() //  [R1, R2]
         { []
         }
     {offset
       c4ckQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4ckR; else goto c4ckS;
       c4ckR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4ckS: // global
           I64[Sp - 8] = block_c4ckO_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w_s4bxm_info" {
     w_s4bxm_info:
         const w_s4bxm_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S4byh_srt+352;
 },
 _c4ckO() //  [R1]
         { []
         }
     {offset
       c4ckO: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Natural.$fReadNatural_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4ckO_info" {
     block_c4ckO_info:
         const _c4ckO;
         const 0;
         const 4294967326;
         const S4byh_srt+352;
 },
 sat_s4bxs_entry() //  [R1, R2]
         { []
         }
     {offset
       c4cl4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cl5; else goto c4cl6;
       c4cl5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cl6: // global
           I64[Sp - 8] = block_c4cl1_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s4bxs_info" {
     sat_s4bxs_info:
         const sat_s4bxs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c4cl1() //  [R1]
         { []
         }
     {offset
       c4cl1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4cl9; else goto c4cl8;
       c4cl9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4cl8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cl1_info" {
     block_c4cl1_info:
         const _c4cl1;
         const 0;
         const 30;
 },
 GHC.Natural.$fReadNatural4_entry() //  [R2]
         { []
         }
     {offset
       c4cla: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c4cle; else goto c4cld;
       c4cle: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.Natural.$fReadNatural4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cld: // global
           I64[Hp - 48] = g_s4bxl_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = w_s4bxm_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s4bxs_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural4_info" {
     GHC.Natural.$fReadNatural4_info:
         const GHC.Natural.$fReadNatural4_entry;
         const 0;
         const 98784247822;
         const 4294967301;
         const S4byh_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.549161957 UTC

[section ""data" . GHC.Natural.$fReadNatural3_closure" {
     GHC.Natural.$fReadNatural3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.551736991 UTC

[section ""data" . GHC.Natural.$fReadNatural2_closure" {
     GHC.Natural.$fReadNatural2_closure:
         const GHC.Natural.$fReadNatural2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.$fReadNatural2_entry() //  [R1]
         { []
         }
     {offset
       c4clM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c4clN; else goto c4clO;
       c4clN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4clO: // global
           (_c4clJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4clJ::I64 == 0) goto c4clL; else goto c4clK;
       c4clL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4clK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4clJ::I64;
           R2 = GHC.Natural.$fReadNatural4_closure+1;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Natural.$fReadNatural3_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural2_info" {
     GHC.Natural.$fReadNatural2_info:
         const GHC.Natural.$fReadNatural2_entry;
         const 0;
         const 12884901909;
         const S4byh_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.556767925 UTC

[section ""data" . GHC.Natural.$fReadNatural_$creadList_closure" {
     GHC.Natural.$fReadNatural_$creadList_closure:
         const GHC.Natural.$fReadNatural_$creadList_info;
         const 0;
 },
 GHC.Natural.$fReadNatural_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c4cm0: // global
           R3 = R2;
           R2 = GHC.Natural.$fReadNatural2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural_$creadList_info" {
     GHC.Natural.$fReadNatural_$creadList_info:
         const GHC.Natural.$fReadNatural_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S4byh_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.560692544 UTC

[section ""data" . GHC.Natural.$fReadNatural1_closure" {
     GHC.Natural.$fReadNatural1_closure:
         const GHC.Natural.$fReadNatural1_info;
         const 0;
 },
 GHC.Natural.$fReadNatural1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cme: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cmf; else goto c4cmg;
       c4cmf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fReadNatural1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4cmg: // global
           I64[Sp - 8] = block_c4cmb_info;
           R3 = R3;
           R2 = GHC.Natural.$fReadNatural_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural1_info" {
     GHC.Natural.$fReadNatural1_info:
         const GHC.Natural.$fReadNatural1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S4byh_srt+408;
 },
 _c4cmb() //  [R1]
         { []
         }
     {offset
       c4cmb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4cmj; else goto c4cmi;
       c4cmj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4cmi: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cmb_info" {
     block_c4cmb_info:
         const _c4cmb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.56585691 UTC

[section ""data" . GHC.Natural.$fReadNatural_closure" {
     GHC.Natural.$fReadNatural_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Natural.$fReadNatural_$creadsPrec_closure+1;
         const GHC.Natural.$fReadNatural_$creadList_closure+1;
         const GHC.Natural.$fReadNatural4_closure+1;
         const GHC.Natural.$fReadNatural1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.568344341 UTC

[section ""data" . GHC.Natural.isValidNatural_closure" {
     GHC.Natural.isValidNatural_closure:
         const GHC.Natural.isValidNatural_info;
         const 0;
 },
 GHC.Natural.isValidNatural_entry() //  [R2]
         { []
         }
     {offset
       c4cmA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cmB; else goto c4cmC;
       c4cmB: // global
           R2 = R2;
           R1 = GHC.Natural.isValidNatural_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cmC: // global
           I64[Sp - 8] = block_c4cmy_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.isValidNatural_info" {
     GHC.Natural.isValidNatural_info:
         const GHC.Natural.isValidNatural_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4byh_srt+424;
 },
 _c4cmy() //  [R1]
         { []
         }
     {offset
       c4cmy: // global
           R1 = I64[(R1 << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cmy_info" {
     block_c4cmy_info:
         const _c4cmy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.574548748 UTC

[section ""data" . GHC.Natural.minusNaturalMaybe_closure" {
     GHC.Natural.minusNaturalMaybe_closure:
         const GHC.Natural.minusNaturalMaybe_info;
         const 0;
 },
 sat_s4bxC_entry() //  [R1]
         { []
         }
     {offset
       c4cn3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cn4; else goto c4cn5;
       c4cn4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cn5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Natural.$fNumNatural_$c-_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4bxC_info" {
     sat_s4bxC_info:
         const sat_s4bxC_entry;
         const 2;
         const 4294967314;
         const S4byh_srt+440;
 },
 GHC.Natural.minusNaturalMaybe_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cn9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4cna; else goto c4cnb;
       c4cna: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.minusNaturalMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4cnb: // global
           I64[Sp - 24] = block_c4cmU_info;
           _s4bxA::P64 = R3;
           R3 = R3;
           _s4bxz::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s4bxz::P64;
           P64[Sp - 8] = _s4bxA::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.minusNaturalMaybe_info" {
     GHC.Natural.minusNaturalMaybe_info:
         const GHC.Natural.minusNaturalMaybe_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S4byh_srt+440;
 },
 _c4cmU() //  [R1]
         { []
         }
     {offset
       c4cmU: // global
           if (R1 == 1) goto c4cn8; else goto c4cn7;
       c4cn8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c4cnh; else goto c4cng;
       c4cnh: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4cng: // global
           I64[Hp - 40] = sat_s4bxC_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4cn7: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cmU_info" {
     block_c4cmU_info:
         const _c4cmU;
         const 2;
         const 4294967326;
         const S4byh_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.581836955 UTC

[section ""data" . GHC.Natural.$fIxNatural_closure" {
     GHC.Natural.$fIxNatural_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Natural.$fOrdNatural_closure+1;
         const GHC.Arr.$fIxInteger_$crange_closure+1;
         const GHC.Arr.$fIxInteger_$cindex_closure+2;
         const GHC.Arr.$fIxInteger_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxInteger_$cinRange_closure+2;
         const GHC.Arr.$fIxInteger_$crangeSize_closure+1;
         const GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.584124466 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cunsafeShiftL_closure" {
     GHC.Natural.$fBitsNatural_$cunsafeShiftL_closure:
         const GHC.Natural.$fBitsNatural_$cunsafeShiftL_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cunsafeShiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cnE: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cunsafeShiftL_info" {
     GHC.Natural.$fBitsNatural_$cunsafeShiftL_info:
         const GHC.Natural.$fBitsNatural_$cunsafeShiftL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.588164449 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cunsafeShiftR_closure" {
     GHC.Natural.$fBitsNatural_$cunsafeShiftR_closure:
         const GHC.Natural.$fBitsNatural_$cunsafeShiftR_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cunsafeShiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cnP: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshiftR_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cunsafeShiftR_info" {
     GHC.Natural.$fBitsNatural_$cunsafeShiftR_info:
         const GHC.Natural.$fBitsNatural_$cunsafeShiftR_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4byh_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.591814018 UTC

[section ""data" . GHC.Natural.$fBitsNatural_closure" {
     GHC.Natural.$fBitsNatural_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Natural.$fEqNatural_closure+1;
         const GHC.Natural.$fBitsNatural_$c.&._closure+2;
         const GHC.Natural.$fBitsNatural_$c.|._closure+2;
         const GHC.Natural.$fBitsNatural_$cxor_closure+2;
         const GHC.Natural.$fBitsNatural_$ccomplement_closure+1;
         const GHC.Natural.$fBitsNatural_$cshift_closure+2;
         const GHC.Natural.$fBitsNatural_$crotate_closure+2;
         const GHC.Natural.$fBitsNatural1_closure;
         const Data.Bits.$fBitsInteger_$cbit_closure+1;
         const GHC.Natural.$fBitsNatural_$csetBit_closure+2;
         const GHC.Natural.$fBitsNatural_$cclearBit_closure+2;
         const GHC.Natural.$fBitsNatural_$ccomplementBit_closure+2;
         const GHC.Natural.$fBitsNatural_$ctestBit_closure+2;
         const GHC.Natural.$fBitsNatural_$cbitSizeMaybe_closure+1;
         const GHC.Natural.$fBitsNatural_$cbitSize_closure;
         const GHC.Natural.$fBitsNatural_$cisSigned_closure+1;
         const GHC.Natural.$fBitsNatural_$cshiftL_closure+2;
         const GHC.Natural.$fBitsNatural_$cunsafeShiftL_closure+2;
         const GHC.Natural.$fBitsNatural_$cshiftR_closure+2;
         const GHC.Natural.$fBitsNatural_$cunsafeShiftR_closure+2;
         const GHC.Natural.$fBitsNatural_$crotateL_closure+2;
         const GHC.Natural.$fBitsNatural_$crotateR_closure+2;
         const GHC.Natural.$fBitsNatural_$cpopCount_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.593803907 UTC

[section ""data" . sat_s4bxD_closure" {
     sat_s4bxD_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.595487561 UTC

[section ""data" . sat_s4bxE_closure" {
     sat_s4bxE_closure:
         const :_con_info;
         const sat_s4bxD_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.597965881 UTC

[section ""data" . GHC.Natural.powModNatural1_closure" {
     GHC.Natural.powModNatural1_closure:
         const GHC.Natural.powModNatural1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.powModNatural1_entry() //  [R1]
         { []
         }
     {offset
       c4co5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4co6; else goto c4co7;
       c4co6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4co7: // global
           (_c4co2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4co2::I64 == 0) goto c4co4; else goto c4co3;
       c4co4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4co3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4co2::I64;
           R3 = sat_s4bxE_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.powModNatural1_info" {
     GHC.Natural.powModNatural1_info:
         const GHC.Natural.powModNatural1_entry;
         const 0;
         const 4294967317;
         const S4byh_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.607931444 UTC

[section ""data" . GHC.Natural.powModNatural_closure" {
     GHC.Natural.powModNatural_closure:
         const GHC.Natural.powModNatural_info;
         const 0;
 },
 section ""relreadonly" . u4cqL_srtd" {
     u4cqL_srtd:
         const S4byh_srt+80;
         const 53;
         const 8743316464075777;
 },
 GHC.Natural.powModNatural_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4coo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c4cop; else goto c4coq;
       c4cop: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.powModNatural_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4coq: // global
           I64[Sp - 32] = block_c4coj_info;
           _s4bxG::P64 = R3;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           _s4bxF::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _s4bxF::P64;
           P64[Sp - 16] = _s4bxG::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.powModNatural_info" {
     GHC.Natural.powModNatural_info:
         const GHC.Natural.powModNatural_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u4cqL_srtd;
 },
 section ""relreadonly" . u4cqM_srtd" {
     u4cqM_srtd:
         const S4byh_srt+80;
         const 53;
         const 7617416557233153;
 },
 _c4coj() //  [R1]
         { []
         }
     {offset
       c4coj: // global
           if (R1 == 1) goto c4con; else goto c4com;
       c4con: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4com: // global
           I64[Sp] = block_c4cot_info;
           R3 = GHC.Natural.powModNatural1_closure;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4coj_info" {
     block_c4coj_info:
         const _c4coj;
         const 3;
         const 18446744069414584350;
         const u4cqM_srtd;
 },
 section ""relreadonly" . u4cqN_srtd" {
     u4cqN_srtd:
         const S4byh_srt+160;
         const 43;
         const 7438883356673;
 },
 _c4cot() //  [R1]
         { []
         }
     {offset
       c4cot: // global
           if (R1 == 1) goto u4cqw; else goto c4coB;
       u4cqw: // global
           Sp = Sp + 32;
           call _c4cqs() args: 0, res: 0, upd: 0;
       c4coB: // global
           I64[Sp] = block_c4coy_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cot_info" {
     block_c4cot_info:
         const _c4cot;
         const 3;
         const 18446744069414584350;
         const u4cqN_srtd;
 },
 section ""relreadonly" . u4cqO_srtd" {
     u4cqO_srtd:
         const S4byh_srt+160;
         const 43;
         const 7438883356673;
 },
 _c4coy() //  [R1]
         { []
         }
     {offset
       c4coy: // global
           if (R1 == 1) goto u4cqx; else goto c4coI;
       u4cqx: // global
           Sp = Sp + 32;
           call _c4cqo() args: 0, res: 0, upd: 0;
       c4coI: // global
           I64[Sp] = block_c4coF_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4coy_info" {
     block_c4coy_info:
         const _c4coy;
         const 3;
         const 18446744069414584350;
         const u4cqO_srtd;
 },
 section ""relreadonly" . u4cqP_srtd" {
     u4cqP_srtd:
         const S4byh_srt+160;
         const 43;
         const 7438883356673;
 },
 _c4coF() //  [R1]
         { []
         }
     {offset
       c4coF: // global
           if (R1 == 1) goto u4cqy; else goto c4coP;
       u4cqy: // global
           Sp = Sp + 32;
           call _c4cqs() args: 0, res: 0, upd: 0;
       c4coP: // global
           I64[Sp] = block_c4coM_info;
           R3 = GHC.Natural.powModNatural1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4coF_info" {
     block_c4coF_info:
         const _c4coF;
         const 3;
         const 18446744069414584350;
         const u4cqP_srtd;
 },
 _c4cqs() //  []
         { []
         }
     {offset
       c4cqs: // global
           R1 = GHC.Natural.$fBitsNatural1_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u4cqQ_srtd" {
     u4cqQ_srtd:
         const S4byh_srt+160;
         const 43;
         const 7438883356673;
 },
 _c4coM() //  [R1]
         { []
         }
     {offset
       c4coM: // global
           if (R1 == 1) goto u4cqz; else goto c4cqc;
       u4cqz: // global
           Sp = Sp + 32;
           call _c4cqo() args: 0, res: 0, upd: 0;
       c4cqc: // global
           P64[Sp] = GHC.Natural.powModNatural1_closure;
           _s4bxO::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s4bxO::P64;
           call _c4coX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4coM_info" {
     block_c4coM_info:
         const _c4coM;
         const 3;
         const 18446744069414584350;
         const u4cqQ_srtd;
 },
 _c4cqo() //  []
         { []
         }
     {offset
       c4cqo: // global
           R1 = GHC.Natural.powModNatural1_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4coX() //  []
         { []
         }
     {offset
       c4coX: // global
           I64[Sp - 8] = block_c4coZ_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4cqI; else goto c4cp0;
       u4cqI: // global
           call _c4coZ(R1) args: 0, res: 0, upd: 0;
       c4cp0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u4cqR_srtd" {
     u4cqR_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4coZ() //  [R1]
         { []
         }
     {offset
       c4coZ: // global
           I64[Sp] = block_c4cp4_info;
           R3 = GHC.Natural.$seven_n_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.remInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4coZ_info" {
     block_c4coZ_info:
         const _c4coZ;
         const 260;
         const 18446744069414584350;
         const u4cqR_srtd;
 },
 section ""relreadonly" . u4cqS_srtd" {
     u4cqS_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cp4() //  [R1]
         { []
         }
     {offset
       c4cp4: // global
           I64[Sp] = block_c4cpa_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cp4_info" {
     block_c4cp4_info:
         const _c4cp4;
         const 4;
         const 18446744069414584350;
         const u4cqS_srtd;
 },
 section ""relreadonly" . u4cqT_srtd" {
     u4cqT_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cpa() //  [R1]
         { []
         }
     {offset
       c4cpa: // global
           if (R1 == 1) goto c4cpL; else goto c4cpy;
       c4cpL: // global
           I64[Sp] = block_c4cpJ_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c4cpy: // global
           _s4bxQ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c4cpf_info;
           R3 = P64[Sp + 24];
           R2 = _s4bxQ::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cpa_info" {
     block_c4cpa_info:
         const _c4cpa;
         const 4;
         const 18446744069414584350;
         const u4cqT_srtd;
 },
 section ""relreadonly" . u4cqU_srtd" {
     u4cqU_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cpJ() //  [R1]
         { []
         }
     {offset
       c4cpJ: // global
           if (R1 == 1) goto c4cqa; else goto c4cq0;
       c4cqa: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4cq0: // global
           I64[Sp] = block_c4cpP_info;
           R3 = 1;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cpJ_info" {
     block_c4cpJ_info:
         const _c4cpJ;
         const 4;
         const 18446744069414584350;
         const u4cqU_srtd;
 },
 section ""relreadonly" . u4cqV_srtd" {
     u4cqV_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cpP() //  [R1]
         { []
         }
     {offset
       c4cpP: // global
           I64[Sp] = block_c4cpT_info;
           _s4bxR::P64 = P64[Sp + 24];
           R3 = _s4bxR::P64;
           R2 = _s4bxR::P64;
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cpP_info" {
     block_c4cpP_info:
         const _c4cpP;
         const 132;
         const 18446744069414584350;
         const u4cqV_srtd;
 },
 section ""relreadonly" . u4cqW_srtd" {
     u4cqW_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cpT() //  [R1]
         { []
         }
     {offset
       c4cpT: // global
           I64[Sp] = block_c4cpX_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.modInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cpT_info" {
     block_c4cpT_info:
         const _c4cpT;
         const 132;
         const 18446744069414584350;
         const u4cqW_srtd;
 },
 section ""relreadonly" . u4cqX_srtd" {
     u4cqX_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cpX() //  [R1]
         { []
         }
     {offset
       c4cpX: // global
           _s4bxP::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp + 16] = _s4bxP::P64;
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c4coX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4cpX_info" {
     block_c4cpX_info:
         const _c4cpX;
         const 132;
         const 18446744069414584350;
         const u4cqX_srtd;
 },
 section ""relreadonly" . u4cqY_srtd" {
     u4cqY_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cpf() //  [R1]
         { []
         }
     {offset
       c4cpf: // global
           I64[Sp] = block_c4cpj_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.modInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cpf_info" {
     block_c4cpf_info:
         const _c4cpf;
         const 3;
         const 18446744069414584350;
         const u4cqY_srtd;
 },
 section ""relreadonly" . u4cqZ_srtd" {
     u4cqZ_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cpj() //  [R1]
         { []
         }
     {offset
       c4cpj: // global
           I64[Sp] = block_c4cpn_info;
           R3 = 1;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cpj_info" {
     block_c4cpj_info:
         const _c4cpj;
         const 3;
         const 18446744069414584350;
         const u4cqZ_srtd;
 },
 section ""relreadonly" . u4cr0_srtd" {
     u4cr0_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cpn() //  [R1]
         { []
         }
     {offset
       c4cpn: // global
           I64[Sp] = block_c4cpr_info;
           _s4bxR::P64 = P64[Sp + 16];
           R3 = _s4bxR::P64;
           R2 = _s4bxR::P64;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cpn_info" {
     block_c4cpn_info:
         const _c4cpn;
         const 3;
         const 18446744069414584350;
         const u4cr0_srtd;
 },
 section ""relreadonly" . u4cr1_srtd" {
     u4cr1_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cpr() //  [R1]
         { []
         }
     {offset
       c4cpr: // global
           I64[Sp] = block_c4cpv_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.modInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cpr_info" {
     block_c4cpr_info:
         const _c4cpr;
         const 3;
         const 18446744069414584350;
         const u4cr1_srtd;
 },
 section ""relreadonly" . u4cr2_srtd" {
     u4cr2_srtd:
         const S4byh_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cpv() //  [R1]
         { []
         }
     {offset
       c4cpv: // global
           _s4bxP::P64 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           _s4bxQ::P64 = P64[Sp + 8];
           P64[Sp + 8] = _s4bxP::P64;
           P64[Sp] = _s4bxQ::P64;
           call _c4coX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4cpv_info" {
     block_c4cpv_info:
         const _c4cpv;
         const 3;
         const 18446744069414584350;
         const u4cr2_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:04.651990301 UTC

[section ""relreadonly" . S4byh_srt" {
     S4byh_srt:
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Natural.$fEnumNatural_$ctoEnum_closure;
         const lvl1_r4bvD_closure;
         const GHC.Enum.$fEnumInteger_$cpred_closure;
         const GHC.Natural.$fBitsNatural1_closure;
         const GHC.Natural.$fEnumNatural_$cpred_closure;
         const lvl3_r4bvF_closure;
         const GHC.Enum.$fEnumInteger_$csucc_closure;
         const GHC.Integer.Type.divModInteger_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Natural.$fIntegralNatural_$cdivMod_closure;
         const GHC.Natural.$fIntegralNatural_$cquotRem_closure;
         const GHC.Exception.underflowException_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Natural.underflowError_closure;
         const GHC.Natural.$fNumNatural_$cnegate_closure;
         const GHC.Natural.naturalFromInteger_closure;
         const GHC.Natural.$fNumNatural_$c-_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$fIntegralInteger_$cquot_closure;
         const GHC.Real.$fIntegralInteger_$crem_closure;
         const GHC.Real.$fIntegralInteger_$cdiv_closure;
         const GHC.Real.$fIntegralInteger_$cmod_closure;
         const GHC.Enum.enumDeltaToInteger_closure;
         const GHC.Enum.$fEnumInteger_$cenumFromThen_closure;
         const GHC.Natural.$fEnumNatural_$cenumFromThen_closure;
         const sat_s4bwF_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.Natural.$fShowNatural_$cshow_closure;
         const GHC.Natural.$fShowNatural1_closure;
         const Data.Bits.$fBitsInteger_$cpopCount_closure;
         const Data.Bits.$fBitsInteger_$crotateR_closure;
         const Data.Bits.$fBitsInteger_$cshift_closure;
         const Data.Bits.$fBitsInteger_$cshiftR_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Bits.$fBitsInteger_$ccomplementBit_closure;
         const Data.Bits.$fBitsInteger_$cclearBit_closure;
         const Data.Bits.$fBitsInteger_$csetBit_closure;
         const lvl6_r4bvJ_closure;
         const sat_s4bx0_closure;
         const GHC.Natural.naturalToWordMaybe_closure;
         const GHC.Natural.naturalToWordMaybe1_closure;
         const GHC.Natural.$fReadNatural_go_closure;
         const GHC.Read.$fReadInteger2_closure;
         const GHC.Read.$fReadInteger_$sreadNumber_closure;
         const GHC.Natural.$fReadNatural_$creadsPrec_closure;
         const GHC.Natural.$fReadNatural4_closure;
         const GHC.Read.list_closure;
         const GHC.Natural.$fReadNatural2_closure;
         const GHC.Natural.$fReadNatural1_closure;
         const GHC.Natural.$fReadNatural_$creadList_closure;
         const GHC.Natural.isValidNatural_closure;
         const GHC.Natural.$fBitsNatural1_closure;
         const GHC.Natural.$fNumNatural_$c-_closure;
         const GHC.Natural.minusNaturalMaybe_closure;
         const sat_s4bxE_closure;
         const GHC.Integer.Type.modInteger_closure;
         const GHC.Integer.Type.shiftRInteger_closure;
         const GHC.Natural.powModNatural_closure;
         const GHC.Natural.$seven_n_closure;
         const GHC.Natural.powModNatural1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.57965998 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:05.581356107 UTC

[section ""data" . GHC.Natural.$fNumNatural_$cabs_closure" {
     GHC.Natural.$fNumNatural_$cabs_closure:
         const GHC.Natural.$fNumNatural_$cabs_info;
 },
 GHC.Natural.$fNumNatural_$cabs_entry() //  [R2]
         { []
         }
     {offset
       c4cuN: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$cabs_info" {
     GHC.Natural.$fNumNatural_$cabs_info:
         const GHC.Natural.$fNumNatural_$cabs_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.587622101 UTC

[section ""data" . GHC.Natural.$fRealNatural_$ctoRational_closure" {
     GHC.Natural.$fRealNatural_$ctoRational_closure:
         const GHC.Natural.$fRealNatural_$ctoRational_info;
         const 0;
 },
 GHC.Natural.$fRealNatural_$ctoRational_entry() //  [R2]
         { []
         }
     {offset
       c4cv0: // global
           R2 = R2;
           call GHC.Real.$fFractionalRatio_$s$cfromInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fRealNatural_$ctoRational_info" {
     GHC.Natural.$fRealNatural_$ctoRational_info:
         const GHC.Natural.$fRealNatural_$ctoRational_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S4cv3_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.591884769 UTC

[section ""data" . GHC.Natural.$fEnumNatural_$cfromEnum_closure" {
     GHC.Natural.$fEnumNatural_$cfromEnum_closure:
         const GHC.Natural.$fEnumNatural_$cfromEnum_info;
 },
 GHC.Natural.$fEnumNatural_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c4cvc: // global
           R2 = R2;
           call GHC.Enum.$fEnumInteger_$cfromEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fEnumNatural_$cfromEnum_info" {
     GHC.Natural.$fEnumNatural_$cfromEnum_info:
         const GHC.Natural.$fEnumNatural_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.595274961 UTC

[section ""cstring" . lvl_r4bvC_bytes" {
     lvl_r4bvC_bytes:
         I8[] [78,97,116,117,114,97,108,46,116,111,69,110,117,109,58,32,110,101,103,97,116,105,118,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.597867031 UTC

[section ""data" . lvl1_r4bvD_closure" {
     lvl1_r4bvD_closure:
         const lvl1_r4bvD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r4bvD_entry() //  [R1]
         { []
         }
     {offset
       c4cvs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4cvt; else goto c4cvu;
       c4cvt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cvu: // global
           (_c4cvn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cvn::I64 == 0) goto c4cvp; else goto c4cvo;
       c4cvp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cvo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cvn::I64;
           I64[Sp - 24] = block_c4cvq_info;
           R2 = lvl_r4bvC_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r4bvD_info" {
     lvl1_r4bvD_info:
         const lvl1_r4bvD_entry;
         const 0;
         const 4294967317;
         const S4cv3_srt+8;
 },
 _c4cvq() //  [R1]
         { []
         }
     {offset
       c4cvq: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4cvq_info" {
     block_c4cvq_info:
         const _c4cvq;
         const 0;
         const 4294967326;
         const S4cv3_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.605774013 UTC

[section ""data" . GHC.Natural.$fEnumNatural_$ctoEnum_closure" {
     GHC.Natural.$fEnumNatural_$ctoEnum_closure:
         const GHC.Natural.$fEnumNatural_$ctoEnum_info;
         const 0;
 },
 GHC.Natural.$fEnumNatural_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c4cvR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cvS; else goto c4cvT;
       c4cvS: // global
           R2 = R2;
           R1 = GHC.Natural.$fEnumNatural_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cvT: // global
           I64[Sp - 8] = block_c4cvO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4cw2; else goto c4cvP;
       u4cw2: // global
           call _c4cvO(R1) args: 0, res: 0, upd: 0;
       c4cvP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fEnumNatural_$ctoEnum_info" {
     GHC.Natural.$fEnumNatural_$ctoEnum_info:
         const GHC.Natural.$fEnumNatural_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4cv3_srt+16;
 },
 _c4cvO() //  [R1]
         { []
         }
     {offset
       c4cvO: // global
           _s4csx::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s4csx::I64, 0)) goto c4cw0; else goto c4cw1;
       c4cw0: // global
           R2 = _s4csx::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 0, upd: 8;
       c4cw1: // global
           R1 = lvl1_r4bvD_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cvO_info" {
     block_c4cvO_info:
         const _c4cvO;
         const 0;
         const 4294967326;
         const S4cv3_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.61172984 UTC

[section ""data" . GHC.Natural.$fBitsNatural1_closure" {
     GHC.Natural.$fBitsNatural1_closure:
         const GHC.Natural.$fBitsNatural1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.$fBitsNatural1_entry() //  [R1]
         { []
         }
     {offset
       c4cwk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cwl; else goto c4cwm;
       c4cwl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cwm: // global
           (_c4cwh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cwh::I64 == 0) goto c4cwj; else goto c4cwi;
       c4cwj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cwi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cwh::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural1_info" {
     GHC.Natural.$fBitsNatural1_info:
         const GHC.Natural.$fBitsNatural1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.619514393 UTC

[section ""cstring" . lvl2_r4bvE_bytes" {
     lvl2_r4bvE_bytes:
         I8[] [78,97,116,117,114,97,108,46,112,114,101,100,58,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.623377046 UTC

[section ""data" . lvl3_r4bvF_closure" {
     lvl3_r4bvF_closure:
         const lvl3_r4bvF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r4bvF_entry() //  [R1]
         { []
         }
     {offset
       c4cwG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4cwH; else goto c4cwI;
       c4cwH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cwI: // global
           (_c4cwB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cwB::I64 == 0) goto c4cwD; else goto c4cwC;
       c4cwD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cwC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cwB::I64;
           I64[Sp - 24] = block_c4cwE_info;
           R2 = lvl2_r4bvE_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r4bvF_info" {
     lvl3_r4bvF_info:
         const lvl3_r4bvF_entry;
         const 0;
         const 4294967317;
         const S4cv3_srt+8;
 },
 _c4cwE() //  [R1]
         { []
         }
     {offset
       c4cwE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4cwE_info" {
     block_c4cwE_info:
         const _c4cwE;
         const 0;
         const 4294967326;
         const S4cv3_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.632831626 UTC

[section ""data" . GHC.Natural.$fEnumNatural_$cpred_closure" {
     GHC.Natural.$fEnumNatural_$cpred_closure:
         const GHC.Natural.$fEnumNatural_$cpred_info;
         const 0;
 },
 GHC.Natural.$fEnumNatural_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c4cx7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cx8; else goto c4cx9;
       c4cx8: // global
           R2 = R2;
           R1 = GHC.Natural.$fEnumNatural_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cx9: // global
           I64[Sp - 16] = block_c4cx2_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           _s4csA::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s4csA::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fEnumNatural_$cpred_info" {
     GHC.Natural.$fEnumNatural_$cpred_info:
         const GHC.Natural.$fEnumNatural_$cpred_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S4cv3_srt+32;
 },
 _c4cx2() //  [R1]
         { []
         }
     {offset
       c4cx2: // global
           if (R1 == 1) goto c4cx6; else goto c4cx5;
       c4cx6: // global
           R1 = lvl3_r4bvF_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4cx5: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Enum.$fEnumInteger_$cpred_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cx2_info" {
     block_c4cx2_info:
         const _c4cx2;
         const 1;
         const 38654705694;
         const S4cv3_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.640448318 UTC

[section ""data" . GHC.Natural.$fEnumNatural_$csucc_closure" {
     GHC.Natural.$fEnumNatural_$csucc_closure:
         const GHC.Natural.$fEnumNatural_$csucc_info;
         const 0;
 },
 GHC.Natural.$fEnumNatural_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c4cxu: // global
           R2 = R2;
           call GHC.Enum.$fEnumInteger_$csucc_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fEnumNatural_$csucc_info" {
     GHC.Natural.$fEnumNatural_$csucc_info:
         const GHC.Natural.$fEnumNatural_$csucc_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S4cv3_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.644804365 UTC

[section ""data" . $ctoInteger_r4bvG_closure" {
     $ctoInteger_r4bvG_closure:
         const $ctoInteger_r4bvG_info;
 },
 $ctoInteger_r4bvG_entry() //  [R2]
         { []
         }
     {offset
       c4cxF: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $ctoInteger_r4bvG_info" {
     $ctoInteger_r4bvG_info:
         const $ctoInteger_r4bvG_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.649637019 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$ctoInteger_closure" {
     GHC.Natural.$fIntegralNatural_$ctoInteger_closure:
         const GHC.Natural.$fIntegralNatural_$ctoInteger_info;
 },
 GHC.Natural.$fIntegralNatural_$ctoInteger_entry() //  [R2]
         { []
         }
     {offset
       c4cxS: // global
           R2 = R2;
           call $ctoInteger_r4bvG_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$ctoInteger_info" {
     GHC.Natural.$fIntegralNatural_$ctoInteger_info:
         const GHC.Natural.$fIntegralNatural_$ctoInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.656403722 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$cdivMod_closure" {
     GHC.Natural.$fIntegralNatural_$cdivMod_closure:
         const GHC.Natural.$fIntegralNatural_$cdivMod_info;
         const 0;
 },
 ds2_s4csF_entry() //  [R1]
         { []
         }
     {offset
       c4cyc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c4cyd; else goto c4cye;
       c4cyd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cye: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c4cy7_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           _s4csE::P64 = P64[R1 + 24];
           R2 = _s4csE::P64;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s4csE::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s4csF_info" {
     ds2_s4csF_info:
         const ds2_s4csF_entry;
         const 2;
         const 210453397522;
         const S4cv3_srt+40;
 },
 _c4cy7() //  [R1]
         { []
         }
     {offset
       c4cy7: // global
           if (R1 == 1) goto c4cyb; else goto c4cya;
       c4cyb: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c4cya: // global
           _s4csE::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c4cyh_info;
           R3 = _s4csE::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.divModInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c4cy7_info" {
     block_c4cy7_info:
         const _c4cy7;
         const 2;
         const 12884901918;
         const S4cv3_srt+72;
 },
 _c4cyh() //  [R1, R2]
         { []
         }
     {offset
       c4cyh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4cyn; else goto c4cym;
       c4cyn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c4cym: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4cyh_info" {
     block_c4cyh_info:
         const _c4cyh;
         const 0;
         const 30;
 },
 GHC.Natural.$fIntegralNatural_$cdivMod_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cyu: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c4cyy; else goto c4cyx;
       c4cyy: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fIntegralNatural_$cdivMod_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4cyx: // global
           I64[Hp - 96] = ds2_s4csF_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c4cy3::P64 = Hp - 96;
           P64[Hp - 48] = _c4cy3::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c4cy3::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$cdivMod_info" {
     GHC.Natural.$fIntegralNatural_$cdivMod_info:
         const GHC.Natural.$fIntegralNatural_$cdivMod_entry;
         const 0;
         const 485331304462;
         const 8589934607;
         const S4cv3_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.669054624 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$cquotRem_closure" {
     GHC.Natural.$fIntegralNatural_$cquotRem_closure:
         const GHC.Natural.$fIntegralNatural_$cquotRem_info;
         const 0;
 },
 ds2_s4csU_entry() //  [R1]
         { []
         }
     {offset
       c4czd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c4cze; else goto c4czf;
       c4cze: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4czf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c4cz8_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           _s4csT::P64 = P64[R1 + 24];
           R2 = _s4csT::P64;
           P64[Sp - 32] = P64[R1 + 16];
           P64[Sp - 24] = _s4csT::P64;
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s4csU_info" {
     ds2_s4csU_info:
         const ds2_s4csU_entry;
         const 2;
         const 141733920786;
         const S4cv3_srt+40;
 },
 _c4cz8() //  [R1]
         { []
         }
     {offset
       c4cz8: // global
           if (R1 == 1) goto c4czc; else goto c4czb;
       c4czc: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       c4czb: // global
           _s4csT::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c4czi_info;
           R3 = _s4csT::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.quotRemInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c4cz8_info" {
     block_c4cz8_info:
         const _c4cz8;
         const 2;
         const 4294967326;
         const S4cv3_srt+80;
 },
 _c4czi() //  [R1, R2]
         { []
         }
     {offset
       c4czi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4czo; else goto c4czn;
       c4czo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c4czn: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4czi_info" {
     block_c4czi_info:
         const _c4czi;
         const 0;
         const 30;
 },
 GHC.Natural.$fIntegralNatural_$cquotRem_entry() //  [R2, R3]
         { []
         }
     {offset
       c4czv: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c4czz; else goto c4czy;
       c4czz: // global
           HpAlloc = 104;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fIntegralNatural_$cquotRem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4czy: // global
           I64[Hp - 96] = ds2_s4csU_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _c4cz4::P64 = Hp - 96;
           P64[Hp - 48] = _c4cz4::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _c4cz4::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$cquotRem_info" {
     GHC.Natural.$fIntegralNatural_$cquotRem_info:
         const GHC.Natural.$fIntegralNatural_$cquotRem_entry;
         const 0;
         const 691489734670;
         const 8589934607;
         const S4cv3_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.678554383 UTC

[section ""data" . GHC.Natural.$fEqNatural_closure" {
     GHC.Natural.$fEqNatural_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Integer.Type.eqInteger_closure+2;
         const GHC.Integer.Type.neqInteger_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.680388704 UTC

[section ""data" . GHC.Natural.$fOrdNatural_closure" {
     GHC.Natural.$fOrdNatural_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Natural.$fEqNatural_closure+1;
         const GHC.Integer.Type.compareInteger_closure+2;
         const GHC.Integer.Type.ltInteger_closure+2;
         const GHC.Integer.Type.leInteger_closure+2;
         const GHC.Integer.Type.gtInteger_closure+2;
         const GHC.Integer.Type.geInteger_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmax_closure+2;
         const GHC.Integer.Type.$fOrdInteger_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.68291507 UTC

[section ""data" . GHC.Natural.underflowError_closure" {
     GHC.Natural.underflowError_closure:
         const GHC.Natural.underflowError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.underflowError_entry() //  [R1]
         { []
         }
     {offset
       c4cA9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cAa; else goto c4cAb;
       c4cAa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cAb: // global
           (_c4cA6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cA6::I64 == 0) goto c4cA8; else goto c4cA7;
       c4cA8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cA7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cA6::I64;
           R1 = GHC.Exception.underflowException_closure;
           Sp = Sp - 16;
           call stg_raise#(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.underflowError_info" {
     GHC.Natural.underflowError_info:
         const GHC.Natural.underflowError_entry;
         const 0;
         const 4294967317;
         const S4cv3_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.687617597 UTC

[section ""data" . GHC.Natural.$fNumNatural_$cnegate_closure" {
     GHC.Natural.$fNumNatural_$cnegate_closure:
         const GHC.Natural.$fNumNatural_$cnegate_info;
         const 0;
 },
 GHC.Natural.$fNumNatural_$cnegate_entry() //  [R2]
         { []
         }
     {offset
       c4cAq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cAr; else goto c4cAs;
       c4cAr: // global
           R2 = R2;
           R1 = GHC.Natural.$fNumNatural_$cnegate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cAs: // global
           I64[Sp - 8] = block_c4cAo_info;
           R3 = R2;
           R2 = GHC.Natural.$fBitsNatural1_closure;
           Sp = Sp - 8;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$cnegate_info" {
     GHC.Natural.$fNumNatural_$cnegate_info:
         const GHC.Natural.$fNumNatural_$cnegate_entry;
         const 0;
         const 15397457756174;
         const 4294967301;
         const S4cv3_srt+40;
 },
 _c4cAo() //  [R1]
         { []
         }
     {offset
       c4cAo: // global
           I64[Sp - 8] = block_c4cAv_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cAo_info" {
     block_c4cAo_info:
         const _c4cAo;
         const 0;
         const 4402341478430;
         const S4cv3_srt+40;
 },
 _c4cAv() //  [R1]
         { []
         }
     {offset
       c4cAv: // global
           if (R1 == 1) goto c4cAG; else goto c4cAC;
       c4cAG: // global
           R1 = GHC.Natural.underflowError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4cAC: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cAv_info" {
     block_c4cAv_info:
         const _c4cAv;
         const 1;
         const 4294967326;
         const S4cv3_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.695606679 UTC

[section ""data" . GHC.Natural.naturalFromInteger_closure" {
     GHC.Natural.naturalFromInteger_closure:
         const GHC.Natural.naturalFromInteger_info;
         const 0;
 },
 GHC.Natural.naturalFromInteger_entry() //  [R2]
         { []
         }
     {offset
       c4cB5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cB6; else goto c4cB7;
       c4cB6: // global
           R2 = R2;
           R1 = GHC.Natural.naturalFromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cB7: // global
           I64[Sp - 16] = block_c4cB0_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           _s4cta::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s4cta::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.naturalFromInteger_info" {
     GHC.Natural.naturalFromInteger_info:
         const GHC.Natural.naturalFromInteger_entry;
         const 0;
         const 21994527522830;
         const 4294967301;
         const S4cv3_srt+40;
 },
 _c4cB0() //  [R1]
         { []
         }
     {offset
       c4cB0: // global
           if (R1 == 1) goto c4cB4; else goto c4cB3;
       c4cB4: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4cB3: // global
           R1 = GHC.Natural.underflowError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cB0_info" {
     block_c4cB0_info:
         const _c4cB0;
         const 1;
         const 4294967326;
         const S4cv3_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.701871198 UTC

[section ""data" . GHC.Natural.$fNumNatural_$c-_closure" {
     GHC.Natural.$fNumNatural_$c-_closure:
         const GHC.Natural.$fNumNatural_$c-_info;
         const 0;
 },
 GHC.Natural.$fNumNatural_$c-_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cBv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cBw; else goto c4cBx;
       c4cBw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fNumNatural_$c-_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4cBx: // global
           I64[Sp - 8] = block_c4cBt_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$c-_info" {
     GHC.Natural.$fNumNatural_$c-_info:
         const GHC.Natural.$fNumNatural_$c-_entry;
         const 0;
         const 41785736822798;
         const 8589934607;
         const S4cv3_srt+40;
 },
 _c4cBt() //  [R1]
         { []
         }
     {offset
       c4cBt: // global
           I64[Sp - 8] = block_c4cBA_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cBt_info" {
     block_c4cBt_info:
         const _c4cBt;
         const 0;
         const 4402341478430;
         const S4cv3_srt+40;
 },
 _c4cBA() //  [R1]
         { []
         }
     {offset
       c4cBA: // global
           if (R1 == 1) goto c4cBL; else goto c4cBH;
       c4cBL: // global
           R1 = GHC.Natural.underflowError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4cBH: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cBA_info" {
     block_c4cBA_info:
         const _c4cBA;
         const 1;
         const 4294967326;
         const S4cv3_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.709998611 UTC

[section ""data" . GHC.Natural.$fNumNatural_$c+_closure" {
     GHC.Natural.$fNumNatural_$c+_closure:
         const GHC.Natural.$fNumNatural_$c+_info;
         const 0;
 },
 GHC.Natural.$fNumNatural_$c+_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cC5: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$c+_info" {
     GHC.Natural.$fNumNatural_$c+_info:
         const GHC.Natural.$fNumNatural_$c+_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.713353891 UTC

[section ""data" . GHC.Natural.$fNumNatural_$c*_closure" {
     GHC.Natural.$fNumNatural_$c*_closure:
         const GHC.Natural.$fNumNatural_$c*_info;
         const 0;
 },
 GHC.Natural.$fNumNatural_$c*_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cCg: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$c*_info" {
     GHC.Natural.$fNumNatural_$c*_info:
         const GHC.Natural.$fNumNatural_$c*_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.71656935 UTC

[section ""data" . GHC.Natural.$fNumNatural_$csignum_closure" {
     GHC.Natural.$fNumNatural_$csignum_closure:
         const GHC.Natural.$fNumNatural_$csignum_info;
 },
 GHC.Natural.$fNumNatural_$csignum_entry() //  [R2]
         { []
         }
     {offset
       c4cCr: // global
           R2 = R2;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fNumNatural_$csignum_info" {
     GHC.Natural.$fNumNatural_$csignum_info:
         const GHC.Natural.$fNumNatural_$csignum_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.719773434 UTC

[section ""data" . GHC.Natural.$fNumNatural_closure" {
     GHC.Natural.$fNumNatural_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Natural.$fNumNatural_$c+_closure+2;
         const GHC.Natural.$fNumNatural_$c-_closure+2;
         const GHC.Natural.$fNumNatural_$c*_closure+2;
         const GHC.Natural.$fNumNatural_$cnegate_closure+1;
         const GHC.Natural.$fNumNatural_$cabs_closure+1;
         const GHC.Natural.$fNumNatural_$csignum_closure+1;
         const GHC.Natural.naturalFromInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.721619856 UTC

[section ""data" . GHC.Natural.$fRealNatural_closure" {
     GHC.Natural.$fRealNatural_closure:
         const GHC.Real.C:Real_con_info;
         const GHC.Natural.$fNumNatural_closure+1;
         const GHC.Natural.$fOrdNatural_closure+1;
         const GHC.Natural.$fRealNatural_$ctoRational_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.72380748 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$cquot_closure" {
     GHC.Natural.$fIntegralNatural_$cquot_closure:
         const GHC.Natural.$fIntegralNatural_$cquot_info;
         const 0;
 },
 GHC.Natural.$fIntegralNatural_$cquot_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cCE: // global
           R3 = R3;
           R2 = R2;
           call GHC.Real.$fIntegralInteger_$cquot_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$cquot_info" {
     GHC.Natural.$fIntegralNatural_$cquot_info:
         const GHC.Natural.$fIntegralNatural_$cquot_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.72755948 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$crem_closure" {
     GHC.Natural.$fIntegralNatural_$crem_closure:
         const GHC.Natural.$fIntegralNatural_$crem_info;
         const 0;
 },
 GHC.Natural.$fIntegralNatural_$crem_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cCP: // global
           R3 = R3;
           R2 = R2;
           call GHC.Real.$fIntegralInteger_$crem_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$crem_info" {
     GHC.Natural.$fIntegralNatural_$crem_info:
         const GHC.Natural.$fIntegralNatural_$crem_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.731215772 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$cdiv_closure" {
     GHC.Natural.$fIntegralNatural_$cdiv_closure:
         const GHC.Natural.$fIntegralNatural_$cdiv_info;
         const 0;
 },
 GHC.Natural.$fIntegralNatural_$cdiv_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cD0: // global
           R3 = R3;
           R2 = R2;
           call GHC.Real.$fIntegralInteger_$cdiv_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$cdiv_info" {
     GHC.Natural.$fIntegralNatural_$cdiv_info:
         const GHC.Natural.$fIntegralNatural_$cdiv_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.735922359 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_$cmod_closure" {
     GHC.Natural.$fIntegralNatural_$cmod_closure:
         const GHC.Natural.$fIntegralNatural_$cmod_info;
         const 0;
 },
 GHC.Natural.$fIntegralNatural_$cmod_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cDb: // global
           R3 = R3;
           R2 = R2;
           call GHC.Real.$fIntegralInteger_$cmod_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fIntegralNatural_$cmod_info" {
     GHC.Natural.$fIntegralNatural_$cmod_info:
         const GHC.Natural.$fIntegralNatural_$cmod_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.741153365 UTC

[section ""data" . GHC.Natural.$fEnumNatural_$cenumFromThen_closure" {
     GHC.Natural.$fEnumNatural_$cenumFromThen_closure:
         const GHC.Natural.$fEnumNatural_$cenumFromThen_info;
         const 0;
 },
 GHC.Natural.$fEnumNatural_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cDr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4cDs; else goto c4cDt;
       c4cDs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fEnumNatural_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4cDt: // global
           I64[Sp - 24] = block_c4cDm_info;
           _s4cth::P64 = R3;
           R3 = R3;
           _s4ctg::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s4ctg::P64;
           P64[Sp - 8] = _s4cth::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fEnumNatural_$cenumFromThen_info" {
     GHC.Natural.$fEnumNatural_$cenumFromThen_info:
         const GHC.Natural.$fEnumNatural_$cenumFromThen_entry;
         const 0;
         const 31527400709816334;
         const 8589934607;
         const S4cv3_srt+40;
 },
 _c4cDm() //  [R1]
         { []
         }
     {offset
       c4cDm: // global
           _s4ctg::P64 = P64[Sp + 8];
           _s4cth::P64 = P64[Sp + 16];
           if (R1 == 1) goto c4cDq; else goto c4cDp;
       c4cDq: // global
           R3 = _s4cth::P64;
           R2 = _s4ctg::P64;
           Sp = Sp + 24;
           call GHC.Enum.$fEnumInteger_$cenumFromThen_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
       c4cDp: // global
           I64[Sp] = block_c4cDw_info;
           R3 = _s4ctg::P64;
           R2 = _s4cth::P64;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cDm_info" {
     block_c4cDm_info:
         const _c4cDm;
         const 2;
         const 13513002200334366;
         const S4cv3_srt+40;
 },
 _c4cDw() //  [R1]
         { []
         }
     {offset
       c4cDw: // global
           R4 = GHC.Natural.$fBitsNatural1_closure;
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Enum.enumDeltaToInteger_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cDw_info" {
     block_c4cDw_info:
         const _c4cDw;
         const 130;
         const 4503603922337822;
         const S4cv3_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.748372349 UTC

[section ""data" . GHC.Natural.$fEnumNatural_closure" {
     GHC.Natural.$fEnumNatural_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Natural.$fEnumNatural_$csucc_closure+1;
         const GHC.Natural.$fEnumNatural_$cpred_closure+1;
         const GHC.Natural.$fEnumNatural_$ctoEnum_closure+1;
         const GHC.Natural.$fEnumNatural_$cfromEnum_closure+1;
         const GHC.Enum.$fEnumInteger_$cenumFrom_closure+1;
         const GHC.Natural.$fEnumNatural_$cenumFromThen_closure+2;
         const GHC.Enum.$fEnumInteger_$cenumFromTo_closure+2;
         const GHC.Enum.$fEnumInteger_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.750240798 UTC

[section ""data" . GHC.Natural.$fIntegralNatural_closure" {
     GHC.Natural.$fIntegralNatural_closure:
         const GHC.Real.C:Integral_con_info;
         const GHC.Natural.$fRealNatural_closure+1;
         const GHC.Natural.$fEnumNatural_closure+1;
         const GHC.Natural.$fIntegralNatural_$cquot_closure+2;
         const GHC.Natural.$fIntegralNatural_$crem_closure+2;
         const GHC.Natural.$fIntegralNatural_$cdiv_closure+2;
         const GHC.Natural.$fIntegralNatural_$cmod_closure+2;
         const GHC.Natural.$fIntegralNatural_$cquotRem_closure+2;
         const GHC.Natural.$fIntegralNatural_$cdivMod_closure+2;
         const GHC.Natural.$fIntegralNatural_$ctoInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.752141581 UTC

[section ""data" . sat_s4ctk_closure" {
     sat_s4ctk_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.753870928 UTC

[section ""data" . sat_s4ctl_closure" {
     sat_s4ctl_closure:
         const :_con_info;
         const sat_s4ctk_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.756412735 UTC

[section ""data" . GHC.Natural.$seven_n_closure" {
     GHC.Natural.$seven_n_closure:
         const GHC.Natural.$seven_n_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.$seven_n_entry() //  [R1]
         { []
         }
     {offset
       c4cE2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cE3; else goto c4cE4;
       c4cE3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cE4: // global
           (_c4cDZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cDZ::I64 == 0) goto c4cE1; else goto c4cE0;
       c4cE1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cE0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cDZ::I64;
           R3 = sat_s4ctl_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.$seven_n_info" {
     GHC.Natural.$seven_n_info:
         const GHC.Natural.$seven_n_entry;
         const 0;
         const 4294967317;
         const S4cv3_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.761050527 UTC

[section ""data" . GHC.Natural.$fShowNatural_$cshow_closure" {
     GHC.Natural.$fShowNatural_$cshow_closure:
         const GHC.Natural.$fShowNatural_$cshow_info;
         const 0;
 },
 GHC.Natural.$fShowNatural_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c4cEl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cEm; else goto c4cEn;
       c4cEm: // global
           R2 = R2;
           R1 = GHC.Natural.$fShowNatural_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cEn: // global
           I64[Sp - 8] = block_c4cEi_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = R2;
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fShowNatural_$cshow_info" {
     GHC.Natural.$fShowNatural_$cshow_info:
         const GHC.Natural.$fShowNatural_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4cv3_srt+232;
 },
 _c4cEi() //  [R1, R2]
         { []
         }
     {offset
       c4cEi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4cEq; else goto c4cEp;
       c4cEq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c4cEp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cEi_info" {
     block_c4cEi_info:
         const _c4cEi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.770141336 UTC

[section ""data" . GHC.Natural.$fShowNatural1_closure" {
     GHC.Natural.$fShowNatural1_closure:
         const GHC.Natural.$fShowNatural1_info;
         const 0;
 },
 GHC.Natural.$fShowNatural1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cEK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cEL; else goto c4cEM;
       c4cEL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fShowNatural1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4cEM: // global
           I64[Sp - 8] = block_c4cEH_info;
           R4 = R3;
           R3 = R2;
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fShowNatural1_info" {
     GHC.Natural.$fShowNatural1_info:
         const GHC.Natural.$fShowNatural1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S4cv3_srt+232;
 },
 _c4cEH() //  [R1, R2]
         { []
         }
     {offset
       c4cEH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4cEP; else goto c4cEO;
       c4cEP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c4cEO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cEH_info" {
     block_c4cEH_info:
         const _c4cEH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.777943144 UTC

[section ""data" . GHC.Natural.$fShowNatural_$cshowList_closure" {
     GHC.Natural.$fShowNatural_$cshowList_closure:
         const GHC.Natural.$fShowNatural_$cshowList_info;
         const 0;
 },
 GHC.Natural.$fShowNatural_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cF5: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Natural.$fShowNatural1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fShowNatural_$cshowList_info" {
     GHC.Natural.$fShowNatural_$cshowList_info:
         const GHC.Natural.$fShowNatural_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.781375395 UTC

[section ""data" . GHC.Natural.$fShowNatural_closure" {
     GHC.Natural.$fShowNatural_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Show.$fShowInteger_$cshowsPrec_closure+3;
         const GHC.Natural.$fShowNatural_$cshow_closure+1;
         const GHC.Natural.$fShowNatural_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.78368493 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cpopCount_closure" {
     GHC.Natural.$fBitsNatural_$cpopCount_closure:
         const GHC.Natural.$fBitsNatural_$cpopCount_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cpopCount_entry() //  [R2]
         { []
         }
     {offset
       c4cFh: // global
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cpopCount_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cpopCount_info" {
     GHC.Natural.$fBitsNatural_$cpopCount_info:
         const GHC.Natural.$fBitsNatural_$cpopCount_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S4cv3_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.787610386 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$crotateR_closure" {
     GHC.Natural.$fBitsNatural_$crotateR_closure:
         const GHC.Natural.$fBitsNatural_$crotateR_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$crotateR_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cFs: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$crotateR_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$crotateR_info" {
     GHC.Natural.$fBitsNatural_$crotateR_info:
         const GHC.Natural.$fBitsNatural_$crotateR_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.79137516 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$crotateL_closure" {
     GHC.Natural.$fBitsNatural_$crotateL_closure:
         const GHC.Natural.$fBitsNatural_$crotateL_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$crotateL_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cFD: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$crotateL_info" {
     GHC.Natural.$fBitsNatural_$crotateL_info:
         const GHC.Natural.$fBitsNatural_$crotateL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.795063732 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cshiftR_closure" {
     GHC.Natural.$fBitsNatural_$cshiftR_closure:
         const GHC.Natural.$fBitsNatural_$cshiftR_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cshiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cFO: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshiftR_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cshiftR_info" {
     GHC.Natural.$fBitsNatural_$cshiftR_info:
         const GHC.Natural.$fBitsNatural_$cshiftR_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.798602083 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cshiftL_closure" {
     GHC.Natural.$fBitsNatural_$cshiftL_closure:
         const GHC.Natural.$fBitsNatural_$cshiftL_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cshiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cFZ: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cshiftL_info" {
     GHC.Natural.$fBitsNatural_$cshiftL_info:
         const GHC.Natural.$fBitsNatural_$cshiftL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.802700522 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cisSigned_closure" {
     GHC.Natural.$fBitsNatural_$cisSigned_closure:
         const GHC.Natural.$fBitsNatural_$cisSigned_info;
 },
 GHC.Natural.$fBitsNatural_$cisSigned_entry() //  []
         { []
         }
     {offset
       c4cGa: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cisSigned_info" {
     GHC.Natural.$fBitsNatural_$cisSigned_info:
         const GHC.Natural.$fBitsNatural_$cisSigned_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.806007925 UTC

[section ""cstring" . lvl4_r4bvH_bytes" {
     lvl4_r4bvH_bytes:
         I8[] [78,97,116,117,114,97,108,58,32,98,105,116,83,105,122,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.809094234 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cbitSize_closure" {
     GHC.Natural.$fBitsNatural_$cbitSize_closure:
         const GHC.Natural.$fBitsNatural_$cbitSize_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cbitSize_entry() //  [R1]
         { []
         }
     {offset
       c4cGs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4cGt; else goto c4cGu;
       c4cGt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cGu: // global
           (_c4cGn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cGn::I64 == 0) goto c4cGp; else goto c4cGo;
       c4cGp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cGo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cGn::I64;
           I64[Sp - 24] = block_c4cGq_info;
           R2 = lvl4_r4bvH_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cbitSize_info" {
     GHC.Natural.$fBitsNatural_$cbitSize_info:
         const GHC.Natural.$fBitsNatural_$cbitSize_entry;
         const 0;
         const 4294967317;
         const S4cv3_srt+288;
 },
 _c4cGq() //  [R1]
         { []
         }
     {offset
       c4cGq: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4cGq_info" {
     block_c4cGq_info:
         const _c4cGq;
         const 0;
         const 4294967326;
         const S4cv3_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.814554067 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cbitSizeMaybe_closure" {
     GHC.Natural.$fBitsNatural_$cbitSizeMaybe_closure:
         const GHC.Natural.$fBitsNatural_$cbitSizeMaybe_info;
 },
 GHC.Natural.$fBitsNatural_$cbitSizeMaybe_entry() //  []
         { []
         }
     {offset
       c4cGO: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cbitSizeMaybe_info" {
     GHC.Natural.$fBitsNatural_$cbitSizeMaybe_info:
         const GHC.Natural.$fBitsNatural_$cbitSizeMaybe_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.818003412 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$ctestBit_closure" {
     GHC.Natural.$fBitsNatural_$ctestBit_closure:
         const GHC.Natural.$fBitsNatural_$ctestBit_info;
 },
 GHC.Natural.$fBitsNatural_$ctestBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cH1: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$ctestBit_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$ctestBit_info" {
     GHC.Natural.$fBitsNatural_$ctestBit_info:
         const GHC.Natural.$fBitsNatural_$ctestBit_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.821347487 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$ccomplementBit_closure" {
     GHC.Natural.$fBitsNatural_$ccomplementBit_closure:
         const GHC.Natural.$fBitsNatural_$ccomplementBit_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$ccomplementBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cHc: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$ccomplementBit_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$ccomplementBit_info" {
     GHC.Natural.$fBitsNatural_$ccomplementBit_info:
         const GHC.Natural.$fBitsNatural_$ccomplementBit_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.824685813 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cclearBit_closure" {
     GHC.Natural.$fBitsNatural_$cclearBit_closure:
         const GHC.Natural.$fBitsNatural_$cclearBit_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cclearBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cHn: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cclearBit_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cclearBit_info" {
     GHC.Natural.$fBitsNatural_$cclearBit_info:
         const GHC.Natural.$fBitsNatural_$cclearBit_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.828372379 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$csetBit_closure" {
     GHC.Natural.$fBitsNatural_$csetBit_closure:
         const GHC.Natural.$fBitsNatural_$csetBit_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$csetBit_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cHy: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$csetBit_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$csetBit_info" {
     GHC.Natural.$fBitsNatural_$csetBit_info:
         const GHC.Natural.$fBitsNatural_$csetBit_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.832072633 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$crotate_closure" {
     GHC.Natural.$fBitsNatural_$crotate_closure:
         const GHC.Natural.$fBitsNatural_$crotate_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$crotate_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cHJ: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$crotate_info" {
     GHC.Natural.$fBitsNatural_$crotate_info:
         const GHC.Natural.$fBitsNatural_$crotate_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.836330214 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cshift_closure" {
     GHC.Natural.$fBitsNatural_$cshift_closure:
         const GHC.Natural.$fBitsNatural_$cshift_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cshift_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cHU: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cshift_info" {
     GHC.Natural.$fBitsNatural_$cshift_info:
         const GHC.Natural.$fBitsNatural_$cshift_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.839663101 UTC

[section ""cstring" . lvl5_r4bvI_bytes" {
     lvl5_r4bvI_bytes:
         I8[] [66,105,116,115,46,99,111,109,112,108,101,109,101,110,116,58,32,78,97,116,117,114,97,108,32,99,111,109,112,108,101,109,101,110,116,32,117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.842636923 UTC

[section ""data" . lvl6_r4bvJ_closure" {
     lvl6_r4bvJ_closure:
         const lvl6_r4bvJ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r4bvJ_entry() //  [R1]
         { []
         }
     {offset
       c4cI8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cI9; else goto c4cIa;
       c4cI9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cIa: // global
           (_c4cI5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cI5::I64 == 0) goto c4cI7; else goto c4cI6;
       c4cI7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cI6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cI5::I64;
           R2 = lvl5_r4bvI_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r4bvJ_info" {
     lvl6_r4bvJ_info:
         const lvl6_r4bvJ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.847051117 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$ccomplement_closure" {
     GHC.Natural.$fBitsNatural_$ccomplement_closure:
         const GHC.Natural.$fBitsNatural_$ccomplement_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$ccomplement_entry() //  []
         { []
         }
     {offset
       c4cIn: // global
           R2 = lvl6_r4bvJ_closure;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$ccomplement_info" {
     GHC.Natural.$fBitsNatural_$ccomplement_info:
         const GHC.Natural.$fBitsNatural_$ccomplement_entry;
         const 0;
         const 73014444046;
         const 4294967301;
         const S4cv3_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.850705871 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cxor_closure" {
     GHC.Natural.$fBitsNatural_$cxor_closure:
         const GHC.Natural.$fBitsNatural_$cxor_info;
 },
 GHC.Natural.$fBitsNatural_$cxor_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cIy: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.xorInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cxor_info" {
     GHC.Natural.$fBitsNatural_$cxor_info:
         const GHC.Natural.$fBitsNatural_$cxor_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.85420935 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$c.|._closure" {
     GHC.Natural.$fBitsNatural_$c.|._closure:
         const GHC.Natural.$fBitsNatural_$c.|._info;
 },
 GHC.Natural.$fBitsNatural_$c.|._entry() //  [R2, R3]
         { []
         }
     {offset
       c4cIJ: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.orInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$c.|._info" {
     GHC.Natural.$fBitsNatural_$c.|._info:
         const GHC.Natural.$fBitsNatural_$c.|._entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.857551645 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$c.&._closure" {
     GHC.Natural.$fBitsNatural_$c.&._closure:
         const GHC.Natural.$fBitsNatural_$c.&._info;
 },
 GHC.Natural.$fBitsNatural_$c.&._entry() //  [R2, R3]
         { []
         }
     {offset
       c4cIU: // global
           R3 = R3;
           R2 = R2;
           call GHC.Integer.Type.andInteger_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$c.&._info" {
     GHC.Natural.$fBitsNatural_$c.&._info:
         const GHC.Natural.$fBitsNatural_$c.&._entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.860518453 UTC

[section ""cstring" . GHC.Natural.$trModule4_bytes" {
     GHC.Natural.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.862674326 UTC

[section ""data" . GHC.Natural.$trModule3_closure" {
     GHC.Natural.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Natural.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.864456127 UTC

[section ""cstring" . GHC.Natural.$trModule2_bytes" {
     GHC.Natural.$trModule2_bytes:
         I8[] [71,72,67,46,78,97,116,117,114,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.866252752 UTC

[section ""data" . GHC.Natural.$trModule1_closure" {
     GHC.Natural.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Natural.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.868056229 UTC

[section ""data" . GHC.Natural.$trModule_closure" {
     GHC.Natural.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Natural.$trModule3_closure+1;
         const GHC.Natural.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.869934564 UTC

[section ""data" . $krep_r4bvK_closure" {
     $krep_r4bvK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.872377471 UTC

[section ""cstring" . GHC.Natural.$tcNatural2_bytes" {
     GHC.Natural.$tcNatural2_bytes:
         I8[] [78,97,116,117,114,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.874184332 UTC

[section ""data" . GHC.Natural.$tcNatural1_closure" {
     GHC.Natural.$tcNatural1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Natural.$tcNatural2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.875969559 UTC

[section ""data" . GHC.Natural.$tcNatural_closure" {
     GHC.Natural.$tcNatural_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Natural.$trModule_closure+1;
         const GHC.Natural.$tcNatural1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18275189520134122949;
         const 2097940004095541788;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.878259422 UTC

[section ""data" . $krep1_r4bvL_closure" {
     $krep1_r4bvL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Natural.$tcNatural_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.879955622 UTC

[section ""data" . GHC.Natural.$tc'Natural1_closure" {
     GHC.Natural.$tc'Natural1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4bvK_closure+1;
         const $krep1_r4bvL_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.881707721 UTC

[section ""cstring" . GHC.Natural.$tc'Natural3_bytes" {
     GHC.Natural.$tc'Natural3_bytes:
         I8[] [39,78,97,116,117,114,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.883337383 UTC

[section ""data" . GHC.Natural.$tc'Natural2_closure" {
     GHC.Natural.$tc'Natural2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Natural.$tc'Natural3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.885236312 UTC

[section ""data" . GHC.Natural.$tc'Natural_closure" {
     GHC.Natural.$tc'Natural_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Natural.$trModule_closure+1;
         const GHC.Natural.$tc'Natural2_closure+1;
         const GHC.Natural.$tc'Natural1_closure+4;
         const 11998593531750078056;
         const 1104420550366228074;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.887454115 UTC

[section ""data" . GHC.Natural.wordToNatural_closure" {
     GHC.Natural.wordToNatural_closure:
         const GHC.Natural.wordToNatural_info;
 },
 GHC.Natural.wordToNatural_entry() //  [R2]
         { []
         }
     {offset
       c4cJj: // global
           R2 = R2;
           call GHC.Real.$fIntegralWord_$ctoInteger_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.wordToNatural_info" {
     GHC.Natural.wordToNatural_info:
         const GHC.Natural.wordToNatural_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.890731017 UTC

[section ""data" . sat_s4ctD_closure" {
     sat_s4ctD_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.892529952 UTC

[section ""data" . sat_s4ctE_closure" {
     sat_s4ctE_closure:
         const :_con_info;
         const sat_s4ctD_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.894671441 UTC

[section ""data" . sat_s4ctC_closure" {
     sat_s4ctC_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.896510882 UTC

[section ""data" . sat_s4ctF_closure" {
     sat_s4ctF_closure:
         const :_con_info;
         const sat_s4ctC_closure+1;
         const sat_s4ctE_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.899061814 UTC

[section ""data" . sat_s4ctB_closure" {
     sat_s4ctB_closure:
         const GHC.Types.I#_con_info;
         const 2147483647;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.900737706 UTC

[section ""data" . sat_s4ctG_closure" {
     sat_s4ctG_closure:
         const :_con_info;
         const sat_s4ctB_closure+1;
         const sat_s4ctF_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.903237997 UTC

[section ""data" . GHC.Natural.naturalToWordMaybe1_closure" {
     GHC.Natural.naturalToWordMaybe1_closure:
         const GHC.Natural.naturalToWordMaybe1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.naturalToWordMaybe1_entry() //  [R1]
         { []
         }
     {offset
       c4cJC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cJD; else goto c4cJE;
       c4cJD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cJE: // global
           (_c4cJz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cJz::I64 == 0) goto c4cJB; else goto c4cJA;
       c4cJB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cJA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cJz::I64;
           R3 = sat_s4ctG_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.naturalToWordMaybe1_info" {
     GHC.Natural.naturalToWordMaybe1_info:
         const GHC.Natural.naturalToWordMaybe1_entry;
         const 0;
         const 4294967317;
         const S4cv3_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.909228626 UTC

[section ""data" . GHC.Natural.naturalToWordMaybe_closure" {
     GHC.Natural.naturalToWordMaybe_closure:
         const GHC.Natural.naturalToWordMaybe_info;
         const 0;
 },
 sat_s4ctK_entry() //  [R1]
         { []
         }
     {offset
       c4cK3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4cK7; else goto c4cK8;
       c4cK7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cK8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c4cK1_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToWord_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4ctK_info" {
     sat_s4ctK_info:
         const sat_s4ctK_entry;
         const 1;
         const 16;
 },
 _c4cK1() //  [R1]
         { []
         }
     {offset
       c4cK1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4cKb; else goto c4cKa;
       c4cKb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       c4cKa: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4cK1_info" {
     block_c4cK1_info:
         const _c4cK1;
         const 0;
         const 30;
 },
 GHC.Natural.naturalToWordMaybe_entry() //  [R2]
         { []
         }
     {offset
       c4cKf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cKg; else goto c4cKh;
       c4cKg: // global
           R2 = R2;
           R1 = GHC.Natural.naturalToWordMaybe_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cKh: // global
           I64[Sp - 16] = block_c4cJS_info;
           R3 = GHC.Natural.naturalToWordMaybe1_closure;
           _s4ctH::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s4ctH::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.naturalToWordMaybe_info" {
     GHC.Natural.naturalToWordMaybe_info:
         const GHC.Natural.naturalToWordMaybe_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4cv3_srt+336;
 },
 _c4cJS() //  [R1]
         { []
         }
     {offset
       c4cJS: // global
           if (R1 == 1) goto c4cKe; else goto c4cKd;
       c4cKe: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c4cKn; else goto c4cKm;
       c4cKn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4cKm: // global
           I64[Hp - 32] = sat_s4ctK_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4cKd: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cJS_info" {
     block_c4cJS_info:
         const _c4cJS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.920649623 UTC

[section ""data" . GHC.Natural.$fReadNatural_go_closure" {
     GHC.Natural.$fReadNatural_go_closure:
         const GHC.Natural.$fReadNatural_go_info;
         const 0;
 },
 sat_s4ctU_entry() //  [R1]
         { []
         }
     {offset
       c4cLd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cLe; else goto c4cLf;
       c4cLe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cLf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Natural.$fReadNatural_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4ctU_info" {
     sat_s4ctU_info:
         const sat_s4ctU_entry;
         const 1;
         const 4294967312;
         const S4cv3_srt+352;
 },
 section ""relreadonly" . u4cLG_srtd" {
     u4cLG_srtd:
         const S4cv3_srt+40;
         const 40;
         const 549755813889;
 },
 GHC.Natural.$fReadNatural_go_entry() //  [R2]
         { []
         }
     {offset
       c4cLk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4cLl; else goto u4cLA;
       c4cLl: // global
           R2 = R2;
           R1 = GHC.Natural.$fReadNatural_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u4cLA: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c4cKQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural_go_info" {
     GHC.Natural.$fReadNatural_go_info:
         const GHC.Natural.$fReadNatural_go_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u4cLG_srtd;
 },
 _c4cKQ() //  []
         { []
         }
     {offset
       c4cKQ: // global
           _s4ctL::P64 = P64[Sp];
           I64[Sp] = block_c4cKT_info;
           R1 = _s4ctL::P64;
           if (R1 & 7 != 0) goto u4cLC; else goto c4cKU;
       u4cLC: // global
           call _c4cKT(R1) args: 0, res: 0, upd: 0;
       c4cKU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u4cLH_srtd" {
     u4cLH_srtd:
         const S4cv3_srt+40;
         const 40;
         const 549755813889;
 },
 _c4cKT() //  [R1]
         { []
         }
     {offset
       c4cKT: // global
           if (R1 & 7 == 1) goto c4cLh; else goto c4cLi;
       c4cLh: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4cLi: // global
           I64[Sp - 8] = block_c4cKZ_info;
           _s4ctO::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s4ctO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4cLD; else goto c4cL0;
       u4cLD: // global
           call _c4cKZ(R1) args: 0, res: 0, upd: 0;
       c4cL0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cKT_info" {
     block_c4cKT_info:
         const _c4cKT;
         const 0;
         const 18446744069414584350;
         const u4cLH_srtd;
 },
 section ""relreadonly" . u4cLI_srtd" {
     u4cLI_srtd:
         const S4cv3_srt+40;
         const 40;
         const 549755813889;
 },
 _c4cKZ() //  [R1]
         { []
         }
     {offset
       c4cKZ: // global
           I64[Sp - 8] = block_c4cL4_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = P64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cKZ_info" {
     block_c4cKZ_info:
         const _c4cKZ;
         const 1;
         const 18446744069414584350;
         const u4cLI_srtd;
 },
 section ""relreadonly" . u4cLJ_srtd" {
     u4cLJ_srtd:
         const S4cv3_srt+40;
         const 40;
         const 549755813889;
 },
 _c4cL4() //  [R1]
         { []
         }
     {offset
       c4cL4: // global
           _s4ctO::P64 = P64[Sp + 16];
           if (R1 == 1) goto c4cLw; else goto c4cLu;
       c4cLw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c4cLz; else goto c4cLy;
       c4cLz: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4cLy: // global
           I64[Hp - 40] = sat_s4ctU_info;
           P64[Hp - 24] = _s4ctO::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4cLu: // global
           P64[Sp + 16] = _s4ctO::P64;
           Sp = Sp + 16;
           call _c4cKQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4cL4_info" {
     block_c4cL4_info:
         const _c4cL4;
         const 2;
         const 18446744069414584350;
         const u4cLJ_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.93776906 UTC

[section ""data" . GHC.Natural.$fReadNatural_$creadsPrec_closure" {
     GHC.Natural.$fReadNatural_$creadsPrec_closure:
         const GHC.Natural.$fReadNatural_$creadsPrec_info;
         const 0;
 },
 g_s4ctW_entry() //  [R1]
         { []
         }
     {offset
       c4cMv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cMw; else goto c4cMx;
       c4cMw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cMx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadInteger2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s4ctW_info" {
     g_s4ctW_info:
         const g_s4ctW_entry;
         const 1;
         const 12884901904;
         const S4cv3_srt+360;
 },
 sat_s4ctZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c4cMF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cMG; else goto c4cMH;
       c4cMG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cMH: // global
           I64[Sp - 8] = block_c4cMD_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s4ctZ_info" {
     sat_s4ctZ_info:
         const sat_s4ctZ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S4cv3_srt+352;
 },
 _c4cMD() //  [R1]
         { []
         }
     {offset
       c4cMD: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Natural.$fReadNatural_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cMD_info" {
     block_c4cMD_info:
         const _c4cMD;
         const 0;
         const 4294967326;
         const S4cv3_srt+352;
 },
 GHC.Natural.$fReadNatural_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c4cML: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c4cMP; else goto c4cMO;
       c4cMP: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Natural.$fReadNatural_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cMO: // global
           I64[Hp - 32] = g_s4ctW_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s4ctZ_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural_$creadsPrec_info" {
     GHC.Natural.$fReadNatural_$creadsPrec_info:
         const GHC.Natural.$fReadNatural_$creadsPrec_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S4cv3_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.948499519 UTC

[section ""data" . GHC.Natural.$fReadNatural4_closure" {
     GHC.Natural.$fReadNatural4_closure:
         const GHC.Natural.$fReadNatural4_info;
         const 0;
 },
 g_s4cu1_entry() //  [R1]
         { []
         }
     {offset
       c4cNl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cNm; else goto c4cNn;
       c4cNm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cNn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Read.$fReadInteger2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s4cu1_info" {
     g_s4cu1_info:
         const g_s4cu1_entry;
         const 1;
         const 12884901904;
         const S4cv3_srt+360;
 },
 w_s4cu2_entry() //  [R1, R2]
         { []
         }
     {offset
       c4cNv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cNw; else goto c4cNx;
       c4cNw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cNx: // global
           I64[Sp - 8] = block_c4cNt_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w_s4cu2_info" {
     w_s4cu2_info:
         const w_s4cu2_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S4cv3_srt+352;
 },
 _c4cNt() //  [R1]
         { []
         }
     {offset
       c4cNt: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Natural.$fReadNatural_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cNt_info" {
     block_c4cNt_info:
         const _c4cNt;
         const 0;
         const 4294967326;
         const S4cv3_srt+352;
 },
 sat_s4cu8_entry() //  [R1, R2]
         { []
         }
     {offset
       c4cNJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cNK; else goto c4cNL;
       c4cNK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cNL: // global
           I64[Sp - 8] = block_c4cNG_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s4cu8_info" {
     sat_s4cu8_info:
         const sat_s4cu8_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c4cNG() //  [R1]
         { []
         }
     {offset
       c4cNG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4cNO; else goto c4cNN;
       c4cNO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4cNN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cNG_info" {
     block_c4cNG_info:
         const _c4cNG;
         const 0;
         const 30;
 },
 GHC.Natural.$fReadNatural4_entry() //  [R2]
         { []
         }
     {offset
       c4cNP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c4cNT; else goto c4cNS;
       c4cNT: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = GHC.Natural.$fReadNatural4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cNS: // global
           I64[Hp - 48] = g_s4cu1_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = w_s4cu2_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_s4cu8_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural4_info" {
     GHC.Natural.$fReadNatural4_info:
         const GHC.Natural.$fReadNatural4_entry;
         const 0;
         const 98784247822;
         const 4294967301;
         const S4cv3_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.960078285 UTC

[section ""data" . GHC.Natural.$fReadNatural3_closure" {
     GHC.Natural.$fReadNatural3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.962750435 UTC

[section ""data" . GHC.Natural.$fReadNatural2_closure" {
     GHC.Natural.$fReadNatural2_closure:
         const GHC.Natural.$fReadNatural2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.$fReadNatural2_entry() //  [R1]
         { []
         }
     {offset
       c4cOA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c4cOB; else goto c4cOC;
       c4cOB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cOC: // global
           (_c4cOx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cOx::I64 == 0) goto c4cOz; else goto c4cOy;
       c4cOz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cOy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cOx::I64;
           R2 = GHC.Natural.$fReadNatural4_closure+1;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Natural.$fReadNatural3_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural2_info" {
     GHC.Natural.$fReadNatural2_info:
         const GHC.Natural.$fReadNatural2_entry;
         const 0;
         const 12884901909;
         const S4cv3_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.967011877 UTC

[section ""data" . GHC.Natural.$fReadNatural_$creadList_closure" {
     GHC.Natural.$fReadNatural_$creadList_closure:
         const GHC.Natural.$fReadNatural_$creadList_info;
         const 0;
 },
 GHC.Natural.$fReadNatural_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c4cOT: // global
           R3 = R2;
           R2 = GHC.Natural.$fReadNatural2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural_$creadList_info" {
     GHC.Natural.$fReadNatural_$creadList_info:
         const GHC.Natural.$fReadNatural_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S4cv3_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.971592098 UTC

[section ""data" . GHC.Natural.$fReadNatural1_closure" {
     GHC.Natural.$fReadNatural1_closure:
         const GHC.Natural.$fReadNatural1_info;
         const 0;
 },
 GHC.Natural.$fReadNatural1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cP7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cP8; else goto c4cP9;
       c4cP8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.$fReadNatural1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4cP9: // global
           I64[Sp - 8] = block_c4cP4_info;
           R3 = R3;
           R2 = GHC.Natural.$fReadNatural_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fReadNatural1_info" {
     GHC.Natural.$fReadNatural1_info:
         const GHC.Natural.$fReadNatural1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S4cv3_srt+408;
 },
 _c4cP4() //  [R1]
         { []
         }
     {offset
       c4cP4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4cPc; else goto c4cPb;
       c4cPc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4cPb: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cP4_info" {
     block_c4cP4_info:
         const _c4cP4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.976561786 UTC

[section ""data" . GHC.Natural.$fReadNatural_closure" {
     GHC.Natural.$fReadNatural_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Natural.$fReadNatural_$creadsPrec_closure+1;
         const GHC.Natural.$fReadNatural_$creadList_closure+1;
         const GHC.Natural.$fReadNatural4_closure+1;
         const GHC.Natural.$fReadNatural1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.979465045 UTC

[section ""data" . GHC.Natural.isValidNatural_closure" {
     GHC.Natural.isValidNatural_closure:
         const GHC.Natural.isValidNatural_info;
         const 0;
 },
 GHC.Natural.isValidNatural_entry() //  [R2]
         { []
         }
     {offset
       c4cPv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4cPw; else goto c4cPx;
       c4cPw: // global
           R2 = R2;
           R1 = GHC.Natural.isValidNatural_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4cPx: // global
           I64[Sp - 8] = block_c4cPt_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.isValidNatural_info" {
     GHC.Natural.isValidNatural_info:
         const GHC.Natural.isValidNatural_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4cv3_srt+424;
 },
 _c4cPt() //  [R1]
         { []
         }
     {offset
       c4cPt: // global
           R1 = I64[(R1 << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cPt_info" {
     block_c4cPt_info:
         const _c4cPt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.985736312 UTC

[section ""data" . GHC.Natural.minusNaturalMaybe_closure" {
     GHC.Natural.minusNaturalMaybe_closure:
         const GHC.Natural.minusNaturalMaybe_info;
         const 0;
 },
 sat_s4cui_entry() //  [R1]
         { []
         }
     {offset
       c4cQ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cQ1; else goto c4cQ2;
       c4cQ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cQ2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Natural.$fNumNatural_$c-_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4cui_info" {
     sat_s4cui_info:
         const sat_s4cui_entry;
         const 2;
         const 4294967314;
         const S4cv3_srt+440;
 },
 GHC.Natural.minusNaturalMaybe_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cQ6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4cQ7; else goto c4cQ8;
       c4cQ7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.minusNaturalMaybe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4cQ8: // global
           I64[Sp - 24] = block_c4cPR_info;
           _s4cug::P64 = R3;
           R3 = R3;
           _s4cuf::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s4cuf::P64;
           P64[Sp - 8] = _s4cug::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.minusNaturalMaybe_info" {
     GHC.Natural.minusNaturalMaybe_info:
         const GHC.Natural.minusNaturalMaybe_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S4cv3_srt+440;
 },
 _c4cPR() //  [R1]
         { []
         }
     {offset
       c4cPR: // global
           if (R1 == 1) goto c4cQ5; else goto c4cQ4;
       c4cQ5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c4cQe; else goto c4cQd;
       c4cQe: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4cQd: // global
           I64[Hp - 40] = sat_s4cui_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4cQ4: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cPR_info" {
     block_c4cPR_info:
         const _c4cPR;
         const 2;
         const 4294967326;
         const S4cv3_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.992595413 UTC

[section ""data" . GHC.Natural.$fIxNatural_closure" {
     GHC.Natural.$fIxNatural_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Natural.$fOrdNatural_closure+1;
         const GHC.Arr.$fIxInteger_$crange_closure+1;
         const GHC.Arr.$fIxInteger_$cindex_closure+2;
         const GHC.Arr.$fIxInteger_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxInteger_$cinRange_closure+2;
         const GHC.Arr.$fIxInteger_$crangeSize_closure+1;
         const GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.995189466 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cunsafeShiftL_closure" {
     GHC.Natural.$fBitsNatural_$cunsafeShiftL_closure:
         const GHC.Natural.$fBitsNatural_$cunsafeShiftL_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cunsafeShiftL_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cQG: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshift_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cunsafeShiftL_info" {
     GHC.Natural.$fBitsNatural_$cunsafeShiftL_info:
         const GHC.Natural.$fBitsNatural_$cunsafeShiftL_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:05.998665286 UTC

[section ""data" . GHC.Natural.$fBitsNatural_$cunsafeShiftR_closure" {
     GHC.Natural.$fBitsNatural_$cunsafeShiftR_closure:
         const GHC.Natural.$fBitsNatural_$cunsafeShiftR_info;
         const 0;
 },
 GHC.Natural.$fBitsNatural_$cunsafeShiftR_entry() //  [R2, R3]
         { []
         }
     {offset
       c4cQR: // global
           R3 = R3;
           R2 = R2;
           call Data.Bits.$fBitsInteger_$cshiftR_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.$fBitsNatural_$cunsafeShiftR_info" {
     GHC.Natural.$fBitsNatural_$cunsafeShiftR_info:
         const GHC.Natural.$fBitsNatural_$cunsafeShiftR_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4cv3_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:06.001854921 UTC

[section ""data" . GHC.Natural.$fBitsNatural_closure" {
     GHC.Natural.$fBitsNatural_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Natural.$fEqNatural_closure+1;
         const GHC.Natural.$fBitsNatural_$c.&._closure+2;
         const GHC.Natural.$fBitsNatural_$c.|._closure+2;
         const GHC.Natural.$fBitsNatural_$cxor_closure+2;
         const GHC.Natural.$fBitsNatural_$ccomplement_closure+1;
         const GHC.Natural.$fBitsNatural_$cshift_closure+2;
         const GHC.Natural.$fBitsNatural_$crotate_closure+2;
         const GHC.Natural.$fBitsNatural1_closure;
         const Data.Bits.$fBitsInteger_$cbit_closure+1;
         const GHC.Natural.$fBitsNatural_$csetBit_closure+2;
         const GHC.Natural.$fBitsNatural_$cclearBit_closure+2;
         const GHC.Natural.$fBitsNatural_$ccomplementBit_closure+2;
         const GHC.Natural.$fBitsNatural_$ctestBit_closure+2;
         const GHC.Natural.$fBitsNatural_$cbitSizeMaybe_closure+1;
         const GHC.Natural.$fBitsNatural_$cbitSize_closure;
         const GHC.Natural.$fBitsNatural_$cisSigned_closure+1;
         const GHC.Natural.$fBitsNatural_$cshiftL_closure+2;
         const GHC.Natural.$fBitsNatural_$cunsafeShiftL_closure+2;
         const GHC.Natural.$fBitsNatural_$cshiftR_closure+2;
         const GHC.Natural.$fBitsNatural_$cunsafeShiftR_closure+2;
         const GHC.Natural.$fBitsNatural_$crotateL_closure+2;
         const GHC.Natural.$fBitsNatural_$crotateR_closure+2;
         const GHC.Natural.$fBitsNatural_$cpopCount_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:06.004314439 UTC

[section ""data" . sat_s4cuj_closure" {
     sat_s4cuj_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:06.006403335 UTC

[section ""data" . sat_s4cuk_closure" {
     sat_s4cuk_closure:
         const :_con_info;
         const sat_s4cuj_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:06.008697152 UTC

[section ""data" . GHC.Natural.powModNatural1_closure" {
     GHC.Natural.powModNatural1_closure:
         const GHC.Natural.powModNatural1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Natural.powModNatural1_entry() //  [R1]
         { []
         }
     {offset
       c4cR7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4cR8; else goto c4cR9;
       c4cR8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4cR9: // global
           (_c4cR4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4cR4::I64 == 0) goto c4cR6; else goto c4cR5;
       c4cR6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4cR5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4cR4::I64;
           R3 = sat_s4cuk_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Natural.powModNatural1_info" {
     GHC.Natural.powModNatural1_info:
         const GHC.Natural.powModNatural1_entry;
         const 0;
         const 4294967317;
         const S4cv3_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:06.018439592 UTC

[section ""data" . GHC.Natural.powModNatural_closure" {
     GHC.Natural.powModNatural_closure:
         const GHC.Natural.powModNatural_info;
         const 0;
 },
 section ""relreadonly" . u4cTP_srtd" {
     u4cTP_srtd:
         const S4cv3_srt+80;
         const 53;
         const 8743316464075777;
 },
 GHC.Natural.powModNatural_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4cRs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c4cRt; else goto c4cRu;
       c4cRt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Natural.powModNatural_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4cRu: // global
           I64[Sp - 32] = block_c4cRn_info;
           _s4cum::P64 = R3;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           _s4cul::P64 = R2;
           R2 = R4;
           P64[Sp - 24] = _s4cul::P64;
           P64[Sp - 16] = _s4cum::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Natural.powModNatural_info" {
     GHC.Natural.powModNatural_info:
         const GHC.Natural.powModNatural_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u4cTP_srtd;
 },
 section ""relreadonly" . u4cTQ_srtd" {
     u4cTQ_srtd:
         const S4cv3_srt+80;
         const 53;
         const 7617416557233153;
 },
 _c4cRn() //  [R1]
         { []
         }
     {offset
       c4cRn: // global
           if (R1 == 1) goto c4cRr; else goto c4cRq;
       c4cRr: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4cRq: // global
           I64[Sp] = block_c4cRx_info;
           R3 = GHC.Natural.powModNatural1_closure;
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cRn_info" {
     block_c4cRn_info:
         const _c4cRn;
         const 3;
         const 18446744069414584350;
         const u4cTQ_srtd;
 },
 section ""relreadonly" . u4cTR_srtd" {
     u4cTR_srtd:
         const S4cv3_srt+160;
         const 43;
         const 7438883356673;
 },
 _c4cRx() //  [R1]
         { []
         }
     {offset
       c4cRx: // global
           if (R1 == 1) goto u4cTA; else goto c4cRF;
       u4cTA: // global
           Sp = Sp + 32;
           call _c4cTw() args: 0, res: 0, upd: 0;
       c4cRF: // global
           I64[Sp] = block_c4cRC_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cRx_info" {
     block_c4cRx_info:
         const _c4cRx;
         const 3;
         const 18446744069414584350;
         const u4cTR_srtd;
 },
 section ""relreadonly" . u4cTS_srtd" {
     u4cTS_srtd:
         const S4cv3_srt+160;
         const 43;
         const 7438883356673;
 },
 _c4cRC() //  [R1]
         { []
         }
     {offset
       c4cRC: // global
           if (R1 == 1) goto u4cTB; else goto c4cRM;
       u4cTB: // global
           Sp = Sp + 32;
           call _c4cTs() args: 0, res: 0, upd: 0;
       c4cRM: // global
           I64[Sp] = block_c4cRJ_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cRC_info" {
     block_c4cRC_info:
         const _c4cRC;
         const 3;
         const 18446744069414584350;
         const u4cTS_srtd;
 },
 section ""relreadonly" . u4cTT_srtd" {
     u4cTT_srtd:
         const S4cv3_srt+160;
         const 43;
         const 7438883356673;
 },
 _c4cRJ() //  [R1]
         { []
         }
     {offset
       c4cRJ: // global
           if (R1 == 1) goto u4cTC; else goto c4cRT;
       u4cTC: // global
           Sp = Sp + 32;
           call _c4cTw() args: 0, res: 0, upd: 0;
       c4cRT: // global
           I64[Sp] = block_c4cRQ_info;
           R3 = GHC.Natural.powModNatural1_closure;
           R2 = P64[Sp + 8];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cRJ_info" {
     block_c4cRJ_info:
         const _c4cRJ;
         const 3;
         const 18446744069414584350;
         const u4cTT_srtd;
 },
 _c4cTw() //  []
         { []
         }
     {offset
       c4cTw: // global
           R1 = GHC.Natural.$fBitsNatural1_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . u4cTU_srtd" {
     u4cTU_srtd:
         const S4cv3_srt+160;
         const 43;
         const 7438883356673;
 },
 _c4cRQ() //  [R1]
         { []
         }
     {offset
       c4cRQ: // global
           if (R1 == 1) goto u4cTD; else goto c4cTg;
       u4cTD: // global
           Sp = Sp + 32;
           call _c4cTs() args: 0, res: 0, upd: 0;
       c4cTg: // global
           P64[Sp] = GHC.Natural.powModNatural1_closure;
           _s4cuu::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s4cuu::P64;
           call _c4cS1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4cRQ_info" {
     block_c4cRQ_info:
         const _c4cRQ;
         const 3;
         const 18446744069414584350;
         const u4cTU_srtd;
 },
 _c4cTs() //  []
         { []
         }
     {offset
       c4cTs: // global
           R1 = GHC.Natural.powModNatural1_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4cS1() //  []
         { []
         }
     {offset
       c4cS1: // global
           I64[Sp - 8] = block_c4cS3_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4cTM; else goto c4cS4;
       u4cTM: // global
           call _c4cS3(R1) args: 0, res: 0, upd: 0;
       c4cS4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . u4cTV_srtd" {
     u4cTV_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cS3() //  [R1]
         { []
         }
     {offset
       c4cS3: // global
           I64[Sp] = block_c4cS8_info;
           R3 = GHC.Natural.$seven_n_closure;
           R2 = P64[Sp + 16];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.remInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cS3_info" {
     block_c4cS3_info:
         const _c4cS3;
         const 260;
         const 18446744069414584350;
         const u4cTV_srtd;
 },
 section ""relreadonly" . u4cTW_srtd" {
     u4cTW_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cS8() //  [R1]
         { []
         }
     {offset
       c4cS8: // global
           I64[Sp] = block_c4cSe_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = R1;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cS8_info" {
     block_c4cS8_info:
         const _c4cS8;
         const 4;
         const 18446744069414584350;
         const u4cTW_srtd;
 },
 section ""relreadonly" . u4cTX_srtd" {
     u4cTX_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cSe() //  [R1]
         { []
         }
     {offset
       c4cSe: // global
           if (R1 == 1) goto c4cSP; else goto c4cSC;
       c4cSP: // global
           I64[Sp] = block_c4cSN_info;
           R3 = GHC.Natural.$fBitsNatural1_closure;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       c4cSC: // global
           _s4cuw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c4cSj_info;
           R3 = P64[Sp + 24];
           R2 = _s4cuw::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cSe_info" {
     block_c4cSe_info:
         const _c4cSe;
         const 4;
         const 18446744069414584350;
         const u4cTX_srtd;
 },
 section ""relreadonly" . u4cTY_srtd" {
     u4cTY_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cSN() //  [R1]
         { []
         }
     {offset
       c4cSN: // global
           if (R1 == 1) goto c4cTe; else goto c4cT4;
       c4cTe: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4cT4: // global
           I64[Sp] = block_c4cST_info;
           R3 = 1;
           R2 = P64[Sp + 16];
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cSN_info" {
     block_c4cSN_info:
         const _c4cSN;
         const 4;
         const 18446744069414584350;
         const u4cTY_srtd;
 },
 section ""relreadonly" . u4cTZ_srtd" {
     u4cTZ_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cST() //  [R1]
         { []
         }
     {offset
       c4cST: // global
           I64[Sp] = block_c4cSX_info;
           _s4cux::P64 = P64[Sp + 24];
           R3 = _s4cux::P64;
           R2 = _s4cux::P64;
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cST_info" {
     block_c4cST_info:
         const _c4cST;
         const 132;
         const 18446744069414584350;
         const u4cTZ_srtd;
 },
 section ""relreadonly" . u4cU0_srtd" {
     u4cU0_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cSX() //  [R1]
         { []
         }
     {offset
       c4cSX: // global
           I64[Sp] = block_c4cT1_info;
           R3 = P64[Sp + 32];
           R2 = R1;
           call GHC.Integer.Type.modInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cSX_info" {
     block_c4cSX_info:
         const _c4cSX;
         const 132;
         const 18446744069414584350;
         const u4cU0_srtd;
 },
 section ""relreadonly" . u4cU1_srtd" {
     u4cU1_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cT1() //  [R1]
         { []
         }
     {offset
       c4cT1: // global
           _s4cuv::P64 = P64[Sp + 24];
           P64[Sp + 24] = R1;
           P64[Sp + 16] = _s4cuv::P64;
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c4cS1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4cT1_info" {
     block_c4cT1_info:
         const _c4cT1;
         const 132;
         const 18446744069414584350;
         const u4cU1_srtd;
 },
 section ""relreadonly" . u4cU2_srtd" {
     u4cU2_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cSj() //  [R1]
         { []
         }
     {offset
       c4cSj: // global
           I64[Sp] = block_c4cSn_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.modInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cSj_info" {
     block_c4cSj_info:
         const _c4cSj;
         const 3;
         const 18446744069414584350;
         const u4cU2_srtd;
 },
 section ""relreadonly" . u4cU3_srtd" {
     u4cU3_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cSn() //  [R1]
         { []
         }
     {offset
       c4cSn: // global
           I64[Sp] = block_c4cSr_info;
           R3 = 1;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.shiftRInteger_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cSn_info" {
     block_c4cSn_info:
         const _c4cSn;
         const 3;
         const 18446744069414584350;
         const u4cU3_srtd;
 },
 section ""relreadonly" . u4cU4_srtd" {
     u4cU4_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cSr() //  [R1]
         { []
         }
     {offset
       c4cSr: // global
           I64[Sp] = block_c4cSv_info;
           _s4cux::P64 = P64[Sp + 16];
           R3 = _s4cux::P64;
           R2 = _s4cux::P64;
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cSr_info" {
     block_c4cSr_info:
         const _c4cSr;
         const 3;
         const 18446744069414584350;
         const u4cU4_srtd;
 },
 section ""relreadonly" . u4cU5_srtd" {
     u4cU5_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cSv() //  [R1]
         { []
         }
     {offset
       c4cSv: // global
           I64[Sp] = block_c4cSz_info;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Integer.Type.modInteger_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4cSv_info" {
     block_c4cSv_info:
         const _c4cSv;
         const 3;
         const 18446744069414584350;
         const u4cU5_srtd;
 },
 section ""relreadonly" . u4cU6_srtd" {
     u4cU6_srtd:
         const S4cv3_srt+160;
         const 42;
         const 3040836845569;
 },
 _c4cSz() //  [R1]
         { []
         }
     {offset
       c4cSz: // global
           _s4cuv::P64 = P64[Sp + 16];
           P64[Sp + 16] = R1;
           _s4cuw::P64 = P64[Sp + 8];
           P64[Sp + 8] = _s4cuv::P64;
           P64[Sp] = _s4cuw::P64;
           call _c4cS1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4cSz_info" {
     block_c4cSz_info:
         const _c4cSz;
         const 3;
         const 18446744069414584350;
         const u4cU6_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:06.061755232 UTC

[section ""relreadonly" . S4cv3_srt" {
     S4cv3_srt:
         const GHC.Real.$fFractionalRatio_$s$cfromInteger_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Natural.$fEnumNatural_$ctoEnum_closure;
         const lvl1_r4bvD_closure;
         const GHC.Enum.$fEnumInteger_$cpred_closure;
         const GHC.Natural.$fBitsNatural1_closure;
         const GHC.Natural.$fEnumNatural_$cpred_closure;
         const lvl3_r4bvF_closure;
         const GHC.Enum.$fEnumInteger_$csucc_closure;
         const GHC.Integer.Type.divModInteger_closure;
         const GHC.Real.divZeroError_closure;
         const GHC.Natural.$fIntegralNatural_$cdivMod_closure;
         const GHC.Natural.$fIntegralNatural_$cquotRem_closure;
         const GHC.Exception.underflowException_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Natural.underflowError_closure;
         const GHC.Natural.$fNumNatural_$cnegate_closure;
         const GHC.Natural.naturalFromInteger_closure;
         const GHC.Natural.$fNumNatural_$c-_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$fIntegralInteger_$cquot_closure;
         const GHC.Real.$fIntegralInteger_$crem_closure;
         const GHC.Real.$fIntegralInteger_$cdiv_closure;
         const GHC.Real.$fIntegralInteger_$cmod_closure;
         const GHC.Enum.enumDeltaToInteger_closure;
         const GHC.Enum.$fEnumInteger_$cenumFromThen_closure;
         const GHC.Natural.$fEnumNatural_$cenumFromThen_closure;
         const sat_s4ctl_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.Natural.$fShowNatural_$cshow_closure;
         const GHC.Natural.$fShowNatural1_closure;
         const Data.Bits.$fBitsInteger_$cpopCount_closure;
         const Data.Bits.$fBitsInteger_$crotateR_closure;
         const Data.Bits.$fBitsInteger_$cshift_closure;
         const Data.Bits.$fBitsInteger_$cshiftR_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Bits.$fBitsInteger_$ccomplementBit_closure;
         const Data.Bits.$fBitsInteger_$cclearBit_closure;
         const Data.Bits.$fBitsInteger_$csetBit_closure;
         const lvl6_r4bvJ_closure;
         const sat_s4ctG_closure;
         const GHC.Natural.naturalToWordMaybe_closure;
         const GHC.Natural.naturalToWordMaybe1_closure;
         const GHC.Natural.$fReadNatural_go_closure;
         const GHC.Read.$fReadInteger2_closure;
         const GHC.Read.$fReadInteger_$sreadNumber_closure;
         const GHC.Natural.$fReadNatural_$creadsPrec_closure;
         const GHC.Natural.$fReadNatural4_closure;
         const GHC.Read.list_closure;
         const GHC.Natural.$fReadNatural2_closure;
         const GHC.Natural.$fReadNatural1_closure;
         const GHC.Natural.$fReadNatural_$creadList_closure;
         const GHC.Natural.isValidNatural_closure;
         const GHC.Natural.$fBitsNatural1_closure;
         const GHC.Natural.$fNumNatural_$c-_closure;
         const GHC.Natural.minusNaturalMaybe_closure;
         const sat_s4cuk_closure;
         const GHC.Integer.Type.modInteger_closure;
         const GHC.Integer.Type.shiftRInteger_closure;
         const GHC.Natural.powModNatural_closure;
         const GHC.Natural.$seven_n_closure;
         const GHC.Natural.powModNatural1_closure;
 }]

