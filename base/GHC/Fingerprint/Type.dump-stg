
==================== Pre unarise: ====================
2018-03-16 15:59:02.915302615 UTC

GHC.Fingerprint.Type.$WFingerprint [InlPrag=INLINE[2]]
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> GHC.Fingerprint.Type.Fingerprint
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s4a05 dt_s4a06]
        case dt_s4a05 of {
          GHC.Word.W64# dt_s4a08 [Occ=Once] ->
              case dt_s4a06 of {
                GHC.Word.W64# dt_s4a0a [Occ=Once] ->
                    GHC.Fingerprint.Type.Fingerprint [dt_s4a08 dt_s4a0a];
              };
        };

GHC.Fingerprint.Type.$fShowFingerprint3 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [16##];

GHC.Fingerprint.Type.$fShowFingerprint2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

GHC.Fingerprint.Type.$fShowFingerprint_hex16
  :: GHC.Word.Word64 -> GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [i_s4a0b]
        case
            Numeric.showIntAtBase
                GHC.Word.$fIntegralWord64
                GHC.Word.$fShowWord64
                GHC.Fingerprint.Type.$fShowFingerprint3
                GHC.Show.intToDigit
                i_s4a0b
                GHC.Types.[]
        of
        hex_s4a0c [Dmd=<S,U>]
        { __DEFAULT ->
              case GHC.List.$wlenAcc hex_s4a0c 0# of ww2_s4a0d {
                __DEFAULT ->
                    case -# [16# ww2_s4a0d] of y_s4a0e [Dmd=<S,U>] {
                      __DEFAULT ->
                          case <# [0# y_s4a0e] of {
                            __DEFAULT -> hex_s4a0c;
                            1# ->
                                let {
                                  lvl_s4a0g [Occ=OnceL] :: [GHC.Types.Char]
                                  [LclId, Unf=OtherCon []] =
                                      CCCS :! [GHC.Fingerprint.Type.$fShowFingerprint2
                                               hex_s4a0c]; } in
                                let {
                                  $wxs_s4a0h [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                    :: GHC.Prim.Int# -> [GHC.Types.Char]
                                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                      sat-only [lvl_s4a0g $wxs_s4a0h] \r [ww_s4a0i]
                                          case ww_s4a0i of ds1_s4a0j {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4a0l [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [$wxs_s4a0h ds1_s4a0j] \u []
                                                          case -# [ds1_s4a0j 1#] of sat_s4a0k {
                                                            __DEFAULT -> $wxs_s4a0h sat_s4a0k;
                                                          };
                                                } in 
                                                  : [GHC.Fingerprint.Type.$fShowFingerprint2
                                                     sat_s4a0l];
                                            1# -> lvl_s4a0g;
                                          };
                                } in  $wxs_s4a0h y_s4a0e;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Base.String
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s4a0m ww1_s4a0n]
        let {
          sat_s4a0r [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww1_s4a0n] \s []
                  let {
                    sat_s4a0q [Occ=Once] :: GHC.Word.Word64
                    [LclId] =
                        CCCS GHC.Word.W64#! [ww1_s4a0n];
                  } in  GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4a0q; } in
        let {
          sat_s4a0o [Occ=Once] :: GHC.Word.Word64
          [LclId] =
              CCCS GHC.Word.W64#! [ww_s4a0m];
        } in 
          case
              GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4a0o
          of
          sat_s4a0p
          { __DEFAULT -> GHC.Base.++ sat_s4a0p sat_s4a0r;
          };

GHC.Fingerprint.Type.$fShowFingerprint_$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint -> GHC.Base.String
[GblId, Arity=1, Str=<S(SS),1*U(U,U)>, Unf=OtherCon []] =
    [] \r [w_s4a0s]
        case w_s4a0s of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4a0u [Occ=Once]
                                           ww2_s4a0v [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshow ww1_s4a0u ww2_s4a0v;
        };

GHC.Fingerprint.Type.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Base.String -> [GHC.Types.Char]
[GblId, Arity=3, Str=<L,U><L,U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4a0w ww1_s4a0x w_s4a0y]
        let {
          sat_s4a0D [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww1_s4a0x w_s4a0y] \s []
                  let {
                    sat_s4a0B [Occ=Once] :: GHC.Word.Word64
                    [LclId] =
                        CCCS GHC.Word.W64#! [ww1_s4a0x];
                  } in 
                    case
                        GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4a0B
                    of
                    sat_s4a0C
                    { __DEFAULT -> GHC.Base.++ sat_s4a0C w_s4a0y;
                    }; } in
        let {
          sat_s4a0z [Occ=Once] :: GHC.Word.Word64
          [LclId] =
              CCCS GHC.Word.W64#! [ww_s4a0w];
        } in 
          case
              GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4a0z
          of
          sat_s4a0A
          { __DEFAULT -> GHC.Base.++ sat_s4a0A sat_s4a0D;
          };

GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SS),1*U(U,U)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s4a0E w1_s4a0F w2_s4a0G]
        case w1_s4a0F of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4a0I [Occ=Once]
                                           ww2_s4a0J [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshowsPrec ww1_s4a0I ww2_s4a0J w2_s4a0G;
        };

GHC.Fingerprint.Type.$fShowFingerprint1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Base.String -> [GHC.Types.Char]
[GblId, Arity=2, Str=<S(SS),1*U(U,U)><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4a0K w1_s4a0L]
        case w_s4a0K of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4a0N [Occ=Once]
                                           ww2_s4a0O [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshowsPrec ww1_s4a0N ww2_s4a0O w1_s4a0L;
        };

GHC.Fingerprint.Type.$fShowFingerprint_$cshowList
  :: [GHC.Fingerprint.Type.Fingerprint] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s4a0P s_s4a0Q]
        GHC.Show.showList__
            GHC.Fingerprint.Type.$fShowFingerprint1 ls_s4a0P s_s4a0Q;

GHC.Fingerprint.Type.$fShowFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec
                                    GHC.Fingerprint.Type.$fShowFingerprint_$cshow
                                    GHC.Fingerprint.Type.$fShowFingerprint_$cshowList];

GHC.Fingerprint.Type.$fOrdFingerprint_$c<
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4a0R b_s4a0S]
        case a_s4a0R of {
          GHC.Fingerprint.Type.Fingerprint dt_s4a0U dt1_s4a0V [Occ=Once] ->
              case b_s4a0S of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a0X dt3_s4a0Y [Occ=Once] ->
                    case eqWord# [dt_s4a0U dt2_s4a0X] of {
                      __DEFAULT ->
                          case leWord# [dt_s4a0U dt2_s4a0X] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# -> GHC.Types.True [];
                          };
                      1# ->
                          case ltWord# [dt1_s4a0V dt3_s4a0Y] of sat_s4a11 {
                            __DEFAULT -> tagToEnum# [sat_s4a11];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$w$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><L,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_s4a12 ww1_s4a13 ww2_s4a14 ww3_s4a15]
        case eqWord# [ww_s4a12 ww2_s4a14] of {
          __DEFAULT ->
              case leWord# [ww_s4a12 ww2_s4a14] of {
                __DEFAULT -> GHC.Types.GT [];
                1# -> GHC.Types.LT [];
              };
          1# ->
              case eqWord# [ww1_s4a13 ww3_s4a15] of {
                __DEFAULT ->
                    case leWord# [ww1_s4a13 ww3_s4a15] of {
                      __DEFAULT -> GHC.Types.GT [];
                      1# -> GHC.Types.LT [];
                    };
                1# -> GHC.Types.EQ [];
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S(SS),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_s4a1a w1_s4a1b]
        case w_s4a1a of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4a1d [Occ=Once]
                                           ww2_s4a1e [Occ=Once] ->
              case w1_s4a1b of {
                GHC.Fingerprint.Type.Fingerprint ww4_s4a1g [Occ=Once]
                                                 ww5_s4a1h [Occ=Once] ->
                    GHC.Fingerprint.Type.$w$ccompare
                        ww1_s4a1d ww2_s4a1e ww4_s4a1g ww5_s4a1h;
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint_$c==
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4a1i ds1_s4a1j]
        case ds_s4a1i of {
          GHC.Fingerprint.Type.Fingerprint dt_s4a1l [Occ=Once]
                                           dt1_s4a1m [Occ=Once] ->
              case ds1_s4a1j of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a1o [Occ=Once]
                                                 dt3_s4a1p [Occ=Once] ->
                    case eqWord# [dt_s4a1l dt2_s4a1o] of {
                      __DEFAULT -> GHC.Types.False [];
                      1# ->
                          case eqWord# [dt1_s4a1m dt3_s4a1p] of sat_s4a1r {
                            __DEFAULT -> tagToEnum# [sat_s4a1r];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [eta_s4a1s eta1_s4a1t]
        case eta_s4a1s of {
          GHC.Fingerprint.Type.Fingerprint dt_s4a1v [Occ=Once]
                                           dt1_s4a1w [Occ=Once] ->
              case eta1_s4a1t of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a1y [Occ=Once]
                                                 dt3_s4a1z [Occ=Once] ->
                    case eqWord# [dt_s4a1v dt2_s4a1y] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# ->
                          case eqWord# [dt1_s4a1w dt3_s4a1z] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Fingerprint.Type.$fEqFingerprint_$c==
                                     GHC.Fingerprint.Type.$fEqFingerprint_$c/=];

GHC.Fingerprint.Type.$fOrdFingerprint_$c<=
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4a1C b_s4a1D]
        case b_s4a1D of {
          GHC.Fingerprint.Type.Fingerprint dt_s4a1F dt1_s4a1G [Occ=Once] ->
              case a_s4a1C of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a1I dt3_s4a1J [Occ=Once] ->
                    case eqWord# [dt_s4a1F dt2_s4a1I] of {
                      __DEFAULT ->
                          case leWord# [dt_s4a1F dt2_s4a1I] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# ->
                          case ltWord# [dt1_s4a1G dt3_s4a1J] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$cmax
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4a1N y_s4a1O]
        case y_s4a1O of wild_s4a1P {
          GHC.Fingerprint.Type.Fingerprint dt_s4a1Q dt1_s4a1R [Occ=Once] ->
              case x_s4a1N of wild1_s4a1S {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a1T dt3_s4a1U [Occ=Once] ->
                    case eqWord# [dt_s4a1Q dt2_s4a1T] of {
                      __DEFAULT ->
                          case leWord# [dt_s4a1Q dt2_s4a1T] of {
                            __DEFAULT -> wild_s4a1P;
                            1# -> wild1_s4a1S;
                          };
                      1# ->
                          case ltWord# [dt1_s4a1R dt3_s4a1U] of {
                            __DEFAULT -> wild_s4a1P;
                            1# -> wild1_s4a1S;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$c>=
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4a1Y b_s4a1Z]
        case a_s4a1Y of {
          GHC.Fingerprint.Type.Fingerprint dt_s4a21 dt1_s4a22 [Occ=Once] ->
              case b_s4a1Z of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a24 dt3_s4a25 [Occ=Once] ->
                    case eqWord# [dt_s4a21 dt2_s4a24] of {
                      __DEFAULT ->
                          case leWord# [dt_s4a21 dt2_s4a24] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# ->
                          case ltWord# [dt1_s4a22 dt3_s4a25] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$c>
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4a29 b_s4a2a]
        GHC.Fingerprint.Type.$fOrdFingerprint_$c< b_s4a2a a_s4a29;

GHC.Fingerprint.Type.$fOrdFingerprint_$cmin
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4a2b y_s4a2c]
        case y_s4a2c of wild_s4a2d {
          GHC.Fingerprint.Type.Fingerprint dt_s4a2e dt1_s4a2f [Occ=Once] ->
              case x_s4a2b of wild1_s4a2g {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a2h dt3_s4a2i [Occ=Once] ->
                    case eqWord# [dt_s4a2e dt2_s4a2h] of {
                      __DEFAULT ->
                          case leWord# [dt_s4a2e dt2_s4a2h] of {
                            __DEFAULT -> wild1_s4a2g;
                            1# -> wild_s4a2d;
                          };
                      1# ->
                          case ltWord# [dt1_s4a2f dt3_s4a2i] of {
                            __DEFAULT -> wild1_s4a2g;
                            1# -> wild_s4a2d;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Fingerprint.Type.$fEqFingerprint
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c<
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c<=
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c>
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c>=
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$cmax
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$cmin];

GHC.Fingerprint.Type.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Fingerprint.Type.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$trModule4];

GHC.Fingerprint.Type.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint.Type"#;

GHC.Fingerprint.Type.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$trModule2];

GHC.Fingerprint.Type.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Fingerprint.Type.$trModule3
                                     GHC.Fingerprint.Type.$trModule1];

$krep_r4a01 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord64
                                              GHC.Types.[]];

GHC.Fingerprint.Type.$tcFingerprint2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Fingerprint"#;

GHC.Fingerprint.Type.$tcFingerprint1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$tcFingerprint2];

GHC.Fingerprint.Type.$tcFingerprint :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12761381476876783108##
                                    2142724667088540655##
                                    GHC.Fingerprint.Type.$trModule
                                    GHC.Fingerprint.Type.$tcFingerprint1
                                    0#
                                    GHC.Types.krep$*];

$krep1_r4a02 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Fingerprint.Type.$tcFingerprint
                                              GHC.Types.[]];

$krep2_r4a03 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4a01 $krep1_r4a02];

GHC.Fingerprint.Type.$tc'Fingerprint1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4a01 $krep2_r4a03];

GHC.Fingerprint.Type.$tc'Fingerprint3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Fingerprint"#;

GHC.Fingerprint.Type.$tc'Fingerprint2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$tc'Fingerprint3];

GHC.Fingerprint.Type.$tc'Fingerprint :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2008132202540166604##
                                    4312636609190854538##
                                    GHC.Fingerprint.Type.$trModule
                                    GHC.Fingerprint.Type.$tc'Fingerprint2
                                    0#
                                    GHC.Fingerprint.Type.$tc'Fingerprint1];

GHC.Fingerprint.Type.Fingerprint
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Fingerprint.Type.Fingerprint
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Fingerprint.Type.Fingerprint [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 15:59:02.922872875 UTC

GHC.Fingerprint.Type.$WFingerprint [InlPrag=INLINE[2]]
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> GHC.Fingerprint.Type.Fingerprint
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s4a05 dt_s4a06]
        case dt_s4a05 of {
          GHC.Word.W64# dt_s4a08 [Occ=Once] ->
              case dt_s4a06 of {
                GHC.Word.W64# dt_s4a0a [Occ=Once] ->
                    GHC.Fingerprint.Type.Fingerprint [dt_s4a08 dt_s4a0a];
              };
        };

GHC.Fingerprint.Type.$fShowFingerprint3 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [16##];

GHC.Fingerprint.Type.$fShowFingerprint2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

GHC.Fingerprint.Type.$fShowFingerprint_hex16
  :: GHC.Word.Word64 -> GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [i_s4a0b]
        case
            Numeric.showIntAtBase
                GHC.Word.$fIntegralWord64
                GHC.Word.$fShowWord64
                GHC.Fingerprint.Type.$fShowFingerprint3
                GHC.Show.intToDigit
                i_s4a0b
                GHC.Types.[]
        of
        hex_s4a0c [Dmd=<S,U>]
        { __DEFAULT ->
              case GHC.List.$wlenAcc hex_s4a0c 0# of ww2_s4a0d {
                __DEFAULT ->
                    case -# [16# ww2_s4a0d] of y_s4a0e [Dmd=<S,U>] {
                      __DEFAULT ->
                          case <# [0# y_s4a0e] of {
                            __DEFAULT -> hex_s4a0c;
                            1# ->
                                let {
                                  lvl_s4a0g [Occ=OnceL] :: [GHC.Types.Char]
                                  [LclId, Unf=OtherCon []] =
                                      CCCS :! [GHC.Fingerprint.Type.$fShowFingerprint2
                                               hex_s4a0c]; } in
                                let {
                                  $wxs_s4a0h [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                    :: GHC.Prim.Int# -> [GHC.Types.Char]
                                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                      sat-only [lvl_s4a0g $wxs_s4a0h] \r [ww_s4a0i]
                                          case ww_s4a0i of ds1_s4a0j {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4a0l [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [$wxs_s4a0h ds1_s4a0j] \u []
                                                          case -# [ds1_s4a0j 1#] of sat_s4a0k {
                                                            __DEFAULT -> $wxs_s4a0h sat_s4a0k;
                                                          };
                                                } in 
                                                  : [GHC.Fingerprint.Type.$fShowFingerprint2
                                                     sat_s4a0l];
                                            1# -> lvl_s4a0g;
                                          };
                                } in  $wxs_s4a0h y_s4a0e;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Base.String
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s4a0m ww1_s4a0n]
        let {
          sat_s4a0r [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww1_s4a0n] \s []
                  let {
                    sat_s4a0q [Occ=Once] :: GHC.Word.Word64
                    [LclId] =
                        CCCS GHC.Word.W64#! [ww1_s4a0n];
                  } in  GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4a0q; } in
        let {
          sat_s4a0o [Occ=Once] :: GHC.Word.Word64
          [LclId] =
              CCCS GHC.Word.W64#! [ww_s4a0m];
        } in 
          case
              GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4a0o
          of
          sat_s4a0p
          { __DEFAULT -> GHC.Base.++ sat_s4a0p sat_s4a0r;
          };

GHC.Fingerprint.Type.$fShowFingerprint_$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint -> GHC.Base.String
[GblId, Arity=1, Str=<S(SS),1*U(U,U)>, Unf=OtherCon []] =
    [] \r [w_s4a0s]
        case w_s4a0s of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4a0u [Occ=Once]
                                           ww2_s4a0v [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshow ww1_s4a0u ww2_s4a0v;
        };

GHC.Fingerprint.Type.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Base.String -> [GHC.Types.Char]
[GblId, Arity=3, Str=<L,U><L,U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4a0w ww1_s4a0x w_s4a0y]
        let {
          sat_s4a0D [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww1_s4a0x w_s4a0y] \s []
                  let {
                    sat_s4a0B [Occ=Once] :: GHC.Word.Word64
                    [LclId] =
                        CCCS GHC.Word.W64#! [ww1_s4a0x];
                  } in 
                    case
                        GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4a0B
                    of
                    sat_s4a0C
                    { __DEFAULT -> GHC.Base.++ sat_s4a0C w_s4a0y;
                    }; } in
        let {
          sat_s4a0z [Occ=Once] :: GHC.Word.Word64
          [LclId] =
              CCCS GHC.Word.W64#! [ww_s4a0w];
        } in 
          case
              GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4a0z
          of
          sat_s4a0A
          { __DEFAULT -> GHC.Base.++ sat_s4a0A sat_s4a0D;
          };

GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SS),1*U(U,U)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s4a0E w1_s4a0F w2_s4a0G]
        case w1_s4a0F of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4a0I [Occ=Once]
                                           ww2_s4a0J [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshowsPrec ww1_s4a0I ww2_s4a0J w2_s4a0G;
        };

GHC.Fingerprint.Type.$fShowFingerprint1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Base.String -> [GHC.Types.Char]
[GblId, Arity=2, Str=<S(SS),1*U(U,U)><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4a0K w1_s4a0L]
        case w_s4a0K of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4a0N [Occ=Once]
                                           ww2_s4a0O [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshowsPrec ww1_s4a0N ww2_s4a0O w1_s4a0L;
        };

GHC.Fingerprint.Type.$fShowFingerprint_$cshowList
  :: [GHC.Fingerprint.Type.Fingerprint] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s4a0P s_s4a0Q]
        GHC.Show.showList__
            GHC.Fingerprint.Type.$fShowFingerprint1 ls_s4a0P s_s4a0Q;

GHC.Fingerprint.Type.$fShowFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec
                                    GHC.Fingerprint.Type.$fShowFingerprint_$cshow
                                    GHC.Fingerprint.Type.$fShowFingerprint_$cshowList];

GHC.Fingerprint.Type.$fOrdFingerprint_$c<
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4a0R b_s4a0S]
        case a_s4a0R of {
          GHC.Fingerprint.Type.Fingerprint dt_s4a0U dt1_s4a0V [Occ=Once] ->
              case b_s4a0S of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a0X dt3_s4a0Y [Occ=Once] ->
                    case eqWord# [dt_s4a0U dt2_s4a0X] of {
                      __DEFAULT ->
                          case leWord# [dt_s4a0U dt2_s4a0X] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# -> GHC.Types.True [];
                          };
                      1# ->
                          case ltWord# [dt1_s4a0V dt3_s4a0Y] of sat_s4a11 {
                            __DEFAULT -> tagToEnum# [sat_s4a11];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$w$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><L,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_s4a12 ww1_s4a13 ww2_s4a14 ww3_s4a15]
        case eqWord# [ww_s4a12 ww2_s4a14] of {
          __DEFAULT ->
              case leWord# [ww_s4a12 ww2_s4a14] of {
                __DEFAULT -> GHC.Types.GT [];
                1# -> GHC.Types.LT [];
              };
          1# ->
              case eqWord# [ww1_s4a13 ww3_s4a15] of {
                __DEFAULT ->
                    case leWord# [ww1_s4a13 ww3_s4a15] of {
                      __DEFAULT -> GHC.Types.GT [];
                      1# -> GHC.Types.LT [];
                    };
                1# -> GHC.Types.EQ [];
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S(SS),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_s4a1a w1_s4a1b]
        case w_s4a1a of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4a1d [Occ=Once]
                                           ww2_s4a1e [Occ=Once] ->
              case w1_s4a1b of {
                GHC.Fingerprint.Type.Fingerprint ww4_s4a1g [Occ=Once]
                                                 ww5_s4a1h [Occ=Once] ->
                    GHC.Fingerprint.Type.$w$ccompare
                        ww1_s4a1d ww2_s4a1e ww4_s4a1g ww5_s4a1h;
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint_$c==
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4a1i ds1_s4a1j]
        case ds_s4a1i of {
          GHC.Fingerprint.Type.Fingerprint dt_s4a1l [Occ=Once]
                                           dt1_s4a1m [Occ=Once] ->
              case ds1_s4a1j of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a1o [Occ=Once]
                                                 dt3_s4a1p [Occ=Once] ->
                    case eqWord# [dt_s4a1l dt2_s4a1o] of {
                      __DEFAULT -> GHC.Types.False [];
                      1# ->
                          case eqWord# [dt1_s4a1m dt3_s4a1p] of sat_s4a1r {
                            __DEFAULT -> tagToEnum# [sat_s4a1r];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [eta_s4a1s eta1_s4a1t]
        case eta_s4a1s of {
          GHC.Fingerprint.Type.Fingerprint dt_s4a1v [Occ=Once]
                                           dt1_s4a1w [Occ=Once] ->
              case eta1_s4a1t of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a1y [Occ=Once]
                                                 dt3_s4a1z [Occ=Once] ->
                    case eqWord# [dt_s4a1v dt2_s4a1y] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# ->
                          case eqWord# [dt1_s4a1w dt3_s4a1z] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Fingerprint.Type.$fEqFingerprint_$c==
                                     GHC.Fingerprint.Type.$fEqFingerprint_$c/=];

GHC.Fingerprint.Type.$fOrdFingerprint_$c<=
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4a1C b_s4a1D]
        case b_s4a1D of {
          GHC.Fingerprint.Type.Fingerprint dt_s4a1F dt1_s4a1G [Occ=Once] ->
              case a_s4a1C of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a1I dt3_s4a1J [Occ=Once] ->
                    case eqWord# [dt_s4a1F dt2_s4a1I] of {
                      __DEFAULT ->
                          case leWord# [dt_s4a1F dt2_s4a1I] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# ->
                          case ltWord# [dt1_s4a1G dt3_s4a1J] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$cmax
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4a1N y_s4a1O]
        case y_s4a1O of wild_s4a1P {
          GHC.Fingerprint.Type.Fingerprint dt_s4a1Q dt1_s4a1R [Occ=Once] ->
              case x_s4a1N of wild1_s4a1S {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a1T dt3_s4a1U [Occ=Once] ->
                    case eqWord# [dt_s4a1Q dt2_s4a1T] of {
                      __DEFAULT ->
                          case leWord# [dt_s4a1Q dt2_s4a1T] of {
                            __DEFAULT -> wild_s4a1P;
                            1# -> wild1_s4a1S;
                          };
                      1# ->
                          case ltWord# [dt1_s4a1R dt3_s4a1U] of {
                            __DEFAULT -> wild_s4a1P;
                            1# -> wild1_s4a1S;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$c>=
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4a1Y b_s4a1Z]
        case a_s4a1Y of {
          GHC.Fingerprint.Type.Fingerprint dt_s4a21 dt1_s4a22 [Occ=Once] ->
              case b_s4a1Z of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a24 dt3_s4a25 [Occ=Once] ->
                    case eqWord# [dt_s4a21 dt2_s4a24] of {
                      __DEFAULT ->
                          case leWord# [dt_s4a21 dt2_s4a24] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# ->
                          case ltWord# [dt1_s4a22 dt3_s4a25] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$c>
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4a29 b_s4a2a]
        GHC.Fingerprint.Type.$fOrdFingerprint_$c< b_s4a2a a_s4a29;

GHC.Fingerprint.Type.$fOrdFingerprint_$cmin
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4a2b y_s4a2c]
        case y_s4a2c of wild_s4a2d {
          GHC.Fingerprint.Type.Fingerprint dt_s4a2e dt1_s4a2f [Occ=Once] ->
              case x_s4a2b of wild1_s4a2g {
                GHC.Fingerprint.Type.Fingerprint dt2_s4a2h dt3_s4a2i [Occ=Once] ->
                    case eqWord# [dt_s4a2e dt2_s4a2h] of {
                      __DEFAULT ->
                          case leWord# [dt_s4a2e dt2_s4a2h] of {
                            __DEFAULT -> wild1_s4a2g;
                            1# -> wild_s4a2d;
                          };
                      1# ->
                          case ltWord# [dt1_s4a2f dt3_s4a2i] of {
                            __DEFAULT -> wild1_s4a2g;
                            1# -> wild_s4a2d;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Fingerprint.Type.$fEqFingerprint
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c<
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c<=
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c>
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c>=
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$cmax
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$cmin];

GHC.Fingerprint.Type.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Fingerprint.Type.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$trModule4];

GHC.Fingerprint.Type.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint.Type"#;

GHC.Fingerprint.Type.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$trModule2];

GHC.Fingerprint.Type.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Fingerprint.Type.$trModule3
                                     GHC.Fingerprint.Type.$trModule1];

$krep_r4a01 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord64
                                              GHC.Types.[]];

GHC.Fingerprint.Type.$tcFingerprint2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Fingerprint"#;

GHC.Fingerprint.Type.$tcFingerprint1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$tcFingerprint2];

GHC.Fingerprint.Type.$tcFingerprint :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12761381476876783108##
                                    2142724667088540655##
                                    GHC.Fingerprint.Type.$trModule
                                    GHC.Fingerprint.Type.$tcFingerprint1
                                    0#
                                    GHC.Types.krep$*];

$krep1_r4a02 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Fingerprint.Type.$tcFingerprint
                                              GHC.Types.[]];

$krep2_r4a03 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4a01 $krep1_r4a02];

GHC.Fingerprint.Type.$tc'Fingerprint1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4a01 $krep2_r4a03];

GHC.Fingerprint.Type.$tc'Fingerprint3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Fingerprint"#;

GHC.Fingerprint.Type.$tc'Fingerprint2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$tc'Fingerprint3];

GHC.Fingerprint.Type.$tc'Fingerprint :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2008132202540166604##
                                    4312636609190854538##
                                    GHC.Fingerprint.Type.$trModule
                                    GHC.Fingerprint.Type.$tc'Fingerprint2
                                    0#
                                    GHC.Fingerprint.Type.$tc'Fingerprint1];

GHC.Fingerprint.Type.Fingerprint
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Fingerprint.Type.Fingerprint
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Fingerprint.Type.Fingerprint [eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 15:59:03.505315108 UTC

GHC.Fingerprint.Type.$WFingerprint [InlPrag=INLINE[2]]
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> GHC.Fingerprint.Type.Fingerprint
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s4avb dt_s4avc]
        case dt_s4avb of {
          GHC.Word.W64# dt_s4ave [Occ=Once] ->
              case dt_s4avc of {
                GHC.Word.W64# dt_s4avg [Occ=Once] ->
                    GHC.Fingerprint.Type.Fingerprint [dt_s4ave dt_s4avg];
              };
        };

GHC.Fingerprint.Type.$fShowFingerprint3 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [16##];

GHC.Fingerprint.Type.$fShowFingerprint2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

GHC.Fingerprint.Type.$fShowFingerprint_hex16
  :: GHC.Word.Word64 -> GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [i_s4avh]
        case
            Numeric.showIntAtBase
                GHC.Word.$fIntegralWord64
                GHC.Word.$fShowWord64
                GHC.Fingerprint.Type.$fShowFingerprint3
                GHC.Show.intToDigit
                i_s4avh
                GHC.Types.[]
        of
        hex_s4avi [Dmd=<S,U>]
        { __DEFAULT ->
              case GHC.List.$wlenAcc hex_s4avi 0# of ww2_s4avj {
                __DEFAULT ->
                    case -# [16# ww2_s4avj] of y_s4avk [Dmd=<S,U>] {
                      __DEFAULT ->
                          case <# [0# y_s4avk] of {
                            __DEFAULT -> hex_s4avi;
                            1# ->
                                let {
                                  lvl_s4avm [Occ=OnceL] :: [GHC.Types.Char]
                                  [LclId, Unf=OtherCon []] =
                                      CCCS :! [GHC.Fingerprint.Type.$fShowFingerprint2
                                               hex_s4avi]; } in
                                let {
                                  $wxs_s4avn [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                    :: GHC.Prim.Int# -> [GHC.Types.Char]
                                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                      sat-only [lvl_s4avm $wxs_s4avn] \r [ww_s4avo]
                                          case ww_s4avo of ds1_s4avp {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4avr [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [$wxs_s4avn ds1_s4avp] \u []
                                                          case -# [ds1_s4avp 1#] of sat_s4avq {
                                                            __DEFAULT -> $wxs_s4avn sat_s4avq;
                                                          };
                                                } in 
                                                  : [GHC.Fingerprint.Type.$fShowFingerprint2
                                                     sat_s4avr];
                                            1# -> lvl_s4avm;
                                          };
                                } in  $wxs_s4avn y_s4avk;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Base.String
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s4avs ww1_s4avt]
        let {
          sat_s4avx [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww1_s4avt] \s []
                  let {
                    sat_s4avw [Occ=Once] :: GHC.Word.Word64
                    [LclId] =
                        CCCS GHC.Word.W64#! [ww1_s4avt];
                  } in  GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4avw; } in
        let {
          sat_s4avu [Occ=Once] :: GHC.Word.Word64
          [LclId] =
              CCCS GHC.Word.W64#! [ww_s4avs];
        } in 
          case
              GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4avu
          of
          sat_s4avv
          { __DEFAULT -> GHC.Base.++ sat_s4avv sat_s4avx;
          };

GHC.Fingerprint.Type.$fShowFingerprint_$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint -> GHC.Base.String
[GblId, Arity=1, Str=<S(SS),1*U(U,U)>, Unf=OtherCon []] =
    [] \r [w_s4avy]
        case w_s4avy of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4avA [Occ=Once]
                                           ww2_s4avB [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshow ww1_s4avA ww2_s4avB;
        };

GHC.Fingerprint.Type.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Base.String -> [GHC.Types.Char]
[GblId, Arity=3, Str=<L,U><L,U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4avC ww1_s4avD w_s4avE]
        let {
          sat_s4avJ [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww1_s4avD w_s4avE] \s []
                  let {
                    sat_s4avH [Occ=Once] :: GHC.Word.Word64
                    [LclId] =
                        CCCS GHC.Word.W64#! [ww1_s4avD];
                  } in 
                    case
                        GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4avH
                    of
                    sat_s4avI
                    { __DEFAULT -> GHC.Base.++ sat_s4avI w_s4avE;
                    }; } in
        let {
          sat_s4avF [Occ=Once] :: GHC.Word.Word64
          [LclId] =
              CCCS GHC.Word.W64#! [ww_s4avC];
        } in 
          case
              GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4avF
          of
          sat_s4avG
          { __DEFAULT -> GHC.Base.++ sat_s4avG sat_s4avJ;
          };

GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SS),1*U(U,U)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s4avK w1_s4avL w2_s4avM]
        case w1_s4avL of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4avO [Occ=Once]
                                           ww2_s4avP [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshowsPrec ww1_s4avO ww2_s4avP w2_s4avM;
        };

GHC.Fingerprint.Type.$fShowFingerprint1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Base.String -> [GHC.Types.Char]
[GblId, Arity=2, Str=<S(SS),1*U(U,U)><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4avQ w1_s4avR]
        case w_s4avQ of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4avT [Occ=Once]
                                           ww2_s4avU [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshowsPrec ww1_s4avT ww2_s4avU w1_s4avR;
        };

GHC.Fingerprint.Type.$fShowFingerprint_$cshowList
  :: [GHC.Fingerprint.Type.Fingerprint] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s4avV s_s4avW]
        GHC.Show.showList__
            GHC.Fingerprint.Type.$fShowFingerprint1 ls_s4avV s_s4avW;

GHC.Fingerprint.Type.$fShowFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec
                                    GHC.Fingerprint.Type.$fShowFingerprint_$cshow
                                    GHC.Fingerprint.Type.$fShowFingerprint_$cshowList];

GHC.Fingerprint.Type.$fOrdFingerprint_$c<
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4avX b_s4avY]
        case a_s4avX of {
          GHC.Fingerprint.Type.Fingerprint dt_s4aw0 dt1_s4aw1 [Occ=Once] ->
              case b_s4avY of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4aw3 dt3_s4aw4 [Occ=Once] ->
                    case eqWord# [dt_s4aw0 dt2_s4aw3] of {
                      __DEFAULT ->
                          case leWord# [dt_s4aw0 dt2_s4aw3] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# -> GHC.Types.True [];
                          };
                      1# ->
                          case ltWord# [dt1_s4aw1 dt3_s4aw4] of sat_s4aw7 {
                            __DEFAULT -> tagToEnum# [sat_s4aw7];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$w$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><L,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_s4aw8 ww1_s4aw9 ww2_s4awa ww3_s4awb]
        case eqWord# [ww_s4aw8 ww2_s4awa] of {
          __DEFAULT ->
              case leWord# [ww_s4aw8 ww2_s4awa] of {
                __DEFAULT -> GHC.Types.GT [];
                1# -> GHC.Types.LT [];
              };
          1# ->
              case eqWord# [ww1_s4aw9 ww3_s4awb] of {
                __DEFAULT ->
                    case leWord# [ww1_s4aw9 ww3_s4awb] of {
                      __DEFAULT -> GHC.Types.GT [];
                      1# -> GHC.Types.LT [];
                    };
                1# -> GHC.Types.EQ [];
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S(SS),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_s4awg w1_s4awh]
        case w_s4awg of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4awj [Occ=Once]
                                           ww2_s4awk [Occ=Once] ->
              case w1_s4awh of {
                GHC.Fingerprint.Type.Fingerprint ww4_s4awm [Occ=Once]
                                                 ww5_s4awn [Occ=Once] ->
                    GHC.Fingerprint.Type.$w$ccompare
                        ww1_s4awj ww2_s4awk ww4_s4awm ww5_s4awn;
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint_$c==
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4awo ds1_s4awp]
        case ds_s4awo of {
          GHC.Fingerprint.Type.Fingerprint dt_s4awr [Occ=Once]
                                           dt1_s4aws [Occ=Once] ->
              case ds1_s4awp of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4awu [Occ=Once]
                                                 dt3_s4awv [Occ=Once] ->
                    case eqWord# [dt_s4awr dt2_s4awu] of {
                      __DEFAULT -> GHC.Types.False [];
                      1# ->
                          case eqWord# [dt1_s4aws dt3_s4awv] of sat_s4awx {
                            __DEFAULT -> tagToEnum# [sat_s4awx];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [eta_s4awy eta1_s4awz]
        case eta_s4awy of {
          GHC.Fingerprint.Type.Fingerprint dt_s4awB [Occ=Once]
                                           dt1_s4awC [Occ=Once] ->
              case eta1_s4awz of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4awE [Occ=Once]
                                                 dt3_s4awF [Occ=Once] ->
                    case eqWord# [dt_s4awB dt2_s4awE] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# ->
                          case eqWord# [dt1_s4awC dt3_s4awF] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Fingerprint.Type.$fEqFingerprint_$c==
                                     GHC.Fingerprint.Type.$fEqFingerprint_$c/=];

GHC.Fingerprint.Type.$fOrdFingerprint_$c<=
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4awI b_s4awJ]
        case b_s4awJ of {
          GHC.Fingerprint.Type.Fingerprint dt_s4awL dt1_s4awM [Occ=Once] ->
              case a_s4awI of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4awO dt3_s4awP [Occ=Once] ->
                    case eqWord# [dt_s4awL dt2_s4awO] of {
                      __DEFAULT ->
                          case leWord# [dt_s4awL dt2_s4awO] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# ->
                          case ltWord# [dt1_s4awM dt3_s4awP] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$cmax
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4awT y_s4awU]
        case y_s4awU of wild_s4awV {
          GHC.Fingerprint.Type.Fingerprint dt_s4awW dt1_s4awX [Occ=Once] ->
              case x_s4awT of wild1_s4awY {
                GHC.Fingerprint.Type.Fingerprint dt2_s4awZ dt3_s4ax0 [Occ=Once] ->
                    case eqWord# [dt_s4awW dt2_s4awZ] of {
                      __DEFAULT ->
                          case leWord# [dt_s4awW dt2_s4awZ] of {
                            __DEFAULT -> wild_s4awV;
                            1# -> wild1_s4awY;
                          };
                      1# ->
                          case ltWord# [dt1_s4awX dt3_s4ax0] of {
                            __DEFAULT -> wild_s4awV;
                            1# -> wild1_s4awY;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$c>=
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4ax4 b_s4ax5]
        case a_s4ax4 of {
          GHC.Fingerprint.Type.Fingerprint dt_s4ax7 dt1_s4ax8 [Occ=Once] ->
              case b_s4ax5 of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4axa dt3_s4axb [Occ=Once] ->
                    case eqWord# [dt_s4ax7 dt2_s4axa] of {
                      __DEFAULT ->
                          case leWord# [dt_s4ax7 dt2_s4axa] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# ->
                          case ltWord# [dt1_s4ax8 dt3_s4axb] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$c>
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4axf b_s4axg]
        GHC.Fingerprint.Type.$fOrdFingerprint_$c< b_s4axg a_s4axf;

GHC.Fingerprint.Type.$fOrdFingerprint_$cmin
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4axh y_s4axi]
        case y_s4axi of wild_s4axj {
          GHC.Fingerprint.Type.Fingerprint dt_s4axk dt1_s4axl [Occ=Once] ->
              case x_s4axh of wild1_s4axm {
                GHC.Fingerprint.Type.Fingerprint dt2_s4axn dt3_s4axo [Occ=Once] ->
                    case eqWord# [dt_s4axk dt2_s4axn] of {
                      __DEFAULT ->
                          case leWord# [dt_s4axk dt2_s4axn] of {
                            __DEFAULT -> wild1_s4axm;
                            1# -> wild_s4axj;
                          };
                      1# ->
                          case ltWord# [dt1_s4axl dt3_s4axo] of {
                            __DEFAULT -> wild1_s4axm;
                            1# -> wild_s4axj;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Fingerprint.Type.$fEqFingerprint
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c<
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c<=
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c>
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c>=
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$cmax
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$cmin];

GHC.Fingerprint.Type.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Fingerprint.Type.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$trModule4];

GHC.Fingerprint.Type.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint.Type"#;

GHC.Fingerprint.Type.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$trModule2];

GHC.Fingerprint.Type.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Fingerprint.Type.$trModule3
                                     GHC.Fingerprint.Type.$trModule1];

$krep_r4a01 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord64
                                              GHC.Types.[]];

GHC.Fingerprint.Type.$tcFingerprint2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Fingerprint"#;

GHC.Fingerprint.Type.$tcFingerprint1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$tcFingerprint2];

GHC.Fingerprint.Type.$tcFingerprint :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12761381476876783108##
                                    2142724667088540655##
                                    GHC.Fingerprint.Type.$trModule
                                    GHC.Fingerprint.Type.$tcFingerprint1
                                    0#
                                    GHC.Types.krep$*];

$krep1_r4a02 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Fingerprint.Type.$tcFingerprint
                                              GHC.Types.[]];

$krep2_r4a03 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4a01 $krep1_r4a02];

GHC.Fingerprint.Type.$tc'Fingerprint1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4a01 $krep2_r4a03];

GHC.Fingerprint.Type.$tc'Fingerprint3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Fingerprint"#;

GHC.Fingerprint.Type.$tc'Fingerprint2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$tc'Fingerprint3];

GHC.Fingerprint.Type.$tc'Fingerprint :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2008132202540166604##
                                    4312636609190854538##
                                    GHC.Fingerprint.Type.$trModule
                                    GHC.Fingerprint.Type.$tc'Fingerprint2
                                    0#
                                    GHC.Fingerprint.Type.$tc'Fingerprint1];

GHC.Fingerprint.Type.Fingerprint
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Fingerprint.Type.Fingerprint
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Fingerprint.Type.Fingerprint [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 15:59:03.513175812 UTC

GHC.Fingerprint.Type.$WFingerprint [InlPrag=INLINE[2]]
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> GHC.Fingerprint.Type.Fingerprint
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s4avb dt_s4avc]
        case dt_s4avb of {
          GHC.Word.W64# dt_s4ave [Occ=Once] ->
              case dt_s4avc of {
                GHC.Word.W64# dt_s4avg [Occ=Once] ->
                    GHC.Fingerprint.Type.Fingerprint [dt_s4ave dt_s4avg];
              };
        };

GHC.Fingerprint.Type.$fShowFingerprint3 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [16##];

GHC.Fingerprint.Type.$fShowFingerprint2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

GHC.Fingerprint.Type.$fShowFingerprint_hex16
  :: GHC.Word.Word64 -> GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [i_s4avh]
        case
            Numeric.showIntAtBase
                GHC.Word.$fIntegralWord64
                GHC.Word.$fShowWord64
                GHC.Fingerprint.Type.$fShowFingerprint3
                GHC.Show.intToDigit
                i_s4avh
                GHC.Types.[]
        of
        hex_s4avi [Dmd=<S,U>]
        { __DEFAULT ->
              case GHC.List.$wlenAcc hex_s4avi 0# of ww2_s4avj {
                __DEFAULT ->
                    case -# [16# ww2_s4avj] of y_s4avk [Dmd=<S,U>] {
                      __DEFAULT ->
                          case <# [0# y_s4avk] of {
                            __DEFAULT -> hex_s4avi;
                            1# ->
                                let {
                                  lvl_s4avm [Occ=OnceL] :: [GHC.Types.Char]
                                  [LclId, Unf=OtherCon []] =
                                      CCCS :! [GHC.Fingerprint.Type.$fShowFingerprint2
                                               hex_s4avi]; } in
                                let {
                                  $wxs_s4avn [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                    :: GHC.Prim.Int# -> [GHC.Types.Char]
                                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                      sat-only [lvl_s4avm $wxs_s4avn] \r [ww_s4avo]
                                          case ww_s4avo of ds1_s4avp {
                                            __DEFAULT ->
                                                let {
                                                  sat_s4avr [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [$wxs_s4avn ds1_s4avp] \u []
                                                          case -# [ds1_s4avp 1#] of sat_s4avq {
                                                            __DEFAULT -> $wxs_s4avn sat_s4avq;
                                                          };
                                                } in 
                                                  : [GHC.Fingerprint.Type.$fShowFingerprint2
                                                     sat_s4avr];
                                            1# -> lvl_s4avm;
                                          };
                                } in  $wxs_s4avn y_s4avk;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Base.String
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s4avs ww1_s4avt]
        let {
          sat_s4avx [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww1_s4avt] \s []
                  let {
                    sat_s4avw [Occ=Once] :: GHC.Word.Word64
                    [LclId] =
                        CCCS GHC.Word.W64#! [ww1_s4avt];
                  } in  GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4avw; } in
        let {
          sat_s4avu [Occ=Once] :: GHC.Word.Word64
          [LclId] =
              CCCS GHC.Word.W64#! [ww_s4avs];
        } in 
          case
              GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4avu
          of
          sat_s4avv
          { __DEFAULT -> GHC.Base.++ sat_s4avv sat_s4avx;
          };

GHC.Fingerprint.Type.$fShowFingerprint_$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint -> GHC.Base.String
[GblId, Arity=1, Str=<S(SS),1*U(U,U)>, Unf=OtherCon []] =
    [] \r [w_s4avy]
        case w_s4avy of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4avA [Occ=Once]
                                           ww2_s4avB [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshow ww1_s4avA ww2_s4avB;
        };

GHC.Fingerprint.Type.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Base.String -> [GHC.Types.Char]
[GblId, Arity=3, Str=<L,U><L,U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_s4avC ww1_s4avD w_s4avE]
        let {
          sat_s4avJ [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww1_s4avD w_s4avE] \s []
                  let {
                    sat_s4avH [Occ=Once] :: GHC.Word.Word64
                    [LclId] =
                        CCCS GHC.Word.W64#! [ww1_s4avD];
                  } in 
                    case
                        GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4avH
                    of
                    sat_s4avI
                    { __DEFAULT -> GHC.Base.++ sat_s4avI w_s4avE;
                    }; } in
        let {
          sat_s4avF [Occ=Once] :: GHC.Word.Word64
          [LclId] =
              CCCS GHC.Word.W64#! [ww_s4avC];
        } in 
          case
              GHC.Fingerprint.Type.$fShowFingerprint_hex16 sat_s4avF
          of
          sat_s4avG
          { __DEFAULT -> GHC.Base.++ sat_s4avG sat_s4avJ;
          };

GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SS),1*U(U,U)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s4avK w1_s4avL w2_s4avM]
        case w1_s4avL of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4avO [Occ=Once]
                                           ww2_s4avP [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshowsPrec ww1_s4avO ww2_s4avP w2_s4avM;
        };

GHC.Fingerprint.Type.$fShowFingerprint1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Base.String -> [GHC.Types.Char]
[GblId, Arity=2, Str=<S(SS),1*U(U,U)><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4avQ w1_s4avR]
        case w_s4avQ of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4avT [Occ=Once]
                                           ww2_s4avU [Occ=Once] ->
              GHC.Fingerprint.Type.$w$cshowsPrec ww1_s4avT ww2_s4avU w1_s4avR;
        };

GHC.Fingerprint.Type.$fShowFingerprint_$cshowList
  :: [GHC.Fingerprint.Type.Fingerprint] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s4avV s_s4avW]
        GHC.Show.showList__
            GHC.Fingerprint.Type.$fShowFingerprint1 ls_s4avV s_s4avW;

GHC.Fingerprint.Type.$fShowFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec
                                    GHC.Fingerprint.Type.$fShowFingerprint_$cshow
                                    GHC.Fingerprint.Type.$fShowFingerprint_$cshowList];

GHC.Fingerprint.Type.$fOrdFingerprint_$c<
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4avX b_s4avY]
        case a_s4avX of {
          GHC.Fingerprint.Type.Fingerprint dt_s4aw0 dt1_s4aw1 [Occ=Once] ->
              case b_s4avY of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4aw3 dt3_s4aw4 [Occ=Once] ->
                    case eqWord# [dt_s4aw0 dt2_s4aw3] of {
                      __DEFAULT ->
                          case leWord# [dt_s4aw0 dt2_s4aw3] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# -> GHC.Types.True [];
                          };
                      1# ->
                          case ltWord# [dt1_s4aw1 dt3_s4aw4] of sat_s4aw7 {
                            __DEFAULT -> tagToEnum# [sat_s4aw7];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$w$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Types.Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><L,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_s4aw8 ww1_s4aw9 ww2_s4awa ww3_s4awb]
        case eqWord# [ww_s4aw8 ww2_s4awa] of {
          __DEFAULT ->
              case leWord# [ww_s4aw8 ww2_s4awa] of {
                __DEFAULT -> GHC.Types.GT [];
                1# -> GHC.Types.LT [];
              };
          1# ->
              case eqWord# [ww1_s4aw9 ww3_s4awb] of {
                __DEFAULT ->
                    case leWord# [ww1_s4aw9 ww3_s4awb] of {
                      __DEFAULT -> GHC.Types.GT [];
                      1# -> GHC.Types.LT [];
                    };
                1# -> GHC.Types.EQ [];
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare [InlPrag=NOUSERINLINE[0]]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)><S(SS),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_s4awg w1_s4awh]
        case w_s4awg of {
          GHC.Fingerprint.Type.Fingerprint ww1_s4awj [Occ=Once]
                                           ww2_s4awk [Occ=Once] ->
              case w1_s4awh of {
                GHC.Fingerprint.Type.Fingerprint ww4_s4awm [Occ=Once]
                                                 ww5_s4awn [Occ=Once] ->
                    GHC.Fingerprint.Type.$w$ccompare
                        ww1_s4awj ww2_s4awk ww4_s4awm ww5_s4awn;
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint_$c==
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4awo ds1_s4awp]
        case ds_s4awo of {
          GHC.Fingerprint.Type.Fingerprint dt_s4awr [Occ=Once]
                                           dt1_s4aws [Occ=Once] ->
              case ds1_s4awp of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4awu [Occ=Once]
                                                 dt3_s4awv [Occ=Once] ->
                    case eqWord# [dt_s4awr dt2_s4awu] of {
                      __DEFAULT -> GHC.Types.False [];
                      1# ->
                          case eqWord# [dt1_s4aws dt3_s4awv] of sat_s4awx {
                            __DEFAULT -> tagToEnum# [sat_s4awx];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [eta_s4awy eta1_s4awz]
        case eta_s4awy of {
          GHC.Fingerprint.Type.Fingerprint dt_s4awB [Occ=Once]
                                           dt1_s4awC [Occ=Once] ->
              case eta1_s4awz of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4awE [Occ=Once]
                                                 dt3_s4awF [Occ=Once] ->
                    case eqWord# [dt_s4awB dt2_s4awE] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# ->
                          case eqWord# [dt1_s4awC dt3_s4awF] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fEqFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Fingerprint.Type.$fEqFingerprint_$c==
                                     GHC.Fingerprint.Type.$fEqFingerprint_$c/=];

GHC.Fingerprint.Type.$fOrdFingerprint_$c<=
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4awI b_s4awJ]
        case b_s4awJ of {
          GHC.Fingerprint.Type.Fingerprint dt_s4awL dt1_s4awM [Occ=Once] ->
              case a_s4awI of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4awO dt3_s4awP [Occ=Once] ->
                    case eqWord# [dt_s4awL dt2_s4awO] of {
                      __DEFAULT ->
                          case leWord# [dt_s4awL dt2_s4awO] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# ->
                          case ltWord# [dt1_s4awM dt3_s4awP] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$cmax
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4awT y_s4awU]
        case y_s4awU of wild_s4awV {
          GHC.Fingerprint.Type.Fingerprint dt_s4awW dt1_s4awX [Occ=Once] ->
              case x_s4awT of wild1_s4awY {
                GHC.Fingerprint.Type.Fingerprint dt2_s4awZ dt3_s4ax0 [Occ=Once] ->
                    case eqWord# [dt_s4awW dt2_s4awZ] of {
                      __DEFAULT ->
                          case leWord# [dt_s4awW dt2_s4awZ] of {
                            __DEFAULT -> wild_s4awV;
                            1# -> wild1_s4awY;
                          };
                      1# ->
                          case ltWord# [dt1_s4awX dt3_s4ax0] of {
                            __DEFAULT -> wild_s4awV;
                            1# -> wild1_s4awY;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$c>=
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4ax4 b_s4ax5]
        case a_s4ax4 of {
          GHC.Fingerprint.Type.Fingerprint dt_s4ax7 dt1_s4ax8 [Occ=Once] ->
              case b_s4ax5 of {
                GHC.Fingerprint.Type.Fingerprint dt2_s4axa dt3_s4axb [Occ=Once] ->
                    case eqWord# [dt_s4ax7 dt2_s4axa] of {
                      __DEFAULT ->
                          case leWord# [dt_s4ax7 dt2_s4axa] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                      1# ->
                          case ltWord# [dt1_s4ax8 dt3_s4axb] of {
                            __DEFAULT -> GHC.Types.True [];
                            1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint_$c>
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [a_s4axf b_s4axg]
        GHC.Fingerprint.Type.$fOrdFingerprint_$c< b_s4axg a_s4axf;

GHC.Fingerprint.Type.$fOrdFingerprint_$cmin
  :: GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
     -> GHC.Fingerprint.Type.Fingerprint
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [x_s4axh y_s4axi]
        case y_s4axi of wild_s4axj {
          GHC.Fingerprint.Type.Fingerprint dt_s4axk dt1_s4axl [Occ=Once] ->
              case x_s4axh of wild1_s4axm {
                GHC.Fingerprint.Type.Fingerprint dt2_s4axn dt3_s4axo [Occ=Once] ->
                    case eqWord# [dt_s4axk dt2_s4axn] of {
                      __DEFAULT ->
                          case leWord# [dt_s4axk dt2_s4axn] of {
                            __DEFAULT -> wild1_s4axm;
                            1# -> wild_s4axj;
                          };
                      1# ->
                          case ltWord# [dt1_s4axl dt3_s4axo] of {
                            __DEFAULT -> wild1_s4axm;
                            1# -> wild_s4axj;
                          };
                    };
              };
        };

GHC.Fingerprint.Type.$fOrdFingerprint [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Fingerprint.Type.Fingerprint
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Fingerprint.Type.$fEqFingerprint
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c<
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c<=
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c>
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$c>=
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$cmax
                                      GHC.Fingerprint.Type.$fOrdFingerprint_$cmin];

GHC.Fingerprint.Type.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Fingerprint.Type.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$trModule4];

GHC.Fingerprint.Type.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Fingerprint.Type"#;

GHC.Fingerprint.Type.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$trModule2];

GHC.Fingerprint.Type.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Fingerprint.Type.$trModule3
                                     GHC.Fingerprint.Type.$trModule1];

$krep_r4a01 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord64
                                              GHC.Types.[]];

GHC.Fingerprint.Type.$tcFingerprint2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Fingerprint"#;

GHC.Fingerprint.Type.$tcFingerprint1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$tcFingerprint2];

GHC.Fingerprint.Type.$tcFingerprint :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12761381476876783108##
                                    2142724667088540655##
                                    GHC.Fingerprint.Type.$trModule
                                    GHC.Fingerprint.Type.$tcFingerprint1
                                    0#
                                    GHC.Types.krep$*];

$krep1_r4a02 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Fingerprint.Type.$tcFingerprint
                                              GHC.Types.[]];

$krep2_r4a03 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4a01 $krep1_r4a02];

GHC.Fingerprint.Type.$tc'Fingerprint1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r4a01 $krep2_r4a03];

GHC.Fingerprint.Type.$tc'Fingerprint3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Fingerprint"#;

GHC.Fingerprint.Type.$tc'Fingerprint2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Fingerprint.Type.$tc'Fingerprint3];

GHC.Fingerprint.Type.$tc'Fingerprint :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2008132202540166604##
                                    4312636609190854538##
                                    GHC.Fingerprint.Type.$trModule
                                    GHC.Fingerprint.Type.$tc'Fingerprint2
                                    0#
                                    GHC.Fingerprint.Type.$tc'Fingerprint1];

GHC.Fingerprint.Type.Fingerprint
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Fingerprint.Type.Fingerprint
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Fingerprint.Type.Fingerprint [eta_B2 eta_B1];

