
==================== Raw Cmm ====================
2018-03-16 15:59:03.022689646 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:03.024986897 UTC

[section ""data" . GHC.Fingerprint.Type.$WFingerprint_closure" {
     GHC.Fingerprint.Type.$WFingerprint_closure:
         const GHC.Fingerprint.Type.$WFingerprint_info;
 },
 GHC.Fingerprint.Type.$WFingerprint_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aiF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4aiO; else goto c4aiP;
       c4aiO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$WFingerprint_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aiP: // global
           I64[Sp - 16] = block_c4aiC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aiV; else goto c4aiD;
       u4aiV: // global
           call _c4aiC(R1) args: 0, res: 0, upd: 0;
       c4aiD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$WFingerprint_info" {
     GHC.Fingerprint.Type.$WFingerprint_info:
         const GHC.Fingerprint.Type.$WFingerprint_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aiC() //  [R1]
         { []
         }
     {offset
       c4aiC: // global
           I64[Sp] = block_c4aiI_info;
           _s4a08::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4a08::I64;
           if (R1 & 7 != 0) goto u4aiU; else goto c4aiJ;
       u4aiU: // global
           call _c4aiI(R1) args: 0, res: 0, upd: 0;
       c4aiJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aiC_info" {
     block_c4aiC_info:
         const _c4aiC;
         const 1;
         const 30;
 },
 _c4aiI() //  [R1]
         { []
         }
     {offset
       c4aiI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4aiT; else goto c4aiS;
       c4aiT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4aiS: // global
           _s4a0a::I64 = I64[R1 + 7];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s4a0a::I64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aiI_info" {
     block_c4aiI_info:
         const _c4aiI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.032027094 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint3_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint3_closure:
         const GHC.Word.W64#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.03377518 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint2_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint2_closure:
         const GHC.Types.C#_con_info;
         const 48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.03833732 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint_hex16_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint_hex16_closure:
         const GHC.Fingerprint.Type.$fShowFingerprint_hex16_info;
         const 0;
 },
 sat_s4a0l_entry() //  [R1]
         { []
         }
     {offset
       c4ajK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ajL; else goto c4ajM;
       c4ajL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4ajM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs_s4a0h_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4a0l_info" {
     sat_s4a0l_info:
         const sat_s4a0l_entry;
         const 4294967297;
         const 19;
 },
 $wxs_s4a0h_entry() //  [R1, R2]
         { []
         }
     {offset
       c4ajQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c4ajU; else goto c4ajT;
       c4ajU: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4ajT: // global
           if (R2 == 1) goto c4ajP; else goto c4ajO;
       c4ajP: // global
           _s4a0g::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s4a0g::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4ajO: // global
           I64[Hp - 48] = sat_s4a0l_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Fingerprint.Type.$fShowFingerprint2_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_s4a0h_info" {
     $wxs_s4a0h_info:
         const $wxs_s4a0h_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry() //  [R2]
         { []
         }
     {offset
       c4ajW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ajX; else goto c4ajY;
       c4ajX: // global
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fShowFingerprint_hex16_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4ajY: // global
           I64[Sp - 8] = block_c4ajh_info;
           R6 = R2;
           R5 = GHC.Show.intToDigit_closure+1;
           R4 = GHC.Fingerprint.Type.$fShowFingerprint3_closure+1;
           R3 = GHC.Word.$fShowWord64_closure;
           R2 = GHC.Word.$fIntegralWord64_closure;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Numeric.showIntAtBase_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fShowFingerprint_hex16_info" {
     GHC.Fingerprint.Type.$fShowFingerprint_hex16_info:
         const GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S4a3D_srt;
 },
 _c4ajh() //  [R1]
         { []
         }
     {offset
       c4ajh: // global
           I64[Sp - 8] = block_c4ajl_info;
           R3 = 0;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4ajh_info" {
     block_c4ajh_info:
         const _c4ajh;
         const 0;
         const 30;
 },
 _c4ajl() //  [R1]
         { []
         }
     {offset
       c4ajl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c4ak2; else goto c4ak1;
       c4ak2: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4ak1: // global
           _s4a0c::P64 = P64[Sp + 8];
           _s4a0e::I64 = 16 - R1;
           if (%MO_S_Ge_W64(0, _s4a0e::I64)) goto c4ak4; else goto c4ak5;
       c4ak4: // global
           Hp = Hp - 40;
           R1 = _s4a0c::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4ak5: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Fingerprint.Type.$fShowFingerprint2_closure+1;
           P64[Hp - 16] = _s4a0c::P64;
           I64[Hp - 8] = $wxs_s4a0h_info;
           P64[Hp] = Hp - 30;
           R2 = _s4a0e::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call $wxs_s4a0h_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4ajl_info" {
     block_c4ajl_info:
         const _c4ajl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.050791725 UTC

[section ""data" . GHC.Fingerprint.Type.$w$cshow_closure" {
     GHC.Fingerprint.Type.$w$cshow_closure:
         const GHC.Fingerprint.Type.$w$cshow_info;
         const 0;
 },
 sat_s4a0r_entry() //  [R1]
         { []
         }
     {offset
       c4akF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4akJ; else goto c4akI;
       c4akJ: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4akI: // global
           _s4a0n::I64 = I64[R1 + 16];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4a0n::I64;
           R2 = Hp - 7;
           call GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s4a0r_info" {
     sat_s4a0r_info:
         const sat_s4a0r_entry;
         const 4294967296;
         const 4294967313;
         const S4a3D_srt+32;
 },
 GHC.Fingerprint.Type.$w$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c4akN: // global
           _s4a0n::I64 = R3;
           _s4a0m::I64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c4akO; else goto c4akP;
       c4akP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c4akR; else goto c4akQ;
       c4akR: // global
           HpAlloc = 40;
           goto c4akO;
       c4akO: // global
           R3 = _s4a0n::I64;
           R2 = _s4a0m::I64;
           R1 = GHC.Fingerprint.Type.$w$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4akQ: // global
           I64[Hp - 32] = sat_s4a0r_info;
           I64[Hp - 16] = _s4a0n::I64;
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4a0m::I64;
           I64[Sp - 16] = block_c4akL_info;
           R2 = Hp - 7;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$w$cshow_info" {
     GHC.Fingerprint.Type.$w$cshow_info:
         const GHC.Fingerprint.Type.$w$cshow_entry;
         const 0;
         const 12884901902;
         const 8589934604;
         const S4a3D_srt+32;
 },
 _c4akL() //  [R1]
         { []
         }
     {offset
       c4akL: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4akL_info" {
     block_c4akL_info:
         const _c4akL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.058471059 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint_$cshow_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshow_closure:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshow_info;
         const 0;
 },
 GHC.Fingerprint.Type.$fShowFingerprint_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c4ale: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4alf; else goto c4alg;
       c4alf: // global
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fShowFingerprint_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4alg: // global
           I64[Sp - 8] = block_c4alb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4alk; else goto c4alc;
       u4alk: // global
           call _c4alb(R1) args: 0, res: 0, upd: 0;
       c4alc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fShowFingerprint_$cshow_info" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshow_info:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4a3D_srt+40;
 },
 _c4alb() //  [R1]
         { []
         }
     {offset
       c4alb: // global
           R3 = I64[R1 + 15];
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Fingerprint.Type.$w$cshow_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4alb_info" {
     block_c4alb_info:
         const _c4alb;
         const 0;
         const 4294967326;
         const S4a3D_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.064882764 UTC

[section ""data" . GHC.Fingerprint.Type.$w$cshowsPrec_closure" {
     GHC.Fingerprint.Type.$w$cshowsPrec_closure:
         const GHC.Fingerprint.Type.$w$cshowsPrec_info;
         const 0;
 },
 sat_s4a0D_entry() //  [R1]
         { []
         }
     {offset
       c4alF: // global
           _s4a0D::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4alG; else goto c4alH;
       c4alH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4alJ; else goto c4alI;
       c4alJ: // global
           HpAlloc = 16;
           goto c4alG;
       c4alG: // global
           R1 = _s4a0D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4alI: // global
           _s4a0y::P64 = P64[_s4a0D::P64 + 16];
           _s4a0x::I64 = I64[_s4a0D::P64 + 24];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4a0x::I64;
           I64[Sp - 16] = block_c4alD_info;
           R2 = Hp - 7;
           P64[Sp - 8] = _s4a0y::P64;
           Sp = Sp - 16;
           call GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s4a0D_info" {
     sat_s4a0D_info:
         const sat_s4a0D_entry;
         const 4294967297;
         const 4294967315;
         const S4a3D_srt+32;
 },
 _c4alD() //  [R1]
         { []
         }
     {offset
       c4alD: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4alD_info" {
     block_c4alD_info:
         const _c4alD;
         const 1;
         const 30;
 },
 GHC.Fingerprint.Type.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4alQ: // global
           _s4a0y::P64 = R4;
           _s4a0x::I64 = R3;
           _s4a0w::I64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c4alR; else goto c4alS;
       c4alS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c4alU; else goto c4alT;
       c4alU: // global
           HpAlloc = 48;
           goto c4alR;
       c4alR: // global
           R4 = _s4a0y::P64;
           R3 = _s4a0x::I64;
           R2 = _s4a0w::I64;
           R1 = GHC.Fingerprint.Type.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4alT: // global
           I64[Hp - 40] = sat_s4a0D_info;
           P64[Hp - 24] = _s4a0y::P64;
           I64[Hp - 16] = _s4a0x::I64;
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4a0w::I64;
           I64[Sp - 16] = block_c4alO_info;
           R2 = Hp - 7;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$w$cshowsPrec_info" {
     GHC.Fingerprint.Type.$w$cshowsPrec_info:
         const GHC.Fingerprint.Type.$w$cshowsPrec_entry;
         const 0;
         const 38654705678;
         const 12884901905;
         const S4a3D_srt+32;
 },
 _c4alO() //  [R1]
         { []
         }
     {offset
       c4alO: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4alO_info" {
     block_c4alO_info:
         const _c4alO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.074081766 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_closure:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_info;
         const 0;
 },
 GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       c4aml: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4amm; else goto c4amn;
       c4amm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4amn: // global
           I64[Sp - 16] = block_c4ami_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4amr; else goto c4amj;
       u4amr: // global
           call _c4ami(R1) args: 0, res: 0, upd: 0;
       c4amj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_info" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_info:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S4a3D_srt+56;
 },
 _c4ami() //  [R1]
         { []
         }
     {offset
       c4ami: // global
           R4 = P64[Sp + 8];
           R3 = I64[R1 + 15];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Fingerprint.Type.$w$cshowsPrec_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4ami_info" {
     block_c4ami_info:
         const _c4ami;
         const 1;
         const 4294967326;
         const S4a3D_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.080222724 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint1_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint1_closure:
         const GHC.Fingerprint.Type.$fShowFingerprint1_info;
         const 0;
 },
 GHC.Fingerprint.Type.$fShowFingerprint1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4amI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4amJ; else goto c4amK;
       c4amJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fShowFingerprint1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4amK: // global
           I64[Sp - 16] = block_c4amF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4amO; else goto c4amG;
       u4amO: // global
           call _c4amF(R1) args: 0, res: 0, upd: 0;
       c4amG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fShowFingerprint1_info" {
     GHC.Fingerprint.Type.$fShowFingerprint1_info:
         const GHC.Fingerprint.Type.$fShowFingerprint1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S4a3D_srt+56;
 },
 _c4amF() //  [R1]
         { []
         }
     {offset
       c4amF: // global
           R4 = P64[Sp + 8];
           R3 = I64[R1 + 15];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Fingerprint.Type.$w$cshowsPrec_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4amF_info" {
     block_c4amF_info:
         const _c4amF;
         const 1;
         const 4294967326;
         const S4a3D_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.085568762 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_closure:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_info;
         const 0;
 },
 GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c4an2: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Fingerprint.Type.$fShowFingerprint1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_info" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_info:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4a3D_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.088647826 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_closure+3;
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshow_closure+1;
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.091780634 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$c<_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c<_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c4anh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4anl; else goto c4anm;
       c4anl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4anm: // global
           I64[Sp - 16] = block_c4ane_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4anH; else goto c4anf;
       u4anH: // global
           call _c4ane(R1) args: 0, res: 0, upd: 0;
       c4anf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$c<_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c<_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4ane() //  [R1]
         { []
         }
     {offset
       c4ane: // global
           I64[Sp - 8] = block_c4ank_info;
           _s4a0U::I64 = I64[R1 + 7];
           _s4a0V::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4a0V::I64;
           I64[Sp + 8] = _s4a0U::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4anG; else goto c4ano;
       u4anG: // global
           call _c4ank(R1) args: 0, res: 0, upd: 0;
       c4ano: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4ane_info" {
     block_c4ane_info:
         const _c4ane;
         const 1;
         const 30;
 },
 _c4ank() //  [R1]
         { []
         }
     {offset
       c4ank: // global
           _s4a0U::I64 = I64[Sp + 16];
           _s4a0X::I64 = I64[R1 + 7];
           if (_s4a0U::I64 == _s4a0X::I64) goto c4anD; else goto c4anC;
       c4anD: // global
           R1 = I64[((I64[Sp + 8] < I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4anC: // global
           if (_s4a0U::I64 > _s4a0X::I64) goto c4anz; else goto c4anA;
       c4anz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4anA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4ank_info" {
     block_c4ank_info:
         const _c4ank;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.099917804 UTC

[section ""data" . GHC.Fingerprint.Type.$w$ccompare_closure" {
     GHC.Fingerprint.Type.$w$ccompare_closure:
         const GHC.Fingerprint.Type.$w$ccompare_info;
 },
 GHC.Fingerprint.Type.$w$ccompare_slow() //  [R1]
         { []
         }
     {offset
       c4ao2: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Fingerprint.Type.$w$ccompare_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Fingerprint.Type.$w$ccompare_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c4aob: // global
           if (R2 == R4) goto c4aoa; else goto c4ao9;
       c4aoa: // global
           if (R3 == R5) goto c4aov; else goto c4aou;
       c4aov: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aou: // global
           if (R3 > R5) goto c4aor; else goto c4aos;
       c4ao9: // global
           if (R2 > R4) goto c4aor; else goto c4aos;
       c4aor: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aos: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$w$ccompare_info" {
     GHC.Fingerprint.Type.$w$ccompare_info:
         const GHC.Fingerprint.Type.$w$ccompare_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 964;
         const GHC.Fingerprint.Type.$w$ccompare_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.107328492 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       c4aoM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4aoQ; else goto c4aoR;
       c4aoQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aoR: // global
           I64[Sp - 16] = block_c4aoJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aoZ; else goto c4aoK;
       u4aoZ: // global
           call _c4aoJ(R1) args: 0, res: 0, upd: 0;
       c4aoK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aoJ() //  [R1]
         { []
         }
     {offset
       c4aoJ: // global
           I64[Sp - 8] = block_c4aoP_info;
           _s4a1d::I64 = I64[R1 + 7];
           _s4a1e::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4a1e::I64;
           I64[Sp + 8] = _s4a1d::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4aoY; else goto c4aoT;
       u4aoY: // global
           call _c4aoP(R1) args: 0, res: 0, upd: 0;
       c4aoT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aoJ_info" {
     block_c4aoJ_info:
         const _c4aoJ;
         const 1;
         const 30;
 },
 _c4aoP() //  [R1]
         { []
         }
     {offset
       c4aoP: // global
           R5 = I64[R1 + 15];
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Fingerprint.Type.$w$ccompare_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aoP_info" {
     block_c4aoP_info:
         const _c4aoP;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.116694662 UTC

[section ""data" . GHC.Fingerprint.Type.$fEqFingerprint_$c==_closure" {
     GHC.Fingerprint.Type.$fEqFingerprint_$c==_closure:
         const GHC.Fingerprint.Type.$fEqFingerprint_$c==_info;
 },
 GHC.Fingerprint.Type.$fEqFingerprint_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c4apk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4apo; else goto c4app;
       c4apo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fEqFingerprint_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4app: // global
           I64[Sp - 16] = block_c4aph_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4apF; else goto c4api;
       u4apF: // global
           call _c4aph(R1) args: 0, res: 0, upd: 0;
       c4api: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fEqFingerprint_$c==_info" {
     GHC.Fingerprint.Type.$fEqFingerprint_$c==_info:
         const GHC.Fingerprint.Type.$fEqFingerprint_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aph() //  [R1]
         { []
         }
     {offset
       c4aph: // global
           I64[Sp - 8] = block_c4apn_info;
           _s4a1l::I64 = I64[R1 + 7];
           _s4a1m::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4a1m::I64;
           I64[Sp + 8] = _s4a1l::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4apE; else goto c4apr;
       u4apE: // global
           call _c4apn(R1) args: 0, res: 0, upd: 0;
       c4apr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aph_info" {
     block_c4aph_info:
         const _c4aph;
         const 1;
         const 30;
 },
 _c4apn() //  [R1]
         { []
         }
     {offset
       c4apn: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c4apA; else goto c4apz;
       c4apA: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4apz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4apn_info" {
     block_c4apn_info:
         const _c4apn;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.125951471 UTC

[section ""data" . GHC.Fingerprint.Type.$fEqFingerprint_$c/=_closure" {
     GHC.Fingerprint.Type.$fEqFingerprint_$c/=_closure:
         const GHC.Fingerprint.Type.$fEqFingerprint_$c/=_info;
 },
 GHC.Fingerprint.Type.$fEqFingerprint_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aq6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4aqa; else goto c4aqb;
       c4aqa: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fEqFingerprint_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aqb: // global
           I64[Sp - 16] = block_c4aq3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aqv; else goto c4aq4;
       u4aqv: // global
           call _c4aq3(R1) args: 0, res: 0, upd: 0;
       c4aq4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fEqFingerprint_$c/=_info" {
     GHC.Fingerprint.Type.$fEqFingerprint_$c/=_info:
         const GHC.Fingerprint.Type.$fEqFingerprint_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aq3() //  [R1]
         { []
         }
     {offset
       c4aq3: // global
           I64[Sp - 8] = block_c4aq9_info;
           _s4a1v::I64 = I64[R1 + 7];
           _s4a1w::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4a1w::I64;
           I64[Sp + 8] = _s4a1v::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4aqu; else goto c4aqd;
       u4aqu: // global
           call _c4aq9(R1) args: 0, res: 0, upd: 0;
       c4aqd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aq3_info" {
     block_c4aq3_info:
         const _c4aq3;
         const 1;
         const 30;
 },
 _c4aq9() //  [R1]
         { []
         }
     {offset
       c4aq9: // global
           if (I64[Sp + 16] != I64[R1 + 7]) goto c4aqr; else goto c4aqt;
       c4aqt: // global
           if (I64[Sp + 8] != I64[R1 + 15]) goto c4aqr; else goto c4aqs;
       c4aqr: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aqs: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aq9_info" {
     block_c4aq9_info:
         const _c4aq9;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.133043173 UTC

[section ""data" . GHC.Fingerprint.Type.$fEqFingerprint_closure" {
     GHC.Fingerprint.Type.$fEqFingerprint_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Fingerprint.Type.$fEqFingerprint_$c==_closure+2;
         const GHC.Fingerprint.Type.$fEqFingerprint_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.137019086 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aqV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4aqZ; else goto c4ar0;
       c4aqZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4ar0: // global
           I64[Sp - 16] = block_c4aqS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4arp; else goto c4aqT;
       u4arp: // global
           call _c4aqS(R1) args: 0, res: 0, upd: 0;
       c4aqT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aqS() //  [R1]
         { []
         }
     {offset
       c4aqS: // global
           I64[Sp - 8] = block_c4aqY_info;
           _s4a1F::I64 = I64[R1 + 7];
           _s4a1G::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4a1G::I64;
           I64[Sp + 8] = _s4a1F::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4aro; else goto c4ar2;
       u4aro: // global
           call _c4aqY(R1) args: 0, res: 0, upd: 0;
       c4ar2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aqS_info" {
     block_c4aqS_info:
         const _c4aqS;
         const 1;
         const 30;
 },
 _c4aqY() //  [R1]
         { []
         }
     {offset
       c4aqY: // global
           _s4a1F::I64 = I64[Sp + 16];
           _s4a1I::I64 = I64[R1 + 7];
           if (_s4a1F::I64 == _s4a1I::I64) goto c4arn; else goto c4arg;
       c4arn: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c4arl; else goto c4arm;
       c4arg: // global
           if (_s4a1F::I64 > _s4a1I::I64) goto c4arl; else goto c4arm;
       c4arl: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4arm: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aqY_info" {
     block_c4aqY_info:
         const _c4aqY;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.145715178 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c4arN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c4arR; else goto c4arS;
       c4arR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4arS: // global
           I64[Sp - 16] = block_c4arK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4ash; else goto c4arL;
       u4ash: // global
           call _c4arK(R1) args: 0, res: 0, upd: 0;
       c4arL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4arK() //  [R1]
         { []
         }
     {offset
       c4arK: // global
           I64[Sp - 16] = block_c4arQ_info;
           _s4a1P::P64 = R1;
           _s4a1Q::I64 = I64[R1 + 7];
           _s4a1R::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp - 8] = _s4a1R::I64;
           I64[Sp] = _s4a1Q::I64;
           P64[Sp + 8] = _s4a1P::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4asg; else goto c4arU;
       u4asg: // global
           call _c4arQ(R1) args: 0, res: 0, upd: 0;
       c4arU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4arK_info" {
     block_c4arK_info:
         const _c4arK;
         const 1;
         const 30;
 },
 _c4arQ() //  [R1]
         { []
         }
     {offset
       c4arQ: // global
           _s4a1P::P64 = P64[Sp + 24];
           _s4a1Q::I64 = I64[Sp + 16];
           _s4a1T::I64 = I64[R1 + 7];
           if (_s4a1Q::I64 == _s4a1T::I64) goto c4asf; else goto c4as8;
       c4asf: // global
           _s4a1S::P64 = R1;
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c4asd; else goto c4ase;
       c4as8: // global
           _s4a1S::P64 = R1;
           if (_s4a1Q::I64 > _s4a1T::I64) goto c4asd; else goto c4ase;
       c4asd: // global
           R1 = _s4a1P::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4ase: // global
           R1 = _s4a1S::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4arQ_info" {
     block_c4arQ_info:
         const _c4arQ;
         const 195;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.154836278 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4asI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4asM; else goto c4asN;
       c4asM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4asN: // global
           I64[Sp - 16] = block_c4asF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4atc; else goto c4asG;
       u4atc: // global
           call _c4asF(R1) args: 0, res: 0, upd: 0;
       c4asG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4asF() //  [R1]
         { []
         }
     {offset
       c4asF: // global
           I64[Sp - 8] = block_c4asL_info;
           _s4a21::I64 = I64[R1 + 7];
           _s4a22::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4a22::I64;
           I64[Sp + 8] = _s4a21::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4atb; else goto c4asP;
       u4atb: // global
           call _c4asL(R1) args: 0, res: 0, upd: 0;
       c4asP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4asF_info" {
     block_c4asF_info:
         const _c4asF;
         const 1;
         const 30;
 },
 _c4asL() //  [R1]
         { []
         }
     {offset
       c4asL: // global
           _s4a21::I64 = I64[Sp + 16];
           _s4a24::I64 = I64[R1 + 7];
           if (_s4a21::I64 == _s4a24::I64) goto c4ata; else goto c4at3;
       c4ata: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c4at8; else goto c4at9;
       c4at3: // global
           if (_s4a21::I64 > _s4a24::I64) goto c4at8; else goto c4at9;
       c4at8: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4at9: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4asL_info" {
     block_c4asL_info:
         const _c4asL;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.162775774 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$c>_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c>_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c4atx: // global
           _s4a2a::P64 = R3;
           R3 = R2;
           R2 = _s4a2a::P64;
           call GHC.Fingerprint.Type.$fOrdFingerprint_$c<_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$c>_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c>_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.167363977 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c4atL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c4atP; else goto c4atQ;
       c4atP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4atQ: // global
           I64[Sp - 16] = block_c4atI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4auf; else goto c4atJ;
       u4auf: // global
           call _c4atI(R1) args: 0, res: 0, upd: 0;
       c4atJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4atI() //  [R1]
         { []
         }
     {offset
       c4atI: // global
           I64[Sp - 16] = block_c4atO_info;
           _s4a2d::P64 = R1;
           _s4a2e::I64 = I64[R1 + 7];
           _s4a2f::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp - 8] = _s4a2f::I64;
           I64[Sp] = _s4a2e::I64;
           P64[Sp + 8] = _s4a2d::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aue; else goto c4atS;
       u4aue: // global
           call _c4atO(R1) args: 0, res: 0, upd: 0;
       c4atS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4atI_info" {
     block_c4atI_info:
         const _c4atI;
         const 1;
         const 30;
 },
 _c4atO() //  [R1]
         { []
         }
     {offset
       c4atO: // global
           _s4a2d::P64 = P64[Sp + 24];
           _s4a2e::I64 = I64[Sp + 16];
           _s4a2h::I64 = I64[R1 + 7];
           if (_s4a2e::I64 == _s4a2h::I64) goto c4aud; else goto c4au6;
       c4aud: // global
           _s4a2g::P64 = R1;
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c4aub; else goto c4auc;
       c4au6: // global
           _s4a2g::P64 = R1;
           if (_s4a2e::I64 > _s4a2h::I64) goto c4aub; else goto c4auc;
       c4aub: // global
           R1 = _s4a2g::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4auc: // global
           R1 = _s4a2d::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4atO_info" {
     block_c4atO_info:
         const _c4atO;
         const 195;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.174715846 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Fingerprint.Type.$fEqFingerprint_closure+1;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.176541227 UTC

[section ""cstring" . GHC.Fingerprint.Type.$trModule4_bytes" {
     GHC.Fingerprint.Type.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.178257905 UTC

[section ""data" . GHC.Fingerprint.Type.$trModule3_closure" {
     GHC.Fingerprint.Type.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.Type.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.17991978 UTC

[section ""cstring" . GHC.Fingerprint.Type.$trModule2_bytes" {
     GHC.Fingerprint.Type.$trModule2_bytes:
         I8[] [71,72,67,46,70,105,110,103,101,114,112,114,105,110,116,46,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.181700913 UTC

[section ""data" . GHC.Fingerprint.Type.$trModule1_closure" {
     GHC.Fingerprint.Type.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.Type.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.183393412 UTC

[section ""data" . GHC.Fingerprint.Type.$trModule_closure" {
     GHC.Fingerprint.Type.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Fingerprint.Type.$trModule3_closure+1;
         const GHC.Fingerprint.Type.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.185161613 UTC

[section ""data" . $krep_r4a01_closure" {
     $krep_r4a01_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.186867648 UTC

[section ""cstring" . GHC.Fingerprint.Type.$tcFingerprint2_bytes" {
     GHC.Fingerprint.Type.$tcFingerprint2_bytes:
         I8[] [70,105,110,103,101,114,112,114,105,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.189057359 UTC

[section ""data" . GHC.Fingerprint.Type.$tcFingerprint1_closure" {
     GHC.Fingerprint.Type.$tcFingerprint1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.Type.$tcFingerprint2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.191384588 UTC

[section ""data" . GHC.Fingerprint.Type.$tcFingerprint_closure" {
     GHC.Fingerprint.Type.$tcFingerprint_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Fingerprint.Type.$trModule_closure+1;
         const GHC.Fingerprint.Type.$tcFingerprint1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12761381476876783108;
         const 2142724667088540655;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.193211136 UTC

[section ""data" . $krep1_r4a02_closure" {
     $krep1_r4a02_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Fingerprint.Type.$tcFingerprint_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.19492878 UTC

[section ""data" . $krep2_r4a03_closure" {
     $krep2_r4a03_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4a01_closure+1;
         const $krep1_r4a02_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.196571776 UTC

[section ""data" . GHC.Fingerprint.Type.$tc'Fingerprint1_closure" {
     GHC.Fingerprint.Type.$tc'Fingerprint1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4a01_closure+1;
         const $krep2_r4a03_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.198272137 UTC

[section ""cstring" . GHC.Fingerprint.Type.$tc'Fingerprint3_bytes" {
     GHC.Fingerprint.Type.$tc'Fingerprint3_bytes:
         I8[] [39,70,105,110,103,101,114,112,114,105,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.199928257 UTC

[section ""data" . GHC.Fingerprint.Type.$tc'Fingerprint2_closure" {
     GHC.Fingerprint.Type.$tc'Fingerprint2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.Type.$tc'Fingerprint3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.201683902 UTC

[section ""data" . GHC.Fingerprint.Type.$tc'Fingerprint_closure" {
     GHC.Fingerprint.Type.$tc'Fingerprint_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Fingerprint.Type.$trModule_closure+1;
         const GHC.Fingerprint.Type.$tc'Fingerprint2_closure+1;
         const GHC.Fingerprint.Type.$tc'Fingerprint1_closure+4;
         const 2008132202540166604;
         const 4312636609190854538;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.20412358 UTC

[section ""data" . GHC.Fingerprint.Type.Fingerprint_closure" {
     GHC.Fingerprint.Type.Fingerprint_closure:
         const GHC.Fingerprint.Type.Fingerprint_info;
 },
 GHC.Fingerprint.Type.Fingerprint_entry() //  [R2, R3]
         { []
         }
     {offset
       c4auU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4auY; else goto c4auX;
       c4auY: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.Fingerprint_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4auX: // global
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.Fingerprint_info" {
     GHC.Fingerprint.Type.Fingerprint_info:
         const GHC.Fingerprint.Type.Fingerprint_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.20772141 UTC

[section ""cstring" . i4aix_str" {
     i4aix_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,105,110,103,101,114,112,114,105,110,116,46,84,121,112,101,46,70,105,110,103,101,114,112,114,105,110,116]
 },
 GHC.Fingerprint.Type.Fingerprint_con_entry() //  [R1]
         { []
         }
     {offset
       c4av4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.Fingerprint_con_info" {
     GHC.Fingerprint.Type.Fingerprint_con_info:
         const GHC.Fingerprint.Type.Fingerprint_con_entry;
         const 8589934592;
         const 6;
         const i4aix_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.210928891 UTC

[section ""relreadonly" . S4a3D_srt" {
     S4a3D_srt:
         const GHC.Show.intToDigit_closure;
         const GHC.Word.$fShowWord64_closure;
         const GHC.Word.$fIntegralWord64_closure;
         const Numeric.showIntAtBase_closure;
         const GHC.Fingerprint.Type.$fShowFingerprint_hex16_closure;
         const GHC.Fingerprint.Type.$w$cshow_closure;
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshow_closure;
         const GHC.Fingerprint.Type.$w$cshowsPrec_closure;
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_closure;
         const GHC.Fingerprint.Type.$fShowFingerprint1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.520685045 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:03.52330727 UTC

[section ""data" . GHC.Fingerprint.Type.$WFingerprint_closure" {
     GHC.Fingerprint.Type.$WFingerprint_closure:
         const GHC.Fingerprint.Type.$WFingerprint_info;
 },
 GHC.Fingerprint.Type.$WFingerprint_entry() //  [R2, R3]
         { []
         }
     {offset
       c4axz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4axI; else goto c4axJ;
       c4axI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$WFingerprint_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4axJ: // global
           I64[Sp - 16] = block_c4axw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4axP; else goto c4axx;
       u4axP: // global
           call _c4axw(R1) args: 0, res: 0, upd: 0;
       c4axx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$WFingerprint_info" {
     GHC.Fingerprint.Type.$WFingerprint_info:
         const GHC.Fingerprint.Type.$WFingerprint_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4axw() //  [R1]
         { []
         }
     {offset
       c4axw: // global
           I64[Sp] = block_c4axC_info;
           _s4ave::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4ave::I64;
           if (R1 & 7 != 0) goto u4axO; else goto c4axD;
       u4axO: // global
           call _c4axC(R1) args: 0, res: 0, upd: 0;
       c4axD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4axw_info" {
     block_c4axw_info:
         const _c4axw;
         const 1;
         const 30;
 },
 _c4axC() //  [R1]
         { []
         }
     {offset
       c4axC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4axN; else goto c4axM;
       c4axN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4axM: // global
           _s4avg::I64 = I64[R1 + 7];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _s4avg::I64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4axC_info" {
     block_c4axC_info:
         const _c4axC;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.529994134 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint3_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint3_closure:
         const GHC.Word.W64#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.531775879 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint2_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint2_closure:
         const GHC.Types.C#_con_info;
         const 48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.537968838 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint_hex16_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint_hex16_closure:
         const GHC.Fingerprint.Type.$fShowFingerprint_hex16_info;
         const 0;
 },
 sat_s4avr_entry() //  [R1]
         { []
         }
     {offset
       c4ayH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ayI; else goto c4ayJ;
       c4ayI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4ayJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wxs_s4avn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4avr_info" {
     sat_s4avr_info:
         const sat_s4avr_entry;
         const 4294967297;
         const 19;
 },
 $wxs_s4avn_entry() //  [R1, R2]
         { []
         }
     {offset
       c4ayN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c4ayR; else goto c4ayQ;
       c4ayR: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4ayQ: // global
           if (R2 == 1) goto c4ayM; else goto c4ayL;
       c4ayM: // global
           _s4avm::P64 = P64[R1 + 7];
           Hp = Hp - 56;
           R1 = _s4avm::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4ayL: // global
           I64[Hp - 48] = sat_s4avr_info;
           P64[Hp - 32] = R1;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Fingerprint.Type.$fShowFingerprint2_closure+1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_s4avn_info" {
     $wxs_s4avn_info:
         const $wxs_s4avn_entry;
         const 1;
         const 9;
         const 4294967300;
 },
 GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry() //  [R2]
         { []
         }
     {offset
       c4ayT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ayU; else goto c4ayV;
       c4ayU: // global
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fShowFingerprint_hex16_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4ayV: // global
           I64[Sp - 8] = block_c4aye_info;
           R6 = R2;
           R5 = GHC.Show.intToDigit_closure+1;
           R4 = GHC.Fingerprint.Type.$fShowFingerprint3_closure+1;
           R3 = GHC.Word.$fShowWord64_closure;
           R2 = GHC.Word.$fIntegralWord64_closure;
           P64[Sp - 16] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call Numeric.showIntAtBase_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fShowFingerprint_hex16_info" {
     GHC.Fingerprint.Type.$fShowFingerprint_hex16_info:
         const GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S4az3_srt;
 },
 _c4aye() //  [R1]
         { []
         }
     {offset
       c4aye: // global
           I64[Sp - 8] = block_c4ayi_info;
           R3 = 0;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aye_info" {
     block_c4aye_info:
         const _c4aye;
         const 0;
         const 30;
 },
 _c4ayi() //  [R1]
         { []
         }
     {offset
       c4ayi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c4ayZ; else goto c4ayY;
       c4ayZ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4ayY: // global
           _s4avi::P64 = P64[Sp + 8];
           _s4avk::I64 = 16 - R1;
           if (%MO_S_Ge_W64(0, _s4avk::I64)) goto c4az1; else goto c4az2;
       c4az1: // global
           Hp = Hp - 40;
           R1 = _s4avi::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4az2: // global
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = GHC.Fingerprint.Type.$fShowFingerprint2_closure+1;
           P64[Hp - 16] = _s4avi::P64;
           I64[Hp - 8] = $wxs_s4avn_info;
           P64[Hp] = Hp - 30;
           R2 = _s4avk::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call $wxs_s4avn_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4ayi_info" {
     block_c4ayi_info:
         const _c4ayi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.550051726 UTC

[section ""data" . GHC.Fingerprint.Type.$w$cshow_closure" {
     GHC.Fingerprint.Type.$w$cshow_closure:
         const GHC.Fingerprint.Type.$w$cshow_info;
         const 0;
 },
 sat_s4avx_entry() //  [R1]
         { []
         }
     {offset
       c4azP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4azT; else goto c4azS;
       c4azT: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4azS: // global
           _s4avt::I64 = I64[R1 + 16];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4avt::I64;
           R2 = Hp - 7;
           call GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s4avx_info" {
     sat_s4avx_info:
         const sat_s4avx_entry;
         const 4294967296;
         const 4294967313;
         const S4az3_srt+32;
 },
 GHC.Fingerprint.Type.$w$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       c4azX: // global
           _s4avt::I64 = R3;
           _s4avs::I64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c4azY; else goto c4azZ;
       c4azZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c4aA1; else goto c4aA0;
       c4aA1: // global
           HpAlloc = 40;
           goto c4azY;
       c4azY: // global
           R3 = _s4avt::I64;
           R2 = _s4avs::I64;
           R1 = GHC.Fingerprint.Type.$w$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aA0: // global
           I64[Hp - 32] = sat_s4avx_info;
           I64[Hp - 16] = _s4avt::I64;
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4avs::I64;
           I64[Sp - 16] = block_c4azV_info;
           R2 = Hp - 7;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           call GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$w$cshow_info" {
     GHC.Fingerprint.Type.$w$cshow_info:
         const GHC.Fingerprint.Type.$w$cshow_entry;
         const 0;
         const 12884901902;
         const 8589934604;
         const S4az3_srt+32;
 },
 _c4azV() //  [R1]
         { []
         }
     {offset
       c4azV: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4azV_info" {
     block_c4azV_info:
         const _c4azV;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.557867733 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint_$cshow_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshow_closure:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshow_info;
         const 0;
 },
 GHC.Fingerprint.Type.$fShowFingerprint_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c4aAs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4aAt; else goto c4aAu;
       c4aAt: // global
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fShowFingerprint_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4aAu: // global
           I64[Sp - 8] = block_c4aAp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4aAy; else goto c4aAq;
       u4aAy: // global
           call _c4aAp(R1) args: 0, res: 0, upd: 0;
       c4aAq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fShowFingerprint_$cshow_info" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshow_info:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4az3_srt+40;
 },
 _c4aAp() //  [R1]
         { []
         }
     {offset
       c4aAp: // global
           R3 = I64[R1 + 15];
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Fingerprint.Type.$w$cshow_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aAp_info" {
     block_c4aAp_info:
         const _c4aAp;
         const 0;
         const 4294967326;
         const S4az3_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.564456057 UTC

[section ""data" . GHC.Fingerprint.Type.$w$cshowsPrec_closure" {
     GHC.Fingerprint.Type.$w$cshowsPrec_closure:
         const GHC.Fingerprint.Type.$w$cshowsPrec_info;
         const 0;
 },
 sat_s4avJ_entry() //  [R1]
         { []
         }
     {offset
       c4aAU: // global
           _s4avJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4aAV; else goto c4aAW;
       c4aAW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4aAY; else goto c4aAX;
       c4aAY: // global
           HpAlloc = 16;
           goto c4aAV;
       c4aAV: // global
           R1 = _s4avJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4aAX: // global
           _s4avE::P64 = P64[_s4avJ::P64 + 16];
           _s4avD::I64 = I64[_s4avJ::P64 + 24];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4avD::I64;
           I64[Sp - 16] = block_c4aAS_info;
           R2 = Hp - 7;
           P64[Sp - 8] = _s4avE::P64;
           Sp = Sp - 16;
           call GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s4avJ_info" {
     sat_s4avJ_info:
         const sat_s4avJ_entry;
         const 4294967297;
         const 4294967315;
         const S4az3_srt+32;
 },
 _c4aAS() //  [R1]
         { []
         }
     {offset
       c4aAS: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aAS_info" {
     block_c4aAS_info:
         const _c4aAS;
         const 1;
         const 30;
 },
 GHC.Fingerprint.Type.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4aB5: // global
           _s4avE::P64 = R4;
           _s4avD::I64 = R3;
           _s4avC::I64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c4aB6; else goto c4aB7;
       c4aB7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c4aB9; else goto c4aB8;
       c4aB9: // global
           HpAlloc = 48;
           goto c4aB6;
       c4aB6: // global
           R4 = _s4avE::P64;
           R3 = _s4avD::I64;
           R2 = _s4avC::I64;
           R1 = GHC.Fingerprint.Type.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aB8: // global
           I64[Hp - 40] = sat_s4avJ_info;
           P64[Hp - 24] = _s4avE::P64;
           I64[Hp - 16] = _s4avD::I64;
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4avC::I64;
           I64[Sp - 16] = block_c4aB3_info;
           R2 = Hp - 7;
           P64[Sp - 8] = Hp - 40;
           Sp = Sp - 16;
           call GHC.Fingerprint.Type.$fShowFingerprint_hex16_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$w$cshowsPrec_info" {
     GHC.Fingerprint.Type.$w$cshowsPrec_info:
         const GHC.Fingerprint.Type.$w$cshowsPrec_entry;
         const 0;
         const 38654705678;
         const 12884901905;
         const S4az3_srt+32;
 },
 _c4aB3() //  [R1]
         { []
         }
     {offset
       c4aB3: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aB3_info" {
     block_c4aB3_info:
         const _c4aB3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.575069761 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_closure:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_info;
         const 0;
 },
 GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       c4aBF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4aBG; else goto c4aBH;
       c4aBG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aBH: // global
           I64[Sp - 16] = block_c4aBC_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aBL; else goto c4aBD;
       u4aBL: // global
           call _c4aBC(R1) args: 0, res: 0, upd: 0;
       c4aBD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_info" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_info:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S4az3_srt+56;
 },
 _c4aBC() //  [R1]
         { []
         }
     {offset
       c4aBC: // global
           R4 = P64[Sp + 8];
           R3 = I64[R1 + 15];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Fingerprint.Type.$w$cshowsPrec_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aBC_info" {
     block_c4aBC_info:
         const _c4aBC;
         const 1;
         const 4294967326;
         const S4az3_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.580835792 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint1_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint1_closure:
         const GHC.Fingerprint.Type.$fShowFingerprint1_info;
         const 0;
 },
 GHC.Fingerprint.Type.$fShowFingerprint1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aC3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4aC4; else goto c4aC5;
       c4aC4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fShowFingerprint1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aC5: // global
           I64[Sp - 16] = block_c4aC0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aC9; else goto c4aC1;
       u4aC9: // global
           call _c4aC0(R1) args: 0, res: 0, upd: 0;
       c4aC1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fShowFingerprint1_info" {
     GHC.Fingerprint.Type.$fShowFingerprint1_info:
         const GHC.Fingerprint.Type.$fShowFingerprint1_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S4az3_srt+56;
 },
 _c4aC0() //  [R1]
         { []
         }
     {offset
       c4aC0: // global
           R4 = P64[Sp + 8];
           R3 = I64[R1 + 15];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Fingerprint.Type.$w$cshowsPrec_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aC0_info" {
     block_c4aC0_info:
         const _c4aC0;
         const 1;
         const 4294967326;
         const S4az3_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.586301316 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_closure:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_info;
         const 0;
 },
 GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c4aCo: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Fingerprint.Type.$fShowFingerprint1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_info" {
     GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_info:
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4az3_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.589572097 UTC

[section ""data" . GHC.Fingerprint.Type.$fShowFingerprint_closure" {
     GHC.Fingerprint.Type.$fShowFingerprint_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_closure+3;
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshow_closure+1;
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.592795929 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$c<_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c<_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aCD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4aCH; else goto c4aCI;
       c4aCH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aCI: // global
           I64[Sp - 16] = block_c4aCA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aD3; else goto c4aCB;
       u4aD3: // global
           call _c4aCA(R1) args: 0, res: 0, upd: 0;
       c4aCB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$c<_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c<_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aCA() //  [R1]
         { []
         }
     {offset
       c4aCA: // global
           I64[Sp - 8] = block_c4aCG_info;
           _s4aw0::I64 = I64[R1 + 7];
           _s4aw1::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4aw1::I64;
           I64[Sp + 8] = _s4aw0::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4aD2; else goto c4aCK;
       u4aD2: // global
           call _c4aCG(R1) args: 0, res: 0, upd: 0;
       c4aCK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aCA_info" {
     block_c4aCA_info:
         const _c4aCA;
         const 1;
         const 30;
 },
 _c4aCG() //  [R1]
         { []
         }
     {offset
       c4aCG: // global
           _s4aw0::I64 = I64[Sp + 16];
           _s4aw3::I64 = I64[R1 + 7];
           if (_s4aw0::I64 == _s4aw3::I64) goto c4aCZ; else goto c4aCY;
       c4aCZ: // global
           R1 = I64[((I64[Sp + 8] < I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aCY: // global
           if (_s4aw0::I64 > _s4aw3::I64) goto c4aCV; else goto c4aCW;
       c4aCV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aCW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aCG_info" {
     block_c4aCG_info:
         const _c4aCG;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.601606971 UTC

[section ""data" . GHC.Fingerprint.Type.$w$ccompare_closure" {
     GHC.Fingerprint.Type.$w$ccompare_closure:
         const GHC.Fingerprint.Type.$w$ccompare_info;
 },
 GHC.Fingerprint.Type.$w$ccompare_slow() //  [R1]
         { []
         }
     {offset
       c4aDt: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Fingerprint.Type.$w$ccompare_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Fingerprint.Type.$w$ccompare_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c4aDC: // global
           if (R2 == R4) goto c4aDB; else goto c4aDA;
       c4aDB: // global
           if (R3 == R5) goto c4aDW; else goto c4aDV;
       c4aDW: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aDV: // global
           if (R3 > R5) goto c4aDS; else goto c4aDT;
       c4aDA: // global
           if (R2 > R4) goto c4aDS; else goto c4aDT;
       c4aDS: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aDT: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$w$ccompare_info" {
     GHC.Fingerprint.Type.$w$ccompare_info:
         const GHC.Fingerprint.Type.$w$ccompare_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 964;
         const GHC.Fingerprint.Type.$w$ccompare_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.607820902 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       c4aEg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4aEk; else goto c4aEl;
       c4aEk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aEl: // global
           I64[Sp - 16] = block_c4aEd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aEt; else goto c4aEe;
       u4aEt: // global
           call _c4aEd(R1) args: 0, res: 0, upd: 0;
       c4aEe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aEd() //  [R1]
         { []
         }
     {offset
       c4aEd: // global
           I64[Sp - 8] = block_c4aEj_info;
           _s4awj::I64 = I64[R1 + 7];
           _s4awk::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4awk::I64;
           I64[Sp + 8] = _s4awj::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4aEs; else goto c4aEn;
       u4aEs: // global
           call _c4aEj(R1) args: 0, res: 0, upd: 0;
       c4aEn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aEd_info" {
     block_c4aEd_info:
         const _c4aEd;
         const 1;
         const 30;
 },
 _c4aEj() //  [R1]
         { []
         }
     {offset
       c4aEj: // global
           R5 = I64[R1 + 15];
           R4 = I64[R1 + 7];
           R3 = I64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Fingerprint.Type.$w$ccompare_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aEj_info" {
     block_c4aEj_info:
         const _c4aEj;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.616096974 UTC

[section ""data" . GHC.Fingerprint.Type.$fEqFingerprint_$c==_closure" {
     GHC.Fingerprint.Type.$fEqFingerprint_$c==_closure:
         const GHC.Fingerprint.Type.$fEqFingerprint_$c==_info;
 },
 GHC.Fingerprint.Type.$fEqFingerprint_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aEQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4aEU; else goto c4aEV;
       c4aEU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fEqFingerprint_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aEV: // global
           I64[Sp - 16] = block_c4aEN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aFb; else goto c4aEO;
       u4aFb: // global
           call _c4aEN(R1) args: 0, res: 0, upd: 0;
       c4aEO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fEqFingerprint_$c==_info" {
     GHC.Fingerprint.Type.$fEqFingerprint_$c==_info:
         const GHC.Fingerprint.Type.$fEqFingerprint_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aEN() //  [R1]
         { []
         }
     {offset
       c4aEN: // global
           I64[Sp - 8] = block_c4aET_info;
           _s4awr::I64 = I64[R1 + 7];
           _s4aws::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4aws::I64;
           I64[Sp + 8] = _s4awr::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4aFa; else goto c4aEX;
       u4aFa: // global
           call _c4aET(R1) args: 0, res: 0, upd: 0;
       c4aEX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aEN_info" {
     block_c4aEN_info:
         const _c4aEN;
         const 1;
         const 30;
 },
 _c4aET() //  [R1]
         { []
         }
     {offset
       c4aET: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c4aF6; else goto c4aF5;
       c4aF6: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aF5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aET_info" {
     block_c4aET_info:
         const _c4aET;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.624543988 UTC

[section ""data" . GHC.Fingerprint.Type.$fEqFingerprint_$c/=_closure" {
     GHC.Fingerprint.Type.$fEqFingerprint_$c/=_closure:
         const GHC.Fingerprint.Type.$fEqFingerprint_$c/=_info;
 },
 GHC.Fingerprint.Type.$fEqFingerprint_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aFG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4aFK; else goto c4aFL;
       c4aFK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fEqFingerprint_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aFL: // global
           I64[Sp - 16] = block_c4aFD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aG5; else goto c4aFE;
       u4aG5: // global
           call _c4aFD(R1) args: 0, res: 0, upd: 0;
       c4aFE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fEqFingerprint_$c/=_info" {
     GHC.Fingerprint.Type.$fEqFingerprint_$c/=_info:
         const GHC.Fingerprint.Type.$fEqFingerprint_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aFD() //  [R1]
         { []
         }
     {offset
       c4aFD: // global
           I64[Sp - 8] = block_c4aFJ_info;
           _s4awB::I64 = I64[R1 + 7];
           _s4awC::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4awC::I64;
           I64[Sp + 8] = _s4awB::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4aG4; else goto c4aFN;
       u4aG4: // global
           call _c4aFJ(R1) args: 0, res: 0, upd: 0;
       c4aFN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aFD_info" {
     block_c4aFD_info:
         const _c4aFD;
         const 1;
         const 30;
 },
 _c4aFJ() //  [R1]
         { []
         }
     {offset
       c4aFJ: // global
           if (I64[Sp + 16] != I64[R1 + 7]) goto c4aG1; else goto c4aG3;
       c4aG3: // global
           if (I64[Sp + 8] != I64[R1 + 15]) goto c4aG1; else goto c4aG2;
       c4aG1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aG2: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aFJ_info" {
     block_c4aFJ_info:
         const _c4aFJ;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.631978668 UTC

[section ""data" . GHC.Fingerprint.Type.$fEqFingerprint_closure" {
     GHC.Fingerprint.Type.$fEqFingerprint_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Fingerprint.Type.$fEqFingerprint_$c==_closure+2;
         const GHC.Fingerprint.Type.$fEqFingerprint_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.635739249 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aGz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4aGD; else goto c4aGE;
       c4aGD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aGE: // global
           I64[Sp - 16] = block_c4aGw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aH3; else goto c4aGx;
       u4aH3: // global
           call _c4aGw(R1) args: 0, res: 0, upd: 0;
       c4aGx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aGw() //  [R1]
         { []
         }
     {offset
       c4aGw: // global
           I64[Sp - 8] = block_c4aGC_info;
           _s4awL::I64 = I64[R1 + 7];
           _s4awM::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4awM::I64;
           I64[Sp + 8] = _s4awL::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4aH2; else goto c4aGG;
       u4aH2: // global
           call _c4aGC(R1) args: 0, res: 0, upd: 0;
       c4aGG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aGw_info" {
     block_c4aGw_info:
         const _c4aGw;
         const 1;
         const 30;
 },
 _c4aGC() //  [R1]
         { []
         }
     {offset
       c4aGC: // global
           _s4awL::I64 = I64[Sp + 16];
           _s4awO::I64 = I64[R1 + 7];
           if (_s4awL::I64 == _s4awO::I64) goto c4aH1; else goto c4aGU;
       c4aH1: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c4aGZ; else goto c4aH0;
       c4aGU: // global
           if (_s4awL::I64 > _s4awO::I64) goto c4aGZ; else goto c4aH0;
       c4aGZ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aH0: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aGC_info" {
     block_c4aGC_info:
         const _c4aGC;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.643977164 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aHv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c4aHz; else goto c4aHA;
       c4aHz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aHA: // global
           I64[Sp - 16] = block_c4aHs_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aHZ; else goto c4aHt;
       u4aHZ: // global
           call _c4aHs(R1) args: 0, res: 0, upd: 0;
       c4aHt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aHs() //  [R1]
         { []
         }
     {offset
       c4aHs: // global
           I64[Sp - 16] = block_c4aHy_info;
           _s4awV::P64 = R1;
           _s4awW::I64 = I64[R1 + 7];
           _s4awX::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp - 8] = _s4awX::I64;
           I64[Sp] = _s4awW::I64;
           P64[Sp + 8] = _s4awV::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aHY; else goto c4aHC;
       u4aHY: // global
           call _c4aHy(R1) args: 0, res: 0, upd: 0;
       c4aHC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aHs_info" {
     block_c4aHs_info:
         const _c4aHs;
         const 1;
         const 30;
 },
 _c4aHy() //  [R1]
         { []
         }
     {offset
       c4aHy: // global
           _s4awV::P64 = P64[Sp + 24];
           _s4awW::I64 = I64[Sp + 16];
           _s4awZ::I64 = I64[R1 + 7];
           if (_s4awW::I64 == _s4awZ::I64) goto c4aHX; else goto c4aHQ;
       c4aHX: // global
           _s4awY::P64 = R1;
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c4aHV; else goto c4aHW;
       c4aHQ: // global
           _s4awY::P64 = R1;
           if (_s4awW::I64 > _s4awZ::I64) goto c4aHV; else goto c4aHW;
       c4aHV: // global
           R1 = _s4awV::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4aHW: // global
           R1 = _s4awY::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aHy_info" {
     block_c4aHy_info:
         const _c4aHy;
         const 195;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.6525507 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aIs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4aIw; else goto c4aIx;
       c4aIw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aIx: // global
           I64[Sp - 16] = block_c4aIp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aIW; else goto c4aIq;
       u4aIW: // global
           call _c4aIp(R1) args: 0, res: 0, upd: 0;
       c4aIq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aIp() //  [R1]
         { []
         }
     {offset
       c4aIp: // global
           I64[Sp - 8] = block_c4aIv_info;
           _s4ax7::I64 = I64[R1 + 7];
           _s4ax8::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s4ax8::I64;
           I64[Sp + 8] = _s4ax7::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4aIV; else goto c4aIz;
       u4aIV: // global
           call _c4aIv(R1) args: 0, res: 0, upd: 0;
       c4aIz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aIp_info" {
     block_c4aIp_info:
         const _c4aIp;
         const 1;
         const 30;
 },
 _c4aIv() //  [R1]
         { []
         }
     {offset
       c4aIv: // global
           _s4ax7::I64 = I64[Sp + 16];
           _s4axa::I64 = I64[R1 + 7];
           if (_s4ax7::I64 == _s4axa::I64) goto c4aIU; else goto c4aIN;
       c4aIU: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c4aIS; else goto c4aIT;
       c4aIN: // global
           if (_s4ax7::I64 > _s4axa::I64) goto c4aIS; else goto c4aIT;
       c4aIS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4aIT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aIv_info" {
     block_c4aIv_info:
         const _c4aIv;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.660129866 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$c>_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c>_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aJl: // global
           _s4axg::P64 = R3;
           R3 = R2;
           R2 = _s4axg::P64;
           call GHC.Fingerprint.Type.$fOrdFingerprint_$c<_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$c>_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$c>_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.665390459 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_closure:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_info;
 },
 GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aJz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c4aJD; else goto c4aJE;
       c4aJD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aJE: // global
           I64[Sp - 16] = block_c4aJw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aK3; else goto c4aJx;
       u4aK3: // global
           call _c4aJw(R1) args: 0, res: 0, upd: 0;
       c4aJx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_info" {
     GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_info:
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4aJw() //  [R1]
         { []
         }
     {offset
       c4aJw: // global
           I64[Sp - 16] = block_c4aJC_info;
           _s4axj::P64 = R1;
           _s4axk::I64 = I64[R1 + 7];
           _s4axl::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp - 8] = _s4axl::I64;
           I64[Sp] = _s4axk::I64;
           P64[Sp + 8] = _s4axj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4aK2; else goto c4aJG;
       u4aK2: // global
           call _c4aJC(R1) args: 0, res: 0, upd: 0;
       c4aJG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aJw_info" {
     block_c4aJw_info:
         const _c4aJw;
         const 1;
         const 30;
 },
 _c4aJC() //  [R1]
         { []
         }
     {offset
       c4aJC: // global
           _s4axj::P64 = P64[Sp + 24];
           _s4axk::I64 = I64[Sp + 16];
           _s4axn::I64 = I64[R1 + 7];
           if (_s4axk::I64 == _s4axn::I64) goto c4aK1; else goto c4aJU;
       c4aK1: // global
           _s4axm::P64 = R1;
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c4aJZ; else goto c4aK0;
       c4aJU: // global
           _s4axm::P64 = R1;
           if (_s4axk::I64 > _s4axn::I64) goto c4aJZ; else goto c4aK0;
       c4aJZ: // global
           R1 = _s4axm::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4aK0: // global
           R1 = _s4axj::P64 & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4aJC_info" {
     block_c4aJC_info:
         const _c4aJC;
         const 195;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.672263197 UTC

[section ""data" . GHC.Fingerprint.Type.$fOrdFingerprint_closure" {
     GHC.Fingerprint.Type.$fOrdFingerprint_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Fingerprint.Type.$fEqFingerprint_closure+1;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$ccompare_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c<=_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$c>=_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmax_closure+2;
         const GHC.Fingerprint.Type.$fOrdFingerprint_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.674551995 UTC

[section ""cstring" . GHC.Fingerprint.Type.$trModule4_bytes" {
     GHC.Fingerprint.Type.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.676215898 UTC

[section ""data" . GHC.Fingerprint.Type.$trModule3_closure" {
     GHC.Fingerprint.Type.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.Type.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.677935168 UTC

[section ""cstring" . GHC.Fingerprint.Type.$trModule2_bytes" {
     GHC.Fingerprint.Type.$trModule2_bytes:
         I8[] [71,72,67,46,70,105,110,103,101,114,112,114,105,110,116,46,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.679556509 UTC

[section ""data" . GHC.Fingerprint.Type.$trModule1_closure" {
     GHC.Fingerprint.Type.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.Type.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.681269261 UTC

[section ""data" . GHC.Fingerprint.Type.$trModule_closure" {
     GHC.Fingerprint.Type.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Fingerprint.Type.$trModule3_closure+1;
         const GHC.Fingerprint.Type.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.683018106 UTC

[section ""data" . $krep_r4a01_closure" {
     $krep_r4a01_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.68465815 UTC

[section ""cstring" . GHC.Fingerprint.Type.$tcFingerprint2_bytes" {
     GHC.Fingerprint.Type.$tcFingerprint2_bytes:
         I8[] [70,105,110,103,101,114,112,114,105,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.686541531 UTC

[section ""data" . GHC.Fingerprint.Type.$tcFingerprint1_closure" {
     GHC.Fingerprint.Type.$tcFingerprint1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.Type.$tcFingerprint2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.68827449 UTC

[section ""data" . GHC.Fingerprint.Type.$tcFingerprint_closure" {
     GHC.Fingerprint.Type.$tcFingerprint_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Fingerprint.Type.$trModule_closure+1;
         const GHC.Fingerprint.Type.$tcFingerprint1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12761381476876783108;
         const 2142724667088540655;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.690219506 UTC

[section ""data" . $krep1_r4a02_closure" {
     $krep1_r4a02_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Fingerprint.Type.$tcFingerprint_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.692536175 UTC

[section ""data" . $krep2_r4a03_closure" {
     $krep2_r4a03_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4a01_closure+1;
         const $krep1_r4a02_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.694592473 UTC

[section ""data" . GHC.Fingerprint.Type.$tc'Fingerprint1_closure" {
     GHC.Fingerprint.Type.$tc'Fingerprint1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r4a01_closure+1;
         const $krep2_r4a03_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.696323743 UTC

[section ""cstring" . GHC.Fingerprint.Type.$tc'Fingerprint3_bytes" {
     GHC.Fingerprint.Type.$tc'Fingerprint3_bytes:
         I8[] [39,70,105,110,103,101,114,112,114,105,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.698067472 UTC

[section ""data" . GHC.Fingerprint.Type.$tc'Fingerprint2_closure" {
     GHC.Fingerprint.Type.$tc'Fingerprint2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.Type.$tc'Fingerprint3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.699773313 UTC

[section ""data" . GHC.Fingerprint.Type.$tc'Fingerprint_closure" {
     GHC.Fingerprint.Type.$tc'Fingerprint_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Fingerprint.Type.$trModule_closure+1;
         const GHC.Fingerprint.Type.$tc'Fingerprint2_closure+1;
         const GHC.Fingerprint.Type.$tc'Fingerprint1_closure+4;
         const 2008132202540166604;
         const 4312636609190854538;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.702255709 UTC

[section ""data" . GHC.Fingerprint.Type.Fingerprint_closure" {
     GHC.Fingerprint.Type.Fingerprint_closure:
         const GHC.Fingerprint.Type.Fingerprint_info;
 },
 GHC.Fingerprint.Type.Fingerprint_entry() //  [R2, R3]
         { []
         }
     {offset
       c4aKK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4aKO; else goto c4aKN;
       c4aKO: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.Type.Fingerprint_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4aKN: // global
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.Fingerprint_info" {
     GHC.Fingerprint.Type.Fingerprint_info:
         const GHC.Fingerprint.Type.Fingerprint_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.705944209 UTC

[section ""cstring" . i4aKW_str" {
     i4aKW_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,105,110,103,101,114,112,114,105,110,116,46,84,121,112,101,46,70,105,110,103,101,114,112,114,105,110,116]
 },
 GHC.Fingerprint.Type.Fingerprint_con_entry() //  [R1]
         { []
         }
     {offset
       c4aKV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.Type.Fingerprint_con_info" {
     GHC.Fingerprint.Type.Fingerprint_con_info:
         const GHC.Fingerprint.Type.Fingerprint_con_entry;
         const 8589934592;
         const 6;
         const i4aKW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:03.708994166 UTC

[section ""relreadonly" . S4az3_srt" {
     S4az3_srt:
         const GHC.Show.intToDigit_closure;
         const GHC.Word.$fShowWord64_closure;
         const GHC.Word.$fIntegralWord64_closure;
         const Numeric.showIntAtBase_closure;
         const GHC.Fingerprint.Type.$fShowFingerprint_hex16_closure;
         const GHC.Fingerprint.Type.$w$cshow_closure;
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshow_closure;
         const GHC.Fingerprint.Type.$w$cshowsPrec_closure;
         const GHC.Fingerprint.Type.$fShowFingerprint_$cshowsPrec_closure;
         const GHC.Fingerprint.Type.$fShowFingerprint1_closure;
 }]

