
==================== Output Cmm ====================
2018-03-16 16:11:11.03828458 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:11:11.039235319 UTC

[section ""data" . GHC.Exts.fromList_closure" {
     GHC.Exts.fromList_closure:
         const GHC.Exts.fromList_info;
 },
 GHC.Exts.fromList_entry() //  [R2]
         { info_tbl: [(cftkv,
                       label: GHC.Exts.fromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftkv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftkw; else goto cftkx;
       cftkw: // global
           R2 = R2;
           R1 = GHC.Exts.fromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftkx: // global
           I64[Sp - 8] = block_cftks_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftkB; else goto cftkt;
       uftkB: // global
           call _cftks(R1) args: 0, res: 0, upd: 0;
       cftkt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftks() //  [R1]
         { info_tbl: [(cftks,
                       label: block_cftks_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftks: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.040482002 UTC

[section ""data" . GHC.Exts.fromListN_closure" {
     GHC.Exts.fromListN_closure:
         const GHC.Exts.fromListN_info;
 },
 GHC.Exts.fromListN_entry() //  [R2]
         { info_tbl: [(cftkJ,
                       label: GHC.Exts.fromListN_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftkJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftkK; else goto cftkL;
       cftkK: // global
           R2 = R2;
           R1 = GHC.Exts.fromListN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftkL: // global
           I64[Sp - 8] = block_cftkG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftkP; else goto cftkH;
       uftkP: // global
           call _cftkG(R1) args: 0, res: 0, upd: 0;
       cftkH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftkG() //  [R1]
         { info_tbl: [(cftkG,
                       label: block_cftkG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftkG: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.04170884 UTC

[section ""data" . GHC.Exts.toList_closure" {
     GHC.Exts.toList_closure:
         const GHC.Exts.toList_info;
 },
 GHC.Exts.toList_entry() //  [R2]
         { info_tbl: [(cftkX,
                       label: GHC.Exts.toList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftkX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftkY; else goto cftkZ;
       cftkY: // global
           R2 = R2;
           R1 = GHC.Exts.toList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftkZ: // global
           I64[Sp - 8] = block_cftkU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftl3; else goto cftkV;
       uftl3: // global
           call _cftkU(R1) args: 0, res: 0, upd: 0;
       cftkV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftkU() //  [R1]
         { info_tbl: [(cftkU,
                       label: block_cftkU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftkU: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.042883754 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty1_closure" {
     GHC.Exts.$fIsListNonEmpty1_closure:
         const GHC.Exts.$fIsListNonEmpty1_info;
 },
 GHC.Exts.$fIsListNonEmpty1_entry() //  [R2]
         { info_tbl: [(cftlb,
                       label: GHC.Exts.$fIsListNonEmpty1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftlb: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cftlf; else goto cftle;
       cftlf: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftle: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.043743095 UTC

[section ""cstring" . lvl_rftgk_bytes" {
     lvl_rftgk_bytes:
         I8[] [78,111,110,69,109,112,116,121,46,102,114,111,109,76,105,115,116,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.044536113 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty2_closure" {
     GHC.Exts.$fIsListNonEmpty2_closure:
         const GHC.Exts.$fIsListNonEmpty2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty2_entry() //  [R1]
         { info_tbl: [(cftlo,
                       label: GHC.Exts.$fIsListNonEmpty2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftlo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftlp; else goto cftlq;
       cftlp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftlq: // global
           (_cftlj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftlj::I64 == 0) goto cftll; else goto cftlk;
       cftll: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftlk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftlj::I64;
           I64[Sp - 24] = block_cftlm_info;
           R2 = lvl_rftgk_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftlm() //  [R1]
         { info_tbl: [(cftlm,
                       label: block_cftlm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftlm: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.045950651 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromList_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromList_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromList_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromList_entry() //  [R2]
         { info_tbl: [(cftlG,
                       label: GHC.Exts.$fIsListNonEmpty_$cfromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftlG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftlH; else goto cftlI;
       cftlH: // global
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftlI: // global
           I64[Sp - 8] = block_cftlz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftlS; else goto cftlA;
       uftlS: // global
           call _cftlz(R1) args: 0, res: 0, upd: 0;
       cftlA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftlz() //  [R1]
         { info_tbl: [(cftlz,
                       label: block_cftlz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftlz: // global
           if (R1 & 7 == 1) goto cftlD; else goto cftlE;
       cftlD: // global
           R1 = GHC.Exts.$fIsListNonEmpty2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cftlE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftlR; else goto cftlQ;
       cftlR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftlQ: // global
           _sfth4::P64 = P64[R1 + 6];
           _sfth5::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sfth4::P64;
           P64[Hp] = _sfth5::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.04769018 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c==_entry() //  [R2, R3]
         { info_tbl: [(cftm4,
                       label: GHC.Exts.$fEqSpecConstrAnnotation_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftm4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftm5; else goto cftm6;
       cftm5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftm6: // global
           I64[Sp - 16] = block_cftlX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftmJ; else goto cftlY;
       uftmJ: // global
           call _cftlX(R1) args: 0, res: 0, upd: 0;
       cftlY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftlX() //  [R1]
         { info_tbl: [(cftlX,
                       label: block_cftlX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftlX: // global
           _sfth7::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftm1; else goto cftm2;
       cftm1: // global
           I64[Sp + 8] = block_cftm9_info;
           R1 = _sfth7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftmH; else goto cftmb;
       uftmH: // global
           call _cftm9(R1) args: 0, res: 0, upd: 0;
       cftmb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftm2: // global
           I64[Sp + 8] = block_cftmo_info;
           R1 = _sfth7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftmI; else goto cftmq;
       uftmI: // global
           call _cftmo(R1) args: 0, res: 0, upd: 0;
       cftmq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftm9() //  [R1]
         { info_tbl: [(cftm9,
                       label: block_cftm9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftm9: // global
           if (R1 & 7 == 1) goto uftmF; else goto uftmG;
       uftmF: // global
           Sp = Sp + 8;
           call _cftmA() args: 0, res: 0, upd: 0;
       uftmG: // global
           Sp = Sp + 8;
           call _cftmw() args: 0, res: 0, upd: 0;
     }
 },
 _cftmo() //  [R1]
         { info_tbl: [(cftmo,
                       label: block_cftmo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftmo: // global
           if (R1 & 7 == 1) goto uftmD; else goto uftmE;
       uftmD: // global
           Sp = Sp + 8;
           call _cftmw() args: 0, res: 0, upd: 0;
       uftmE: // global
           Sp = Sp + 8;
           call _cftmA() args: 0, res: 0, upd: 0;
     }
 },
 _cftmw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftmw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftmA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftmA: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.049830447 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c/=_entry() //  [R2, R3]
         { info_tbl: [(cftmZ,
                       label: GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftmZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftn0; else goto cftn1;
       cftn0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftn1: // global
           I64[Sp - 16] = block_cftmS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftnE; else goto cftmT;
       uftnE: // global
           call _cftmS(R1) args: 0, res: 0, upd: 0;
       cftmT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftmS() //  [R1]
         { info_tbl: [(cftmS,
                       label: block_cftmS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftmS: // global
           _sfthc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftmW; else goto cftmX;
       cftmW: // global
           I64[Sp + 8] = block_cftn4_info;
           R1 = _sfthc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftnC; else goto cftn6;
       uftnC: // global
           call _cftn4(R1) args: 0, res: 0, upd: 0;
       cftn6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftmX: // global
           I64[Sp + 8] = block_cftnj_info;
           R1 = _sfthc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftnD; else goto cftnl;
       uftnD: // global
           call _cftnj(R1) args: 0, res: 0, upd: 0;
       cftnl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftn4() //  [R1]
         { info_tbl: [(cftn4,
                       label: block_cftn4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftn4: // global
           if (R1 & 7 == 1) goto uftnA; else goto uftnB;
       uftnA: // global
           Sp = Sp + 8;
           call _cftnv() args: 0, res: 0, upd: 0;
       uftnB: // global
           Sp = Sp + 8;
           call _cftnr() args: 0, res: 0, upd: 0;
     }
 },
 _cftnj() //  [R1]
         { info_tbl: [(cftnj,
                       label: block_cftnj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftnj: // global
           if (R1 & 7 == 1) goto uftny; else goto uftnz;
       uftny: // global
           Sp = Sp + 8;
           call _cftnr() args: 0, res: 0, upd: 0;
       uftnz: // global
           Sp = Sp + 8;
           call _cftnv() args: 0, res: 0, upd: 0;
     }
 },
 _cftnr() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftnr: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftnv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftnv: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.051455345 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure+2;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.052509668 UTC

[section ""data" . GHC.Exts.$w$cgunfold_closure" {
     GHC.Exts.$w$cgunfold_closure:
         const GHC.Exts.$w$cgunfold_info;
         const 0;
 },
 GHC.Exts.$w$cgunfold_entry() //  [R2, R3, R4]
         { info_tbl: [(cftnU,
                       label: GHC.Exts.$w$cgunfold_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftnU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftnV; else goto cftnW;
       cftnV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$w$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftnW: // global
           I64[Sp - 24] = block_cftnN_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uftol; else goto cftnO;
       uftol: // global
           call _cftnN(R1) args: 0, res: 0, upd: 0;
       cftnO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftnN() //  [R1]
         { info_tbl: [(cftnN,
                       label: block_cftnN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftnN: // global
           if (R1 & 7 == 1) goto cftnS; else goto cftnR;
       cftnS: // global
           I64[Sp] = block_cfto8_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uftok; else goto cftoa;
       uftok: // global
           call _cfto8(R1) args: 0, res: 0, upd: 0;
       cftoa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftnR: // global
           _sfthi::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cftnZ_info;
           R1 = _sfthi::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uftoj; else goto cfto1;
       uftoj: // global
           call _cftnZ(R1) args: 0, res: 0, upd: 0;
       cfto1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfto8() //  [R1]
         { info_tbl: [(cfto8,
                       label: block_cfto8_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfto8: // global
           _sfthg::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 1) goto cftoi; else goto cftoh;
       cftoi: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sfthg::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cftoh: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sfthg::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftnZ() //  [R1]
         { info_tbl: [(cftnZ,
                       label: block_cftnZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftnZ: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Data.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.054370428 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_entry() //  [R2, R3,
                                                            R4]
         { info_tbl: [(cftot,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftot: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftou; else goto cftov;
       cftou: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftov: // global
           I64[Sp - 16] = block_cftoq_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftoz; else goto cftor;
       uftoz: // global
           call _cftoq(R1) args: 0, res: 0, upd: 0;
       cftor: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftoq() //  [R1]
         { info_tbl: [(cftoq,
                       label: block_cftoq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftoq: // global
           R4 = P64[R1 + 39];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Exts.$w$cgunfold_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.055691542 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(cftoL,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftoL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftoM; else goto cftoN;
       cftoM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftoN: // global
           I64[Sp - 16] = block_cftoE_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftoU; else goto cftoF;
       uftoU: // global
           call _cftoE(R1) args: 0, res: 0, upd: 0;
       cftoF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftoE() //  [R1]
         { info_tbl: [(cftoE,
                       label: block_cftoE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftoE: // global
           _sfthC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftoI; else goto cftoJ;
       cftoI: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sfthC::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cftoJ: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sfthC::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.056894583 UTC

[section ""data" . GHC.Exts.$dmfromListN_closure" {
     GHC.Exts.$dmfromListN_closure:
         const GHC.Exts.$dmfromListN_info;
 },
 GHC.Exts.$dmfromListN_entry() //  [R2]
         { info_tbl: [(cftoZ,
                       label: GHC.Exts.$dmfromListN_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftoZ: // global
           R2 = R2;
           call GHC.Exts.fromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.057741112 UTC

[section ""data" . GHC.Exts.$fIsListCallStack1_closure" {
     GHC.Exts.$fIsListCallStack1_closure:
         const GHC.Exts.$fIsListCallStack1_info;
 },
 GHC.Exts.$fIsListCallStack1_entry() //  [R3]
         { info_tbl: [(cftp6,
                       label: GHC.Exts.$fIsListCallStack1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftp6: // global
           R2 = R3;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.058430613 UTC

[section ""data" . GHC.Exts.$fIsListCallStack_closure" {
     GHC.Exts.$fIsListCallStack_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Stack.Types.fromCallSiteList_closure+1;
         const GHC.Exts.$fIsListCallStack1_closure+2;
         const GHC.Stack.Types.getCallStack_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.059137236 UTC

[section ""data" . GHC.Exts.$fIsListVersion1_closure" {
     GHC.Exts.$fIsListVersion1_closure:
         const GHC.Exts.$fIsListVersion1_info;
 },
 GHC.Exts.$fIsListVersion1_entry() //  [R3]
         { info_tbl: [(cftpd,
                       label: GHC.Exts.$fIsListVersion1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftpd: // global
           R2 = R3;
           call Data.Version.makeVersion_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.05979421 UTC

[section ""data" . GHC.Exts.$fIsListVersion_closure" {
     GHC.Exts.$fIsListVersion_closure:
         const GHC.Exts.C:IsList_con_info;
         const Data.Version.makeVersion_closure+1;
         const GHC.Exts.$fIsListVersion1_closure+2;
         const Data.Version.versionBranch_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.060471528 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromListN_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromListN_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromListN_entry() //  [R3]
         { info_tbl: [(cftpk,
                       label: GHC.Exts.$fIsListNonEmpty_$cfromListN_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftpk: // global
           R2 = R3;
           call GHC.Exts.$fIsListNonEmpty_$cfromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.061205234 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_closure" {
     GHC.Exts.$fIsListNonEmpty_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure+1;
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_closure+2;
         const GHC.Exts.$fIsListNonEmpty1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.061960763 UTC

[section ""data" . GHC.Exts.$fIsList[]1_closure" {
     GHC.Exts.$fIsList[]1_closure:
         const GHC.Exts.$fIsList[]1_info;
 },
 GHC.Exts.$fIsList[]1_entry() //  [R3]
         { info_tbl: [(cftpr,
                       label: GHC.Exts.$fIsList[]1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftpr: // global
           R2 = R3;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.062700026 UTC

[section ""data" . GHC.Exts.$fIsList[]_closure" {
     GHC.Exts.$fIsList[]_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Base.id_closure+1;
         const GHC.Exts.$fIsList[]1_closure+2;
         const GHC.Base.id_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.063308671 UTC

[section ""data" . GHC.Exts.maxTupleSize_closure" {
     GHC.Exts.maxTupleSize_closure:
         const GHC.Types.I#_con_info;
         const 62;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.063882634 UTC

[section ""cstring" . lvl1_rftgl_bytes" {
     lvl1_rftgl_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.064739479 UTC

[section ""data" . GHC.Exts.the2_closure" {
     GHC.Exts.the2_closure:
         const GHC.Exts.the2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the2_entry() //  [R1]
         { info_tbl: [(cftpC,
                       label: GHC.Exts.the2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftpC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftpD; else goto cftpE;
       cftpD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftpE: // global
           (_cftpx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftpx::I64 == 0) goto cftpz; else goto cftpy;
       cftpz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftpy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftpx::I64;
           I64[Sp - 24] = block_cftpA_info;
           R2 = lvl1_rftgl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftpA() //  [R1]
         { info_tbl: [(cftpA,
                       label: block_cftpA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftpA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.066025304 UTC

[section ""cstring" . lvl2_rftgm_bytes" {
     lvl2_rftgm_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,110,111,110,45,105,100,101,110,116,105,99,97,108,32,101,108,101,109,101,110,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.066795156 UTC

[section ""data" . GHC.Exts.the1_closure" {
     GHC.Exts.the1_closure:
         const GHC.Exts.the1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the1_entry() //  [R1]
         { info_tbl: [(cftpQ,
                       label: GHC.Exts.the1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftpQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftpR; else goto cftpS;
       cftpR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftpS: // global
           (_cftpL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftpL::I64 == 0) goto cftpN; else goto cftpM;
       cftpN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftpM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftpL::I64;
           I64[Sp - 24] = block_cftpO_info;
           R2 = lvl2_rftgm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftpO() //  [R1]
         { info_tbl: [(cftpO,
                       label: block_cftpO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftpO: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.068408038 UTC

[section ""data" . GHC.Exts.the_closure" {
     GHC.Exts.the_closure:
         const GHC.Exts.the_info;
         const 0;
 },
 sat_sfthS_entry() //  [R1]
         { info_tbl: [(cftqa,
                       label: sat_sfthS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftqa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftqb; else goto cftqc;
       cftqb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftqc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.the_entry() //  [R2, R3]
         { info_tbl: [(cftqh,
                       label: GHC.Exts.the_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftqh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftqi; else goto cftqj;
       cftqi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.the_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftqj: // global
           I64[Sp - 16] = block_cftq0_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftqB; else goto cftq1;
       uftqB: // global
           call _cftq0(R1) args: 0, res: 0, upd: 0;
       cftq1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftq0() //  [R1]
         { info_tbl: [(cftq0,
                       label: block_cftq0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftq0: // global
           if (R1 & 7 == 1) goto cftqe; else goto cftqf;
       cftqe: // global
           R1 = GHC.Exts.the2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cftqf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cftqp; else goto cftqo;
       cftqp: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftqo: // global
           _sfthQ::P64 = P64[R1 + 6];
           _sfthR::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sfthS_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sfthQ::P64;
           I64[Sp] = block_cftqm_info;
           R3 = _sfthR::P64;
           R2 = Hp - 24;
           P64[Sp + 8] = _sfthQ::P64;
           call GHC.List.all_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftqm() //  [R1]
         { info_tbl: [(cftqm,
                       label: block_cftqm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftqm: // global
           if (R1 & 7 == 1) goto cftqv; else goto cftqz;
       cftqv: // global
           R1 = GHC.Exts.the1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cftqz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.070481885 UTC

[section ""data" . GHC.Exts.sortWith_closure" {
     GHC.Exts.sortWith_closure:
         const GHC.Exts.sortWith_info;
 },
 sat_sfti1_entry() //  [R1, R2, R3]
         { info_tbl: [(cftqN,
                       label: sat_sfti1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftqN: // global
           _sfthY::P64 = R3;
           _sfthX::P64 = R2;
           _sfti1::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cftqO; else goto cftqP;
       cftqP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cftqR; else goto cftqQ;
       cftqR: // global
           HpAlloc = 64;
           goto cftqO;
       cftqO: // global
           R3 = _sfthY::P64;
           R2 = _sfthX::P64;
           R1 = _sfti1::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftqQ: // global
           _sfthU::P64 = P64[_sfti1::P64 + 6];
           _sfthV::P64 = P64[_sfti1::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sfthV::P64;
           P64[Hp - 32] = _sfthY::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfthV::P64;
           P64[Hp] = _sfthX::P64;
           R2 = _sfthU::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 GHC.Exts.sortWith_entry() //  [R2, R3, R4]
         { info_tbl: [(cftqS,
                       label: GHC.Exts.sortWith_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftqS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftqW; else goto cftqV;
       cftqW: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.sortWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftqV: // global
           I64[Hp - 16] = sat_sfti1_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 14;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.072929104 UTC

[section ""data" . GHC.Exts.groupByFB_closure" {
     GHC.Exts.groupByFB_closure:
         const GHC.Exts.groupByFB_info;
 },
 ds1_sftib_entry() //  [R1]
         { info_tbl: [(cftrk,
                       label: ds1_sftib_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftrk: // global
           _sftib::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cftrl; else goto cftrm;
       cftrm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cftro; else goto cftrn;
       cftro: // global
           HpAlloc = 32;
           goto cftrl;
       cftrl: // global
           R1 = _sftib::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftrn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sftib::P64;
           _sfti4::P64 = P64[_sftib::P64 + 16];
           _sfti9::P64 = P64[_sftib::P64 + 24];
           _sftia::P64 = P64[_sftib::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfti4::P64;
           P64[Hp] = _sfti9::P64;
           I64[Sp - 24] = block_cftrh_info;
           R3 = _sftia::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftrh() //  [R1, R2]
         { info_tbl: [(cftrh,
                       label: block_cftrh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftrh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftrr; else goto cftrq;
       cftrr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cftrq: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftio_entry() //  [R1]
         { info_tbl: [(cftrz,
                       label: sat_sftio_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftrz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftrA; else goto cftrB;
       cftrA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftrB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cftrw_info;
           _sfti6::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sfti6::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uftrF; else goto cftrx;
       uftrF: // global
           call _cftrw(R1) args: 0, res: 0, upd: 0;
       cftrx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cftrw() //  [R1]
         { info_tbl: [(cftrw,
                       label: block_cftrw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftrw: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sfti6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 groupByFBCore_sfti6_entry() //  [R1, R2]
         { info_tbl: [(cftrK,
                       label: groupByFBCore_sfti6_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftrK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cftrL; else goto cftrM;
       cftrL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftrM: // global
           I64[Sp - 40] = block_cftr6_info;
           _sfti6::P64 = R1;
           _sfti2::P64 = P64[R1 + 7];
           _sfti3::P64 = P64[R1 + 15];
           _sfti4::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sfti2::P64;
           P64[Sp - 24] = _sfti3::P64;
           P64[Sp - 16] = _sfti4::P64;
           P64[Sp - 8] = _sfti6::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uftrU; else goto cftr7;
       uftrU: // global
           call _cftr6(R1) args: 0, res: 0, upd: 0;
       cftr7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftr6() //  [R1]
         { info_tbl: [(cftr6,
                       label: block_cftr6_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftr6: // global
           if (R1 & 7 == 1) goto cftrH; else goto cftrI;
       cftrH: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cftrI: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cftrT; else goto cftrS;
       cftrT: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftrS: // global
           _sfti9::P64 = P64[R1 + 6];
           _sftia::P64 = P64[R1 + 14];
           I64[Hp - 112] = ds1_sftib_info;
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = _sfti9::P64;
           P64[Hp - 80] = _sftia::P64;
           I64[Hp - 72] = sat_sftio_info;
           P64[Hp - 56] = P64[Sp + 32];
           _cftrc::P64 = Hp - 112;
           P64[Hp - 48] = _cftrc::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cftrc::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sfti9::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 72;
           R2 = Hp - 14;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exts.groupByFB_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(cftrV,
                       label: GHC.Exts.groupByFB_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftrV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cftrZ; else goto cftrY;
       cftrZ: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.groupByFB_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftrY: // global
           I64[Hp - 24] = groupByFBCore_sfti6_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = R5;
           R1 = Hp - 23;
           call groupByFBCore_sfti6_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.077214838 UTC

[section ""data" . GHC.Exts.groupWith_closure" {
     GHC.Exts.groupWith_closure:
         const GHC.Exts.groupWith_info;
 },
 $dEq_sftis_entry() //  [R1]
         { info_tbl: [(cfts8,
                       label: $dEq_sftis_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfts8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfts9; else goto cftsa;
       cfts9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftsa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftiC_entry() //  [R1, R2]
         { info_tbl: [(cftsx,
                       label: sat_sftiC_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftsx: // global
           _sftiA::P64 = R2;
           _sftiC::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cftsy; else goto cftsz;
       cftsz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cftsB; else goto cftsA;
       cftsB: // global
           HpAlloc = 32;
           goto cftsy;
       cftsy: // global
           R2 = _sftiA::P64;
           R1 = _sftiC::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftsA: // global
           _sftiq::P64 = P64[_sftiC::P64 + 7];
           _sftis::P64 = P64[_sftiC::P64 + 15];
           _sftiz::P64 = P64[_sftiC::P64 + 23];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sftiq::P64;
           P64[Hp] = _sftiA::P64;
           R2 = _sftis::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sftiz::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 ds1_sftiy_entry() //  [R1]
         { info_tbl: [(cftsF,
                       label: ds1_sftiy_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftsF: // global
           _sftiy::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cftsG; else goto cftsH;
       cftsH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cftsJ; else goto cftsI;
       cftsJ: // global
           HpAlloc = 64;
           goto cftsG;
       cftsG: // global
           R1 = _sftiy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftsI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sftiy::P64;
           _sftiq::P64 = P64[_sftiy::P64 + 16];
           _sftis::P64 = P64[_sftiy::P64 + 24];
           _sftiw::P64 = P64[_sftiy::P64 + 32];
           _sftix::P64 = P64[_sftiy::P64 + 40];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sftiq::P64;
           P64[Hp - 32] = _sftiw::P64;
           I64[Hp - 24] = sat_sftiC_info;
           P64[Hp - 16] = _sftiq::P64;
           P64[Hp - 8] = _sftis::P64;
           P64[Hp] = Hp - 56;
           I64[Sp - 24] = block_cftsC_info;
           R3 = _sftix::P64;
           R2 = Hp - 23;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftsC() //  [R1, R2]
         { info_tbl: [(cftsC,
                       label: block_cftsC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftsC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftsM; else goto cftsL;
       cftsM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cftsL: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftiO_entry() //  [R1]
         { info_tbl: [(cftsU,
                       label: sat_sftiO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftsU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftsV; else goto cftsW;
       cftsV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftsW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cftsR_info;
           _sftit::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sftit::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uftt0; else goto cftsS;
       uftt0: // global
           call _cftsR(R1) args: 0, res: 0, upd: 0;
       cftsS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cftsR() //  [R1]
         { info_tbl: [(cftsR,
                       label: block_cftsR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftsR: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sftit_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 groupByFBCore_sftit_entry() //  [R1, R2]
         { info_tbl: [(cftt5,
                       label: groupByFBCore_sftit_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftt5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftt6; else goto cftt7;
       cftt6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftt7: // global
           I64[Sp - 32] = block_cftsg_info;
           _sftit::P64 = R1;
           _sftiq::P64 = P64[R1 + 7];
           _sftis::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sftiq::P64;
           P64[Sp - 16] = _sftis::P64;
           P64[Sp - 8] = _sftit::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufttg; else goto cftsh;
       ufttg: // global
           call _cftsg(R1) args: 0, res: 0, upd: 0;
       cftsh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftsg() //  [R1]
         { info_tbl: [(cftsg,
                       label: block_cftsg_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftsg: // global
           if (R1 & 7 == 1) goto cftt2; else goto cftt3;
       cftt2: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cftt3: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cfttf; else goto cftte;
       cfttf: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftte: // global
           _sftiw::P64 = P64[R1 + 6];
           _sftix::P64 = P64[R1 + 14];
           I64[Hp - 144] = ds1_sftiy_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = _sftiw::P64;
           P64[Hp - 104] = _sftix::P64;
           I64[Hp - 96] = sat_sftiO_info;
           P64[Hp - 80] = P64[Sp + 24];
           _cftsm::P64 = Hp - 144;
           P64[Hp - 72] = _cftsm::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cftsm::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sftiw::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exts.groupWith_entry() //  [R2, R3, R4]
         { info_tbl: [(cfttj,
                       label: GHC.Exts.groupWith_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfttj: // global
           _sftir::P64 = R4;
           _sftiq::P64 = R3;
           _sftip::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cfttk; else goto cfttl;
       cfttl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfttn; else goto cfttm;
       cfttn: // global
           HpAlloc = 48;
           goto cfttk;
       cfttk: // global
           R4 = _sftir::P64;
           R3 = _sftiq::P64;
           R2 = _sftip::P64;
           R1 = GHC.Exts.groupWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfttm: // global
           I64[Hp - 40] = $dEq_sftis_info;
           P64[Hp - 24] = _sftip::P64;
           I64[Hp - 16] = groupByFBCore_sftit_info;
           P64[Hp - 8] = _sftiq::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 16] = block_cftth_info;
           R4 = _sftir::P64;
           R3 = _sftiq::P64;
           R2 = _sftip::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exts.sortWith_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftth() //  [R1]
         { info_tbl: [(cftth,
                       label: block_cftth_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftth: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sftit_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.0813703 UTC

[section ""data" . GHC.Exts.traceEvent_closure" {
     GHC.Exts.traceEvent_closure:
         const GHC.Exts.traceEvent_info;
         const 0;
 },
 GHC.Exts.traceEvent_entry() //  [R2]
         { info_tbl: [(cfttv,
                       label: GHC.Exts.traceEvent_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfttv: // global
           R2 = R2;
           call Debug.Trace.traceEventIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.082054207 UTC

[section ""cstring" . GHC.Exts.$fDataSpecConstrAnnotation7_bytes" {
     GHC.Exts.$fDataSpecConstrAnnotation7_bytes:
         I8[] [83,112,101,99,67,111,110,115,116,114,65,110,110,111,116,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.082792402 UTC

[section ""data" . $tSpecConstrAnnotation1_rftgn_closure" {
     $tSpecConstrAnnotation1_rftgn_closure:
         const $tSpecConstrAnnotation1_rftgn_info;
         const 0;
         const 0;
         const 0;
 },
 $tSpecConstrAnnotation1_rftgn_entry() //  [R1]
         { info_tbl: [(cfttE,
                       label: $tSpecConstrAnnotation1_rftgn_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfttE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfttF; else goto cfttG;
       cfttF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfttG: // global
           (_cfttB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfttB::I64 == 0) goto cfttD; else goto cfttC;
       cfttD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfttC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfttB::I64;
           R2 = GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.08369684 UTC

[section ""cstring" . w1_rftgo_bytes" {
     w1_rftgo_bytes:
         I8[] [70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.084403265 UTC

[section ""data" . w2_rftgp_closure" {
     w2_rftgp_closure:
         const w2_rftgp_info;
         const 0;
         const 0;
         const 0;
 },
 w2_rftgp_entry() //  [R1]
         { info_tbl: [(cfttN,
                       label: w2_rftgp_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfttN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfttO; else goto cfttP;
       cfttO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfttP: // global
           (_cfttK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfttK::I64 == 0) goto cfttM; else goto cfttL;
       cfttM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfttL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfttK::I64;
           R2 = w1_rftgo_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.085338335 UTC

[section ""cstring" . w3_rftgq_bytes" {
     w3_rftgq_bytes:
         I8[] [78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.086125343 UTC

[section ""data" . w4_rftgr_closure" {
     w4_rftgr_closure:
         const w4_rftgr_info;
         const 0;
         const 0;
         const 0;
 },
 w4_rftgr_entry() //  [R1]
         { info_tbl: [(cfttW,
                       label: w4_rftgr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfttW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfttX; else goto cfttY;
       cfttX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfttY: // global
           (_cfttT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfttT::I64 == 0) goto cfttV; else goto cfttU;
       cfttV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfttU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfttT::I64;
           R2 = w3_rftgq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.087827883 UTC

[section ""data" . go61_rftgs_closure" {
     go61_rftgs_closure:
         const go61_rftgs_info;
         const 0;
 },
 go61_rftgs_entry() //  [R2, R3]
         { info_tbl: [(cftua,
                       label: go61_rftgs_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftua: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftub; else goto uftuO;
       cftub: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rftgs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       uftuO: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cftu0() args: 0, res: 0, upd: 0;
     }
 },
 _cftu0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftu0: // global
           _sftiQ::P64 = P64[Sp];
           I64[Sp] = block_cftu3_info;
           R1 = _sftiQ::P64;
           if (R1 & 7 != 0) goto uftuS; else goto cftu4;
       uftuS: // global
           call _cftu3(R1) args: 0, res: 0, upd: 0;
       cftu4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftu3() //  [R1]
         { info_tbl: [(cftu3,
                       label: block_cftu3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftu3: // global
           if (R1 & 7 == 1) goto uftuP; else goto cftu8;
       uftuP: // global
           Sp = Sp + 16;
           call _cftuq() args: 0, res: 0, upd: 0;
       cftu8: // global
           I64[Sp - 8] = block_cftui_info;
           _sftiT::P64 = P64[R1 + 6];
           _sftiU::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sftiU::P64;
           P64[Sp + 8] = _sftiT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftuT; else goto cftuk;
       uftuT: // global
           call _cftui(R1) args: 0, res: 0, upd: 0;
       cftuk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftui() //  [R1]
         { info_tbl: [(cftui,
                       label: block_cftui_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftui: // global
           if (R1 & 7 == 1) goto uftuQ; else goto cftuv;
       uftuQ: // global
           Sp = Sp + 24;
           call _cftuq() args: 0, res: 0, upd: 0;
       cftuv: // global
           I64[Sp - 8] = block_cftut_info;
           _sftiW::P64 = P64[R1 + 6];
           _sftiX::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sftiX::P64;
           P64[Sp + 16] = _sftiW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftuW; else goto cftuw;
       uftuW: // global
           call _cftut(R1) args: 0, res: 0, upd: 0;
       cftuw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftuq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftuq: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftut() //  [R1]
         { info_tbl: [(cftut,
                       label: block_cftut_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftut: // global
           I64[Sp] = block_cftuA_info;
           R3 = w2_rftgp_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftuA() //  [R1]
         { info_tbl: [(cftuA,
                       label: block_cftuA_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftuA: // global
           if (R1 & 7 == 1) goto cftuH; else goto cftuL;
       cftuH: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cftu0() args: 0, res: 0, upd: 0;
       cftuL: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.092619381 UTC

[section ""data" . go1_rftgt_closure" {
     go1_rftgt_closure:
         const go1_rftgt_info;
         const 0;
 },
 go1_rftgt_entry() //  [R2, R3]
         { info_tbl: [(cftva,
                       label: go1_rftgt_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftva: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftvb; else goto uftvO;
       cftvb: // global
           R3 = R3;
           R2 = R2;
           R1 = go1_rftgt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       uftvO: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cftv0() args: 0, res: 0, upd: 0;
     }
 },
 _cftv0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftv0: // global
           _sftj5::P64 = P64[Sp];
           I64[Sp] = block_cftv3_info;
           R1 = _sftj5::P64;
           if (R1 & 7 != 0) goto uftvS; else goto cftv4;
       uftvS: // global
           call _cftv3(R1) args: 0, res: 0, upd: 0;
       cftv4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftv3() //  [R1]
         { info_tbl: [(cftv3,
                       label: block_cftv3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftv3: // global
           if (R1 & 7 == 1) goto uftvP; else goto cftv8;
       uftvP: // global
           Sp = Sp + 16;
           call _cftvq() args: 0, res: 0, upd: 0;
       cftv8: // global
           I64[Sp - 8] = block_cftvi_info;
           _sftj8::P64 = P64[R1 + 6];
           _sftj9::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sftj9::P64;
           P64[Sp + 8] = _sftj8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftvT; else goto cftvk;
       uftvT: // global
           call _cftvi(R1) args: 0, res: 0, upd: 0;
       cftvk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftvi() //  [R1]
         { info_tbl: [(cftvi,
                       label: block_cftvi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftvi: // global
           if (R1 & 7 == 1) goto uftvQ; else goto cftvv;
       uftvQ: // global
           Sp = Sp + 24;
           call _cftvq() args: 0, res: 0, upd: 0;
       cftvv: // global
           I64[Sp - 8] = block_cftvt_info;
           _sftjb::P64 = P64[R1 + 6];
           _sftjc::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sftjc::P64;
           P64[Sp + 16] = _sftjb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftvW; else goto cftvw;
       uftvW: // global
           call _cftvt(R1) args: 0, res: 0, upd: 0;
       cftvw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftvq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftvq: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftvt() //  [R1]
         { info_tbl: [(cftvt,
                       label: block_cftvt_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftvt: // global
           I64[Sp] = block_cftvA_info;
           R3 = w4_rftgr_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftvA() //  [R1]
         { info_tbl: [(cftvA,
                       label: block_cftvA_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftvA: // global
           if (R1 & 7 == 1) goto cftvH; else goto cftvL;
       cftvH: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cftv0() args: 0, res: 0, upd: 0;
       cftvL: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.095055566 UTC

[section ""data" . $cForceSpecConstr1_rftgu_closure" {
     $cForceSpecConstr1_rftgu_closure:
         const Data.Data.AlgConstr_con_info;
         const $cForceSpecConstr2_rftgA_closure;
         const 0;
 },
 section ""data" . $cNoSpecConstr1_rftgv_closure" {
     $cNoSpecConstr1_rftgv_closure:
         const Data.Data.AlgConstr_con_info;
         const $cNoSpecConstr2_rftgz_closure;
         const 0;
 },
 section ""data" . GHC.Exts.$cForceSpecConstr_closure" {
     GHC.Exts.$cForceSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cForceSpecConstr1_rftgu_closure+1;
         const w2_rftgp_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation2_rftgw_closure" {
     $tSpecConstrAnnotation2_rftgw_closure:
         const :_con_info;
         const GHC.Exts.$cForceSpecConstr_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation3_rftgx_closure" {
     $tSpecConstrAnnotation3_rftgx_closure:
         const :_con_info;
         const GHC.Exts.$cNoSpecConstr_closure+1;
         const $tSpecConstrAnnotation2_rftgw_closure+2;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation4_rftgy_closure" {
     $tSpecConstrAnnotation4_rftgy_closure:
         const Data.Data.AlgRep_con_info;
         const $tSpecConstrAnnotation3_rftgx_closure+2;
         const 0;
 },
 section ""data" . GHC.Exts.$tSpecConstrAnnotation_closure" {
     GHC.Exts.$tSpecConstrAnnotation_closure:
         const Data.Data.DataType_con_info;
         const $tSpecConstrAnnotation1_rftgn_closure;
         const $tSpecConstrAnnotation4_rftgy_closure+1;
         const 0;
 },
 section ""data" . GHC.Exts.$cNoSpecConstr_closure" {
     GHC.Exts.$cNoSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cNoSpecConstr1_rftgv_closure+1;
         const w4_rftgr_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $cNoSpecConstr2_rftgz_closure" {
     $cNoSpecConstr2_rftgz_closure:
         const $cNoSpecConstr2_rftgz_info;
         const 0;
         const 0;
         const 0;
 },
 $cNoSpecConstr2_rftgz_entry() //  [R1]
         { info_tbl: [(cftw5,
                       label: $cNoSpecConstr2_rftgz_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftw5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftw6; else goto cftw7;
       cftw6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftw7: // global
           (_cftw2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftw2::I64 == 0) goto cftw4; else goto cftw3;
       cftw4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftw3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftw2::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go1_rftgt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""data" . $cForceSpecConstr2_rftgA_closure" {
     $cForceSpecConstr2_rftgA_closure:
         const $cForceSpecConstr2_rftgA_info;
         const 0;
         const 0;
         const 0;
 },
 $cForceSpecConstr2_rftgA_entry() //  [R1]
         { info_tbl: [(cftwe,
                       label: $cForceSpecConstr2_rftgA_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftwe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftwf; else goto cftwg;
       cftwf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftwg: // global
           (_cftwb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftwb::I64 == 0) goto cftwd; else goto cftwc;
       cftwd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftwc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftwb::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go61_rftgs_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.096964188 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_entry() //  []
         { info_tbl: [(cftwl,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftwl: // global
           R1 = GHC.Exts.$tSpecConstrAnnotation_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.097933137 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_entry() //  [R2]
         { info_tbl: [(cftwz,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftwz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftwA; else goto cftwB;
       cftwA: // global
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftwB: // global
           I64[Sp - 8] = block_cftws_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftwI; else goto cftwt;
       uftwI: // global
           call _cftws(R1) args: 0, res: 0, upd: 0;
       cftwt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftws() //  [R1]
         { info_tbl: [(cftws,
                       label: block_cftws_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftws: // global
           if (R1 & 7 == 1) goto cftww; else goto cftwx;
       cftww: // global
           R1 = GHC.Exts.$cNoSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cftwx: // global
           R1 = GHC.Exts.$cForceSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.099007241 UTC

[section ""cstring" . GHC.Exts.$trModule4_bytes" {
     GHC.Exts.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.099518396 UTC

[section ""data" . GHC.Exts.$trModule3_closure" {
     GHC.Exts.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.10005973 UTC

[section ""cstring" . GHC.Exts.$trModule2_bytes" {
     GHC.Exts.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.100562235 UTC

[section ""data" . GHC.Exts.$trModule1_closure" {
     GHC.Exts.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.101131327 UTC

[section ""data" . GHC.Exts.$trModule_closure" {
     GHC.Exts.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Exts.$trModule3_closure+1;
         const GHC.Exts.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.101949505 UTC

[section ""data" . $krep_rftgB_closure" {
     $krep_rftgB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.102523369 UTC

[section ""data" . GHC.Exts.$tcIsList1_closure" {
     GHC.Exts.$tcIsList1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep_rftgB_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.103100498 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation6_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation6_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.103706498 UTC

[section ""data" . GHC.Exts.$tcSpecConstrAnnotation_closure" {
     GHC.Exts.$tcSpecConstrAnnotation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
         const GHC.Types.krep$*_closure;
         const 8217012571387563927;
         const 8545973142114271769;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.104334094 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr1_closure" {
     GHC.Exts.$tc'ForceSpecConstr1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exts.$tcSpecConstrAnnotation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.104909657 UTC

[section ""cstring" . GHC.Exts.$tc'NoSpecConstr2_bytes" {
     GHC.Exts.$tc'NoSpecConstr2_bytes:
         I8[] [39,78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.105523679 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr1_closure" {
     GHC.Exts.$tc'NoSpecConstr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'NoSpecConstr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.106049406 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr_closure" {
     GHC.Exts.$tc'NoSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'NoSpecConstr1_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 18402820579108170608;
         const 14598374581444186552;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.106674568 UTC

[section ""cstring" . GHC.Exts.$tc'ForceSpecConstr3_bytes" {
     GHC.Exts.$tc'ForceSpecConstr3_bytes:
         I8[] [39,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.10720384 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr2_closure" {
     GHC.Exts.$tc'ForceSpecConstr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'ForceSpecConstr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.107732757 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr_closure" {
     GHC.Exts.$tc'ForceSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr2_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 13715005538542947299;
         const 3802030838304098377;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.108913021 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation5_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation5_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation5_entry() //  [R1]
         { info_tbl: [(cftwU,
                       label: GHC.Exts.$fDataSpecConstrAnnotation5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftwU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cftwV; else goto cftwW;
       cftwV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftwW: // global
           (_cftwM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftwM::I64 == 0) goto cftwO; else goto cftwN;
       cftwO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftwN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftwM::I64;
           I64[Sp - 24] = block_cftwP_info;
           R6 = 0;
           R5 = GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
           R4 = GHC.Exts.$trModule_closure+1;
           R3 = 8545973142114271769;
           R2 = 8217012571387563927;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _cftwP() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(cftwP,
                       label: block_cftwP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftwP: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cftwQ() args: 0, res: 0, upd: 0;
     }
 },
 _cftwQ() //  []
         { info_tbl: [(cftwQ,
                       label: block_cftwQ_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftwQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cftwZ; else goto cftwY;
       cftwZ: // global
           HpAlloc = 48;
           I64[Sp] = block_cftwQ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cftwY: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.110579962 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_entry() //  []
         { info_tbl: [(cftx6,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftx6: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.111288446 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation2_closure:
         const (,)_con_info;
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.111901698 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation1_closure:
         const (,)_con_info;
         const GHC.Exts.ForceSpecConstr_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.113827557 UTC

[section ""data" . GHC.Exts.$w$cgmapMp_closure" {
     GHC.Exts.$w$cgmapMp_closure:
         const GHC.Exts.$w$cgmapMp_info;
 },
 lvl3_sftjx_entry() //  [R1]
         { info_tbl: [(cftxh,
                       label: lvl3_sftjx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftxh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftxi; else goto cftxj;
       cftxi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftxj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftjG_entry() //  [R1, R2]
         { info_tbl: [(cftxw,
                       label: sat_sftjG_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftxw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftxx; else goto cftxy;
       cftxx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftxy: // global
           I64[Sp - 24] = block_cftxt_info;
           _sftjx::P64 = P64[R1 + 7];
           _sftjy::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sftjx::P64;
           P64[Sp - 8] = _sftjy::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uftxQ; else goto cftxu;
       uftxQ: // global
           call _cftxt(R1) args: 0, res: 0, upd: 0;
       cftxu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftxt() //  [R1]
         { info_tbl: [(cftxt,
                       label: block_cftxt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftxt: // global
           I64[Sp - 8] = block_cftxB_info;
           _sftjD::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sftjD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftxP; else goto cftxD;
       uftxP: // global
           call _cftxB(R1) args: 0, res: 0, upd: 0;
       cftxD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftxB() //  [R1]
         { info_tbl: [(cftxB,
                       label: block_cftxB_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftxB: // global
           if (R1 & 7 == 1) goto cftxJ; else goto cftxN;
       cftxJ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cftxN: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 sat_sftjA_entry() //  [R1]
         { info_tbl: [(cfty2,
                       label: sat_sftjA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfty2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfty3; else goto cfty4;
       cfty3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfty4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cftxV_info;
           _sftjy::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sftjy::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uftyb; else goto cftxW;
       uftyb: // global
           call _cftxV(R1) args: 0, res: 0, upd: 0;
       cftxW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cftxV() //  [R1]
         { info_tbl: [(cftxV,
                       label: block_cftxV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftxV: // global
           _sftjy::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftxZ; else goto cfty0;
       cftxZ: // global
           R2 = _sftjy::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cfty0: // global
           R2 = _sftjy::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.$w$cgmapMp_entry() //  [R2, R3]
         { info_tbl: [(cftyc,
                       label: GHC.Exts.$w$cgmapMp_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftyc: // global
           _sftjw::P64 = R3;
           _sftjv::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cftyd; else goto cftye;
       cftye: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftyg; else goto cftyf;
       cftyg: // global
           HpAlloc = 24;
           goto cftyd;
       cftyd: // global
           R3 = _sftjw::P64;
           R2 = _sftjv::P64;
           R1 = GHC.Exts.$w$cgmapMp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftyf: // global
           I64[Hp - 16] = lvl3_sftjx_info;
           P64[Hp] = _sftjv::P64;
           I64[Sp - 24] = block_cftxk_info;
           R2 = _sftjv::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sftjw::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftxk() //  [R1]
         { info_tbl: [(cftxk,
                       label: block_cftxk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftxk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cftyj; else goto cftyi;
       cftyj: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftyi: // global
           I64[Hp - 48] = sat_sftjG_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sftjA_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.116613247 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_entry() //  [R2, R4]
         { info_tbl: [(cftyo,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftyo: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMp_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.117713636 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(cftyC,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftyC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftyD; else goto cftyE;
       cftyD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftyE: // global
           I64[Sp - 16] = block_cftyv_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftyL; else goto cftyw;
       uftyL: // global
           call _cftyv(R1) args: 0, res: 0, upd: 0;
       cftyw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftyv() //  [R1]
         { info_tbl: [(cftyv,
                       label: block_cftyv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftyv: // global
           _sftjK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftyz; else goto cftyA;
       cftyz: // global
           R2 = _sftjK::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.NoSpecConstr_closure+1;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
       cftyA: // global
           R2 = _sftjK::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.ForceSpecConstr_closure+2;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.119046869 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(cftyT,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftyT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftyU; else goto cftyV;
       cftyU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftyV: // global
           I64[Sp - 8] = block_cftyQ_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftyZ; else goto cftyR;
       uftyZ: // global
           call _cftyQ() args: 0, res: 0, upd: 0;
       cftyR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftyQ() //  []
         { info_tbl: [(cftyQ,
                       label: block_cftyQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftyQ: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.120281635 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_entry() //  [R2, R3,
                                                           R4, R5]
         { info_tbl: [(cftz7,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftz7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftz8; else goto cftz9;
       cftz8: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftz9: // global
           I64[Sp - 16] = block_cftz4_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftzd; else goto cftz5;
       uftzd: // global
           call _cftz4() args: 0, res: 0, upd: 0;
       cftz5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftz4() //  []
         { info_tbl: [(cftz4,
                       label: block_cftz4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftz4: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.121463394 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_entry() //  [R2, R3]
         { info_tbl: [(cftzl,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftzl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftzm; else goto cftzn;
       cftzm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftzn: // global
           I64[Sp - 8] = block_cftzi_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftzr; else goto cftzj;
       uftzr: // global
           call _cftzi() args: 0, res: 0, upd: 0;
       cftzj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftzi() //  []
         { info_tbl: [(cftzi,
                       label: block_cftzi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftzi: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.12267798 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation3_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation3_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation3_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation3_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(cftzz,
                       label: GHC.Exts.$fDataSpecConstrAnnotation3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftzz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftzA; else goto cftzB;
       cftzA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftzB: // global
           I64[Sp - 16] = block_cftzw_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftzF; else goto cftzx;
       uftzF: // global
           call _cftzw() args: 0, res: 0, upd: 0;
       cftzx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftzw() //  []
         { info_tbl: [(cftzw,
                       label: block_cftzw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftzw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.123823503 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation4_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation4_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation4_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation4_entry() //  [R3]
         { info_tbl: [(cftzK,
                       label: GHC.Exts.$fDataSpecConstrAnnotation4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftzK: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.124678342 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_entry() //  []
         { info_tbl: [(cftzR,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftzR: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.126732476 UTC

[section ""data" . GHC.Exts.$w$cgmapMo_closure" {
     GHC.Exts.$w$cgmapMo_closure:
         const GHC.Exts.$w$cgmapMo_info;
 },
 lvl3_sftkb_entry() //  [R1]
         { info_tbl: [(cftA2,
                       label: lvl3_sftkb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftA2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftA3; else goto cftA4;
       cftA3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftA4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftkk_entry() //  [R1, R2]
         { info_tbl: [(cftAh,
                       label: sat_sftkk_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftAh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftAi; else goto cftAj;
       cftAi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftAj: // global
           I64[Sp - 24] = block_cftAe_info;
           _sftkb::P64 = P64[R1 + 7];
           _sftkc::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sftkb::P64;
           P64[Sp - 8] = _sftkc::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uftAB; else goto cftAf;
       uftAB: // global
           call _cftAe(R1) args: 0, res: 0, upd: 0;
       cftAf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftAe() //  [R1]
         { info_tbl: [(cftAe,
                       label: block_cftAe_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftAe: // global
           I64[Sp - 8] = block_cftAm_info;
           _sftkh::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sftkh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftAA; else goto cftAo;
       uftAA: // global
           call _cftAm(R1) args: 0, res: 0, upd: 0;
       cftAo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftAm() //  [R1]
         { info_tbl: [(cftAm,
                       label: block_cftAm_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftAm: // global
           if (R1 & 7 == 1) goto cftAu; else goto cftAy;
       cftAu: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cftAy: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 sat_sftke_entry() //  [R1]
         { info_tbl: [(cftAN,
                       label: sat_sftke_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftAN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftAO; else goto cftAP;
       cftAO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftAP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cftAG_info;
           _sftkc::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sftkc::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uftAW; else goto cftAH;
       uftAW: // global
           call _cftAG(R1) args: 0, res: 0, upd: 0;
       cftAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cftAG() //  [R1]
         { info_tbl: [(cftAG,
                       label: block_cftAG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftAG: // global
           _sftkc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftAK; else goto cftAL;
       cftAK: // global
           R2 = _sftkc::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cftAL: // global
           R2 = _sftkc::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.$w$cgmapMo_entry() //  [R2, R3]
         { info_tbl: [(cftAX,
                       label: GHC.Exts.$w$cgmapMo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftAX: // global
           _sftka::P64 = R3;
           _sftk9::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cftAY; else goto cftAZ;
       cftAZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftB1; else goto cftB0;
       cftB1: // global
           HpAlloc = 24;
           goto cftAY;
       cftAY: // global
           R3 = _sftka::P64;
           R2 = _sftk9::P64;
           R1 = GHC.Exts.$w$cgmapMo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftB0: // global
           I64[Hp - 16] = lvl3_sftkb_info;
           P64[Hp] = _sftk9::P64;
           I64[Sp - 24] = block_cftA5_info;
           R2 = _sftk9::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sftka::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftA5() //  [R1]
         { info_tbl: [(cftA5,
                       label: block_cftA5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftA5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cftB4; else goto cftB3;
       cftB4: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftB3: // global
           I64[Hp - 48] = sat_sftkk_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sftke_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.129542545 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_entry() //  [R2, R4]
         { info_tbl: [(cftB9,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftB9: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.130302669 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_closure:
         const Data.Data.C:Data_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation5_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation4_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation3_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.130983466 UTC

[section ""cstring" . GHC.Exts.$tcIsList3_bytes" {
     GHC.Exts.$tcIsList3_bytes:
         I8[] [73,115,76,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.131561347 UTC

[section ""data" . GHC.Exts.$tcIsList2_closure" {
     GHC.Exts.$tcIsList2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tcIsList3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.132193268 UTC

[section ""data" . GHC.Exts.$tcIsList_closure" {
     GHC.Exts.$tcIsList_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tcIsList2_closure+1;
         const GHC.Exts.$tcIsList1_closure+4;
         const 17963880945977000500;
         const 13985778898022155754;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.133034962 UTC

[section ""data" . GHC.Exts.C:IsList_closure" {
     GHC.Exts.C:IsList_closure:
         const GHC.Exts.C:IsList_info;
 },
 GHC.Exts.C:IsList_entry() //  [R2, R3, R4]
         { info_tbl: [(cftBh,
                       label: GHC.Exts.C:IsList_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftBh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cftBl; else goto cftBk;
       cftBl: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.C:IsList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftBk: // global
           I64[Hp - 24] = GHC.Exts.C:IsList_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.133940591 UTC

[section ""data" . GHC.Exts.NoSpecConstr_closure" {
     GHC.Exts.NoSpecConstr_closure:
         const GHC.Exts.NoSpecConstr_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.134517854 UTC

[section ""data" . GHC.Exts.ForceSpecConstr_closure" {
     GHC.Exts.ForceSpecConstr_closure:
         const GHC.Exts.ForceSpecConstr_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.136761757 UTC

[GHC.Exts.C:IsList_con_entry() //  [R1]
         { info_tbl: [(cftBm,
                       label: GHC.Exts.C:IsList_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,67,58,73,115,76,105,115,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftBm: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.137651137 UTC

[section ""relreadonly" . GHC.Exts.SpecConstrAnnotation_closure_tbl" {
     GHC.Exts.SpecConstrAnnotation_closure_tbl:
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Exts.ForceSpecConstr_closure+2;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.138344612 UTC

[GHC.Exts.NoSpecConstr_con_entry() //  [R1]
         { info_tbl: [(cftBn,
                       label: GHC.Exts.NoSpecConstr_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,78,111,83,112,101,99,67,111,110,115,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftBn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.139134281 UTC

[GHC.Exts.ForceSpecConstr_con_entry() //  [R1]
         { info_tbl: [(cftBo,
                       label: GHC.Exts.ForceSpecConstr_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftBo: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.139834928 UTC

[section ""relreadonly" . Sftlu_srt" {
     Sftlu_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
         const GHC.Exts.$fIsListNonEmpty2_closure;
         const Data.Data.$wlvl_closure;
         const GHC.Exts.$w$cgunfold_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
         const GHC.Exts.the_closure;
         const GHC.Exts.the1_closure;
         const GHC.Exts.the2_closure;
         const Debug.Trace.traceEventIO1_closure;
         const GHC.List.badHead_closure;
         const w2_rftgp_closure;
         const go61_rftgs_closure;
         const w4_rftgr_closure;
         const go1_rftgt_closure;
         const Data.Data.mkConstr1_closure;
         const $tSpecConstrAnnotation3_rftgx_closure;
         const GHC.Exts.$tSpecConstrAnnotation_closure;
         const GHC.Exts.$cNoSpecConstr_closure;
         const GHC.Exts.$cForceSpecConstr_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Maybe.fromJust1_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.140588943 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:11:11.141421471 UTC

[section ""data" . GHC.Exts.fromList_closure" {
     GHC.Exts.fromList_closure:
         const GHC.Exts.fromList_info;
 },
 GHC.Exts.fromList_entry() //  [R2]
         { info_tbl: [(cftBw,
                       label: GHC.Exts.fromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftBw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftBx; else goto cftBy;
       cftBx: // global
           R2 = R2;
           R1 = GHC.Exts.fromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftBy: // global
           I64[Sp - 8] = block_cftBt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftBC; else goto cftBu;
       uftBC: // global
           call _cftBt(R1) args: 0, res: 0, upd: 0;
       cftBu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftBt() //  [R1]
         { info_tbl: [(cftBt,
                       label: block_cftBt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftBt: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.142604946 UTC

[section ""data" . GHC.Exts.fromListN_closure" {
     GHC.Exts.fromListN_closure:
         const GHC.Exts.fromListN_info;
 },
 GHC.Exts.fromListN_entry() //  [R2]
         { info_tbl: [(cftBK,
                       label: GHC.Exts.fromListN_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftBK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftBL; else goto cftBM;
       cftBL: // global
           R2 = R2;
           R1 = GHC.Exts.fromListN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftBM: // global
           I64[Sp - 8] = block_cftBH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftBQ; else goto cftBI;
       uftBQ: // global
           call _cftBH(R1) args: 0, res: 0, upd: 0;
       cftBI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftBH() //  [R1]
         { info_tbl: [(cftBH,
                       label: block_cftBH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftBH: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.143763774 UTC

[section ""data" . GHC.Exts.toList_closure" {
     GHC.Exts.toList_closure:
         const GHC.Exts.toList_info;
 },
 GHC.Exts.toList_entry() //  [R2]
         { info_tbl: [(cftBY,
                       label: GHC.Exts.toList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftBY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftBZ; else goto cftC0;
       cftBZ: // global
           R2 = R2;
           R1 = GHC.Exts.toList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftC0: // global
           I64[Sp - 8] = block_cftBV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftC4; else goto cftBW;
       uftC4: // global
           call _cftBV(R1) args: 0, res: 0, upd: 0;
       cftBW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftBV() //  [R1]
         { info_tbl: [(cftBV,
                       label: block_cftBV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftBV: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.14495322 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty1_closure" {
     GHC.Exts.$fIsListNonEmpty1_closure:
         const GHC.Exts.$fIsListNonEmpty1_info;
 },
 GHC.Exts.$fIsListNonEmpty1_entry() //  [R2]
         { info_tbl: [(cftCc,
                       label: GHC.Exts.$fIsListNonEmpty1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftCc: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cftCg; else goto cftCf;
       cftCg: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftCf: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.145842502 UTC

[section ""cstring" . lvl_rftgk_bytes" {
     lvl_rftgk_bytes:
         I8[] [78,111,110,69,109,112,116,121,46,102,114,111,109,76,105,115,116,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.146611584 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty2_closure" {
     GHC.Exts.$fIsListNonEmpty2_closure:
         const GHC.Exts.$fIsListNonEmpty2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty2_entry() //  [R1]
         { info_tbl: [(cftCp,
                       label: GHC.Exts.$fIsListNonEmpty2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftCp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftCq; else goto cftCr;
       cftCq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftCr: // global
           (_cftCk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftCk::I64 == 0) goto cftCm; else goto cftCl;
       cftCm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftCl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftCk::I64;
           I64[Sp - 24] = block_cftCn_info;
           R2 = lvl_rftgk_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftCn() //  [R1]
         { info_tbl: [(cftCn,
                       label: block_cftCn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftCn: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.14797924 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromList_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromList_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromList_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromList_entry() //  [R2]
         { info_tbl: [(cftCG,
                       label: GHC.Exts.$fIsListNonEmpty_$cfromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftCG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftCH; else goto cftCI;
       cftCH: // global
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftCI: // global
           I64[Sp - 8] = block_cftCz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftCS; else goto cftCA;
       uftCS: // global
           call _cftCz(R1) args: 0, res: 0, upd: 0;
       cftCA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftCz() //  [R1]
         { info_tbl: [(cftCz,
                       label: block_cftCz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftCz: // global
           if (R1 & 7 == 1) goto cftCD; else goto cftCE;
       cftCD: // global
           R1 = GHC.Exts.$fIsListNonEmpty2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cftCE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftCR; else goto cftCQ;
       cftCR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftCQ: // global
           _sfth4::P64 = P64[R1 + 6];
           _sfth5::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sfth4::P64;
           P64[Hp] = _sfth5::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.149899366 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c==_entry() //  [R2, R3]
         { info_tbl: [(cftD4,
                       label: GHC.Exts.$fEqSpecConstrAnnotation_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftD4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftD5; else goto cftD6;
       cftD5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftD6: // global
           I64[Sp - 16] = block_cftCX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftDJ; else goto cftCY;
       uftDJ: // global
           call _cftCX(R1) args: 0, res: 0, upd: 0;
       cftCY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftCX() //  [R1]
         { info_tbl: [(cftCX,
                       label: block_cftCX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftCX: // global
           _sfth7::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftD1; else goto cftD2;
       cftD1: // global
           I64[Sp + 8] = block_cftD9_info;
           R1 = _sfth7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftDH; else goto cftDb;
       uftDH: // global
           call _cftD9(R1) args: 0, res: 0, upd: 0;
       cftDb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftD2: // global
           I64[Sp + 8] = block_cftDo_info;
           R1 = _sfth7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftDI; else goto cftDq;
       uftDI: // global
           call _cftDo(R1) args: 0, res: 0, upd: 0;
       cftDq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftD9() //  [R1]
         { info_tbl: [(cftD9,
                       label: block_cftD9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftD9: // global
           if (R1 & 7 == 1) goto uftDF; else goto uftDG;
       uftDF: // global
           Sp = Sp + 8;
           call _cftDA() args: 0, res: 0, upd: 0;
       uftDG: // global
           Sp = Sp + 8;
           call _cftDw() args: 0, res: 0, upd: 0;
     }
 },
 _cftDo() //  [R1]
         { info_tbl: [(cftDo,
                       label: block_cftDo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftDo: // global
           if (R1 & 7 == 1) goto uftDD; else goto uftDE;
       uftDD: // global
           Sp = Sp + 8;
           call _cftDw() args: 0, res: 0, upd: 0;
       uftDE: // global
           Sp = Sp + 8;
           call _cftDA() args: 0, res: 0, upd: 0;
     }
 },
 _cftDw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftDw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftDA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftDA: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.152005002 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c/=_entry() //  [R2, R3]
         { info_tbl: [(cftDZ,
                       label: GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftDZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftE0; else goto cftE1;
       cftE0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftE1: // global
           I64[Sp - 16] = block_cftDS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftEE; else goto cftDT;
       uftEE: // global
           call _cftDS(R1) args: 0, res: 0, upd: 0;
       cftDT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftDS() //  [R1]
         { info_tbl: [(cftDS,
                       label: block_cftDS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftDS: // global
           _sfthc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftDW; else goto cftDX;
       cftDW: // global
           I64[Sp + 8] = block_cftE4_info;
           R1 = _sfthc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftEC; else goto cftE6;
       uftEC: // global
           call _cftE4(R1) args: 0, res: 0, upd: 0;
       cftE6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftDX: // global
           I64[Sp + 8] = block_cftEj_info;
           R1 = _sfthc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftED; else goto cftEl;
       uftED: // global
           call _cftEj(R1) args: 0, res: 0, upd: 0;
       cftEl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftE4() //  [R1]
         { info_tbl: [(cftE4,
                       label: block_cftE4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftE4: // global
           if (R1 & 7 == 1) goto uftEA; else goto uftEB;
       uftEA: // global
           Sp = Sp + 8;
           call _cftEv() args: 0, res: 0, upd: 0;
       uftEB: // global
           Sp = Sp + 8;
           call _cftEr() args: 0, res: 0, upd: 0;
     }
 },
 _cftEj() //  [R1]
         { info_tbl: [(cftEj,
                       label: block_cftEj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftEj: // global
           if (R1 & 7 == 1) goto uftEy; else goto uftEz;
       uftEy: // global
           Sp = Sp + 8;
           call _cftEr() args: 0, res: 0, upd: 0;
       uftEz: // global
           Sp = Sp + 8;
           call _cftEv() args: 0, res: 0, upd: 0;
     }
 },
 _cftEr() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftEr: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftEv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftEv: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.153696931 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure+2;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.154766225 UTC

[section ""data" . GHC.Exts.$w$cgunfold_closure" {
     GHC.Exts.$w$cgunfold_closure:
         const GHC.Exts.$w$cgunfold_info;
         const 0;
 },
 GHC.Exts.$w$cgunfold_entry() //  [R2, R3, R4]
         { info_tbl: [(cftEU,
                       label: GHC.Exts.$w$cgunfold_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftEU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftEV; else goto cftEW;
       cftEV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$w$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftEW: // global
           I64[Sp - 24] = block_cftEN_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uftFl; else goto cftEO;
       uftFl: // global
           call _cftEN(R1) args: 0, res: 0, upd: 0;
       cftEO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftEN() //  [R1]
         { info_tbl: [(cftEN,
                       label: block_cftEN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftEN: // global
           if (R1 & 7 == 1) goto cftES; else goto cftER;
       cftES: // global
           I64[Sp] = block_cftF8_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uftFk; else goto cftFa;
       uftFk: // global
           call _cftF8(R1) args: 0, res: 0, upd: 0;
       cftFa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftER: // global
           _sfthi::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cftEZ_info;
           R1 = _sfthi::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uftFj; else goto cftF1;
       uftFj: // global
           call _cftEZ(R1) args: 0, res: 0, upd: 0;
       cftF1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftF8() //  [R1]
         { info_tbl: [(cftF8,
                       label: block_cftF8_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftF8: // global
           _sfthg::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 1) goto cftFi; else goto cftFh;
       cftFi: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sfthg::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cftFh: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sfthg::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftEZ() //  [R1]
         { info_tbl: [(cftEZ,
                       label: block_cftEZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftEZ: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Data.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.15655951 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_entry() //  [R2, R3,
                                                            R4]
         { info_tbl: [(cftFt,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftFt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftFu; else goto cftFv;
       cftFu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftFv: // global
           I64[Sp - 16] = block_cftFq_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftFz; else goto cftFr;
       uftFz: // global
           call _cftFq(R1) args: 0, res: 0, upd: 0;
       cftFr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftFq() //  [R1]
         { info_tbl: [(cftFq,
                       label: block_cftFq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftFq: // global
           R4 = P64[R1 + 39];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Exts.$w$cgunfold_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.157930169 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(cftFL,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftFL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftFM; else goto cftFN;
       cftFM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftFN: // global
           I64[Sp - 16] = block_cftFE_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftFU; else goto cftFF;
       uftFU: // global
           call _cftFE(R1) args: 0, res: 0, upd: 0;
       cftFF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftFE() //  [R1]
         { info_tbl: [(cftFE,
                       label: block_cftFE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftFE: // global
           _sfthC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftFI; else goto cftFJ;
       cftFI: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sfthC::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cftFJ: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sfthC::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.159181454 UTC

[section ""data" . GHC.Exts.$dmfromListN_closure" {
     GHC.Exts.$dmfromListN_closure:
         const GHC.Exts.$dmfromListN_info;
 },
 GHC.Exts.$dmfromListN_entry() //  [R2]
         { info_tbl: [(cftFZ,
                       label: GHC.Exts.$dmfromListN_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftFZ: // global
           R2 = R2;
           call GHC.Exts.fromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.160003031 UTC

[section ""data" . GHC.Exts.$fIsListCallStack1_closure" {
     GHC.Exts.$fIsListCallStack1_closure:
         const GHC.Exts.$fIsListCallStack1_info;
 },
 GHC.Exts.$fIsListCallStack1_entry() //  [R3]
         { info_tbl: [(cftG6,
                       label: GHC.Exts.$fIsListCallStack1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftG6: // global
           R2 = R3;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.16071852 UTC

[section ""data" . GHC.Exts.$fIsListCallStack_closure" {
     GHC.Exts.$fIsListCallStack_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Stack.Types.fromCallSiteList_closure+1;
         const GHC.Exts.$fIsListCallStack1_closure+2;
         const GHC.Stack.Types.getCallStack_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.161703004 UTC

[section ""data" . GHC.Exts.$fIsListVersion1_closure" {
     GHC.Exts.$fIsListVersion1_closure:
         const GHC.Exts.$fIsListVersion1_info;
 },
 GHC.Exts.$fIsListVersion1_entry() //  [R3]
         { info_tbl: [(cftGd,
                       label: GHC.Exts.$fIsListVersion1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftGd: // global
           R2 = R3;
           call Data.Version.makeVersion_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.16240846 UTC

[section ""data" . GHC.Exts.$fIsListVersion_closure" {
     GHC.Exts.$fIsListVersion_closure:
         const GHC.Exts.C:IsList_con_info;
         const Data.Version.makeVersion_closure+1;
         const GHC.Exts.$fIsListVersion1_closure+2;
         const Data.Version.versionBranch_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.163082688 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromListN_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromListN_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromListN_entry() //  [R3]
         { info_tbl: [(cftGk,
                       label: GHC.Exts.$fIsListNonEmpty_$cfromListN_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftGk: // global
           R2 = R3;
           call GHC.Exts.$fIsListNonEmpty_$cfromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.163769023 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_closure" {
     GHC.Exts.$fIsListNonEmpty_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure+1;
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_closure+2;
         const GHC.Exts.$fIsListNonEmpty1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.164535006 UTC

[section ""data" . GHC.Exts.$fIsList[]1_closure" {
     GHC.Exts.$fIsList[]1_closure:
         const GHC.Exts.$fIsList[]1_info;
 },
 GHC.Exts.$fIsList[]1_entry() //  [R3]
         { info_tbl: [(cftGr,
                       label: GHC.Exts.$fIsList[]1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftGr: // global
           R2 = R3;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.165231097 UTC

[section ""data" . GHC.Exts.$fIsList[]_closure" {
     GHC.Exts.$fIsList[]_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Base.id_closure+1;
         const GHC.Exts.$fIsList[]1_closure+2;
         const GHC.Base.id_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.165837322 UTC

[section ""data" . GHC.Exts.maxTupleSize_closure" {
     GHC.Exts.maxTupleSize_closure:
         const GHC.Types.I#_con_info;
         const 62;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.166375246 UTC

[section ""cstring" . lvl1_rftgl_bytes" {
     lvl1_rftgl_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.167201658 UTC

[section ""data" . GHC.Exts.the2_closure" {
     GHC.Exts.the2_closure:
         const GHC.Exts.the2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the2_entry() //  [R1]
         { info_tbl: [(cftGC,
                       label: GHC.Exts.the2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftGC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftGD; else goto cftGE;
       cftGD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftGE: // global
           (_cftGx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftGx::I64 == 0) goto cftGz; else goto cftGy;
       cftGz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftGy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftGx::I64;
           I64[Sp - 24] = block_cftGA_info;
           R2 = lvl1_rftgl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftGA() //  [R1]
         { info_tbl: [(cftGA,
                       label: block_cftGA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftGA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.168226485 UTC

[section ""cstring" . lvl2_rftgm_bytes" {
     lvl2_rftgm_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,110,111,110,45,105,100,101,110,116,105,99,97,108,32,101,108,101,109,101,110,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.168985644 UTC

[section ""data" . GHC.Exts.the1_closure" {
     GHC.Exts.the1_closure:
         const GHC.Exts.the1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the1_entry() //  [R1]
         { info_tbl: [(cftGQ,
                       label: GHC.Exts.the1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftGQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftGR; else goto cftGS;
       cftGR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftGS: // global
           (_cftGL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftGL::I64 == 0) goto cftGN; else goto cftGM;
       cftGN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftGM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftGL::I64;
           I64[Sp - 24] = block_cftGO_info;
           R2 = lvl2_rftgm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftGO() //  [R1]
         { info_tbl: [(cftGO,
                       label: block_cftGO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftGO: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.170660594 UTC

[section ""data" . GHC.Exts.the_closure" {
     GHC.Exts.the_closure:
         const GHC.Exts.the_info;
         const 0;
 },
 sat_sfthS_entry() //  [R1]
         { info_tbl: [(cftHa,
                       label: sat_sfthS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftHa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftHb; else goto cftHc;
       cftHb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftHc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.the_entry() //  [R2, R3]
         { info_tbl: [(cftHh,
                       label: GHC.Exts.the_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftHh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftHi; else goto cftHj;
       cftHi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.the_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftHj: // global
           I64[Sp - 16] = block_cftH0_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftHB; else goto cftH1;
       uftHB: // global
           call _cftH0(R1) args: 0, res: 0, upd: 0;
       cftH1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftH0() //  [R1]
         { info_tbl: [(cftH0,
                       label: block_cftH0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftH0: // global
           if (R1 & 7 == 1) goto cftHe; else goto cftHf;
       cftHe: // global
           R1 = GHC.Exts.the2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cftHf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cftHp; else goto cftHo;
       cftHp: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftHo: // global
           _sfthQ::P64 = P64[R1 + 6];
           _sfthR::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sfthS_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sfthQ::P64;
           I64[Sp] = block_cftHm_info;
           R3 = _sfthR::P64;
           R2 = Hp - 24;
           P64[Sp + 8] = _sfthQ::P64;
           call GHC.List.all_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftHm() //  [R1]
         { info_tbl: [(cftHm,
                       label: block_cftHm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftHm: // global
           if (R1 & 7 == 1) goto cftHv; else goto cftHz;
       cftHv: // global
           R1 = GHC.Exts.the1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cftHz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.172731617 UTC

[section ""data" . GHC.Exts.sortWith_closure" {
     GHC.Exts.sortWith_closure:
         const GHC.Exts.sortWith_info;
 },
 sat_sfti1_entry() //  [R1, R2, R3]
         { info_tbl: [(cftHN,
                       label: sat_sfti1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftHN: // global
           _sfthY::P64 = R3;
           _sfthX::P64 = R2;
           _sfti1::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cftHO; else goto cftHP;
       cftHP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cftHR; else goto cftHQ;
       cftHR: // global
           HpAlloc = 64;
           goto cftHO;
       cftHO: // global
           R3 = _sfthY::P64;
           R2 = _sfthX::P64;
           R1 = _sfti1::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftHQ: // global
           _sfthU::P64 = P64[_sfti1::P64 + 6];
           _sfthV::P64 = P64[_sfti1::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sfthV::P64;
           P64[Hp - 32] = _sfthY::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfthV::P64;
           P64[Hp] = _sfthX::P64;
           R2 = _sfthU::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 GHC.Exts.sortWith_entry() //  [R2, R3, R4]
         { info_tbl: [(cftHS,
                       label: GHC.Exts.sortWith_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftHS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftHW; else goto cftHV;
       cftHW: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.sortWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftHV: // global
           I64[Hp - 16] = sat_sfti1_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 14;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.175414023 UTC

[section ""data" . GHC.Exts.groupByFB_closure" {
     GHC.Exts.groupByFB_closure:
         const GHC.Exts.groupByFB_info;
 },
 ds1_sftib_entry() //  [R1]
         { info_tbl: [(cftIk,
                       label: ds1_sftib_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftIk: // global
           _sftib::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cftIl; else goto cftIm;
       cftIm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cftIo; else goto cftIn;
       cftIo: // global
           HpAlloc = 32;
           goto cftIl;
       cftIl: // global
           R1 = _sftib::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftIn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sftib::P64;
           _sfti4::P64 = P64[_sftib::P64 + 16];
           _sfti9::P64 = P64[_sftib::P64 + 24];
           _sftia::P64 = P64[_sftib::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfti4::P64;
           P64[Hp] = _sfti9::P64;
           I64[Sp - 24] = block_cftIh_info;
           R3 = _sftia::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftIh() //  [R1, R2]
         { info_tbl: [(cftIh,
                       label: block_cftIh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftIh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftIr; else goto cftIq;
       cftIr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cftIq: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftio_entry() //  [R1]
         { info_tbl: [(cftIz,
                       label: sat_sftio_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftIz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftIA; else goto cftIB;
       cftIA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftIB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cftIw_info;
           _sfti6::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sfti6::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uftIF; else goto cftIx;
       uftIF: // global
           call _cftIw(R1) args: 0, res: 0, upd: 0;
       cftIx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cftIw() //  [R1]
         { info_tbl: [(cftIw,
                       label: block_cftIw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftIw: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sfti6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 groupByFBCore_sfti6_entry() //  [R1, R2]
         { info_tbl: [(cftIK,
                       label: groupByFBCore_sfti6_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftIK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cftIL; else goto cftIM;
       cftIL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftIM: // global
           I64[Sp - 40] = block_cftI6_info;
           _sfti6::P64 = R1;
           _sfti2::P64 = P64[R1 + 7];
           _sfti3::P64 = P64[R1 + 15];
           _sfti4::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sfti2::P64;
           P64[Sp - 24] = _sfti3::P64;
           P64[Sp - 16] = _sfti4::P64;
           P64[Sp - 8] = _sfti6::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uftIU; else goto cftI7;
       uftIU: // global
           call _cftI6(R1) args: 0, res: 0, upd: 0;
       cftI7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftI6() //  [R1]
         { info_tbl: [(cftI6,
                       label: block_cftI6_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftI6: // global
           if (R1 & 7 == 1) goto cftIH; else goto cftII;
       cftIH: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cftII: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cftIT; else goto cftIS;
       cftIT: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftIS: // global
           _sfti9::P64 = P64[R1 + 6];
           _sftia::P64 = P64[R1 + 14];
           I64[Hp - 112] = ds1_sftib_info;
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = _sfti9::P64;
           P64[Hp - 80] = _sftia::P64;
           I64[Hp - 72] = sat_sftio_info;
           P64[Hp - 56] = P64[Sp + 32];
           _cftIc::P64 = Hp - 112;
           P64[Hp - 48] = _cftIc::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cftIc::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sfti9::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 72;
           R2 = Hp - 14;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exts.groupByFB_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(cftIV,
                       label: GHC.Exts.groupByFB_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftIV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cftIZ; else goto cftIY;
       cftIZ: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.groupByFB_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftIY: // global
           I64[Hp - 24] = groupByFBCore_sfti6_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = R5;
           R1 = Hp - 23;
           call groupByFBCore_sfti6_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.179602758 UTC

[section ""data" . GHC.Exts.groupWith_closure" {
     GHC.Exts.groupWith_closure:
         const GHC.Exts.groupWith_info;
 },
 $dEq_sftis_entry() //  [R1]
         { info_tbl: [(cftJ8,
                       label: $dEq_sftis_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftJ8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftJ9; else goto cftJa;
       cftJ9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftJa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftiC_entry() //  [R1, R2]
         { info_tbl: [(cftJx,
                       label: sat_sftiC_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftJx: // global
           _sftiA::P64 = R2;
           _sftiC::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cftJy; else goto cftJz;
       cftJz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cftJB; else goto cftJA;
       cftJB: // global
           HpAlloc = 32;
           goto cftJy;
       cftJy: // global
           R2 = _sftiA::P64;
           R1 = _sftiC::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftJA: // global
           _sftiq::P64 = P64[_sftiC::P64 + 7];
           _sftis::P64 = P64[_sftiC::P64 + 15];
           _sftiz::P64 = P64[_sftiC::P64 + 23];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sftiq::P64;
           P64[Hp] = _sftiA::P64;
           R2 = _sftis::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sftiz::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 ds1_sftiy_entry() //  [R1]
         { info_tbl: [(cftJF,
                       label: ds1_sftiy_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftJF: // global
           _sftiy::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cftJG; else goto cftJH;
       cftJH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cftJJ; else goto cftJI;
       cftJJ: // global
           HpAlloc = 64;
           goto cftJG;
       cftJG: // global
           R1 = _sftiy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftJI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sftiy::P64;
           _sftiq::P64 = P64[_sftiy::P64 + 16];
           _sftis::P64 = P64[_sftiy::P64 + 24];
           _sftiw::P64 = P64[_sftiy::P64 + 32];
           _sftix::P64 = P64[_sftiy::P64 + 40];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sftiq::P64;
           P64[Hp - 32] = _sftiw::P64;
           I64[Hp - 24] = sat_sftiC_info;
           P64[Hp - 16] = _sftiq::P64;
           P64[Hp - 8] = _sftis::P64;
           P64[Hp] = Hp - 56;
           I64[Sp - 24] = block_cftJC_info;
           R3 = _sftix::P64;
           R2 = Hp - 23;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftJC() //  [R1, R2]
         { info_tbl: [(cftJC,
                       label: block_cftJC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftJC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftJM; else goto cftJL;
       cftJM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cftJL: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftiO_entry() //  [R1]
         { info_tbl: [(cftJU,
                       label: sat_sftiO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftJU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftJV; else goto cftJW;
       cftJV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftJW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cftJR_info;
           _sftit::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sftit::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uftK0; else goto cftJS;
       uftK0: // global
           call _cftJR(R1) args: 0, res: 0, upd: 0;
       cftJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cftJR() //  [R1]
         { info_tbl: [(cftJR,
                       label: block_cftJR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftJR: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sftit_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 groupByFBCore_sftit_entry() //  [R1, R2]
         { info_tbl: [(cftK5,
                       label: groupByFBCore_sftit_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftK5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftK6; else goto cftK7;
       cftK6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftK7: // global
           I64[Sp - 32] = block_cftJg_info;
           _sftit::P64 = R1;
           _sftiq::P64 = P64[R1 + 7];
           _sftis::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sftiq::P64;
           P64[Sp - 16] = _sftis::P64;
           P64[Sp - 8] = _sftit::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uftKg; else goto cftJh;
       uftKg: // global
           call _cftJg(R1) args: 0, res: 0, upd: 0;
       cftJh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftJg() //  [R1]
         { info_tbl: [(cftJg,
                       label: block_cftJg_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftJg: // global
           if (R1 & 7 == 1) goto cftK2; else goto cftK3;
       cftK2: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cftK3: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cftKf; else goto cftKe;
       cftKf: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftKe: // global
           _sftiw::P64 = P64[R1 + 6];
           _sftix::P64 = P64[R1 + 14];
           I64[Hp - 144] = ds1_sftiy_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = _sftiw::P64;
           P64[Hp - 104] = _sftix::P64;
           I64[Hp - 96] = sat_sftiO_info;
           P64[Hp - 80] = P64[Sp + 24];
           _cftJm::P64 = Hp - 144;
           P64[Hp - 72] = _cftJm::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cftJm::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sftiw::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exts.groupWith_entry() //  [R2, R3, R4]
         { info_tbl: [(cftKj,
                       label: GHC.Exts.groupWith_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftKj: // global
           _sftir::P64 = R4;
           _sftiq::P64 = R3;
           _sftip::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cftKk; else goto cftKl;
       cftKl: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cftKn; else goto cftKm;
       cftKn: // global
           HpAlloc = 48;
           goto cftKk;
       cftKk: // global
           R4 = _sftir::P64;
           R3 = _sftiq::P64;
           R2 = _sftip::P64;
           R1 = GHC.Exts.groupWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftKm: // global
           I64[Hp - 40] = $dEq_sftis_info;
           P64[Hp - 24] = _sftip::P64;
           I64[Hp - 16] = groupByFBCore_sftit_info;
           P64[Hp - 8] = _sftiq::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 16] = block_cftKh_info;
           R4 = _sftir::P64;
           R3 = _sftiq::P64;
           R2 = _sftip::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exts.sortWith_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftKh() //  [R1]
         { info_tbl: [(cftKh,
                       label: block_cftKh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftKh: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sftit_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.18336868 UTC

[section ""data" . GHC.Exts.traceEvent_closure" {
     GHC.Exts.traceEvent_closure:
         const GHC.Exts.traceEvent_info;
         const 0;
 },
 GHC.Exts.traceEvent_entry() //  [R2]
         { info_tbl: [(cftKv,
                       label: GHC.Exts.traceEvent_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftKv: // global
           R2 = R2;
           call Debug.Trace.traceEventIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.184060166 UTC

[section ""cstring" . GHC.Exts.$fDataSpecConstrAnnotation7_bytes" {
     GHC.Exts.$fDataSpecConstrAnnotation7_bytes:
         I8[] [83,112,101,99,67,111,110,115,116,114,65,110,110,111,116,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.184804425 UTC

[section ""data" . $tSpecConstrAnnotation1_rftgn_closure" {
     $tSpecConstrAnnotation1_rftgn_closure:
         const $tSpecConstrAnnotation1_rftgn_info;
         const 0;
         const 0;
         const 0;
 },
 $tSpecConstrAnnotation1_rftgn_entry() //  [R1]
         { info_tbl: [(cftKE,
                       label: $tSpecConstrAnnotation1_rftgn_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftKE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftKF; else goto cftKG;
       cftKF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftKG: // global
           (_cftKB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftKB::I64 == 0) goto cftKD; else goto cftKC;
       cftKD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftKC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftKB::I64;
           R2 = GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.185968361 UTC

[section ""cstring" . w1_rftgo_bytes" {
     w1_rftgo_bytes:
         I8[] [70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.186718089 UTC

[section ""data" . w2_rftgp_closure" {
     w2_rftgp_closure:
         const w2_rftgp_info;
         const 0;
         const 0;
         const 0;
 },
 w2_rftgp_entry() //  [R1]
         { info_tbl: [(cftKN,
                       label: w2_rftgp_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftKN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftKO; else goto cftKP;
       cftKO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftKP: // global
           (_cftKK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftKK::I64 == 0) goto cftKM; else goto cftKL;
       cftKM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftKL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftKK::I64;
           R2 = w1_rftgo_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.18759613 UTC

[section ""cstring" . w3_rftgq_bytes" {
     w3_rftgq_bytes:
         I8[] [78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.189875332 UTC

[section ""data" . w4_rftgr_closure" {
     w4_rftgr_closure:
         const w4_rftgr_info;
         const 0;
         const 0;
         const 0;
 },
 w4_rftgr_entry() //  [R1]
         { info_tbl: [(cftKW,
                       label: w4_rftgr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftKW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftKX; else goto cftKY;
       cftKX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftKY: // global
           (_cftKT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftKT::I64 == 0) goto cftKV; else goto cftKU;
       cftKV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftKU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftKT::I64;
           R2 = w3_rftgq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.191630943 UTC

[section ""data" . go61_rftgs_closure" {
     go61_rftgs_closure:
         const go61_rftgs_info;
         const 0;
 },
 go61_rftgs_entry() //  [R2, R3]
         { info_tbl: [(cftLa,
                       label: go61_rftgs_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftLa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftLb; else goto uftLO;
       cftLb: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rftgs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       uftLO: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cftL0() args: 0, res: 0, upd: 0;
     }
 },
 _cftL0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftL0: // global
           _sftiQ::P64 = P64[Sp];
           I64[Sp] = block_cftL3_info;
           R1 = _sftiQ::P64;
           if (R1 & 7 != 0) goto uftLS; else goto cftL4;
       uftLS: // global
           call _cftL3(R1) args: 0, res: 0, upd: 0;
       cftL4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftL3() //  [R1]
         { info_tbl: [(cftL3,
                       label: block_cftL3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftL3: // global
           if (R1 & 7 == 1) goto uftLP; else goto cftL8;
       uftLP: // global
           Sp = Sp + 16;
           call _cftLq() args: 0, res: 0, upd: 0;
       cftL8: // global
           I64[Sp - 8] = block_cftLi_info;
           _sftiT::P64 = P64[R1 + 6];
           _sftiU::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sftiU::P64;
           P64[Sp + 8] = _sftiT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftLT; else goto cftLk;
       uftLT: // global
           call _cftLi(R1) args: 0, res: 0, upd: 0;
       cftLk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftLi() //  [R1]
         { info_tbl: [(cftLi,
                       label: block_cftLi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftLi: // global
           if (R1 & 7 == 1) goto uftLQ; else goto cftLv;
       uftLQ: // global
           Sp = Sp + 24;
           call _cftLq() args: 0, res: 0, upd: 0;
       cftLv: // global
           I64[Sp - 8] = block_cftLt_info;
           _sftiW::P64 = P64[R1 + 6];
           _sftiX::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sftiX::P64;
           P64[Sp + 16] = _sftiW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftLW; else goto cftLw;
       uftLW: // global
           call _cftLt(R1) args: 0, res: 0, upd: 0;
       cftLw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftLq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftLq: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftLt() //  [R1]
         { info_tbl: [(cftLt,
                       label: block_cftLt_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftLt: // global
           I64[Sp] = block_cftLA_info;
           R3 = w2_rftgp_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftLA() //  [R1]
         { info_tbl: [(cftLA,
                       label: block_cftLA_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftLA: // global
           if (R1 & 7 == 1) goto cftLH; else goto cftLL;
       cftLH: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cftL0() args: 0, res: 0, upd: 0;
       cftLL: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.194507231 UTC

[section ""data" . go1_rftgt_closure" {
     go1_rftgt_closure:
         const go1_rftgt_info;
         const 0;
 },
 go1_rftgt_entry() //  [R2, R3]
         { info_tbl: [(cftMa,
                       label: go1_rftgt_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftMa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftMb; else goto uftMO;
       cftMb: // global
           R3 = R3;
           R2 = R2;
           R1 = go1_rftgt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       uftMO: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cftM0() args: 0, res: 0, upd: 0;
     }
 },
 _cftM0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftM0: // global
           _sftj5::P64 = P64[Sp];
           I64[Sp] = block_cftM3_info;
           R1 = _sftj5::P64;
           if (R1 & 7 != 0) goto uftMS; else goto cftM4;
       uftMS: // global
           call _cftM3(R1) args: 0, res: 0, upd: 0;
       cftM4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftM3() //  [R1]
         { info_tbl: [(cftM3,
                       label: block_cftM3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftM3: // global
           if (R1 & 7 == 1) goto uftMP; else goto cftM8;
       uftMP: // global
           Sp = Sp + 16;
           call _cftMq() args: 0, res: 0, upd: 0;
       cftM8: // global
           I64[Sp - 8] = block_cftMi_info;
           _sftj8::P64 = P64[R1 + 6];
           _sftj9::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sftj9::P64;
           P64[Sp + 8] = _sftj8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftMT; else goto cftMk;
       uftMT: // global
           call _cftMi(R1) args: 0, res: 0, upd: 0;
       cftMk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftMi() //  [R1]
         { info_tbl: [(cftMi,
                       label: block_cftMi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftMi: // global
           if (R1 & 7 == 1) goto uftMQ; else goto cftMv;
       uftMQ: // global
           Sp = Sp + 24;
           call _cftMq() args: 0, res: 0, upd: 0;
       cftMv: // global
           I64[Sp - 8] = block_cftMt_info;
           _sftjb::P64 = P64[R1 + 6];
           _sftjc::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sftjc::P64;
           P64[Sp + 16] = _sftjb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftMW; else goto cftMw;
       uftMW: // global
           call _cftMt(R1) args: 0, res: 0, upd: 0;
       cftMw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftMq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftMq: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftMt() //  [R1]
         { info_tbl: [(cftMt,
                       label: block_cftMt_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftMt: // global
           I64[Sp] = block_cftMA_info;
           R3 = w4_rftgr_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftMA() //  [R1]
         { info_tbl: [(cftMA,
                       label: block_cftMA_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftMA: // global
           if (R1 & 7 == 1) goto cftMH; else goto cftML;
       cftMH: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cftM0() args: 0, res: 0, upd: 0;
       cftML: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.196941703 UTC

[section ""data" . $cForceSpecConstr1_rftgu_closure" {
     $cForceSpecConstr1_rftgu_closure:
         const Data.Data.AlgConstr_con_info;
         const $cForceSpecConstr2_rftgA_closure;
         const 0;
 },
 section ""data" . $cNoSpecConstr1_rftgv_closure" {
     $cNoSpecConstr1_rftgv_closure:
         const Data.Data.AlgConstr_con_info;
         const $cNoSpecConstr2_rftgz_closure;
         const 0;
 },
 section ""data" . GHC.Exts.$cForceSpecConstr_closure" {
     GHC.Exts.$cForceSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cForceSpecConstr1_rftgu_closure+1;
         const w2_rftgp_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation2_rftgw_closure" {
     $tSpecConstrAnnotation2_rftgw_closure:
         const :_con_info;
         const GHC.Exts.$cForceSpecConstr_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation3_rftgx_closure" {
     $tSpecConstrAnnotation3_rftgx_closure:
         const :_con_info;
         const GHC.Exts.$cNoSpecConstr_closure+1;
         const $tSpecConstrAnnotation2_rftgw_closure+2;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation4_rftgy_closure" {
     $tSpecConstrAnnotation4_rftgy_closure:
         const Data.Data.AlgRep_con_info;
         const $tSpecConstrAnnotation3_rftgx_closure+2;
         const 0;
 },
 section ""data" . GHC.Exts.$tSpecConstrAnnotation_closure" {
     GHC.Exts.$tSpecConstrAnnotation_closure:
         const Data.Data.DataType_con_info;
         const $tSpecConstrAnnotation1_rftgn_closure;
         const $tSpecConstrAnnotation4_rftgy_closure+1;
         const 0;
 },
 section ""data" . GHC.Exts.$cNoSpecConstr_closure" {
     GHC.Exts.$cNoSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cNoSpecConstr1_rftgv_closure+1;
         const w4_rftgr_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $cNoSpecConstr2_rftgz_closure" {
     $cNoSpecConstr2_rftgz_closure:
         const $cNoSpecConstr2_rftgz_info;
         const 0;
         const 0;
         const 0;
 },
 $cNoSpecConstr2_rftgz_entry() //  [R1]
         { info_tbl: [(cftN5,
                       label: $cNoSpecConstr2_rftgz_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftN5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftN6; else goto cftN7;
       cftN6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftN7: // global
           (_cftN2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftN2::I64 == 0) goto cftN4; else goto cftN3;
       cftN4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftN3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftN2::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go1_rftgt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""data" . $cForceSpecConstr2_rftgA_closure" {
     $cForceSpecConstr2_rftgA_closure:
         const $cForceSpecConstr2_rftgA_info;
         const 0;
         const 0;
         const 0;
 },
 $cForceSpecConstr2_rftgA_entry() //  [R1]
         { info_tbl: [(cftNe,
                       label: $cForceSpecConstr2_rftgA_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftNe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftNf; else goto cftNg;
       cftNf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftNg: // global
           (_cftNb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftNb::I64 == 0) goto cftNd; else goto cftNc;
       cftNd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftNc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftNb::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go61_rftgs_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.198901341 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_entry() //  []
         { info_tbl: [(cftNl,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftNl: // global
           R1 = GHC.Exts.$tSpecConstrAnnotation_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.199864733 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_entry() //  [R2]
         { info_tbl: [(cftNz,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftNz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftNA; else goto cftNB;
       cftNA: // global
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftNB: // global
           I64[Sp - 8] = block_cftNs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftNI; else goto cftNt;
       uftNI: // global
           call _cftNs(R1) args: 0, res: 0, upd: 0;
       cftNt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftNs() //  [R1]
         { info_tbl: [(cftNs,
                       label: block_cftNs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftNs: // global
           if (R1 & 7 == 1) goto cftNw; else goto cftNx;
       cftNw: // global
           R1 = GHC.Exts.$cNoSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cftNx: // global
           R1 = GHC.Exts.$cForceSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.200888319 UTC

[section ""cstring" . GHC.Exts.$trModule4_bytes" {
     GHC.Exts.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.201493921 UTC

[section ""data" . GHC.Exts.$trModule3_closure" {
     GHC.Exts.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.202039888 UTC

[section ""cstring" . GHC.Exts.$trModule2_bytes" {
     GHC.Exts.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.202603955 UTC

[section ""data" . GHC.Exts.$trModule1_closure" {
     GHC.Exts.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.203185328 UTC

[section ""data" . GHC.Exts.$trModule_closure" {
     GHC.Exts.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Exts.$trModule3_closure+1;
         const GHC.Exts.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.203752675 UTC

[section ""data" . $krep_rftgB_closure" {
     $krep_rftgB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.204350095 UTC

[section ""data" . GHC.Exts.$tcIsList1_closure" {
     GHC.Exts.$tcIsList1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep_rftgB_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.204937941 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation6_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation6_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.205540721 UTC

[section ""data" . GHC.Exts.$tcSpecConstrAnnotation_closure" {
     GHC.Exts.$tcSpecConstrAnnotation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
         const GHC.Types.krep$*_closure;
         const 8217012571387563927;
         const 8545973142114271769;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.20613613 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr1_closure" {
     GHC.Exts.$tc'ForceSpecConstr1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exts.$tcSpecConstrAnnotation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.206715912 UTC

[section ""cstring" . GHC.Exts.$tc'NoSpecConstr2_bytes" {
     GHC.Exts.$tc'NoSpecConstr2_bytes:
         I8[] [39,78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.207251836 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr1_closure" {
     GHC.Exts.$tc'NoSpecConstr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'NoSpecConstr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.207837484 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr_closure" {
     GHC.Exts.$tc'NoSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'NoSpecConstr1_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 18402820579108170608;
         const 14598374581444186552;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.208434969 UTC

[section ""cstring" . GHC.Exts.$tc'ForceSpecConstr3_bytes" {
     GHC.Exts.$tc'ForceSpecConstr3_bytes:
         I8[] [39,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.209034033 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr2_closure" {
     GHC.Exts.$tc'ForceSpecConstr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'ForceSpecConstr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.209635934 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr_closure" {
     GHC.Exts.$tc'ForceSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr2_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 13715005538542947299;
         const 3802030838304098377;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.210786301 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation5_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation5_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation5_entry() //  [R1]
         { info_tbl: [(cftNU,
                       label: GHC.Exts.$fDataSpecConstrAnnotation5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftNU: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cftNV; else goto cftNW;
       cftNV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftNW: // global
           (_cftNM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftNM::I64 == 0) goto cftNO; else goto cftNN;
       cftNO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftNN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftNM::I64;
           I64[Sp - 24] = block_cftNP_info;
           R6 = 0;
           R5 = GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
           R4 = GHC.Exts.$trModule_closure+1;
           R3 = 8545973142114271769;
           R2 = 8217012571387563927;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _cftNP() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(cftNP,
                       label: block_cftNP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftNP: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cftNQ() args: 0, res: 0, upd: 0;
     }
 },
 _cftNQ() //  []
         { info_tbl: [(cftNQ,
                       label: block_cftNQ_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftNQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cftNZ; else goto cftNY;
       cftNZ: // global
           HpAlloc = 48;
           I64[Sp] = block_cftNQ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cftNY: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.212400631 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_entry() //  []
         { info_tbl: [(cftO6,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftO6: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.213151504 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation2_closure:
         const (,)_con_info;
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.213871538 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation1_closure:
         const (,)_con_info;
         const GHC.Exts.ForceSpecConstr_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.215547322 UTC

[section ""data" . GHC.Exts.$w$cgmapMp_closure" {
     GHC.Exts.$w$cgmapMp_closure:
         const GHC.Exts.$w$cgmapMp_info;
 },
 lvl3_sftjx_entry() //  [R1]
         { info_tbl: [(cftOh,
                       label: lvl3_sftjx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftOh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftOi; else goto cftOj;
       cftOi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftOj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftjG_entry() //  [R1, R2]
         { info_tbl: [(cftOw,
                       label: sat_sftjG_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftOw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftOx; else goto cftOy;
       cftOx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftOy: // global
           I64[Sp - 24] = block_cftOt_info;
           _sftjx::P64 = P64[R1 + 7];
           _sftjy::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sftjx::P64;
           P64[Sp - 8] = _sftjy::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uftOQ; else goto cftOu;
       uftOQ: // global
           call _cftOt(R1) args: 0, res: 0, upd: 0;
       cftOu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftOt() //  [R1]
         { info_tbl: [(cftOt,
                       label: block_cftOt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftOt: // global
           I64[Sp - 8] = block_cftOB_info;
           _sftjD::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sftjD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftOP; else goto cftOD;
       uftOP: // global
           call _cftOB(R1) args: 0, res: 0, upd: 0;
       cftOD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftOB() //  [R1]
         { info_tbl: [(cftOB,
                       label: block_cftOB_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftOB: // global
           if (R1 & 7 == 1) goto cftOJ; else goto cftON;
       cftOJ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cftON: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 sat_sftjA_entry() //  [R1]
         { info_tbl: [(cftP2,
                       label: sat_sftjA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftP2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftP3; else goto cftP4;
       cftP3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftP4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cftOV_info;
           _sftjy::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sftjy::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uftPb; else goto cftOW;
       uftPb: // global
           call _cftOV(R1) args: 0, res: 0, upd: 0;
       cftOW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cftOV() //  [R1]
         { info_tbl: [(cftOV,
                       label: block_cftOV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftOV: // global
           _sftjy::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftOZ; else goto cftP0;
       cftOZ: // global
           R2 = _sftjy::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cftP0: // global
           R2 = _sftjy::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.$w$cgmapMp_entry() //  [R2, R3]
         { info_tbl: [(cftPc,
                       label: GHC.Exts.$w$cgmapMp_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftPc: // global
           _sftjw::P64 = R3;
           _sftjv::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cftPd; else goto cftPe;
       cftPe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftPg; else goto cftPf;
       cftPg: // global
           HpAlloc = 24;
           goto cftPd;
       cftPd: // global
           R3 = _sftjw::P64;
           R2 = _sftjv::P64;
           R1 = GHC.Exts.$w$cgmapMp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftPf: // global
           I64[Hp - 16] = lvl3_sftjx_info;
           P64[Hp] = _sftjv::P64;
           I64[Sp - 24] = block_cftOk_info;
           R2 = _sftjv::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sftjw::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftOk() //  [R1]
         { info_tbl: [(cftOk,
                       label: block_cftOk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftOk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cftPj; else goto cftPi;
       cftPj: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftPi: // global
           I64[Hp - 48] = sat_sftjG_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sftjA_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.218373108 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_entry() //  [R2, R4]
         { info_tbl: [(cftPo,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftPo: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMp_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.219416753 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(cftPC,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftPC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftPD; else goto cftPE;
       cftPD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftPE: // global
           I64[Sp - 16] = block_cftPv_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftPL; else goto cftPw;
       uftPL: // global
           call _cftPv(R1) args: 0, res: 0, upd: 0;
       cftPw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftPv() //  [R1]
         { info_tbl: [(cftPv,
                       label: block_cftPv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftPv: // global
           _sftjK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftPz; else goto cftPA;
       cftPz: // global
           R2 = _sftjK::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.NoSpecConstr_closure+1;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
       cftPA: // global
           R2 = _sftjK::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.ForceSpecConstr_closure+2;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.220755039 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(cftPT,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftPT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftPU; else goto cftPV;
       cftPU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftPV: // global
           I64[Sp - 8] = block_cftPQ_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftPZ; else goto cftPR;
       uftPZ: // global
           call _cftPQ() args: 0, res: 0, upd: 0;
       cftPR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftPQ() //  []
         { info_tbl: [(cftPQ,
                       label: block_cftPQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftPQ: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.222061553 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_entry() //  [R2, R3,
                                                           R4, R5]
         { info_tbl: [(cftQ7,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftQ7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftQ8; else goto cftQ9;
       cftQ8: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftQ9: // global
           I64[Sp - 16] = block_cftQ4_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftQd; else goto cftQ5;
       uftQd: // global
           call _cftQ4() args: 0, res: 0, upd: 0;
       cftQ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftQ4() //  []
         { info_tbl: [(cftQ4,
                       label: block_cftQ4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftQ4: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.223303531 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_entry() //  [R2, R3]
         { info_tbl: [(cftQl,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftQl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftQm; else goto cftQn;
       cftQm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftQn: // global
           I64[Sp - 8] = block_cftQi_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftQr; else goto cftQj;
       uftQr: // global
           call _cftQi() args: 0, res: 0, upd: 0;
       cftQj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftQi() //  []
         { info_tbl: [(cftQi,
                       label: block_cftQi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftQi: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.224536028 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation3_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation3_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation3_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation3_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(cftQz,
                       label: GHC.Exts.$fDataSpecConstrAnnotation3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftQz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftQA; else goto cftQB;
       cftQA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftQB: // global
           I64[Sp - 16] = block_cftQw_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftQF; else goto cftQx;
       uftQF: // global
           call _cftQw() args: 0, res: 0, upd: 0;
       cftQx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftQw() //  []
         { info_tbl: [(cftQw,
                       label: block_cftQw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftQw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.226101916 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation4_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation4_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation4_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation4_entry() //  [R3]
         { info_tbl: [(cftQK,
                       label: GHC.Exts.$fDataSpecConstrAnnotation4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftQK: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.226902995 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_entry() //  []
         { info_tbl: [(cftQR,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftQR: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.22872328 UTC

[section ""data" . GHC.Exts.$w$cgmapMo_closure" {
     GHC.Exts.$w$cgmapMo_closure:
         const GHC.Exts.$w$cgmapMo_info;
 },
 lvl3_sftkb_entry() //  [R1]
         { info_tbl: [(cftR2,
                       label: lvl3_sftkb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftR2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftR3; else goto cftR4;
       cftR3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftR4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftkk_entry() //  [R1, R2]
         { info_tbl: [(cftRh,
                       label: sat_sftkk_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftRh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftRi; else goto cftRj;
       cftRi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftRj: // global
           I64[Sp - 24] = block_cftRe_info;
           _sftkb::P64 = P64[R1 + 7];
           _sftkc::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sftkb::P64;
           P64[Sp - 8] = _sftkc::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uftRB; else goto cftRf;
       uftRB: // global
           call _cftRe(R1) args: 0, res: 0, upd: 0;
       cftRf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftRe() //  [R1]
         { info_tbl: [(cftRe,
                       label: block_cftRe_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftRe: // global
           I64[Sp - 8] = block_cftRm_info;
           _sftkh::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sftkh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftRA; else goto cftRo;
       uftRA: // global
           call _cftRm(R1) args: 0, res: 0, upd: 0;
       cftRo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftRm() //  [R1]
         { info_tbl: [(cftRm,
                       label: block_cftRm_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftRm: // global
           if (R1 & 7 == 1) goto cftRu; else goto cftRy;
       cftRu: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cftRy: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 sat_sftke_entry() //  [R1]
         { info_tbl: [(cftRN,
                       label: sat_sftke_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftRN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cftRO; else goto cftRP;
       cftRO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftRP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cftRG_info;
           _sftkc::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sftkc::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uftRW; else goto cftRH;
       uftRW: // global
           call _cftRG(R1) args: 0, res: 0, upd: 0;
       cftRH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cftRG() //  [R1]
         { info_tbl: [(cftRG,
                       label: block_cftRG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftRG: // global
           _sftkc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftRK; else goto cftRL;
       cftRK: // global
           R2 = _sftkc::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cftRL: // global
           R2 = _sftkc::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.$w$cgmapMo_entry() //  [R2, R3]
         { info_tbl: [(cftRX,
                       label: GHC.Exts.$w$cgmapMo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftRX: // global
           _sftka::P64 = R3;
           _sftk9::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cftRY; else goto cftRZ;
       cftRZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftS1; else goto cftS0;
       cftS1: // global
           HpAlloc = 24;
           goto cftRY;
       cftRY: // global
           R3 = _sftka::P64;
           R2 = _sftk9::P64;
           R1 = GHC.Exts.$w$cgmapMo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftS0: // global
           I64[Hp - 16] = lvl3_sftkb_info;
           P64[Hp] = _sftk9::P64;
           I64[Sp - 24] = block_cftR5_info;
           R2 = _sftk9::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sftka::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cftR5() //  [R1]
         { info_tbl: [(cftR5,
                       label: block_cftR5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftR5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cftS4; else goto cftS3;
       cftS4: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftS3: // global
           I64[Hp - 48] = sat_sftkk_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sftke_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.231468064 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_entry() //  [R2, R4]
         { info_tbl: [(cftS9,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftS9: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.232202235 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_closure:
         const Data.Data.C:Data_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation5_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation4_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation3_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.232920585 UTC

[section ""cstring" . GHC.Exts.$tcIsList3_bytes" {
     GHC.Exts.$tcIsList3_bytes:
         I8[] [73,115,76,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.233511634 UTC

[section ""data" . GHC.Exts.$tcIsList2_closure" {
     GHC.Exts.$tcIsList2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tcIsList3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.234116661 UTC

[section ""data" . GHC.Exts.$tcIsList_closure" {
     GHC.Exts.$tcIsList_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tcIsList2_closure+1;
         const GHC.Exts.$tcIsList1_closure+4;
         const 17963880945977000500;
         const 13985778898022155754;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.234905677 UTC

[section ""data" . GHC.Exts.C:IsList_closure" {
     GHC.Exts.C:IsList_closure:
         const GHC.Exts.C:IsList_info;
 },
 GHC.Exts.C:IsList_entry() //  [R2, R3, R4]
         { info_tbl: [(cftSh,
                       label: GHC.Exts.C:IsList_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftSh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cftSl; else goto cftSk;
       cftSl: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.C:IsList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftSk: // global
           I64[Hp - 24] = GHC.Exts.C:IsList_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.235745849 UTC

[section ""data" . GHC.Exts.NoSpecConstr_closure" {
     GHC.Exts.NoSpecConstr_closure:
         const GHC.Exts.NoSpecConstr_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.238059101 UTC

[section ""data" . GHC.Exts.ForceSpecConstr_closure" {
     GHC.Exts.ForceSpecConstr_closure:
         const GHC.Exts.ForceSpecConstr_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.23873999 UTC

[GHC.Exts.C:IsList_con_entry() //  [R1]
         { info_tbl: [(cftSm,
                       label: GHC.Exts.C:IsList_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,67,58,73,115,76,105,115,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftSm: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.239430396 UTC

[section ""relreadonly" . GHC.Exts.SpecConstrAnnotation_closure_tbl" {
     GHC.Exts.SpecConstrAnnotation_closure_tbl:
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Exts.ForceSpecConstr_closure+2;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.240105504 UTC

[GHC.Exts.NoSpecConstr_con_entry() //  [R1]
         { info_tbl: [(cftSo,
                       label: GHC.Exts.NoSpecConstr_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,78,111,83,112,101,99,67,111,110,115,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftSo: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.240792412 UTC

[GHC.Exts.ForceSpecConstr_con_entry() //  [R1]
         { info_tbl: [(cftSq,
                       label: GHC.Exts.ForceSpecConstr_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftSq: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.24150632 UTC

[section ""relreadonly" . Sftlu_srt" {
     Sftlu_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
         const GHC.Exts.$fIsListNonEmpty2_closure;
         const Data.Data.$wlvl_closure;
         const GHC.Exts.$w$cgunfold_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
         const GHC.Exts.the_closure;
         const GHC.Exts.the1_closure;
         const GHC.Exts.the2_closure;
         const Debug.Trace.traceEventIO1_closure;
         const GHC.List.badHead_closure;
         const w2_rftgp_closure;
         const go61_rftgs_closure;
         const w4_rftgr_closure;
         const go1_rftgt_closure;
         const Data.Data.mkConstr1_closure;
         const $tSpecConstrAnnotation3_rftgx_closure;
         const GHC.Exts.$tSpecConstrAnnotation_closure;
         const GHC.Exts.$cNoSpecConstr_closure;
         const GHC.Exts.$cForceSpecConstr_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Maybe.fromJust1_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.242473603 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:11:11.243948957 UTC

[section ""data" . GHC.Exts.fromList_closure" {
     GHC.Exts.fromList_closure:
         const GHC.Exts.fromList_info;
 },
 GHC.Exts.fromList_entry() //  [R2]
         { info_tbl: [(cftSz,
                       label: GHC.Exts.fromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftSz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftSA; else goto cftSB;
       cftSA: // global
           R2 = R2;
           R1 = GHC.Exts.fromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftSB: // global
           I64[Sp - 8] = block_cftSw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftSF; else goto cftSx;
       uftSF: // global
           call _cftSw(R1) args: 0, res: 0, upd: 0;
       cftSx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftSw() //  [R1]
         { info_tbl: [(cftSw,
                       label: block_cftSw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftSw: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.249480755 UTC

[section ""data" . GHC.Exts.fromListN_closure" {
     GHC.Exts.fromListN_closure:
         const GHC.Exts.fromListN_info;
 },
 GHC.Exts.fromListN_entry() //  [R2]
         { info_tbl: [(cftSW,
                       label: GHC.Exts.fromListN_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftSW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftSX; else goto cftSY;
       cftSX: // global
           R2 = R2;
           R1 = GHC.Exts.fromListN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftSY: // global
           I64[Sp - 8] = block_cftST_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftT2; else goto cftSU;
       uftT2: // global
           call _cftST(R1) args: 0, res: 0, upd: 0;
       cftSU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftST() //  [R1]
         { info_tbl: [(cftST,
                       label: block_cftST_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftST: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.254592717 UTC

[section ""data" . GHC.Exts.toList_closure" {
     GHC.Exts.toList_closure:
         const GHC.Exts.toList_info;
 },
 GHC.Exts.toList_entry() //  [R2]
         { info_tbl: [(cftTj,
                       label: GHC.Exts.toList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftTj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftTk; else goto cftTl;
       cftTk: // global
           R2 = R2;
           R1 = GHC.Exts.toList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftTl: // global
           I64[Sp - 8] = block_cftTg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftTp; else goto cftTh;
       uftTp: // global
           call _cftTg(R1) args: 0, res: 0, upd: 0;
       cftTh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftTg() //  [R1]
         { info_tbl: [(cftTg,
                       label: block_cftTg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftTg: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.259934902 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty1_closure" {
     GHC.Exts.$fIsListNonEmpty1_closure:
         const GHC.Exts.$fIsListNonEmpty1_info;
 },
 GHC.Exts.$fIsListNonEmpty1_entry() //  [R2]
         { info_tbl: [(cftTG,
                       label: GHC.Exts.$fIsListNonEmpty1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftTG: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cftTK; else goto cftTJ;
       cftTK: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftTJ: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.263782496 UTC

[section ""cstring" . lvl_rftgk_bytes" {
     lvl_rftgk_bytes:
         I8[] [78,111,110,69,109,112,116,121,46,102,114,111,109,76,105,115,116,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.266099561 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty2_closure" {
     GHC.Exts.$fIsListNonEmpty2_closure:
         const GHC.Exts.$fIsListNonEmpty2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty2_entry() //  [R1]
         { info_tbl: [(cftU1,
                       label: GHC.Exts.$fIsListNonEmpty2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftU1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftU2; else goto cftU3;
       cftU2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cftU3: // global
           (_cftTW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cftTW::I64 == 0) goto cftTY; else goto cftTX;
       cftTY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cftTX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cftTW::I64;
           I64[Sp - 24] = block_cftTZ_info;
           R2 = lvl_rftgk_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cftTZ() //  [R1]
         { info_tbl: [(cftTZ,
                       label: block_cftTZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftTZ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.272838362 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromList_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromList_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromList_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromList_entry() //  [R2]
         { info_tbl: [(cftUs,
                       label: GHC.Exts.$fIsListNonEmpty_$cfromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftUs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cftUt; else goto cftUu;
       cftUt: // global
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cftUu: // global
           I64[Sp - 8] = block_cftUl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uftUE; else goto cftUm;
       uftUE: // global
           call _cftUl(R1) args: 0, res: 0, upd: 0;
       cftUm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftUl() //  [R1]
         { info_tbl: [(cftUl,
                       label: block_cftUl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftUl: // global
           if (R1 & 7 == 1) goto cftUp; else goto cftUq;
       cftUp: // global
           R1 = GHC.Exts.$fIsListNonEmpty2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cftUq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cftUD; else goto cftUC;
       cftUD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cftUC: // global
           _sfth4::P64 = P64[R1 + 6];
           _sfth5::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sfth4::P64;
           P64[Hp] = _sfth5::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.279975294 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c==_entry() //  [R2, R3]
         { info_tbl: [(cftV3,
                       label: GHC.Exts.$fEqSpecConstrAnnotation_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftV3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftV4; else goto cftV5;
       cftV4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftV5: // global
           I64[Sp - 16] = block_cftUW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftVI; else goto cftUX;
       uftVI: // global
           call _cftUW(R1) args: 0, res: 0, upd: 0;
       cftUX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftUW() //  [R1]
         { info_tbl: [(cftUW,
                       label: block_cftUW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftUW: // global
           _sfth7::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftV0; else goto cftV1;
       cftV0: // global
           I64[Sp + 8] = block_cftV8_info;
           R1 = _sfth7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftVG; else goto cftVa;
       uftVG: // global
           call _cftV8(R1) args: 0, res: 0, upd: 0;
       cftVa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftV1: // global
           I64[Sp + 8] = block_cftVn_info;
           R1 = _sfth7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftVH; else goto cftVp;
       uftVH: // global
           call _cftVn(R1) args: 0, res: 0, upd: 0;
       cftVp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftV8() //  [R1]
         { info_tbl: [(cftV8,
                       label: block_cftV8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftV8: // global
           if (R1 & 7 == 1) goto uftVE; else goto uftVF;
       uftVE: // global
           Sp = Sp + 8;
           call _cftVz() args: 0, res: 0, upd: 0;
       uftVF: // global
           Sp = Sp + 8;
           call _cftVv() args: 0, res: 0, upd: 0;
     }
 },
 _cftVn() //  [R1]
         { info_tbl: [(cftVn,
                       label: block_cftVn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftVn: // global
           if (R1 & 7 == 1) goto uftVC; else goto uftVD;
       uftVC: // global
           Sp = Sp + 8;
           call _cftVv() args: 0, res: 0, upd: 0;
       uftVD: // global
           Sp = Sp + 8;
           call _cftVz() args: 0, res: 0, upd: 0;
     }
 },
 _cftVv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftVv: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftVz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftVz: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.291165108 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c/=_entry() //  [R2, R3]
         { info_tbl: [(cftWr,
                       label: GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftWr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftWs; else goto cftWt;
       cftWs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cftWt: // global
           I64[Sp - 16] = block_cftWk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftX6; else goto cftWl;
       uftX6: // global
           call _cftWk(R1) args: 0, res: 0, upd: 0;
       cftWl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftWk() //  [R1]
         { info_tbl: [(cftWk,
                       label: block_cftWk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftWk: // global
           _sfthc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftWo; else goto cftWp;
       cftWo: // global
           I64[Sp + 8] = block_cftWw_info;
           R1 = _sfthc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftX4; else goto cftWy;
       uftX4: // global
           call _cftWw(R1) args: 0, res: 0, upd: 0;
       cftWy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftWp: // global
           I64[Sp + 8] = block_cftWL_info;
           R1 = _sfthc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uftX5; else goto cftWN;
       uftX5: // global
           call _cftWL(R1) args: 0, res: 0, upd: 0;
       cftWN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftWw() //  [R1]
         { info_tbl: [(cftWw,
                       label: block_cftWw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftWw: // global
           if (R1 & 7 == 1) goto uftX2; else goto uftX3;
       uftX2: // global
           Sp = Sp + 8;
           call _cftWX() args: 0, res: 0, upd: 0;
       uftX3: // global
           Sp = Sp + 8;
           call _cftWT() args: 0, res: 0, upd: 0;
     }
 },
 _cftWL() //  [R1]
         { info_tbl: [(cftWL,
                       label: block_cftWL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftWL: // global
           if (R1 & 7 == 1) goto uftX0; else goto uftX1;
       uftX0: // global
           Sp = Sp + 8;
           call _cftWT() args: 0, res: 0, upd: 0;
       uftX1: // global
           Sp = Sp + 8;
           call _cftWX() args: 0, res: 0, upd: 0;
     }
 },
 _cftWT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftWT: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftWX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftWX: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.301639558 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure+2;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.303989494 UTC

[section ""data" . GHC.Exts.$w$cgunfold_closure" {
     GHC.Exts.$w$cgunfold_closure:
         const GHC.Exts.$w$cgunfold_info;
         const 0;
 },
 GHC.Exts.$w$cgunfold_entry() //  [R2, R3, R4]
         { info_tbl: [(cftXQ,
                       label: GHC.Exts.$w$cgunfold_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftXQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cftXR; else goto cftXS;
       cftXR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$w$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftXS: // global
           I64[Sp - 24] = block_cftXJ_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uftYh; else goto cftXK;
       uftYh: // global
           call _cftXJ(R1) args: 0, res: 0, upd: 0;
       cftXK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftXJ() //  [R1]
         { info_tbl: [(cftXJ,
                       label: block_cftXJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftXJ: // global
           if (R1 & 7 == 1) goto cftXO; else goto cftXN;
       cftXO: // global
           I64[Sp] = block_cftY4_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uftYg; else goto cftY6;
       uftYg: // global
           call _cftY4(R1) args: 0, res: 0, upd: 0;
       cftY6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cftXN: // global
           _sfthi::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cftXV_info;
           R1 = _sfthi::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uftYf; else goto cftXX;
       uftYf: // global
           call _cftXV(R1) args: 0, res: 0, upd: 0;
       cftXX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftY4() //  [R1]
         { info_tbl: [(cftY4,
                       label: block_cftY4_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftY4: // global
           _sfthg::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 1) goto cftYe; else goto cftYd;
       cftYe: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sfthg::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cftYd: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sfthg::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cftXV() //  [R1]
         { info_tbl: [(cftXV,
                       label: block_cftXV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftXV: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Data.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.314803784 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_entry() //  [R2, R3,
                                                            R4]
         { info_tbl: [(cftYI,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftYI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftYJ; else goto cftYK;
       cftYJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftYK: // global
           I64[Sp - 16] = block_cftYF_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftYO; else goto cftYG;
       uftYO: // global
           call _cftYF(R1) args: 0, res: 0, upd: 0;
       cftYG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftYF() //  [R1]
         { info_tbl: [(cftYF,
                       label: block_cftYF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftYF: // global
           R4 = P64[R1 + 39];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Exts.$w$cgunfold_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.320495234 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(cftZ9,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftZ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cftZa; else goto cftZb;
       cftZa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cftZb: // global
           I64[Sp - 16] = block_cftZ2_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uftZi; else goto cftZ3;
       uftZi: // global
           call _cftZ2(R1) args: 0, res: 0, upd: 0;
       cftZ3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cftZ2() //  [R1]
         { info_tbl: [(cftZ2,
                       label: block_cftZ2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftZ2: // global
           _sfthC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cftZ6; else goto cftZ7;
       cftZ6: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sfthC::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cftZ7: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sfthC::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.326369277 UTC

[section ""data" . GHC.Exts.$dmfromListN_closure" {
     GHC.Exts.$dmfromListN_closure:
         const GHC.Exts.$dmfromListN_info;
 },
 GHC.Exts.$dmfromListN_entry() //  [R2]
         { info_tbl: [(cftZy,
                       label: GHC.Exts.$dmfromListN_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftZy: // global
           R2 = R2;
           call GHC.Exts.fromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.329659519 UTC

[section ""data" . GHC.Exts.$fIsListCallStack1_closure" {
     GHC.Exts.$fIsListCallStack1_closure:
         const GHC.Exts.$fIsListCallStack1_info;
 },
 GHC.Exts.$fIsListCallStack1_entry() //  [R3]
         { info_tbl: [(cftZJ,
                       label: GHC.Exts.$fIsListCallStack1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftZJ: // global
           R2 = R3;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.332769153 UTC

[section ""data" . GHC.Exts.$fIsListCallStack_closure" {
     GHC.Exts.$fIsListCallStack_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Stack.Types.fromCallSiteList_closure+1;
         const GHC.Exts.$fIsListCallStack1_closure+2;
         const GHC.Stack.Types.getCallStack_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.335012926 UTC

[section ""data" . GHC.Exts.$fIsListVersion1_closure" {
     GHC.Exts.$fIsListVersion1_closure:
         const GHC.Exts.$fIsListVersion1_info;
 },
 GHC.Exts.$fIsListVersion1_entry() //  [R3]
         { info_tbl: [(cftZV,
                       label: GHC.Exts.$fIsListVersion1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cftZV: // global
           R2 = R3;
           call Data.Version.makeVersion_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.338262834 UTC

[section ""data" . GHC.Exts.$fIsListVersion_closure" {
     GHC.Exts.$fIsListVersion_closure:
         const GHC.Exts.C:IsList_con_info;
         const Data.Version.makeVersion_closure+1;
         const GHC.Exts.$fIsListVersion1_closure+2;
         const Data.Version.versionBranch_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.340115378 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromListN_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromListN_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromListN_entry() //  [R3]
         { info_tbl: [(cfu07,
                       label: GHC.Exts.$fIsListNonEmpty_$cfromListN_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu07: // global
           R2 = R3;
           call GHC.Exts.$fIsListNonEmpty_$cfromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.344192225 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_closure" {
     GHC.Exts.$fIsListNonEmpty_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure+1;
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_closure+2;
         const GHC.Exts.$fIsListNonEmpty1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.346670504 UTC

[section ""data" . GHC.Exts.$fIsList[]1_closure" {
     GHC.Exts.$fIsList[]1_closure:
         const GHC.Exts.$fIsList[]1_info;
 },
 GHC.Exts.$fIsList[]1_entry() //  [R3]
         { info_tbl: [(cfu0j,
                       label: GHC.Exts.$fIsList[]1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu0j: // global
           R2 = R3;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.349854119 UTC

[section ""data" . GHC.Exts.$fIsList[]_closure" {
     GHC.Exts.$fIsList[]_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Base.id_closure+1;
         const GHC.Exts.$fIsList[]1_closure+2;
         const GHC.Base.id_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.351569392 UTC

[section ""data" . GHC.Exts.maxTupleSize_closure" {
     GHC.Exts.maxTupleSize_closure:
         const GHC.Types.I#_con_info;
         const 62;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.35319394 UTC

[section ""cstring" . lvl1_rftgl_bytes" {
     lvl1_rftgl_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.355208846 UTC

[section ""data" . GHC.Exts.the2_closure" {
     GHC.Exts.the2_closure:
         const GHC.Exts.the2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the2_entry() //  [R1]
         { info_tbl: [(cfu0B,
                       label: GHC.Exts.the2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu0B: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfu0C; else goto cfu0D;
       cfu0C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu0D: // global
           (_cfu0w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfu0w::I64 == 0) goto cfu0y; else goto cfu0x;
       cfu0y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfu0x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfu0w::I64;
           I64[Sp - 24] = block_cfu0z_info;
           R2 = lvl1_rftgl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cfu0z() //  [R1]
         { info_tbl: [(cfu0z,
                       label: block_cfu0z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu0z: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.361094631 UTC

[section ""cstring" . lvl2_rftgm_bytes" {
     lvl2_rftgm_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,110,111,110,45,105,100,101,110,116,105,99,97,108,32,101,108,101,109,101,110,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.36299637 UTC

[section ""data" . GHC.Exts.the1_closure" {
     GHC.Exts.the1_closure:
         const GHC.Exts.the1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the1_entry() //  [R1]
         { info_tbl: [(cfu10,
                       label: GHC.Exts.the1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu10: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfu11; else goto cfu12;
       cfu11: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu12: // global
           (_cfu0V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfu0V::I64 == 0) goto cfu0X; else goto cfu0W;
       cfu0X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfu0W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfu0V::I64;
           I64[Sp - 24] = block_cfu0Y_info;
           R2 = lvl2_rftgm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cfu0Y() //  [R1]
         { info_tbl: [(cfu0Y,
                       label: block_cfu0Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu0Y: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.369100136 UTC

[section ""data" . GHC.Exts.the_closure" {
     GHC.Exts.the_closure:
         const GHC.Exts.the_info;
         const 0;
 },
 sat_sfthS_entry() //  [R1]
         { info_tbl: [(cfu1u,
                       label: sat_sfthS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu1u: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu1v; else goto cfu1w;
       cfu1v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu1w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.the_entry() //  [R2, R3]
         { info_tbl: [(cfu1B,
                       label: GHC.Exts.the_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu1B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfu1C; else goto cfu1D;
       cfu1C: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.the_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfu1D: // global
           I64[Sp - 16] = block_cfu1k_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufu1V; else goto cfu1l;
       ufu1V: // global
           call _cfu1k(R1) args: 0, res: 0, upd: 0;
       cfu1l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu1k() //  [R1]
         { info_tbl: [(cfu1k,
                       label: block_cfu1k_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu1k: // global
           if (R1 & 7 == 1) goto cfu1y; else goto cfu1z;
       cfu1y: // global
           R1 = GHC.Exts.the2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfu1z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfu1J; else goto cfu1I;
       cfu1J: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfu1I: // global
           _sfthQ::P64 = P64[R1 + 6];
           _sfthR::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sfthS_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sfthQ::P64;
           I64[Sp] = block_cfu1G_info;
           R3 = _sfthR::P64;
           R2 = Hp - 24;
           P64[Sp + 8] = _sfthQ::P64;
           call GHC.List.all_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfu1G() //  [R1]
         { info_tbl: [(cfu1G,
                       label: block_cfu1G_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu1G: // global
           if (R1 & 7 == 1) goto cfu1P; else goto cfu1T;
       cfu1P: // global
           R1 = GHC.Exts.the1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfu1T: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.380468826 UTC

[section ""data" . GHC.Exts.sortWith_closure" {
     GHC.Exts.sortWith_closure:
         const GHC.Exts.sortWith_info;
 },
 sat_sfti1_entry() //  [R1, R2, R3]
         { info_tbl: [(cfu2t,
                       label: sat_sfti1_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu2t: // global
           _sfthY::P64 = R3;
           _sfthX::P64 = R2;
           _sfti1::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfu2u; else goto cfu2v;
       cfu2v: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfu2x; else goto cfu2w;
       cfu2x: // global
           HpAlloc = 64;
           goto cfu2u;
       cfu2u: // global
           R3 = _sfthY::P64;
           R2 = _sfthX::P64;
           R1 = _sfti1::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfu2w: // global
           _sfthU::P64 = P64[_sfti1::P64 + 6];
           _sfthV::P64 = P64[_sfti1::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sfthV::P64;
           P64[Hp - 32] = _sfthY::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfthV::P64;
           P64[Hp] = _sfthX::P64;
           R2 = _sfthU::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 GHC.Exts.sortWith_entry() //  [R2, R3, R4]
         { info_tbl: [(cfu2y,
                       label: GHC.Exts.sortWith_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu2y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfu2C; else goto cfu2B;
       cfu2C: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.sortWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfu2B: // global
           I64[Hp - 16] = sat_sfti1_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 14;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.388042927 UTC

[section ""data" . GHC.Exts.groupByFB_closure" {
     GHC.Exts.groupByFB_closure:
         const GHC.Exts.groupByFB_info;
 },
 ds1_sftib_entry() //  [R1]
         { info_tbl: [(cfu3a,
                       label: ds1_sftib_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu3a: // global
           _sftib::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfu3b; else goto cfu3c;
       cfu3c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfu3e; else goto cfu3d;
       cfu3e: // global
           HpAlloc = 32;
           goto cfu3b;
       cfu3b: // global
           R1 = _sftib::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu3d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sftib::P64;
           _sfti4::P64 = P64[_sftib::P64 + 16];
           _sfti9::P64 = P64[_sftib::P64 + 24];
           _sftia::P64 = P64[_sftib::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfti4::P64;
           P64[Hp] = _sfti9::P64;
           I64[Sp - 24] = block_cfu37_info;
           R3 = _sftia::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cfu37() //  [R1, R2]
         { info_tbl: [(cfu37,
                       label: block_cfu37_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu37: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfu3h; else goto cfu3g;
       cfu3h: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfu3g: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftio_entry() //  [R1]
         { info_tbl: [(cfu3p,
                       label: sat_sftio_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu3p: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu3q; else goto cfu3r;
       cfu3q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu3r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfu3m_info;
           _sfti6::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sfti6::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufu3v; else goto cfu3n;
       ufu3v: // global
           call _cfu3m(R1) args: 0, res: 0, upd: 0;
       cfu3n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cfu3m() //  [R1]
         { info_tbl: [(cfu3m,
                       label: block_cfu3m_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu3m: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sfti6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 groupByFBCore_sfti6_entry() //  [R1, R2]
         { info_tbl: [(cfu3A,
                       label: groupByFBCore_sfti6_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu3A: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfu3B; else goto cfu3C;
       cfu3B: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfu3C: // global
           I64[Sp - 40] = block_cfu2W_info;
           _sfti6::P64 = R1;
           _sfti2::P64 = P64[R1 + 7];
           _sfti3::P64 = P64[R1 + 15];
           _sfti4::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sfti2::P64;
           P64[Sp - 24] = _sfti3::P64;
           P64[Sp - 16] = _sfti4::P64;
           P64[Sp - 8] = _sfti6::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufu3K; else goto cfu2X;
       ufu3K: // global
           call _cfu2W(R1) args: 0, res: 0, upd: 0;
       cfu2X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu2W() //  [R1]
         { info_tbl: [(cfu2W,
                       label: block_cfu2W_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu2W: // global
           if (R1 & 7 == 1) goto cfu3x; else goto cfu3y;
       cfu3x: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfu3y: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cfu3J; else goto cfu3I;
       cfu3J: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfu3I: // global
           _sfti9::P64 = P64[R1 + 6];
           _sftia::P64 = P64[R1 + 14];
           I64[Hp - 112] = ds1_sftib_info;
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = _sfti9::P64;
           P64[Hp - 80] = _sftia::P64;
           I64[Hp - 72] = sat_sftio_info;
           P64[Hp - 56] = P64[Sp + 32];
           _cfu32::P64 = Hp - 112;
           P64[Hp - 48] = _cfu32::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cfu32::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sfti9::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 72;
           R2 = Hp - 14;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exts.groupByFB_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(cfu3L,
                       label: GHC.Exts.groupByFB_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu3L: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfu3P; else goto cfu3O;
       cfu3P: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.groupByFB_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfu3O: // global
           I64[Hp - 24] = groupByFBCore_sfti6_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = R5;
           R1 = Hp - 23;
           call groupByFBCore_sfti6_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.406235451 UTC

[section ""data" . GHC.Exts.groupWith_closure" {
     GHC.Exts.groupWith_closure:
         const GHC.Exts.groupWith_info;
 },
 $dEq_sftis_entry() //  [R1]
         { info_tbl: [(cfu4v,
                       label: $dEq_sftis_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu4v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfu4w; else goto cfu4x;
       cfu4w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu4x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftiC_entry() //  [R1, R2]
         { info_tbl: [(cfu4U,
                       label: sat_sftiC_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu4U: // global
           _sftiA::P64 = R2;
           _sftiC::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfu4V; else goto cfu4W;
       cfu4W: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfu4Y; else goto cfu4X;
       cfu4Y: // global
           HpAlloc = 32;
           goto cfu4V;
       cfu4V: // global
           R2 = _sftiA::P64;
           R1 = _sftiC::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfu4X: // global
           _sftiq::P64 = P64[_sftiC::P64 + 7];
           _sftis::P64 = P64[_sftiC::P64 + 15];
           _sftiz::P64 = P64[_sftiC::P64 + 23];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sftiq::P64;
           P64[Hp] = _sftiA::P64;
           R2 = _sftis::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sftiz::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 ds1_sftiy_entry() //  [R1]
         { info_tbl: [(cfu52,
                       label: ds1_sftiy_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu52: // global
           _sftiy::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfu53; else goto cfu54;
       cfu54: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfu56; else goto cfu55;
       cfu56: // global
           HpAlloc = 64;
           goto cfu53;
       cfu53: // global
           R1 = _sftiy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu55: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sftiy::P64;
           _sftiq::P64 = P64[_sftiy::P64 + 16];
           _sftis::P64 = P64[_sftiy::P64 + 24];
           _sftiw::P64 = P64[_sftiy::P64 + 32];
           _sftix::P64 = P64[_sftiy::P64 + 40];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sftiq::P64;
           P64[Hp - 32] = _sftiw::P64;
           I64[Hp - 24] = sat_sftiC_info;
           P64[Hp - 16] = _sftiq::P64;
           P64[Hp - 8] = _sftis::P64;
           P64[Hp] = Hp - 56;
           I64[Sp - 24] = block_cfu4Z_info;
           R3 = _sftix::P64;
           R2 = Hp - 23;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cfu4Z() //  [R1, R2]
         { info_tbl: [(cfu4Z,
                       label: block_cfu4Z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu4Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfu59; else goto cfu58;
       cfu59: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfu58: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftiO_entry() //  [R1]
         { info_tbl: [(cfu5h,
                       label: sat_sftiO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu5h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu5i; else goto cfu5j;
       cfu5i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu5j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfu5e_info;
           _sftit::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sftit::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufu5n; else goto cfu5f;
       ufu5n: // global
           call _cfu5e(R1) args: 0, res: 0, upd: 0;
       cfu5f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cfu5e() //  [R1]
         { info_tbl: [(cfu5e,
                       label: block_cfu5e_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu5e: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sftit_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 groupByFBCore_sftit_entry() //  [R1, R2]
         { info_tbl: [(cfu5s,
                       label: groupByFBCore_sftit_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu5s: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu5t; else goto cfu5u;
       cfu5t: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfu5u: // global
           I64[Sp - 32] = block_cfu4D_info;
           _sftit::P64 = R1;
           _sftiq::P64 = P64[R1 + 7];
           _sftis::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sftiq::P64;
           P64[Sp - 16] = _sftis::P64;
           P64[Sp - 8] = _sftit::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufu5D; else goto cfu4E;
       ufu5D: // global
           call _cfu4D(R1) args: 0, res: 0, upd: 0;
       cfu4E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu4D() //  [R1]
         { info_tbl: [(cfu4D,
                       label: block_cfu4D_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu4D: // global
           if (R1 & 7 == 1) goto cfu5p; else goto cfu5q;
       cfu5p: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfu5q: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cfu5C; else goto cfu5B;
       cfu5C: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfu5B: // global
           _sftiw::P64 = P64[R1 + 6];
           _sftix::P64 = P64[R1 + 14];
           I64[Hp - 144] = ds1_sftiy_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = _sftiw::P64;
           P64[Hp - 104] = _sftix::P64;
           I64[Hp - 96] = sat_sftiO_info;
           P64[Hp - 80] = P64[Sp + 24];
           _cfu4J::P64 = Hp - 144;
           P64[Hp - 72] = _cfu4J::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cfu4J::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sftiw::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exts.groupWith_entry() //  [R2, R3, R4]
         { info_tbl: [(cfu5G,
                       label: GHC.Exts.groupWith_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu5G: // global
           _sftir::P64 = R4;
           _sftiq::P64 = R3;
           _sftip::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cfu5H; else goto cfu5I;
       cfu5I: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfu5K; else goto cfu5J;
       cfu5K: // global
           HpAlloc = 48;
           goto cfu5H;
       cfu5H: // global
           R4 = _sftir::P64;
           R3 = _sftiq::P64;
           R2 = _sftip::P64;
           R1 = GHC.Exts.groupWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfu5J: // global
           I64[Hp - 40] = $dEq_sftis_info;
           P64[Hp - 24] = _sftip::P64;
           I64[Hp - 16] = groupByFBCore_sftit_info;
           P64[Hp - 8] = _sftiq::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 16] = block_cfu5E_info;
           R4 = _sftir::P64;
           R3 = _sftiq::P64;
           R2 = _sftip::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exts.sortWith_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfu5E() //  [R1]
         { info_tbl: [(cfu5E,
                       label: block_cfu5E_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu5E: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sftit_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.429839813 UTC

[section ""data" . GHC.Exts.traceEvent_closure" {
     GHC.Exts.traceEvent_closure:
         const GHC.Exts.traceEvent_info;
         const 0;
 },
 GHC.Exts.traceEvent_entry() //  [R2]
         { info_tbl: [(cfu6K,
                       label: GHC.Exts.traceEvent_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu6K: // global
           R2 = R2;
           call Debug.Trace.traceEventIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.432950179 UTC

[section ""cstring" . GHC.Exts.$fDataSpecConstrAnnotation7_bytes" {
     GHC.Exts.$fDataSpecConstrAnnotation7_bytes:
         I8[] [83,112,101,99,67,111,110,115,116,114,65,110,110,111,116,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.435059076 UTC

[section ""data" . $tSpecConstrAnnotation1_rftgn_closure" {
     $tSpecConstrAnnotation1_rftgn_closure:
         const $tSpecConstrAnnotation1_rftgn_info;
         const 0;
         const 0;
         const 0;
 },
 $tSpecConstrAnnotation1_rftgn_entry() //  [R1]
         { info_tbl: [(cfu6Y,
                       label: $tSpecConstrAnnotation1_rftgn_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu6Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfu6Z; else goto cfu70;
       cfu6Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu70: // global
           (_cfu6V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfu6V::I64 == 0) goto cfu6X; else goto cfu6W;
       cfu6X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfu6W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfu6V::I64;
           R2 = GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.438888589 UTC

[section ""cstring" . w1_rftgo_bytes" {
     w1_rftgo_bytes:
         I8[] [70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.44063122 UTC

[section ""data" . w2_rftgp_closure" {
     w2_rftgp_closure:
         const w2_rftgp_info;
         const 0;
         const 0;
         const 0;
 },
 w2_rftgp_entry() //  [R1]
         { info_tbl: [(cfu7f,
                       label: w2_rftgp_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu7f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfu7g; else goto cfu7h;
       cfu7g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu7h: // global
           (_cfu7c::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfu7c::I64 == 0) goto cfu7e; else goto cfu7d;
       cfu7e: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfu7d: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfu7c::I64;
           R2 = w1_rftgo_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.444377489 UTC

[section ""cstring" . w3_rftgq_bytes" {
     w3_rftgq_bytes:
         I8[] [78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.446570457 UTC

[section ""data" . w4_rftgr_closure" {
     w4_rftgr_closure:
         const w4_rftgr_info;
         const 0;
         const 0;
         const 0;
 },
 w4_rftgr_entry() //  [R1]
         { info_tbl: [(cfu7w,
                       label: w4_rftgr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu7w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfu7x; else goto cfu7y;
       cfu7x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfu7y: // global
           (_cfu7t::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfu7t::I64 == 0) goto cfu7v; else goto cfu7u;
       cfu7v: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfu7u: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfu7t::I64;
           R2 = w3_rftgq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.451121054 UTC

[section ""data" . go61_rftgs_closure" {
     go61_rftgs_closure:
         const go61_rftgs_info;
         const 0;
 },
 go61_rftgs_entry() //  [R2, R3]
         { info_tbl: [(cfu7R,
                       label: go61_rftgs_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu7R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu7S; else goto ufu8v;
       cfu7S: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rftgs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufu8v: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfu7H() args: 0, res: 0, upd: 0;
     }
 },
 _cfu7H() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu7H: // global
           _sftiQ::P64 = P64[Sp];
           I64[Sp] = block_cfu7K_info;
           R1 = _sftiQ::P64;
           if (R1 & 7 != 0) goto ufu8z; else goto cfu7L;
       ufu8z: // global
           call _cfu7K(R1) args: 0, res: 0, upd: 0;
       cfu7L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu7K() //  [R1]
         { info_tbl: [(cfu7K,
                       label: block_cfu7K_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu7K: // global
           if (R1 & 7 == 1) goto ufu8w; else goto cfu7P;
       ufu8w: // global
           Sp = Sp + 16;
           call _cfu87() args: 0, res: 0, upd: 0;
       cfu7P: // global
           I64[Sp - 8] = block_cfu7Z_info;
           _sftiT::P64 = P64[R1 + 6];
           _sftiU::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sftiU::P64;
           P64[Sp + 8] = _sftiT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufu8A; else goto cfu81;
       ufu8A: // global
           call _cfu7Z(R1) args: 0, res: 0, upd: 0;
       cfu81: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu7Z() //  [R1]
         { info_tbl: [(cfu7Z,
                       label: block_cfu7Z_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu7Z: // global
           if (R1 & 7 == 1) goto ufu8x; else goto cfu8c;
       ufu8x: // global
           Sp = Sp + 24;
           call _cfu87() args: 0, res: 0, upd: 0;
       cfu8c: // global
           I64[Sp - 8] = block_cfu8a_info;
           _sftiW::P64 = P64[R1 + 6];
           _sftiX::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sftiX::P64;
           P64[Sp + 16] = _sftiW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufu8D; else goto cfu8d;
       ufu8D: // global
           call _cfu8a(R1) args: 0, res: 0, upd: 0;
       cfu8d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu87() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu87: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfu8a() //  [R1]
         { info_tbl: [(cfu8a,
                       label: block_cfu8a_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu8a: // global
           I64[Sp] = block_cfu8h_info;
           R3 = w2_rftgp_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfu8h() //  [R1]
         { info_tbl: [(cfu8h,
                       label: block_cfu8h_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu8h: // global
           if (R1 & 7 == 1) goto cfu8o; else goto cfu8s;
       cfu8o: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfu7H() args: 0, res: 0, upd: 0;
       cfu8s: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.465833595 UTC

[section ""data" . go1_rftgt_closure" {
     go1_rftgt_closure:
         const go1_rftgt_info;
         const 0;
 },
 go1_rftgt_entry() //  [R2, R3]
         { info_tbl: [(cfu9p,
                       label: go1_rftgt_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu9p: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfu9q; else goto ufua3;
       cfu9q: // global
           R3 = R3;
           R2 = R2;
           R1 = go1_rftgt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufua3: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfu9f() args: 0, res: 0, upd: 0;
     }
 },
 _cfu9f() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu9f: // global
           _sftj5::P64 = P64[Sp];
           I64[Sp] = block_cfu9i_info;
           R1 = _sftj5::P64;
           if (R1 & 7 != 0) goto ufua7; else goto cfu9j;
       ufua7: // global
           call _cfu9i(R1) args: 0, res: 0, upd: 0;
       cfu9j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu9i() //  [R1]
         { info_tbl: [(cfu9i,
                       label: block_cfu9i_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu9i: // global
           if (R1 & 7 == 1) goto ufua4; else goto cfu9n;
       ufua4: // global
           Sp = Sp + 16;
           call _cfu9F() args: 0, res: 0, upd: 0;
       cfu9n: // global
           I64[Sp - 8] = block_cfu9x_info;
           _sftj8::P64 = P64[R1 + 6];
           _sftj9::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sftj9::P64;
           P64[Sp + 8] = _sftj8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufua8; else goto cfu9z;
       ufua8: // global
           call _cfu9x(R1) args: 0, res: 0, upd: 0;
       cfu9z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu9x() //  [R1]
         { info_tbl: [(cfu9x,
                       label: block_cfu9x_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu9x: // global
           if (R1 & 7 == 1) goto ufua5; else goto cfu9K;
       ufua5: // global
           Sp = Sp + 24;
           call _cfu9F() args: 0, res: 0, upd: 0;
       cfu9K: // global
           I64[Sp - 8] = block_cfu9I_info;
           _sftjb::P64 = P64[R1 + 6];
           _sftjc::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sftjc::P64;
           P64[Sp + 16] = _sftjb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuab; else goto cfu9L;
       ufuab: // global
           call _cfu9I(R1) args: 0, res: 0, upd: 0;
       cfu9L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfu9F() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu9F: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfu9I() //  [R1]
         { info_tbl: [(cfu9I,
                       label: block_cfu9I_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu9I: // global
           I64[Sp] = block_cfu9P_info;
           R3 = w4_rftgr_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfu9P() //  [R1]
         { info_tbl: [(cfu9P,
                       label: block_cfu9P_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfu9P: // global
           if (R1 & 7 == 1) goto cfu9W; else goto cfua0;
       cfu9W: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfu9f() args: 0, res: 0, upd: 0;
       cfua0: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.479049439 UTC

[section ""data" . $cForceSpecConstr1_rftgu_closure" {
     $cForceSpecConstr1_rftgu_closure:
         const Data.Data.AlgConstr_con_info;
         const $cForceSpecConstr2_rftgA_closure;
         const 0;
 },
 section ""data" . $cNoSpecConstr1_rftgv_closure" {
     $cNoSpecConstr1_rftgv_closure:
         const Data.Data.AlgConstr_con_info;
         const $cNoSpecConstr2_rftgz_closure;
         const 0;
 },
 section ""data" . GHC.Exts.$cForceSpecConstr_closure" {
     GHC.Exts.$cForceSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cForceSpecConstr1_rftgu_closure+1;
         const w2_rftgp_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation2_rftgw_closure" {
     $tSpecConstrAnnotation2_rftgw_closure:
         const :_con_info;
         const GHC.Exts.$cForceSpecConstr_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation3_rftgx_closure" {
     $tSpecConstrAnnotation3_rftgx_closure:
         const :_con_info;
         const GHC.Exts.$cNoSpecConstr_closure+1;
         const $tSpecConstrAnnotation2_rftgw_closure+2;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation4_rftgy_closure" {
     $tSpecConstrAnnotation4_rftgy_closure:
         const Data.Data.AlgRep_con_info;
         const $tSpecConstrAnnotation3_rftgx_closure+2;
         const 0;
 },
 section ""data" . GHC.Exts.$tSpecConstrAnnotation_closure" {
     GHC.Exts.$tSpecConstrAnnotation_closure:
         const Data.Data.DataType_con_info;
         const $tSpecConstrAnnotation1_rftgn_closure;
         const $tSpecConstrAnnotation4_rftgy_closure+1;
         const 0;
 },
 section ""data" . GHC.Exts.$cNoSpecConstr_closure" {
     GHC.Exts.$cNoSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cNoSpecConstr1_rftgv_closure+1;
         const w4_rftgr_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $cNoSpecConstr2_rftgz_closure" {
     $cNoSpecConstr2_rftgz_closure:
         const $cNoSpecConstr2_rftgz_info;
         const 0;
         const 0;
         const 0;
 },
 $cNoSpecConstr2_rftgz_entry() //  [R1]
         { info_tbl: [(cfuaS,
                       label: $cNoSpecConstr2_rftgz_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuaS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuaT; else goto cfuaU;
       cfuaT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuaU: // global
           (_cfuaP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuaP::I64 == 0) goto cfuaR; else goto cfuaQ;
       cfuaR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuaQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuaP::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go1_rftgt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""data" . $cForceSpecConstr2_rftgA_closure" {
     $cForceSpecConstr2_rftgA_closure:
         const $cForceSpecConstr2_rftgA_info;
         const 0;
         const 0;
         const 0;
 },
 $cForceSpecConstr2_rftgA_entry() //  [R1]
         { info_tbl: [(cfub1,
                       label: $cForceSpecConstr2_rftgA_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfub1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfub2; else goto cfub3;
       cfub2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfub3: // global
           (_cfuaY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuaY::I64 == 0) goto cfub0; else goto cfuaZ;
       cfub0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuaZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuaY::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go61_rftgs_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.492150501 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_entry() //  []
         { info_tbl: [(cfubu,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfubu: // global
           R1 = GHC.Exts.$tSpecConstrAnnotation_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.496071669 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_entry() //  [R2]
         { info_tbl: [(cfubN,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfubN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfubO; else goto cfubP;
       cfubO: // global
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfubP: // global
           I64[Sp - 8] = block_cfubG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufubW; else goto cfubH;
       ufubW: // global
           call _cfubG(R1) args: 0, res: 0, upd: 0;
       cfubH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfubG() //  [R1]
         { info_tbl: [(cfubG,
                       label: block_cfubG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfubG: // global
           if (R1 & 7 == 1) goto cfubK; else goto cfubL;
       cfubK: // global
           R1 = GHC.Exts.$cNoSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfubL: // global
           R1 = GHC.Exts.$cForceSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.501971682 UTC

[section ""cstring" . GHC.Exts.$trModule4_bytes" {
     GHC.Exts.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.503639536 UTC

[section ""data" . GHC.Exts.$trModule3_closure" {
     GHC.Exts.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.505355147 UTC

[section ""cstring" . GHC.Exts.$trModule2_bytes" {
     GHC.Exts.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.50701411 UTC

[section ""data" . GHC.Exts.$trModule1_closure" {
     GHC.Exts.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.508688649 UTC

[section ""data" . GHC.Exts.$trModule_closure" {
     GHC.Exts.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Exts.$trModule3_closure+1;
         const GHC.Exts.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.510501239 UTC

[section ""data" . $krep_rftgB_closure" {
     $krep_rftgB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.512255311 UTC

[section ""data" . GHC.Exts.$tcIsList1_closure" {
     GHC.Exts.$tcIsList1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep_rftgB_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.514455395 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation6_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation6_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.516168669 UTC

[section ""data" . GHC.Exts.$tcSpecConstrAnnotation_closure" {
     GHC.Exts.$tcSpecConstrAnnotation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
         const GHC.Types.krep$*_closure;
         const 8217012571387563927;
         const 8545973142114271769;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.518066632 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr1_closure" {
     GHC.Exts.$tc'ForceSpecConstr1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exts.$tcSpecConstrAnnotation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.520294908 UTC

[section ""cstring" . GHC.Exts.$tc'NoSpecConstr2_bytes" {
     GHC.Exts.$tc'NoSpecConstr2_bytes:
         I8[] [39,78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.522144824 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr1_closure" {
     GHC.Exts.$tc'NoSpecConstr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'NoSpecConstr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.524006906 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr_closure" {
     GHC.Exts.$tc'NoSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'NoSpecConstr1_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 18402820579108170608;
         const 14598374581444186552;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.526345146 UTC

[section ""cstring" . GHC.Exts.$tc'ForceSpecConstr3_bytes" {
     GHC.Exts.$tc'ForceSpecConstr3_bytes:
         I8[] [39,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.528060407 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr2_closure" {
     GHC.Exts.$tc'ForceSpecConstr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'ForceSpecConstr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.529830475 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr_closure" {
     GHC.Exts.$tc'ForceSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr2_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 13715005538542947299;
         const 3802030838304098377;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.532267966 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation5_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation5_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation5_entry() //  [R1]
         { info_tbl: [(cfucB,
                       label: GHC.Exts.$fDataSpecConstrAnnotation5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfucB: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfucC; else goto cfucD;
       cfucC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfucD: // global
           (_cfuct::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuct::I64 == 0) goto cfucv; else goto cfucu;
       cfucv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfucu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuct::I64;
           I64[Sp - 24] = block_cfucw_info;
           R6 = 0;
           R5 = GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
           R4 = GHC.Exts.$trModule_closure+1;
           R3 = 8545973142114271769;
           R2 = 8217012571387563927;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _cfucw() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(cfucw,
                       label: block_cfucw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfucw: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfucx() args: 0, res: 0, upd: 0;
     }
 },
 _cfucx() //  []
         { info_tbl: [(cfucx,
                       label: block_cfucx_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfucx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfucG; else goto cfucF;
       cfucG: // global
           HpAlloc = 48;
           I64[Sp] = block_cfucx_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfucF: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.54075862 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_entry() //  []
         { info_tbl: [(cfud6,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfud6: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.544025724 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation2_closure:
         const (,)_con_info;
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.545796432 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation1_closure:
         const (,)_con_info;
         const GHC.Exts.ForceSpecConstr_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.548662883 UTC

[section ""data" . GHC.Exts.$w$cgmapMp_closure" {
     GHC.Exts.$w$cgmapMp_closure:
         const GHC.Exts.$w$cgmapMp_info;
 },
 lvl3_sftjx_entry() //  [R1]
         { info_tbl: [(cfudo,
                       label: lvl3_sftjx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfudo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfudp; else goto cfudq;
       cfudp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfudq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftjG_entry() //  [R1, R2]
         { info_tbl: [(cfudD,
                       label: sat_sftjG_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfudD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfudE; else goto cfudF;
       cfudE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfudF: // global
           I64[Sp - 24] = block_cfudA_info;
           _sftjx::P64 = P64[R1 + 7];
           _sftjy::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sftjx::P64;
           P64[Sp - 8] = _sftjy::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufudX; else goto cfudB;
       ufudX: // global
           call _cfudA(R1) args: 0, res: 0, upd: 0;
       cfudB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfudA() //  [R1]
         { info_tbl: [(cfudA,
                       label: block_cfudA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfudA: // global
           I64[Sp - 8] = block_cfudI_info;
           _sftjD::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sftjD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufudW; else goto cfudK;
       ufudW: // global
           call _cfudI(R1) args: 0, res: 0, upd: 0;
       cfudK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfudI() //  [R1]
         { info_tbl: [(cfudI,
                       label: block_cfudI_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfudI: // global
           if (R1 & 7 == 1) goto cfudQ; else goto cfudU;
       cfudQ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfudU: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 sat_sftjA_entry() //  [R1]
         { info_tbl: [(cfue9,
                       label: sat_sftjA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfue9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuea; else goto cfueb;
       cfuea: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfueb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfue2_info;
           _sftjy::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sftjy::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuei; else goto cfue3;
       ufuei: // global
           call _cfue2(R1) args: 0, res: 0, upd: 0;
       cfue3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cfue2() //  [R1]
         { info_tbl: [(cfue2,
                       label: block_cfue2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfue2: // global
           _sftjy::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfue6; else goto cfue7;
       cfue6: // global
           R2 = _sftjy::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cfue7: // global
           R2 = _sftjy::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.$w$cgmapMp_entry() //  [R2, R3]
         { info_tbl: [(cfuej,
                       label: GHC.Exts.$w$cgmapMp_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuej: // global
           _sftjw::P64 = R3;
           _sftjv::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuek; else goto cfuel;
       cfuel: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuen; else goto cfuem;
       cfuen: // global
           HpAlloc = 24;
           goto cfuek;
       cfuek: // global
           R3 = _sftjw::P64;
           R2 = _sftjv::P64;
           R1 = GHC.Exts.$w$cgmapMp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuem: // global
           I64[Hp - 16] = lvl3_sftjx_info;
           P64[Hp] = _sftjv::P64;
           I64[Sp - 24] = block_cfudr_info;
           R2 = _sftjv::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sftjw::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfudr() //  [R1]
         { info_tbl: [(cfudr,
                       label: block_cfudr_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfudr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfueq; else goto cfuep;
       cfueq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuep: // global
           I64[Hp - 48] = sat_sftjG_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sftjA_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.567247649 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_entry() //  [R2, R4]
         { info_tbl: [(cfufb,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfufb: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMp_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.570899852 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(cfuft,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuft: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfufu; else goto cfufv;
       cfufu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfufv: // global
           I64[Sp - 16] = block_cfufm_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufufC; else goto cfufn;
       ufufC: // global
           call _cfufm(R1) args: 0, res: 0, upd: 0;
       cfufn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfufm() //  [R1]
         { info_tbl: [(cfufm,
                       label: block_cfufm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfufm: // global
           _sftjK::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfufq; else goto cfufr;
       cfufq: // global
           R2 = _sftjK::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.NoSpecConstr_closure+1;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
       cfufr: // global
           R2 = _sftjK::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.ForceSpecConstr_closure+2;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.577141029 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(cfufV,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfufV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfufW; else goto cfufX;
       cfufW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfufX: // global
           I64[Sp - 8] = block_cfufS_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufug1; else goto cfufT;
       ufug1: // global
           call _cfufS() args: 0, res: 0, upd: 0;
       cfufT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfufS() //  []
         { info_tbl: [(cfufS,
                       label: block_cfufS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfufS: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.582781268 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_entry() //  [R2, R3,
                                                           R4, R5]
         { info_tbl: [(cfugi,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfugi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfugj; else goto cfugk;
       cfugj: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfugk: // global
           I64[Sp - 16] = block_cfugf_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufugo; else goto cfugg;
       ufugo: // global
           call _cfugf() args: 0, res: 0, upd: 0;
       cfugg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfugf() //  []
         { info_tbl: [(cfugf,
                       label: block_cfugf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfugf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.588365442 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_entry() //  [R2, R3]
         { info_tbl: [(cfugF,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfugF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfugG; else goto cfugH;
       cfugG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfugH: // global
           I64[Sp - 8] = block_cfugC_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufugL; else goto cfugD;
       ufugL: // global
           call _cfugC() args: 0, res: 0, upd: 0;
       cfugD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfugC() //  []
         { info_tbl: [(cfugC,
                       label: block_cfugC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfugC: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.59532977 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation3_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation3_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation3_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation3_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(cfuh3,
                       label: GHC.Exts.$fDataSpecConstrAnnotation3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuh3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuh4; else goto cfuh5;
       cfuh4: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuh5: // global
           I64[Sp - 16] = block_cfuh0_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuh9; else goto cfuh1;
       ufuh9: // global
           call _cfuh0() args: 0, res: 0, upd: 0;
       cfuh1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuh0() //  []
         { info_tbl: [(cfuh0,
                       label: block_cfuh0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuh0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.600877795 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation4_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation4_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation4_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation4_entry() //  [R3]
         { info_tbl: [(cfuhn,
                       label: GHC.Exts.$fDataSpecConstrAnnotation4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuhn: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.604254142 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_entry() //  []
         { info_tbl: [(cfuhA,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuhA: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.608895922 UTC

[section ""data" . GHC.Exts.$w$cgmapMo_closure" {
     GHC.Exts.$w$cgmapMo_closure:
         const GHC.Exts.$w$cgmapMo_info;
 },
 lvl3_sftkb_entry() //  [R1]
         { info_tbl: [(cfuhQ,
                       label: lvl3_sftkb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuhQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuhR; else goto cfuhS;
       cfuhR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuhS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sftkk_entry() //  [R1, R2]
         { info_tbl: [(cfui5,
                       label: sat_sftkk_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfui5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfui6; else goto cfui7;
       cfui6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfui7: // global
           I64[Sp - 24] = block_cfui2_info;
           _sftkb::P64 = P64[R1 + 7];
           _sftkc::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sftkb::P64;
           P64[Sp - 8] = _sftkc::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufuip; else goto cfui3;
       ufuip: // global
           call _cfui2(R1) args: 0, res: 0, upd: 0;
       cfui3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfui2() //  [R1]
         { info_tbl: [(cfui2,
                       label: block_cfui2_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfui2: // global
           I64[Sp - 8] = block_cfuia_info;
           _sftkh::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sftkh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuio; else goto cfuic;
       ufuio: // global
           call _cfuia(R1) args: 0, res: 0, upd: 0;
       cfuic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuia() //  [R1]
         { info_tbl: [(cfuia,
                       label: block_cfuia_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuia: // global
           if (R1 & 7 == 1) goto cfuii; else goto cfuim;
       cfuii: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuim: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 sat_sftke_entry() //  [R1]
         { info_tbl: [(cfuiB,
                       label: sat_sftke_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuiB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuiC; else goto cfuiD;
       cfuiC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfuiu_info;
           _sftkc::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sftkc::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuiK; else goto cfuiv;
       ufuiK: // global
           call _cfuiu(R1) args: 0, res: 0, upd: 0;
       cfuiv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cfuiu() //  [R1]
         { info_tbl: [(cfuiu,
                       label: block_cfuiu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuiu: // global
           _sftkc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuiy; else goto cfuiz;
       cfuiy: // global
           R2 = _sftkc::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cfuiz: // global
           R2 = _sftkc::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.$w$cgmapMo_entry() //  [R2, R3]
         { info_tbl: [(cfuiL,
                       label: GHC.Exts.$w$cgmapMo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuiL: // global
           _sftka::P64 = R3;
           _sftk9::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuiM; else goto cfuiN;
       cfuiN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuiP; else goto cfuiO;
       cfuiP: // global
           HpAlloc = 24;
           goto cfuiM;
       cfuiM: // global
           R3 = _sftka::P64;
           R2 = _sftk9::P64;
           R1 = GHC.Exts.$w$cgmapMo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuiO: // global
           I64[Hp - 16] = lvl3_sftkb_info;
           P64[Hp] = _sftk9::P64;
           I64[Sp - 24] = block_cfuhT_info;
           R2 = _sftk9::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sftka::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfuhT() //  [R1]
         { info_tbl: [(cfuhT,
                       label: block_cfuhT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuhT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfuiS; else goto cfuiR;
       cfuiS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuiR: // global
           I64[Hp - 48] = sat_sftkk_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sftke_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.626741608 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_entry() //  [R2, R4]
         { info_tbl: [(cfujD,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfujD: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.631023179 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_closure:
         const Data.Data.C:Data_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation5_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation4_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation3_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.633176299 UTC

[section ""cstring" . GHC.Exts.$tcIsList3_bytes" {
     GHC.Exts.$tcIsList3_bytes:
         I8[] [73,115,76,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.635016057 UTC

[section ""data" . GHC.Exts.$tcIsList2_closure" {
     GHC.Exts.$tcIsList2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tcIsList3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.636762163 UTC

[section ""data" . GHC.Exts.$tcIsList_closure" {
     GHC.Exts.$tcIsList_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tcIsList2_closure+1;
         const GHC.Exts.$tcIsList1_closure+4;
         const 17963880945977000500;
         const 13985778898022155754;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.638889908 UTC

[section ""data" . GHC.Exts.C:IsList_closure" {
     GHC.Exts.C:IsList_closure:
         const GHC.Exts.C:IsList_info;
 },
 GHC.Exts.C:IsList_entry() //  [R2, R3, R4]
         { info_tbl: [(cfujT,
                       label: GHC.Exts.C:IsList_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfujT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfujX; else goto cfujW;
       cfujX: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.C:IsList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfujW: // global
           I64[Hp - 24] = GHC.Exts.C:IsList_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.64292635 UTC

[section ""data" . GHC.Exts.NoSpecConstr_closure" {
     GHC.Exts.NoSpecConstr_closure:
         const GHC.Exts.NoSpecConstr_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.64453353 UTC

[section ""data" . GHC.Exts.ForceSpecConstr_closure" {
     GHC.Exts.ForceSpecConstr_closure:
         const GHC.Exts.ForceSpecConstr_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.646354935 UTC

[GHC.Exts.C:IsList_con_entry() //  [R1]
         { info_tbl: [(cfuk5,
                       label: GHC.Exts.C:IsList_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,67,58,73,115,76,105,115,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuk5: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.649723457 UTC

[section ""relreadonly" . GHC.Exts.SpecConstrAnnotation_closure_tbl" {
     GHC.Exts.SpecConstrAnnotation_closure_tbl:
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Exts.ForceSpecConstr_closure+2;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.651520206 UTC

[GHC.Exts.NoSpecConstr_con_entry() //  [R1]
         { info_tbl: [(cfukc,
                       label: GHC.Exts.NoSpecConstr_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,78,111,83,112,101,99,67,111,110,115,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfukc: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.655109286 UTC

[GHC.Exts.ForceSpecConstr_con_entry() //  [R1]
         { info_tbl: [(cfuki,
                       label: GHC.Exts.ForceSpecConstr_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuki: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:11.658833211 UTC

[section ""relreadonly" . Sftlu_srt" {
     Sftlu_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
         const GHC.Exts.$fIsListNonEmpty2_closure;
         const Data.Data.$wlvl_closure;
         const GHC.Exts.$w$cgunfold_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
         const GHC.Exts.the_closure;
         const GHC.Exts.the1_closure;
         const GHC.Exts.the2_closure;
         const Debug.Trace.traceEventIO1_closure;
         const GHC.List.badHead_closure;
         const w2_rftgp_closure;
         const go61_rftgs_closure;
         const w4_rftgr_closure;
         const go1_rftgt_closure;
         const Data.Data.mkConstr1_closure;
         const $tSpecConstrAnnotation3_rftgx_closure;
         const GHC.Exts.$tSpecConstrAnnotation_closure;
         const GHC.Exts.$cNoSpecConstr_closure;
         const GHC.Exts.$cForceSpecConstr_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Maybe.fromJust1_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.347967819 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:11:12.349378991 UTC

[section ""data" . GHC.Exts.fromList_closure" {
     GHC.Exts.fromList_closure:
         const GHC.Exts.fromList_info;
 },
 GHC.Exts.fromList_entry() //  [R2]
         { info_tbl: [(cfuoh,
                       label: GHC.Exts.fromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuoh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuoi; else goto cfuoj;
       cfuoi: // global
           R2 = R2;
           R1 = GHC.Exts.fromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuoj: // global
           I64[Sp - 8] = block_cfuoe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuon; else goto cfuof;
       ufuon: // global
           call _cfuoe(R1) args: 0, res: 0, upd: 0;
       cfuof: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuoe() //  [R1]
         { info_tbl: [(cfuoe,
                       label: block_cfuoe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuoe: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.354731215 UTC

[section ""data" . GHC.Exts.fromListN_closure" {
     GHC.Exts.fromListN_closure:
         const GHC.Exts.fromListN_info;
 },
 GHC.Exts.fromListN_entry() //  [R2]
         { info_tbl: [(cfuoF,
                       label: GHC.Exts.fromListN_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuoF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuoG; else goto cfuoH;
       cfuoG: // global
           R2 = R2;
           R1 = GHC.Exts.fromListN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuoH: // global
           I64[Sp - 8] = block_cfuoC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuoL; else goto cfuoD;
       ufuoL: // global
           call _cfuoC(R1) args: 0, res: 0, upd: 0;
       cfuoD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuoC() //  [R1]
         { info_tbl: [(cfuoC,
                       label: block_cfuoC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuoC: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.360076368 UTC

[section ""data" . GHC.Exts.toList_closure" {
     GHC.Exts.toList_closure:
         const GHC.Exts.toList_info;
 },
 GHC.Exts.toList_entry() //  [R2]
         { info_tbl: [(cfup3,
                       label: GHC.Exts.toList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfup3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfup4; else goto cfup5;
       cfup4: // global
           R2 = R2;
           R1 = GHC.Exts.toList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfup5: // global
           I64[Sp - 8] = block_cfup0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufup9; else goto cfup1;
       ufup9: // global
           call _cfup0(R1) args: 0, res: 0, upd: 0;
       cfup1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfup0() //  [R1]
         { info_tbl: [(cfup0,
                       label: block_cfup0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfup0: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.365543976 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty1_closure" {
     GHC.Exts.$fIsListNonEmpty1_closure:
         const GHC.Exts.$fIsListNonEmpty1_info;
 },
 GHC.Exts.$fIsListNonEmpty1_entry() //  [R2]
         { info_tbl: [(cfupr,
                       label: GHC.Exts.$fIsListNonEmpty1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfupr: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfupv; else goto cfupu;
       cfupv: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfupu: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.369443196 UTC

[section ""cstring" . lvl_rftgk_bytes" {
     lvl_rftgk_bytes:
         I8[] [78,111,110,69,109,112,116,121,46,102,114,111,109,76,105,115,116,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.371428201 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty2_closure" {
     GHC.Exts.$fIsListNonEmpty2_closure:
         const GHC.Exts.$fIsListNonEmpty2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty2_entry() //  [R1]
         { info_tbl: [(cfupP,
                       label: GHC.Exts.$fIsListNonEmpty2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfupP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfupQ; else goto cfupR;
       cfupQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfupR: // global
           (_cfupK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfupK::I64 == 0) goto cfupM; else goto cfupL;
       cfupM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfupL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfupK::I64;
           I64[Sp - 24] = block_cfupN_info;
           R2 = lvl_rftgk_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cfupN() //  [R1]
         { info_tbl: [(cfupN,
                       label: block_cfupN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfupN: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.377226514 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromList_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromList_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromList_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromList_entry() //  [R2]
         { info_tbl: [(cfuqj,
                       label: GHC.Exts.$fIsListNonEmpty_$cfromList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuqj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuqk; else goto cfuql;
       cfuqk: // global
           R2 = R2;
           R1 = GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuql: // global
           I64[Sp - 8] = block_cfuqc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuqv; else goto cfuqd;
       ufuqv: // global
           call _cfuqc(R1) args: 0, res: 0, upd: 0;
       cfuqd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuqc() //  [R1]
         { info_tbl: [(cfuqc,
                       label: block_cfuqc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuqc: // global
           if (R1 & 7 == 1) goto cfuqg; else goto cfuqh;
       cfuqg: // global
           R1 = GHC.Exts.$fIsListNonEmpty2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cfuqh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuqu; else goto cfuqt;
       cfuqu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuqt: // global
           _sfukQ::P64 = P64[R1 + 6];
           _sfukR::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sfukQ::P64;
           P64[Hp] = _sfukR::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.384668308 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c==_entry() //  [R2, R3]
         { info_tbl: [(cfuqW,
                       label: GHC.Exts.$fEqSpecConstrAnnotation_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuqW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuqX; else goto cfuqY;
       cfuqX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuqY: // global
           I64[Sp - 16] = block_cfuqP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufurB; else goto cfuqQ;
       ufurB: // global
           call _cfuqP(R1) args: 0, res: 0, upd: 0;
       cfuqQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuqP() //  [R1]
         { info_tbl: [(cfuqP,
                       label: block_cfuqP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuqP: // global
           _sfukT::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuqT; else goto cfuqU;
       cfuqT: // global
           I64[Sp + 8] = block_cfur1_info;
           R1 = _sfukT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ufurz; else goto cfur3;
       ufurz: // global
           call _cfur1(R1) args: 0, res: 0, upd: 0;
       cfur3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cfuqU: // global
           I64[Sp + 8] = block_cfurg_info;
           R1 = _sfukT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ufurA; else goto cfuri;
       ufurA: // global
           call _cfurg(R1) args: 0, res: 0, upd: 0;
       cfuri: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfur1() //  [R1]
         { info_tbl: [(cfur1,
                       label: block_cfur1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfur1: // global
           if (R1 & 7 == 1) goto ufurx; else goto ufury;
       ufurx: // global
           Sp = Sp + 8;
           call _cfurs() args: 0, res: 0, upd: 0;
       ufury: // global
           Sp = Sp + 8;
           call _cfuro() args: 0, res: 0, upd: 0;
     }
 },
 _cfurg() //  [R1]
         { info_tbl: [(cfurg,
                       label: block_cfurg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfurg: // global
           if (R1 & 7 == 1) goto ufurv; else goto ufurw;
       ufurv: // global
           Sp = Sp + 8;
           call _cfuro() args: 0, res: 0, upd: 0;
       ufurw: // global
           Sp = Sp + 8;
           call _cfurs() args: 0, res: 0, upd: 0;
     }
 },
 _cfuro() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuro: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfurs() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfurs: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.396356255 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure:
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info;
 },
 GHC.Exts.$fEqSpecConstrAnnotation_$c/=_entry() //  [R2, R3]
         { info_tbl: [(cfusp,
                       label: GHC.Exts.$fEqSpecConstrAnnotation_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfusp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfusq; else goto cfusr;
       cfusq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfusr: // global
           I64[Sp - 16] = block_cfusi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufut4; else goto cfusj;
       ufut4: // global
           call _cfusi(R1) args: 0, res: 0, upd: 0;
       cfusj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfusi() //  [R1]
         { info_tbl: [(cfusi,
                       label: block_cfusi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfusi: // global
           _sfukY::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfusm; else goto cfusn;
       cfusm: // global
           I64[Sp + 8] = block_cfusu_info;
           R1 = _sfukY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ufut2; else goto cfusw;
       ufut2: // global
           call _cfusu(R1) args: 0, res: 0, upd: 0;
       cfusw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cfusn: // global
           I64[Sp + 8] = block_cfusJ_info;
           R1 = _sfukY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ufut3; else goto cfusL;
       ufut3: // global
           call _cfusJ(R1) args: 0, res: 0, upd: 0;
       cfusL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfusu() //  [R1]
         { info_tbl: [(cfusu,
                       label: block_cfusu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfusu: // global
           if (R1 & 7 == 1) goto ufut0; else goto ufut1;
       ufut0: // global
           Sp = Sp + 8;
           call _cfusV() args: 0, res: 0, upd: 0;
       ufut1: // global
           Sp = Sp + 8;
           call _cfusR() args: 0, res: 0, upd: 0;
     }
 },
 _cfusJ() //  [R1]
         { info_tbl: [(cfusJ,
                       label: block_cfusJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfusJ: // global
           if (R1 & 7 == 1) goto ufusY; else goto ufusZ;
       ufusY: // global
           Sp = Sp + 8;
           call _cfusR() args: 0, res: 0, upd: 0;
       ufusZ: // global
           Sp = Sp + 8;
           call _cfusV() args: 0, res: 0, upd: 0;
     }
 },
 _cfusR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfusR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfusV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfusV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.407356654 UTC

[section ""data" . GHC.Exts.$fEqSpecConstrAnnotation_closure" {
     GHC.Exts.$fEqSpecConstrAnnotation_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c==_closure+2;
         const GHC.Exts.$fEqSpecConstrAnnotation_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.409715849 UTC

[section ""data" . GHC.Exts.$w$cgunfold_closure" {
     GHC.Exts.$w$cgunfold_closure:
         const GHC.Exts.$w$cgunfold_info;
         const 0;
 },
 GHC.Exts.$w$cgunfold_entry() //  [R2, R3, R4]
         { info_tbl: [(cfutT,
                       label: GHC.Exts.$w$cgunfold_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfutT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfutU; else goto cfutV;
       cfutU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$w$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfutV: // global
           I64[Sp - 24] = block_cfutM_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufuuk; else goto cfutN;
       ufuuk: // global
           call _cfutM(R1) args: 0, res: 0, upd: 0;
       cfutN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfutM() //  [R1]
         { info_tbl: [(cfutM,
                       label: block_cfutM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfutM: // global
           if (R1 & 7 == 1) goto cfutR; else goto cfutQ;
       cfutR: // global
           I64[Sp] = block_cfuu7_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto ufuuj; else goto cfuu9;
       ufuuj: // global
           call _cfuu7(R1) args: 0, res: 0, upd: 0;
       cfuu9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cfutQ: // global
           _sful4::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cfutY_info;
           R1 = _sful4::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ufuui; else goto cfuu0;
       ufuui: // global
           call _cfutY(R1) args: 0, res: 0, upd: 0;
       cfuu0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuu7() //  [R1]
         { info_tbl: [(cfuu7,
                       label: block_cfuu7_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuu7: // global
           _sful2::P64 = P64[Sp + 8];
           if (I64[R1 + 7] == 1) goto cfuuh; else goto cfuug;
       cfuuh: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sful2::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cfuug: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sful2::P64;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfutY() //  [R1]
         { info_tbl: [(cfutY,
                       label: block_cfutY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfutY: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.Data.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.419727697 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_entry() //  [R2, R3,
                                                            R4]
         { info_tbl: [(cfuuO,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuuO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuuP; else goto cfuuQ;
       cfuuP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuuQ: // global
           I64[Sp - 16] = block_cfuuL_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuuU; else goto cfuuM;
       ufuuU: // global
           call _cfuuL(R1) args: 0, res: 0, upd: 0;
       cfuuM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuuL() //  [R1]
         { info_tbl: [(cfuuL,
                       label: block_cfuuL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuuL: // global
           R4 = P64[R1 + 39];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Exts.$w$cgunfold_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.425426184 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(cfuvg,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuvg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuvh; else goto cfuvi;
       cfuvh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuvi: // global
           I64[Sp - 16] = block_cfuv9_info;
           R1 = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuvp; else goto cfuva;
       ufuvp: // global
           call _cfuv9(R1) args: 0, res: 0, upd: 0;
       cfuva: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuv9() //  [R1]
         { info_tbl: [(cfuv9,
                       label: block_cfuv9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuv9: // global
           _sfulo::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuvd; else goto cfuve;
       cfuvd: // global
           R2 = GHC.Exts.NoSpecConstr_closure+1;
           R1 = _sfulo::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
       cfuve: // global
           R2 = GHC.Exts.ForceSpecConstr_closure+2;
           R1 = _sfulo::P64;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.431816642 UTC

[section ""data" . GHC.Exts.$dmfromListN_closure" {
     GHC.Exts.$dmfromListN_closure:
         const GHC.Exts.$dmfromListN_info;
 },
 GHC.Exts.$dmfromListN_entry() //  [R2]
         { info_tbl: [(cfuvG,
                       label: GHC.Exts.$dmfromListN_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuvG: // global
           R2 = R2;
           call GHC.Exts.fromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.435127166 UTC

[section ""data" . GHC.Exts.$fIsListCallStack1_closure" {
     GHC.Exts.$fIsListCallStack1_closure:
         const GHC.Exts.$fIsListCallStack1_info;
 },
 GHC.Exts.$fIsListCallStack1_entry() //  [R3]
         { info_tbl: [(cfuvR,
                       label: GHC.Exts.$fIsListCallStack1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuvR: // global
           R2 = R3;
           call GHC.Stack.Types.fromCallSiteList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.438440855 UTC

[section ""data" . GHC.Exts.$fIsListCallStack_closure" {
     GHC.Exts.$fIsListCallStack_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Stack.Types.fromCallSiteList_closure+1;
         const GHC.Exts.$fIsListCallStack1_closure+2;
         const GHC.Stack.Types.getCallStack_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.440370517 UTC

[section ""data" . GHC.Exts.$fIsListVersion1_closure" {
     GHC.Exts.$fIsListVersion1_closure:
         const GHC.Exts.$fIsListVersion1_info;
 },
 GHC.Exts.$fIsListVersion1_entry() //  [R3]
         { info_tbl: [(cfuw3,
                       label: GHC.Exts.$fIsListVersion1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuw3: // global
           R2 = R3;
           call Data.Version.makeVersion_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.444096538 UTC

[section ""data" . GHC.Exts.$fIsListVersion_closure" {
     GHC.Exts.$fIsListVersion_closure:
         const GHC.Exts.C:IsList_con_info;
         const Data.Version.makeVersion_closure+1;
         const GHC.Exts.$fIsListVersion1_closure+2;
         const Data.Version.versionBranch_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.446056416 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_$cfromListN_closure" {
     GHC.Exts.$fIsListNonEmpty_$cfromListN_closure:
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_info;
         const 0;
 },
 GHC.Exts.$fIsListNonEmpty_$cfromListN_entry() //  [R3]
         { info_tbl: [(cfuwf,
                       label: GHC.Exts.$fIsListNonEmpty_$cfromListN_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuwf: // global
           R2 = R3;
           call GHC.Exts.$fIsListNonEmpty_$cfromList_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.449320179 UTC

[section ""data" . GHC.Exts.$fIsListNonEmpty_closure" {
     GHC.Exts.$fIsListNonEmpty_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure+1;
         const GHC.Exts.$fIsListNonEmpty_$cfromListN_closure+2;
         const GHC.Exts.$fIsListNonEmpty1_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.451790198 UTC

[section ""data" . GHC.Exts.$fIsList[]1_closure" {
     GHC.Exts.$fIsList[]1_closure:
         const GHC.Exts.$fIsList[]1_info;
 },
 GHC.Exts.$fIsList[]1_entry() //  [R3]
         { info_tbl: [(cfuwr,
                       label: GHC.Exts.$fIsList[]1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuwr: // global
           R2 = R3;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.455254924 UTC

[section ""data" . GHC.Exts.$fIsList[]_closure" {
     GHC.Exts.$fIsList[]_closure:
         const GHC.Exts.C:IsList_con_info;
         const GHC.Base.id_closure+1;
         const GHC.Exts.$fIsList[]1_closure+2;
         const GHC.Base.id_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.456948609 UTC

[section ""data" . GHC.Exts.maxTupleSize_closure" {
     GHC.Exts.maxTupleSize_closure:
         const GHC.Types.I#_con_info;
         const 62;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.458711636 UTC

[section ""cstring" . lvl1_rftgl_bytes" {
     lvl1_rftgl_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.460668735 UTC

[section ""data" . GHC.Exts.the2_closure" {
     GHC.Exts.the2_closure:
         const GHC.Exts.the2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the2_entry() //  [R1]
         { info_tbl: [(cfuwJ,
                       label: GHC.Exts.the2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuwJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfuwK; else goto cfuwL;
       cfuwK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuwL: // global
           (_cfuwE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuwE::I64 == 0) goto cfuwG; else goto cfuwF;
       cfuwG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuwF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuwE::I64;
           I64[Sp - 24] = block_cfuwH_info;
           R2 = lvl1_rftgl_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cfuwH() //  [R1]
         { info_tbl: [(cfuwH,
                       label: block_cfuwH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuwH: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.466230295 UTC

[section ""cstring" . lvl2_rftgm_bytes" {
     lvl2_rftgm_bytes:
         I8[] [71,72,67,46,69,120,116,115,46,116,104,101,58,32,110,111,110,45,105,100,101,110,116,105,99,97,108,32,101,108,101,109,101,110,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.468083166 UTC

[section ""data" . GHC.Exts.the1_closure" {
     GHC.Exts.the1_closure:
         const GHC.Exts.the1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.the1_entry() //  [R1]
         { info_tbl: [(cfuxa,
                       label: GHC.Exts.the1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuxa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfuxb; else goto cfuxc;
       cfuxb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuxc: // global
           (_cfux5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfux5::I64 == 0) goto cfux7; else goto cfux6;
       cfux7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfux6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfux5::I64;
           I64[Sp - 24] = block_cfux8_info;
           R2 = lvl2_rftgm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cfux8() //  [R1]
         { info_tbl: [(cfux8,
                       label: block_cfux8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfux8: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.474421749 UTC

[section ""data" . GHC.Exts.the_closure" {
     GHC.Exts.the_closure:
         const GHC.Exts.the_info;
         const 0;
 },
 sat_sfulE_entry() //  [R1]
         { info_tbl: [(cfuxG,
                       label: sat_sfulE_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuxG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuxH; else goto cfuxI;
       cfuxH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuxI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.the_entry() //  [R2, R3]
         { info_tbl: [(cfuxN,
                       label: GHC.Exts.the_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuxN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuxO; else goto cfuxP;
       cfuxO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.the_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuxP: // global
           I64[Sp - 16] = block_cfuxw_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuy7; else goto cfuxx;
       ufuy7: // global
           call _cfuxw(R1) args: 0, res: 0, upd: 0;
       cfuxx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuxw() //  [R1]
         { info_tbl: [(cfuxw,
                       label: block_cfuxw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuxw: // global
           if (R1 & 7 == 1) goto cfuxK; else goto cfuxL;
       cfuxK: // global
           R1 = GHC.Exts.the2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuxL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfuxV; else goto cfuxU;
       cfuxV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuxU: // global
           _sfulC::P64 = P64[R1 + 6];
           _sfulD::P64 = P64[R1 + 14];
           I64[Hp - 24] = sat_sfulE_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sfulC::P64;
           I64[Sp] = block_cfuxS_info;
           R3 = _sfulD::P64;
           R2 = Hp - 24;
           P64[Sp + 8] = _sfulC::P64;
           call GHC.List.all_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfuxS() //  [R1]
         { info_tbl: [(cfuxS,
                       label: block_cfuxS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuxS: // global
           if (R1 & 7 == 1) goto cfuy1; else goto cfuy5;
       cfuy1: // global
           R1 = GHC.Exts.the1_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuy5: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.484972458 UTC

[section ""data" . GHC.Exts.sortWith_closure" {
     GHC.Exts.sortWith_closure:
         const GHC.Exts.sortWith_info;
 },
 sat_sfulN_entry() //  [R1, R2, R3]
         { info_tbl: [(cfuyK,
                       label: sat_sfulN_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuyK: // global
           _sfulK::P64 = R3;
           _sfulJ::P64 = R2;
           _sfulN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuyL; else goto cfuyM;
       cfuyM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfuyO; else goto cfuyN;
       cfuyO: // global
           HpAlloc = 64;
           goto cfuyL;
       cfuyL: // global
           R3 = _sfulK::P64;
           R2 = _sfulJ::P64;
           R1 = _sfulN::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuyN: // global
           _sfulG::P64 = P64[_sfulN::P64 + 6];
           _sfulH::P64 = P64[_sfulN::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sfulH::P64;
           P64[Hp - 32] = _sfulK::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfulH::P64;
           P64[Hp] = _sfulJ::P64;
           R2 = _sfulG::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 GHC.Exts.sortWith_entry() //  [R2, R3, R4]
         { info_tbl: [(cfuyP,
                       label: GHC.Exts.sortWith_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuyP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuyT; else goto cfuyS;
       cfuyT: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.sortWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuyS: // global
           I64[Hp - 16] = sat_sfulN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R4;
           R2 = Hp - 14;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.492434148 UTC

[section ""data" . GHC.Exts.groupByFB_closure" {
     GHC.Exts.groupByFB_closure:
         const GHC.Exts.groupByFB_info;
 },
 ds1_sfulX_entry() //  [R1]
         { info_tbl: [(cfuzv,
                       label: ds1_sfulX_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuzv: // global
           _sfulX::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuzw; else goto cfuzx;
       cfuzx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfuzz; else goto cfuzy;
       cfuzz: // global
           HpAlloc = 32;
           goto cfuzw;
       cfuzw: // global
           R1 = _sfulX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuzy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfulX::P64;
           _sfulQ::P64 = P64[_sfulX::P64 + 16];
           _sfulV::P64 = P64[_sfulX::P64 + 24];
           _sfulW::P64 = P64[_sfulX::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfulQ::P64;
           P64[Hp] = _sfulV::P64;
           I64[Sp - 24] = block_cfuzs_info;
           R3 = _sfulW::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cfuzs() //  [R1, R2]
         { info_tbl: [(cfuzs,
                       label: block_cfuzs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuzs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuzC; else goto cfuzB;
       cfuzC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfuzB: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sfuma_entry() //  [R1]
         { info_tbl: [(cfuzK,
                       label: sat_sfuma_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuzK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuzL; else goto cfuzM;
       cfuzL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuzM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfuzH_info;
           _sfulS::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sfulS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuzQ; else goto cfuzI;
       ufuzQ: // global
           call _cfuzH(R1) args: 0, res: 0, upd: 0;
       cfuzI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cfuzH() //  [R1]
         { info_tbl: [(cfuzH,
                       label: block_cfuzH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuzH: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sfulS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 groupByFBCore_sfulS_entry() //  [R1, R2]
         { info_tbl: [(cfuzV,
                       label: groupByFBCore_sfulS_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuzV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfuzW; else goto cfuzX;
       cfuzW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuzX: // global
           I64[Sp - 40] = block_cfuzh_info;
           _sfulS::P64 = R1;
           _sfulO::P64 = P64[R1 + 7];
           _sfulP::P64 = P64[R1 + 15];
           _sfulQ::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _sfulO::P64;
           P64[Sp - 24] = _sfulP::P64;
           P64[Sp - 16] = _sfulQ::P64;
           P64[Sp - 8] = _sfulS::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ufuA5; else goto cfuzi;
       ufuA5: // global
           call _cfuzh(R1) args: 0, res: 0, upd: 0;
       cfuzi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuzh() //  [R1]
         { info_tbl: [(cfuzh,
                       label: block_cfuzh_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuzh: // global
           if (R1 & 7 == 1) goto cfuzS; else goto cfuzT;
       cfuzS: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuzT: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cfuA4; else goto cfuA3;
       cfuA4: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuA3: // global
           _sfulV::P64 = P64[R1 + 6];
           _sfulW::P64 = P64[R1 + 14];
           I64[Hp - 112] = ds1_sfulX_info;
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = _sfulV::P64;
           P64[Hp - 80] = _sfulW::P64;
           I64[Hp - 72] = sat_sfuma_info;
           P64[Hp - 56] = P64[Sp + 32];
           _cfuzn::P64 = Hp - 112;
           P64[Hp - 48] = _cfuzn::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cfuzn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sfulV::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 72;
           R2 = Hp - 14;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exts.groupByFB_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(cfuA6,
                       label: GHC.Exts.groupByFB_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuA6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfuAa; else goto cfuA9;
       cfuAa: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.groupByFB_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuA9: // global
           I64[Hp - 24] = groupByFBCore_sfulS_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R2 = R5;
           R1 = Hp - 23;
           call groupByFBCore_sfulS_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.510188035 UTC

[section ""data" . GHC.Exts.groupWith_closure" {
     GHC.Exts.groupWith_closure:
         const GHC.Exts.groupWith_info;
 },
 $dEq_sfume_entry() //  [R1]
         { info_tbl: [(cfuB2,
                       label: $dEq_sfume_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuB2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuB3; else goto cfuB4;
       cfuB3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuB4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sfumo_entry() //  [R1, R2]
         { info_tbl: [(cfuBr,
                       label: sat_sfumo_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuBr: // global
           _sfumm::P64 = R2;
           _sfumo::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuBs; else goto cfuBt;
       cfuBt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfuBv; else goto cfuBu;
       cfuBv: // global
           HpAlloc = 32;
           goto cfuBs;
       cfuBs: // global
           R2 = _sfumm::P64;
           R1 = _sfumo::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuBu: // global
           _sfumc::P64 = P64[_sfumo::P64 + 7];
           _sfume::P64 = P64[_sfumo::P64 + 15];
           _sfuml::P64 = P64[_sfumo::P64 + 23];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sfumc::P64;
           P64[Hp] = _sfumm::P64;
           R2 = _sfume::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sfuml::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 ds1_sfumk_entry() //  [R1]
         { info_tbl: [(cfuBz,
                       label: ds1_sfumk_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuBz: // global
           _sfumk::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuBA; else goto cfuBB;
       cfuBB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfuBD; else goto cfuBC;
       cfuBD: // global
           HpAlloc = 64;
           goto cfuBA;
       cfuBA: // global
           R1 = _sfumk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuBC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfumk::P64;
           _sfumc::P64 = P64[_sfumk::P64 + 16];
           _sfume::P64 = P64[_sfumk::P64 + 24];
           _sfumi::P64 = P64[_sfumk::P64 + 32];
           _sfumj::P64 = P64[_sfumk::P64 + 40];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sfumc::P64;
           P64[Hp - 32] = _sfumi::P64;
           I64[Hp - 24] = sat_sfumo_info;
           P64[Hp - 16] = _sfumc::P64;
           P64[Hp - 8] = _sfume::P64;
           P64[Hp] = Hp - 56;
           I64[Sp - 24] = block_cfuBw_info;
           R3 = _sfumj::P64;
           R2 = Hp - 23;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cfuBw() //  [R1, R2]
         { info_tbl: [(cfuBw,
                       label: block_cfuBw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuBw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuBG; else goto cfuBF;
       cfuBG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cfuBF: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sfumA_entry() //  [R1]
         { info_tbl: [(cfuBO,
                       label: sat_sfumA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuBO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuBP; else goto cfuBQ;
       cfuBP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuBQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfuBL_info;
           _sfumf::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sfumf::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuBU; else goto cfuBM;
       ufuBU: // global
           call _cfuBL(R1) args: 0, res: 0, upd: 0;
       cfuBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cfuBL() //  [R1]
         { info_tbl: [(cfuBL,
                       label: block_cfuBL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuBL: // global
           R2 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sfumf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 groupByFBCore_sfumf_entry() //  [R1, R2]
         { info_tbl: [(cfuBZ,
                       label: groupByFBCore_sfumf_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuBZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuC0; else goto cfuC1;
       cfuC0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuC1: // global
           I64[Sp - 32] = block_cfuBa_info;
           _sfumf::P64 = R1;
           _sfumc::P64 = P64[R1 + 7];
           _sfume::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _sfumc::P64;
           P64[Sp - 16] = _sfume::P64;
           P64[Sp - 8] = _sfumf::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuCa; else goto cfuBb;
       ufuCa: // global
           call _cfuBa(R1) args: 0, res: 0, upd: 0;
       cfuBb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuBa() //  [R1]
         { info_tbl: [(cfuBa,
                       label: block_cfuBa_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuBa: // global
           if (R1 & 7 == 1) goto cfuBW; else goto cfuBX;
       cfuBW: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfuBX: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cfuC9; else goto cfuC8;
       cfuC9: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuC8: // global
           _sfumi::P64 = P64[R1 + 6];
           _sfumj::P64 = P64[R1 + 14];
           I64[Hp - 144] = ds1_sfumk_info;
           P64[Hp - 128] = P64[Sp + 8];
           P64[Hp - 120] = P64[Sp + 16];
           P64[Hp - 112] = _sfumi::P64;
           P64[Hp - 104] = _sfumj::P64;
           I64[Hp - 96] = sat_sfumA_info;
           P64[Hp - 80] = P64[Sp + 24];
           _cfuBg::P64 = Hp - 144;
           P64[Hp - 72] = _cfuBg::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cfuBg::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sfumi::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Exts.groupWith_entry() //  [R2, R3, R4]
         { info_tbl: [(cfuCd,
                       label: GHC.Exts.groupWith_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuCd: // global
           _sfumd::P64 = R4;
           _sfumc::P64 = R3;
           _sfumb::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cfuCe; else goto cfuCf;
       cfuCf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfuCh; else goto cfuCg;
       cfuCh: // global
           HpAlloc = 48;
           goto cfuCe;
       cfuCe: // global
           R4 = _sfumd::P64;
           R3 = _sfumc::P64;
           R2 = _sfumb::P64;
           R1 = GHC.Exts.groupWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuCg: // global
           I64[Hp - 40] = $dEq_sfume_info;
           P64[Hp - 24] = _sfumb::P64;
           I64[Hp - 16] = groupByFBCore_sfumf_info;
           P64[Hp - 8] = _sfumc::P64;
           P64[Hp] = Hp - 40;
           I64[Sp - 16] = block_cfuCb_info;
           R4 = _sfumd::P64;
           R3 = _sfumc::P64;
           R2 = _sfumb::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exts.sortWith_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfuCb() //  [R1]
         { info_tbl: [(cfuCb,
                       label: block_cfuCb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuCb: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call groupByFBCore_sfumf_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.534193729 UTC

[section ""data" . GHC.Exts.traceEvent_closure" {
     GHC.Exts.traceEvent_closure:
         const GHC.Exts.traceEvent_info;
         const 0;
 },
 GHC.Exts.traceEvent_entry() //  [R2]
         { info_tbl: [(cfuDB,
                       label: GHC.Exts.traceEvent_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuDB: // global
           R2 = R2;
           call Debug.Trace.traceEventIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.537516383 UTC

[section ""cstring" . GHC.Exts.$fDataSpecConstrAnnotation7_bytes" {
     GHC.Exts.$fDataSpecConstrAnnotation7_bytes:
         I8[] [83,112,101,99,67,111,110,115,116,114,65,110,110,111,116,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.539350897 UTC

[section ""data" . $tSpecConstrAnnotation1_rftgn_closure" {
     $tSpecConstrAnnotation1_rftgn_closure:
         const $tSpecConstrAnnotation1_rftgn_info;
         const 0;
         const 0;
         const 0;
 },
 $tSpecConstrAnnotation1_rftgn_entry() //  [R1]
         { info_tbl: [(cfuDP,
                       label: $tSpecConstrAnnotation1_rftgn_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuDP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuDQ; else goto cfuDR;
       cfuDQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuDR: // global
           (_cfuDM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuDM::I64 == 0) goto cfuDO; else goto cfuDN;
       cfuDO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuDN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuDM::I64;
           R2 = GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.543668389 UTC

[section ""cstring" . w1_rftgo_bytes" {
     w1_rftgo_bytes:
         I8[] [70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.545501236 UTC

[section ""data" . w2_rftgp_closure" {
     w2_rftgp_closure:
         const w2_rftgp_info;
         const 0;
         const 0;
         const 0;
 },
 w2_rftgp_entry() //  [R1]
         { info_tbl: [(cfuE7,
                       label: w2_rftgp_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuE7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuE8; else goto cfuE9;
       cfuE8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuE9: // global
           (_cfuE4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuE4::I64 == 0) goto cfuE6; else goto cfuE5;
       cfuE6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuE5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuE4::I64;
           R2 = w1_rftgo_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.549351467 UTC

[section ""cstring" . w3_rftgq_bytes" {
     w3_rftgq_bytes:
         I8[] [78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.551310797 UTC

[section ""data" . w4_rftgr_closure" {
     w4_rftgr_closure:
         const w4_rftgr_info;
         const 0;
         const 0;
         const 0;
 },
 w4_rftgr_entry() //  [R1]
         { info_tbl: [(cfuEp,
                       label: w4_rftgr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuEp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuEq; else goto cfuEr;
       cfuEq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuEr: // global
           (_cfuEm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuEm::I64 == 0) goto cfuEo; else goto cfuEn;
       cfuEo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuEn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuEm::I64;
           R2 = w3_rftgq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.556302693 UTC

[section ""data" . go61_rftgs_closure" {
     go61_rftgs_closure:
         const go61_rftgs_info;
         const 0;
 },
 go61_rftgs_entry() //  [R2, R3]
         { info_tbl: [(cfuEL,
                       label: go61_rftgs_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuEL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuEM; else goto ufuFp;
       cfuEM: // global
           R3 = R3;
           R2 = R2;
           R1 = go61_rftgs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufuFp: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfuEB() args: 0, res: 0, upd: 0;
     }
 },
 _cfuEB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuEB: // global
           _sfumC::P64 = P64[Sp];
           I64[Sp] = block_cfuEE_info;
           R1 = _sfumC::P64;
           if (R1 & 7 != 0) goto ufuFt; else goto cfuEF;
       ufuFt: // global
           call _cfuEE(R1) args: 0, res: 0, upd: 0;
       cfuEF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuEE() //  [R1]
         { info_tbl: [(cfuEE,
                       label: block_cfuEE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuEE: // global
           if (R1 & 7 == 1) goto ufuFq; else goto cfuEJ;
       ufuFq: // global
           Sp = Sp + 16;
           call _cfuF1() args: 0, res: 0, upd: 0;
       cfuEJ: // global
           I64[Sp - 8] = block_cfuET_info;
           _sfumF::P64 = P64[R1 + 6];
           _sfumG::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfumG::P64;
           P64[Sp + 8] = _sfumF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuFu; else goto cfuEV;
       ufuFu: // global
           call _cfuET(R1) args: 0, res: 0, upd: 0;
       cfuEV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuET() //  [R1]
         { info_tbl: [(cfuET,
                       label: block_cfuET_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuET: // global
           if (R1 & 7 == 1) goto ufuFr; else goto cfuF6;
       ufuFr: // global
           Sp = Sp + 24;
           call _cfuF1() args: 0, res: 0, upd: 0;
       cfuF6: // global
           I64[Sp - 8] = block_cfuF4_info;
           _sfumI::P64 = P64[R1 + 6];
           _sfumJ::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfumJ::P64;
           P64[Sp + 16] = _sfumI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuFx; else goto cfuF7;
       ufuFx: // global
           call _cfuF4(R1) args: 0, res: 0, upd: 0;
       cfuF7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuF1() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuF1: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfuF4() //  [R1]
         { info_tbl: [(cfuF4,
                       label: block_cfuF4_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuF4: // global
           I64[Sp] = block_cfuFb_info;
           R3 = w2_rftgp_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfuFb() //  [R1]
         { info_tbl: [(cfuFb,
                       label: block_cfuFb_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuFb: // global
           if (R1 & 7 == 1) goto cfuFi; else goto cfuFm;
       cfuFi: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfuEB() args: 0, res: 0, upd: 0;
       cfuFm: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.570948755 UTC

[section ""data" . go1_rftgt_closure" {
     go1_rftgt_closure:
         const go1_rftgt_info;
         const 0;
 },
 go1_rftgt_entry() //  [R2, R3]
         { info_tbl: [(cfuGn,
                       label: go1_rftgt_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuGn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuGo; else goto ufuH1;
       cfuGo: // global
           R3 = R3;
           R2 = R2;
           R1 = go1_rftgt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ufuH1: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cfuGd() args: 0, res: 0, upd: 0;
     }
 },
 _cfuGd() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuGd: // global
           _sfumR::P64 = P64[Sp];
           I64[Sp] = block_cfuGg_info;
           R1 = _sfumR::P64;
           if (R1 & 7 != 0) goto ufuH5; else goto cfuGh;
       ufuH5: // global
           call _cfuGg(R1) args: 0, res: 0, upd: 0;
       cfuGh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuGg() //  [R1]
         { info_tbl: [(cfuGg,
                       label: block_cfuGg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuGg: // global
           if (R1 & 7 == 1) goto ufuH2; else goto cfuGl;
       ufuH2: // global
           Sp = Sp + 16;
           call _cfuGD() args: 0, res: 0, upd: 0;
       cfuGl: // global
           I64[Sp - 8] = block_cfuGv_info;
           _sfumU::P64 = P64[R1 + 6];
           _sfumV::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sfumV::P64;
           P64[Sp + 8] = _sfumU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuH6; else goto cfuGx;
       ufuH6: // global
           call _cfuGv(R1) args: 0, res: 0, upd: 0;
       cfuGx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuGv() //  [R1]
         { info_tbl: [(cfuGv,
                       label: block_cfuGv_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuGv: // global
           if (R1 & 7 == 1) goto ufuH3; else goto cfuGI;
       ufuH3: // global
           Sp = Sp + 24;
           call _cfuGD() args: 0, res: 0, upd: 0;
       cfuGI: // global
           I64[Sp - 8] = block_cfuGG_info;
           _sfumX::P64 = P64[R1 + 6];
           _sfumY::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sfumY::P64;
           P64[Sp + 16] = _sfumX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuH9; else goto cfuGJ;
       ufuH9: // global
           call _cfuGG(R1) args: 0, res: 0, upd: 0;
       cfuGJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuGD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuGD: // global
           R1 = GHC.List.badHead_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cfuGG() //  [R1]
         { info_tbl: [(cfuGG,
                       label: block_cfuGG_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuGG: // global
           I64[Sp] = block_cfuGN_info;
           R3 = w4_rftgr_closure;
           R2 = P64[R1 + 15];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfuGN() //  [R1]
         { info_tbl: [(cfuGN,
                       label: block_cfuGN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuGN: // global
           if (R1 & 7 == 1) goto cfuGU; else goto cfuGY;
       cfuGU: // global
           P64[Sp + 16] = P64[Sp + 16];
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cfuGd() args: 0, res: 0, upd: 0;
       cfuGY: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.584450602 UTC

[section ""data" . $cForceSpecConstr1_rftgu_closure" {
     $cForceSpecConstr1_rftgu_closure:
         const Data.Data.AlgConstr_con_info;
         const $cForceSpecConstr2_rftgA_closure;
         const 0;
 },
 section ""data" . $cNoSpecConstr1_rftgv_closure" {
     $cNoSpecConstr1_rftgv_closure:
         const Data.Data.AlgConstr_con_info;
         const $cNoSpecConstr2_rftgz_closure;
         const 0;
 },
 section ""data" . GHC.Exts.$cForceSpecConstr_closure" {
     GHC.Exts.$cForceSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cForceSpecConstr1_rftgu_closure+1;
         const w2_rftgp_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation2_rftgw_closure" {
     $tSpecConstrAnnotation2_rftgw_closure:
         const :_con_info;
         const GHC.Exts.$cForceSpecConstr_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation3_rftgx_closure" {
     $tSpecConstrAnnotation3_rftgx_closure:
         const :_con_info;
         const GHC.Exts.$cNoSpecConstr_closure+1;
         const $tSpecConstrAnnotation2_rftgw_closure+2;
         const 0;
 },
 section ""data" . $tSpecConstrAnnotation4_rftgy_closure" {
     $tSpecConstrAnnotation4_rftgy_closure:
         const Data.Data.AlgRep_con_info;
         const $tSpecConstrAnnotation3_rftgx_closure+2;
         const 0;
 },
 section ""data" . GHC.Exts.$tSpecConstrAnnotation_closure" {
     GHC.Exts.$tSpecConstrAnnotation_closure:
         const Data.Data.DataType_con_info;
         const $tSpecConstrAnnotation1_rftgn_closure;
         const $tSpecConstrAnnotation4_rftgy_closure+1;
         const 0;
 },
 section ""data" . GHC.Exts.$cNoSpecConstr_closure" {
     GHC.Exts.$cNoSpecConstr_closure:
         const Data.Data.Constr_con_info;
         const $cNoSpecConstr1_rftgv_closure+1;
         const w4_rftgr_closure;
         const GHC.Types.[]_closure+1;
         const Data.Data.Prefix_closure+1;
         const GHC.Exts.$tSpecConstrAnnotation_closure+1;
         const 0;
 },
 section ""data" . $cNoSpecConstr2_rftgz_closure" {
     $cNoSpecConstr2_rftgz_closure:
         const $cNoSpecConstr2_rftgz_info;
         const 0;
         const 0;
         const 0;
 },
 $cNoSpecConstr2_rftgz_entry() //  [R1]
         { info_tbl: [(cfuHU,
                       label: $cNoSpecConstr2_rftgz_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuHU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuHV; else goto cfuHW;
       cfuHV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuHW: // global
           (_cfuHR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuHR::I64 == 0) goto cfuHT; else goto cfuHS;
       cfuHT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuHS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuHR::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go1_rftgt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""data" . $cForceSpecConstr2_rftgA_closure" {
     $cForceSpecConstr2_rftgA_closure:
         const $cForceSpecConstr2_rftgA_info;
         const 0;
         const 0;
         const 0;
 },
 $cForceSpecConstr2_rftgA_entry() //  [R1]
         { info_tbl: [(cfuI3,
                       label: $cForceSpecConstr2_rftgA_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuI3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuI4; else goto cfuI5;
       cfuI4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuI5: // global
           (_cfuI0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuI0::I64 == 0) goto cfuI2; else goto cfuI1;
       cfuI2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuI1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuI0::I64;
           R3 = Data.Data.mkConstr1_closure;
           R2 = $tSpecConstrAnnotation3_rftgx_closure+2;
           Sp = Sp - 16;
           call go61_rftgs_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.596981374 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_entry() //  []
         { info_tbl: [(cfuIy,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuIy: // global
           R1 = GHC.Exts.$tSpecConstrAnnotation_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.601020745 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_entry() //  [R2]
         { info_tbl: [(cfuIR,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuIR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuIS; else goto cfuIT;
       cfuIS: // global
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuIT: // global
           I64[Sp - 8] = block_cfuIK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuJ0; else goto cfuIL;
       ufuJ0: // global
           call _cfuIK(R1) args: 0, res: 0, upd: 0;
       cfuIL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuIK() //  [R1]
         { info_tbl: [(cfuIK,
                       label: block_cfuIK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuIK: // global
           if (R1 & 7 == 1) goto cfuIO; else goto cfuIP;
       cfuIO: // global
           R1 = GHC.Exts.$cNoSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfuIP: // global
           R1 = GHC.Exts.$cForceSpecConstr_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.607047277 UTC

[section ""cstring" . GHC.Exts.$trModule4_bytes" {
     GHC.Exts.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.608772065 UTC

[section ""data" . GHC.Exts.$trModule3_closure" {
     GHC.Exts.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.61042293 UTC

[section ""cstring" . GHC.Exts.$trModule2_bytes" {
     GHC.Exts.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.612120222 UTC

[section ""data" . GHC.Exts.$trModule1_closure" {
     GHC.Exts.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.614279416 UTC

[section ""data" . GHC.Exts.$trModule_closure" {
     GHC.Exts.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Exts.$trModule3_closure+1;
         const GHC.Exts.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.616029015 UTC

[section ""data" . $krep_rftgB_closure" {
     $krep_rftgB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.617858615 UTC

[section ""data" . GHC.Exts.$tcIsList1_closure" {
     GHC.Exts.$tcIsList1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep_rftgB_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.619631565 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation6_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation6_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation7_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.621409852 UTC

[section ""data" . GHC.Exts.$tcSpecConstrAnnotation_closure" {
     GHC.Exts.$tcSpecConstrAnnotation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
         const GHC.Types.krep$*_closure;
         const 8217012571387563927;
         const 8545973142114271769;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.623325331 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr1_closure" {
     GHC.Exts.$tc'ForceSpecConstr1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Exts.$tcSpecConstrAnnotation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.625071245 UTC

[section ""cstring" . GHC.Exts.$tc'NoSpecConstr2_bytes" {
     GHC.Exts.$tc'NoSpecConstr2_bytes:
         I8[] [39,78,111,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.627270919 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr1_closure" {
     GHC.Exts.$tc'NoSpecConstr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'NoSpecConstr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.629446223 UTC

[section ""data" . GHC.Exts.$tc'NoSpecConstr_closure" {
     GHC.Exts.$tc'NoSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'NoSpecConstr1_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 18402820579108170608;
         const 14598374581444186552;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.631263568 UTC

[section ""cstring" . GHC.Exts.$tc'ForceSpecConstr3_bytes" {
     GHC.Exts.$tc'ForceSpecConstr3_bytes:
         I8[] [39,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.632896146 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr2_closure" {
     GHC.Exts.$tc'ForceSpecConstr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tc'ForceSpecConstr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.634629556 UTC

[section ""data" . GHC.Exts.$tc'ForceSpecConstr_closure" {
     GHC.Exts.$tc'ForceSpecConstr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr2_closure+1;
         const GHC.Exts.$tc'ForceSpecConstr1_closure+1;
         const 13715005538542947299;
         const 3802030838304098377;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.637112289 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation5_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation5_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation5_entry() //  [R1]
         { info_tbl: [(cfuJG,
                       label: GHC.Exts.$fDataSpecConstrAnnotation5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuJG: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cfuJH; else goto cfuJI;
       cfuJH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuJI: // global
           (_cfuJy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfuJy::I64 == 0) goto cfuJA; else goto cfuJz;
       cfuJA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfuJz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfuJy::I64;
           I64[Sp - 24] = block_cfuJB_info;
           R6 = 0;
           R5 = GHC.Exts.$fDataSpecConstrAnnotation6_closure+1;
           R4 = GHC.Exts.$trModule_closure+1;
           R3 = 8545973142114271769;
           R2 = 8217012571387563927;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _cfuJB() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(cfuJB,
                       label: block_cfuJB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuJB: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cfuJC() args: 0, res: 0, upd: 0;
     }
 },
 _cfuJC() //  []
         { info_tbl: [(cfuJC,
                       label: block_cfuJC_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuJC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfuJL; else goto cfuJK;
       cfuJL: // global
           HpAlloc = 48;
           I64[Sp] = block_cfuJC_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cfuJK: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.645765784 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_entry() //  []
         { info_tbl: [(cfuKi,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuKi: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.649025124 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation2_closure:
         const (,)_con_info;
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.651157681 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation1_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation1_closure:
         const (,)_con_info;
         const GHC.Exts.ForceSpecConstr_closure+2;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.654090514 UTC

[section ""data" . GHC.Exts.$w$cgmapMp_closure" {
     GHC.Exts.$w$cgmapMp_closure:
         const GHC.Exts.$w$cgmapMp_info;
 },
 lvl3_sfunj_entry() //  [R1]
         { info_tbl: [(cfuKB,
                       label: lvl3_sfunj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuKB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuKC; else goto cfuKD;
       cfuKC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuKD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sfuns_entry() //  [R1, R2]
         { info_tbl: [(cfuKQ,
                       label: sat_sfuns_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuKQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuKR; else goto cfuKS;
       cfuKR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuKS: // global
           I64[Sp - 24] = block_cfuKN_info;
           _sfunj::P64 = P64[R1 + 7];
           _sfunk::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfunj::P64;
           P64[Sp - 8] = _sfunk::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufuLa; else goto cfuKO;
       ufuLa: // global
           call _cfuKN(R1) args: 0, res: 0, upd: 0;
       cfuKO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuKN() //  [R1]
         { info_tbl: [(cfuKN,
                       label: block_cfuKN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuKN: // global
           I64[Sp - 8] = block_cfuKV_info;
           _sfunp::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfunp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuL9; else goto cfuKX;
       ufuL9: // global
           call _cfuKV(R1) args: 0, res: 0, upd: 0;
       cfuKX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuKV() //  [R1]
         { info_tbl: [(cfuKV,
                       label: block_cfuKV_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuKV: // global
           if (R1 & 7 == 1) goto cfuL3; else goto cfuL7;
       cfuL3: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuL7: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 sat_sfunm_entry() //  [R1]
         { info_tbl: [(cfuLm,
                       label: sat_sfunm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuLm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuLn; else goto cfuLo;
       cfuLn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuLo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfuLf_info;
           _sfunk::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sfunk::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuLv; else goto cfuLg;
       ufuLv: // global
           call _cfuLf(R1) args: 0, res: 0, upd: 0;
       cfuLg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cfuLf() //  [R1]
         { info_tbl: [(cfuLf,
                       label: block_cfuLf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuLf: // global
           _sfunk::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuLj; else goto cfuLk;
       cfuLj: // global
           R2 = _sfunk::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cfuLk: // global
           R2 = _sfunk::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.$w$cgmapMp_entry() //  [R2, R3]
         { info_tbl: [(cfuLw,
                       label: GHC.Exts.$w$cgmapMp_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuLw: // global
           _sfuni::P64 = R3;
           _sfunh::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuLx; else goto cfuLy;
       cfuLy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuLA; else goto cfuLz;
       cfuLA: // global
           HpAlloc = 24;
           goto cfuLx;
       cfuLx: // global
           R3 = _sfuni::P64;
           R2 = _sfunh::P64;
           R1 = GHC.Exts.$w$cgmapMp_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuLz: // global
           I64[Hp - 16] = lvl3_sfunj_info;
           P64[Hp] = _sfunh::P64;
           I64[Sp - 24] = block_cfuKE_info;
           R2 = _sfunh::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sfuni::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfuKE() //  [R1]
         { info_tbl: [(cfuKE,
                       label: block_cfuKE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuKE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfuLD; else goto cfuLC;
       cfuLD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuLC: // global
           I64[Hp - 48] = sat_sfuns_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sfunm_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.672375837 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_entry() //  [R2, R4]
         { info_tbl: [(cfuMD,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuMD: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMp_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.676185831 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_entry() //  [R2, R3,
                                                          R4]
         { info_tbl: [(cfuMV,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuMV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuMW; else goto cfuMX;
       cfuMW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuMX: // global
           I64[Sp - 16] = block_cfuMO_info;
           R1 = R4;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuN4; else goto cfuMP;
       ufuN4: // global
           call _cfuMO(R1) args: 0, res: 0, upd: 0;
       cfuMP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuMO() //  [R1]
         { info_tbl: [(cfuMO,
                       label: block_cfuMO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuMO: // global
           _sfunw::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuMS; else goto cfuMT;
       cfuMS: // global
           R2 = _sfunw::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.NoSpecConstr_closure+1;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
       cfuMT: // global
           R2 = _sfunw::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.ForceSpecConstr_closure+2;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.682150317 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info;
         const 0;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_entry() //  [R2, R3,
                                                           R4]
         { info_tbl: [(cfuNs,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuNs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuNt; else goto cfuNu;
       cfuNt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuNu: // global
           I64[Sp - 8] = block_cfuNp_info;
           R1 = R4;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuNy; else goto cfuNq;
       ufuNy: // global
           call _cfuNp() args: 0, res: 0, upd: 0;
       cfuNq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuNp() //  []
         { info_tbl: [(cfuNp,
                       label: block_cfuNp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuNp: // global
           R1 = Data.Maybe.fromJust1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.688026786 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_entry() //  [R2, R3,
                                                           R4, R5]
         { info_tbl: [(cfuNQ,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuNQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuNR; else goto cfuNS;
       cfuNR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuNS: // global
           I64[Sp - 16] = block_cfuNN_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuNW; else goto cfuNO;
       ufuNW: // global
           call _cfuNN() args: 0, res: 0, upd: 0;
       cfuNO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuNN() //  []
         { info_tbl: [(cfuNN,
                       label: block_cfuNN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuNN: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.693527662 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_entry() //  [R2, R3]
         { info_tbl: [(cfuOe,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuOe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfuOf; else goto cfuOg;
       cfuOf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuOg: // global
           I64[Sp - 8] = block_cfuOb_info;
           R1 = R3;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuOk; else goto cfuOc;
       ufuOk: // global
           call _cfuOb() args: 0, res: 0, upd: 0;
       cfuOc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuOb() //  []
         { info_tbl: [(cfuOb,
                       label: block_cfuOb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuOb: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.699267112 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation3_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation3_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation3_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation3_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(cfuOE,
                       label: GHC.Exts.$fDataSpecConstrAnnotation3_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuOE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuOF; else goto cfuOG;
       cfuOF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.$fDataSpecConstrAnnotation3_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuOG: // global
           I64[Sp - 16] = block_cfuOB_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufuOK; else goto cfuOC;
       ufuOK: // global
           call _cfuOB() args: 0, res: 0, upd: 0;
       cfuOC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuOB() //  []
         { info_tbl: [(cfuOB,
                       label: block_cfuOB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuOB: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.705521834 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation4_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation4_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation4_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation4_entry() //  [R3]
         { info_tbl: [(cfuOZ,
                       label: GHC.Exts.$fDataSpecConstrAnnotation4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuOZ: // global
           R1 = R3 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.708803856 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_entry() //  []
         { info_tbl: [(cfuPc,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuPc: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.713567958 UTC

[section ""data" . GHC.Exts.$w$cgmapMo_closure" {
     GHC.Exts.$w$cgmapMo_closure:
         const GHC.Exts.$w$cgmapMo_info;
 },
 lvl3_sfunX_entry() //  [R1]
         { info_tbl: [(cfuPt,
                       label: lvl3_sfunX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuPt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfuPu; else goto cfuPv;
       cfuPu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuPv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sfuo6_entry() //  [R1, R2]
         { info_tbl: [(cfuPI,
                       label: sat_sfuo6_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuPI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuPJ; else goto cfuPK;
       cfuPJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfuPK: // global
           I64[Sp - 24] = block_cfuPF_info;
           _sfunX::P64 = P64[R1 + 7];
           _sfunY::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _sfunX::P64;
           P64[Sp - 8] = _sfunY::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufuQ2; else goto cfuPG;
       ufuQ2: // global
           call _cfuPF(R1) args: 0, res: 0, upd: 0;
       cfuPG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuPF() //  [R1]
         { info_tbl: [(cfuPF,
                       label: block_cfuPF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuPF: // global
           I64[Sp - 8] = block_cfuPN_info;
           _sfuo3::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sfuo3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufuQ1; else goto cfuPP;
       ufuQ1: // global
           call _cfuPN(R1) args: 0, res: 0, upd: 0;
       cfuPP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfuPN() //  [R1]
         { info_tbl: [(cfuPN,
                       label: block_cfuPN_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuPN: // global
           if (R1 & 7 == 1) goto cfuPV; else goto cfuPZ;
       cfuPV: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cfuPZ: // global
           R2 = P64[Sp + 24];
           I64[Sp + 16] = stg_ap_p_info;
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 sat_sfuo0_entry() //  [R1]
         { info_tbl: [(cfuQe,
                       label: sat_sfuo0_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuQe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfuQf; else goto cfuQg;
       cfuQf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfuQg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfuQ7_info;
           _sfunY::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sfunY::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufuQn; else goto cfuQ8;
       ufuQn: // global
           call _cfuQ7(R1) args: 0, res: 0, upd: 0;
       cfuQ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cfuQ7() //  [R1]
         { info_tbl: [(cfuQ7,
                       label: block_cfuQ7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuQ7: // global
           _sfunY::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cfuQb; else goto cfuQc;
       cfuQb: // global
           R2 = _sfunY::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation2_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
       cfuQc: // global
           R2 = _sfunY::P64;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = GHC.Exts.$fDataSpecConstrAnnotation1_closure+1;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 GHC.Exts.$w$cgmapMo_entry() //  [R2, R3]
         { info_tbl: [(cfuQo,
                       label: GHC.Exts.$w$cgmapMo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuQo: // global
           _sfunW::P64 = R3;
           _sfunV::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cfuQp; else goto cfuQq;
       cfuQq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfuQs; else goto cfuQr;
       cfuQs: // global
           HpAlloc = 24;
           goto cfuQp;
       cfuQp: // global
           R3 = _sfunW::P64;
           R2 = _sfunV::P64;
           R1 = GHC.Exts.$w$cgmapMo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuQr: // global
           I64[Hp - 16] = lvl3_sfunX_info;
           P64[Hp] = _sfunV::P64;
           I64[Sp - 24] = block_cfuPw_info;
           R2 = _sfunV::P64;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _sfunW::P64;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfuPw() //  [R1]
         { info_tbl: [(cfuPw,
                       label: block_cfuPw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuPw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfuQv; else goto cfuQu;
       cfuQv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfuQu: // global
           I64[Hp - 48] = sat_sfuo6_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sfuo0_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = Hp - 24;
           P64[Sp + 16] = Hp - 47;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.731597354 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure:
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info;
 },
 GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_entry() //  [R2, R4]
         { info_tbl: [(cfuRv,
                       label: GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuRv: // global
           R3 = R4;
           R2 = R2;
           call GHC.Exts.$w$cgmapMo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.734979154 UTC

[section ""data" . GHC.Exts.$fDataSpecConstrAnnotation_closure" {
     GHC.Exts.$fDataSpecConstrAnnotation_closure:
         const Data.Data.C:Data_con_info;
         const GHC.Exts.$fDataSpecConstrAnnotation5_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgfoldl_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataTypeOf_closure+1;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast1_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cdataCast2_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation4_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation3_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQr_closure+4;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQ_closure+2;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapM_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMp_closure+3;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapMo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.737655404 UTC

[section ""cstring" . GHC.Exts.$tcIsList3_bytes" {
     GHC.Exts.$tcIsList3_bytes:
         I8[] [73,115,76,105,115,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.739383961 UTC

[section ""data" . GHC.Exts.$tcIsList2_closure" {
     GHC.Exts.$tcIsList2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Exts.$tcIsList3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.741109682 UTC

[section ""data" . GHC.Exts.$tcIsList_closure" {
     GHC.Exts.$tcIsList_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Exts.$trModule_closure+1;
         const GHC.Exts.$tcIsList2_closure+1;
         const GHC.Exts.$tcIsList1_closure+4;
         const 17963880945977000500;
         const 13985778898022155754;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.743538457 UTC

[section ""data" . GHC.Exts.C:IsList_closure" {
     GHC.Exts.C:IsList_closure:
         const GHC.Exts.C:IsList_info;
 },
 GHC.Exts.C:IsList_entry() //  [R2, R3, R4]
         { info_tbl: [(cfuRL,
                       label: GHC.Exts.C:IsList_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuRL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfuRP; else goto cfuRO;
       cfuRP: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Exts.C:IsList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfuRO: // global
           I64[Hp - 24] = GHC.Exts.C:IsList_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.747480158 UTC

[section ""data" . GHC.Exts.NoSpecConstr_closure" {
     GHC.Exts.NoSpecConstr_closure:
         const GHC.Exts.NoSpecConstr_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.749134821 UTC

[section ""data" . GHC.Exts.ForceSpecConstr_closure" {
     GHC.Exts.ForceSpecConstr_closure:
         const GHC.Exts.ForceSpecConstr_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.750903544 UTC

[GHC.Exts.C:IsList_con_entry() //  [R1]
         { info_tbl: [(cfuRY,
                       label: GHC.Exts.C:IsList_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,67,58,73,115,76,105,115,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuRY: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.754513687 UTC

[section ""relreadonly" . GHC.Exts.SpecConstrAnnotation_closure_tbl" {
     GHC.Exts.SpecConstrAnnotation_closure_tbl:
         const GHC.Exts.NoSpecConstr_closure+1;
         const GHC.Exts.ForceSpecConstr_closure+2;
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.756280243 UTC

[GHC.Exts.NoSpecConstr_con_entry() //  [R1]
         { info_tbl: [(cfuS6,
                       label: GHC.Exts.NoSpecConstr_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,78,111,83,112,101,99,67,111,110,115,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuS6: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.759648034 UTC

[GHC.Exts.ForceSpecConstr_con_entry() //  [R1]
         { info_tbl: [(cfuSd,
                       label: GHC.Exts.ForceSpecConstr_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,116,115,46,70,111,114,99,101,83,112,101,99,67,111,110,115,116,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cfuSd: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:11:12.762884156 UTC

[section ""relreadonly" . SfupV_srt" {
     SfupV_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Exts.$fIsListNonEmpty_$cfromList_closure;
         const GHC.Exts.$fIsListNonEmpty2_closure;
         const Data.Data.$wlvl_closure;
         const GHC.Exts.$w$cgunfold_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgunfold_closure;
         const GHC.Exts.the_closure;
         const GHC.Exts.the1_closure;
         const GHC.Exts.the2_closure;
         const Debug.Trace.traceEventIO1_closure;
         const GHC.List.badHead_closure;
         const w2_rftgp_closure;
         const go61_rftgs_closure;
         const w4_rftgr_closure;
         const go1_rftgt_closure;
         const Data.Data.mkConstr1_closure;
         const $tSpecConstrAnnotation3_rftgx_closure;
         const GHC.Exts.$tSpecConstrAnnotation_closure;
         const GHC.Exts.$cNoSpecConstr_closure;
         const GHC.Exts.$cForceSpecConstr_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$ctoConstr_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Maybe.fromJust1_closure;
         const GHC.Exts.$fDataSpecConstrAnnotation_$cgmapQi_closure;
 }]

