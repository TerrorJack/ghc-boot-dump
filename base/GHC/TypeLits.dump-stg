
==================== Pre unarise: ====================
2018-03-16 16:00:29.207412576 UTC

GHC.TypeLits.symbolSing [InlPrag=INLINE]
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.TypeLits.SSymbol n
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_s5tkS] v_s5tkS;

GHC.TypeLits.natVal1
  :: forall (n :: GHC.Types.Nat) (proxy :: GHC.Types.Nat -> *).
     GHC.TypeNats.KnownNat n =>
     proxy n -> GHC.TypeNats.KnownNat n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownNat_s5tkT p_s5tkU] $dKnownNat_s5tkT;

GHC.TypeLits.natVal
  :: forall (n :: GHC.Types.Nat) (proxy :: GHC.Types.Nat -> *).
     GHC.TypeNats.KnownNat n =>
     proxy n -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.natVal1 eta_B2 eta_B1;

GHC.TypeLits.symbolVal1
  :: forall (n :: GHC.Types.Symbol) (proxy :: GHC.Types.Symbol -> *).
     GHC.TypeLits.KnownSymbol n =>
     proxy n -> GHC.TypeLits.KnownSymbol n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5tkV ds_s5tkW] $dKnownSymbol_s5tkV;

GHC.TypeLits.symbolVal
  :: forall (n :: GHC.Types.Symbol) (proxy :: GHC.Types.Symbol -> *).
     GHC.TypeLits.KnownSymbol n =>
     proxy n -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.symbolVal1 eta_B2 eta_B1;

GHC.TypeLits.sameSymbol1
  :: forall (a :: GHC.Types.Symbol) (b :: GHC.Types.Symbol).
     GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Data.Type.Equality.$WRefl];

GHC.TypeLits.sameSymbol
  :: forall (a :: GHC.Types.Symbol) (b :: GHC.Types.Symbol).
     (GHC.TypeLits.KnownSymbol a, GHC.TypeLits.KnownSymbol b) =>
     Data.Proxy.Proxy a
     -> Data.Proxy.Proxy b
     -> GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><L,A><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5tkX $dKnownSymbol1_s5tkY x_s5tkZ y_s5tl0]
        case
            GHC.Base.eqString $dKnownSymbol_s5tkX $dKnownSymbol1_s5tkY
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.TypeLits.sameSymbol1;
        };

GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
  :: GHC.Types.Int -> GHC.TypeLits.SomeSymbol -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [p_s5tl2 ds_s5tl3 eta_s5tl4]
        case ds_s5tl3 of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tl6 [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5tl9 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [eta_s5tl4 $dKnownSymbol_s5tl6] \u []
                        let {
                          sat_s5tl8 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)3 eta_s5tl4];
                        } in  GHC.Show.showLitString $dKnownSymbol_s5tl6 sat_s5tl8;
              } in  : [GHC.Show.$fShow(,)3 sat_s5tl9];
        };

GHC.TypeLits.$fShowSomeSymbol2 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

GHC.TypeLits.$fShowSomeSymbol_$cshow
  :: GHC.TypeLits.SomeSymbol -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [x_s5tla]
        case x_s5tla of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlc [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5tle [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dKnownSymbol_s5tlc] \u []
                        GHC.Show.showLitString
                            $dKnownSymbol_s5tlc GHC.TypeLits.$fShowSomeSymbol2;
              } in  : [GHC.Show.$fShow(,)3 sat_s5tle];
        };

GHC.TypeLits.$fShowSomeSymbol1
  :: GHC.TypeLits.SomeSymbol -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_s5tlf eta_s5tlg]
        case ds_s5tlf of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tli [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5tll [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [eta_s5tlg $dKnownSymbol_s5tli] \u []
                        let {
                          sat_s5tlk [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)3 eta_s5tlg];
                        } in  GHC.Show.showLitString $dKnownSymbol_s5tli sat_s5tlk;
              } in  : [GHC.Show.$fShow(,)3 sat_s5tll];
        };

GHC.TypeLits.$fShowSomeSymbol_$cshowList
  :: [GHC.TypeLits.SomeSymbol] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s5tlm s_s5tln]
        GHC.Show.showList__
            GHC.TypeLits.$fShowSomeSymbol1 ls_s5tlm s_s5tln;

GHC.TypeLits.$fShowSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.TypeLits.SomeSymbol
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
                                    GHC.TypeLits.$fShowSomeSymbol_$cshow
                                    GHC.TypeLits.$fShowSomeSymbol_$cshowList];

GHC.TypeLits.$fOrdSomeSymbol_$ccompare
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5tlo ds1_s5tlp]
        case ds_s5tlo of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlr [Occ=Once]
                                  _ [Occ=Dead] ->
              case ds1_s5tlp of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tlu [Occ=Once]
                                        _ [Occ=Dead] ->
                    GHC.Classes.$fOrd[]_$s$ccompare1
                        $dKnownSymbol_s5tlr $dKnownSymbol1_s5tlu;
              };
        };

GHC.TypeLits.$fEqSomeSymbol_$c==
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5tlw ds1_s5tlx]
        case ds_s5tlw of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlz [Occ=Once]
                                  _ [Occ=Dead] ->
              case ds1_s5tlx of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tlC [Occ=Once]
                                        _ [Occ=Dead] ->
                    GHC.Base.eqString $dKnownSymbol_s5tlz $dKnownSymbol1_s5tlC;
              };
        };

GHC.TypeLits.$fEqSomeSymbol_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s5tlE eta1_s5tlF]
        case eta_s5tlE of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlH [Occ=Once]
                                  _ [Occ=Dead] ->
              case eta1_s5tlF of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tlK [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Base.eqString $dKnownSymbol_s5tlH $dKnownSymbol1_s5tlK
                    of
                    { GHC.Types.False -> GHC.Types.True [];
                      GHC.Types.True -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fEqSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.TypeLits.SomeSymbol
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.TypeLits.$fEqSomeSymbol_$c==
                                     GHC.TypeLits.$fEqSomeSymbol_$c/=];

GHC.TypeLits.$fOrdSomeSymbol_$c<
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tlN y_s5tlO]
        case x_s5tlN of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlQ [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tlO of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tlT [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tlQ $dKnownSymbol1_s5tlT
                    of
                    { __DEFAULT -> GHC.Types.False [];
                      GHC.Types.LT -> GHC.Types.True [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c>=
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tlW y_s5tlX]
        case x_s5tlW of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlZ [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tlX of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tm2 [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tlZ $dKnownSymbol1_s5tm2
                    of
                    { __DEFAULT -> GHC.Types.True [];
                      GHC.Types.LT -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c>
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tm5 y_s5tm6]
        case x_s5tm5 of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tm8 [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tm6 of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tmb [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tm8 $dKnownSymbol1_s5tmb
                    of
                    { __DEFAULT -> GHC.Types.False [];
                      GHC.Types.GT -> GHC.Types.True [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c<=
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tme y_s5tmf]
        case x_s5tme of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tmh [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tmf of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tmk [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tmh $dKnownSymbol1_s5tmk
                    of
                    { __DEFAULT -> GHC.Types.True [];
                      GHC.Types.GT -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$cmax
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.TypeLits.SomeSymbol
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tmn y_s5tmo]
        case x_s5tmn of wild_s5tmp {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tmq [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tmo of wild1_s5tms {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tmt [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tmq $dKnownSymbol1_s5tmt
                    of
                    { __DEFAULT -> wild1_s5tms;
                      GHC.Types.GT -> wild_s5tmp;
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$cmin
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.TypeLits.SomeSymbol
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tmw y_s5tmx]
        case x_s5tmw of wild_s5tmy {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tmz [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tmx of wild1_s5tmB {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tmC [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tmz $dKnownSymbol1_s5tmC
                    of
                    { __DEFAULT -> wild_s5tmy;
                      GHC.Types.GT -> wild1_s5tmB;
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.TypeLits.SomeSymbol
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.TypeLits.$fEqSomeSymbol
                                      GHC.TypeLits.$fOrdSomeSymbol_$ccompare
                                      GHC.TypeLits.$fOrdSomeSymbol_$c<
                                      GHC.TypeLits.$fOrdSomeSymbol_$c<=
                                      GHC.TypeLits.$fOrdSomeSymbol_$c>
                                      GHC.TypeLits.$fOrdSomeSymbol_$c>=
                                      GHC.TypeLits.$fOrdSomeSymbol_$cmax
                                      GHC.TypeLits.$fOrdSomeSymbol_$cmin];

GHC.TypeLits.natVal'1
  :: forall (n :: GHC.Types.Nat).
     GHC.TypeNats.KnownNat n =>
     GHC.Prim.Proxy# n -> GHC.TypeNats.KnownNat n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownNat_s5tmF p_s5tmG] $dKnownNat_s5tmF;

GHC.TypeLits.natVal'
  :: forall (n :: GHC.Types.Nat).
     GHC.TypeNats.KnownNat n =>
     GHC.Prim.Proxy# n -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.natVal'1 eta_B2 eta_B1;

GHC.TypeLits.symbolVal'1
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.Prim.Proxy# n -> GHC.TypeLits.KnownSymbol n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5tmH ds_s5tmI] $dKnownSymbol_s5tmH;

GHC.TypeLits.symbolVal'
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.Prim.Proxy# n -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.symbolVal'1 eta_B2 eta_B1;

GHC.TypeLits.someSymbolVal
  :: GHC.Base.String -> GHC.TypeLits.SomeSymbol
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s5tmJ] GHC.TypeLits.SomeSymbol [n_s5tmJ Data.Proxy.Proxy];

GHC.TypeLits.$fReadSomeSymbol_go [Occ=LoopBreaker]
  :: [(GHC.Base.String, GHC.Base.String)]
     -> [(GHC.TypeLits.SomeSymbol, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5tmK]
        case ds_s5tmK of {
          [] -> [] [];
          : y_s5tmM [Occ=Once!] ys_s5tmN [Occ=Once] ->
              case y_s5tmM of {
                (,) a_s5tmP [Occ=Once] ys1_s5tmQ [Occ=Once] ->
                    let {
                      sat_s5tmT [Occ=Once]
                        :: [(GHC.TypeLits.SomeSymbol, GHC.Base.String)]
                      [LclId] =
                          [ys_s5tmN] \u [] GHC.TypeLits.$fReadSomeSymbol_go ys_s5tmN; } in
                    let {
                      sat_s5tmR [Occ=Once] :: GHC.TypeLits.SomeSymbol
                      [LclId] =
                          CCCS GHC.TypeLits.SomeSymbol! [a_s5tmP Data.Proxy.Proxy]; } in
                    let {
                      sat_s5tmS [Occ=Once] :: (GHC.TypeLits.SomeSymbol, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s5tmR ys1_s5tmQ];
                    } in  : [sat_s5tmS sat_s5tmT];
              };
        };

GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.TypeLits.SomeSymbol
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s5tmU xs_s5tmV]
        case
            GHC.Read.list3
                GHC.Read.$fReadChar2
                p_s5tmU
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s5tmW
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s5tmW xs_s5tmV
              of
              sat_s5tmX
              { __DEFAULT -> GHC.TypeLits.$fReadSomeSymbol_go sat_s5tmX;
              };
        };

GHC.TypeLits.$fReadSomeSymbol4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.TypeLits.SomeSymbol -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5tmY eta_s5tmZ]
        let {
          sat_s5tn0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.TypeLits.SomeSymbol
          [LclId] =
              [n_s5tmY] \r [eta_B1]
                  GHC.TypeLits.$fReadSomeSymbol_$creadsPrec n_s5tmY eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s5tn0 eta_s5tmZ
          of
          { Unit# ww1_s5tn2 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s5tn2];
          };

GHC.TypeLits.$fReadSomeSymbol3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.TypeLits.$fReadSomeSymbol2
  :: Text.ParserCombinators.ReadP.P [GHC.TypeLits.SomeSymbol]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.TypeLits.$fReadSomeSymbol4
            GHC.TypeLits.$fReadSomeSymbol3
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.TypeLits.$fReadSomeSymbol_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.TypeLits.SomeSymbol]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.TypeLits.$fReadSomeSymbol2 eta_B1;

GHC.TypeLits.$fReadSomeSymbol1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.TypeLits.SomeSymbol] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5tn3 w1_s5tn4]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.TypeLits.$fReadSomeSymbol_$creadList w1_s5tn4
        of
        { Unit# ww1_s5tn6 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s5tn6];
        };

GHC.TypeLits.$fReadSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.TypeLits.SomeSymbol
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
                                    GHC.TypeLits.$fReadSomeSymbol_$creadList
                                    GHC.TypeLits.$fReadSomeSymbol4
                                    GHC.TypeLits.$fReadSomeSymbol1];

GHC.TypeLits.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.TypeLits.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$trModule4];

GHC.TypeLits.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.TypeLits"#;

GHC.TypeLits.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$trModule2];

GHC.TypeLits.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.TypeLits.$trModule3
                                     GHC.TypeLits.$trModule1];

$krep_r5tkw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r5tkx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep2_r5tky :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_r5tkz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcSymbol
                                              GHC.Types.[]];

$krep4_r5tkA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5tkx GHC.Types.[]];

$krep5_r5tkB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_r5tkA];

$krep6_r5tkC :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5tkw GHC.Types.[]];

$krep7_r5tkD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r5tkz $krep6_r5tkC];

$krep8_r5tkE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcProxy
                                              $krep7_r5tkD];

GHC.TypeLits.$tcKnownSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz $krep2_r5tky];

GHC.TypeLits.$tcSSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz
                                         GHC.Types.krep$*];

GHC.TypeLits.$tcWrapS1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz
                                         GHC.Types.krep$*Arr*];

$krep9_r5tkF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep10_r5tkG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r5tkE $krep9_r5tkF];

GHC.TypeLits.$tcErrorMessage2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ErrorMessage"#;

GHC.TypeLits.$tcErrorMessage1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcErrorMessage2];

GHC.TypeLits.$tcErrorMessage :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7630159379940119730##
                                    9206405315391268733##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcErrorMessage1
                                    0#
                                    GHC.Types.krep$*];

$krep11_r5tkH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcErrorMessage
                                              GHC.Types.[]];

GHC.TypeLits.$tc'ShowType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5tkw $krep11_r5tkH];

GHC.TypeLits.$tc'ShowType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ShowType"#;

GHC.TypeLits.$tc'ShowType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'ShowType3];

GHC.TypeLits.$tc'ShowType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8382284352214508650##
                                    11348954620262118930##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'ShowType2
                                    1#
                                    GHC.TypeLits.$tc'ShowType1];

GHC.TypeLits.$tc'Text1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz $krep11_r5tkH];

GHC.TypeLits.$tc'Text3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Text"#;

GHC.TypeLits.$tc'Text2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'Text3];

GHC.TypeLits.$tc'Text :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2493578998071024502##
                                    3678534661723514344##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'Text2
                                    0#
                                    GHC.TypeLits.$tc'Text1];

$krep12_r5tkI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r5tkH $krep11_r5tkH];

GHC.TypeLits.$tc':$$:1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r5tkH $krep12_r5tkI];

GHC.TypeLits.$tc':<>:2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "':<>:"#;

GHC.TypeLits.$tc':<>:1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc':<>:2];

GHC.TypeLits.$tc':<>: :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3983262092273118172##
                                    8733217608481743011##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc':<>:1
                                    0#
                                    GHC.TypeLits.$tc':$$:1];

GHC.TypeLits.$tc':$$:3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "':$$:"#;

GHC.TypeLits.$tc':$$:2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc':$$:3];

GHC.TypeLits.$tc':$$: :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16852088601940984151##
                                    507953211190232322##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc':$$:2
                                    0#
                                    GHC.TypeLits.$tc':$$:1];

GHC.TypeLits.$tcSSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SSymbol"#;

GHC.TypeLits.$tcSSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcSSymbol3];

GHC.TypeLits.$tcSSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6053239415793076730##
                                    11057125606635161794##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcSSymbol2
                                    0#
                                    GHC.TypeLits.$tcSSymbol1];

$krep13_r5tkJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcSSymbol
                                              $krep6_r5tkC];

GHC.TypeLits.$tc'SSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r5tkB $krep13_r5tkJ];

GHC.TypeLits.$tc'SSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SSymbol"#;

GHC.TypeLits.$tc'SSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'SSymbol3];

GHC.TypeLits.$tc'SSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1559313649785769064##
                                    360611317898112776##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'SSymbol2
                                    1#
                                    GHC.TypeLits.$tc'SSymbol1];

GHC.TypeLits.$tcKnownSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KnownSymbol"#;

GHC.TypeLits.$tcKnownSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcKnownSymbol3];

GHC.TypeLits.$tcKnownSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1897426542959159002##
                                    11426707038979253074##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcKnownSymbol2
                                    0#
                                    GHC.TypeLits.$tcKnownSymbol1];

$krep14_r5tkK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcKnownSymbol
                                              $krep6_r5tkC];

$krep15_r5tkL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_r5tkK $krep10_r5tkG];

GHC.TypeLits.$tc'C:KnownSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r5tkJ $krep14_r5tkK];

GHC.TypeLits.$tc'C:KnownSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:KnownSymbol"#;

GHC.TypeLits.$tc'C:KnownSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'C:KnownSymbol3];

GHC.TypeLits.$tc'C:KnownSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16813031602224516101##
                                    12647750771094255736##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'C:KnownSymbol2
                                    1#
                                    GHC.TypeLits.$tc'C:KnownSymbol1];

GHC.TypeLits.$tcSomeSymbol2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SomeSymbol"#;

GHC.TypeLits.$tcSomeSymbol1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcSomeSymbol2];

GHC.TypeLits.$tcSomeSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8170228625754745342##
                                    5936112829002510826##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcSomeSymbol1
                                    0#
                                    GHC.Types.krep$*];

$krep16_r5tkM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcSomeSymbol
                                              GHC.Types.[]];

$krep17_r5tkN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r5tkE $krep16_r5tkM];

GHC.TypeLits.$tc'SomeSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_r5tkK $krep17_r5tkN];

GHC.TypeLits.$tc'SomeSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SomeSymbol"#;

GHC.TypeLits.$tc'SomeSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'SomeSymbol3];

GHC.TypeLits.$tc'SomeSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3805514464201054242##
                                    4871133717641740493##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'SomeSymbol2
                                    1#
                                    GHC.TypeLits.$tc'SomeSymbol1];

GHC.TypeLits.$tcWrapS3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WrapS"#;

GHC.TypeLits.$tcWrapS2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcWrapS3];

GHC.TypeLits.$tcWrapS :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9018955994487767128##
                                    531430869376599499##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcWrapS2
                                    0#
                                    GHC.TypeLits.$tcWrapS1];

$krep18_r5tkO :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r5tkF GHC.Types.[]];

$krep19_r5tkP :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5tkw $krep18_r5tkO];

$krep20_r5tkQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcWrapS
                                              $krep19_r5tkP];

GHC.TypeLits.$tc'WrapS1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep15_r5tkL $krep20_r5tkQ];

GHC.TypeLits.$tc'WrapS3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WrapS"#;

GHC.TypeLits.$tc'WrapS2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'WrapS3];

GHC.TypeLits.$tc'WrapS :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10848673411250088112##
                                    6323353939001754670##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'WrapS2
                                    2#
                                    GHC.TypeLits.$tc'WrapS1];

GHC.TypeLits.someNatVal1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.TypeLits.someNatVal
  :: GHC.Integer.Type.Integer -> GHC.Base.Maybe GHC.TypeNats.SomeNat
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [n_s5tn7]
        case
            GHC.Integer.Type.geInteger# n_s5tn7 GHC.TypeLits.someNatVal1
        of
        { __DEFAULT -> GHC.Base.Nothing [];
          1# ->
              let {
                sat_s5tn9 [Occ=Once] :: GHC.TypeNats.KnownNat GHC.Types.Any
                [LclId] =
                    [n_s5tn7] \u [] GHC.Natural.naturalFromInteger n_s5tn7; } in
              let {
                sat_s5tna [Occ=Once] :: GHC.TypeNats.SomeNat
                [LclId] =
                    CCCS GHC.TypeNats.SomeNat! [sat_s5tn9 Data.Proxy.Proxy];
              } in  GHC.Base.Just [sat_s5tna];
        };

GHC.TypeLits.WrapS
  :: forall (a :: GHC.Types.Symbol) b.
     (GHC.TypeLits.KnownSymbol a => Data.Proxy.Proxy a -> b)
     -> GHC.TypeLits.WrapS a b
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.WrapS [eta_B1];

GHC.TypeLits.Text :: GHC.Types.Symbol -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.Text [eta_B1];

GHC.TypeLits.ShowType :: forall t. t -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.ShowType [eta_B1];

GHC.TypeLits.:<>:
  :: GHC.TypeLits.ErrorMessage
     -> GHC.TypeLits.ErrorMessage -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.:<>: [eta_B2 eta_B1];

GHC.TypeLits.:$$:
  :: GHC.TypeLits.ErrorMessage
     -> GHC.TypeLits.ErrorMessage -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m4,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.:$$: [eta_B2 eta_B1];

GHC.TypeLits.SomeSymbol
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     Data.Proxy.Proxy n -> GHC.TypeLits.SomeSymbol
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.SomeSymbol [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:00:29.220437781 UTC

GHC.TypeLits.symbolSing [InlPrag=INLINE]
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.TypeLits.SSymbol n
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_s5tkS] v_s5tkS;

GHC.TypeLits.natVal1
  :: forall (n :: GHC.Types.Nat) (proxy :: GHC.Types.Nat -> *).
     GHC.TypeNats.KnownNat n =>
     proxy n -> GHC.TypeNats.KnownNat n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownNat_s5tkT p_s5tkU] $dKnownNat_s5tkT;

GHC.TypeLits.natVal
  :: forall (n :: GHC.Types.Nat) (proxy :: GHC.Types.Nat -> *).
     GHC.TypeNats.KnownNat n =>
     proxy n -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.natVal1 eta_B2 eta_B1;

GHC.TypeLits.symbolVal1
  :: forall (n :: GHC.Types.Symbol) (proxy :: GHC.Types.Symbol -> *).
     GHC.TypeLits.KnownSymbol n =>
     proxy n -> GHC.TypeLits.KnownSymbol n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5tkV ds_s5tkW] $dKnownSymbol_s5tkV;

GHC.TypeLits.symbolVal
  :: forall (n :: GHC.Types.Symbol) (proxy :: GHC.Types.Symbol -> *).
     GHC.TypeLits.KnownSymbol n =>
     proxy n -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.symbolVal1 eta_B2 eta_B1;

GHC.TypeLits.sameSymbol1
  :: forall (a :: GHC.Types.Symbol) (b :: GHC.Types.Symbol).
     GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Data.Type.Equality.$WRefl];

GHC.TypeLits.sameSymbol
  :: forall (a :: GHC.Types.Symbol) (b :: GHC.Types.Symbol).
     (GHC.TypeLits.KnownSymbol a, GHC.TypeLits.KnownSymbol b) =>
     Data.Proxy.Proxy a
     -> Data.Proxy.Proxy b
     -> GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><L,A><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5tkX $dKnownSymbol1_s5tkY x_s5tkZ y_s5tl0]
        case
            GHC.Base.eqString $dKnownSymbol_s5tkX $dKnownSymbol1_s5tkY
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.TypeLits.sameSymbol1;
        };

GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
  :: GHC.Types.Int -> GHC.TypeLits.SomeSymbol -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [p_s5tl2 ds_s5tl3 eta_s5tl4]
        case ds_s5tl3 of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tl6 [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5tl9 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [eta_s5tl4 $dKnownSymbol_s5tl6] \u []
                        let {
                          sat_s5tl8 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)3 eta_s5tl4];
                        } in  GHC.Show.showLitString $dKnownSymbol_s5tl6 sat_s5tl8;
              } in  : [GHC.Show.$fShow(,)3 sat_s5tl9];
        };

GHC.TypeLits.$fShowSomeSymbol2 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

GHC.TypeLits.$fShowSomeSymbol_$cshow
  :: GHC.TypeLits.SomeSymbol -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [x_s5tla]
        case x_s5tla of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlc [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5tle [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dKnownSymbol_s5tlc] \u []
                        GHC.Show.showLitString
                            $dKnownSymbol_s5tlc GHC.TypeLits.$fShowSomeSymbol2;
              } in  : [GHC.Show.$fShow(,)3 sat_s5tle];
        };

GHC.TypeLits.$fShowSomeSymbol1
  :: GHC.TypeLits.SomeSymbol -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_s5tlf eta_s5tlg]
        case ds_s5tlf of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tli [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5tll [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [eta_s5tlg $dKnownSymbol_s5tli] \u []
                        let {
                          sat_s5tlk [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)3 eta_s5tlg];
                        } in  GHC.Show.showLitString $dKnownSymbol_s5tli sat_s5tlk;
              } in  : [GHC.Show.$fShow(,)3 sat_s5tll];
        };

GHC.TypeLits.$fShowSomeSymbol_$cshowList
  :: [GHC.TypeLits.SomeSymbol] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s5tlm s_s5tln]
        GHC.Show.showList__
            GHC.TypeLits.$fShowSomeSymbol1 ls_s5tlm s_s5tln;

GHC.TypeLits.$fShowSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.TypeLits.SomeSymbol
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
                                    GHC.TypeLits.$fShowSomeSymbol_$cshow
                                    GHC.TypeLits.$fShowSomeSymbol_$cshowList];

GHC.TypeLits.$fOrdSomeSymbol_$ccompare
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5tlo ds1_s5tlp]
        case ds_s5tlo of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlr [Occ=Once]
                                  _ [Occ=Dead] ->
              case ds1_s5tlp of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tlu [Occ=Once]
                                        _ [Occ=Dead] ->
                    GHC.Classes.$fOrd[]_$s$ccompare1
                        $dKnownSymbol_s5tlr $dKnownSymbol1_s5tlu;
              };
        };

GHC.TypeLits.$fEqSomeSymbol_$c==
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5tlw ds1_s5tlx]
        case ds_s5tlw of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlz [Occ=Once]
                                  _ [Occ=Dead] ->
              case ds1_s5tlx of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tlC [Occ=Once]
                                        _ [Occ=Dead] ->
                    GHC.Base.eqString $dKnownSymbol_s5tlz $dKnownSymbol1_s5tlC;
              };
        };

GHC.TypeLits.$fEqSomeSymbol_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s5tlE eta1_s5tlF]
        case eta_s5tlE of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlH [Occ=Once]
                                  _ [Occ=Dead] ->
              case eta1_s5tlF of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tlK [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Base.eqString $dKnownSymbol_s5tlH $dKnownSymbol1_s5tlK
                    of
                    { GHC.Types.False -> GHC.Types.True [];
                      GHC.Types.True -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fEqSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.TypeLits.SomeSymbol
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.TypeLits.$fEqSomeSymbol_$c==
                                     GHC.TypeLits.$fEqSomeSymbol_$c/=];

GHC.TypeLits.$fOrdSomeSymbol_$c<
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tlN y_s5tlO]
        case x_s5tlN of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlQ [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tlO of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tlT [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tlQ $dKnownSymbol1_s5tlT
                    of
                    { __DEFAULT -> GHC.Types.False [];
                      GHC.Types.LT -> GHC.Types.True [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c>=
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tlW y_s5tlX]
        case x_s5tlW of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tlZ [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tlX of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tm2 [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tlZ $dKnownSymbol1_s5tm2
                    of
                    { __DEFAULT -> GHC.Types.True [];
                      GHC.Types.LT -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c>
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tm5 y_s5tm6]
        case x_s5tm5 of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tm8 [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tm6 of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tmb [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tm8 $dKnownSymbol1_s5tmb
                    of
                    { __DEFAULT -> GHC.Types.False [];
                      GHC.Types.GT -> GHC.Types.True [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c<=
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tme y_s5tmf]
        case x_s5tme of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tmh [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tmf of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tmk [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tmh $dKnownSymbol1_s5tmk
                    of
                    { __DEFAULT -> GHC.Types.True [];
                      GHC.Types.GT -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$cmax
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.TypeLits.SomeSymbol
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tmn y_s5tmo]
        case x_s5tmn of wild_s5tmp {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tmq [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tmo of wild1_s5tms {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tmt [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tmq $dKnownSymbol1_s5tmt
                    of
                    { __DEFAULT -> wild1_s5tms;
                      GHC.Types.GT -> wild_s5tmp;
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$cmin
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.TypeLits.SomeSymbol
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5tmw y_s5tmx]
        case x_s5tmw of wild_s5tmy {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5tmz [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5tmx of wild1_s5tmB {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5tmC [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5tmz $dKnownSymbol1_s5tmC
                    of
                    { __DEFAULT -> wild_s5tmy;
                      GHC.Types.GT -> wild1_s5tmB;
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.TypeLits.SomeSymbol
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.TypeLits.$fEqSomeSymbol
                                      GHC.TypeLits.$fOrdSomeSymbol_$ccompare
                                      GHC.TypeLits.$fOrdSomeSymbol_$c<
                                      GHC.TypeLits.$fOrdSomeSymbol_$c<=
                                      GHC.TypeLits.$fOrdSomeSymbol_$c>
                                      GHC.TypeLits.$fOrdSomeSymbol_$c>=
                                      GHC.TypeLits.$fOrdSomeSymbol_$cmax
                                      GHC.TypeLits.$fOrdSomeSymbol_$cmin];

GHC.TypeLits.natVal'1
  :: forall (n :: GHC.Types.Nat).
     GHC.TypeNats.KnownNat n =>
     GHC.Prim.Proxy# n -> GHC.TypeNats.KnownNat n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownNat_s5tmF void_0E] $dKnownNat_s5tmF;

GHC.TypeLits.natVal'
  :: forall (n :: GHC.Types.Nat).
     GHC.TypeNats.KnownNat n =>
     GHC.Prim.Proxy# n -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.TypeLits.natVal'1 eta_B2 GHC.Prim.void#;

GHC.TypeLits.symbolVal'1
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.Prim.Proxy# n -> GHC.TypeLits.KnownSymbol n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5tmH void_0E] $dKnownSymbol_s5tmH;

GHC.TypeLits.symbolVal'
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.Prim.Proxy# n -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.TypeLits.symbolVal'1 eta_B2 GHC.Prim.void#;

GHC.TypeLits.someSymbolVal
  :: GHC.Base.String -> GHC.TypeLits.SomeSymbol
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s5tmJ] GHC.TypeLits.SomeSymbol [n_s5tmJ Data.Proxy.Proxy];

GHC.TypeLits.$fReadSomeSymbol_go [Occ=LoopBreaker]
  :: [(GHC.Base.String, GHC.Base.String)]
     -> [(GHC.TypeLits.SomeSymbol, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5tmK]
        case ds_s5tmK of {
          [] -> [] [];
          : y_s5tmM [Occ=Once!] ys_s5tmN [Occ=Once] ->
              case y_s5tmM of {
                (,) a_s5tmP [Occ=Once] ys1_s5tmQ [Occ=Once] ->
                    let {
                      sat_s5tmT [Occ=Once]
                        :: [(GHC.TypeLits.SomeSymbol, GHC.Base.String)]
                      [LclId] =
                          [ys_s5tmN] \u [] GHC.TypeLits.$fReadSomeSymbol_go ys_s5tmN; } in
                    let {
                      sat_s5tmR [Occ=Once] :: GHC.TypeLits.SomeSymbol
                      [LclId] =
                          CCCS GHC.TypeLits.SomeSymbol! [a_s5tmP Data.Proxy.Proxy]; } in
                    let {
                      sat_s5tmS [Occ=Once] :: (GHC.TypeLits.SomeSymbol, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s5tmR ys1_s5tmQ];
                    } in  : [sat_s5tmS sat_s5tmT];
              };
        };

GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.TypeLits.SomeSymbol
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s5tmU xs_s5tmV]
        case
            GHC.Read.list3
                GHC.Read.$fReadChar2
                p_s5tmU
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s5tmW
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s5tmW xs_s5tmV
              of
              sat_s5tmX
              { __DEFAULT -> GHC.TypeLits.$fReadSomeSymbol_go sat_s5tmX;
              };
        };

GHC.TypeLits.$fReadSomeSymbol4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.TypeLits.SomeSymbol -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5tmY eta_s5tmZ]
        let {
          sat_s5tn0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.TypeLits.SomeSymbol
          [LclId] =
              [n_s5tmY] \r [eta_B1]
                  GHC.TypeLits.$fReadSomeSymbol_$creadsPrec n_s5tmY eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s5tn0 eta_s5tmZ
          of
          { Unit# ww1_s5tn2 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s5tn2];
          };

GHC.TypeLits.$fReadSomeSymbol3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.TypeLits.$fReadSomeSymbol2
  :: Text.ParserCombinators.ReadP.P [GHC.TypeLits.SomeSymbol]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.TypeLits.$fReadSomeSymbol4
            GHC.TypeLits.$fReadSomeSymbol3
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.TypeLits.$fReadSomeSymbol_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.TypeLits.SomeSymbol]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.TypeLits.$fReadSomeSymbol2 eta_B1;

GHC.TypeLits.$fReadSomeSymbol1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.TypeLits.SomeSymbol] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5tn3 w1_s5tn4]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.TypeLits.$fReadSomeSymbol_$creadList w1_s5tn4
        of
        { Unit# ww1_s5tn6 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s5tn6];
        };

GHC.TypeLits.$fReadSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.TypeLits.SomeSymbol
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
                                    GHC.TypeLits.$fReadSomeSymbol_$creadList
                                    GHC.TypeLits.$fReadSomeSymbol4
                                    GHC.TypeLits.$fReadSomeSymbol1];

GHC.TypeLits.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.TypeLits.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$trModule4];

GHC.TypeLits.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.TypeLits"#;

GHC.TypeLits.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$trModule2];

GHC.TypeLits.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.TypeLits.$trModule3
                                     GHC.TypeLits.$trModule1];

$krep_r5tkw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r5tkx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep2_r5tky :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_r5tkz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcSymbol
                                              GHC.Types.[]];

$krep4_r5tkA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5tkx GHC.Types.[]];

$krep5_r5tkB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_r5tkA];

$krep6_r5tkC :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5tkw GHC.Types.[]];

$krep7_r5tkD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r5tkz $krep6_r5tkC];

$krep8_r5tkE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcProxy
                                              $krep7_r5tkD];

GHC.TypeLits.$tcKnownSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz $krep2_r5tky];

GHC.TypeLits.$tcSSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz
                                         GHC.Types.krep$*];

GHC.TypeLits.$tcWrapS1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz
                                         GHC.Types.krep$*Arr*];

$krep9_r5tkF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep10_r5tkG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r5tkE $krep9_r5tkF];

GHC.TypeLits.$tcErrorMessage2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ErrorMessage"#;

GHC.TypeLits.$tcErrorMessage1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcErrorMessage2];

GHC.TypeLits.$tcErrorMessage :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7630159379940119730##
                                    9206405315391268733##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcErrorMessage1
                                    0#
                                    GHC.Types.krep$*];

$krep11_r5tkH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcErrorMessage
                                              GHC.Types.[]];

GHC.TypeLits.$tc'ShowType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5tkw $krep11_r5tkH];

GHC.TypeLits.$tc'ShowType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ShowType"#;

GHC.TypeLits.$tc'ShowType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'ShowType3];

GHC.TypeLits.$tc'ShowType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8382284352214508650##
                                    11348954620262118930##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'ShowType2
                                    1#
                                    GHC.TypeLits.$tc'ShowType1];

GHC.TypeLits.$tc'Text1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz $krep11_r5tkH];

GHC.TypeLits.$tc'Text3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Text"#;

GHC.TypeLits.$tc'Text2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'Text3];

GHC.TypeLits.$tc'Text :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2493578998071024502##
                                    3678534661723514344##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'Text2
                                    0#
                                    GHC.TypeLits.$tc'Text1];

$krep12_r5tkI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r5tkH $krep11_r5tkH];

GHC.TypeLits.$tc':$$:1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r5tkH $krep12_r5tkI];

GHC.TypeLits.$tc':<>:2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "':<>:"#;

GHC.TypeLits.$tc':<>:1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc':<>:2];

GHC.TypeLits.$tc':<>: :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3983262092273118172##
                                    8733217608481743011##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc':<>:1
                                    0#
                                    GHC.TypeLits.$tc':$$:1];

GHC.TypeLits.$tc':$$:3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "':$$:"#;

GHC.TypeLits.$tc':$$:2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc':$$:3];

GHC.TypeLits.$tc':$$: :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16852088601940984151##
                                    507953211190232322##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc':$$:2
                                    0#
                                    GHC.TypeLits.$tc':$$:1];

GHC.TypeLits.$tcSSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SSymbol"#;

GHC.TypeLits.$tcSSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcSSymbol3];

GHC.TypeLits.$tcSSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6053239415793076730##
                                    11057125606635161794##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcSSymbol2
                                    0#
                                    GHC.TypeLits.$tcSSymbol1];

$krep13_r5tkJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcSSymbol
                                              $krep6_r5tkC];

GHC.TypeLits.$tc'SSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r5tkB $krep13_r5tkJ];

GHC.TypeLits.$tc'SSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SSymbol"#;

GHC.TypeLits.$tc'SSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'SSymbol3];

GHC.TypeLits.$tc'SSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1559313649785769064##
                                    360611317898112776##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'SSymbol2
                                    1#
                                    GHC.TypeLits.$tc'SSymbol1];

GHC.TypeLits.$tcKnownSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KnownSymbol"#;

GHC.TypeLits.$tcKnownSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcKnownSymbol3];

GHC.TypeLits.$tcKnownSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1897426542959159002##
                                    11426707038979253074##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcKnownSymbol2
                                    0#
                                    GHC.TypeLits.$tcKnownSymbol1];

$krep14_r5tkK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcKnownSymbol
                                              $krep6_r5tkC];

$krep15_r5tkL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_r5tkK $krep10_r5tkG];

GHC.TypeLits.$tc'C:KnownSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r5tkJ $krep14_r5tkK];

GHC.TypeLits.$tc'C:KnownSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:KnownSymbol"#;

GHC.TypeLits.$tc'C:KnownSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'C:KnownSymbol3];

GHC.TypeLits.$tc'C:KnownSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16813031602224516101##
                                    12647750771094255736##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'C:KnownSymbol2
                                    1#
                                    GHC.TypeLits.$tc'C:KnownSymbol1];

GHC.TypeLits.$tcSomeSymbol2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SomeSymbol"#;

GHC.TypeLits.$tcSomeSymbol1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcSomeSymbol2];

GHC.TypeLits.$tcSomeSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8170228625754745342##
                                    5936112829002510826##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcSomeSymbol1
                                    0#
                                    GHC.Types.krep$*];

$krep16_r5tkM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcSomeSymbol
                                              GHC.Types.[]];

$krep17_r5tkN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r5tkE $krep16_r5tkM];

GHC.TypeLits.$tc'SomeSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_r5tkK $krep17_r5tkN];

GHC.TypeLits.$tc'SomeSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SomeSymbol"#;

GHC.TypeLits.$tc'SomeSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'SomeSymbol3];

GHC.TypeLits.$tc'SomeSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3805514464201054242##
                                    4871133717641740493##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'SomeSymbol2
                                    1#
                                    GHC.TypeLits.$tc'SomeSymbol1];

GHC.TypeLits.$tcWrapS3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WrapS"#;

GHC.TypeLits.$tcWrapS2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcWrapS3];

GHC.TypeLits.$tcWrapS :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9018955994487767128##
                                    531430869376599499##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcWrapS2
                                    0#
                                    GHC.TypeLits.$tcWrapS1];

$krep18_r5tkO :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r5tkF GHC.Types.[]];

$krep19_r5tkP :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5tkw $krep18_r5tkO];

$krep20_r5tkQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcWrapS
                                              $krep19_r5tkP];

GHC.TypeLits.$tc'WrapS1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep15_r5tkL $krep20_r5tkQ];

GHC.TypeLits.$tc'WrapS3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WrapS"#;

GHC.TypeLits.$tc'WrapS2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'WrapS3];

GHC.TypeLits.$tc'WrapS :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10848673411250088112##
                                    6323353939001754670##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'WrapS2
                                    2#
                                    GHC.TypeLits.$tc'WrapS1];

GHC.TypeLits.someNatVal1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.TypeLits.someNatVal
  :: GHC.Integer.Type.Integer -> GHC.Base.Maybe GHC.TypeNats.SomeNat
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [n_s5tn7]
        case
            GHC.Integer.Type.geInteger# n_s5tn7 GHC.TypeLits.someNatVal1
        of
        { __DEFAULT -> GHC.Base.Nothing [];
          1# ->
              let {
                sat_s5tn9 [Occ=Once] :: GHC.TypeNats.KnownNat GHC.Types.Any
                [LclId] =
                    [n_s5tn7] \u [] GHC.Natural.naturalFromInteger n_s5tn7; } in
              let {
                sat_s5tna [Occ=Once] :: GHC.TypeNats.SomeNat
                [LclId] =
                    CCCS GHC.TypeNats.SomeNat! [sat_s5tn9 Data.Proxy.Proxy];
              } in  GHC.Base.Just [sat_s5tna];
        };

GHC.TypeLits.WrapS
  :: forall (a :: GHC.Types.Symbol) b.
     (GHC.TypeLits.KnownSymbol a => Data.Proxy.Proxy a -> b)
     -> GHC.TypeLits.WrapS a b
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.WrapS [eta_B1];

GHC.TypeLits.Text :: GHC.Types.Symbol -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.Text [eta_B1];

GHC.TypeLits.ShowType :: forall t. t -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.ShowType [eta_B1];

GHC.TypeLits.:<>:
  :: GHC.TypeLits.ErrorMessage
     -> GHC.TypeLits.ErrorMessage -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.:<>: [eta_B2 eta_B1];

GHC.TypeLits.:$$:
  :: GHC.TypeLits.ErrorMessage
     -> GHC.TypeLits.ErrorMessage -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m4,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.:$$: [eta_B2 eta_B1];

GHC.TypeLits.SomeSymbol
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     Data.Proxy.Proxy n -> GHC.TypeLits.SomeSymbol
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.SomeSymbol [eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:00:30.674971514 UTC

GHC.TypeLits.symbolSing [InlPrag=INLINE]
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.TypeLits.SSymbol n
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_s5u1K] v_s5u1K;

GHC.TypeLits.natVal1
  :: forall (n :: GHC.Types.Nat) (proxy :: GHC.Types.Nat -> *).
     GHC.TypeNats.KnownNat n =>
     proxy n -> GHC.TypeNats.KnownNat n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownNat_s5u1L p_s5u1M] $dKnownNat_s5u1L;

GHC.TypeLits.natVal
  :: forall (n :: GHC.Types.Nat) (proxy :: GHC.Types.Nat -> *).
     GHC.TypeNats.KnownNat n =>
     proxy n -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.natVal1 eta_B2 eta_B1;

GHC.TypeLits.symbolVal1
  :: forall (n :: GHC.Types.Symbol) (proxy :: GHC.Types.Symbol -> *).
     GHC.TypeLits.KnownSymbol n =>
     proxy n -> GHC.TypeLits.KnownSymbol n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5u1N ds_s5u1O] $dKnownSymbol_s5u1N;

GHC.TypeLits.symbolVal
  :: forall (n :: GHC.Types.Symbol) (proxy :: GHC.Types.Symbol -> *).
     GHC.TypeLits.KnownSymbol n =>
     proxy n -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.symbolVal1 eta_B2 eta_B1;

GHC.TypeLits.sameSymbol1
  :: forall (a :: GHC.Types.Symbol) (b :: GHC.Types.Symbol).
     GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Data.Type.Equality.$WRefl];

GHC.TypeLits.sameSymbol
  :: forall (a :: GHC.Types.Symbol) (b :: GHC.Types.Symbol).
     (GHC.TypeLits.KnownSymbol a, GHC.TypeLits.KnownSymbol b) =>
     Data.Proxy.Proxy a
     -> Data.Proxy.Proxy b
     -> GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><L,A><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5u1P $dKnownSymbol1_s5u1Q x_s5u1R y_s5u1S]
        case
            GHC.Base.eqString $dKnownSymbol_s5u1P $dKnownSymbol1_s5u1Q
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.TypeLits.sameSymbol1;
        };

GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
  :: GHC.Types.Int -> GHC.TypeLits.SomeSymbol -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [p_s5u1U ds_s5u1V eta_s5u1W]
        case ds_s5u1V of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u1Y [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5u21 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [eta_s5u1W $dKnownSymbol_s5u1Y] \u []
                        let {
                          sat_s5u20 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)3 eta_s5u1W];
                        } in  GHC.Show.showLitString $dKnownSymbol_s5u1Y sat_s5u20;
              } in  : [GHC.Show.$fShow(,)3 sat_s5u21];
        };

GHC.TypeLits.$fShowSomeSymbol2 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

GHC.TypeLits.$fShowSomeSymbol_$cshow
  :: GHC.TypeLits.SomeSymbol -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [x_s5u22]
        case x_s5u22 of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u24 [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5u26 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dKnownSymbol_s5u24] \u []
                        GHC.Show.showLitString
                            $dKnownSymbol_s5u24 GHC.TypeLits.$fShowSomeSymbol2;
              } in  : [GHC.Show.$fShow(,)3 sat_s5u26];
        };

GHC.TypeLits.$fShowSomeSymbol1
  :: GHC.TypeLits.SomeSymbol -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_s5u27 eta_s5u28]
        case ds_s5u27 of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2a [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5u2d [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [eta_s5u28 $dKnownSymbol_s5u2a] \u []
                        let {
                          sat_s5u2c [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)3 eta_s5u28];
                        } in  GHC.Show.showLitString $dKnownSymbol_s5u2a sat_s5u2c;
              } in  : [GHC.Show.$fShow(,)3 sat_s5u2d];
        };

GHC.TypeLits.$fShowSomeSymbol_$cshowList
  :: [GHC.TypeLits.SomeSymbol] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s5u2e s_s5u2f]
        GHC.Show.showList__
            GHC.TypeLits.$fShowSomeSymbol1 ls_s5u2e s_s5u2f;

GHC.TypeLits.$fShowSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.TypeLits.SomeSymbol
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
                                    GHC.TypeLits.$fShowSomeSymbol_$cshow
                                    GHC.TypeLits.$fShowSomeSymbol_$cshowList];

GHC.TypeLits.$fOrdSomeSymbol_$ccompare
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5u2g ds1_s5u2h]
        case ds_s5u2g of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2j [Occ=Once]
                                  _ [Occ=Dead] ->
              case ds1_s5u2h of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u2m [Occ=Once]
                                        _ [Occ=Dead] ->
                    GHC.Classes.$fOrd[]_$s$ccompare1
                        $dKnownSymbol_s5u2j $dKnownSymbol1_s5u2m;
              };
        };

GHC.TypeLits.$fEqSomeSymbol_$c==
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5u2o ds1_s5u2p]
        case ds_s5u2o of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2r [Occ=Once]
                                  _ [Occ=Dead] ->
              case ds1_s5u2p of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u2u [Occ=Once]
                                        _ [Occ=Dead] ->
                    GHC.Base.eqString $dKnownSymbol_s5u2r $dKnownSymbol1_s5u2u;
              };
        };

GHC.TypeLits.$fEqSomeSymbol_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s5u2w eta1_s5u2x]
        case eta_s5u2w of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2z [Occ=Once]
                                  _ [Occ=Dead] ->
              case eta1_s5u2x of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u2C [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Base.eqString $dKnownSymbol_s5u2z $dKnownSymbol1_s5u2C
                    of
                    { GHC.Types.False -> GHC.Types.True [];
                      GHC.Types.True -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fEqSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.TypeLits.SomeSymbol
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.TypeLits.$fEqSomeSymbol_$c==
                                     GHC.TypeLits.$fEqSomeSymbol_$c/=];

GHC.TypeLits.$fOrdSomeSymbol_$c<
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u2F y_s5u2G]
        case x_s5u2F of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2I [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u2G of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u2L [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u2I $dKnownSymbol1_s5u2L
                    of
                    { __DEFAULT -> GHC.Types.False [];
                      GHC.Types.LT -> GHC.Types.True [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c>=
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u2O y_s5u2P]
        case x_s5u2O of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2R [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u2P of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u2U [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u2R $dKnownSymbol1_s5u2U
                    of
                    { __DEFAULT -> GHC.Types.True [];
                      GHC.Types.LT -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c>
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u2X y_s5u2Y]
        case x_s5u2X of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u30 [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u2Y of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u33 [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u30 $dKnownSymbol1_s5u33
                    of
                    { __DEFAULT -> GHC.Types.False [];
                      GHC.Types.GT -> GHC.Types.True [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c<=
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u36 y_s5u37]
        case x_s5u36 of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u39 [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u37 of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u3c [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u39 $dKnownSymbol1_s5u3c
                    of
                    { __DEFAULT -> GHC.Types.True [];
                      GHC.Types.GT -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$cmax
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.TypeLits.SomeSymbol
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u3f y_s5u3g]
        case x_s5u3f of wild_s5u3h {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u3i [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u3g of wild1_s5u3k {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u3l [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u3i $dKnownSymbol1_s5u3l
                    of
                    { __DEFAULT -> wild1_s5u3k;
                      GHC.Types.GT -> wild_s5u3h;
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$cmin
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.TypeLits.SomeSymbol
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u3o y_s5u3p]
        case x_s5u3o of wild_s5u3q {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u3r [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u3p of wild1_s5u3t {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u3u [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u3r $dKnownSymbol1_s5u3u
                    of
                    { __DEFAULT -> wild_s5u3q;
                      GHC.Types.GT -> wild1_s5u3t;
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.TypeLits.SomeSymbol
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.TypeLits.$fEqSomeSymbol
                                      GHC.TypeLits.$fOrdSomeSymbol_$ccompare
                                      GHC.TypeLits.$fOrdSomeSymbol_$c<
                                      GHC.TypeLits.$fOrdSomeSymbol_$c<=
                                      GHC.TypeLits.$fOrdSomeSymbol_$c>
                                      GHC.TypeLits.$fOrdSomeSymbol_$c>=
                                      GHC.TypeLits.$fOrdSomeSymbol_$cmax
                                      GHC.TypeLits.$fOrdSomeSymbol_$cmin];

GHC.TypeLits.natVal'1
  :: forall (n :: GHC.Types.Nat).
     GHC.TypeNats.KnownNat n =>
     GHC.Prim.Proxy# n -> GHC.TypeNats.KnownNat n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownNat_s5u3x p_s5u3y] $dKnownNat_s5u3x;

GHC.TypeLits.natVal'
  :: forall (n :: GHC.Types.Nat).
     GHC.TypeNats.KnownNat n =>
     GHC.Prim.Proxy# n -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.natVal'1 eta_B2 eta_B1;

GHC.TypeLits.symbolVal'1
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.Prim.Proxy# n -> GHC.TypeLits.KnownSymbol n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5u3z ds_s5u3A] $dKnownSymbol_s5u3z;

GHC.TypeLits.symbolVal'
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.Prim.Proxy# n -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.symbolVal'1 eta_B2 eta_B1;

GHC.TypeLits.someSymbolVal
  :: GHC.Base.String -> GHC.TypeLits.SomeSymbol
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s5u3B] GHC.TypeLits.SomeSymbol [n_s5u3B Data.Proxy.Proxy];

GHC.TypeLits.$fReadSomeSymbol_go [Occ=LoopBreaker]
  :: [(GHC.Base.String, GHC.Base.String)]
     -> [(GHC.TypeLits.SomeSymbol, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5u3C]
        case ds_s5u3C of {
          [] -> [] [];
          : y_s5u3E [Occ=Once!] ys_s5u3F [Occ=Once] ->
              case y_s5u3E of {
                (,) a_s5u3H [Occ=Once] ys1_s5u3I [Occ=Once] ->
                    let {
                      sat_s5u3L [Occ=Once]
                        :: [(GHC.TypeLits.SomeSymbol, GHC.Base.String)]
                      [LclId] =
                          [ys_s5u3F] \u [] GHC.TypeLits.$fReadSomeSymbol_go ys_s5u3F; } in
                    let {
                      sat_s5u3J [Occ=Once] :: GHC.TypeLits.SomeSymbol
                      [LclId] =
                          CCCS GHC.TypeLits.SomeSymbol! [a_s5u3H Data.Proxy.Proxy]; } in
                    let {
                      sat_s5u3K [Occ=Once] :: (GHC.TypeLits.SomeSymbol, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s5u3J ys1_s5u3I];
                    } in  : [sat_s5u3K sat_s5u3L];
              };
        };

GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.TypeLits.SomeSymbol
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s5u3M xs_s5u3N]
        case
            GHC.Read.list3
                GHC.Read.$fReadChar2
                p_s5u3M
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s5u3O
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s5u3O xs_s5u3N
              of
              sat_s5u3P
              { __DEFAULT -> GHC.TypeLits.$fReadSomeSymbol_go sat_s5u3P;
              };
        };

GHC.TypeLits.$fReadSomeSymbol4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.TypeLits.SomeSymbol -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5u3Q eta_s5u3R]
        let {
          sat_s5u3S [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.TypeLits.SomeSymbol
          [LclId] =
              [n_s5u3Q] \r [eta_B1]
                  GHC.TypeLits.$fReadSomeSymbol_$creadsPrec n_s5u3Q eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s5u3S eta_s5u3R
          of
          { Unit# ww1_s5u3U [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s5u3U];
          };

GHC.TypeLits.$fReadSomeSymbol3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.TypeLits.$fReadSomeSymbol2
  :: Text.ParserCombinators.ReadP.P [GHC.TypeLits.SomeSymbol]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.TypeLits.$fReadSomeSymbol4
            GHC.TypeLits.$fReadSomeSymbol3
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.TypeLits.$fReadSomeSymbol_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.TypeLits.SomeSymbol]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.TypeLits.$fReadSomeSymbol2 eta_B1;

GHC.TypeLits.$fReadSomeSymbol1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.TypeLits.SomeSymbol] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5u3V w1_s5u3W]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.TypeLits.$fReadSomeSymbol_$creadList w1_s5u3W
        of
        { Unit# ww1_s5u3Y [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s5u3Y];
        };

GHC.TypeLits.$fReadSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.TypeLits.SomeSymbol
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
                                    GHC.TypeLits.$fReadSomeSymbol_$creadList
                                    GHC.TypeLits.$fReadSomeSymbol4
                                    GHC.TypeLits.$fReadSomeSymbol1];

GHC.TypeLits.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.TypeLits.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$trModule4];

GHC.TypeLits.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.TypeLits"#;

GHC.TypeLits.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$trModule2];

GHC.TypeLits.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.TypeLits.$trModule3
                                     GHC.TypeLits.$trModule1];

$krep_r5tkw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r5tkx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep2_r5tky :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_r5tkz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcSymbol
                                              GHC.Types.[]];

$krep4_r5tkA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5tkx GHC.Types.[]];

$krep5_r5tkB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_r5tkA];

$krep6_r5tkC :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5tkw GHC.Types.[]];

$krep7_r5tkD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r5tkz $krep6_r5tkC];

$krep8_r5tkE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcProxy
                                              $krep7_r5tkD];

GHC.TypeLits.$tcKnownSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz $krep2_r5tky];

GHC.TypeLits.$tcSSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz
                                         GHC.Types.krep$*];

GHC.TypeLits.$tcWrapS1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz
                                         GHC.Types.krep$*Arr*];

$krep9_r5tkF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep10_r5tkG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r5tkE $krep9_r5tkF];

GHC.TypeLits.$tcErrorMessage2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ErrorMessage"#;

GHC.TypeLits.$tcErrorMessage1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcErrorMessage2];

GHC.TypeLits.$tcErrorMessage :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7630159379940119730##
                                    9206405315391268733##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcErrorMessage1
                                    0#
                                    GHC.Types.krep$*];

$krep11_r5tkH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcErrorMessage
                                              GHC.Types.[]];

GHC.TypeLits.$tc'ShowType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5tkw $krep11_r5tkH];

GHC.TypeLits.$tc'ShowType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ShowType"#;

GHC.TypeLits.$tc'ShowType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'ShowType3];

GHC.TypeLits.$tc'ShowType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8382284352214508650##
                                    11348954620262118930##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'ShowType2
                                    1#
                                    GHC.TypeLits.$tc'ShowType1];

GHC.TypeLits.$tc'Text1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz $krep11_r5tkH];

GHC.TypeLits.$tc'Text3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Text"#;

GHC.TypeLits.$tc'Text2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'Text3];

GHC.TypeLits.$tc'Text :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2493578998071024502##
                                    3678534661723514344##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'Text2
                                    0#
                                    GHC.TypeLits.$tc'Text1];

$krep12_r5tkI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r5tkH $krep11_r5tkH];

GHC.TypeLits.$tc':$$:1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r5tkH $krep12_r5tkI];

GHC.TypeLits.$tc':<>:2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "':<>:"#;

GHC.TypeLits.$tc':<>:1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc':<>:2];

GHC.TypeLits.$tc':<>: :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3983262092273118172##
                                    8733217608481743011##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc':<>:1
                                    0#
                                    GHC.TypeLits.$tc':$$:1];

GHC.TypeLits.$tc':$$:3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "':$$:"#;

GHC.TypeLits.$tc':$$:2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc':$$:3];

GHC.TypeLits.$tc':$$: :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16852088601940984151##
                                    507953211190232322##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc':$$:2
                                    0#
                                    GHC.TypeLits.$tc':$$:1];

GHC.TypeLits.$tcSSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SSymbol"#;

GHC.TypeLits.$tcSSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcSSymbol3];

GHC.TypeLits.$tcSSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6053239415793076730##
                                    11057125606635161794##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcSSymbol2
                                    0#
                                    GHC.TypeLits.$tcSSymbol1];

$krep13_r5tkJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcSSymbol
                                              $krep6_r5tkC];

GHC.TypeLits.$tc'SSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r5tkB $krep13_r5tkJ];

GHC.TypeLits.$tc'SSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SSymbol"#;

GHC.TypeLits.$tc'SSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'SSymbol3];

GHC.TypeLits.$tc'SSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1559313649785769064##
                                    360611317898112776##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'SSymbol2
                                    1#
                                    GHC.TypeLits.$tc'SSymbol1];

GHC.TypeLits.$tcKnownSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KnownSymbol"#;

GHC.TypeLits.$tcKnownSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcKnownSymbol3];

GHC.TypeLits.$tcKnownSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1897426542959159002##
                                    11426707038979253074##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcKnownSymbol2
                                    0#
                                    GHC.TypeLits.$tcKnownSymbol1];

$krep14_r5tkK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcKnownSymbol
                                              $krep6_r5tkC];

$krep15_r5tkL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_r5tkK $krep10_r5tkG];

GHC.TypeLits.$tc'C:KnownSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r5tkJ $krep14_r5tkK];

GHC.TypeLits.$tc'C:KnownSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:KnownSymbol"#;

GHC.TypeLits.$tc'C:KnownSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'C:KnownSymbol3];

GHC.TypeLits.$tc'C:KnownSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16813031602224516101##
                                    12647750771094255736##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'C:KnownSymbol2
                                    1#
                                    GHC.TypeLits.$tc'C:KnownSymbol1];

GHC.TypeLits.$tcSomeSymbol2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SomeSymbol"#;

GHC.TypeLits.$tcSomeSymbol1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcSomeSymbol2];

GHC.TypeLits.$tcSomeSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8170228625754745342##
                                    5936112829002510826##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcSomeSymbol1
                                    0#
                                    GHC.Types.krep$*];

$krep16_r5tkM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcSomeSymbol
                                              GHC.Types.[]];

$krep17_r5tkN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r5tkE $krep16_r5tkM];

GHC.TypeLits.$tc'SomeSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_r5tkK $krep17_r5tkN];

GHC.TypeLits.$tc'SomeSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SomeSymbol"#;

GHC.TypeLits.$tc'SomeSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'SomeSymbol3];

GHC.TypeLits.$tc'SomeSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3805514464201054242##
                                    4871133717641740493##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'SomeSymbol2
                                    1#
                                    GHC.TypeLits.$tc'SomeSymbol1];

GHC.TypeLits.$tcWrapS3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WrapS"#;

GHC.TypeLits.$tcWrapS2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcWrapS3];

GHC.TypeLits.$tcWrapS :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9018955994487767128##
                                    531430869376599499##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcWrapS2
                                    0#
                                    GHC.TypeLits.$tcWrapS1];

$krep18_r5tkO :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r5tkF GHC.Types.[]];

$krep19_r5tkP :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5tkw $krep18_r5tkO];

$krep20_r5tkQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcWrapS
                                              $krep19_r5tkP];

GHC.TypeLits.$tc'WrapS1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep15_r5tkL $krep20_r5tkQ];

GHC.TypeLits.$tc'WrapS3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WrapS"#;

GHC.TypeLits.$tc'WrapS2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'WrapS3];

GHC.TypeLits.$tc'WrapS :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10848673411250088112##
                                    6323353939001754670##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'WrapS2
                                    2#
                                    GHC.TypeLits.$tc'WrapS1];

GHC.TypeLits.someNatVal1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.TypeLits.someNatVal
  :: GHC.Integer.Type.Integer -> GHC.Base.Maybe GHC.TypeNats.SomeNat
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [n_s5u3Z]
        case
            GHC.Integer.Type.geInteger# n_s5u3Z GHC.TypeLits.someNatVal1
        of
        { __DEFAULT -> GHC.Base.Nothing [];
          1# ->
              let {
                sat_s5u41 [Occ=Once] :: GHC.TypeNats.KnownNat GHC.Types.Any
                [LclId] =
                    [n_s5u3Z] \u [] GHC.Natural.naturalFromInteger n_s5u3Z; } in
              let {
                sat_s5u42 [Occ=Once] :: GHC.TypeNats.SomeNat
                [LclId] =
                    CCCS GHC.TypeNats.SomeNat! [sat_s5u41 Data.Proxy.Proxy];
              } in  GHC.Base.Just [sat_s5u42];
        };

GHC.TypeLits.WrapS
  :: forall (a :: GHC.Types.Symbol) b.
     (GHC.TypeLits.KnownSymbol a => Data.Proxy.Proxy a -> b)
     -> GHC.TypeLits.WrapS a b
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.WrapS [eta_B1];

GHC.TypeLits.Text :: GHC.Types.Symbol -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.Text [eta_B1];

GHC.TypeLits.ShowType :: forall t. t -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.ShowType [eta_B1];

GHC.TypeLits.:<>:
  :: GHC.TypeLits.ErrorMessage
     -> GHC.TypeLits.ErrorMessage -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.:<>: [eta_B2 eta_B1];

GHC.TypeLits.:$$:
  :: GHC.TypeLits.ErrorMessage
     -> GHC.TypeLits.ErrorMessage -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m4,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.:$$: [eta_B2 eta_B1];

GHC.TypeLits.SomeSymbol
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     Data.Proxy.Proxy n -> GHC.TypeLits.SomeSymbol
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.SomeSymbol [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:00:30.687563039 UTC

GHC.TypeLits.symbolSing [InlPrag=INLINE]
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.TypeLits.SSymbol n
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_s5u1K] v_s5u1K;

GHC.TypeLits.natVal1
  :: forall (n :: GHC.Types.Nat) (proxy :: GHC.Types.Nat -> *).
     GHC.TypeNats.KnownNat n =>
     proxy n -> GHC.TypeNats.KnownNat n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownNat_s5u1L p_s5u1M] $dKnownNat_s5u1L;

GHC.TypeLits.natVal
  :: forall (n :: GHC.Types.Nat) (proxy :: GHC.Types.Nat -> *).
     GHC.TypeNats.KnownNat n =>
     proxy n -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.natVal1 eta_B2 eta_B1;

GHC.TypeLits.symbolVal1
  :: forall (n :: GHC.Types.Symbol) (proxy :: GHC.Types.Symbol -> *).
     GHC.TypeLits.KnownSymbol n =>
     proxy n -> GHC.TypeLits.KnownSymbol n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5u1N ds_s5u1O] $dKnownSymbol_s5u1N;

GHC.TypeLits.symbolVal
  :: forall (n :: GHC.Types.Symbol) (proxy :: GHC.Types.Symbol -> *).
     GHC.TypeLits.KnownSymbol n =>
     proxy n -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.symbolVal1 eta_B2 eta_B1;

GHC.TypeLits.sameSymbol1
  :: forall (a :: GHC.Types.Symbol) (b :: GHC.Types.Symbol).
     GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Data.Type.Equality.$WRefl];

GHC.TypeLits.sameSymbol
  :: forall (a :: GHC.Types.Symbol) (b :: GHC.Types.Symbol).
     (GHC.TypeLits.KnownSymbol a, GHC.TypeLits.KnownSymbol b) =>
     Data.Proxy.Proxy a
     -> Data.Proxy.Proxy b
     -> GHC.Base.Maybe (a Data.Type.Equality.:~: b)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><L,A><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5u1P $dKnownSymbol1_s5u1Q x_s5u1R y_s5u1S]
        case
            GHC.Base.eqString $dKnownSymbol_s5u1P $dKnownSymbol1_s5u1Q
        of
        { GHC.Types.False -> GHC.Base.Nothing [];
          GHC.Types.True -> GHC.TypeLits.sameSymbol1;
        };

GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
  :: GHC.Types.Int -> GHC.TypeLits.SomeSymbol -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [p_s5u1U ds_s5u1V eta_s5u1W]
        case ds_s5u1V of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u1Y [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5u21 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [eta_s5u1W $dKnownSymbol_s5u1Y] \u []
                        let {
                          sat_s5u20 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)3 eta_s5u1W];
                        } in  GHC.Show.showLitString $dKnownSymbol_s5u1Y sat_s5u20;
              } in  : [GHC.Show.$fShow(,)3 sat_s5u21];
        };

GHC.TypeLits.$fShowSomeSymbol2 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

GHC.TypeLits.$fShowSomeSymbol_$cshow
  :: GHC.TypeLits.SomeSymbol -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [x_s5u22]
        case x_s5u22 of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u24 [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5u26 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dKnownSymbol_s5u24] \u []
                        GHC.Show.showLitString
                            $dKnownSymbol_s5u24 GHC.TypeLits.$fShowSomeSymbol2;
              } in  : [GHC.Show.$fShow(,)3 sat_s5u26];
        };

GHC.TypeLits.$fShowSomeSymbol1
  :: GHC.TypeLits.SomeSymbol -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_s5u27 eta_s5u28]
        case ds_s5u27 of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2a [Occ=Once]
                                  _ [Occ=Dead] ->
              let {
                sat_s5u2d [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [eta_s5u28 $dKnownSymbol_s5u2a] \u []
                        let {
                          sat_s5u2c [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)3 eta_s5u28];
                        } in  GHC.Show.showLitString $dKnownSymbol_s5u2a sat_s5u2c;
              } in  : [GHC.Show.$fShow(,)3 sat_s5u2d];
        };

GHC.TypeLits.$fShowSomeSymbol_$cshowList
  :: [GHC.TypeLits.SomeSymbol] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s5u2e s_s5u2f]
        GHC.Show.showList__
            GHC.TypeLits.$fShowSomeSymbol1 ls_s5u2e s_s5u2f;

GHC.TypeLits.$fShowSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.TypeLits.SomeSymbol
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
                                    GHC.TypeLits.$fShowSomeSymbol_$cshow
                                    GHC.TypeLits.$fShowSomeSymbol_$cshowList];

GHC.TypeLits.$fOrdSomeSymbol_$ccompare
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5u2g ds1_s5u2h]
        case ds_s5u2g of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2j [Occ=Once]
                                  _ [Occ=Dead] ->
              case ds1_s5u2h of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u2m [Occ=Once]
                                        _ [Occ=Dead] ->
                    GHC.Classes.$fOrd[]_$s$ccompare1
                        $dKnownSymbol_s5u2j $dKnownSymbol1_s5u2m;
              };
        };

GHC.TypeLits.$fEqSomeSymbol_$c==
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5u2o ds1_s5u2p]
        case ds_s5u2o of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2r [Occ=Once]
                                  _ [Occ=Dead] ->
              case ds1_s5u2p of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u2u [Occ=Once]
                                        _ [Occ=Dead] ->
                    GHC.Base.eqString $dKnownSymbol_s5u2r $dKnownSymbol1_s5u2u;
              };
        };

GHC.TypeLits.$fEqSomeSymbol_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s5u2w eta1_s5u2x]
        case eta_s5u2w of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2z [Occ=Once]
                                  _ [Occ=Dead] ->
              case eta1_s5u2x of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u2C [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Base.eqString $dKnownSymbol_s5u2z $dKnownSymbol1_s5u2C
                    of
                    { GHC.Types.False -> GHC.Types.True [];
                      GHC.Types.True -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fEqSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.TypeLits.SomeSymbol
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.TypeLits.$fEqSomeSymbol_$c==
                                     GHC.TypeLits.$fEqSomeSymbol_$c/=];

GHC.TypeLits.$fOrdSomeSymbol_$c<
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u2F y_s5u2G]
        case x_s5u2F of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2I [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u2G of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u2L [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u2I $dKnownSymbol1_s5u2L
                    of
                    { __DEFAULT -> GHC.Types.False [];
                      GHC.Types.LT -> GHC.Types.True [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c>=
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u2O y_s5u2P]
        case x_s5u2O of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u2R [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u2P of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u2U [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u2R $dKnownSymbol1_s5u2U
                    of
                    { __DEFAULT -> GHC.Types.True [];
                      GHC.Types.LT -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c>
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u2X y_s5u2Y]
        case x_s5u2X of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u30 [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u2Y of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u33 [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u30 $dKnownSymbol1_s5u33
                    of
                    { __DEFAULT -> GHC.Types.False [];
                      GHC.Types.GT -> GHC.Types.True [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$c<=
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u36 y_s5u37]
        case x_s5u36 of {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u39 [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u37 of {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u3c [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u39 $dKnownSymbol1_s5u3c
                    of
                    { __DEFAULT -> GHC.Types.True [];
                      GHC.Types.GT -> GHC.Types.False [];
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$cmax
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.TypeLits.SomeSymbol
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u3f y_s5u3g]
        case x_s5u3f of wild_s5u3h {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u3i [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u3g of wild1_s5u3k {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u3l [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u3i $dKnownSymbol1_s5u3l
                    of
                    { __DEFAULT -> wild1_s5u3k;
                      GHC.Types.GT -> wild_s5u3h;
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol_$cmin
  :: GHC.TypeLits.SomeSymbol
     -> GHC.TypeLits.SomeSymbol -> GHC.TypeLits.SomeSymbol
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s5u3o y_s5u3p]
        case x_s5u3o of wild_s5u3q {
          GHC.TypeLits.SomeSymbol $dKnownSymbol_s5u3r [Occ=Once]
                                  _ [Occ=Dead] ->
              case y_s5u3p of wild1_s5u3t {
                GHC.TypeLits.SomeSymbol $dKnownSymbol1_s5u3u [Occ=Once]
                                        _ [Occ=Dead] ->
                    case
                        GHC.Classes.$fOrd[]_$s$ccompare1
                            $dKnownSymbol_s5u3r $dKnownSymbol1_s5u3u
                    of
                    { __DEFAULT -> wild_s5u3q;
                      GHC.Types.GT -> wild1_s5u3t;
                    };
              };
        };

GHC.TypeLits.$fOrdSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.TypeLits.SomeSymbol
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.TypeLits.$fEqSomeSymbol
                                      GHC.TypeLits.$fOrdSomeSymbol_$ccompare
                                      GHC.TypeLits.$fOrdSomeSymbol_$c<
                                      GHC.TypeLits.$fOrdSomeSymbol_$c<=
                                      GHC.TypeLits.$fOrdSomeSymbol_$c>
                                      GHC.TypeLits.$fOrdSomeSymbol_$c>=
                                      GHC.TypeLits.$fOrdSomeSymbol_$cmax
                                      GHC.TypeLits.$fOrdSomeSymbol_$cmin];

GHC.TypeLits.natVal'1
  :: forall (n :: GHC.Types.Nat).
     GHC.TypeNats.KnownNat n =>
     GHC.Prim.Proxy# n -> GHC.TypeNats.KnownNat n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownNat_s5u3x void_0E] $dKnownNat_s5u3x;

GHC.TypeLits.natVal'
  :: forall (n :: GHC.Types.Nat).
     GHC.TypeNats.KnownNat n =>
     GHC.Prim.Proxy# n -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.TypeLits.natVal'1 eta_B2 GHC.Prim.void#;

GHC.TypeLits.symbolVal'1
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.Prim.Proxy# n -> GHC.TypeLits.KnownSymbol n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [$dKnownSymbol_s5u3z void_0E] $dKnownSymbol_s5u3z;

GHC.TypeLits.symbolVal'
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     GHC.Prim.Proxy# n -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.TypeLits.symbolVal'1 eta_B2 GHC.Prim.void#;

GHC.TypeLits.someSymbolVal
  :: GHC.Base.String -> GHC.TypeLits.SomeSymbol
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s5u3B] GHC.TypeLits.SomeSymbol [n_s5u3B Data.Proxy.Proxy];

GHC.TypeLits.$fReadSomeSymbol_go [Occ=LoopBreaker]
  :: [(GHC.Base.String, GHC.Base.String)]
     -> [(GHC.TypeLits.SomeSymbol, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5u3C]
        case ds_s5u3C of {
          [] -> [] [];
          : y_s5u3E [Occ=Once!] ys_s5u3F [Occ=Once] ->
              case y_s5u3E of {
                (,) a_s5u3H [Occ=Once] ys1_s5u3I [Occ=Once] ->
                    let {
                      sat_s5u3L [Occ=Once]
                        :: [(GHC.TypeLits.SomeSymbol, GHC.Base.String)]
                      [LclId] =
                          [ys_s5u3F] \u [] GHC.TypeLits.$fReadSomeSymbol_go ys_s5u3F; } in
                    let {
                      sat_s5u3J [Occ=Once] :: GHC.TypeLits.SomeSymbol
                      [LclId] =
                          CCCS GHC.TypeLits.SomeSymbol! [a_s5u3H Data.Proxy.Proxy]; } in
                    let {
                      sat_s5u3K [Occ=Once] :: (GHC.TypeLits.SomeSymbol, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s5u3J ys1_s5u3I];
                    } in  : [sat_s5u3K sat_s5u3L];
              };
        };

GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.TypeLits.SomeSymbol
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s5u3M xs_s5u3N]
        case
            GHC.Read.list3
                GHC.Read.$fReadChar2
                p_s5u3M
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s5u3O
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s5u3O xs_s5u3N
              of
              sat_s5u3P
              { __DEFAULT -> GHC.TypeLits.$fReadSomeSymbol_go sat_s5u3P;
              };
        };

GHC.TypeLits.$fReadSomeSymbol4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.TypeLits.SomeSymbol -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5u3Q eta_s5u3R]
        let {
          sat_s5u3S [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.TypeLits.SomeSymbol
          [LclId] =
              [n_s5u3Q] \r [eta_B1]
                  GHC.TypeLits.$fReadSomeSymbol_$creadsPrec n_s5u3Q eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s5u3S eta_s5u3R
          of
          { Unit# ww1_s5u3U [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s5u3U];
          };

GHC.TypeLits.$fReadSomeSymbol3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.TypeLits.$fReadSomeSymbol2
  :: Text.ParserCombinators.ReadP.P [GHC.TypeLits.SomeSymbol]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.TypeLits.$fReadSomeSymbol4
            GHC.TypeLits.$fReadSomeSymbol3
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.TypeLits.$fReadSomeSymbol_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.TypeLits.SomeSymbol]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.TypeLits.$fReadSomeSymbol2 eta_B1;

GHC.TypeLits.$fReadSomeSymbol1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.TypeLits.SomeSymbol] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5u3V w1_s5u3W]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.TypeLits.$fReadSomeSymbol_$creadList w1_s5u3W
        of
        { Unit# ww1_s5u3Y [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s5u3Y];
        };

GHC.TypeLits.$fReadSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.TypeLits.SomeSymbol
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
                                    GHC.TypeLits.$fReadSomeSymbol_$creadList
                                    GHC.TypeLits.$fReadSomeSymbol4
                                    GHC.TypeLits.$fReadSomeSymbol1];

GHC.TypeLits.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.TypeLits.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$trModule4];

GHC.TypeLits.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.TypeLits"#;

GHC.TypeLits.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$trModule2];

GHC.TypeLits.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.TypeLits.$trModule3
                                     GHC.TypeLits.$trModule1];

$krep_r5tkw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r5tkx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep2_r5tky :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_r5tkz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcSymbol
                                              GHC.Types.[]];

$krep4_r5tkA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5tkx GHC.Types.[]];

$krep5_r5tkB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_r5tkA];

$krep6_r5tkC :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5tkw GHC.Types.[]];

$krep7_r5tkD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r5tkz $krep6_r5tkC];

$krep8_r5tkE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcProxy
                                              $krep7_r5tkD];

GHC.TypeLits.$tcKnownSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz $krep2_r5tky];

GHC.TypeLits.$tcSSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz
                                         GHC.Types.krep$*];

GHC.TypeLits.$tcWrapS1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz
                                         GHC.Types.krep$*Arr*];

$krep9_r5tkF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

$krep10_r5tkG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r5tkE $krep9_r5tkF];

GHC.TypeLits.$tcErrorMessage2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ErrorMessage"#;

GHC.TypeLits.$tcErrorMessage1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcErrorMessage2];

GHC.TypeLits.$tcErrorMessage :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7630159379940119730##
                                    9206405315391268733##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcErrorMessage1
                                    0#
                                    GHC.Types.krep$*];

$krep11_r5tkH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcErrorMessage
                                              GHC.Types.[]];

GHC.TypeLits.$tc'ShowType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5tkw $krep11_r5tkH];

GHC.TypeLits.$tc'ShowType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ShowType"#;

GHC.TypeLits.$tc'ShowType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'ShowType3];

GHC.TypeLits.$tc'ShowType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8382284352214508650##
                                    11348954620262118930##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'ShowType2
                                    1#
                                    GHC.TypeLits.$tc'ShowType1];

GHC.TypeLits.$tc'Text1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5tkz $krep11_r5tkH];

GHC.TypeLits.$tc'Text3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Text"#;

GHC.TypeLits.$tc'Text2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'Text3];

GHC.TypeLits.$tc'Text :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2493578998071024502##
                                    3678534661723514344##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'Text2
                                    0#
                                    GHC.TypeLits.$tc'Text1];

$krep12_r5tkI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r5tkH $krep11_r5tkH];

GHC.TypeLits.$tc':$$:1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_r5tkH $krep12_r5tkI];

GHC.TypeLits.$tc':<>:2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "':<>:"#;

GHC.TypeLits.$tc':<>:1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc':<>:2];

GHC.TypeLits.$tc':<>: :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3983262092273118172##
                                    8733217608481743011##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc':<>:1
                                    0#
                                    GHC.TypeLits.$tc':$$:1];

GHC.TypeLits.$tc':$$:3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "':$$:"#;

GHC.TypeLits.$tc':$$:2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc':$$:3];

GHC.TypeLits.$tc':$$: :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16852088601940984151##
                                    507953211190232322##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc':$$:2
                                    0#
                                    GHC.TypeLits.$tc':$$:1];

GHC.TypeLits.$tcSSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SSymbol"#;

GHC.TypeLits.$tcSSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcSSymbol3];

GHC.TypeLits.$tcSSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6053239415793076730##
                                    11057125606635161794##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcSSymbol2
                                    0#
                                    GHC.TypeLits.$tcSSymbol1];

$krep13_r5tkJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcSSymbol
                                              $krep6_r5tkC];

GHC.TypeLits.$tc'SSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep5_r5tkB $krep13_r5tkJ];

GHC.TypeLits.$tc'SSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SSymbol"#;

GHC.TypeLits.$tc'SSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'SSymbol3];

GHC.TypeLits.$tc'SSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1559313649785769064##
                                    360611317898112776##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'SSymbol2
                                    1#
                                    GHC.TypeLits.$tc'SSymbol1];

GHC.TypeLits.$tcKnownSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KnownSymbol"#;

GHC.TypeLits.$tcKnownSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcKnownSymbol3];

GHC.TypeLits.$tcKnownSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1897426542959159002##
                                    11426707038979253074##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcKnownSymbol2
                                    0#
                                    GHC.TypeLits.$tcKnownSymbol1];

$krep14_r5tkK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcKnownSymbol
                                              $krep6_r5tkC];

$krep15_r5tkL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_r5tkK $krep10_r5tkG];

GHC.TypeLits.$tc'C:KnownSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep13_r5tkJ $krep14_r5tkK];

GHC.TypeLits.$tc'C:KnownSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:KnownSymbol"#;

GHC.TypeLits.$tc'C:KnownSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'C:KnownSymbol3];

GHC.TypeLits.$tc'C:KnownSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16813031602224516101##
                                    12647750771094255736##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'C:KnownSymbol2
                                    1#
                                    GHC.TypeLits.$tc'C:KnownSymbol1];

GHC.TypeLits.$tcSomeSymbol2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SomeSymbol"#;

GHC.TypeLits.$tcSomeSymbol1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcSomeSymbol2];

GHC.TypeLits.$tcSomeSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8170228625754745342##
                                    5936112829002510826##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcSomeSymbol1
                                    0#
                                    GHC.Types.krep$*];

$krep16_r5tkM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcSomeSymbol
                                              GHC.Types.[]];

$krep17_r5tkN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r5tkE $krep16_r5tkM];

GHC.TypeLits.$tc'SomeSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_r5tkK $krep17_r5tkN];

GHC.TypeLits.$tc'SomeSymbol3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SomeSymbol"#;

GHC.TypeLits.$tc'SomeSymbol2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'SomeSymbol3];

GHC.TypeLits.$tc'SomeSymbol :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3805514464201054242##
                                    4871133717641740493##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'SomeSymbol2
                                    1#
                                    GHC.TypeLits.$tc'SomeSymbol1];

GHC.TypeLits.$tcWrapS3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WrapS"#;

GHC.TypeLits.$tcWrapS2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tcWrapS3];

GHC.TypeLits.$tcWrapS :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9018955994487767128##
                                    531430869376599499##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tcWrapS2
                                    0#
                                    GHC.TypeLits.$tcWrapS1];

$krep18_r5tkO :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r5tkF GHC.Types.[]];

$krep19_r5tkP :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5tkw $krep18_r5tkO];

$krep20_r5tkQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.TypeLits.$tcWrapS
                                              $krep19_r5tkP];

GHC.TypeLits.$tc'WrapS1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep15_r5tkL $krep20_r5tkQ];

GHC.TypeLits.$tc'WrapS3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WrapS"#;

GHC.TypeLits.$tc'WrapS2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TypeLits.$tc'WrapS3];

GHC.TypeLits.$tc'WrapS :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10848673411250088112##
                                    6323353939001754670##
                                    GHC.TypeLits.$trModule
                                    GHC.TypeLits.$tc'WrapS2
                                    2#
                                    GHC.TypeLits.$tc'WrapS1];

GHC.TypeLits.someNatVal1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.TypeLits.someNatVal
  :: GHC.Integer.Type.Integer -> GHC.Base.Maybe GHC.TypeNats.SomeNat
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [n_s5u3Z]
        case
            GHC.Integer.Type.geInteger# n_s5u3Z GHC.TypeLits.someNatVal1
        of
        { __DEFAULT -> GHC.Base.Nothing [];
          1# ->
              let {
                sat_s5u41 [Occ=Once] :: GHC.TypeNats.KnownNat GHC.Types.Any
                [LclId] =
                    [n_s5u3Z] \u [] GHC.Natural.naturalFromInteger n_s5u3Z; } in
              let {
                sat_s5u42 [Occ=Once] :: GHC.TypeNats.SomeNat
                [LclId] =
                    CCCS GHC.TypeNats.SomeNat! [sat_s5u41 Data.Proxy.Proxy];
              } in  GHC.Base.Just [sat_s5u42];
        };

GHC.TypeLits.WrapS
  :: forall (a :: GHC.Types.Symbol) b.
     (GHC.TypeLits.KnownSymbol a => Data.Proxy.Proxy a -> b)
     -> GHC.TypeLits.WrapS a b
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.WrapS [eta_B1];

GHC.TypeLits.Text :: GHC.Types.Symbol -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.Text [eta_B1];

GHC.TypeLits.ShowType :: forall t. t -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TypeLits.ShowType [eta_B1];

GHC.TypeLits.:<>:
  :: GHC.TypeLits.ErrorMessage
     -> GHC.TypeLits.ErrorMessage -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.:<>: [eta_B2 eta_B1];

GHC.TypeLits.:$$:
  :: GHC.TypeLits.ErrorMessage
     -> GHC.TypeLits.ErrorMessage -> GHC.TypeLits.ErrorMessage
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m4,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.:$$: [eta_B2 eta_B1];

GHC.TypeLits.SomeSymbol
  :: forall (n :: GHC.Types.Symbol).
     GHC.TypeLits.KnownSymbol n =>
     Data.Proxy.Proxy n -> GHC.TypeLits.SomeSymbol
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TypeLits.SomeSymbol [eta_B2 eta_B1];

