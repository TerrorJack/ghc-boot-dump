
==================== Pre unarise: ====================
2018-03-16 16:05:22.914768585 UTC

GHC.Conc.Signal.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Conc.Signal.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Signal.$trModule4];

GHC.Conc.Signal.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.Signal"#;

GHC.Conc.Signal.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Signal.$trModule2];

GHC.Conc.Signal.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Conc.Signal.$trModule3
                                     GHC.Conc.Signal.$trModule1];

lvl_ramSF :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_ramSG :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

lvl2_ramSH
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.MVar.MVar
             (GHC.IOArray.IOArray
                GHC.Types.Int
                (GHC.Base.Maybe
                   (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))) #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_samSK]
        case noDuplicate# [s_samSK] of s'_samSL {
          __DEFAULT ->
              case newArray# [65# GHC.Base.Nothing s'_samSL] of {
                (#,#) ipv_samSN [Occ=Once] ipv1_samSO [Occ=Once] ->
                    case newMVar# [ipv_samSN] of {
                      (#,#) ipv2_samSQ [Occ=Once] ipv3_samSR ->
                          let {
                            sat_samSS [Occ=Once]
                              :: GHC.IOArray.IOArray
                                   GHC.Types.Int
                                   (GHC.Base.Maybe
                                      (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                            [LclId] =
                                CCCS GHC.Arr.STArray! [lvl_ramSF lvl1_ramSG 65# ipv1_samSO];
                          } in 
                            case putMVar# [ipv3_samSR sat_samSS ipv2_samSQ] of s2#_samST {
                              __DEFAULT ->
                                  case getMaskingState# [s2#_samST] of {
                                    (#,#) ipv4_samSV [Occ=Once*] ipv5_samSW [Occ=Once!] ->
                                        let {
                                          ipv6_samSX
                                            :: GHC.MVar.MVar
                                                 (GHC.IOArray.IOArray
                                                    GHC.Types.Int
                                                    (GHC.Base.Maybe
                                                       (GHC.Conc.Signal.HandlerFun,
                                                        Data.Dynamic.Dynamic)))
                                          [LclId, Unf=OtherCon []] =
                                              CCCS GHC.MVar.MVar! [ipv3_samSR];
                                        } in 
                                          case ipv5_samSW of {
                                            __DEFAULT ->
                                                case makeStablePtr# [ipv6_samSX ipv4_samSV] of {
                                                  (#,#) ipv7_samT0 [Occ=Once] ipv8_samT1 ->
                                                      case
                                                          __pkg_ccall base-4.11.0.0 [ipv8_samT1
                                                                                     ipv7_samT0]
                                                      of
                                                      { (#,#) ds5_samT4 [Occ=Once*] ds6_samT5 ->
                                                            case eqAddr# [ipv8_samT1 ds6_samT5] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv8_samT1
                                                                                                 ds5_samT4]
                                                                  of
                                                                  { Unit# ds7_samT9 [Occ=Once] ->
                                                                        deRefStablePtr# [ds6_samT5
                                                                                         ds7_samT9];
                                                                  };
                                                              1# -> (#,#) [ds5_samT4 ipv6_samSX];
                                                            };
                                                      };
                                                };
                                            0# ->
                                                let {
                                                  sat_samTm [Occ=Once]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.MVar.MVar
                                                               (GHC.IOArray.IOArray
                                                                  GHC.Types.Int
                                                                  (GHC.Base.Maybe
                                                                     (GHC.Conc.Signal.HandlerFun,
                                                                      Data.Dynamic.Dynamic))) #)
                                                  [LclId] =
                                                      [ipv6_samSX] \r [s1_samTa]
                                                          case
                                                              makeStablePtr# [ipv6_samSX s1_samTa]
                                                          of
                                                          { (#,#) ipv7_samTc [Occ=Once]
                                                                  ipv8_samTd ->
                                                                case
                                                                    __pkg_ccall base-4.11.0.0 [ipv8_samTd
                                                                                               ipv7_samTc]
                                                                of
                                                                { (#,#) ds5_samTg [Occ=Once*]
                                                                        ds6_samTh ->
                                                                      case
                                                                          eqAddr# [ipv8_samTd
                                                                                   ds6_samTh]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                __pkg_ccall base-4.11.0.0 [ipv8_samTd
                                                                                                           ds5_samTg]
                                                                            of
                                                                            { Unit# ds7_samTl [Occ=Once] ->
                                                                                  deRefStablePtr# [ds6_samTh
                                                                                                   ds7_samTl];
                                                                            };
                                                                        1# ->
                                                                            (#,#) [ds5_samTg
                                                                                   ipv6_samSX];
                                                                      };
                                                                };
                                                          };
                                                } in  maskAsyncExceptions# [sat_samTm ipv4_samSV];
                                          };
                                  };
                            };
                    };
              };
        };

GHC.Conc.Signal.signal_handlers [InlPrag=NOINLINE]
  :: GHC.MVar.MVar
       (GHC.IOArray.IOArray
          GHC.Types.Int
          (GHC.Base.Maybe
             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)))
[GblId] =
    [] \u []
        case lvl2_ramSH GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_samTp [Occ=Once] -> ipv1_samTp;
        };

lvl3_ramSI :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.setHandler: signal out of range"#;

GHC.Conc.Signal.setHandler2
  :: GHC.Types.IO
       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl3_ramSI of sat_samTq {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_samTq;
        };

GHC.Conc.Signal.setHandler1
  :: GHC.Conc.Signal.Signal
     -> GHC.Base.Maybe
          (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe
             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
[GblId, Arity=3, Str=<L,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [sig_samTr handler_samTs eta_samTt]
        case getMaskingState# [eta_samTt] of {
          (#,#) ipv_samTv [Occ=Once*] ipv1_samTw [Occ=Once!] ->
              let {
                io_samTx [Occ=Once*!, Dmd=<L,1*C1(C1(U))>]
                  :: GHC.IOArray.IOArray
                       GHC.Types.Int
                       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           GHC.Base.Maybe
                             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
                [LclId,
                 Arity=2,
                 Str=<S(S(S)S(S)LS),1*U(U(U),U(U),A,U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [sig_samTr handler_samTs] \r [arr_samTy eta1_samTz]
                        case arr_samTy of {
                          GHC.Arr.STArray l_samTB [Occ=Once!]
                                          u_samTC [Occ=Once!]
                                          _ [Occ=Dead]
                                          ds1_samTE ->
                              case l_samTB of {
                                GHC.Types.I# m_samTG [Occ=Once] ->
                                    case u_samTC of {
                                      GHC.Types.I# n_samTI [Occ=Once] ->
                                          case sig_samTr of {
                                            GHC.Int.I32# x#_samTK ->
                                                case <=# [m_samTG x#_samTK] of {
                                                  __DEFAULT -> GHC.Conc.Signal.setHandler2;
                                                  1# ->
                                                      case <=# [x#_samTK n_samTI] of {
                                                        __DEFAULT -> GHC.Conc.Signal.setHandler2;
                                                        1# ->
                                                            case
                                                                readArray# [ds1_samTE
                                                                            x#_samTK
                                                                            eta1_samTz]
                                                            of
                                                            { (#,#) ipv2_samTQ [Occ=Once]
                                                                    ipv3_samTR [Occ=Once] ->
                                                                  case
                                                                      writeArray# [ds1_samTE
                                                                                   x#_samTK
                                                                                   handler_samTs
                                                                                   ipv2_samTQ]
                                                                  of
                                                                  s2#_samTS
                                                                  { __DEFAULT ->
                                                                        (#,#) [s2#_samTS
                                                                               ipv3_samTR];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_samTw of {
                  __DEFAULT ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_samTV ->
                            case takeMVar# [mvar#_samTV ipv_samTv] of {
                              (#,#) ipv2_samTX [Occ=Once] ipv3_samTY ->
                                  let {
                                    sat_samU4 [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [mvar#_samTV ipv3_samTY] \r [e1_samU1 s1_samU2]
                                            case
                                                putMVar# [mvar#_samTV ipv3_samTY s1_samU2]
                                            of
                                            s2#_samU3
                                            { __DEFAULT -> raiseIO# [e1_samU1 s2#_samU3];
                                            }; } in
                                  let {
                                    sat_samTZ [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [io_samTx ipv3_samTY] \r [eta_B1]
                                            io_samTx ipv3_samTY eta_B1; } in
                                  let {
                                    sat_samU0 [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [sat_samTZ] \r [eta_B1]
                                            maskAsyncExceptions# [sat_samTZ eta_B1];
                                  } in 
                                    case catch# [sat_samU0 sat_samU4 ipv2_samTX] of {
                                      (#,#) ipv4_samU6 [Occ=Once] ipv5_samU7 [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_samTV ipv3_samTY ipv4_samU6]
                                          of
                                          s2#_samU8
                                          { __DEFAULT -> (#,#) [s2#_samU8 ipv5_samU7];
                                          };
                                    };
                            };
                      };
                  0# ->
                      let {
                        sat_samUp [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   GHC.Base.Maybe
                                     (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
                        [LclId] =
                            [io_samTx] \r [s1_samU9]
                                case GHC.Conc.Signal.signal_handlers of {
                                  GHC.MVar.MVar mvar#_samUb ->
                                      case takeMVar# [mvar#_samUb s1_samU9] of {
                                        (#,#) ipv2_samUd [Occ=Once] ipv3_samUe ->
                                            let {
                                              sat_samUk [Occ=Once]
                                                :: GHC.Exception.SomeException
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [mvar#_samUb ipv3_samUe] \r [e1_samUh s2_samUi]
                                                      case
                                                          putMVar# [mvar#_samUb ipv3_samUe s2_samUi]
                                                      of
                                                      s2#_samUj
                                                      { __DEFAULT -> raiseIO# [e1_samUh s2#_samUj];
                                                      }; } in
                                            let {
                                              sat_samUf [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [io_samTx ipv3_samUe] \r [eta_B1]
                                                      io_samTx ipv3_samUe eta_B1; } in
                                            let {
                                              sat_samUg [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [sat_samUf] \r [eta_B1]
                                                      unmaskAsyncExceptions# [sat_samUf eta_B1];
                                            } in 
                                              case catch# [sat_samUg sat_samUk ipv2_samUd] of {
                                                (#,#) ipv4_samUm [Occ=Once] ipv5_samUn [Occ=Once] ->
                                                    case
                                                        putMVar# [mvar#_samUb ipv3_samUe ipv4_samUm]
                                                    of
                                                    s2#_samUo
                                                    { __DEFAULT -> (#,#) [s2#_samUo ipv5_samUn];
                                                    };
                                              };
                                      };
                                };
                      } in  maskAsyncExceptions# [sat_samUp ipv_samTv];
                  1# ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_samUr ->
                            case takeMVar# [mvar#_samUr ipv_samTv] of {
                              (#,#) ipv2_samUt [Occ=Once] ipv3_samUu ->
                                  let {
                                    sat_samUA [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [mvar#_samUr ipv3_samUu] \r [e1_samUx s1_samUy]
                                            case
                                                putMVar# [mvar#_samUr ipv3_samUu s1_samUy]
                                            of
                                            s2#_samUz
                                            { __DEFAULT -> raiseIO# [e1_samUx s2#_samUz];
                                            }; } in
                                  let {
                                    sat_samUv [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [io_samTx ipv3_samUu] \r [eta_B1]
                                            io_samTx ipv3_samUu eta_B1; } in
                                  let {
                                    sat_samUw [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [sat_samUv] \r [eta_B1]
                                            maskUninterruptible# [sat_samUv eta_B1];
                                  } in 
                                    case catch# [sat_samUw sat_samUA ipv2_samUt] of {
                                      (#,#) ipv4_samUC [Occ=Once] ipv5_samUD [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_samUr ipv3_samUu ipv4_samUC]
                                          of
                                          s2#_samUE
                                          { __DEFAULT -> (#,#) [s2#_samUE ipv5_samUD];
                                          };
                                    };
                            };
                      };
                };
        };

GHC.Conc.Signal.setHandler
  :: GHC.Conc.Signal.Signal
     -> GHC.Base.Maybe
          (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
     -> GHC.Types.IO
          (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
[GblId, Arity=3, Str=<L,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Signal.setHandler1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Signal.runHandlers1
  :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [p_info_samUF sig_samUG eta_samUH]
        case getMaskingState# [eta_samUH] of {
          (#,#) ipv_samUJ [Occ=Once*] ipv1_samUK [Occ=Once!] ->
              let {
                $wio_samUL [InlPrag=NOUSERINLINE[0],
                            Occ=Once!,
                            Dmd=<L,1*C1(C1(C1(C1(U(U,U)))))>]
                  :: GHC.Prim.Int#
                     -> GHC.Prim.Int#
                     -> GHC.Prim.MutableArray#
                          GHC.Prim.RealWorld
                          (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=4, Str=<S,U><L,U><L,U><S,U>, Unf=OtherCon []] =
                    sat-only [p_info_samUF sig_samUG] \r [ww_samUM
                                                          ww1_samUN
                                                          ww2_samUO
                                                          w_samUP]
                        case sig_samUG of {
                          GHC.Int.I32# x#_samUR ->
                              case <=# [ww_samUM x#_samUR] of {
                                __DEFAULT -> (#,#) [w_samUP GHC.Tuple.()];
                                1# ->
                                    case <=# [x#_samUR ww1_samUN] of {
                                      __DEFAULT -> (#,#) [w_samUP GHC.Tuple.()];
                                      1# ->
                                          case readArray# [ww2_samUO x#_samUR w_samUP] of {
                                            (#,#) ipv2_samUV [Occ=Once*] ipv3_samUW [Occ=Once!] ->
                                                case ipv3_samUW of {
                                                  GHC.Base.Nothing ->
                                                      (#,#) [ipv2_samUV GHC.Tuple.()];
                                                  GHC.Base.Just ds2_samUY [Occ=Once!] ->
                                                      case ds2_samUY of {
                                                        (,) f_samV0 [Occ=Once!] _ [Occ=Dead] ->
                                                            let {
                                                              sat_samV4 [Occ=Once]
                                                                :: GHC.Types.IO ()
                                                              [LclId] =
                                                                  [p_info_samUF
                                                                   f_samV0] \r [eta1_samV2]
                                                                      let {
                                                                        sat_samV3 [Occ=Once,
                                                                                   Dmd=<L,1*C1(U)>]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   () #)
                                                                        [LclId] =
                                                                            [p_info_samUF
                                                                             f_samV0] \s []
                                                                                f_samV0
                                                                                    p_info_samUF;
                                                                      } in 
                                                                        catch# [sat_samV3
                                                                                GHC.Conc.Sync.forkIO2
                                                                                eta1_samV2];
                                                            } in 
                                                              case fork# [sat_samV4 ipv2_samUV] of {
                                                                (#,#) ipv4_samV6 [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                    (#,#) [ipv4_samV6 GHC.Tuple.()];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                io_samV8 [InlPrag=NOUSERINLINE[0], Occ=Once*!, Dmd=<L,1*C1(C1(U))>]
                  :: GHC.IOArray.IOArray
                       GHC.Types.Int
                       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId,
                 Arity=2,
                 Str=<S(S(S)S(S)LS),1*U(U(U),U(U),A,U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [$wio_samUL] \r [w_samV9 w1_samVa]
                        case w_samV9 of {
                          GHC.Arr.STArray ww1_samVc [Occ=Once!]
                                          ww2_samVd [Occ=Once!]
                                          _ [Occ=Dead]
                                          ww4_samVf [Occ=Once] ->
                              case ww1_samVc of {
                                GHC.Types.I# ww6_samVh [Occ=Once] ->
                                    case ww2_samVd of {
                                      GHC.Types.I# ww8_samVj [Occ=Once] ->
                                          $wio_samUL ww6_samVh ww8_samVj ww4_samVf w1_samVa;
                                    };
                              };
                        };
              } in 
                case ipv1_samUK of {
                  __DEFAULT ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_samVm ->
                            case takeMVar# [mvar#_samVm ipv_samUJ] of {
                              (#,#) ipv2_samVo [Occ=Once] ipv3_samVp ->
                                  let {
                                    sat_samVv [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [mvar#_samVm ipv3_samVp] \r [e1_samVs s1_samVt]
                                            case
                                                putMVar# [mvar#_samVm ipv3_samVp s1_samVt]
                                            of
                                            s2#_samVu
                                            { __DEFAULT -> raiseIO# [e1_samVs s2#_samVu];
                                            }; } in
                                  let {
                                    sat_samVq [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [io_samV8 ipv3_samVp] \r [eta_B1]
                                            io_samV8 ipv3_samVp eta_B1; } in
                                  let {
                                    sat_samVr [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [sat_samVq] \r [eta_B1]
                                            maskAsyncExceptions# [sat_samVq eta_B1];
                                  } in 
                                    case catch# [sat_samVr sat_samVv ipv2_samVo] of {
                                      (#,#) ipv4_samVx [Occ=Once] ipv5_samVy [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_samVm ipv3_samVp ipv4_samVx]
                                          of
                                          s2#_samVz
                                          { __DEFAULT -> (#,#) [s2#_samVz ipv5_samVy];
                                          };
                                    };
                            };
                      };
                  0# ->
                      let {
                        sat_samVQ [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId] =
                            [io_samV8] \r [s1_samVA]
                                case GHC.Conc.Signal.signal_handlers of {
                                  GHC.MVar.MVar mvar#_samVC ->
                                      case takeMVar# [mvar#_samVC s1_samVA] of {
                                        (#,#) ipv2_samVE [Occ=Once] ipv3_samVF ->
                                            let {
                                              sat_samVL [Occ=Once]
                                                :: GHC.Exception.SomeException
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [mvar#_samVC ipv3_samVF] \r [e1_samVI s2_samVJ]
                                                      case
                                                          putMVar# [mvar#_samVC ipv3_samVF s2_samVJ]
                                                      of
                                                      s2#_samVK
                                                      { __DEFAULT -> raiseIO# [e1_samVI s2#_samVK];
                                                      }; } in
                                            let {
                                              sat_samVG [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [io_samV8 ipv3_samVF] \r [eta_B1]
                                                      io_samV8 ipv3_samVF eta_B1; } in
                                            let {
                                              sat_samVH [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [sat_samVG] \r [eta_B1]
                                                      unmaskAsyncExceptions# [sat_samVG eta_B1];
                                            } in 
                                              case catch# [sat_samVH sat_samVL ipv2_samVE] of {
                                                (#,#) ipv4_samVN [Occ=Once] ipv5_samVO [Occ=Once] ->
                                                    case
                                                        putMVar# [mvar#_samVC ipv3_samVF ipv4_samVN]
                                                    of
                                                    s2#_samVP
                                                    { __DEFAULT -> (#,#) [s2#_samVP ipv5_samVO];
                                                    };
                                              };
                                      };
                                };
                      } in  maskAsyncExceptions# [sat_samVQ ipv_samUJ];
                  1# ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_samVS ->
                            case takeMVar# [mvar#_samVS ipv_samUJ] of {
                              (#,#) ipv2_samVU [Occ=Once] ipv3_samVV ->
                                  let {
                                    sat_samW1 [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [mvar#_samVS ipv3_samVV] \r [e1_samVY s1_samVZ]
                                            case
                                                putMVar# [mvar#_samVS ipv3_samVV s1_samVZ]
                                            of
                                            s2#_samW0
                                            { __DEFAULT -> raiseIO# [e1_samVY s2#_samW0];
                                            }; } in
                                  let {
                                    sat_samVW [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [io_samV8 ipv3_samVV] \r [eta_B1]
                                            io_samV8 ipv3_samVV eta_B1; } in
                                  let {
                                    sat_samVX [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [sat_samVW] \r [eta_B1]
                                            maskUninterruptible# [sat_samVW eta_B1];
                                  } in 
                                    case catch# [sat_samVX sat_samW1 ipv2_samVU] of {
                                      (#,#) ipv4_samW3 [Occ=Once] ipv5_samW4 [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_samVS ipv3_samVV ipv4_samW3]
                                          of
                                          s2#_samW5
                                          { __DEFAULT -> (#,#) [s2#_samW5 ipv5_samW4];
                                          };
                                    };
                            };
                      };
                };
        };

GHC.Conc.Signal.runHandlers
  :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Signal.runHandlers1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Signal.$wrunHandlersPtr [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [ww_samW6 w_samW7 w1_samW8]
        case newMutVar# [GHC.ForeignPtr.NoFinalizers w1_samW8] of {
          (#,#) ipv_samWa [Occ=Once] ipv1_samWb ->
              case
                  GHC.ForeignPtr.$winsertCFinalizer
                      ipv1_samWb
                      __label "free" (function)
                      0#
                      __NULL
                      ww_samW6
                      GHC.Tuple.()
                      ipv_samWa
              of
              { (#,#) ipv2_samWd [Occ=Once] _ [Occ=Dead] ->
                    let {
                      sat_samWf [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                      [LclId] =
                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_samWb]; } in
                    let {
                      sat_samWg [Occ=Once] :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                      [LclId] =
                          CCCS GHC.ForeignPtr.ForeignPtr! [ww_samW6 sat_samWf];
                    } in  GHC.Conc.Signal.runHandlers1 sat_samWg w_samW7 ipv2_samWd;
              };
        };

GHC.Conc.Signal.runHandlersPtr1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_samWh w1_samWi w2_samWj]
        case w_samWh of {
          GHC.Ptr.Ptr ww1_samWl [Occ=Once] ->
              GHC.Conc.Signal.$wrunHandlersPtr ww1_samWl w1_samWi w2_samWj;
        };

GHC.Conc.Signal.runHandlersPtr
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Signal.runHandlersPtr1 eta_B3 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:05:22.927422505 UTC

GHC.Conc.Signal.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Conc.Signal.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Signal.$trModule4];

GHC.Conc.Signal.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.Signal"#;

GHC.Conc.Signal.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Signal.$trModule2];

GHC.Conc.Signal.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Conc.Signal.$trModule3
                                     GHC.Conc.Signal.$trModule1];

lvl_ramSF :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_ramSG :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

lvl2_ramSH
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.MVar.MVar
             (GHC.IOArray.IOArray
                GHC.Types.Int
                (GHC.Base.Maybe
                   (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))) #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_samSL {
          (##) ->
              case newArray# [65# GHC.Base.Nothing GHC.Prim.void#] of {
                Unit# ipv1_samSO [Occ=Once] ->
                    case newMVar# [GHC.Prim.void#] of {
                      Unit# ipv3_samSR ->
                          let {
                            sat_samSS [Occ=Once]
                              :: GHC.IOArray.IOArray
                                   GHC.Types.Int
                                   (GHC.Base.Maybe
                                      (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                            [LclId] =
                                CCCS GHC.Arr.STArray! [lvl_ramSF lvl1_ramSG 65# ipv1_samSO];
                          } in 
                            case putMVar# [ipv3_samSR sat_samSS GHC.Prim.void#] of s2#_samST {
                              (##) ->
                                  case getMaskingState# [GHC.Prim.void#] of {
                                    Unit# ipv5_samSW [Occ=Once!] ->
                                        let {
                                          ipv6_samSX
                                            :: GHC.MVar.MVar
                                                 (GHC.IOArray.IOArray
                                                    GHC.Types.Int
                                                    (GHC.Base.Maybe
                                                       (GHC.Conc.Signal.HandlerFun,
                                                        Data.Dynamic.Dynamic)))
                                          [LclId, Unf=OtherCon []] =
                                              CCCS GHC.MVar.MVar! [ipv3_samSR];
                                        } in 
                                          case ipv5_samSW of {
                                            __DEFAULT ->
                                                case makeStablePtr# [ipv6_samSX GHC.Prim.void#] of {
                                                  Unit# ipv8_samT1 ->
                                                      case
                                                          __pkg_ccall base-4.11.0.0 [ipv8_samT1
                                                                                     GHC.Prim.void#]
                                                      of
                                                      { Unit# ds6_samT5 ->
                                                            case eqAddr# [ipv8_samT1 ds6_samT5] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv8_samT1
                                                                                                 GHC.Prim.void#]
                                                                  of
                                                                  { (##) ->
                                                                        deRefStablePtr# [ds6_samT5
                                                                                         GHC.Prim.void#];
                                                                  };
                                                              1# -> Unit# [ipv6_samSX];
                                                            };
                                                      };
                                                };
                                            0# ->
                                                let {
                                                  sat_samTm [Occ=Once]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.MVar.MVar
                                                               (GHC.IOArray.IOArray
                                                                  GHC.Types.Int
                                                                  (GHC.Base.Maybe
                                                                     (GHC.Conc.Signal.HandlerFun,
                                                                      Data.Dynamic.Dynamic))) #)
                                                  [LclId] =
                                                      [ipv6_samSX] \r [void_0E]
                                                          case
                                                              makeStablePtr# [ipv6_samSX
                                                                              GHC.Prim.void#]
                                                          of
                                                          { Unit# ipv8_samTd ->
                                                                case
                                                                    __pkg_ccall base-4.11.0.0 [ipv8_samTd
                                                                                               GHC.Prim.void#]
                                                                of
                                                                { Unit# ds6_samTh ->
                                                                      case
                                                                          eqAddr# [ipv8_samTd
                                                                                   ds6_samTh]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                __pkg_ccall base-4.11.0.0 [ipv8_samTd
                                                                                                           GHC.Prim.void#]
                                                                            of
                                                                            { (##) ->
                                                                                  deRefStablePtr# [ds6_samTh
                                                                                                   GHC.Prim.void#];
                                                                            };
                                                                        1# -> Unit# [ipv6_samSX];
                                                                      };
                                                                };
                                                          };
                                                } in 
                                                  maskAsyncExceptions# [sat_samTm GHC.Prim.void#];
                                          };
                                  };
                            };
                    };
              };
        };

GHC.Conc.Signal.signal_handlers [InlPrag=NOINLINE]
  :: GHC.MVar.MVar
       (GHC.IOArray.IOArray
          GHC.Types.Int
          (GHC.Base.Maybe
             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)))
[GblId] =
    [] \u []
        case lvl2_ramSH GHC.Prim.realWorld# of {
          Unit# ipv1_samTp [Occ=Once] -> ipv1_samTp;
        };

lvl3_ramSI :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.setHandler: signal out of range"#;

GHC.Conc.Signal.setHandler2
  :: GHC.Types.IO
       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl3_ramSI of sat_samTq {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_samTq;
        };

GHC.Conc.Signal.setHandler1
  :: GHC.Conc.Signal.Signal
     -> GHC.Base.Maybe
          (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe
             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
[GblId, Arity=3, Str=<L,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [sig_samTr handler_samTs void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_samTw [Occ=Once!] ->
              let {
                io_samTx [Occ=Once*!, Dmd=<L,1*C1(C1(U))>]
                  :: GHC.IOArray.IOArray
                       GHC.Types.Int
                       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           GHC.Base.Maybe
                             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
                [LclId,
                 Arity=2,
                 Str=<S(S(S)S(S)LS),1*U(U(U),U(U),A,U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [sig_samTr handler_samTs] \r [arr_samTy void_0E]
                        case arr_samTy of {
                          GHC.Arr.STArray l_samTB [Occ=Once!]
                                          u_samTC [Occ=Once!]
                                          _ [Occ=Dead]
                                          ds1_samTE ->
                              case l_samTB of {
                                GHC.Types.I# m_samTG [Occ=Once] ->
                                    case u_samTC of {
                                      GHC.Types.I# n_samTI [Occ=Once] ->
                                          case sig_samTr of {
                                            GHC.Int.I32# x#_samTK ->
                                                case <=# [m_samTG x#_samTK] of {
                                                  __DEFAULT -> GHC.Conc.Signal.setHandler2;
                                                  1# ->
                                                      case <=# [x#_samTK n_samTI] of {
                                                        __DEFAULT -> GHC.Conc.Signal.setHandler2;
                                                        1# ->
                                                            case
                                                                readArray# [ds1_samTE
                                                                            x#_samTK
                                                                            GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv3_samTR [Occ=Once] ->
                                                                  case
                                                                      writeArray# [ds1_samTE
                                                                                   x#_samTK
                                                                                   handler_samTs
                                                                                   GHC.Prim.void#]
                                                                  of
                                                                  s2#_samTS
                                                                  { (##) -> Unit# [ipv3_samTR];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_samTw of {
                  __DEFAULT ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_samTV ->
                            case takeMVar# [mvar#_samTV GHC.Prim.void#] of {
                              Unit# ipv3_samTY ->
                                  let {
                                    sat_samU4 [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [mvar#_samTV ipv3_samTY] \r [e1_samU1 void_0E]
                                            case
                                                putMVar# [mvar#_samTV ipv3_samTY GHC.Prim.void#]
                                            of
                                            s2#_samU3
                                            { (##) -> raiseIO# [e1_samU1 GHC.Prim.void#];
                                            }; } in
                                  let {
                                    sat_samTZ [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [io_samTx ipv3_samTY] \r [void_0E]
                                            io_samTx ipv3_samTY GHC.Prim.void#; } in
                                  let {
                                    sat_samU0 [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [sat_samTZ] \r [void_0E]
                                            maskAsyncExceptions# [sat_samTZ GHC.Prim.void#];
                                  } in 
                                    case catch# [sat_samU0 sat_samU4 GHC.Prim.void#] of {
                                      Unit# ipv5_samU7 [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_samTV ipv3_samTY GHC.Prim.void#]
                                          of
                                          s2#_samU8
                                          { (##) -> Unit# [ipv5_samU7];
                                          };
                                    };
                            };
                      };
                  0# ->
                      let {
                        sat_samUp [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   GHC.Base.Maybe
                                     (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
                        [LclId] =
                            [io_samTx] \r [void_0E]
                                case GHC.Conc.Signal.signal_handlers of {
                                  GHC.MVar.MVar mvar#_samUb ->
                                      case takeMVar# [mvar#_samUb GHC.Prim.void#] of {
                                        Unit# ipv3_samUe ->
                                            let {
                                              sat_samUk [Occ=Once]
                                                :: GHC.Exception.SomeException
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [mvar#_samUb ipv3_samUe] \r [e1_samUh void_0E]
                                                      case
                                                          putMVar# [mvar#_samUb
                                                                    ipv3_samUe
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#_samUj
                                                      { (##) -> raiseIO# [e1_samUh GHC.Prim.void#];
                                                      }; } in
                                            let {
                                              sat_samUf [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [io_samTx ipv3_samUe] \r [void_0E]
                                                      io_samTx ipv3_samUe GHC.Prim.void#; } in
                                            let {
                                              sat_samUg [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [sat_samUf] \r [void_0E]
                                                      unmaskAsyncExceptions# [sat_samUf
                                                                              GHC.Prim.void#];
                                            } in 
                                              case catch# [sat_samUg sat_samUk GHC.Prim.void#] of {
                                                Unit# ipv5_samUn [Occ=Once] ->
                                                    case
                                                        putMVar# [mvar#_samUb
                                                                  ipv3_samUe
                                                                  GHC.Prim.void#]
                                                    of
                                                    s2#_samUo
                                                    { (##) -> Unit# [ipv5_samUn];
                                                    };
                                              };
                                      };
                                };
                      } in  maskAsyncExceptions# [sat_samUp GHC.Prim.void#];
                  1# ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_samUr ->
                            case takeMVar# [mvar#_samUr GHC.Prim.void#] of {
                              Unit# ipv3_samUu ->
                                  let {
                                    sat_samUA [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [mvar#_samUr ipv3_samUu] \r [e1_samUx void_0E]
                                            case
                                                putMVar# [mvar#_samUr ipv3_samUu GHC.Prim.void#]
                                            of
                                            s2#_samUz
                                            { (##) -> raiseIO# [e1_samUx GHC.Prim.void#];
                                            }; } in
                                  let {
                                    sat_samUv [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [io_samTx ipv3_samUu] \r [void_0E]
                                            io_samTx ipv3_samUu GHC.Prim.void#; } in
                                  let {
                                    sat_samUw [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [sat_samUv] \r [void_0E]
                                            maskUninterruptible# [sat_samUv GHC.Prim.void#];
                                  } in 
                                    case catch# [sat_samUw sat_samUA GHC.Prim.void#] of {
                                      Unit# ipv5_samUD [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_samUr ipv3_samUu GHC.Prim.void#]
                                          of
                                          s2#_samUE
                                          { (##) -> Unit# [ipv5_samUD];
                                          };
                                    };
                            };
                      };
                };
        };

GHC.Conc.Signal.setHandler
  :: GHC.Conc.Signal.Signal
     -> GHC.Base.Maybe
          (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
     -> GHC.Types.IO
          (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
[GblId, Arity=3, Str=<L,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Signal.setHandler1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Signal.runHandlers1
  :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [p_info_samUF sig_samUG void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_samUK [Occ=Once!] ->
              let {
                $wio_samUL [InlPrag=NOUSERINLINE[0],
                            Occ=Once!,
                            Dmd=<L,1*C1(C1(C1(C1(U(U,U)))))>]
                  :: GHC.Prim.Int#
                     -> GHC.Prim.Int#
                     -> GHC.Prim.MutableArray#
                          GHC.Prim.RealWorld
                          (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=4, Str=<S,U><L,U><L,U><S,U>, Unf=OtherCon []] =
                    sat-only [p_info_samUF sig_samUG] \r [ww_samUM
                                                          ww1_samUN
                                                          ww2_samUO
                                                          void_0E]
                        case sig_samUG of {
                          GHC.Int.I32# x#_samUR ->
                              case <=# [ww_samUM x#_samUR] of {
                                __DEFAULT -> Unit# [GHC.Tuple.()];
                                1# ->
                                    case <=# [x#_samUR ww1_samUN] of {
                                      __DEFAULT -> Unit# [GHC.Tuple.()];
                                      1# ->
                                          case readArray# [ww2_samUO x#_samUR GHC.Prim.void#] of {
                                            Unit# ipv3_samUW [Occ=Once!] ->
                                                case ipv3_samUW of {
                                                  GHC.Base.Nothing -> Unit# [GHC.Tuple.()];
                                                  GHC.Base.Just ds2_samUY [Occ=Once!] ->
                                                      case ds2_samUY of {
                                                        (,) f_samV0 [Occ=Once!] _ [Occ=Dead] ->
                                                            let {
                                                              sat_samV4 [Occ=Once]
                                                                :: GHC.Types.IO ()
                                                              [LclId] =
                                                                  [p_info_samUF
                                                                   f_samV0] \r [void_0E]
                                                                      let {
                                                                        sat_samV3 [Occ=Once,
                                                                                   Dmd=<L,1*C1(U)>]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   () #)
                                                                        [LclId] =
                                                                            [p_info_samUF
                                                                             f_samV0] \s []
                                                                                f_samV0
                                                                                    p_info_samUF;
                                                                      } in 
                                                                        catch# [sat_samV3
                                                                                GHC.Conc.Sync.forkIO2
                                                                                GHC.Prim.void#];
                                                            } in 
                                                              case
                                                                  fork# [sat_samV4 GHC.Prim.void#]
                                                              of
                                                              { Unit# _ [Occ=Dead] ->
                                                                    Unit# [GHC.Tuple.()];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                io_samV8 [InlPrag=NOUSERINLINE[0], Occ=Once*!, Dmd=<L,1*C1(C1(U))>]
                  :: GHC.IOArray.IOArray
                       GHC.Types.Int
                       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId,
                 Arity=2,
                 Str=<S(S(S)S(S)LS),1*U(U(U),U(U),A,U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [$wio_samUL] \r [w_samV9 void_0E]
                        case w_samV9 of {
                          GHC.Arr.STArray ww1_samVc [Occ=Once!]
                                          ww2_samVd [Occ=Once!]
                                          _ [Occ=Dead]
                                          ww4_samVf [Occ=Once] ->
                              case ww1_samVc of {
                                GHC.Types.I# ww6_samVh [Occ=Once] ->
                                    case ww2_samVd of {
                                      GHC.Types.I# ww8_samVj [Occ=Once] ->
                                          $wio_samUL ww6_samVh ww8_samVj ww4_samVf GHC.Prim.void#;
                                    };
                              };
                        };
              } in 
                case ipv1_samUK of {
                  __DEFAULT ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_samVm ->
                            case takeMVar# [mvar#_samVm GHC.Prim.void#] of {
                              Unit# ipv3_samVp ->
                                  let {
                                    sat_samVv [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [mvar#_samVm ipv3_samVp] \r [e1_samVs void_0E]
                                            case
                                                putMVar# [mvar#_samVm ipv3_samVp GHC.Prim.void#]
                                            of
                                            s2#_samVu
                                            { (##) -> raiseIO# [e1_samVs GHC.Prim.void#];
                                            }; } in
                                  let {
                                    sat_samVq [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [io_samV8 ipv3_samVp] \r [void_0E]
                                            io_samV8 ipv3_samVp GHC.Prim.void#; } in
                                  let {
                                    sat_samVr [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [sat_samVq] \r [void_0E]
                                            maskAsyncExceptions# [sat_samVq GHC.Prim.void#];
                                  } in 
                                    case catch# [sat_samVr sat_samVv GHC.Prim.void#] of {
                                      Unit# ipv5_samVy [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_samVm ipv3_samVp GHC.Prim.void#]
                                          of
                                          s2#_samVz
                                          { (##) -> Unit# [ipv5_samVy];
                                          };
                                    };
                            };
                      };
                  0# ->
                      let {
                        sat_samVQ [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId] =
                            [io_samV8] \r [void_0E]
                                case GHC.Conc.Signal.signal_handlers of {
                                  GHC.MVar.MVar mvar#_samVC ->
                                      case takeMVar# [mvar#_samVC GHC.Prim.void#] of {
                                        Unit# ipv3_samVF ->
                                            let {
                                              sat_samVL [Occ=Once]
                                                :: GHC.Exception.SomeException
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [mvar#_samVC ipv3_samVF] \r [e1_samVI void_0E]
                                                      case
                                                          putMVar# [mvar#_samVC
                                                                    ipv3_samVF
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#_samVK
                                                      { (##) -> raiseIO# [e1_samVI GHC.Prim.void#];
                                                      }; } in
                                            let {
                                              sat_samVG [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [io_samV8 ipv3_samVF] \r [void_0E]
                                                      io_samV8 ipv3_samVF GHC.Prim.void#; } in
                                            let {
                                              sat_samVH [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [sat_samVG] \r [void_0E]
                                                      unmaskAsyncExceptions# [sat_samVG
                                                                              GHC.Prim.void#];
                                            } in 
                                              case catch# [sat_samVH sat_samVL GHC.Prim.void#] of {
                                                Unit# ipv5_samVO [Occ=Once] ->
                                                    case
                                                        putMVar# [mvar#_samVC
                                                                  ipv3_samVF
                                                                  GHC.Prim.void#]
                                                    of
                                                    s2#_samVP
                                                    { (##) -> Unit# [ipv5_samVO];
                                                    };
                                              };
                                      };
                                };
                      } in  maskAsyncExceptions# [sat_samVQ GHC.Prim.void#];
                  1# ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_samVS ->
                            case takeMVar# [mvar#_samVS GHC.Prim.void#] of {
                              Unit# ipv3_samVV ->
                                  let {
                                    sat_samW1 [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [mvar#_samVS ipv3_samVV] \r [e1_samVY void_0E]
                                            case
                                                putMVar# [mvar#_samVS ipv3_samVV GHC.Prim.void#]
                                            of
                                            s2#_samW0
                                            { (##) -> raiseIO# [e1_samVY GHC.Prim.void#];
                                            }; } in
                                  let {
                                    sat_samVW [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [io_samV8 ipv3_samVV] \r [void_0E]
                                            io_samV8 ipv3_samVV GHC.Prim.void#; } in
                                  let {
                                    sat_samVX [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [sat_samVW] \r [void_0E]
                                            maskUninterruptible# [sat_samVW GHC.Prim.void#];
                                  } in 
                                    case catch# [sat_samVX sat_samW1 GHC.Prim.void#] of {
                                      Unit# ipv5_samW4 [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_samVS ipv3_samVV GHC.Prim.void#]
                                          of
                                          s2#_samW5
                                          { (##) -> Unit# [ipv5_samW4];
                                          };
                                    };
                            };
                      };
                };
        };

GHC.Conc.Signal.runHandlers
  :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Signal.runHandlers1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Signal.$wrunHandlersPtr [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [ww_samW6 w_samW7 void_0E]
        case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
          Unit# ipv1_samWb ->
              case
                  GHC.ForeignPtr.$winsertCFinalizer
                      ipv1_samWb
                      __label "free" (function)
                      0#
                      __NULL
                      ww_samW6
                      GHC.Tuple.()
                      GHC.Prim.void#
              of
              { Unit# _ [Occ=Dead] ->
                    let {
                      sat_samWf [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                      [LclId] =
                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_samWb]; } in
                    let {
                      sat_samWg [Occ=Once] :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                      [LclId] =
                          CCCS GHC.ForeignPtr.ForeignPtr! [ww_samW6 sat_samWf];
                    } in 
                      GHC.Conc.Signal.runHandlers1 sat_samWg w_samW7 GHC.Prim.void#;
              };
        };

GHC.Conc.Signal.runHandlersPtr1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_samWh w1_samWi void_0E]
        case w_samWh of {
          GHC.Ptr.Ptr ww1_samWl [Occ=Once] ->
              GHC.Conc.Signal.$wrunHandlersPtr ww1_samWl w1_samWi GHC.Prim.void#;
        };

GHC.Conc.Signal.runHandlersPtr
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Signal.runHandlersPtr1 eta_B3 eta_B2 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 16:05:23.759617407 UTC

GHC.Conc.Signal.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Conc.Signal.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Signal.$trModule4];

GHC.Conc.Signal.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.Signal"#;

GHC.Conc.Signal.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Signal.$trModule2];

GHC.Conc.Signal.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Conc.Signal.$trModule3
                                     GHC.Conc.Signal.$trModule1];

lvl_ramSF :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_ramSG :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

lvl2_ramSH
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.MVar.MVar
             (GHC.IOArray.IOArray
                GHC.Types.Int
                (GHC.Base.Maybe
                   (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))) #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sanwZ]
        case noDuplicate# [s_sanwZ] of s'_sanx0 {
          __DEFAULT ->
              case newArray# [65# GHC.Base.Nothing s'_sanx0] of {
                (#,#) ipv_sanx2 [Occ=Once] ipv1_sanx3 [Occ=Once] ->
                    case newMVar# [ipv_sanx2] of {
                      (#,#) ipv2_sanx5 [Occ=Once] ipv3_sanx6 ->
                          let {
                            sat_sanx7 [Occ=Once]
                              :: GHC.IOArray.IOArray
                                   GHC.Types.Int
                                   (GHC.Base.Maybe
                                      (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                            [LclId] =
                                CCCS GHC.Arr.STArray! [lvl_ramSF lvl1_ramSG 65# ipv1_sanx3];
                          } in 
                            case putMVar# [ipv3_sanx6 sat_sanx7 ipv2_sanx5] of s2#_sanx8 {
                              __DEFAULT ->
                                  case getMaskingState# [s2#_sanx8] of {
                                    (#,#) ipv4_sanxa [Occ=Once*] ipv5_sanxb [Occ=Once!] ->
                                        let {
                                          ipv6_sanxc
                                            :: GHC.MVar.MVar
                                                 (GHC.IOArray.IOArray
                                                    GHC.Types.Int
                                                    (GHC.Base.Maybe
                                                       (GHC.Conc.Signal.HandlerFun,
                                                        Data.Dynamic.Dynamic)))
                                          [LclId, Unf=OtherCon []] =
                                              CCCS GHC.MVar.MVar! [ipv3_sanx6];
                                        } in 
                                          case ipv5_sanxb of {
                                            __DEFAULT ->
                                                case makeStablePtr# [ipv6_sanxc ipv4_sanxa] of {
                                                  (#,#) ipv7_sanxf [Occ=Once] ipv8_sanxg ->
                                                      case
                                                          __pkg_ccall base-4.11.0.0 [ipv8_sanxg
                                                                                     ipv7_sanxf]
                                                      of
                                                      { (#,#) ds5_sanxj [Occ=Once*] ds6_sanxk ->
                                                            case eqAddr# [ipv8_sanxg ds6_sanxk] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv8_sanxg
                                                                                                 ds5_sanxj]
                                                                  of
                                                                  { Unit# ds7_sanxo [Occ=Once] ->
                                                                        deRefStablePtr# [ds6_sanxk
                                                                                         ds7_sanxo];
                                                                  };
                                                              1# -> (#,#) [ds5_sanxj ipv6_sanxc];
                                                            };
                                                      };
                                                };
                                            0# ->
                                                let {
                                                  sat_sanxB [Occ=Once]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.MVar.MVar
                                                               (GHC.IOArray.IOArray
                                                                  GHC.Types.Int
                                                                  (GHC.Base.Maybe
                                                                     (GHC.Conc.Signal.HandlerFun,
                                                                      Data.Dynamic.Dynamic))) #)
                                                  [LclId] =
                                                      [ipv6_sanxc] \r [s1_sanxp]
                                                          case
                                                              makeStablePtr# [ipv6_sanxc s1_sanxp]
                                                          of
                                                          { (#,#) ipv7_sanxr [Occ=Once]
                                                                  ipv8_sanxs ->
                                                                case
                                                                    __pkg_ccall base-4.11.0.0 [ipv8_sanxs
                                                                                               ipv7_sanxr]
                                                                of
                                                                { (#,#) ds5_sanxv [Occ=Once*]
                                                                        ds6_sanxw ->
                                                                      case
                                                                          eqAddr# [ipv8_sanxs
                                                                                   ds6_sanxw]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                __pkg_ccall base-4.11.0.0 [ipv8_sanxs
                                                                                                           ds5_sanxv]
                                                                            of
                                                                            { Unit# ds7_sanxA [Occ=Once] ->
                                                                                  deRefStablePtr# [ds6_sanxw
                                                                                                   ds7_sanxA];
                                                                            };
                                                                        1# ->
                                                                            (#,#) [ds5_sanxv
                                                                                   ipv6_sanxc];
                                                                      };
                                                                };
                                                          };
                                                } in  maskAsyncExceptions# [sat_sanxB ipv4_sanxa];
                                          };
                                  };
                            };
                    };
              };
        };

GHC.Conc.Signal.signal_handlers [InlPrag=NOINLINE]
  :: GHC.MVar.MVar
       (GHC.IOArray.IOArray
          GHC.Types.Int
          (GHC.Base.Maybe
             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)))
[GblId] =
    [] \u []
        case lvl2_ramSH GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sanxE [Occ=Once] -> ipv1_sanxE;
        };

lvl3_ramSI :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.setHandler: signal out of range"#;

GHC.Conc.Signal.setHandler2
  :: GHC.Types.IO
       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl3_ramSI of sat_sanxF {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sanxF;
        };

GHC.Conc.Signal.setHandler1
  :: GHC.Conc.Signal.Signal
     -> GHC.Base.Maybe
          (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe
             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
[GblId, Arity=3, Str=<L,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [sig_sanxG handler_sanxH eta_sanxI]
        case getMaskingState# [eta_sanxI] of {
          (#,#) ipv_sanxK [Occ=Once*] ipv1_sanxL [Occ=Once!] ->
              let {
                io_sanxM [Occ=Once*!, Dmd=<L,1*C1(C1(U))>]
                  :: GHC.IOArray.IOArray
                       GHC.Types.Int
                       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           GHC.Base.Maybe
                             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
                [LclId,
                 Arity=2,
                 Str=<S(S(S)S(S)LS),1*U(U(U),U(U),A,U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [sig_sanxG handler_sanxH] \r [arr_sanxN eta1_sanxO]
                        case arr_sanxN of {
                          GHC.Arr.STArray l_sanxQ [Occ=Once!]
                                          u_sanxR [Occ=Once!]
                                          _ [Occ=Dead]
                                          ds1_sanxT ->
                              case l_sanxQ of {
                                GHC.Types.I# m_sanxV [Occ=Once] ->
                                    case u_sanxR of {
                                      GHC.Types.I# n_sanxX [Occ=Once] ->
                                          case sig_sanxG of {
                                            GHC.Int.I32# x#_sanxZ ->
                                                case <=# [m_sanxV x#_sanxZ] of {
                                                  __DEFAULT -> GHC.Conc.Signal.setHandler2;
                                                  1# ->
                                                      case <=# [x#_sanxZ n_sanxX] of {
                                                        __DEFAULT -> GHC.Conc.Signal.setHandler2;
                                                        1# ->
                                                            case
                                                                readArray# [ds1_sanxT
                                                                            x#_sanxZ
                                                                            eta1_sanxO]
                                                            of
                                                            { (#,#) ipv2_sany5 [Occ=Once]
                                                                    ipv3_sany6 [Occ=Once] ->
                                                                  case
                                                                      writeArray# [ds1_sanxT
                                                                                   x#_sanxZ
                                                                                   handler_sanxH
                                                                                   ipv2_sany5]
                                                                  of
                                                                  s2#_sany7
                                                                  { __DEFAULT ->
                                                                        (#,#) [s2#_sany7
                                                                               ipv3_sany6];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_sanxL of {
                  __DEFAULT ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_sanya ->
                            case takeMVar# [mvar#_sanya ipv_sanxK] of {
                              (#,#) ipv2_sanyc [Occ=Once] ipv3_sanyd ->
                                  let {
                                    sat_sanyj [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [mvar#_sanya ipv3_sanyd] \r [e1_sanyg s1_sanyh]
                                            case
                                                putMVar# [mvar#_sanya ipv3_sanyd s1_sanyh]
                                            of
                                            s2#_sanyi
                                            { __DEFAULT -> raiseIO# [e1_sanyg s2#_sanyi];
                                            }; } in
                                  let {
                                    sat_sanye [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [io_sanxM ipv3_sanyd] \r [eta_B1]
                                            io_sanxM ipv3_sanyd eta_B1; } in
                                  let {
                                    sat_sanyf [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [sat_sanye] \r [eta_B1]
                                            maskAsyncExceptions# [sat_sanye eta_B1];
                                  } in 
                                    case catch# [sat_sanyf sat_sanyj ipv2_sanyc] of {
                                      (#,#) ipv4_sanyl [Occ=Once] ipv5_sanym [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_sanya ipv3_sanyd ipv4_sanyl]
                                          of
                                          s2#_sanyn
                                          { __DEFAULT -> (#,#) [s2#_sanyn ipv5_sanym];
                                          };
                                    };
                            };
                      };
                  0# ->
                      let {
                        sat_sanyE [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   GHC.Base.Maybe
                                     (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
                        [LclId] =
                            [io_sanxM] \r [s1_sanyo]
                                case GHC.Conc.Signal.signal_handlers of {
                                  GHC.MVar.MVar mvar#_sanyq ->
                                      case takeMVar# [mvar#_sanyq s1_sanyo] of {
                                        (#,#) ipv2_sanys [Occ=Once] ipv3_sanyt ->
                                            let {
                                              sat_sanyz [Occ=Once]
                                                :: GHC.Exception.SomeException
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [mvar#_sanyq ipv3_sanyt] \r [e1_sanyw s2_sanyx]
                                                      case
                                                          putMVar# [mvar#_sanyq ipv3_sanyt s2_sanyx]
                                                      of
                                                      s2#_sanyy
                                                      { __DEFAULT -> raiseIO# [e1_sanyw s2#_sanyy];
                                                      }; } in
                                            let {
                                              sat_sanyu [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [io_sanxM ipv3_sanyt] \r [eta_B1]
                                                      io_sanxM ipv3_sanyt eta_B1; } in
                                            let {
                                              sat_sanyv [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [sat_sanyu] \r [eta_B1]
                                                      unmaskAsyncExceptions# [sat_sanyu eta_B1];
                                            } in 
                                              case catch# [sat_sanyv sat_sanyz ipv2_sanys] of {
                                                (#,#) ipv4_sanyB [Occ=Once] ipv5_sanyC [Occ=Once] ->
                                                    case
                                                        putMVar# [mvar#_sanyq ipv3_sanyt ipv4_sanyB]
                                                    of
                                                    s2#_sanyD
                                                    { __DEFAULT -> (#,#) [s2#_sanyD ipv5_sanyC];
                                                    };
                                              };
                                      };
                                };
                      } in  maskAsyncExceptions# [sat_sanyE ipv_sanxK];
                  1# ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_sanyG ->
                            case takeMVar# [mvar#_sanyG ipv_sanxK] of {
                              (#,#) ipv2_sanyI [Occ=Once] ipv3_sanyJ ->
                                  let {
                                    sat_sanyP [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [mvar#_sanyG ipv3_sanyJ] \r [e1_sanyM s1_sanyN]
                                            case
                                                putMVar# [mvar#_sanyG ipv3_sanyJ s1_sanyN]
                                            of
                                            s2#_sanyO
                                            { __DEFAULT -> raiseIO# [e1_sanyM s2#_sanyO];
                                            }; } in
                                  let {
                                    sat_sanyK [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [io_sanxM ipv3_sanyJ] \r [eta_B1]
                                            io_sanxM ipv3_sanyJ eta_B1; } in
                                  let {
                                    sat_sanyL [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [sat_sanyK] \r [eta_B1]
                                            maskUninterruptible# [sat_sanyK eta_B1];
                                  } in 
                                    case catch# [sat_sanyL sat_sanyP ipv2_sanyI] of {
                                      (#,#) ipv4_sanyR [Occ=Once] ipv5_sanyS [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_sanyG ipv3_sanyJ ipv4_sanyR]
                                          of
                                          s2#_sanyT
                                          { __DEFAULT -> (#,#) [s2#_sanyT ipv5_sanyS];
                                          };
                                    };
                            };
                      };
                };
        };

GHC.Conc.Signal.setHandler
  :: GHC.Conc.Signal.Signal
     -> GHC.Base.Maybe
          (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
     -> GHC.Types.IO
          (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
[GblId, Arity=3, Str=<L,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Signal.setHandler1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Signal.runHandlers1
  :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [p_info_sanyU sig_sanyV eta_sanyW]
        case getMaskingState# [eta_sanyW] of {
          (#,#) ipv_sanyY [Occ=Once*] ipv1_sanyZ [Occ=Once!] ->
              let {
                $wio_sanz0 [InlPrag=NOUSERINLINE[0],
                            Occ=Once!,
                            Dmd=<L,1*C1(C1(C1(C1(U(U,U)))))>]
                  :: GHC.Prim.Int#
                     -> GHC.Prim.Int#
                     -> GHC.Prim.MutableArray#
                          GHC.Prim.RealWorld
                          (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=4, Str=<S,U><L,U><L,U><S,U>, Unf=OtherCon []] =
                    sat-only [p_info_sanyU sig_sanyV] \r [ww_sanz1
                                                          ww1_sanz2
                                                          ww2_sanz3
                                                          w_sanz4]
                        case sig_sanyV of {
                          GHC.Int.I32# x#_sanz6 ->
                              case <=# [ww_sanz1 x#_sanz6] of {
                                __DEFAULT -> (#,#) [w_sanz4 GHC.Tuple.()];
                                1# ->
                                    case <=# [x#_sanz6 ww1_sanz2] of {
                                      __DEFAULT -> (#,#) [w_sanz4 GHC.Tuple.()];
                                      1# ->
                                          case readArray# [ww2_sanz3 x#_sanz6 w_sanz4] of {
                                            (#,#) ipv2_sanza [Occ=Once*] ipv3_sanzb [Occ=Once!] ->
                                                case ipv3_sanzb of {
                                                  GHC.Base.Nothing ->
                                                      (#,#) [ipv2_sanza GHC.Tuple.()];
                                                  GHC.Base.Just ds2_sanzd [Occ=Once!] ->
                                                      case ds2_sanzd of {
                                                        (,) f_sanzf [Occ=Once!] _ [Occ=Dead] ->
                                                            let {
                                                              sat_sanzj [Occ=Once]
                                                                :: GHC.Types.IO ()
                                                              [LclId] =
                                                                  [p_info_sanyU
                                                                   f_sanzf] \r [eta1_sanzh]
                                                                      let {
                                                                        sat_sanzi [Occ=Once,
                                                                                   Dmd=<L,1*C1(U)>]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   () #)
                                                                        [LclId] =
                                                                            [p_info_sanyU
                                                                             f_sanzf] \s []
                                                                                f_sanzf
                                                                                    p_info_sanyU;
                                                                      } in 
                                                                        catch# [sat_sanzi
                                                                                GHC.Conc.Sync.forkIO2
                                                                                eta1_sanzh];
                                                            } in 
                                                              case fork# [sat_sanzj ipv2_sanza] of {
                                                                (#,#) ipv4_sanzl [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                    (#,#) [ipv4_sanzl GHC.Tuple.()];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                io_sanzn [InlPrag=NOUSERINLINE[0], Occ=Once*!, Dmd=<L,1*C1(C1(U))>]
                  :: GHC.IOArray.IOArray
                       GHC.Types.Int
                       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId,
                 Arity=2,
                 Str=<S(S(S)S(S)LS),1*U(U(U),U(U),A,U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [$wio_sanz0] \r [w_sanzo w1_sanzp]
                        case w_sanzo of {
                          GHC.Arr.STArray ww1_sanzr [Occ=Once!]
                                          ww2_sanzs [Occ=Once!]
                                          _ [Occ=Dead]
                                          ww4_sanzu [Occ=Once] ->
                              case ww1_sanzr of {
                                GHC.Types.I# ww6_sanzw [Occ=Once] ->
                                    case ww2_sanzs of {
                                      GHC.Types.I# ww8_sanzy [Occ=Once] ->
                                          $wio_sanz0 ww6_sanzw ww8_sanzy ww4_sanzu w1_sanzp;
                                    };
                              };
                        };
              } in 
                case ipv1_sanyZ of {
                  __DEFAULT ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_sanzB ->
                            case takeMVar# [mvar#_sanzB ipv_sanyY] of {
                              (#,#) ipv2_sanzD [Occ=Once] ipv3_sanzE ->
                                  let {
                                    sat_sanzK [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [mvar#_sanzB ipv3_sanzE] \r [e1_sanzH s1_sanzI]
                                            case
                                                putMVar# [mvar#_sanzB ipv3_sanzE s1_sanzI]
                                            of
                                            s2#_sanzJ
                                            { __DEFAULT -> raiseIO# [e1_sanzH s2#_sanzJ];
                                            }; } in
                                  let {
                                    sat_sanzF [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [io_sanzn ipv3_sanzE] \r [eta_B1]
                                            io_sanzn ipv3_sanzE eta_B1; } in
                                  let {
                                    sat_sanzG [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [sat_sanzF] \r [eta_B1]
                                            maskAsyncExceptions# [sat_sanzF eta_B1];
                                  } in 
                                    case catch# [sat_sanzG sat_sanzK ipv2_sanzD] of {
                                      (#,#) ipv4_sanzM [Occ=Once] ipv5_sanzN [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_sanzB ipv3_sanzE ipv4_sanzM]
                                          of
                                          s2#_sanzO
                                          { __DEFAULT -> (#,#) [s2#_sanzO ipv5_sanzN];
                                          };
                                    };
                            };
                      };
                  0# ->
                      let {
                        sat_sanA5 [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId] =
                            [io_sanzn] \r [s1_sanzP]
                                case GHC.Conc.Signal.signal_handlers of {
                                  GHC.MVar.MVar mvar#_sanzR ->
                                      case takeMVar# [mvar#_sanzR s1_sanzP] of {
                                        (#,#) ipv2_sanzT [Occ=Once] ipv3_sanzU ->
                                            let {
                                              sat_sanA0 [Occ=Once]
                                                :: GHC.Exception.SomeException
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [mvar#_sanzR ipv3_sanzU] \r [e1_sanzX s2_sanzY]
                                                      case
                                                          putMVar# [mvar#_sanzR ipv3_sanzU s2_sanzY]
                                                      of
                                                      s2#_sanzZ
                                                      { __DEFAULT -> raiseIO# [e1_sanzX s2#_sanzZ];
                                                      }; } in
                                            let {
                                              sat_sanzV [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [io_sanzn ipv3_sanzU] \r [eta_B1]
                                                      io_sanzn ipv3_sanzU eta_B1; } in
                                            let {
                                              sat_sanzW [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [sat_sanzV] \r [eta_B1]
                                                      unmaskAsyncExceptions# [sat_sanzV eta_B1];
                                            } in 
                                              case catch# [sat_sanzW sat_sanA0 ipv2_sanzT] of {
                                                (#,#) ipv4_sanA2 [Occ=Once] ipv5_sanA3 [Occ=Once] ->
                                                    case
                                                        putMVar# [mvar#_sanzR ipv3_sanzU ipv4_sanA2]
                                                    of
                                                    s2#_sanA4
                                                    { __DEFAULT -> (#,#) [s2#_sanA4 ipv5_sanA3];
                                                    };
                                              };
                                      };
                                };
                      } in  maskAsyncExceptions# [sat_sanA5 ipv_sanyY];
                  1# ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_sanA7 ->
                            case takeMVar# [mvar#_sanA7 ipv_sanyY] of {
                              (#,#) ipv2_sanA9 [Occ=Once] ipv3_sanAa ->
                                  let {
                                    sat_sanAg [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [mvar#_sanA7 ipv3_sanAa] \r [e1_sanAd s1_sanAe]
                                            case
                                                putMVar# [mvar#_sanA7 ipv3_sanAa s1_sanAe]
                                            of
                                            s2#_sanAf
                                            { __DEFAULT -> raiseIO# [e1_sanAd s2#_sanAf];
                                            }; } in
                                  let {
                                    sat_sanAb [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [io_sanzn ipv3_sanAa] \r [eta_B1]
                                            io_sanzn ipv3_sanAa eta_B1; } in
                                  let {
                                    sat_sanAc [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [sat_sanAb] \r [eta_B1]
                                            maskUninterruptible# [sat_sanAb eta_B1];
                                  } in 
                                    case catch# [sat_sanAc sat_sanAg ipv2_sanA9] of {
                                      (#,#) ipv4_sanAi [Occ=Once] ipv5_sanAj [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_sanA7 ipv3_sanAa ipv4_sanAi]
                                          of
                                          s2#_sanAk
                                          { __DEFAULT -> (#,#) [s2#_sanAk ipv5_sanAj];
                                          };
                                    };
                            };
                      };
                };
        };

GHC.Conc.Signal.runHandlers
  :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Signal.runHandlers1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Signal.$wrunHandlersPtr [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [ww_sanAl w_sanAm w1_sanAn]
        case newMutVar# [GHC.ForeignPtr.NoFinalizers w1_sanAn] of {
          (#,#) ipv_sanAp [Occ=Once] ipv1_sanAq ->
              case
                  GHC.ForeignPtr.$winsertCFinalizer
                      ipv1_sanAq
                      __label "free" (function)
                      0#
                      __NULL
                      ww_sanAl
                      GHC.Tuple.()
                      ipv_sanAp
              of
              { (#,#) ipv2_sanAs [Occ=Once] _ [Occ=Dead] ->
                    let {
                      sat_sanAu [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                      [LclId] =
                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_sanAq]; } in
                    let {
                      sat_sanAv [Occ=Once] :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                      [LclId] =
                          CCCS GHC.ForeignPtr.ForeignPtr! [ww_sanAl sat_sanAu];
                    } in  GHC.Conc.Signal.runHandlers1 sat_sanAv w_sanAm ipv2_sanAs;
              };
        };

GHC.Conc.Signal.runHandlersPtr1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sanAw w1_sanAx w2_sanAy]
        case w_sanAw of {
          GHC.Ptr.Ptr ww1_sanAA [Occ=Once] ->
              GHC.Conc.Signal.$wrunHandlersPtr ww1_sanAA w1_sanAx w2_sanAy;
        };

GHC.Conc.Signal.runHandlersPtr
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Signal.runHandlersPtr1 eta_B3 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:05:23.772867599 UTC

GHC.Conc.Signal.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Conc.Signal.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Signal.$trModule4];

GHC.Conc.Signal.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.Signal"#;

GHC.Conc.Signal.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Signal.$trModule2];

GHC.Conc.Signal.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Conc.Signal.$trModule3
                                     GHC.Conc.Signal.$trModule1];

lvl_ramSF :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_ramSG :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

lvl2_ramSH
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.MVar.MVar
             (GHC.IOArray.IOArray
                GHC.Types.Int
                (GHC.Base.Maybe
                   (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))) #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sanx0 {
          (##) ->
              case newArray# [65# GHC.Base.Nothing GHC.Prim.void#] of {
                Unit# ipv1_sanx3 [Occ=Once] ->
                    case newMVar# [GHC.Prim.void#] of {
                      Unit# ipv3_sanx6 ->
                          let {
                            sat_sanx7 [Occ=Once]
                              :: GHC.IOArray.IOArray
                                   GHC.Types.Int
                                   (GHC.Base.Maybe
                                      (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                            [LclId] =
                                CCCS GHC.Arr.STArray! [lvl_ramSF lvl1_ramSG 65# ipv1_sanx3];
                          } in 
                            case putMVar# [ipv3_sanx6 sat_sanx7 GHC.Prim.void#] of s2#_sanx8 {
                              (##) ->
                                  case getMaskingState# [GHC.Prim.void#] of {
                                    Unit# ipv5_sanxb [Occ=Once!] ->
                                        let {
                                          ipv6_sanxc
                                            :: GHC.MVar.MVar
                                                 (GHC.IOArray.IOArray
                                                    GHC.Types.Int
                                                    (GHC.Base.Maybe
                                                       (GHC.Conc.Signal.HandlerFun,
                                                        Data.Dynamic.Dynamic)))
                                          [LclId, Unf=OtherCon []] =
                                              CCCS GHC.MVar.MVar! [ipv3_sanx6];
                                        } in 
                                          case ipv5_sanxb of {
                                            __DEFAULT ->
                                                case makeStablePtr# [ipv6_sanxc GHC.Prim.void#] of {
                                                  Unit# ipv8_sanxg ->
                                                      case
                                                          __pkg_ccall base-4.11.0.0 [ipv8_sanxg
                                                                                     GHC.Prim.void#]
                                                      of
                                                      { Unit# ds6_sanxk ->
                                                            case eqAddr# [ipv8_sanxg ds6_sanxk] of {
                                                              __DEFAULT ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv8_sanxg
                                                                                                 GHC.Prim.void#]
                                                                  of
                                                                  { (##) ->
                                                                        deRefStablePtr# [ds6_sanxk
                                                                                         GHC.Prim.void#];
                                                                  };
                                                              1# -> Unit# [ipv6_sanxc];
                                                            };
                                                      };
                                                };
                                            0# ->
                                                let {
                                                  sat_sanxB [Occ=Once]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.MVar.MVar
                                                               (GHC.IOArray.IOArray
                                                                  GHC.Types.Int
                                                                  (GHC.Base.Maybe
                                                                     (GHC.Conc.Signal.HandlerFun,
                                                                      Data.Dynamic.Dynamic))) #)
                                                  [LclId] =
                                                      [ipv6_sanxc] \r [void_0E]
                                                          case
                                                              makeStablePtr# [ipv6_sanxc
                                                                              GHC.Prim.void#]
                                                          of
                                                          { Unit# ipv8_sanxs ->
                                                                case
                                                                    __pkg_ccall base-4.11.0.0 [ipv8_sanxs
                                                                                               GHC.Prim.void#]
                                                                of
                                                                { Unit# ds6_sanxw ->
                                                                      case
                                                                          eqAddr# [ipv8_sanxs
                                                                                   ds6_sanxw]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                __pkg_ccall base-4.11.0.0 [ipv8_sanxs
                                                                                                           GHC.Prim.void#]
                                                                            of
                                                                            { (##) ->
                                                                                  deRefStablePtr# [ds6_sanxw
                                                                                                   GHC.Prim.void#];
                                                                            };
                                                                        1# -> Unit# [ipv6_sanxc];
                                                                      };
                                                                };
                                                          };
                                                } in 
                                                  maskAsyncExceptions# [sat_sanxB GHC.Prim.void#];
                                          };
                                  };
                            };
                    };
              };
        };

GHC.Conc.Signal.signal_handlers [InlPrag=NOINLINE]
  :: GHC.MVar.MVar
       (GHC.IOArray.IOArray
          GHC.Types.Int
          (GHC.Base.Maybe
             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)))
[GblId] =
    [] \u []
        case lvl2_ramSH GHC.Prim.realWorld# of {
          Unit# ipv1_sanxE [Occ=Once] -> ipv1_sanxE;
        };

lvl3_ramSI :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.setHandler: signal out of range"#;

GHC.Conc.Signal.setHandler2
  :: GHC.Types.IO
       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl3_ramSI of sat_sanxF {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sanxF;
        };

GHC.Conc.Signal.setHandler1
  :: GHC.Conc.Signal.Signal
     -> GHC.Base.Maybe
          (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe
             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
[GblId, Arity=3, Str=<L,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [sig_sanxG handler_sanxH void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sanxL [Occ=Once!] ->
              let {
                io_sanxM [Occ=Once*!, Dmd=<L,1*C1(C1(U))>]
                  :: GHC.IOArray.IOArray
                       GHC.Types.Int
                       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                           GHC.Base.Maybe
                             (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
                [LclId,
                 Arity=2,
                 Str=<S(S(S)S(S)LS),1*U(U(U),U(U),A,U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [sig_sanxG handler_sanxH] \r [arr_sanxN void_0E]
                        case arr_sanxN of {
                          GHC.Arr.STArray l_sanxQ [Occ=Once!]
                                          u_sanxR [Occ=Once!]
                                          _ [Occ=Dead]
                                          ds1_sanxT ->
                              case l_sanxQ of {
                                GHC.Types.I# m_sanxV [Occ=Once] ->
                                    case u_sanxR of {
                                      GHC.Types.I# n_sanxX [Occ=Once] ->
                                          case sig_sanxG of {
                                            GHC.Int.I32# x#_sanxZ ->
                                                case <=# [m_sanxV x#_sanxZ] of {
                                                  __DEFAULT -> GHC.Conc.Signal.setHandler2;
                                                  1# ->
                                                      case <=# [x#_sanxZ n_sanxX] of {
                                                        __DEFAULT -> GHC.Conc.Signal.setHandler2;
                                                        1# ->
                                                            case
                                                                readArray# [ds1_sanxT
                                                                            x#_sanxZ
                                                                            GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv3_sany6 [Occ=Once] ->
                                                                  case
                                                                      writeArray# [ds1_sanxT
                                                                                   x#_sanxZ
                                                                                   handler_sanxH
                                                                                   GHC.Prim.void#]
                                                                  of
                                                                  s2#_sany7
                                                                  { (##) -> Unit# [ipv3_sany6];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_sanxL of {
                  __DEFAULT ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_sanya ->
                            case takeMVar# [mvar#_sanya GHC.Prim.void#] of {
                              Unit# ipv3_sanyd ->
                                  let {
                                    sat_sanyj [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [mvar#_sanya ipv3_sanyd] \r [e1_sanyg void_0E]
                                            case
                                                putMVar# [mvar#_sanya ipv3_sanyd GHC.Prim.void#]
                                            of
                                            s2#_sanyi
                                            { (##) -> raiseIO# [e1_sanyg GHC.Prim.void#];
                                            }; } in
                                  let {
                                    sat_sanye [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [io_sanxM ipv3_sanyd] \r [void_0E]
                                            io_sanxM ipv3_sanyd GHC.Prim.void#; } in
                                  let {
                                    sat_sanyf [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [sat_sanye] \r [void_0E]
                                            maskAsyncExceptions# [sat_sanye GHC.Prim.void#];
                                  } in 
                                    case catch# [sat_sanyf sat_sanyj GHC.Prim.void#] of {
                                      Unit# ipv5_sanym [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_sanya ipv3_sanyd GHC.Prim.void#]
                                          of
                                          s2#_sanyn
                                          { (##) -> Unit# [ipv5_sanym];
                                          };
                                    };
                            };
                      };
                  0# ->
                      let {
                        sat_sanyE [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                   GHC.Base.Maybe
                                     (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic) #)
                        [LclId] =
                            [io_sanxM] \r [void_0E]
                                case GHC.Conc.Signal.signal_handlers of {
                                  GHC.MVar.MVar mvar#_sanyq ->
                                      case takeMVar# [mvar#_sanyq GHC.Prim.void#] of {
                                        Unit# ipv3_sanyt ->
                                            let {
                                              sat_sanyz [Occ=Once]
                                                :: GHC.Exception.SomeException
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [mvar#_sanyq ipv3_sanyt] \r [e1_sanyw void_0E]
                                                      case
                                                          putMVar# [mvar#_sanyq
                                                                    ipv3_sanyt
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#_sanyy
                                                      { (##) -> raiseIO# [e1_sanyw GHC.Prim.void#];
                                                      }; } in
                                            let {
                                              sat_sanyu [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [io_sanxM ipv3_sanyt] \r [void_0E]
                                                      io_sanxM ipv3_sanyt GHC.Prim.void#; } in
                                            let {
                                              sat_sanyv [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe
                                                           (GHC.Conc.Signal.HandlerFun,
                                                            Data.Dynamic.Dynamic) #)
                                              [LclId] =
                                                  [sat_sanyu] \r [void_0E]
                                                      unmaskAsyncExceptions# [sat_sanyu
                                                                              GHC.Prim.void#];
                                            } in 
                                              case catch# [sat_sanyv sat_sanyz GHC.Prim.void#] of {
                                                Unit# ipv5_sanyC [Occ=Once] ->
                                                    case
                                                        putMVar# [mvar#_sanyq
                                                                  ipv3_sanyt
                                                                  GHC.Prim.void#]
                                                    of
                                                    s2#_sanyD
                                                    { (##) -> Unit# [ipv5_sanyC];
                                                    };
                                              };
                                      };
                                };
                      } in  maskAsyncExceptions# [sat_sanyE GHC.Prim.void#];
                  1# ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_sanyG ->
                            case takeMVar# [mvar#_sanyG GHC.Prim.void#] of {
                              Unit# ipv3_sanyJ ->
                                  let {
                                    sat_sanyP [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [mvar#_sanyG ipv3_sanyJ] \r [e1_sanyM void_0E]
                                            case
                                                putMVar# [mvar#_sanyG ipv3_sanyJ GHC.Prim.void#]
                                            of
                                            s2#_sanyO
                                            { (##) -> raiseIO# [e1_sanyM GHC.Prim.void#];
                                            }; } in
                                  let {
                                    sat_sanyK [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [io_sanxM ipv3_sanyJ] \r [void_0E]
                                            io_sanxM ipv3_sanyJ GHC.Prim.void#; } in
                                  let {
                                    sat_sanyL [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe
                                                 (GHC.Conc.Signal.HandlerFun,
                                                  Data.Dynamic.Dynamic) #)
                                    [LclId] =
                                        [sat_sanyK] \r [void_0E]
                                            maskUninterruptible# [sat_sanyK GHC.Prim.void#];
                                  } in 
                                    case catch# [sat_sanyL sat_sanyP GHC.Prim.void#] of {
                                      Unit# ipv5_sanyS [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_sanyG ipv3_sanyJ GHC.Prim.void#]
                                          of
                                          s2#_sanyT
                                          { (##) -> Unit# [ipv5_sanyS];
                                          };
                                    };
                            };
                      };
                };
        };

GHC.Conc.Signal.setHandler
  :: GHC.Conc.Signal.Signal
     -> GHC.Base.Maybe
          (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
     -> GHC.Types.IO
          (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
[GblId, Arity=3, Str=<L,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Signal.setHandler1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Signal.runHandlers1
  :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [p_info_sanyU sig_sanyV void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sanyZ [Occ=Once!] ->
              let {
                $wio_sanz0 [InlPrag=NOUSERINLINE[0],
                            Occ=Once!,
                            Dmd=<L,1*C1(C1(C1(C1(U(U,U)))))>]
                  :: GHC.Prim.Int#
                     -> GHC.Prim.Int#
                     -> GHC.Prim.MutableArray#
                          GHC.Prim.RealWorld
                          (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=4, Str=<S,U><L,U><L,U><S,U>, Unf=OtherCon []] =
                    sat-only [p_info_sanyU sig_sanyV] \r [ww_sanz1
                                                          ww1_sanz2
                                                          ww2_sanz3
                                                          void_0E]
                        case sig_sanyV of {
                          GHC.Int.I32# x#_sanz6 ->
                              case <=# [ww_sanz1 x#_sanz6] of {
                                __DEFAULT -> Unit# [GHC.Tuple.()];
                                1# ->
                                    case <=# [x#_sanz6 ww1_sanz2] of {
                                      __DEFAULT -> Unit# [GHC.Tuple.()];
                                      1# ->
                                          case readArray# [ww2_sanz3 x#_sanz6 GHC.Prim.void#] of {
                                            Unit# ipv3_sanzb [Occ=Once!] ->
                                                case ipv3_sanzb of {
                                                  GHC.Base.Nothing -> Unit# [GHC.Tuple.()];
                                                  GHC.Base.Just ds2_sanzd [Occ=Once!] ->
                                                      case ds2_sanzd of {
                                                        (,) f_sanzf [Occ=Once!] _ [Occ=Dead] ->
                                                            let {
                                                              sat_sanzj [Occ=Once]
                                                                :: GHC.Types.IO ()
                                                              [LclId] =
                                                                  [p_info_sanyU
                                                                   f_sanzf] \r [void_0E]
                                                                      let {
                                                                        sat_sanzi [Occ=Once,
                                                                                   Dmd=<L,1*C1(U)>]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   () #)
                                                                        [LclId] =
                                                                            [p_info_sanyU
                                                                             f_sanzf] \s []
                                                                                f_sanzf
                                                                                    p_info_sanyU;
                                                                      } in 
                                                                        catch# [sat_sanzi
                                                                                GHC.Conc.Sync.forkIO2
                                                                                GHC.Prim.void#];
                                                            } in 
                                                              case
                                                                  fork# [sat_sanzj GHC.Prim.void#]
                                                              of
                                                              { Unit# _ [Occ=Dead] ->
                                                                    Unit# [GHC.Tuple.()];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                io_sanzn [InlPrag=NOUSERINLINE[0], Occ=Once*!, Dmd=<L,1*C1(C1(U))>]
                  :: GHC.IOArray.IOArray
                       GHC.Types.Int
                       (GHC.Base.Maybe (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic))
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId,
                 Arity=2,
                 Str=<S(S(S)S(S)LS),1*U(U(U),U(U),A,U)><S,U>,
                 Unf=OtherCon []] =
                    sat-only [$wio_sanz0] \r [w_sanzo void_0E]
                        case w_sanzo of {
                          GHC.Arr.STArray ww1_sanzr [Occ=Once!]
                                          ww2_sanzs [Occ=Once!]
                                          _ [Occ=Dead]
                                          ww4_sanzu [Occ=Once] ->
                              case ww1_sanzr of {
                                GHC.Types.I# ww6_sanzw [Occ=Once] ->
                                    case ww2_sanzs of {
                                      GHC.Types.I# ww8_sanzy [Occ=Once] ->
                                          $wio_sanz0 ww6_sanzw ww8_sanzy ww4_sanzu GHC.Prim.void#;
                                    };
                              };
                        };
              } in 
                case ipv1_sanyZ of {
                  __DEFAULT ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_sanzB ->
                            case takeMVar# [mvar#_sanzB GHC.Prim.void#] of {
                              Unit# ipv3_sanzE ->
                                  let {
                                    sat_sanzK [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [mvar#_sanzB ipv3_sanzE] \r [e1_sanzH void_0E]
                                            case
                                                putMVar# [mvar#_sanzB ipv3_sanzE GHC.Prim.void#]
                                            of
                                            s2#_sanzJ
                                            { (##) -> raiseIO# [e1_sanzH GHC.Prim.void#];
                                            }; } in
                                  let {
                                    sat_sanzF [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [io_sanzn ipv3_sanzE] \r [void_0E]
                                            io_sanzn ipv3_sanzE GHC.Prim.void#; } in
                                  let {
                                    sat_sanzG [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [sat_sanzF] \r [void_0E]
                                            maskAsyncExceptions# [sat_sanzF GHC.Prim.void#];
                                  } in 
                                    case catch# [sat_sanzG sat_sanzK GHC.Prim.void#] of {
                                      Unit# ipv5_sanzN [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_sanzB ipv3_sanzE GHC.Prim.void#]
                                          of
                                          s2#_sanzO
                                          { (##) -> Unit# [ipv5_sanzN];
                                          };
                                    };
                            };
                      };
                  0# ->
                      let {
                        sat_sanA5 [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        [LclId] =
                            [io_sanzn] \r [void_0E]
                                case GHC.Conc.Signal.signal_handlers of {
                                  GHC.MVar.MVar mvar#_sanzR ->
                                      case takeMVar# [mvar#_sanzR GHC.Prim.void#] of {
                                        Unit# ipv3_sanzU ->
                                            let {
                                              sat_sanA0 [Occ=Once]
                                                :: GHC.Exception.SomeException
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [mvar#_sanzR ipv3_sanzU] \r [e1_sanzX void_0E]
                                                      case
                                                          putMVar# [mvar#_sanzR
                                                                    ipv3_sanzU
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#_sanzZ
                                                      { (##) -> raiseIO# [e1_sanzX GHC.Prim.void#];
                                                      }; } in
                                            let {
                                              sat_sanzV [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [io_sanzn ipv3_sanzU] \r [void_0E]
                                                      io_sanzn ipv3_sanzU GHC.Prim.void#; } in
                                            let {
                                              sat_sanzW [Occ=Once]
                                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                              [LclId] =
                                                  [sat_sanzV] \r [void_0E]
                                                      unmaskAsyncExceptions# [sat_sanzV
                                                                              GHC.Prim.void#];
                                            } in 
                                              case catch# [sat_sanzW sat_sanA0 GHC.Prim.void#] of {
                                                Unit# ipv5_sanA3 [Occ=Once] ->
                                                    case
                                                        putMVar# [mvar#_sanzR
                                                                  ipv3_sanzU
                                                                  GHC.Prim.void#]
                                                    of
                                                    s2#_sanA4
                                                    { (##) -> Unit# [ipv5_sanA3];
                                                    };
                                              };
                                      };
                                };
                      } in  maskAsyncExceptions# [sat_sanA5 GHC.Prim.void#];
                  1# ->
                      case GHC.Conc.Signal.signal_handlers of {
                        GHC.MVar.MVar mvar#_sanA7 ->
                            case takeMVar# [mvar#_sanA7 GHC.Prim.void#] of {
                              Unit# ipv3_sanAa ->
                                  let {
                                    sat_sanAg [Occ=Once]
                                      :: GHC.Exception.SomeException
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [mvar#_sanA7 ipv3_sanAa] \r [e1_sanAd void_0E]
                                            case
                                                putMVar# [mvar#_sanA7 ipv3_sanAa GHC.Prim.void#]
                                            of
                                            s2#_sanAf
                                            { (##) -> raiseIO# [e1_sanAd GHC.Prim.void#];
                                            }; } in
                                  let {
                                    sat_sanAb [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [io_sanzn ipv3_sanAa] \r [void_0E]
                                            io_sanzn ipv3_sanAa GHC.Prim.void#; } in
                                  let {
                                    sat_sanAc [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                    [LclId] =
                                        [sat_sanAb] \r [void_0E]
                                            maskUninterruptible# [sat_sanAb GHC.Prim.void#];
                                  } in 
                                    case catch# [sat_sanAc sat_sanAg GHC.Prim.void#] of {
                                      Unit# ipv5_sanAj [Occ=Once] ->
                                          case
                                              putMVar# [mvar#_sanA7 ipv3_sanAa GHC.Prim.void#]
                                          of
                                          s2#_sanAk
                                          { (##) -> Unit# [ipv5_sanAj];
                                          };
                                    };
                            };
                      };
                };
        };

GHC.Conc.Signal.runHandlers
  :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Signal.runHandlers1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Signal.$wrunHandlersPtr [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,U><L,1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [ww_sanAl w_sanAm void_0E]
        case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
          Unit# ipv1_sanAq ->
              case
                  GHC.ForeignPtr.$winsertCFinalizer
                      ipv1_sanAq
                      __label "free" (function)
                      0#
                      __NULL
                      ww_sanAl
                      GHC.Tuple.()
                      GHC.Prim.void#
              of
              { Unit# _ [Occ=Dead] ->
                    let {
                      sat_sanAu [Occ=Once] :: GHC.ForeignPtr.ForeignPtrContents
                      [LclId] =
                          CCCS GHC.ForeignPtr.PlainForeignPtr! [ipv1_sanAq]; } in
                    let {
                      sat_sanAv [Occ=Once] :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                      [LclId] =
                          CCCS GHC.ForeignPtr.ForeignPtr! [ww_sanAl sat_sanAu];
                    } in 
                      GHC.Conc.Signal.runHandlers1 sat_sanAv w_sanAm GHC.Prim.void#;
              };
        };

GHC.Conc.Signal.runHandlersPtr1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sanAw w1_sanAx void_0E]
        case w_sanAw of {
          GHC.Ptr.Ptr ww1_sanAA [Occ=Once] ->
              GHC.Conc.Signal.$wrunHandlersPtr ww1_sanAA w1_sanAx GHC.Prim.void#;
        };

GHC.Conc.Signal.runHandlersPtr
  :: GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Conc.Signal.Signal -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Signal.runHandlersPtr1 eta_B3 eta_B2 GHC.Prim.void#;

