
==================== Pre unarise: ====================
2018-03-16 16:04:45.331304058 UTC

GHC.Conc.Sync.$fEqTVar_$c==
  :: forall a.
     GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.TVar a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fvq ds1_s9Fvr]
        case ds_s9Fvq of {
          GHC.Conc.Sync.TVar tvar1#_s9Fvt [Occ=Once] ->
              case ds1_s9Fvr of {
                GHC.Conc.Sync.TVar tvar2#_s9Fvv [Occ=Once] ->
                    case sameTVar# [tvar1#_s9Fvt tvar2#_s9Fvv] of sat_s9Fvw {
                      __DEFAULT -> tagToEnum# [sat_s9Fvw];
                    };
              };
        };

GHC.Conc.Sync.$fEqTVar_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.TVar a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s9Fvx eta1_s9Fvy]
        case eta_s9Fvx of {
          GHC.Conc.Sync.TVar tvar1#_s9FvA [Occ=Once] ->
              case eta1_s9Fvy of {
                GHC.Conc.Sync.TVar tvar2#_s9FvC [Occ=Once] ->
                    case sameTVar# [tvar1#_s9FvA tvar2#_s9FvC] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Conc.Sync.$fEqTVar [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Conc.Sync.TVar a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqTVar_$c==
                                     GHC.Conc.Sync.$fEqTVar_$c/=];

GHC.Conc.Sync.$fShowBlockReason12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnMVar"#;

GHC.Conc.Sync.$fShowBlockReason11 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason12;

GHC.Conc.Sync.$fShowBlockReason10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnBlackHole"#;

GHC.Conc.Sync.$fShowBlockReason9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason10;

GHC.Conc.Sync.$fShowBlockReason8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnException"#;

GHC.Conc.Sync.$fShowBlockReason7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason8;

GHC.Conc.Sync.$fShowBlockReason6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnSTM"#;

GHC.Conc.Sync.$fShowBlockReason5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason6;

GHC.Conc.Sync.$fShowBlockReason4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnForeignCall"#;

GHC.Conc.Sync.$fShowBlockReason3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason4;

GHC.Conc.Sync.$fShowBlockReason2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnOther"#;

GHC.Conc.Sync.$fShowBlockReason1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason2;

GHC.Conc.Sync.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Conc.Sync.BlockReason -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s9FvE w1_s9FvF]
        case w_s9FvE of {
          GHC.Conc.Sync.BlockedOnMVar ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason11 w1_s9FvF;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason9 w1_s9FvF;
          GHC.Conc.Sync.BlockedOnException ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason7 w1_s9FvF;
          GHC.Conc.Sync.BlockedOnSTM ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason5 w1_s9FvF;
          GHC.Conc.Sync.BlockedOnForeignCall ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason3 w1_s9FvF;
          GHC.Conc.Sync.BlockedOnOther ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason1 w1_s9FvF;
        };

GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Conc.Sync.BlockReason -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s9FvH w1_s9FvI w2_s9FvJ]
        GHC.Conc.Sync.$w$cshowsPrec w1_s9FvI w2_s9FvJ;

GHC.Conc.Sync.$fShowBlockReason_$cshow
  :: GHC.Conc.Sync.BlockReason -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9FvK]
        case x_s9FvK of {
          GHC.Conc.Sync.BlockedOnMVar -> GHC.Conc.Sync.$fShowBlockReason11;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              GHC.Conc.Sync.$fShowBlockReason9;
          GHC.Conc.Sync.BlockedOnException ->
              GHC.Conc.Sync.$fShowBlockReason7;
          GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.$fShowBlockReason5;
          GHC.Conc.Sync.BlockedOnForeignCall ->
              GHC.Conc.Sync.$fShowBlockReason3;
          GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.$fShowBlockReason1;
        };

GHC.Conc.Sync.$fShowBlockReason_$cshowList
  :: [GHC.Conc.Sync.BlockReason] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9FvM s_s9FvN]
        GHC.Show.showList__ GHC.Conc.Sync.$w$cshowsPrec ls_s9FvM s_s9FvN;

GHC.Conc.Sync.$fShowBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.BlockReason
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec
                                    GHC.Conc.Sync.$fShowBlockReason_$cshow
                                    GHC.Conc.Sync.$fShowBlockReason_$cshowList];

GHC.Conc.Sync.$fEqBlockReason_$c==
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s9FvO ds1_s9FvP]
        case ds_s9FvO of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fEqBlockReason_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s9FvX eta1_s9FvY]
        case eta_s9FvX of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fEqBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.BlockReason
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqBlockReason_$c==
                                     GHC.Conc.Sync.$fEqBlockReason_$c/=];

GHC.Conc.Sync.$fEqThreadStatus_$c==
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fw6 ds1_s9Fw7]
        case ds_s9Fw6 of {
          GHC.Conc.Sync.ThreadRunning ->
              case ds1_s9Fw7 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case ds1_s9Fw7 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9Fwb [Occ=Once] ->
              case ds1_s9Fw7 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9Fwd [Occ=Once] ->
                    GHC.Conc.Sync.$fEqBlockReason_$c== a1_s9Fwb b1_s9Fwd;
              };
          GHC.Conc.Sync.ThreadDied ->
              case ds1_s9Fw7 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fEqThreadStatus_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s9Fwf eta1_s9Fwg]
        case eta_s9Fwf of {
          GHC.Conc.Sync.ThreadRunning ->
              case eta1_s9Fwg of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case eta1_s9Fwg of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9Fwk [Occ=Once!] ->
              case eta1_s9Fwg of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9Fwm [Occ=Once*!] ->
                    case a1_s9Fwk of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                    };
              };
          GHC.Conc.Sync.ThreadDied ->
              case eta1_s9Fwg of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fEqThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqThreadStatus_$c==
                                     GHC.Conc.Sync.$fEqThreadStatus_$c/=];

GHC.Conc.Sync.numSparks1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9Fwv]
        case numSparks# [s_s9Fwv] of {
          (#,#) ipv_s9Fwx [Occ=Once] ipv1_s9Fwy [Occ=Once] ->
              let {
                sat_s9Fwz [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [ipv1_s9Fwy];
              } in  (#,#) [ipv_s9Fwx sat_s9Fwz];
        };

GHC.Conc.Sync.numSparks :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.numSparks1 eta_B1;

GHC.Conc.Sync.throwTo1
  :: forall e.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.ThreadId
     -> e
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(U),A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dException_s9FwA ds_s9FwB ex_s9FwC eta_s9FwD]
        case ds_s9FwB of {
          GHC.Conc.Sync.ThreadId tid_s9FwF [Occ=Once] ->
              let {
                sat_s9FwG [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [$dException_s9FwA ex_s9FwC] \u []
                        GHC.Exception.toException $dException_s9FwA ex_s9FwC;
              } in 
                case killThread# [tid_s9FwF sat_s9FwG eta_s9FwD] of s1_s9FwH {
                  __DEFAULT -> (#,#) [s1_s9FwH GHC.Tuple.()];
                };
        };

GHC.Conc.Sync.throwTo
  :: forall e.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.ThreadId -> e -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(U),A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.throwTo1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.myThreadId1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FwI]
        case myThreadId# [s_s9FwI] of {
          (#,#) ipv_s9FwK [Occ=Once] ipv1_s9FwL [Occ=Once] ->
              let {
                sat_s9FwM [Occ=Once] :: GHC.Conc.Sync.ThreadId
                [LclId] =
                    CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9FwL];
              } in  (#,#) [ipv_s9FwK sat_s9FwM];
        };

GHC.Conc.Sync.myThreadId :: GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.myThreadId1 eta_B1;

GHC.Conc.Sync.yield1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FwN]
        case yield# [s_s9FwN] of s1_s9FwO {
          __DEFAULT -> (#,#) [s1_s9FwO GHC.Tuple.()];
        };

GHC.Conc.Sync.yield :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.yield1 eta_B1;

GHC.Conc.Sync.labelThread1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s9FwP str_s9FwQ eta_s9FwR]
        case ds_s9FwP of {
          GHC.Conc.Sync.ThreadId t_s9FwT [Occ=OnceL] ->
              let {
                sat_s9FwZ [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                [LclId] =
                    [t_s9FwT] \r [ds1_s9FwU eta1_s9FwV]
                        case ds1_s9FwU of {
                          GHC.Ptr.Ptr p_s9FwX [Occ=Once] ->
                              case labelThread# [t_s9FwT p_s9FwX eta1_s9FwV] of s1_s9FwY {
                                __DEFAULT -> (#,#) [s1_s9FwY GHC.Tuple.()];
                              };
                        };
              } in 
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8 str_s9FwQ sat_s9FwZ eta_s9FwR;
        };

GHC.Conc.Sync.labelThread
  :: GHC.Conc.Sync.ThreadId -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.labelThread1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.pseq [InlPrag=INLINE (sat-args=2)]
  :: forall a b. a -> b -> b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [x_s9Fx0 y_s9Fx1] case x_s9Fx0 of { __DEFAULT -> y_s9Fx1; };

GHC.Conc.Sync.par [InlPrag=INLINE (sat-args=2)]
  :: forall a b. a -> b -> b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [x_s9Fx3 y_s9Fx4]
        case par# [x_s9Fx3] of { __DEFAULT -> y_s9Fx4; };

GHC.Conc.Sync.runSparks_loop [Occ=LoopBreaker]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9Fx6]
        case getSpark# [s_s9Fx6] of {
          (#,,#) ipv_s9Fx8 [Occ=Once*]
                 ipv1_s9Fx9 [Occ=Once!]
                 ipv2_s9Fxa [Occ=Once] ->
              case ipv1_s9Fx9 of {
                __DEFAULT ->
                    case ipv2_s9Fxa of {
                      __DEFAULT -> GHC.Conc.Sync.runSparks_loop ipv_s9Fx8;
                    };
                0# -> (#,#) [ipv_s9Fx8 GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.runSparks :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.runSparks_loop eta_B1;

GHC.Conc.Sync.threadCapability1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fxd eta_s9Fxe]
        case ds_s9Fxd of {
          GHC.Conc.Sync.ThreadId t_s9Fxg [Occ=Once] ->
              case threadStatus# [t_s9Fxg eta_s9Fxe] of {
                (#,,,#) ipv_s9Fxi [Occ=Once]
                        _ [Occ=Dead]
                        ipv2_s9Fxk [Occ=Once]
                        ipv3_s9Fxl [Occ=Once!] ->
                    let {
                      sat_s9Fxo [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [ipv3_s9Fxl] \u []
                              case ipv3_s9Fxl of {
                                __DEFAULT -> GHC.Types.True [];
                                0# -> GHC.Types.False [];
                              }; } in
                    let {
                      sat_s9Fxm [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          CCCS GHC.Types.I#! [ipv2_s9Fxk]; } in
                    let {
                      sat_s9Fxp [Occ=Once] :: (GHC.Types.Int, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [sat_s9Fxm sat_s9Fxo];
                    } in  (#,#) [ipv_s9Fxi sat_s9Fxp];
              };
        };

GHC.Conc.Sync.threadCapability
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO (GHC.Types.Int, GHC.Types.Bool)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.threadCapability1 eta_B2 eta_B1;

GHC.Conc.Sync.mkWeakThreadId1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Weak.Weak GHC.Conc.Sync.ThreadId #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [t_s9Fxq eta_s9Fxr]
        case t_s9Fxq of wild_s9Fxs {
          GHC.Conc.Sync.ThreadId t#_s9Fxt [Occ=Once] ->
              case mkWeakNoFinalizer# [t#_s9Fxt wild_s9Fxs eta_s9Fxr] of {
                (#,#) ipv_s9Fxv [Occ=Once] ipv1_s9Fxw [Occ=Once] ->
                    let {
                      sat_s9Fxx [Occ=Once] :: GHC.Weak.Weak GHC.Conc.Sync.ThreadId
                      [LclId] =
                          CCCS GHC.Weak.Weak! [ipv1_s9Fxw];
                    } in  (#,#) [ipv_s9Fxv sat_s9Fxx];
              };
        };

GHC.Conc.Sync.mkWeakThreadId
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO (GHC.Weak.Weak GHC.Conc.Sync.ThreadId)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.mkWeakThreadId1 eta_B2 eta_B1;

GHC.Conc.Sync.newStablePtrPrimMVar1
  :: GHC.MVar.MVar ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fxy eta_s9Fxz]
        case ds_s9Fxy of {
          GHC.MVar.MVar m_s9FxB [Occ=Once] ->
              case makeStablePtr# [m_s9FxB eta_s9Fxz] of {
                (#,#) ipv_s9FxD [Occ=Once] ipv1_s9FxE [Occ=Once] ->
                    let {
                      sat_s9FxF [Occ=Once] :: GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar
                      [LclId] =
                          CCCS GHC.Stable.StablePtr! [ipv1_s9FxE];
                    } in  (#,#) [ipv_s9FxD sat_s9FxF];
              };
        };

GHC.Conc.Sync.newStablePtrPrimMVar
  :: GHC.MVar.MVar ()
     -> GHC.Types.IO (GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.newStablePtrPrimMVar1 eta_B2 eta_B1;

$c>>=_r9FuK
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> (a -> GHC.Conc.Sync.STM b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [m_s9FxG k_s9FxH s_s9FxI]
        case m_s9FxG s_s9FxI of {
          (#,#) ipv_s9FxK [Occ=Once] ipv1_s9FxL [Occ=Once] ->
              k_s9FxH ipv1_s9FxL ipv_s9FxK;
        };

GHC.Conc.Sync.$fMonadSTM_$c>>= [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> (a -> GHC.Conc.Sync.STM b) -> GHC.Conc.Sync.STM b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] $c>>=_r9FuK eta_B3 eta_B2 eta_B1;

$c*>_r9FuL
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [m_s9FxM k_s9FxN s_s9FxO]
        case m_s9FxM s_s9FxO of {
          (#,#) ipv_s9FxQ [Occ=Once] _ [Occ=Dead] -> k_s9FxN ipv_s9FxQ;
        };

GHC.Conc.Sync.$fApplicativeSTM_$c*> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM b -> GHC.Conc.Sync.STM b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] $c*>_r9FuL eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.orElse
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<xC(S),1*C1(U)><L,1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] catchRetry# [eta_B3 eta_B2 eta_B1];

GHC.Conc.Sync.catchSTM1
  :: forall e a.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.STM a
     -> (e -> GHC.Conc.Sync.STM a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(U),A)><L,1*C1(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [$dException_s9FxS ds_s9FxT handler_s9FxU eta_s9FxV]
        let {
          sat_s9Fy0 [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CX5 #)
          [LclId] =
              [$dException_s9FxS handler_s9FxU] \r [e1_s9FxW]
                  case GHC.Exception.fromException $dException_s9FxS e1_s9FxW of {
                    GHC.Base.Nothing ->
                        let {
                          sat_s9FxY [Occ=OnceT[0]]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CX5 #)
                          [LclId] =
                              [e1_s9FxW] \r [eta_B1] raiseIO# [e1_s9FxW eta_B1];
                        } in  sat_s9FxY;
                    GHC.Base.Just e'_s9FxZ [Occ=Once] -> handler_s9FxU e'_s9FxZ;
                  };
        } in  catchSTM# [ds_s9FxT sat_s9Fy0 eta_s9FxV];

GHC.Conc.Sync.catchSTM
  :: forall e a.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.STM a
     -> (e -> GHC.Conc.Sync.STM a) -> GHC.Conc.Sync.STM a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(U),A)><L,1*C1(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.catchSTM1 eta_B4 eta_B3 eta_B2 eta_B1;

$cpure_r9FuM
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [x_s9Fy1 s_s9Fy2] (#,#) [s_s9Fy2 x_s9Fy1];

GHC.Conc.Sync.$fApplicativeSTM_$cpure [InlPrag=INLINE (sat-args=1)]
  :: forall a. a -> GHC.Conc.Sync.STM a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] $cpure_r9FuM eta_B2 eta_B1;

GHC.Conc.Sync.unsafeIOToSTM1
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Fy3] ds_s9Fy3;

GHC.Conc.Sync.unsafeIOToSTM
  :: forall a. GHC.Types.IO a -> GHC.Conc.Sync.STM a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.unsafeIOToSTM1 eta_B1;

GHC.Conc.Sync.atomically
  :: forall a. GHC.Conc.Sync.STM a -> GHC.Types.IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] atomically# [eta_B2 eta_B1];

GHC.Conc.Sync.retry :: forall a. GHC.Conc.Sync.STM a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] retry# [eta_B1];

GHC.Conc.Sync.throwSTM1
  :: forall e a.
     GHC.Exception.Exception e =>
     e
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U><B,U>x,
 Unf=OtherCon []] =
    [] \r [$dException_s9Fy4 e1_s9Fy5 eta_s9Fy6]
        let {
          sat_s9Fy7 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [$dException_s9Fy4 e1_s9Fy5] \u []
                  GHC.Exception.toException $dException_s9Fy4 e1_s9Fy5;
        } in  raiseIO# [sat_s9Fy7 eta_s9Fy6];

GHC.Conc.Sync.throwSTM
  :: forall e a.
     GHC.Exception.Exception e =>
     e -> GHC.Conc.Sync.STM a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U><B,U>x,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.throwSTM1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.newTVar1
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.TVar a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [val_s9Fy8 s1#_s9Fy9]
        case newTVar# [val_s9Fy8 s1#_s9Fy9] of {
          (#,#) ipv_s9Fyb [Occ=Once] ipv1_s9Fyc [Occ=Once] ->
              let {
                sat_s9Fyd [Occ=Once] :: GHC.Conc.Sync.TVar a_a9CVx
                [LclId] =
                    CCCS GHC.Conc.Sync.TVar! [ipv1_s9Fyc];
              } in  (#,#) [ipv_s9Fyb sat_s9Fyd];
        };

GHC.Conc.Sync.newTVar
  :: forall a. a -> GHC.Conc.Sync.STM (GHC.Conc.Sync.TVar a)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.newTVar1 eta_B2 eta_B1;

GHC.Conc.Sync.newTVarIO
  :: forall a. a -> GHC.Types.IO (GHC.Conc.Sync.TVar a)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.newTVar1 eta_B2 eta_B1;

GHC.Conc.Sync.readTVarIO1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fye eta_s9Fyf]
        case ds_s9Fye of {
          GHC.Conc.Sync.TVar tvar#_s9Fyh [Occ=Once] ->
              readTVarIO# [tvar#_s9Fyh eta_s9Fyf];
        };

GHC.Conc.Sync.readTVarIO
  :: forall a. GHC.Conc.Sync.TVar a -> GHC.Types.IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.readTVarIO1 eta_B2 eta_B1;

GHC.Conc.Sync.readTVar1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fyi eta_s9Fyj]
        case ds_s9Fyi of {
          GHC.Conc.Sync.TVar tvar#_s9Fyl [Occ=Once] ->
              readTVar# [tvar#_s9Fyl eta_s9Fyj];
        };

GHC.Conc.Sync.readTVar
  :: forall a. GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.STM a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.readTVar1 eta_B2 eta_B1;

GHC.Conc.Sync.writeTVar1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fym val_s9Fyn eta_s9Fyo]
        case ds_s9Fym of {
          GHC.Conc.Sync.TVar tvar#_s9Fyq [Occ=Once] ->
              case writeTVar# [tvar#_s9Fyq val_s9Fyn eta_s9Fyo] of s2#_s9Fyr {
                __DEFAULT -> (#,#) [s2#_s9Fyr GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.writeTVar
  :: forall a. GHC.Conc.Sync.TVar a -> a -> GHC.Conc.Sync.STM ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.writeTVar1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.$fOrdBlockReason_$ccompare
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9Fys b_s9Fyt]
        case a_s9Fys of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9Fyt of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9Fyt of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9Fyt of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9Fyt of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9Fyt of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9Fyt of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.EQ [];
              };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c<
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9FyB b_s9FyC]
        case a_s9FyB of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9FyC of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9FyC of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9FyC of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9FyC of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9FyC of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9FyC of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c<=
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9FyK b_s9FyL]
        case b_s9FyL of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case a_s9FyK of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case a_s9FyK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case a_s9FyK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case a_s9FyK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case a_s9FyK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case a_s9FyK of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$cmax
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.BlockReason
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FyT y_s9FyU]
        case y_s9FyU of {
          GHC.Conc.Sync.BlockedOnMVar -> x_s9FyT;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case x_s9FyT of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnException ->
                    GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case x_s9FyT of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case x_s9FyT of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case x_s9FyT of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case x_s9FyT of { __DEFAULT -> GHC.Conc.Sync.BlockedOnOther []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c>=
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9Fz1 b_s9Fz2]
        case a_s9Fz1 of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9Fz2 of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9Fz2 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9Fz2 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9Fz2 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9Fz2 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9Fz2 of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c>
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9Fza b_s9Fzb]
        GHC.Conc.Sync.$fOrdBlockReason_$c< b_s9Fzb a_s9Fza;

GHC.Conc.Sync.$fOrdBlockReason_$cmin
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.BlockReason
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9Fzc y_s9Fzd]
        case y_s9Fzd of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case x_s9Fzc of { __DEFAULT -> GHC.Conc.Sync.BlockedOnMVar []; };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case x_s9Fzc of wild1_s9Fzg {
                __DEFAULT -> wild1_s9Fzg;
                GHC.Conc.Sync.BlockedOnException ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case x_s9Fzc of wild1_s9Fzh {
                __DEFAULT -> wild1_s9Fzh;
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnException [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case x_s9Fzc of wild1_s9Fzi {
                __DEFAULT -> wild1_s9Fzi;
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnSTM [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case x_s9Fzc of wild1_s9Fzj {
                __DEFAULT -> wild1_s9Fzj;
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
              };
          GHC.Conc.Sync.BlockedOnOther -> x_s9Fzc;
        };

GHC.Conc.Sync.$fOrdBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.BlockReason
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqBlockReason
                                      GHC.Conc.Sync.$fOrdBlockReason_$ccompare
                                      GHC.Conc.Sync.$fOrdBlockReason_$c<
                                      GHC.Conc.Sync.$fOrdBlockReason_$c<=
                                      GHC.Conc.Sync.$fOrdBlockReason_$c>
                                      GHC.Conc.Sync.$fOrdBlockReason_$c>=
                                      GHC.Conc.Sync.$fOrdBlockReason_$cmax
                                      GHC.Conc.Sync.$fOrdBlockReason_$cmin];

GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9Fzk b_s9Fzl]
        case a_s9Fzk of {
          GHC.Conc.Sync.ThreadRunning ->
              case b_s9Fzl of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.EQ [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case b_s9Fzl of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.EQ [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9Fzr [Occ=Once] ->
              case b_s9Fzl of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadBlocked b1_s9Fzt [Occ=Once] ->
                    GHC.Conc.Sync.$fOrdBlockReason_$ccompare a1_s9Fzr b1_s9Fzt;
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case b_s9Fzl of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.EQ [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c<
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9Fzv y_s9Fzw]
        case x_s9Fzv of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9Fzw of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9Fzw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FzC [Occ=Once!] ->
              case y_s9Fzw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9FzE [Occ=Once*] ->
                    case a1_s9FzC of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FzE of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FzE of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FzE of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FzE of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FzE of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FzE of { __DEFAULT -> GHC.Types.False []; };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9Fzw of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c>=
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FzN y_s9FzO]
        case x_s9FzN of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9FzO of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9FzO of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FzU [Occ=Once!] ->
              case y_s9FzO of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9FzW [Occ=Once*] ->
                    case a1_s9FzU of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FzW of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FzW of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FzW of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FzW of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FzW of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FzW of { __DEFAULT -> GHC.Types.True []; };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9FzO of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c>
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FA5 y_s9FA6]
        case x_s9FA5 of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9FA6 of { __DEFAULT -> GHC.Types.False []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9FA6 of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FAb [Occ=Once!] ->
              case y_s9FA6 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9FAd [Occ=Once*] ->
                    case a1_s9FAb of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FAd of { __DEFAULT -> GHC.Types.False []; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FAd of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FAd of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FAd of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FAd of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FAd of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9FA6 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c<=
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FAm y_s9FAn]
        case x_s9FAm of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9FAn of { __DEFAULT -> GHC.Types.True []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9FAn of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FAs [Occ=Once!] ->
              case y_s9FAn of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9FAu [Occ=Once*] ->
                    case a1_s9FAs of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FAu of { __DEFAULT -> GHC.Types.True []; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FAu of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FAu of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FAu of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FAu of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FAu of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9FAn of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$cmax
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FAD y_s9FAE]
        case x_s9FAD of wild_s9FAF {
          GHC.Conc.Sync.ThreadRunning -> y_s9FAE;
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9FAE of wild1_s9FAG {
                __DEFAULT -> GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> wild1_s9FAG;
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadDied [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FAI [Occ=Once!] ->
              case y_s9FAE of wild1_s9FAJ {
                __DEFAULT -> wild_s9FAF;
                GHC.Conc.Sync.ThreadBlocked b1_s9FAK [Occ=Once*] ->
                    case a1_s9FAI of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FAK of { __DEFAULT -> wild1_s9FAJ; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FAK of {
                            GHC.Conc.Sync.BlockedOnMVar -> wild_s9FAF;
                            GHC.Conc.Sync.BlockedOnBlackHole -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnException -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9FAJ;
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FAK of {
                            __DEFAULT -> wild_s9FAF;
                            GHC.Conc.Sync.BlockedOnException -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9FAJ;
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FAK of {
                            __DEFAULT -> wild_s9FAF;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9FAJ;
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FAK of {
                            __DEFAULT -> wild_s9FAF;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9FAJ;
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FAK of {
                            __DEFAULT -> wild_s9FAF;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9FAJ;
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadDied [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9FAE of { __DEFAULT -> GHC.Conc.Sync.ThreadDied []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$cmin
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FAT y_s9FAU]
        case x_s9FAT of wild_s9FAV {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9FAU of { __DEFAULT -> GHC.Conc.Sync.ThreadRunning []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9FAU of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Conc.Sync.ThreadRunning [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] ->
                    GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadFinished [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FAZ [Occ=Once!] ->
              case y_s9FAU of wild1_s9FB0 {
                __DEFAULT -> wild1_s9FB0;
                GHC.Conc.Sync.ThreadBlocked b1_s9FB1 [Occ=Once*] ->
                    case a1_s9FAZ of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FB1 of { __DEFAULT -> wild_s9FAV; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FB1 of {
                            GHC.Conc.Sync.BlockedOnMVar -> wild1_s9FB0;
                            GHC.Conc.Sync.BlockedOnBlackHole -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnException -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9FAV;
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FB1 of {
                            __DEFAULT -> wild1_s9FB0;
                            GHC.Conc.Sync.BlockedOnException -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9FAV;
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FB1 of {
                            __DEFAULT -> wild1_s9FB0;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9FAV;
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FB1 of {
                            __DEFAULT -> wild1_s9FB0;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9FAV;
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FB1 of {
                            __DEFAULT -> wild1_s9FB0;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9FAV;
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> wild_s9FAV;
              };
          GHC.Conc.Sync.ThreadDied -> y_s9FAU;
        };

GHC.Conc.Sync.$fOrdThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqThreadStatus
                                      GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c<
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c<=
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c>
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c>=
                                      GHC.Conc.Sync.$fOrdThreadStatus_$cmax
                                      GHC.Conc.Sync.$fOrdThreadStatus_$cmin];

GHC.Conc.Sync.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Conc.Sync.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$trModule4];

GHC.Conc.Sync.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.Sync"#;

GHC.Conc.Sync.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$trModule2];

GHC.Conc.Sync.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Conc.Sync.$trModule3
                                     GHC.Conc.Sync.$trModule1];

$krep_r9FuN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'LiftedRep
                                              GHC.Types.[]];

$krep1_r9FuO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRuntimeRep
                                              GHC.Types.[]];

$krep2_r9FuP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRealWorld
                                              GHC.Types.[]];

$krep3_r9FuQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep4_r9FuR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcThreadId#
                                              GHC.Types.[]];

$krep5_r9FuS :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r9FuQ GHC.Types.[]];

$krep6_r9FuT :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r9FuP $krep5_r9FuS];

$krep7_r9FuU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcTVar#
                                              $krep6_r9FuT];

$krep8_r9FuV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r9FuP GHC.Types.[]];

$krep9_r9FuW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcState#
                                              $krep8_r9FuV];

$krep10_r9FuX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r9FuO GHC.Types.[]];

$krep11_r9FuY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'[]
                                              $krep10_r9FuX];

$krep12_r9FuZ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r9FuY GHC.Types.[]];

$krep13_r9Fv0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'TupleRep
                                              $krep12_r9FuZ];

$krep14_r9Fv1 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r9FuW $krep5_r9FuS];

$krep15_r9Fv2 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r9FuN $krep14_r9Fv1];

$krep16_r9Fv3 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r9Fv0 $krep15_r9Fv2];

$krep17_r9Fv4 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc(#,#)
                                              $krep16_r9Fv3];

$krep18_r9Fv5 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r9FuW $krep17_r9Fv4];

GHC.Conc.Sync.$tcThreadId2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadId"#;

GHC.Conc.Sync.$tcThreadId1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcThreadId2];

GHC.Conc.Sync.$tcThreadId :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16775948407395805744##
                                    12520674293648100702##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcThreadId1
                                    0#
                                    GHC.Types.krep$*];

$krep19_r9Fv6 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcThreadId
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'ThreadId1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r9FuR $krep19_r9Fv6];

GHC.Conc.Sync.$tc'ThreadId3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadId"#;

GHC.Conc.Sync.$tc'ThreadId2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadId3];

GHC.Conc.Sync.$tc'ThreadId :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18342150043682338300##
                                    5104860271509165481##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadId2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadId1];

GHC.Conc.Sync.$tcBlockReason2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockReason"#;

GHC.Conc.Sync.$tcBlockReason1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcBlockReason2];

GHC.Conc.Sync.$tcBlockReason :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13301038780413995570##
                                    11021250300446969031##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcBlockReason1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tc'BlockedOnBlackHole1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcBlockReason
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'BlockedOnMVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnMVar"#;

GHC.Conc.Sync.$tc'BlockedOnMVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnMVar2];

GHC.Conc.Sync.$tc'BlockedOnMVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6633002816895506850##
                                    13520604374172074732##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnMVar1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnBlackHole3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnBlackHole"#;

GHC.Conc.Sync.$tc'BlockedOnBlackHole2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnBlackHole3];

GHC.Conc.Sync.$tc'BlockedOnBlackHole :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9499731398899925739##
                                    7296688042620961692##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole2
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnException2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnException"#;

GHC.Conc.Sync.$tc'BlockedOnException1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnException2];

GHC.Conc.Sync.$tc'BlockedOnException :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16834505563200403543##
                                    10899729493106152581##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnException1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnSTM2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnSTM"#;

GHC.Conc.Sync.$tc'BlockedOnSTM1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnSTM2];

GHC.Conc.Sync.$tc'BlockedOnSTM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1161208048218837616##
                                    14246412223428266787##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnSTM1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnForeignCall2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnForeignCall"#;

GHC.Conc.Sync.$tc'BlockedOnForeignCall1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnForeignCall2];

GHC.Conc.Sync.$tc'BlockedOnForeignCall :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7408412473094687054##
                                    5512662453084487661##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnForeignCall1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnOther2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnOther"#;

GHC.Conc.Sync.$tc'BlockedOnOther1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnOther2];

GHC.Conc.Sync.$tc'BlockedOnOther :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12822899422417308746##
                                    1265626399802742388##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnOther1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tcThreadStatus2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadStatus"#;

GHC.Conc.Sync.$tcThreadStatus1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcThreadStatus2];

GHC.Conc.Sync.$tcThreadStatus :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16437204929171641638##
                                    3495092226815585861##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcThreadStatus1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tc'ThreadDied1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcThreadStatus
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'ThreadRunning2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadRunning"#;

GHC.Conc.Sync.$tc'ThreadRunning1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadRunning2];

GHC.Conc.Sync.$tc'ThreadRunning :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1667122312602609882##
                                    13647871799576313560##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadRunning1
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadFinished2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadFinished"#;

GHC.Conc.Sync.$tc'ThreadFinished1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadFinished2];

GHC.Conc.Sync.$tc'ThreadFinished :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2441107603776884109##
                                    12730966154693836607##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadFinished1
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadDied3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadDied"#;

GHC.Conc.Sync.$tc'ThreadDied2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadDied3];

GHC.Conc.Sync.$tc'ThreadDied :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9513974555658789847##
                                    4757719484357493227##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadDied2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadBlocked1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Conc.Sync.$tc'BlockedOnBlackHole1
                                         GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadBlocked3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadBlocked"#;

GHC.Conc.Sync.$tc'ThreadBlocked2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadBlocked3];

GHC.Conc.Sync.$tc'ThreadBlocked :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1896650886570328403##
                                    13390928353603149841##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadBlocked2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadBlocked1];

GHC.Conc.Sync.$tcPrimMVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrimMVar"#;

GHC.Conc.Sync.$tcPrimMVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcPrimMVar2];

GHC.Conc.Sync.$tcPrimMVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9965391380168186507##
                                    18322737771689556223##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcPrimMVar1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tcSTM2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STM"#;

GHC.Conc.Sync.$tcSTM1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcSTM2];

GHC.Conc.Sync.$tcSTM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2004856025729794332##
                                    14974623362753764267##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcSTM1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep20_r9Fv7 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcSTM
                                              $krep5_r9FuS];

GHC.Conc.Sync.$tc'STM1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r9Fv5 $krep20_r9Fv7];

GHC.Conc.Sync.$tc'STM3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'STM"#;

GHC.Conc.Sync.$tc'STM2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'STM3];

GHC.Conc.Sync.$tc'STM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11288073744523536973##
                                    9767688212531311940##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'STM2
                                    1#
                                    GHC.Conc.Sync.$tc'STM1];

GHC.Conc.Sync.$tcTVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TVar"#;

GHC.Conc.Sync.$tcTVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcTVar2];

GHC.Conc.Sync.$tcTVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13084572405727191592##
                                    5232564955606145236##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcTVar1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep21_r9Fv8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcTVar
                                              $krep5_r9FuS];

GHC.Conc.Sync.$tc'TVar1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r9FuU $krep21_r9Fv8];

GHC.Conc.Sync.$tc'TVar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TVar"#;

GHC.Conc.Sync.$tc'TVar2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'TVar3];

GHC.Conc.Sync.$tc'TVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9463269625853265574##
                                    3517068532143837766##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'TVar2
                                    1#
                                    GHC.Conc.Sync.$tc'TVar1];

GHC.Conc.Sync.$fShowThreadId2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadId "#;

GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
  :: GHC.Types.Int -> GHC.Conc.Sync.ThreadId -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(U)><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [d_s9FB9 t_s9FBa]
        let {
          x_s9FBb [Occ=OnceL, Dmd=<L,U(U)>] :: Foreign.C.Types.CInt
          [LclId] =
              [t_s9FBa] \u []
                  case t_s9FBa of {
                    GHC.Conc.Sync.ThreadId t1_s9FBd [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t1_s9FBd GHC.Prim.realWorld#] of {
                          (#,#) _ [Occ=Dead] ds1_s9FBh [Occ=Once] ->
                              case narrow32Int# [ds1_s9FBh] of sat_s9FBi {
                                __DEFAULT -> GHC.Int.I32# [sat_s9FBi];
                              };
                        };
                  }; } in
        let {
          sat_s9FBs [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [d_s9FB9 x_s9FBb] \r [x1_s9FBj]
                  let {
                    sat_s9FBr [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [d_s9FB9 x_s9FBb x1_s9FBj] \u []
                            case x_s9FBb of {
                              GHC.Int.I32# x#_s9FBl [Occ=Once] ->
                                  case d_s9FB9 of {
                                    GHC.Types.I# ww1_s9FBn [Occ=Once] ->
                                        case
                                            GHC.Show.$wshowSignedInt ww1_s9FBn x#_s9FBl x1_s9FBj
                                        of
                                        { (#,#) ww5_s9FBp [Occ=Once] ww6_s9FBq [Occ=Once] ->
                                              : [ww5_s9FBp ww6_s9FBq];
                                        };
                                  };
                            };
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.Conc.Sync.$fShowThreadId2 sat_s9FBr;
        } in  sat_s9FBs;

GHC.Conc.Sync.$fShowThreadId_$cshow
  :: GHC.Conc.Sync.ThreadId -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [x_s9FBt]
        let {
          sat_s9FBE [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_s9FBt] \u []
                  case x_s9FBt of {
                    GHC.Conc.Sync.ThreadId t_s9FBv [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t_s9FBv GHC.Prim.realWorld#] of {
                          (#,#) _ [Occ=Dead] ds1_s9FBz [Occ=Once] ->
                              case narrow32Int# [ds1_s9FBz] of sat_s9FBA {
                                __DEFAULT ->
                                    case GHC.Show.$wshowSignedInt 0# sat_s9FBA GHC.Types.[] of {
                                      (#,#) ww5_s9FBC [Occ=Once] ww6_s9FBD [Occ=Once] ->
                                          : [ww5_s9FBC ww6_s9FBD];
                                    };
                              };
                        };
                  };
        } in 
          GHC.CString.unpackAppendCString#
              GHC.Conc.Sync.$fShowThreadId2 sat_s9FBE;

GHC.Conc.Sync.$fShowThreadId1
  :: GHC.Conc.Sync.ThreadId -> GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [t_s9FBF]
        let {
          x_s9FBG [Occ=OnceL, Dmd=<L,U(U)>] :: Foreign.C.Types.CInt
          [LclId] =
              [t_s9FBF] \u []
                  case t_s9FBF of {
                    GHC.Conc.Sync.ThreadId t1_s9FBI [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t1_s9FBI GHC.Prim.realWorld#] of {
                          (#,#) _ [Occ=Dead] ds1_s9FBM [Occ=Once] ->
                              case narrow32Int# [ds1_s9FBM] of sat_s9FBN {
                                __DEFAULT -> GHC.Int.I32# [sat_s9FBN];
                              };
                        };
                  }; } in
        let {
          sat_s9FBV [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [x_s9FBG] \r [x1_s9FBO]
                  let {
                    sat_s9FBU [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [x_s9FBG x1_s9FBO] \u []
                            case x_s9FBG of {
                              GHC.Int.I32# x#_s9FBQ [Occ=Once] ->
                                  case GHC.Show.$wshowSignedInt 0# x#_s9FBQ x1_s9FBO of {
                                    (#,#) ww5_s9FBS [Occ=Once] ww6_s9FBT [Occ=Once] ->
                                        : [ww5_s9FBS ww6_s9FBT];
                                  };
                            };
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.Conc.Sync.$fShowThreadId2 sat_s9FBU;
        } in  sat_s9FBV;

GHC.Conc.Sync.$fShowThreadId_$cshowList
  :: [GHC.Conc.Sync.ThreadId] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s9FBW s_s9FBX]
        GHC.Show.showList__ GHC.Conc.Sync.$fShowThreadId1 ls_s9FBW s_s9FBX;

GHC.Conc.Sync.$fShowThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
                                    GHC.Conc.Sync.$fShowThreadId_$cshow
                                    GHC.Conc.Sync.$fShowThreadId_$cshowList];

reportHeapOverflow1_r9Fv9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s9FBY]
        case __pkg_ccall base-4.11.0.0 [ds_s9FBY] of {
          Unit# ds1_s9FC1 [Occ=Once] -> (#,#) [ds1_s9FC1 GHC.Tuple.()];
        };

GHC.Conc.Sync.reportHeapOverflow :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] reportHeapOverflow1_r9Fv9 eta_B1;

GHC.Conc.Sync.cmpThread
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [t1_s9FC2 t2_s9FC3]
        case t2_s9FC3 of {
          GHC.Conc.Sync.ThreadId t_s9FC5 [Occ=Once] ->
              case t1_s9FC2 of {
                GHC.Conc.Sync.ThreadId t4_s9FC7 [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t4_s9FC7 t_s9FC5 GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9FCb [Occ=Once] ->
                          case narrow32Int# [ds1_s9FCb] of {
                            __DEFAULT -> GHC.Types.GT [];
                            -1# -> GHC.Types.LT [];
                            0# -> GHC.Types.EQ [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId_$c==
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [t1_s9FCd t2_s9FCe]
        case t2_s9FCe of {
          GHC.Conc.Sync.ThreadId t_s9FCg [Occ=Once] ->
              case t1_s9FCd of {
                GHC.Conc.Sync.ThreadId t4_s9FCi [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t4_s9FCi t_s9FCg GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9FCm [Occ=Once] ->
                          case narrow32Int# [ds1_s9FCm] of {
                            __DEFAULT -> GHC.Types.False [];
                            0# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s9FCo eta1_s9FCp]
        case eta1_s9FCp of {
          GHC.Conc.Sync.ThreadId t_s9FCr [Occ=Once] ->
              case eta_s9FCo of {
                GHC.Conc.Sync.ThreadId t1_s9FCt [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FCt t_s9FCr GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9FCx [Occ=Once] ->
                          case narrow32Int# [ds1_s9FCx] of {
                            __DEFAULT -> GHC.Types.True [];
                            0# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqThreadId_$c==
                                     GHC.Conc.Sync.$fEqThreadId_$c/=];

GHC.Conc.Sync.$fOrdThreadId_$c<
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9FCz y_s9FCA]
        case y_s9FCA of {
          GHC.Conc.Sync.ThreadId t_s9FCC [Occ=Once] ->
              case x_s9FCz of {
                GHC.Conc.Sync.ThreadId t1_s9FCE [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FCE t_s9FCC GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9FCI [Occ=Once] ->
                          case narrow32Int# [ds1_s9FCI] of {
                            __DEFAULT -> GHC.Types.False [];
                            -1# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c>=
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9FCK y_s9FCL]
        case y_s9FCL of {
          GHC.Conc.Sync.ThreadId t_s9FCN [Occ=Once] ->
              case x_s9FCK of {
                GHC.Conc.Sync.ThreadId t1_s9FCP [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FCP t_s9FCN GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9FCT [Occ=Once] ->
                          case narrow32Int# [ds1_s9FCT] of {
                            __DEFAULT -> GHC.Types.True [];
                            -1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c>
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9FCV y_s9FCW]
        case y_s9FCW of {
          GHC.Conc.Sync.ThreadId t_s9FCY [Occ=Once] ->
              case x_s9FCV of {
                GHC.Conc.Sync.ThreadId t1_s9FD0 [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FD0 t_s9FCY GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9FD4 [Occ=Once] ->
                          case narrow32Int# [ds1_s9FD4] of {
                            __DEFAULT -> GHC.Types.True [];
                            -1# -> GHC.Types.False [];
                            0# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c<=
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9FD6 y_s9FD7]
        case y_s9FD7 of {
          GHC.Conc.Sync.ThreadId t_s9FD9 [Occ=Once] ->
              case x_s9FD6 of {
                GHC.Conc.Sync.ThreadId t1_s9FDb [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FDb t_s9FD9 GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9FDf [Occ=Once] ->
                          case narrow32Int# [ds1_s9FDf] of {
                            __DEFAULT -> GHC.Types.False [];
                            -1# -> GHC.Types.True [];
                            0# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$cmax
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Conc.Sync.ThreadId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s9FDh y_s9FDi]
        case y_s9FDi of wild_s9FDj {
          GHC.Conc.Sync.ThreadId t_s9FDk [Occ=Once] ->
              case x_s9FDh of wild1_s9FDl {
                GHC.Conc.Sync.ThreadId t1_s9FDm [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FDm t_s9FDk GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9FDq [Occ=Once] ->
                          case narrow32Int# [ds1_s9FDq] of {
                            __DEFAULT -> wild1_s9FDl;
                            -1# -> wild_s9FDj;
                            0# -> wild_s9FDj;
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$cmin
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Conc.Sync.ThreadId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s9FDs y_s9FDt]
        case y_s9FDt of wild_s9FDu {
          GHC.Conc.Sync.ThreadId t_s9FDv [Occ=Once] ->
              case x_s9FDs of wild1_s9FDw {
                GHC.Conc.Sync.ThreadId t1_s9FDx [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FDx t_s9FDv GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9FDB [Occ=Once] ->
                          case narrow32Int# [ds1_s9FDB] of {
                            __DEFAULT -> wild_s9FDu;
                            -1# -> wild1_s9FDw;
                            0# -> wild1_s9FDw;
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqThreadId
                                      GHC.Conc.Sync.cmpThread
                                      GHC.Conc.Sync.$fOrdThreadId_$c<
                                      GHC.Conc.Sync.$fOrdThreadId_$c<=
                                      GHC.Conc.Sync.$fOrdThreadId_$c>
                                      GHC.Conc.Sync.$fOrdThreadId_$c>=
                                      GHC.Conc.Sync.$fOrdThreadId_$cmax
                                      GHC.Conc.Sync.$fOrdThreadId_$cmin];

GHC.Conc.Sync.$fShowThreadStatus10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadRunning"#;

GHC.Conc.Sync.$fShowThreadStatus9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus10;

GHC.Conc.Sync.$fShowThreadStatus8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadFinished"#;

GHC.Conc.Sync.$fShowThreadStatus7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus8;

GHC.Conc.Sync.$fShowThreadStatus6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadBlocked "#;

GHC.Conc.Sync.$fShowThreadStatus5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus6;

GHC.Conc.Sync.$fShowThreadStatus4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadDied"#;

GHC.Conc.Sync.$fShowThreadStatus3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus4;

GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
  :: GHC.Types.Int -> GHC.Conc.Sync.ThreadStatus -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,1*U(U)><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s9FDD ds1_s9FDE eta_s9FDF]
        case ds1_s9FDE of {
          GHC.Conc.Sync.ThreadRunning ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus9 eta_s9FDF;
          GHC.Conc.Sync.ThreadFinished ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus7 eta_s9FDF;
          GHC.Conc.Sync.ThreadBlocked b1_s9FDH [Occ=Once*] ->
              case ds_s9FDD of {
                GHC.Types.I# x_s9FDJ [Occ=Once] ->
                    case >=# [x_s9FDJ 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s9FDL [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [eta_s9FDF b1_s9FDH] \s []
                                    GHC.Conc.Sync.$w$cshowsPrec b1_s9FDH eta_s9FDF;
                          } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9FDL;
                      1# ->
                          let {
                            sat_s9FDO [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [eta_s9FDF b1_s9FDH] \u []
                                    let {
                                      sat_s9FDN [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          [eta_s9FDF b1_s9FDH] \s []
                                              let {
                                                sat_s9FDM [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)2 eta_s9FDF];
                                              } in  GHC.Conc.Sync.$w$cshowsPrec b1_s9FDH sat_s9FDM;
                                    } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9FDN;
                          } in  : [GHC.Show.$fShow(,)4 sat_s9FDO];
                    };
              };
          GHC.Conc.Sync.ThreadDied ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus3 eta_s9FDF;
        };

GHC.Conc.Sync.$fShowThreadStatus_$cshow
  :: GHC.Conc.Sync.ThreadStatus -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9FDP]
        case x_s9FDP of {
          GHC.Conc.Sync.ThreadRunning -> GHC.Conc.Sync.$fShowThreadStatus9;
          GHC.Conc.Sync.ThreadFinished -> GHC.Conc.Sync.$fShowThreadStatus7;
          GHC.Conc.Sync.ThreadBlocked b1_s9FDR [Occ=Once] ->
              let {
                sat_s9FDS [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s9FDR] \s [] GHC.Conc.Sync.$w$cshowsPrec b1_s9FDR GHC.Types.[];
              } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9FDS;
          GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.$fShowThreadStatus3;
        };

GHC.Conc.Sync.$fShowThreadStatus2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Conc.Sync.$fShowThreadStatus1
  :: GHC.Conc.Sync.ThreadStatus -> GHC.Show.ShowS
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
            GHC.Conc.Sync.$fShowThreadStatus2 eta_B2 eta_B1;

GHC.Conc.Sync.$fShowThreadStatus_$cshowList
  :: [GHC.Conc.Sync.ThreadStatus] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9FDT s_s9FDU]
        GHC.Show.showList__
            GHC.Conc.Sync.$fShowThreadStatus1 ls_s9FDT s_s9FDU;

GHC.Conc.Sync.$fShowThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
                                    GHC.Conc.Sync.$fShowThreadStatus_$cshow
                                    GHC.Conc.Sync.$fShowThreadStatus_$cshowList];

GHC.Conc.Sync.killThread2 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionAsyncException_$ctoException
            GHC.IO.Exception.ThreadKilled;

GHC.Conc.Sync.killThread1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [tid_s9FDV eta_s9FDW]
        case tid_s9FDV of {
          GHC.Conc.Sync.ThreadId tid1_s9FDY [Occ=Once] ->
              case
                  killThread# [tid1_s9FDY GHC.Conc.Sync.killThread2 eta_s9FDW]
              of
              s1_s9FDZ
              { __DEFAULT -> (#,#) [s1_s9FDZ GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.killThread
  :: GHC.Conc.Sync.ThreadId -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.killThread1 eta_B2 eta_B1;

GHC.Conc.Sync.getNumProcessors1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FE0]
        case __pkg_ccall base-4.11.0.0 [s_s9FE0] of {
          (#,#) ds_s9FE3 [Occ=Once] ds1_s9FE4 [Occ=Once] ->
              case narrow32Word# [ds1_s9FE4] of sat_s9FE5 {
                __DEFAULT ->
                    case word2Int# [sat_s9FE5] of sat_s9FE6 {
                      __DEFAULT ->
                          let {
                            sat_s9FE7 [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Types.I#! [sat_s9FE6];
                          } in  (#,#) [ds_s9FE3 sat_s9FE7];
                    };
              };
        };

GHC.Conc.Sync.getNumProcessors :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.getNumProcessors1 eta_B1;

GHC.Conc.Sync.threadStatus7 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnOther];

GHC.Conc.Sync.threadStatus6 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnMVar];

GHC.Conc.Sync.threadStatus2 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnException];

GHC.Conc.Sync.threadStatus3 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnForeignCall];

GHC.Conc.Sync.threadStatus4 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnSTM];

GHC.Conc.Sync.threadStatus5 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnBlackHole];

GHC.Conc.Sync.$wthreadStatus [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Conc.Sync.ThreadStatus #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s9FE8 w_s9FE9]
        case threadStatus# [ww_s9FE8 w_s9FE9] of {
          (#,,,#) ipv_s9FEb [Occ=Once]
                  ipv1_s9FEc [Occ=Once!]
                  _ [Occ=Dead]
                  _ [Occ=Dead] ->
              let {
                sat_s9FEg [Occ=Once] :: GHC.Conc.Sync.ThreadStatus
                [LclId] =
                    [ipv1_s9FEc] \u []
                        case ipv1_s9FEc of {
                          __DEFAULT -> GHC.Conc.Sync.threadStatus7;
                          0# -> GHC.Conc.Sync.ThreadRunning [];
                          1# -> GHC.Conc.Sync.threadStatus6;
                          2# -> GHC.Conc.Sync.threadStatus5;
                          6# -> GHC.Conc.Sync.threadStatus4;
                          10# -> GHC.Conc.Sync.threadStatus3;
                          11# -> GHC.Conc.Sync.threadStatus3;
                          12# -> GHC.Conc.Sync.threadStatus2;
                          14# -> GHC.Conc.Sync.threadStatus6;
                          16# -> GHC.Conc.Sync.ThreadFinished [];
                          17# -> GHC.Conc.Sync.ThreadDied [];
                        };
              } in  (#,#) [ipv_s9FEb sat_s9FEg];
        };

GHC.Conc.Sync.threadStatus1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Conc.Sync.ThreadStatus #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9FEh w1_s9FEi]
        case w_s9FEh of {
          GHC.Conc.Sync.ThreadId ww1_s9FEk [Occ=Once] ->
              GHC.Conc.Sync.$wthreadStatus ww1_s9FEk w1_s9FEi;
        };

GHC.Conc.Sync.threadStatus
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.threadStatus1 eta_B2 eta_B1;

GHC.Conc.Sync.$fFunctorSTM2
  :: forall a b.
     (a -> b)
     -> GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><C(S(SL)),1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [f_s9FEl x_s9FEm s_s9FEn]
        case x_s9FEm s_s9FEn of {
          (#,#) ipv_s9FEp [Occ=Once] ipv1_s9FEq [Occ=Once] ->
              let {
                sat_s9FEr [Occ=Once] :: b_a9Da0
                [LclId] =
                    [f_s9FEl ipv1_s9FEq] \u [] f_s9FEl ipv1_s9FEq;
              } in  (#,#) [ipv_s9FEp sat_s9FEr];
        };

GHC.Conc.Sync.$fFunctorSTM1
  :: forall a b.
     a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(S(SL)),1*C1(U(U,A))><S,U>,
 Unf=OtherCon []] =
    [] \r [x_s9FEs eta_s9FEt eta1_s9FEu]
        case eta_s9FEt eta1_s9FEu of {
          (#,#) ipv_s9FEw [Occ=Once] _ [Occ=Dead] ->
              (#,#) [ipv_s9FEw x_s9FEs];
        };

GHC.Conc.Sync.$fApplicativeSTM2
  :: forall b a.
     GHC.Conc.Sync.STM (a -> b)
     -> GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,1*C1(U)))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [m1_s9FEy m2_s9FEz s_s9FEA]
        case m1_s9FEy s_s9FEA of {
          (#,#) ipv_s9FEC [Occ=Once] ipv1_s9FED [Occ=Once!] ->
              case m2_s9FEz ipv_s9FEC of {
                (#,#) ipv2_s9FEF [Occ=Once] ipv3_s9FEG [Occ=Once] ->
                    let {
                      sat_s9FEH [Occ=Once] :: b_a9D90
                      [LclId] =
                          [ipv1_s9FED ipv3_s9FEG] \u [] ipv1_s9FED ipv3_s9FEG;
                    } in  (#,#) [ipv2_s9FEF sat_s9FEH];
              };
        };

$cliftA2_r9Fva
  :: forall c b a.
     (a -> b -> c)
     -> GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, c #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [f_s9FEI m1_s9FEJ m2_s9FEK s_s9FEL]
        case m1_s9FEJ s_s9FEL of {
          (#,#) ipv_s9FEN [Occ=Once] ipv1_s9FEO [Occ=Once] ->
              case m2_s9FEK ipv_s9FEN of {
                (#,#) ipv2_s9FEQ [Occ=Once] ipv3_s9FER [Occ=Once] ->
                    let {
                      sat_s9FES [Occ=Once] :: c_a9D9j
                      [LclId] =
                          [f_s9FEI ipv1_s9FEO ipv3_s9FER] \u []
                              f_s9FEI ipv1_s9FEO ipv3_s9FER;
                    } in  (#,#) [ipv2_s9FEQ sat_s9FES];
              };
        };

GHC.Conc.Sync.$fApplicativeSTM_$cliftA2 [InlPrag=INLINE (sat-args=0)]
  :: forall a b c.
     (a -> b -> c)
     -> GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Conc.Sync.STM c
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $cliftA2_r9Fva eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.$fApplicativeSTM1
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,A))><S,U>,
 Unf=OtherCon []] =
    [] \r [m1_s9FET m2_s9FEU s_s9FEV]
        case m1_s9FET s_s9FEV of {
          (#,#) ipv_s9FEX [Occ=Once] ipv1_s9FEY [Occ=Once] ->
              case m2_s9FEU ipv_s9FEX of {
                (#,#) ipv2_s9FF0 [Occ=Once] _ [Occ=Dead] ->
                    (#,#) [ipv2_s9FF0 ipv1_s9FEY];
              };
        };

GHC.Conc.Sync.$fFunctorSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor GHC.Conc.Sync.STM
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [GHC.Conc.Sync.$fFunctorSTM2
                                       GHC.Conc.Sync.$fFunctorSTM1];

GHC.Conc.Sync.$fApplicativeSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [GHC.Conc.Sync.$fFunctorSTM
                                           GHC.Conc.Sync.$fApplicativeSTM_$cpure
                                           GHC.Conc.Sync.$fApplicativeSTM2
                                           GHC.Conc.Sync.$fApplicativeSTM_$cliftA2
                                           GHC.Conc.Sync.$fApplicativeSTM_$c*>
                                           GHC.Conc.Sync.$fApplicativeSTM1];

lvl_r9Fvb :: forall a. [GHC.Types.Char] -> GHC.Conc.Sync.STM a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s9FF2] GHC.Err.errorWithoutStackTrace eta_s9FF2;

GHC.Conc.Sync.$fMonadSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [GHC.Conc.Sync.$fApplicativeSTM
                                     GHC.Conc.Sync.$fMonadSTM_$c>>=
                                     GHC.Conc.Sync.$fApplicativeSTM_$c*>
                                     GHC.Conc.Sync.$fApplicativeSTM_$cpure
                                     lvl_r9Fvb];

GHC.Conc.Sync.always2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FF3] (#,#) [s_s9FF3 GHC.Tuple.()];

GHC.Conc.Sync.alwaysSucceeds1
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<xB,U><S,U>, Unf=OtherCon []] =
    [] \r [i_s9FF4 eta_s9FF5]
        let {
          sat_s9FFa [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [i_s9FF4] \r [s_s9FF6]
                  case i_s9FF4 s_s9FF6 of {
                    (#,#) ipv_s9FF8 [Occ=Once] _ [Occ=Dead] -> retry# [ipv_s9FF8];
                  };
        } in 
          case catchRetry# [sat_s9FFa GHC.Conc.Sync.always2 eta_s9FF5] of {
            (#,#) ipv_s9FFc [Occ=Once] _ [Occ=Dead] ->
                case check# [i_s9FF4 ipv_s9FFc] of s'_s9FFe {
                  __DEFAULT -> (#,#) [s'_s9FFe GHC.Tuple.()];
                };
          };

GHC.Conc.Sync.alwaysSucceeds
  :: forall a. GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<xB,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.alwaysSucceeds1 eta_B2 eta_B1;

GHC.Conc.Sync.$fAlternativeSTM2
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FFf] (#,#) [s_s9FFf GHC.Types.[]];

GHC.Conc.Sync.$fAlternativeSTM3
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S(SL)),C(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [v_s9FFg eta_s9FFh]
        let {
          some_v_s9FFi [Occ=LoopBreaker]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7E] #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              [v_s9FFg some_v_s9FFi] \r [s_s9FFj]
                  case v_s9FFg s_s9FFj of {
                    (#,#) ipv_s9FFl [Occ=Once] ipv1_s9FFm [Occ=Once] ->
                        case
                            catchRetry# [some_v_s9FFi
                                         GHC.Conc.Sync.$fAlternativeSTM2
                                         ipv_s9FFl]
                        of
                        { (#,#) ipv2_s9FFo [Occ=Once] ipv3_s9FFp [Occ=Once] ->
                              let {
                                sat_s9FFq [Occ=Once] :: [a_a9D7E]
                                [LclId] =
                                    CCCS :! [ipv1_s9FFm ipv3_s9FFp];
                              } in  (#,#) [ipv2_s9FFo sat_s9FFq];
                        };
                  };
        } in  some_v_s9FFi eta_s9FFh;

GHC.Conc.Sync.$fAlternativeSTM1
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [v_s9FFr eta_s9FFs]
        let {
          many_v_s9FFt [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7Q] #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              [v_s9FFr many_v1_s9FFu] \r [s_s9FFv]
                  case v_s9FFr s_s9FFv of {
                    (#,#) ipv_s9FFx [Occ=Once] ipv1_s9FFy [Occ=Once] ->
                        case many_v1_s9FFu ipv_s9FFx of {
                          (#,#) ipv2_s9FFA [Occ=Once] ipv3_s9FFB [Occ=Once] ->
                              let {
                                sat_s9FFC [Occ=Once] :: [a_a9D7Q]
                                [LclId] =
                                    CCCS :! [ipv1_s9FFy ipv3_s9FFB];
                              } in  (#,#) [ipv2_s9FFA sat_s9FFC];
                        };
                  };
          many_v1_s9FFu [Occ=LoopBreaker]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7Q] #)
          [LclId, Arity=1, Unf=OtherCon []] =
              sat-only [many_v_s9FFt] \r [eta_B1]
                  catchRetry# [many_v_s9FFt GHC.Conc.Sync.$fAlternativeSTM2 eta_B1];
        } in  many_v1_s9FFu eta_s9FFs;

sat_s9FFE
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B3 eta_B2 eta_B1] catchRetry# [eta_B3 eta_B2 eta_B1];

sat_s9FFD :: forall a. GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B1] retry# [eta_B1];

GHC.Conc.Sync.$fAlternativeSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Alternative GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Alternative! [GHC.Conc.Sync.$fApplicativeSTM
                                           sat_s9FFD
                                           sat_s9FFE
                                           GHC.Conc.Sync.$fAlternativeSTM3
                                           GHC.Conc.Sync.$fAlternativeSTM1];

sat_s9FFG
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B3 eta_B2 eta_B1] catchRetry# [eta_B3 eta_B2 eta_B1];

sat_s9FFF :: forall a. GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B1] retry# [eta_B1];

GHC.Conc.Sync.$fMonadPlusSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.MonadPlus GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:MonadPlus! [GHC.Conc.Sync.$fAlternativeSTM
                                         GHC.Conc.Sync.$fMonadSTM
                                         sat_s9FFF
                                         sat_s9FFG];

lvl1_r9Fvc :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Transactional invariant violation"#;

GHC.Conc.Sync.always3 :: GHC.Conc.Sync.STM ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl1_r9Fvc of sat_s9FFH {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s9FFH;
        };

GHC.Conc.Sync.always1
  :: GHC.Conc.Sync.STM GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<xB,C(U(U,1*U))><S,U>, Unf=OtherCon []] =
    [] \r [i_s9FFI eta_s9FFJ]
        let {
          sat_s9FFQ [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [i_s9FFI] \r [s_s9FFK]
                  case i_s9FFI s_s9FFK of {
                    (#,#) ipv_s9FFM [Occ=Once] ipv1_s9FFN [Occ=Once!] ->
                        case ipv1_s9FFN of {
                          GHC.Types.False -> GHC.Conc.Sync.always3;
                          GHC.Types.True -> retry# [ipv_s9FFM];
                        };
                  };
        } in 
          case catchRetry# [sat_s9FFQ GHC.Conc.Sync.always2 eta_s9FFJ] of {
            (#,#) ipv_s9FFS [Occ=Once] _ [Occ=Dead] ->
                let {
                  sat_s9FG0 [Occ=Once]
                    :: GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                  [LclId] =
                      [i_s9FFI] \r [s_s9FFU]
                          case i_s9FFI s_s9FFU of {
                            (#,#) ipv2_s9FFW [Occ=Once] ipv3_s9FFX [Occ=Once!] ->
                                case ipv3_s9FFX of {
                                  GHC.Types.False -> GHC.Conc.Sync.always3;
                                  GHC.Types.True -> (#,#) [ipv2_s9FFW GHC.Tuple.()];
                                };
                          };
                } in 
                  case check# [sat_s9FG0 ipv_s9FFS] of s'_s9FG1 {
                    __DEFAULT -> (#,#) [s'_s9FG1 GHC.Tuple.()];
                  };
          };

GHC.Conc.Sync.always
  :: GHC.Conc.Sync.STM GHC.Types.Bool -> GHC.Conc.Sync.STM ()
[GblId, Arity=2, Str=<xB,C(U(U,1*U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.always1 eta_B2 eta_B1;

lvl2_r9Fvd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "no threads to run:  infinite loop or deadlock?"#;

lvl3_r9Fve :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_r9Fvd;

lvl4_r9Fvf
  :: Data.Typeable.Internal.TypeRep GHC.IO.Exception.Deadlock
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                18363794241794644491##
                11186984538024031318##
                GHC.IO.Exception.$trModule
                GHC.IO.Exception.$fExceptionDeadlock4
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9FG3 [Occ=Once]
                   ww9_s9FG4 [Occ=Once]
                   ww10_s9FG5 [Occ=Once]
                   ww11_s9FG6 [Occ=Once]
                   ww12_s9FG7 [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_s9FG3
                                              ww9_s9FG4
                                              ww10_s9FG5
                                              ww11_s9FG6
                                              ww12_s9FG7];
        };

lvl5_r9Fvg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s"#;

lvl6_r9Fvh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_r9Fvg;

lvl7_r9Fvi
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds1_s9FG8 eta_s9FG9]
        case ds1_s9FG8 of {
          GHC.Exception.SomeException _ [Occ=Dead] _ [Occ=Dead] ->
              (#,#) [eta_s9FG9 GHC.Tuple.()];
        };

lvl8_r9Fvj :: GHC.Types.IO ()
[GblId] =
    [] \u [] GHC.IO.Handle.hFlush GHC.IO.Handle.FD.stdout;

lvl9_r9Fvk
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [se_s9FGd eta_s9FGe]
        case se_s9FGd of {
          GHC.Exception.SomeException $dException_s9FGg
                                      ex_s9FGh [Occ=Once*] ->
              case lvl8_r9Fvj of io_s9FGi {
                __DEFAULT ->
                    case catch# [io_s9FGi lvl7_r9Fvi eta_s9FGe] of {
                      (#,#) ipv_s9FGk [Occ=Once] _ [Occ=Dead] ->
                          case GHC.IO.Encoding.getForeignEncoding ipv_s9FGk of {
                            (#,#) ipv2_s9FGn [Occ=Once] ipv3_s9FGo [Occ=Once] ->
                                let {
                                  msg_s9FGp [Occ=OnceL] :: [GHC.Types.Char]
                                  [LclId] =
                                      [$dException_s9FGg ex_s9FGh] \u []
                                          case
                                              GHC.Exception.$p1Exception $dException_s9FGg
                                          of
                                          sat_s9FGq
                                          { __DEFAULT ->
                                                case
                                                    Data.Typeable.Internal.sameTypeRep
                                                        sat_s9FGq lvl4_r9Fvf
                                                of
                                                { GHC.Types.False ->
                                                      case
                                                          GHC.Exception.$p2Exception
                                                              $dException_s9FGg
                                                      of
                                                      sat_s9FGs
                                                      { __DEFAULT ->
                                                            GHC.Show.showsPrec
                                                                sat_s9FGs
                                                                GHC.Conc.Sync.$fShowThreadStatus2
                                                                ex_s9FGh
                                                                GHC.Types.[];
                                                      };
                                                  GHC.Types.True ->
                                                      case ex_s9FGh of {
                                                        GHC.IO.Exception.Deadlock -> lvl3_r9Fve;
                                                      };
                                                };
                                          }; } in
                                let {
                                  sat_s9FGJ [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                                  [LclId] =
                                      [msg_s9FGp] \r [cfmt_s9FGu s1_s9FGv]
                                          case GHC.IO.Encoding.getForeignEncoding s1_s9FGv of {
                                            (#,#) ipv4_s9FGx [Occ=Once] ipv5_s9FGy [Occ=Once] ->
                                                let {
                                                  sat_s9FGI [Occ=Once]
                                                    :: GHC.Foreign.CString -> GHC.Types.IO ()
                                                  [LclId] =
                                                      [cfmt_s9FGu] \r [cmsg_s9FGz eta1_s9FGA]
                                                          case cfmt_s9FGu of {
                                                            GHC.Ptr.Ptr ds4_s9FGC [Occ=Once] ->
                                                                case cmsg_s9FGz of {
                                                                  GHC.Ptr.Ptr ds6_s9FGE [Occ=Once] ->
                                                                      case
                                                                          __pkg_ccall base-4.11.0.0 [ds4_s9FGC
                                                                                                     ds6_s9FGE
                                                                                                     eta1_s9FGA]
                                                                      of
                                                                      { Unit# ds7_s9FGH [Occ=Once] ->
                                                                            (#,#) [ds7_s9FGH
                                                                                   GHC.Tuple.()];
                                                                      };
                                                                };
                                                          };
                                                } in 
                                                  GHC.Foreign.charIsRepresentable3
                                                      ipv5_s9FGy msg_s9FGp sat_s9FGI ipv4_s9FGx;
                                          };
                                } in 
                                  GHC.Foreign.charIsRepresentable3
                                      ipv3_s9FGo lvl6_r9Fvh sat_s9FGJ ipv2_s9FGn;
                          };
                    };
              };
        };

lvl10_r9Fvl
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_s9FGK]
        case noDuplicate# [s_s9FGK] of s'_s9FGL {
          __DEFAULT ->
              case newMutVar# [lvl9_r9Fvk s'_s9FGL] of {
                (#,#) ipv_s9FGN [Occ=Once] ipv1_s9FGO [Occ=Once] ->
                    let {
                      sat_s9FGP [Occ=Once]
                        :: GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ())
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_s9FGO];
                    } in  (#,#) [ipv_s9FGN sat_s9FGP];
              };
        };

GHC.Conc.Sync.uncaughtExceptionHandler [InlPrag=NOINLINE]
  :: GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case lvl10_r9Fvl GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9FGS [Occ=Once] -> ipv1_s9FGS;
        };

GHC.Conc.Sync.setUncaughtExceptionHandler1
  :: (GHC.Exception.SomeException -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.STRef.writeSTRef1
            GHC.Conc.Sync.uncaughtExceptionHandler eta_B2 eta_B1;

GHC.Conc.Sync.setUncaughtExceptionHandler
  :: (GHC.Exception.SomeException -> GHC.Types.IO ())
     -> GHC.Types.IO ()
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.setUncaughtExceptionHandler1 eta_B2 eta_B1;

GHC.Conc.Sync.getUncaughtExceptionHandler1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Exception.SomeException -> GHC.Types.IO () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.STRef.readSTRef1 GHC.Conc.Sync.uncaughtExceptionHandler eta_B1;

GHC.Conc.Sync.getUncaughtExceptionHandler
  :: GHC.Types.IO (GHC.Exception.SomeException -> GHC.Types.IO ())
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.getUncaughtExceptionHandler1 eta_B1;

GHC.Conc.Sync.reportError1
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [ex_s9FGT s_s9FGU]
        case GHC.Conc.Sync.uncaughtExceptionHandler of {
          GHC.STRef.STRef var#_s9FGW [Occ=Once] ->
              case readMutVar# [var#_s9FGW s_s9FGU] of {
                (#,#) ipv_s9FGY [Occ=Once] ipv1_s9FGZ [Occ=Once!] ->
                    ipv1_s9FGZ ex_s9FGT ipv_s9FGY;
              };
        };

GHC.Conc.Sync.reportError
  :: GHC.Exception.SomeException -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.reportError1 eta_B2 eta_B1;

GHC.Conc.Sync.sharedCAF1
  :: forall a.
     a
     -> (GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(C(S(SS(S)))),C(C1(U(U,1*U(U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [a1_s9FH0 get_or_set_s9FH1 eta_s9FH2]
        case getMaskingState# [eta_s9FH2] of {
          (#,#) ipv_s9FH4 [Occ=Once*] ipv1_s9FH5 [Occ=Once!] ->
              let {
                io_s9FH6 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CSP #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [a1_s9FH0 get_or_set_s9FH1] \r [s_s9FH7]
                        case makeStablePtr# [a1_s9FH0 s_s9FH7] of {
                          (#,#) ipv2_s9FH9 [Occ=Once] ipv3_s9FHa ->
                              let {
                                sat_s9FHb [Occ=Once] :: GHC.Ptr.Ptr a_a9CSP
                                [LclId] =
                                    CCCS GHC.Ptr.Ptr! [ipv3_s9FHa];
                              } in 
                                case get_or_set_s9FH1 sat_s9FHb ipv2_s9FH9 of {
                                  (#,#) ipv4_s9FHd [Occ=Once*] ipv5_s9FHe [Occ=Once!] ->
                                      case ipv5_s9FHe of {
                                        GHC.Ptr.Ptr b1_s9FHg ->
                                            case eqAddr# [ipv3_s9FHa b1_s9FHg] of {
                                              __DEFAULT ->
                                                  case
                                                      __pkg_ccall base-4.11.0.0 [ipv3_s9FHa
                                                                                 ipv4_s9FHd]
                                                  of
                                                  { Unit# ds4_s9FHk [Occ=Once] ->
                                                        deRefStablePtr# [b1_s9FHg ds4_s9FHk];
                                                  };
                                              1# -> (#,#) [ipv4_s9FHd a1_s9FH0];
                                            };
                                      };
                                };
                        };
              } in 
                case ipv1_s9FH5 of {
                  __DEFAULT -> io_s9FH6 ipv_s9FH4;
                  0# -> maskAsyncExceptions# [io_s9FH6 ipv_s9FH4];
                };
        };

GHC.Conc.Sync.sharedCAF
  :: forall a.
     a
     -> (GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a))
     -> GHC.Types.IO a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(C(S(SS(S)))),C(C1(U(U,1*U(U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.sharedCAF1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.$wmodifyMVar_ [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MVar# GHC.Prim.RealWorld a
     -> (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s9FHm w_s9FHn w1_s9FHo]
        case getMaskingState# [w1_s9FHo] of {
          (#,#) ipv_s9FHq [Occ=Once*] ipv1_s9FHr [Occ=Once!] ->
              case ipv1_s9FHr of {
                __DEFAULT ->
                    case takeMVar# [ww_s9FHm ipv_s9FHq] of {
                      (#,#) ipv2_s9FHu [Occ=Once] ipv3_s9FHv ->
                          let {
                            sat_s9FHG [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [ww_s9FHm ipv3_s9FHv] \r [ds3_s9FHy]
                                    case ds3_s9FHy of {
                                      GHC.Exception.SomeException $dException_s9FHA [Occ=Once]
                                                                  e1_s9FHB [Occ=Once] ->
                                          let {
                                            sat_s9FHF [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a_s9ETF #)
                                            [LclId] =
                                                [ww_s9FHm
                                                 ipv3_s9FHv
                                                 $dException_s9FHA
                                                 e1_s9FHB] \r [s_s9FHC]
                                                    case putMVar# [ww_s9FHm ipv3_s9FHv s_s9FHC] of {
                                                      __DEFAULT ->
                                                          GHC.Exception.throw
                                                              $dException_s9FHA e1_s9FHB;
                                                    };
                                          } in  sat_s9FHF;
                                    }; } in
                          let {
                            sat_s9FHw [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [w_s9FHn ipv3_s9FHv] \u [] w_s9FHn ipv3_s9FHv; } in
                          let {
                            sat_s9FHx [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [sat_s9FHw] \r [eta_B1] maskAsyncExceptions# [sat_s9FHw eta_B1];
                          } in 
                            case catch# [sat_s9FHx sat_s9FHG ipv2_s9FHu] of {
                              (#,#) ipv4_s9FHI [Occ=Once] ipv5_s9FHJ [Occ=Once] ->
                                  case putMVar# [ww_s9FHm ipv5_s9FHJ ipv4_s9FHI] of s2#_s9FHK {
                                    __DEFAULT -> (#,#) [s2#_s9FHK GHC.Tuple.()];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_s9FI4 [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_s9FHm w_s9FHn] \r [s_s9FHL]
                              case takeMVar# [ww_s9FHm s_s9FHL] of {
                                (#,#) ipv2_s9FHN [Occ=Once] ipv3_s9FHO ->
                                    let {
                                      sat_s9FHZ [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [ww_s9FHm ipv3_s9FHO] \r [ds3_s9FHR]
                                              case ds3_s9FHR of {
                                                GHC.Exception.SomeException $dException_s9FHT [Occ=Once]
                                                                            e1_s9FHU [Occ=Once] ->
                                                    let {
                                                      sat_s9FHY [Occ=OnceT[0]]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_s9ETF #)
                                                      [LclId] =
                                                          [ww_s9FHm
                                                           ipv3_s9FHO
                                                           $dException_s9FHT
                                                           e1_s9FHU] \r [s1_s9FHV]
                                                              case
                                                                  putMVar# [ww_s9FHm
                                                                            ipv3_s9FHO
                                                                            s1_s9FHV]
                                                              of
                                                              { __DEFAULT ->
                                                                    GHC.Exception.throw
                                                                        $dException_s9FHT e1_s9FHU;
                                                              };
                                                    } in  sat_s9FHY;
                                              }; } in
                                    let {
                                      sat_s9FHP [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [w_s9FHn ipv3_s9FHO] \u [] w_s9FHn ipv3_s9FHO; } in
                                    let {
                                      sat_s9FHQ [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [sat_s9FHP] \r [eta_B1]
                                              unmaskAsyncExceptions# [sat_s9FHP eta_B1];
                                    } in 
                                      case catch# [sat_s9FHQ sat_s9FHZ ipv2_s9FHN] of {
                                        (#,#) ipv4_s9FI1 [Occ=Once] ipv5_s9FI2 [Occ=Once] ->
                                            case
                                                putMVar# [ww_s9FHm ipv5_s9FI2 ipv4_s9FI1]
                                            of
                                            s2#_s9FI3
                                            { __DEFAULT -> (#,#) [s2#_s9FI3 GHC.Tuple.()];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_s9FI4 ipv_s9FHq];
                1# ->
                    case takeMVar# [ww_s9FHm ipv_s9FHq] of {
                      (#,#) ipv2_s9FI6 [Occ=Once] ipv3_s9FI7 ->
                          let {
                            sat_s9FIi [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [ww_s9FHm ipv3_s9FI7] \r [ds3_s9FIa]
                                    case ds3_s9FIa of {
                                      GHC.Exception.SomeException $dException_s9FIc [Occ=Once]
                                                                  e1_s9FId [Occ=Once] ->
                                          let {
                                            sat_s9FIh [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a_s9ETF #)
                                            [LclId] =
                                                [ww_s9FHm
                                                 ipv3_s9FI7
                                                 $dException_s9FIc
                                                 e1_s9FId] \r [s_s9FIe]
                                                    case putMVar# [ww_s9FHm ipv3_s9FI7 s_s9FIe] of {
                                                      __DEFAULT ->
                                                          GHC.Exception.throw
                                                              $dException_s9FIc e1_s9FId;
                                                    };
                                          } in  sat_s9FIh;
                                    }; } in
                          let {
                            sat_s9FI8 [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [w_s9FHn ipv3_s9FI7] \u [] w_s9FHn ipv3_s9FI7; } in
                          let {
                            sat_s9FI9 [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [sat_s9FI8] \r [eta_B1] maskUninterruptible# [sat_s9FI8 eta_B1];
                          } in 
                            case catch# [sat_s9FI9 sat_s9FIi ipv2_s9FI6] of {
                              (#,#) ipv4_s9FIk [Occ=Once] ipv5_s9FIl [Occ=Once] ->
                                  case putMVar# [ww_s9FHm ipv5_s9FIl ipv4_s9FIk] of s2#_s9FIm {
                                    __DEFAULT -> (#,#) [s2#_s9FIm GHC.Tuple.()];
                                  };
                            };
                    };
              };
        };

GHC.Conc.Sync.modifyMVar_1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.MVar.MVar a
     -> (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9FIn w1_s9FIo w2_s9FIp]
        case w_s9FIn of {
          GHC.MVar.MVar ww1_s9FIr [Occ=Once] ->
              GHC.Conc.Sync.$wmodifyMVar_ ww1_s9FIr w1_s9FIo w2_s9FIp;
        };

GHC.Conc.Sync.modifyMVar_
  :: forall a.
     GHC.MVar.MVar a -> (a -> GHC.Types.IO a) -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.modifyMVar_1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.$wwithMVar [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     GHC.Prim.MVar# GHC.Prim.RealWorld a
     -> (a -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s9FIs w_s9FIt w1_s9FIu]
        case getMaskingState# [w1_s9FIu] of {
          (#,#) ipv_s9FIw [Occ=Once*] ipv1_s9FIx [Occ=Once!] ->
              case ipv1_s9FIx of {
                __DEFAULT ->
                    case takeMVar# [ww_s9FIs ipv_s9FIw] of {
                      (#,#) ipv2_s9FIA [Occ=Once] ipv3_s9FIB ->
                          let {
                            sat_s9FIM [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [ww_s9FIs ipv3_s9FIB] \r [ds3_s9FIE]
                                    case ds3_s9FIE of {
                                      GHC.Exception.SomeException $dException_s9FIG [Occ=Once]
                                                                  e1_s9FIH [Occ=Once] ->
                                          let {
                                            sat_s9FIL [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       b_s9ETP #)
                                            [LclId] =
                                                [ww_s9FIs
                                                 ipv3_s9FIB
                                                 $dException_s9FIG
                                                 e1_s9FIH] \r [s_s9FII]
                                                    case putMVar# [ww_s9FIs ipv3_s9FIB s_s9FII] of {
                                                      __DEFAULT ->
                                                          GHC.Exception.throw
                                                              $dException_s9FIG e1_s9FIH;
                                                    };
                                          } in  sat_s9FIL;
                                    }; } in
                          let {
                            sat_s9FIC [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [w_s9FIt ipv3_s9FIB] \u [] w_s9FIt ipv3_s9FIB; } in
                          let {
                            sat_s9FID [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [sat_s9FIC] \r [eta_B1] maskAsyncExceptions# [sat_s9FIC eta_B1];
                          } in 
                            case catch# [sat_s9FID sat_s9FIM ipv2_s9FIA] of {
                              (#,#) ipv4_s9FIO [Occ=Once] ipv5_s9FIP [Occ=Once] ->
                                  case putMVar# [ww_s9FIs ipv3_s9FIB ipv4_s9FIO] of s2#_s9FIQ {
                                    __DEFAULT -> (#,#) [s2#_s9FIQ ipv5_s9FIP];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_s9FJa [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                      [LclId] =
                          [ww_s9FIs w_s9FIt] \r [s_s9FIR]
                              case takeMVar# [ww_s9FIs s_s9FIR] of {
                                (#,#) ipv2_s9FIT [Occ=Once] ipv3_s9FIU ->
                                    let {
                                      sat_s9FJ5 [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [ww_s9FIs ipv3_s9FIU] \r [ds3_s9FIX]
                                              case ds3_s9FIX of {
                                                GHC.Exception.SomeException $dException_s9FIZ [Occ=Once]
                                                                            e1_s9FJ0 [Occ=Once] ->
                                                    let {
                                                      sat_s9FJ4 [Occ=OnceT[0]]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 b_s9ETP #)
                                                      [LclId] =
                                                          [ww_s9FIs
                                                           ipv3_s9FIU
                                                           $dException_s9FIZ
                                                           e1_s9FJ0] \r [s1_s9FJ1]
                                                              case
                                                                  putMVar# [ww_s9FIs
                                                                            ipv3_s9FIU
                                                                            s1_s9FJ1]
                                                              of
                                                              { __DEFAULT ->
                                                                    GHC.Exception.throw
                                                                        $dException_s9FIZ e1_s9FJ0;
                                                              };
                                                    } in  sat_s9FJ4;
                                              }; } in
                                    let {
                                      sat_s9FIV [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [w_s9FIt ipv3_s9FIU] \u [] w_s9FIt ipv3_s9FIU; } in
                                    let {
                                      sat_s9FIW [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [sat_s9FIV] \r [eta_B1]
                                              unmaskAsyncExceptions# [sat_s9FIV eta_B1];
                                    } in 
                                      case catch# [sat_s9FIW sat_s9FJ5 ipv2_s9FIT] of {
                                        (#,#) ipv4_s9FJ7 [Occ=Once] ipv5_s9FJ8 [Occ=Once] ->
                                            case
                                                putMVar# [ww_s9FIs ipv3_s9FIU ipv4_s9FJ7]
                                            of
                                            s2#_s9FJ9
                                            { __DEFAULT -> (#,#) [s2#_s9FJ9 ipv5_s9FJ8];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_s9FJa ipv_s9FIw];
                1# ->
                    case takeMVar# [ww_s9FIs ipv_s9FIw] of {
                      (#,#) ipv2_s9FJc [Occ=Once] ipv3_s9FJd ->
                          let {
                            sat_s9FJo [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [ww_s9FIs ipv3_s9FJd] \r [ds3_s9FJg]
                                    case ds3_s9FJg of {
                                      GHC.Exception.SomeException $dException_s9FJi [Occ=Once]
                                                                  e1_s9FJj [Occ=Once] ->
                                          let {
                                            sat_s9FJn [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       b_s9ETP #)
                                            [LclId] =
                                                [ww_s9FIs
                                                 ipv3_s9FJd
                                                 $dException_s9FJi
                                                 e1_s9FJj] \r [s_s9FJk]
                                                    case putMVar# [ww_s9FIs ipv3_s9FJd s_s9FJk] of {
                                                      __DEFAULT ->
                                                          GHC.Exception.throw
                                                              $dException_s9FJi e1_s9FJj;
                                                    };
                                          } in  sat_s9FJn;
                                    }; } in
                          let {
                            sat_s9FJe [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [w_s9FIt ipv3_s9FJd] \u [] w_s9FIt ipv3_s9FJd; } in
                          let {
                            sat_s9FJf [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [sat_s9FJe] \r [eta_B1] maskUninterruptible# [sat_s9FJe eta_B1];
                          } in 
                            case catch# [sat_s9FJf sat_s9FJo ipv2_s9FJc] of {
                              (#,#) ipv4_s9FJq [Occ=Once] ipv5_s9FJr [Occ=Once] ->
                                  case putMVar# [ww_s9FIs ipv3_s9FJd ipv4_s9FJq] of s2#_s9FJs {
                                    __DEFAULT -> (#,#) [s2#_s9FJs ipv5_s9FJr];
                                  };
                            };
                    };
              };
        };

GHC.Conc.Sync.withMVar1 [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     GHC.MVar.MVar a
     -> (a -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9FJt w1_s9FJu w2_s9FJv]
        case w_s9FJt of {
          GHC.MVar.MVar ww1_s9FJx [Occ=Once] ->
              GHC.Conc.Sync.$wwithMVar ww1_s9FJx w1_s9FJu w2_s9FJv;
        };

GHC.Conc.Sync.withMVar
  :: forall a b.
     GHC.MVar.MVar a -> (a -> GHC.Types.IO b) -> GHC.Types.IO b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.withMVar1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.reportStackOverflow1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FJy]
        case myThreadId# [s_s9FJy] of {
          (#,#) ipv_s9FJA [Occ=Once] ipv1_s9FJB [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9FJB ipv_s9FJA] of {
                Unit# ds1_s9FJE [Occ=Once] -> (#,#) [ds1_s9FJE GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.reportStackOverflow :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.reportStackOverflow1 eta_B1;

GHC.Conc.Sync.forkIO2
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [e1_s9FJF eta_s9FJG]
        GHC.Conc.Sync.childHandler1 e1_s9FJF eta_s9FJG;
GHC.Conc.Sync.childHandler1 [Occ=LoopBreaker]
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [err_s9FJH eta_s9FJI]
        let {
          sat_s9FKv [Occ=Once, Dmd=<L,1*C1(U)>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [err_s9FJH] \s []
                  case err_s9FJH of wild_s9FJJ {
                    GHC.Exception.SomeException $dException1_s9FJK e2_s9FJL ->
                        case GHC.Exception.$p1Exception $dException1_s9FJK of sat_s9FJM {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_s9FJM
                                      GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3
                              of
                              { GHC.Types.False ->
                                    case
                                        GHC.Exception.$p1Exception $dException1_s9FJK
                                    of
                                    sat_s9FJO
                                    { __DEFAULT ->
                                          case
                                              Data.Typeable.Internal.sameTypeRep
                                                  sat_s9FJO
                                                  GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3
                                          of
                                          { GHC.Types.False ->
                                                case
                                                    GHC.Exception.$p1Exception $dException1_s9FJK
                                                of
                                                sat_s9FKl
                                                { __DEFAULT ->
                                                      let-no-escape {
                                                        fail_s9FJQ [Occ=Once*!T[1],
                                                                    Dmd=<L,1*C1(C1(U))>]
                                                          :: GHC.Prim.Void#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   () #)
                                                        [LclId[JoinId(1)],
                                                         Arity=1,
                                                         Str=<L,A>,
                                                         Unf=OtherCon []] =
                                                            sat-only [wild_s9FJJ
                                                                      $dException1_s9FJK
                                                                      e2_s9FJL] \r [ds_s9FJR]
                                                                case
                                                                    GHC.Exception.$p1Exception
                                                                        $dException1_s9FJK
                                                                of
                                                                sat_s9FJS
                                                                { __DEFAULT ->
                                                                      case
                                                                          Data.Typeable.Internal.sameTypeRep
                                                                              sat_s9FJS
                                                                              GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                                      of
                                                                      { GHC.Types.False ->
                                                                            let {
                                                                              sat_s9FK0 [Occ=OnceT[0]]
                                                                                :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         () #)
                                                                              [LclId] =
                                                                                  [wild_s9FJJ] \r [s_s9FJU]
                                                                                      case
                                                                                          GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                      of
                                                                                      { GHC.STRef.STRef var#_s9FJW [Occ=Once] ->
                                                                                            case
                                                                                                readMutVar# [var#_s9FJW
                                                                                                             s_s9FJU]
                                                                                            of
                                                                                            { (#,#) ipv_s9FJY [Occ=Once]
                                                                                                    ipv1_s9FJZ [Occ=Once!] ->
                                                                                                  ipv1_s9FJZ
                                                                                                      wild_s9FJJ
                                                                                                      ipv_s9FJY;
                                                                                            };
                                                                                      };
                                                                            } in  sat_s9FK0;
                                                                        GHC.Types.True ->
                                                                            case e2_s9FJL of {
                                                                              GHC.IO.Exception.SomeAsyncException $dException_s9FK2 [Occ=Once]
                                                                                                                  a_s9FK3 [Occ=Once] ->
                                                                                  case
                                                                                      GHC.Exception.$p1Exception
                                                                                          $dException_s9FK2
                                                                                  of
                                                                                  sat_s9FK4
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            Data.Typeable.Internal.sameTypeRep
                                                                                                sat_s9FK4
                                                                                                GHC.IO.Exception.$fExceptionAsyncException9
                                                                                        of
                                                                                        { GHC.Types.False ->
                                                                                              let {
                                                                                                sat_s9FKc [Occ=OnceT[0]]
                                                                                                  :: GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           () #)
                                                                                                [LclId] =
                                                                                                    [wild_s9FJJ] \r [s_s9FK6]
                                                                                                        case
                                                                                                            GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                        of
                                                                                                        { GHC.STRef.STRef var#_s9FK8 [Occ=Once] ->
                                                                                                              case
                                                                                                                  readMutVar# [var#_s9FK8
                                                                                                                               s_s9FK6]
                                                                                                              of
                                                                                                              { (#,#) ipv_s9FKa [Occ=Once]
                                                                                                                      ipv1_s9FKb [Occ=Once!] ->
                                                                                                                    ipv1_s9FKb
                                                                                                                        wild_s9FJJ
                                                                                                                        ipv_s9FKa;
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                sat_s9FKc;
                                                                                          GHC.Types.True ->
                                                                                              case
                                                                                                  a_s9FK3
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s9FKk [Occ=OnceT[0]]
                                                                                                        :: GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 () #)
                                                                                                      [LclId] =
                                                                                                          [wild_s9FJJ] \r [s_s9FKe]
                                                                                                              case
                                                                                                                  GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                              of
                                                                                                              { GHC.STRef.STRef var#_s9FKg [Occ=Once] ->
                                                                                                                    case
                                                                                                                        readMutVar# [var#_s9FKg
                                                                                                                                     s_s9FKe]
                                                                                                                    of
                                                                                                                    { (#,#) ipv_s9FKi [Occ=Once]
                                                                                                                            ipv1_s9FKj [Occ=Once!] ->
                                                                                                                          ipv1_s9FKj
                                                                                                                              wild_s9FJJ
                                                                                                                              ipv_s9FKi;
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      sat_s9FKk;
                                                                                                GHC.IO.Exception.StackOverflow ->
                                                                                                    GHC.Conc.Sync.reportStackOverflow1;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in 
                                                        case
                                                            Data.Typeable.Internal.sameTypeRep
                                                                sat_s9FKl
                                                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                        of
                                                        { GHC.Types.False ->
                                                              fail_s9FJQ GHC.Prim.void#;
                                                          GHC.Types.True ->
                                                              case e2_s9FJL of {
                                                                GHC.IO.Exception.SomeAsyncException $dException_s9FKo [Occ=Once]
                                                                                                    a_s9FKp [Occ=Once] ->
                                                                    case
                                                                        GHC.Exception.$p1Exception
                                                                            $dException_s9FKo
                                                                    of
                                                                    sat_s9FKq
                                                                    { __DEFAULT ->
                                                                          case
                                                                              Data.Typeable.Internal.sameTypeRep
                                                                                  sat_s9FKq
                                                                                  GHC.IO.Exception.$fExceptionAsyncException9
                                                                          of
                                                                          { GHC.Types.False ->
                                                                                fail_s9FJQ
                                                                                    GHC.Prim.void#;
                                                                            GHC.Types.True ->
                                                                                case a_s9FKp of {
                                                                                  __DEFAULT ->
                                                                                      fail_s9FJQ
                                                                                          GHC.Prim.void#;
                                                                                  GHC.IO.Exception.ThreadKilled ->
                                                                                      GHC.Conc.Sync.always2;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                };
                                            GHC.Types.True ->
                                                case e2_s9FJL of {
                                                  GHC.IO.Exception.BlockedIndefinitelyOnSTM ->
                                                      GHC.Conc.Sync.always2;
                                                };
                                          };
                                    };
                                GHC.Types.True ->
                                    case e2_s9FJL of {
                                      GHC.IO.Exception.BlockedIndefinitelyOnMVar ->
                                          GHC.Conc.Sync.always2;
                                    };
                              };
                        };
                  };
        } in  catch# [sat_s9FKv GHC.Conc.Sync.forkIO2 eta_s9FJI];

GHC.Conc.Sync.childHandler
  :: GHC.Exception.SomeException -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.childHandler1 eta_B2 eta_B1;

GHC.Conc.Sync.forkOn1
  :: GHC.Types.Int
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [ds_s9FKw action_s9FKx eta_s9FKy]
        case ds_s9FKw of {
          GHC.Types.I# cpu_s9FKA [Occ=Once] ->
              let {
                sat_s9FKC [Occ=Once] :: GHC.Types.IO ()
                [LclId] =
                    [action_s9FKx] \r [eta1_s9FKB]
                        catch# [action_s9FKx GHC.Conc.Sync.forkIO2 eta1_s9FKB];
              } in 
                case forkOn# [cpu_s9FKA sat_s9FKC eta_s9FKy] of {
                  (#,#) ipv_s9FKE [Occ=Once] ipv1_s9FKF [Occ=Once] ->
                      let {
                        sat_s9FKG [Occ=Once] :: GHC.Conc.Sync.ThreadId
                        [LclId] =
                            CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9FKF];
                      } in  (#,#) [ipv_s9FKE sat_s9FKG];
                };
        };

GHC.Conc.Sync.forkOn
  :: GHC.Types.Int
     -> GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=3, Str=<S(S),1*U(U)><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.forkOn1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.forkOnWithUnmask1
  :: GHC.Types.Int
     -> ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
         -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [cpu_s9FKH io_s9FKI eta_s9FKJ]
        case cpu_s9FKH of {
          GHC.Types.I# cpu1_s9FKL [Occ=Once] ->
              let {
                sat_s9FKP [Occ=Once] :: GHC.Types.IO ()
                [LclId] =
                    [io_s9FKI] \r [eta1_s9FKM]
                        let {
                          sat_s9FKO [Occ=Once, Dmd=<L,1*C1(U)>]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          [LclId] =
                              [io_s9FKI] \s []
                                  let {
                                    sat_s9FKN [Occ=Once]
                                      :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                                    [LclId] =
                                        [] \r [eta_B2 eta_B1]
                                            unmaskAsyncExceptions# [eta_B2 eta_B1];
                                  } in  io_s9FKI sat_s9FKN;
                        } in  catch# [sat_s9FKO GHC.Conc.Sync.forkIO2 eta1_s9FKM];
              } in 
                case forkOn# [cpu1_s9FKL sat_s9FKP eta_s9FKJ] of {
                  (#,#) ipv_s9FKR [Occ=Once] ipv1_s9FKS [Occ=Once] ->
                      let {
                        sat_s9FKT [Occ=Once] :: GHC.Conc.Sync.ThreadId
                        [LclId] =
                            CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9FKS];
                      } in  (#,#) [ipv_s9FKR sat_s9FKT];
                };
        };

GHC.Conc.Sync.forkOnWithUnmask
  :: GHC.Types.Int
     -> ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
         -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.forkOnWithUnmask1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.forkIO1
  :: GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [action_s9FKU s_s9FKV]
        let {
          sat_s9FKX [Occ=Once] :: GHC.Types.IO ()
          [LclId] =
              [action_s9FKU] \r [eta_s9FKW]
                  catch# [action_s9FKU GHC.Conc.Sync.forkIO2 eta_s9FKW];
        } in 
          case fork# [sat_s9FKX s_s9FKV] of {
            (#,#) ipv_s9FKZ [Occ=Once] ipv1_s9FL0 [Occ=Once] ->
                let {
                  sat_s9FL1 [Occ=Once] :: GHC.Conc.Sync.ThreadId
                  [LclId] =
                      CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9FL0];
                } in  (#,#) [ipv_s9FKZ sat_s9FL1];
          };

GHC.Conc.Sync.forkIO
  :: GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.forkIO1 eta_B2 eta_B1;

GHC.Conc.Sync.forkIOWithUnmask1
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [io_s9FL2 s_s9FL3]
        let {
          sat_s9FL7 [Occ=Once] :: GHC.Types.IO ()
          [LclId] =
              [io_s9FL2] \r [eta_s9FL4]
                  let {
                    sat_s9FL6 [Occ=Once, Dmd=<L,1*C1(U)>]
                      :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                    [LclId] =
                        [io_s9FL2] \s []
                            let {
                              sat_s9FL5 [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                              [LclId] =
                                  [] \r [eta_B2 eta_B1] unmaskAsyncExceptions# [eta_B2 eta_B1];
                            } in  io_s9FL2 sat_s9FL5;
                  } in  catch# [sat_s9FL6 GHC.Conc.Sync.forkIO2 eta_s9FL4];
        } in 
          case fork# [sat_s9FL7 s_s9FL3] of {
            (#,#) ipv_s9FL9 [Occ=Once] ipv1_s9FLa [Occ=Once] ->
                let {
                  sat_s9FLb [Occ=Once] :: GHC.Conc.Sync.ThreadId
                  [LclId] =
                      CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9FLa];
                } in  (#,#) [ipv_s9FL9 sat_s9FLb];
          };

GHC.Conc.Sync.forkIOWithUnmask
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.forkIOWithUnmask1 eta_B2 eta_B1;

lvl11_r9Fvm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "setNumCapabilities: Capability count ("#;

lvl12_r9Fvn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") must be positive"#;

lvl13_r9Fvo :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_r9Fvn;

GHC.Conc.Sync.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_s9FLc w_s9FLd]
        let {
          sat_s9FLi [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s9FLc] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s9FLc GHC.Types.[] of {
                    (#,#) ww5_s9FLf [Occ=Once] ww6_s9FLg [Occ=Once] ->
                        let {
                          sat_s9FLh [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_s9FLf ww6_s9FLg];
                        } in  GHC.Base.++ sat_s9FLh lvl13_r9Fvo;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl11_r9Fvm sat_s9FLi
          of
          sat_s9FLj
          { __DEFAULT -> GHC.IO.failIO1 sat_s9FLj w_s9FLd;
          };

GHC.Conc.Sync.setNumCapabilities2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [w_s9FLk w1_s9FLl]
        case w_s9FLk of {
          GHC.Types.I# ww1_s9FLn [Occ=Once] ->
              GHC.Conc.Sync.$wlvl ww1_s9FLn w1_s9FLl;
        };

GHC.Conc.Sync.setNumCapabilities1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [i_s9FLo eta_s9FLp]
        case i_s9FLo of {
          GHC.Types.I# x_s9FLr ->
              case <=# [x_s9FLr 0#] of {
                __DEFAULT ->
                    case int2Word# [x_s9FLr] of sat_s9FLu {
                      __DEFAULT ->
                          case narrow32Word# [sat_s9FLu] of sat_s9FLv {
                            __DEFAULT ->
                                case __pkg_ccall_GC base-4.11.0.0 [sat_s9FLv eta_s9FLp] of {
                                  Unit# ds_s9FLx [Occ=Once] -> (#,#) [ds_s9FLx GHC.Tuple.()];
                                };
                          };
                    };
                1# -> GHC.Conc.Sync.$wlvl x_s9FLr eta_s9FLp;
              };
        };

GHC.Conc.Sync.setNumCapabilities
  :: GHC.Types.Int -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.setNumCapabilities1 eta_B2 eta_B1;

GHC.Conc.Sync.getNumCapabilities1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FLy]
        case
            readInt32OffAddr# [__label "enabled_capabilities" (data)
                               0#
                               s_s9FLy]
        of
        { (#,#) ipv_s9FLA [Occ=Once] ipv1_s9FLB [Occ=Once] ->
              let {
                sat_s9FLC [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [ipv1_s9FLB];
              } in  (#,#) [ipv_s9FLA sat_s9FLC];
        };

GHC.Conc.Sync.getNumCapabilities :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.getNumCapabilities1 eta_B1;

GHC.Conc.Sync.numCapabilities1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FLD]
        case noDuplicate# [s_s9FLD] of s'_s9FLE {
          __DEFAULT ->
              case
                  readInt32OffAddr# [__label "enabled_capabilities" (data)
                                     0#
                                     s'_s9FLE]
              of
              { (#,#) ipv_s9FLG [Occ=Once] ipv1_s9FLH [Occ=Once] ->
                    let {
                      sat_s9FLI [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          CCCS GHC.Types.I#! [ipv1_s9FLH];
                    } in  (#,#) [ipv_s9FLG sat_s9FLI];
              };
        };

GHC.Conc.Sync.numCapabilities :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.Conc.Sync.numCapabilities1 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9FLL [Occ=Once] -> ipv1_s9FLL;
        };

GHC.Conc.Sync.disableAllocationLimit1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FLM]
        case myThreadId# [s_s9FLM] of {
          (#,#) ipv_s9FLO [Occ=Once] ipv1_s9FLP [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9FLP ipv_s9FLO] of {
                Unit# ds1_s9FLS [Occ=Once] -> (#,#) [ds1_s9FLS GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.disableAllocationLimit :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.disableAllocationLimit1 eta_B1;

GHC.Conc.Sync.enableAllocationLimit1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FLT]
        case myThreadId# [s_s9FLT] of {
          (#,#) ipv_s9FLV [Occ=Once] ipv1_s9FLW [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9FLW ipv_s9FLV] of {
                Unit# ds1_s9FLZ [Occ=Once] -> (#,#) [ds1_s9FLZ GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.enableAllocationLimit :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.enableAllocationLimit1 eta_B1;

GHC.Conc.Sync.getAllocationCounter1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int64 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9FM0]
        case myThreadId# [s_s9FM0] of {
          (#,#) ipv_s9FM2 [Occ=Once] ipv1_s9FM3 [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9FM3 ipv_s9FM2] of {
                (#,#) ds1_s9FM6 [Occ=Once] ds2_s9FM7 [Occ=Once] ->
                    let {
                      sat_s9FM8 [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ds2_s9FM7];
                    } in  (#,#) [ds1_s9FM6 sat_s9FM8];
              };
        };

GHC.Conc.Sync.getAllocationCounter :: GHC.Types.IO GHC.Int.Int64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.getAllocationCounter1 eta_B1;

GHC.Conc.Sync.setAllocationCounter1
  :: GHC.Int.Int64
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [i_s9FM9 s_s9FMa]
        case myThreadId# [s_s9FMa] of {
          (#,#) ipv_s9FMc [Occ=Once] ipv1_s9FMd [Occ=Once] ->
              case i_s9FM9 of {
                GHC.Int.I64# ds2_s9FMf [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [ipv1_s9FMd ds2_s9FMf ipv_s9FMc]
                    of
                    { Unit# ds3_s9FMi [Occ=Once] -> (#,#) [ds3_s9FMi GHC.Tuple.()];
                    };
              };
        };

GHC.Conc.Sync.setAllocationCounter
  :: GHC.Int.Int64 -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.setAllocationCounter1 eta_B2 eta_B1;

GHC.Conc.Sync.TVar
  :: forall a.
     GHC.Prim.TVar# GHC.Prim.RealWorld a -> GHC.Conc.Sync.TVar a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.TVar [eta_B1];

GHC.Conc.Sync.ThreadRunning :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadRunning! [];

GHC.Conc.Sync.ThreadFinished :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadFinished! [];

GHC.Conc.Sync.ThreadBlocked
  :: GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.ThreadStatus
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.ThreadBlocked [eta_B1];

GHC.Conc.Sync.ThreadDied :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadDied! [];

GHC.Conc.Sync.BlockedOnMVar :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnMVar! [];

GHC.Conc.Sync.BlockedOnBlackHole :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnBlackHole! [];

GHC.Conc.Sync.BlockedOnException :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnException! [];

GHC.Conc.Sync.BlockedOnSTM :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnSTM! [];

GHC.Conc.Sync.BlockedOnForeignCall :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnForeignCall! [];

GHC.Conc.Sync.BlockedOnOther :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnOther! [];

GHC.Conc.Sync.ThreadId
  :: GHC.Prim.ThreadId# -> GHC.Conc.Sync.ThreadId
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.ThreadId [eta_B1];


==================== STG syntax: ====================
2018-03-16 16:04:45.39926466 UTC

GHC.Conc.Sync.$fEqTVar_$c==
  :: forall a.
     GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.TVar a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fvq ds1_s9Fvr]
        case ds_s9Fvq of {
          GHC.Conc.Sync.TVar tvar1#_s9Fvt [Occ=Once] ->
              case ds1_s9Fvr of {
                GHC.Conc.Sync.TVar tvar2#_s9Fvv [Occ=Once] ->
                    case sameTVar# [tvar1#_s9Fvt tvar2#_s9Fvv] of sat_s9Fvw {
                      __DEFAULT -> tagToEnum# [sat_s9Fvw];
                    };
              };
        };

GHC.Conc.Sync.$fEqTVar_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.TVar a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s9Fvx eta1_s9Fvy]
        case eta_s9Fvx of {
          GHC.Conc.Sync.TVar tvar1#_s9FvA [Occ=Once] ->
              case eta1_s9Fvy of {
                GHC.Conc.Sync.TVar tvar2#_s9FvC [Occ=Once] ->
                    case sameTVar# [tvar1#_s9FvA tvar2#_s9FvC] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Conc.Sync.$fEqTVar [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Conc.Sync.TVar a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqTVar_$c==
                                     GHC.Conc.Sync.$fEqTVar_$c/=];

GHC.Conc.Sync.$fShowBlockReason12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnMVar"#;

GHC.Conc.Sync.$fShowBlockReason11 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason12;

GHC.Conc.Sync.$fShowBlockReason10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnBlackHole"#;

GHC.Conc.Sync.$fShowBlockReason9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason10;

GHC.Conc.Sync.$fShowBlockReason8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnException"#;

GHC.Conc.Sync.$fShowBlockReason7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason8;

GHC.Conc.Sync.$fShowBlockReason6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnSTM"#;

GHC.Conc.Sync.$fShowBlockReason5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason6;

GHC.Conc.Sync.$fShowBlockReason4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnForeignCall"#;

GHC.Conc.Sync.$fShowBlockReason3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason4;

GHC.Conc.Sync.$fShowBlockReason2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnOther"#;

GHC.Conc.Sync.$fShowBlockReason1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason2;

GHC.Conc.Sync.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Conc.Sync.BlockReason -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s9FvE w1_s9FvF]
        case w_s9FvE of {
          GHC.Conc.Sync.BlockedOnMVar ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason11 w1_s9FvF;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason9 w1_s9FvF;
          GHC.Conc.Sync.BlockedOnException ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason7 w1_s9FvF;
          GHC.Conc.Sync.BlockedOnSTM ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason5 w1_s9FvF;
          GHC.Conc.Sync.BlockedOnForeignCall ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason3 w1_s9FvF;
          GHC.Conc.Sync.BlockedOnOther ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason1 w1_s9FvF;
        };

GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Conc.Sync.BlockReason -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s9FvH w1_s9FvI w2_s9FvJ]
        GHC.Conc.Sync.$w$cshowsPrec w1_s9FvI w2_s9FvJ;

GHC.Conc.Sync.$fShowBlockReason_$cshow
  :: GHC.Conc.Sync.BlockReason -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9FvK]
        case x_s9FvK of {
          GHC.Conc.Sync.BlockedOnMVar -> GHC.Conc.Sync.$fShowBlockReason11;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              GHC.Conc.Sync.$fShowBlockReason9;
          GHC.Conc.Sync.BlockedOnException ->
              GHC.Conc.Sync.$fShowBlockReason7;
          GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.$fShowBlockReason5;
          GHC.Conc.Sync.BlockedOnForeignCall ->
              GHC.Conc.Sync.$fShowBlockReason3;
          GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.$fShowBlockReason1;
        };

GHC.Conc.Sync.$fShowBlockReason_$cshowList
  :: [GHC.Conc.Sync.BlockReason] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9FvM s_s9FvN]
        GHC.Show.showList__ GHC.Conc.Sync.$w$cshowsPrec ls_s9FvM s_s9FvN;

GHC.Conc.Sync.$fShowBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.BlockReason
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec
                                    GHC.Conc.Sync.$fShowBlockReason_$cshow
                                    GHC.Conc.Sync.$fShowBlockReason_$cshowList];

GHC.Conc.Sync.$fEqBlockReason_$c==
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s9FvO ds1_s9FvP]
        case ds_s9FvO of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case ds1_s9FvP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fEqBlockReason_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s9FvX eta1_s9FvY]
        case eta_s9FvX of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case eta1_s9FvY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fEqBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.BlockReason
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqBlockReason_$c==
                                     GHC.Conc.Sync.$fEqBlockReason_$c/=];

GHC.Conc.Sync.$fEqThreadStatus_$c==
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fw6 ds1_s9Fw7]
        case ds_s9Fw6 of {
          GHC.Conc.Sync.ThreadRunning ->
              case ds1_s9Fw7 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case ds1_s9Fw7 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9Fwb [Occ=Once] ->
              case ds1_s9Fw7 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9Fwd [Occ=Once] ->
                    GHC.Conc.Sync.$fEqBlockReason_$c== a1_s9Fwb b1_s9Fwd;
              };
          GHC.Conc.Sync.ThreadDied ->
              case ds1_s9Fw7 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fEqThreadStatus_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s9Fwf eta1_s9Fwg]
        case eta_s9Fwf of {
          GHC.Conc.Sync.ThreadRunning ->
              case eta1_s9Fwg of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case eta1_s9Fwg of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9Fwk [Occ=Once!] ->
              case eta1_s9Fwg of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9Fwm [Occ=Once*!] ->
                    case a1_s9Fwk of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9Fwm of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                    };
              };
          GHC.Conc.Sync.ThreadDied ->
              case eta1_s9Fwg of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fEqThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqThreadStatus_$c==
                                     GHC.Conc.Sync.$fEqThreadStatus_$c/=];

GHC.Conc.Sync.numSparks1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case numSparks# [GHC.Prim.void#] of {
          Unit# ipv1_s9Fwy [Occ=Once] ->
              let {
                sat_s9Fwz [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [ipv1_s9Fwy];
              } in  Unit# [sat_s9Fwz];
        };

GHC.Conc.Sync.numSparks :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.numSparks1 GHC.Prim.void#;

GHC.Conc.Sync.throwTo1
  :: forall e.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.ThreadId
     -> e
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(U),A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dException_s9FwA ds_s9FwB ex_s9FwC void_0E]
        case ds_s9FwB of {
          GHC.Conc.Sync.ThreadId tid_s9FwF [Occ=Once] ->
              let {
                sat_s9FwG [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [$dException_s9FwA ex_s9FwC] \u []
                        GHC.Exception.toException $dException_s9FwA ex_s9FwC;
              } in 
                case killThread# [tid_s9FwF sat_s9FwG GHC.Prim.void#] of s1_s9FwH {
                  (##) -> Unit# [GHC.Tuple.()];
                };
        };

GHC.Conc.Sync.throwTo
  :: forall e.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.ThreadId -> e -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(U),A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.throwTo1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.myThreadId1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9FwL [Occ=Once] ->
              let {
                sat_s9FwM [Occ=Once] :: GHC.Conc.Sync.ThreadId
                [LclId] =
                    CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9FwL];
              } in  Unit# [sat_s9FwM];
        };

GHC.Conc.Sync.myThreadId :: GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.myThreadId1 GHC.Prim.void#;

GHC.Conc.Sync.yield1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case yield# [GHC.Prim.void#] of s1_s9FwO {
          (##) -> Unit# [GHC.Tuple.()];
        };

GHC.Conc.Sync.yield :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.yield1 GHC.Prim.void#;

GHC.Conc.Sync.labelThread1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s9FwP str_s9FwQ void_0E]
        case ds_s9FwP of {
          GHC.Conc.Sync.ThreadId t_s9FwT [Occ=OnceL] ->
              let {
                sat_s9FwZ [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                [LclId] =
                    [t_s9FwT] \r [ds1_s9FwU void_0E]
                        case ds1_s9FwU of {
                          GHC.Ptr.Ptr p_s9FwX [Occ=Once] ->
                              case labelThread# [t_s9FwT p_s9FwX GHC.Prim.void#] of s1_s9FwY {
                                (##) -> Unit# [GHC.Tuple.()];
                              };
                        };
              } in 
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8 str_s9FwQ sat_s9FwZ GHC.Prim.void#;
        };

GHC.Conc.Sync.labelThread
  :: GHC.Conc.Sync.ThreadId -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.labelThread1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.pseq [InlPrag=INLINE (sat-args=2)]
  :: forall a b. a -> b -> b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [x_s9Fx0 y_s9Fx1] case x_s9Fx0 of { __DEFAULT -> y_s9Fx1; };

GHC.Conc.Sync.par [InlPrag=INLINE (sat-args=2)]
  :: forall a b. a -> b -> b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [x_s9Fx3 y_s9Fx4]
        case par# [x_s9Fx3] of { __DEFAULT -> y_s9Fx4; };

GHC.Conc.Sync.runSparks_loop [Occ=LoopBreaker]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case getSpark# [GHC.Prim.void#] of {
          (#,#) ipv1_s9Fx9 [Occ=Once!] ipv2_s9Fxa [Occ=Once] ->
              case ipv1_s9Fx9 of {
                __DEFAULT ->
                    case ipv2_s9Fxa of {
                      __DEFAULT -> GHC.Conc.Sync.runSparks_loop GHC.Prim.void#;
                    };
                0# -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.runSparks :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.runSparks_loop GHC.Prim.void#;

GHC.Conc.Sync.threadCapability1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fxd void_0E]
        case ds_s9Fxd of {
          GHC.Conc.Sync.ThreadId t_s9Fxg [Occ=Once] ->
              case threadStatus# [t_s9Fxg GHC.Prim.void#] of {
                (#,,#) _ [Occ=Dead] ipv2_s9Fxk [Occ=Once] ipv3_s9Fxl [Occ=Once!] ->
                    let {
                      sat_s9Fxo [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [ipv3_s9Fxl] \u []
                              case ipv3_s9Fxl of {
                                __DEFAULT -> GHC.Types.True [];
                                0# -> GHC.Types.False [];
                              }; } in
                    let {
                      sat_s9Fxm [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          CCCS GHC.Types.I#! [ipv2_s9Fxk]; } in
                    let {
                      sat_s9Fxp [Occ=Once] :: (GHC.Types.Int, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [sat_s9Fxm sat_s9Fxo];
                    } in  Unit# [sat_s9Fxp];
              };
        };

GHC.Conc.Sync.threadCapability
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO (GHC.Types.Int, GHC.Types.Bool)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.threadCapability1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.mkWeakThreadId1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Weak.Weak GHC.Conc.Sync.ThreadId #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [t_s9Fxq void_0E]
        case t_s9Fxq of wild_s9Fxs {
          GHC.Conc.Sync.ThreadId t#_s9Fxt [Occ=Once] ->
              case mkWeakNoFinalizer# [t#_s9Fxt wild_s9Fxs GHC.Prim.void#] of {
                Unit# ipv1_s9Fxw [Occ=Once] ->
                    let {
                      sat_s9Fxx [Occ=Once] :: GHC.Weak.Weak GHC.Conc.Sync.ThreadId
                      [LclId] =
                          CCCS GHC.Weak.Weak! [ipv1_s9Fxw];
                    } in  Unit# [sat_s9Fxx];
              };
        };

GHC.Conc.Sync.mkWeakThreadId
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO (GHC.Weak.Weak GHC.Conc.Sync.ThreadId)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.mkWeakThreadId1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.newStablePtrPrimMVar1
  :: GHC.MVar.MVar ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fxy void_0E]
        case ds_s9Fxy of {
          GHC.MVar.MVar m_s9FxB [Occ=Once] ->
              case makeStablePtr# [m_s9FxB GHC.Prim.void#] of {
                Unit# ipv1_s9FxE [Occ=Once] ->
                    let {
                      sat_s9FxF [Occ=Once] :: GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar
                      [LclId] =
                          CCCS GHC.Stable.StablePtr! [ipv1_s9FxE];
                    } in  Unit# [sat_s9FxF];
              };
        };

GHC.Conc.Sync.newStablePtrPrimMVar
  :: GHC.MVar.MVar ()
     -> GHC.Types.IO (GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.newStablePtrPrimMVar1 eta_B2 GHC.Prim.void#;

$c>>=_r9FuK
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> (a -> GHC.Conc.Sync.STM b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [m_s9FxG k_s9FxH void_0E]
        case m_s9FxG GHC.Prim.void# of {
          Unit# ipv1_s9FxL [Occ=Once] -> k_s9FxH ipv1_s9FxL GHC.Prim.void#;
        };

GHC.Conc.Sync.$fMonadSTM_$c>>= [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> (a -> GHC.Conc.Sync.STM b) -> GHC.Conc.Sync.STM b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $c>>=_r9FuK eta_B3 eta_B2 GHC.Prim.void#;

$c*>_r9FuL
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [m_s9FxM k_s9FxN void_0E]
        case m_s9FxM GHC.Prim.void# of {
          Unit# _ [Occ=Dead] -> k_s9FxN GHC.Prim.void#;
        };

GHC.Conc.Sync.$fApplicativeSTM_$c*> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM b -> GHC.Conc.Sync.STM b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $c*>_r9FuL eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.orElse
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<xC(S),1*C1(U)><L,1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        catchRetry# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.Conc.Sync.catchSTM1
  :: forall e a.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.STM a
     -> (e -> GHC.Conc.Sync.STM a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(U),A)><L,1*C1(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [$dException_s9FxS ds_s9FxT handler_s9FxU void_0E]
        let {
          sat_s9Fy0 [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CX5 #)
          [LclId] =
              [$dException_s9FxS handler_s9FxU] \r [e1_s9FxW]
                  case GHC.Exception.fromException $dException_s9FxS e1_s9FxW of {
                    GHC.Base.Nothing ->
                        let {
                          sat_s9FxY [Occ=OnceT[0]]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CX5 #)
                          [LclId] =
                              [e1_s9FxW] \r [void_0E] raiseIO# [e1_s9FxW GHC.Prim.void#];
                        } in  sat_s9FxY;
                    GHC.Base.Just e'_s9FxZ [Occ=Once] -> handler_s9FxU e'_s9FxZ;
                  };
        } in  catchSTM# [ds_s9FxT sat_s9Fy0 GHC.Prim.void#];

GHC.Conc.Sync.catchSTM
  :: forall e a.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.STM a
     -> (e -> GHC.Conc.Sync.STM a) -> GHC.Conc.Sync.STM a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(U),A)><L,1*C1(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.catchSTM1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$cpure_r9FuM
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [x_s9Fy1 void_0E] Unit# [x_s9Fy1];

GHC.Conc.Sync.$fApplicativeSTM_$cpure [InlPrag=INLINE (sat-args=1)]
  :: forall a. a -> GHC.Conc.Sync.STM a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] $cpure_r9FuM eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.unsafeIOToSTM1
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Fy3] ds_s9Fy3;

GHC.Conc.Sync.unsafeIOToSTM
  :: forall a. GHC.Types.IO a -> GHC.Conc.Sync.STM a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.unsafeIOToSTM1 eta_B1;

GHC.Conc.Sync.atomically
  :: forall a. GHC.Conc.Sync.STM a -> GHC.Types.IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] atomically# [eta_B2 GHC.Prim.void#];

GHC.Conc.Sync.retry :: forall a. GHC.Conc.Sync.STM a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>x, Unf=OtherCon []] =
    [] \r [void_0E] retry# [GHC.Prim.void#];

GHC.Conc.Sync.throwSTM1
  :: forall e a.
     GHC.Exception.Exception e =>
     e
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U><B,U>x,
 Unf=OtherCon []] =
    [] \r [$dException_s9Fy4 e1_s9Fy5 void_0E]
        let {
          sat_s9Fy7 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [$dException_s9Fy4 e1_s9Fy5] \u []
                  GHC.Exception.toException $dException_s9Fy4 e1_s9Fy5;
        } in  raiseIO# [sat_s9Fy7 GHC.Prim.void#];

GHC.Conc.Sync.throwSTM
  :: forall e a.
     GHC.Exception.Exception e =>
     e -> GHC.Conc.Sync.STM a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U><B,U>x,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.throwSTM1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.newTVar1
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.TVar a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [val_s9Fy8 void_0E]
        case newTVar# [val_s9Fy8 GHC.Prim.void#] of {
          Unit# ipv1_s9Fyc [Occ=Once] ->
              let {
                sat_s9Fyd [Occ=Once] :: GHC.Conc.Sync.TVar a_a9CVx
                [LclId] =
                    CCCS GHC.Conc.Sync.TVar! [ipv1_s9Fyc];
              } in  Unit# [sat_s9Fyd];
        };

GHC.Conc.Sync.newTVar
  :: forall a. a -> GHC.Conc.Sync.STM (GHC.Conc.Sync.TVar a)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.newTVar1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.newTVarIO
  :: forall a. a -> GHC.Types.IO (GHC.Conc.Sync.TVar a)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.newTVar1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.readTVarIO1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fye void_0E]
        case ds_s9Fye of {
          GHC.Conc.Sync.TVar tvar#_s9Fyh [Occ=Once] ->
              readTVarIO# [tvar#_s9Fyh GHC.Prim.void#];
        };

GHC.Conc.Sync.readTVarIO
  :: forall a. GHC.Conc.Sync.TVar a -> GHC.Types.IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.readTVarIO1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.readTVar1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fyi void_0E]
        case ds_s9Fyi of {
          GHC.Conc.Sync.TVar tvar#_s9Fyl [Occ=Once] ->
              readTVar# [tvar#_s9Fyl GHC.Prim.void#];
        };

GHC.Conc.Sync.readTVar
  :: forall a. GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.STM a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.readTVar1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.writeTVar1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9Fym val_s9Fyn void_0E]
        case ds_s9Fym of {
          GHC.Conc.Sync.TVar tvar#_s9Fyq [Occ=Once] ->
              case
                  writeTVar# [tvar#_s9Fyq val_s9Fyn GHC.Prim.void#]
              of
              s2#_s9Fyr
              { (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.writeTVar
  :: forall a. GHC.Conc.Sync.TVar a -> a -> GHC.Conc.Sync.STM ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.writeTVar1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$fOrdBlockReason_$ccompare
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9Fys b_s9Fyt]
        case a_s9Fys of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9Fyt of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9Fyt of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9Fyt of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9Fyt of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9Fyt of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9Fyt of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.EQ [];
              };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c<
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9FyB b_s9FyC]
        case a_s9FyB of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9FyC of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9FyC of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9FyC of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9FyC of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9FyC of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9FyC of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c<=
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9FyK b_s9FyL]
        case b_s9FyL of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case a_s9FyK of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case a_s9FyK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case a_s9FyK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case a_s9FyK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case a_s9FyK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case a_s9FyK of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$cmax
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.BlockReason
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FyT y_s9FyU]
        case y_s9FyU of {
          GHC.Conc.Sync.BlockedOnMVar -> x_s9FyT;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case x_s9FyT of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnException ->
                    GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case x_s9FyT of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case x_s9FyT of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case x_s9FyT of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case x_s9FyT of { __DEFAULT -> GHC.Conc.Sync.BlockedOnOther []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c>=
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9Fz1 b_s9Fz2]
        case a_s9Fz1 of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9Fz2 of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9Fz2 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9Fz2 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9Fz2 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9Fz2 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9Fz2 of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c>
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9Fza b_s9Fzb]
        GHC.Conc.Sync.$fOrdBlockReason_$c< b_s9Fzb a_s9Fza;

GHC.Conc.Sync.$fOrdBlockReason_$cmin
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.BlockReason
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9Fzc y_s9Fzd]
        case y_s9Fzd of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case x_s9Fzc of { __DEFAULT -> GHC.Conc.Sync.BlockedOnMVar []; };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case x_s9Fzc of wild1_s9Fzg {
                __DEFAULT -> wild1_s9Fzg;
                GHC.Conc.Sync.BlockedOnException ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case x_s9Fzc of wild1_s9Fzh {
                __DEFAULT -> wild1_s9Fzh;
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnException [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case x_s9Fzc of wild1_s9Fzi {
                __DEFAULT -> wild1_s9Fzi;
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnSTM [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case x_s9Fzc of wild1_s9Fzj {
                __DEFAULT -> wild1_s9Fzj;
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
              };
          GHC.Conc.Sync.BlockedOnOther -> x_s9Fzc;
        };

GHC.Conc.Sync.$fOrdBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.BlockReason
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqBlockReason
                                      GHC.Conc.Sync.$fOrdBlockReason_$ccompare
                                      GHC.Conc.Sync.$fOrdBlockReason_$c<
                                      GHC.Conc.Sync.$fOrdBlockReason_$c<=
                                      GHC.Conc.Sync.$fOrdBlockReason_$c>
                                      GHC.Conc.Sync.$fOrdBlockReason_$c>=
                                      GHC.Conc.Sync.$fOrdBlockReason_$cmax
                                      GHC.Conc.Sync.$fOrdBlockReason_$cmin];

GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9Fzk b_s9Fzl]
        case a_s9Fzk of {
          GHC.Conc.Sync.ThreadRunning ->
              case b_s9Fzl of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.EQ [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case b_s9Fzl of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.EQ [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9Fzr [Occ=Once] ->
              case b_s9Fzl of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadBlocked b1_s9Fzt [Occ=Once] ->
                    GHC.Conc.Sync.$fOrdBlockReason_$ccompare a1_s9Fzr b1_s9Fzt;
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case b_s9Fzl of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.EQ [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c<
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9Fzv y_s9Fzw]
        case x_s9Fzv of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9Fzw of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9Fzw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FzC [Occ=Once!] ->
              case y_s9Fzw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9FzE [Occ=Once*] ->
                    case a1_s9FzC of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FzE of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FzE of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FzE of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FzE of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FzE of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FzE of { __DEFAULT -> GHC.Types.False []; };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9Fzw of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c>=
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FzN y_s9FzO]
        case x_s9FzN of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9FzO of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9FzO of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FzU [Occ=Once!] ->
              case y_s9FzO of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9FzW [Occ=Once*] ->
                    case a1_s9FzU of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FzW of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FzW of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FzW of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FzW of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FzW of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FzW of { __DEFAULT -> GHC.Types.True []; };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9FzO of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c>
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FA5 y_s9FA6]
        case x_s9FA5 of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9FA6 of { __DEFAULT -> GHC.Types.False []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9FA6 of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FAb [Occ=Once!] ->
              case y_s9FA6 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9FAd [Occ=Once*] ->
                    case a1_s9FAb of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FAd of { __DEFAULT -> GHC.Types.False []; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FAd of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FAd of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FAd of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FAd of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FAd of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9FA6 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c<=
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FAm y_s9FAn]
        case x_s9FAm of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9FAn of { __DEFAULT -> GHC.Types.True []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9FAn of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FAs [Occ=Once!] ->
              case y_s9FAn of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9FAu [Occ=Once*] ->
                    case a1_s9FAs of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FAu of { __DEFAULT -> GHC.Types.True []; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FAu of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FAu of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FAu of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FAu of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FAu of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9FAn of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$cmax
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FAD y_s9FAE]
        case x_s9FAD of wild_s9FAF {
          GHC.Conc.Sync.ThreadRunning -> y_s9FAE;
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9FAE of wild1_s9FAG {
                __DEFAULT -> GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> wild1_s9FAG;
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadDied [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FAI [Occ=Once!] ->
              case y_s9FAE of wild1_s9FAJ {
                __DEFAULT -> wild_s9FAF;
                GHC.Conc.Sync.ThreadBlocked b1_s9FAK [Occ=Once*] ->
                    case a1_s9FAI of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FAK of { __DEFAULT -> wild1_s9FAJ; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FAK of {
                            GHC.Conc.Sync.BlockedOnMVar -> wild_s9FAF;
                            GHC.Conc.Sync.BlockedOnBlackHole -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnException -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9FAJ;
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FAK of {
                            __DEFAULT -> wild_s9FAF;
                            GHC.Conc.Sync.BlockedOnException -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9FAJ;
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FAK of {
                            __DEFAULT -> wild_s9FAF;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9FAJ;
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FAK of {
                            __DEFAULT -> wild_s9FAF;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9FAJ;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9FAJ;
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FAK of {
                            __DEFAULT -> wild_s9FAF;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9FAJ;
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadDied [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9FAE of { __DEFAULT -> GHC.Conc.Sync.ThreadDied []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$cmin
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9FAT y_s9FAU]
        case x_s9FAT of wild_s9FAV {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9FAU of { __DEFAULT -> GHC.Conc.Sync.ThreadRunning []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9FAU of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Conc.Sync.ThreadRunning [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] ->
                    GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadFinished [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9FAZ [Occ=Once!] ->
              case y_s9FAU of wild1_s9FB0 {
                __DEFAULT -> wild1_s9FB0;
                GHC.Conc.Sync.ThreadBlocked b1_s9FB1 [Occ=Once*] ->
                    case a1_s9FAZ of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9FB1 of { __DEFAULT -> wild_s9FAV; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9FB1 of {
                            GHC.Conc.Sync.BlockedOnMVar -> wild1_s9FB0;
                            GHC.Conc.Sync.BlockedOnBlackHole -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnException -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9FAV;
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9FB1 of {
                            __DEFAULT -> wild1_s9FB0;
                            GHC.Conc.Sync.BlockedOnException -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9FAV;
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9FB1 of {
                            __DEFAULT -> wild1_s9FB0;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9FAV;
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9FB1 of {
                            __DEFAULT -> wild1_s9FB0;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9FAV;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9FAV;
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9FB1 of {
                            __DEFAULT -> wild1_s9FB0;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9FAV;
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> wild_s9FAV;
              };
          GHC.Conc.Sync.ThreadDied -> y_s9FAU;
        };

GHC.Conc.Sync.$fOrdThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqThreadStatus
                                      GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c<
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c<=
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c>
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c>=
                                      GHC.Conc.Sync.$fOrdThreadStatus_$cmax
                                      GHC.Conc.Sync.$fOrdThreadStatus_$cmin];

GHC.Conc.Sync.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Conc.Sync.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$trModule4];

GHC.Conc.Sync.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.Sync"#;

GHC.Conc.Sync.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$trModule2];

GHC.Conc.Sync.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Conc.Sync.$trModule3
                                     GHC.Conc.Sync.$trModule1];

$krep_r9FuN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'LiftedRep
                                              GHC.Types.[]];

$krep1_r9FuO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRuntimeRep
                                              GHC.Types.[]];

$krep2_r9FuP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRealWorld
                                              GHC.Types.[]];

$krep3_r9FuQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep4_r9FuR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcThreadId#
                                              GHC.Types.[]];

$krep5_r9FuS :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r9FuQ GHC.Types.[]];

$krep6_r9FuT :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r9FuP $krep5_r9FuS];

$krep7_r9FuU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcTVar#
                                              $krep6_r9FuT];

$krep8_r9FuV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r9FuP GHC.Types.[]];

$krep9_r9FuW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcState#
                                              $krep8_r9FuV];

$krep10_r9FuX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r9FuO GHC.Types.[]];

$krep11_r9FuY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'[]
                                              $krep10_r9FuX];

$krep12_r9FuZ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r9FuY GHC.Types.[]];

$krep13_r9Fv0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'TupleRep
                                              $krep12_r9FuZ];

$krep14_r9Fv1 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r9FuW $krep5_r9FuS];

$krep15_r9Fv2 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r9FuN $krep14_r9Fv1];

$krep16_r9Fv3 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r9Fv0 $krep15_r9Fv2];

$krep17_r9Fv4 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc(#,#)
                                              $krep16_r9Fv3];

$krep18_r9Fv5 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r9FuW $krep17_r9Fv4];

GHC.Conc.Sync.$tcThreadId2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadId"#;

GHC.Conc.Sync.$tcThreadId1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcThreadId2];

GHC.Conc.Sync.$tcThreadId :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16775948407395805744##
                                    12520674293648100702##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcThreadId1
                                    0#
                                    GHC.Types.krep$*];

$krep19_r9Fv6 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcThreadId
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'ThreadId1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r9FuR $krep19_r9Fv6];

GHC.Conc.Sync.$tc'ThreadId3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadId"#;

GHC.Conc.Sync.$tc'ThreadId2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadId3];

GHC.Conc.Sync.$tc'ThreadId :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18342150043682338300##
                                    5104860271509165481##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadId2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadId1];

GHC.Conc.Sync.$tcBlockReason2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockReason"#;

GHC.Conc.Sync.$tcBlockReason1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcBlockReason2];

GHC.Conc.Sync.$tcBlockReason :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13301038780413995570##
                                    11021250300446969031##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcBlockReason1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tc'BlockedOnBlackHole1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcBlockReason
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'BlockedOnMVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnMVar"#;

GHC.Conc.Sync.$tc'BlockedOnMVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnMVar2];

GHC.Conc.Sync.$tc'BlockedOnMVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6633002816895506850##
                                    13520604374172074732##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnMVar1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnBlackHole3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnBlackHole"#;

GHC.Conc.Sync.$tc'BlockedOnBlackHole2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnBlackHole3];

GHC.Conc.Sync.$tc'BlockedOnBlackHole :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9499731398899925739##
                                    7296688042620961692##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole2
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnException2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnException"#;

GHC.Conc.Sync.$tc'BlockedOnException1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnException2];

GHC.Conc.Sync.$tc'BlockedOnException :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16834505563200403543##
                                    10899729493106152581##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnException1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnSTM2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnSTM"#;

GHC.Conc.Sync.$tc'BlockedOnSTM1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnSTM2];

GHC.Conc.Sync.$tc'BlockedOnSTM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1161208048218837616##
                                    14246412223428266787##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnSTM1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnForeignCall2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnForeignCall"#;

GHC.Conc.Sync.$tc'BlockedOnForeignCall1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnForeignCall2];

GHC.Conc.Sync.$tc'BlockedOnForeignCall :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7408412473094687054##
                                    5512662453084487661##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnForeignCall1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnOther2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnOther"#;

GHC.Conc.Sync.$tc'BlockedOnOther1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnOther2];

GHC.Conc.Sync.$tc'BlockedOnOther :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12822899422417308746##
                                    1265626399802742388##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnOther1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tcThreadStatus2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadStatus"#;

GHC.Conc.Sync.$tcThreadStatus1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcThreadStatus2];

GHC.Conc.Sync.$tcThreadStatus :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16437204929171641638##
                                    3495092226815585861##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcThreadStatus1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tc'ThreadDied1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcThreadStatus
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'ThreadRunning2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadRunning"#;

GHC.Conc.Sync.$tc'ThreadRunning1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadRunning2];

GHC.Conc.Sync.$tc'ThreadRunning :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1667122312602609882##
                                    13647871799576313560##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadRunning1
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadFinished2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadFinished"#;

GHC.Conc.Sync.$tc'ThreadFinished1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadFinished2];

GHC.Conc.Sync.$tc'ThreadFinished :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2441107603776884109##
                                    12730966154693836607##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadFinished1
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadDied3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadDied"#;

GHC.Conc.Sync.$tc'ThreadDied2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadDied3];

GHC.Conc.Sync.$tc'ThreadDied :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9513974555658789847##
                                    4757719484357493227##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadDied2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadBlocked1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Conc.Sync.$tc'BlockedOnBlackHole1
                                         GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadBlocked3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadBlocked"#;

GHC.Conc.Sync.$tc'ThreadBlocked2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadBlocked3];

GHC.Conc.Sync.$tc'ThreadBlocked :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1896650886570328403##
                                    13390928353603149841##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadBlocked2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadBlocked1];

GHC.Conc.Sync.$tcPrimMVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrimMVar"#;

GHC.Conc.Sync.$tcPrimMVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcPrimMVar2];

GHC.Conc.Sync.$tcPrimMVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9965391380168186507##
                                    18322737771689556223##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcPrimMVar1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tcSTM2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STM"#;

GHC.Conc.Sync.$tcSTM1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcSTM2];

GHC.Conc.Sync.$tcSTM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2004856025729794332##
                                    14974623362753764267##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcSTM1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep20_r9Fv7 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcSTM
                                              $krep5_r9FuS];

GHC.Conc.Sync.$tc'STM1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r9Fv5 $krep20_r9Fv7];

GHC.Conc.Sync.$tc'STM3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'STM"#;

GHC.Conc.Sync.$tc'STM2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'STM3];

GHC.Conc.Sync.$tc'STM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11288073744523536973##
                                    9767688212531311940##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'STM2
                                    1#
                                    GHC.Conc.Sync.$tc'STM1];

GHC.Conc.Sync.$tcTVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TVar"#;

GHC.Conc.Sync.$tcTVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcTVar2];

GHC.Conc.Sync.$tcTVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13084572405727191592##
                                    5232564955606145236##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcTVar1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep21_r9Fv8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcTVar
                                              $krep5_r9FuS];

GHC.Conc.Sync.$tc'TVar1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r9FuU $krep21_r9Fv8];

GHC.Conc.Sync.$tc'TVar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TVar"#;

GHC.Conc.Sync.$tc'TVar2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'TVar3];

GHC.Conc.Sync.$tc'TVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9463269625853265574##
                                    3517068532143837766##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'TVar2
                                    1#
                                    GHC.Conc.Sync.$tc'TVar1];

GHC.Conc.Sync.$fShowThreadId2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadId "#;

GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
  :: GHC.Types.Int -> GHC.Conc.Sync.ThreadId -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(U)><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [d_s9FB9 t_s9FBa]
        let {
          x_s9FBb [Occ=OnceL, Dmd=<L,U(U)>] :: Foreign.C.Types.CInt
          [LclId] =
              [t_s9FBa] \u []
                  case t_s9FBa of {
                    GHC.Conc.Sync.ThreadId t1_s9FBd [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t1_s9FBd GHC.Prim.realWorld#] of {
                          Unit# ds1_s9FBh [Occ=Once] ->
                              case narrow32Int# [ds1_s9FBh] of sat_s9FBi {
                                __DEFAULT -> GHC.Int.I32# [sat_s9FBi];
                              };
                        };
                  }; } in
        let {
          sat_s9FBs [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [d_s9FB9 x_s9FBb] \r [x1_s9FBj]
                  let {
                    sat_s9FBr [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [d_s9FB9 x_s9FBb x1_s9FBj] \u []
                            case x_s9FBb of {
                              GHC.Int.I32# x#_s9FBl [Occ=Once] ->
                                  case d_s9FB9 of {
                                    GHC.Types.I# ww1_s9FBn [Occ=Once] ->
                                        case
                                            GHC.Show.$wshowSignedInt ww1_s9FBn x#_s9FBl x1_s9FBj
                                        of
                                        { (#,#) ww5_s9FBp [Occ=Once] ww6_s9FBq [Occ=Once] ->
                                              : [ww5_s9FBp ww6_s9FBq];
                                        };
                                  };
                            };
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.Conc.Sync.$fShowThreadId2 sat_s9FBr;
        } in  sat_s9FBs;

GHC.Conc.Sync.$fShowThreadId_$cshow
  :: GHC.Conc.Sync.ThreadId -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [x_s9FBt]
        let {
          sat_s9FBE [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_s9FBt] \u []
                  case x_s9FBt of {
                    GHC.Conc.Sync.ThreadId t_s9FBv [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t_s9FBv GHC.Prim.realWorld#] of {
                          Unit# ds1_s9FBz [Occ=Once] ->
                              case narrow32Int# [ds1_s9FBz] of sat_s9FBA {
                                __DEFAULT ->
                                    case GHC.Show.$wshowSignedInt 0# sat_s9FBA GHC.Types.[] of {
                                      (#,#) ww5_s9FBC [Occ=Once] ww6_s9FBD [Occ=Once] ->
                                          : [ww5_s9FBC ww6_s9FBD];
                                    };
                              };
                        };
                  };
        } in 
          GHC.CString.unpackAppendCString#
              GHC.Conc.Sync.$fShowThreadId2 sat_s9FBE;

GHC.Conc.Sync.$fShowThreadId1
  :: GHC.Conc.Sync.ThreadId -> GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [t_s9FBF]
        let {
          x_s9FBG [Occ=OnceL, Dmd=<L,U(U)>] :: Foreign.C.Types.CInt
          [LclId] =
              [t_s9FBF] \u []
                  case t_s9FBF of {
                    GHC.Conc.Sync.ThreadId t1_s9FBI [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t1_s9FBI GHC.Prim.realWorld#] of {
                          Unit# ds1_s9FBM [Occ=Once] ->
                              case narrow32Int# [ds1_s9FBM] of sat_s9FBN {
                                __DEFAULT -> GHC.Int.I32# [sat_s9FBN];
                              };
                        };
                  }; } in
        let {
          sat_s9FBV [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [x_s9FBG] \r [x1_s9FBO]
                  let {
                    sat_s9FBU [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [x_s9FBG x1_s9FBO] \u []
                            case x_s9FBG of {
                              GHC.Int.I32# x#_s9FBQ [Occ=Once] ->
                                  case GHC.Show.$wshowSignedInt 0# x#_s9FBQ x1_s9FBO of {
                                    (#,#) ww5_s9FBS [Occ=Once] ww6_s9FBT [Occ=Once] ->
                                        : [ww5_s9FBS ww6_s9FBT];
                                  };
                            };
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.Conc.Sync.$fShowThreadId2 sat_s9FBU;
        } in  sat_s9FBV;

GHC.Conc.Sync.$fShowThreadId_$cshowList
  :: [GHC.Conc.Sync.ThreadId] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s9FBW s_s9FBX]
        GHC.Show.showList__ GHC.Conc.Sync.$fShowThreadId1 ls_s9FBW s_s9FBX;

GHC.Conc.Sync.$fShowThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
                                    GHC.Conc.Sync.$fShowThreadId_$cshow
                                    GHC.Conc.Sync.$fShowThreadId_$cshowList];

reportHeapOverflow1_r9Fv9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          (##) -> Unit# [GHC.Tuple.()];
        };

GHC.Conc.Sync.reportHeapOverflow :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] reportHeapOverflow1_r9Fv9 GHC.Prim.void#;

GHC.Conc.Sync.cmpThread
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [t1_s9FC2 t2_s9FC3]
        case t2_s9FC3 of {
          GHC.Conc.Sync.ThreadId t_s9FC5 [Occ=Once] ->
              case t1_s9FC2 of {
                GHC.Conc.Sync.ThreadId t4_s9FC7 [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t4_s9FC7 t_s9FC5 GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9FCb [Occ=Once] ->
                          case narrow32Int# [ds1_s9FCb] of {
                            __DEFAULT -> GHC.Types.GT [];
                            -1# -> GHC.Types.LT [];
                            0# -> GHC.Types.EQ [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId_$c==
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [t1_s9FCd t2_s9FCe]
        case t2_s9FCe of {
          GHC.Conc.Sync.ThreadId t_s9FCg [Occ=Once] ->
              case t1_s9FCd of {
                GHC.Conc.Sync.ThreadId t4_s9FCi [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t4_s9FCi t_s9FCg GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9FCm [Occ=Once] ->
                          case narrow32Int# [ds1_s9FCm] of {
                            __DEFAULT -> GHC.Types.False [];
                            0# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s9FCo eta1_s9FCp]
        case eta1_s9FCp of {
          GHC.Conc.Sync.ThreadId t_s9FCr [Occ=Once] ->
              case eta_s9FCo of {
                GHC.Conc.Sync.ThreadId t1_s9FCt [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FCt t_s9FCr GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9FCx [Occ=Once] ->
                          case narrow32Int# [ds1_s9FCx] of {
                            __DEFAULT -> GHC.Types.True [];
                            0# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqThreadId_$c==
                                     GHC.Conc.Sync.$fEqThreadId_$c/=];

GHC.Conc.Sync.$fOrdThreadId_$c<
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9FCz y_s9FCA]
        case y_s9FCA of {
          GHC.Conc.Sync.ThreadId t_s9FCC [Occ=Once] ->
              case x_s9FCz of {
                GHC.Conc.Sync.ThreadId t1_s9FCE [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FCE t_s9FCC GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9FCI [Occ=Once] ->
                          case narrow32Int# [ds1_s9FCI] of {
                            __DEFAULT -> GHC.Types.False [];
                            -1# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c>=
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9FCK y_s9FCL]
        case y_s9FCL of {
          GHC.Conc.Sync.ThreadId t_s9FCN [Occ=Once] ->
              case x_s9FCK of {
                GHC.Conc.Sync.ThreadId t1_s9FCP [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FCP t_s9FCN GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9FCT [Occ=Once] ->
                          case narrow32Int# [ds1_s9FCT] of {
                            __DEFAULT -> GHC.Types.True [];
                            -1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c>
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9FCV y_s9FCW]
        case y_s9FCW of {
          GHC.Conc.Sync.ThreadId t_s9FCY [Occ=Once] ->
              case x_s9FCV of {
                GHC.Conc.Sync.ThreadId t1_s9FD0 [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FD0 t_s9FCY GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9FD4 [Occ=Once] ->
                          case narrow32Int# [ds1_s9FD4] of {
                            __DEFAULT -> GHC.Types.True [];
                            -1# -> GHC.Types.False [];
                            0# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c<=
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9FD6 y_s9FD7]
        case y_s9FD7 of {
          GHC.Conc.Sync.ThreadId t_s9FD9 [Occ=Once] ->
              case x_s9FD6 of {
                GHC.Conc.Sync.ThreadId t1_s9FDb [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FDb t_s9FD9 GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9FDf [Occ=Once] ->
                          case narrow32Int# [ds1_s9FDf] of {
                            __DEFAULT -> GHC.Types.False [];
                            -1# -> GHC.Types.True [];
                            0# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$cmax
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Conc.Sync.ThreadId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s9FDh y_s9FDi]
        case y_s9FDi of wild_s9FDj {
          GHC.Conc.Sync.ThreadId t_s9FDk [Occ=Once] ->
              case x_s9FDh of wild1_s9FDl {
                GHC.Conc.Sync.ThreadId t1_s9FDm [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FDm t_s9FDk GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9FDq [Occ=Once] ->
                          case narrow32Int# [ds1_s9FDq] of {
                            __DEFAULT -> wild1_s9FDl;
                            -1# -> wild_s9FDj;
                            0# -> wild_s9FDj;
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$cmin
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Conc.Sync.ThreadId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s9FDs y_s9FDt]
        case y_s9FDt of wild_s9FDu {
          GHC.Conc.Sync.ThreadId t_s9FDv [Occ=Once] ->
              case x_s9FDs of wild1_s9FDw {
                GHC.Conc.Sync.ThreadId t1_s9FDx [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9FDx t_s9FDv GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9FDB [Occ=Once] ->
                          case narrow32Int# [ds1_s9FDB] of {
                            __DEFAULT -> wild_s9FDu;
                            -1# -> wild1_s9FDw;
                            0# -> wild1_s9FDw;
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqThreadId
                                      GHC.Conc.Sync.cmpThread
                                      GHC.Conc.Sync.$fOrdThreadId_$c<
                                      GHC.Conc.Sync.$fOrdThreadId_$c<=
                                      GHC.Conc.Sync.$fOrdThreadId_$c>
                                      GHC.Conc.Sync.$fOrdThreadId_$c>=
                                      GHC.Conc.Sync.$fOrdThreadId_$cmax
                                      GHC.Conc.Sync.$fOrdThreadId_$cmin];

GHC.Conc.Sync.$fShowThreadStatus10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadRunning"#;

GHC.Conc.Sync.$fShowThreadStatus9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus10;

GHC.Conc.Sync.$fShowThreadStatus8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadFinished"#;

GHC.Conc.Sync.$fShowThreadStatus7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus8;

GHC.Conc.Sync.$fShowThreadStatus6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadBlocked "#;

GHC.Conc.Sync.$fShowThreadStatus5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus6;

GHC.Conc.Sync.$fShowThreadStatus4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadDied"#;

GHC.Conc.Sync.$fShowThreadStatus3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus4;

GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
  :: GHC.Types.Int -> GHC.Conc.Sync.ThreadStatus -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,1*U(U)><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s9FDD ds1_s9FDE eta_s9FDF]
        case ds1_s9FDE of {
          GHC.Conc.Sync.ThreadRunning ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus9 eta_s9FDF;
          GHC.Conc.Sync.ThreadFinished ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus7 eta_s9FDF;
          GHC.Conc.Sync.ThreadBlocked b1_s9FDH [Occ=Once*] ->
              case ds_s9FDD of {
                GHC.Types.I# x_s9FDJ [Occ=Once] ->
                    case >=# [x_s9FDJ 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s9FDL [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [eta_s9FDF b1_s9FDH] \s []
                                    GHC.Conc.Sync.$w$cshowsPrec b1_s9FDH eta_s9FDF;
                          } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9FDL;
                      1# ->
                          let {
                            sat_s9FDO [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [eta_s9FDF b1_s9FDH] \u []
                                    let {
                                      sat_s9FDN [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          [eta_s9FDF b1_s9FDH] \s []
                                              let {
                                                sat_s9FDM [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)2 eta_s9FDF];
                                              } in  GHC.Conc.Sync.$w$cshowsPrec b1_s9FDH sat_s9FDM;
                                    } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9FDN;
                          } in  : [GHC.Show.$fShow(,)4 sat_s9FDO];
                    };
              };
          GHC.Conc.Sync.ThreadDied ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus3 eta_s9FDF;
        };

GHC.Conc.Sync.$fShowThreadStatus_$cshow
  :: GHC.Conc.Sync.ThreadStatus -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9FDP]
        case x_s9FDP of {
          GHC.Conc.Sync.ThreadRunning -> GHC.Conc.Sync.$fShowThreadStatus9;
          GHC.Conc.Sync.ThreadFinished -> GHC.Conc.Sync.$fShowThreadStatus7;
          GHC.Conc.Sync.ThreadBlocked b1_s9FDR [Occ=Once] ->
              let {
                sat_s9FDS [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s9FDR] \s [] GHC.Conc.Sync.$w$cshowsPrec b1_s9FDR GHC.Types.[];
              } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9FDS;
          GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.$fShowThreadStatus3;
        };

GHC.Conc.Sync.$fShowThreadStatus2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Conc.Sync.$fShowThreadStatus1
  :: GHC.Conc.Sync.ThreadStatus -> GHC.Show.ShowS
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
            GHC.Conc.Sync.$fShowThreadStatus2 eta_B2 eta_B1;

GHC.Conc.Sync.$fShowThreadStatus_$cshowList
  :: [GHC.Conc.Sync.ThreadStatus] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9FDT s_s9FDU]
        GHC.Show.showList__
            GHC.Conc.Sync.$fShowThreadStatus1 ls_s9FDT s_s9FDU;

GHC.Conc.Sync.$fShowThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
                                    GHC.Conc.Sync.$fShowThreadStatus_$cshow
                                    GHC.Conc.Sync.$fShowThreadStatus_$cshowList];

GHC.Conc.Sync.killThread2 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionAsyncException_$ctoException
            GHC.IO.Exception.ThreadKilled;

GHC.Conc.Sync.killThread1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [tid_s9FDV void_0E]
        case tid_s9FDV of {
          GHC.Conc.Sync.ThreadId tid1_s9FDY [Occ=Once] ->
              case
                  killThread# [tid1_s9FDY GHC.Conc.Sync.killThread2 GHC.Prim.void#]
              of
              s1_s9FDZ
              { (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.killThread
  :: GHC.Conc.Sync.ThreadId -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.killThread1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.getNumProcessors1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          Unit# ds1_s9FE4 [Occ=Once] ->
              case narrow32Word# [ds1_s9FE4] of sat_s9FE5 {
                __DEFAULT ->
                    case word2Int# [sat_s9FE5] of sat_s9FE6 {
                      __DEFAULT ->
                          let {
                            sat_s9FE7 [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Types.I#! [sat_s9FE6];
                          } in  Unit# [sat_s9FE7];
                    };
              };
        };

GHC.Conc.Sync.getNumProcessors :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.getNumProcessors1 GHC.Prim.void#;

GHC.Conc.Sync.threadStatus7 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnOther];

GHC.Conc.Sync.threadStatus6 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnMVar];

GHC.Conc.Sync.threadStatus2 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnException];

GHC.Conc.Sync.threadStatus3 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnForeignCall];

GHC.Conc.Sync.threadStatus4 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnSTM];

GHC.Conc.Sync.threadStatus5 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnBlackHole];

GHC.Conc.Sync.$wthreadStatus [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Conc.Sync.ThreadStatus #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s9FE8 void_0E]
        case threadStatus# [ww_s9FE8 GHC.Prim.void#] of {
          (#,,#) ipv1_s9FEc [Occ=Once!] _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                sat_s9FEg [Occ=Once] :: GHC.Conc.Sync.ThreadStatus
                [LclId] =
                    [ipv1_s9FEc] \u []
                        case ipv1_s9FEc of {
                          __DEFAULT -> GHC.Conc.Sync.threadStatus7;
                          0# -> GHC.Conc.Sync.ThreadRunning [];
                          1# -> GHC.Conc.Sync.threadStatus6;
                          2# -> GHC.Conc.Sync.threadStatus5;
                          6# -> GHC.Conc.Sync.threadStatus4;
                          10# -> GHC.Conc.Sync.threadStatus3;
                          11# -> GHC.Conc.Sync.threadStatus3;
                          12# -> GHC.Conc.Sync.threadStatus2;
                          14# -> GHC.Conc.Sync.threadStatus6;
                          16# -> GHC.Conc.Sync.ThreadFinished [];
                          17# -> GHC.Conc.Sync.ThreadDied [];
                        };
              } in  Unit# [sat_s9FEg];
        };

GHC.Conc.Sync.threadStatus1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Conc.Sync.ThreadStatus #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9FEh void_0E]
        case w_s9FEh of {
          GHC.Conc.Sync.ThreadId ww1_s9FEk [Occ=Once] ->
              GHC.Conc.Sync.$wthreadStatus ww1_s9FEk GHC.Prim.void#;
        };

GHC.Conc.Sync.threadStatus
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.threadStatus1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$fFunctorSTM2
  :: forall a b.
     (a -> b)
     -> GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><C(S(SL)),1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [f_s9FEl x_s9FEm void_0E]
        case x_s9FEm GHC.Prim.void# of {
          Unit# ipv1_s9FEq [Occ=Once] ->
              let {
                sat_s9FEr [Occ=Once] :: b_a9Da0
                [LclId] =
                    [f_s9FEl ipv1_s9FEq] \u [] f_s9FEl ipv1_s9FEq;
              } in  Unit# [sat_s9FEr];
        };

GHC.Conc.Sync.$fFunctorSTM1
  :: forall a b.
     a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(S(SL)),1*C1(U(U,A))><S,U>,
 Unf=OtherCon []] =
    [] \r [x_s9FEs eta_s9FEt void_0E]
        case eta_s9FEt GHC.Prim.void# of {
          Unit# _ [Occ=Dead] -> Unit# [x_s9FEs];
        };

GHC.Conc.Sync.$fApplicativeSTM2
  :: forall b a.
     GHC.Conc.Sync.STM (a -> b)
     -> GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,1*C1(U)))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [m1_s9FEy m2_s9FEz void_0E]
        case m1_s9FEy GHC.Prim.void# of {
          Unit# ipv1_s9FED [Occ=Once!] ->
              case m2_s9FEz GHC.Prim.void# of {
                Unit# ipv3_s9FEG [Occ=Once] ->
                    let {
                      sat_s9FEH [Occ=Once] :: b_a9D90
                      [LclId] =
                          [ipv1_s9FED ipv3_s9FEG] \u [] ipv1_s9FED ipv3_s9FEG;
                    } in  Unit# [sat_s9FEH];
              };
        };

$cliftA2_r9Fva
  :: forall c b a.
     (a -> b -> c)
     -> GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, c #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [f_s9FEI m1_s9FEJ m2_s9FEK void_0E]
        case m1_s9FEJ GHC.Prim.void# of {
          Unit# ipv1_s9FEO [Occ=Once] ->
              case m2_s9FEK GHC.Prim.void# of {
                Unit# ipv3_s9FER [Occ=Once] ->
                    let {
                      sat_s9FES [Occ=Once] :: c_a9D9j
                      [LclId] =
                          [f_s9FEI ipv1_s9FEO ipv3_s9FER] \u []
                              f_s9FEI ipv1_s9FEO ipv3_s9FER;
                    } in  Unit# [sat_s9FES];
              };
        };

GHC.Conc.Sync.$fApplicativeSTM_$cliftA2 [InlPrag=INLINE (sat-args=0)]
  :: forall a b c.
     (a -> b -> c)
     -> GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Conc.Sync.STM c
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $cliftA2_r9Fva eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$fApplicativeSTM1
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,A))><S,U>,
 Unf=OtherCon []] =
    [] \r [m1_s9FET m2_s9FEU void_0E]
        case m1_s9FET GHC.Prim.void# of {
          Unit# ipv1_s9FEY [Occ=Once] ->
              case m2_s9FEU GHC.Prim.void# of {
                Unit# _ [Occ=Dead] -> Unit# [ipv1_s9FEY];
              };
        };

GHC.Conc.Sync.$fFunctorSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor GHC.Conc.Sync.STM
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [GHC.Conc.Sync.$fFunctorSTM2
                                       GHC.Conc.Sync.$fFunctorSTM1];

GHC.Conc.Sync.$fApplicativeSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [GHC.Conc.Sync.$fFunctorSTM
                                           GHC.Conc.Sync.$fApplicativeSTM_$cpure
                                           GHC.Conc.Sync.$fApplicativeSTM2
                                           GHC.Conc.Sync.$fApplicativeSTM_$cliftA2
                                           GHC.Conc.Sync.$fApplicativeSTM_$c*>
                                           GHC.Conc.Sync.$fApplicativeSTM1];

lvl_r9Fvb :: forall a. [GHC.Types.Char] -> GHC.Conc.Sync.STM a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s9FF2] GHC.Err.errorWithoutStackTrace eta_s9FF2;

GHC.Conc.Sync.$fMonadSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [GHC.Conc.Sync.$fApplicativeSTM
                                     GHC.Conc.Sync.$fMonadSTM_$c>>=
                                     GHC.Conc.Sync.$fApplicativeSTM_$c*>
                                     GHC.Conc.Sync.$fApplicativeSTM_$cpure
                                     lvl_r9Fvb];

GHC.Conc.Sync.always2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [GHC.Tuple.()];

GHC.Conc.Sync.alwaysSucceeds1
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<xB,U><S,U>, Unf=OtherCon []] =
    [] \r [i_s9FF4 void_0E]
        let {
          sat_s9FFa [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [i_s9FF4] \r [void_0E]
                  case i_s9FF4 GHC.Prim.void# of {
                    Unit# _ [Occ=Dead] -> retry# [GHC.Prim.void#];
                  };
        } in 
          case
              catchRetry# [sat_s9FFa GHC.Conc.Sync.always2 GHC.Prim.void#]
          of
          { Unit# _ [Occ=Dead] ->
                case check# [i_s9FF4 GHC.Prim.void#] of s'_s9FFe {
                  (##) -> Unit# [GHC.Tuple.()];
                };
          };

GHC.Conc.Sync.alwaysSucceeds
  :: forall a. GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<xB,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.alwaysSucceeds1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$fAlternativeSTM2
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [GHC.Types.[]];

GHC.Conc.Sync.$fAlternativeSTM3
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S(SL)),C(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [v_s9FFg void_0E]
        let {
          some_v_s9FFi [Occ=LoopBreaker]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7E] #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              [v_s9FFg some_v_s9FFi] \r [void_0E]
                  case v_s9FFg GHC.Prim.void# of {
                    Unit# ipv1_s9FFm [Occ=Once] ->
                        case
                            catchRetry# [some_v_s9FFi
                                         GHC.Conc.Sync.$fAlternativeSTM2
                                         GHC.Prim.void#]
                        of
                        { Unit# ipv3_s9FFp [Occ=Once] ->
                              let {
                                sat_s9FFq [Occ=Once] :: [a_a9D7E]
                                [LclId] =
                                    CCCS :! [ipv1_s9FFm ipv3_s9FFp];
                              } in  Unit# [sat_s9FFq];
                        };
                  };
        } in  some_v_s9FFi GHC.Prim.void#;

GHC.Conc.Sync.$fAlternativeSTM1
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [v_s9FFr void_0E]
        let {
          many_v_s9FFt [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7Q] #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              [v_s9FFr many_v1_s9FFu] \r [void_0E]
                  case v_s9FFr GHC.Prim.void# of {
                    Unit# ipv1_s9FFy [Occ=Once] ->
                        case many_v1_s9FFu GHC.Prim.void# of {
                          Unit# ipv3_s9FFB [Occ=Once] ->
                              let {
                                sat_s9FFC [Occ=Once] :: [a_a9D7Q]
                                [LclId] =
                                    CCCS :! [ipv1_s9FFy ipv3_s9FFB];
                              } in  Unit# [sat_s9FFC];
                        };
                  };
          many_v1_s9FFu [Occ=LoopBreaker]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7Q] #)
          [LclId, Arity=1, Unf=OtherCon []] =
              sat-only [many_v_s9FFt] \r [void_0E]
                  catchRetry# [many_v_s9FFt
                               GHC.Conc.Sync.$fAlternativeSTM2
                               GHC.Prim.void#];
        } in  many_v1_s9FFu GHC.Prim.void#;

sat_s9FFE
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B3 eta_B2 void_0E]
        catchRetry# [eta_B3 eta_B2 GHC.Prim.void#];

sat_s9FFD :: forall a. GHC.Conc.Sync.STM a
[LclId] =
    [] \r [void_0E] retry# [GHC.Prim.void#];

GHC.Conc.Sync.$fAlternativeSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Alternative GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Alternative! [GHC.Conc.Sync.$fApplicativeSTM
                                           sat_s9FFD
                                           sat_s9FFE
                                           GHC.Conc.Sync.$fAlternativeSTM3
                                           GHC.Conc.Sync.$fAlternativeSTM1];

sat_s9FFG
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B3 eta_B2 void_0E]
        catchRetry# [eta_B3 eta_B2 GHC.Prim.void#];

sat_s9FFF :: forall a. GHC.Conc.Sync.STM a
[LclId] =
    [] \r [void_0E] retry# [GHC.Prim.void#];

GHC.Conc.Sync.$fMonadPlusSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.MonadPlus GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:MonadPlus! [GHC.Conc.Sync.$fAlternativeSTM
                                         GHC.Conc.Sync.$fMonadSTM
                                         sat_s9FFF
                                         sat_s9FFG];

lvl1_r9Fvc :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Transactional invariant violation"#;

GHC.Conc.Sync.always3 :: GHC.Conc.Sync.STM ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl1_r9Fvc of sat_s9FFH {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s9FFH;
        };

GHC.Conc.Sync.always1
  :: GHC.Conc.Sync.STM GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<xB,C(U(U,1*U))><S,U>, Unf=OtherCon []] =
    [] \r [i_s9FFI void_0E]
        let {
          sat_s9FFQ [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [i_s9FFI] \r [void_0E]
                  case i_s9FFI GHC.Prim.void# of {
                    Unit# ipv1_s9FFN [Occ=Once!] ->
                        case ipv1_s9FFN of {
                          GHC.Types.False -> GHC.Conc.Sync.always3;
                          GHC.Types.True -> retry# [GHC.Prim.void#];
                        };
                  };
        } in 
          case
              catchRetry# [sat_s9FFQ GHC.Conc.Sync.always2 GHC.Prim.void#]
          of
          { Unit# _ [Occ=Dead] ->
                let {
                  sat_s9FG0 [Occ=Once]
                    :: GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                  [LclId] =
                      [i_s9FFI] \r [void_0E]
                          case i_s9FFI GHC.Prim.void# of {
                            Unit# ipv3_s9FFX [Occ=Once!] ->
                                case ipv3_s9FFX of {
                                  GHC.Types.False -> GHC.Conc.Sync.always3;
                                  GHC.Types.True -> Unit# [GHC.Tuple.()];
                                };
                          };
                } in 
                  case check# [sat_s9FG0 GHC.Prim.void#] of s'_s9FG1 {
                    (##) -> Unit# [GHC.Tuple.()];
                  };
          };

GHC.Conc.Sync.always
  :: GHC.Conc.Sync.STM GHC.Types.Bool -> GHC.Conc.Sync.STM ()
[GblId, Arity=2, Str=<xB,C(U(U,1*U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.Conc.Sync.always1 eta_B2 GHC.Prim.void#;

lvl2_r9Fvd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "no threads to run:  infinite loop or deadlock?"#;

lvl3_r9Fve :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_r9Fvd;

lvl4_r9Fvf
  :: Data.Typeable.Internal.TypeRep GHC.IO.Exception.Deadlock
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                18363794241794644491##
                11186984538024031318##
                GHC.IO.Exception.$trModule
                GHC.IO.Exception.$fExceptionDeadlock4
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9FG3 [Occ=Once]
                   ww9_s9FG4 [Occ=Once]
                   ww10_s9FG5 [Occ=Once]
                   ww11_s9FG6 [Occ=Once]
                   ww12_s9FG7 [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_s9FG3
                                              ww9_s9FG4
                                              ww10_s9FG5
                                              ww11_s9FG6
                                              ww12_s9FG7];
        };

lvl5_r9Fvg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s"#;

lvl6_r9Fvh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_r9Fvg;

lvl7_r9Fvi
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds1_s9FG8 void_0E]
        case ds1_s9FG8 of {
          GHC.Exception.SomeException _ [Occ=Dead] _ [Occ=Dead] ->
              Unit# [GHC.Tuple.()];
        };

lvl8_r9Fvj :: GHC.Types.IO ()
[GblId] =
    [] \u [] GHC.IO.Handle.hFlush GHC.IO.Handle.FD.stdout;

lvl9_r9Fvk
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [se_s9FGd void_0E]
        case se_s9FGd of {
          GHC.Exception.SomeException $dException_s9FGg
                                      ex_s9FGh [Occ=Once*] ->
              case lvl8_r9Fvj of io_s9FGi {
                __DEFAULT ->
                    case catch# [io_s9FGi lvl7_r9Fvi GHC.Prim.void#] of {
                      Unit# _ [Occ=Dead] ->
                          case GHC.IO.Encoding.getForeignEncoding GHC.Prim.void# of {
                            Unit# ipv3_s9FGo [Occ=Once] ->
                                let {
                                  msg_s9FGp [Occ=OnceL] :: [GHC.Types.Char]
                                  [LclId] =
                                      [$dException_s9FGg ex_s9FGh] \u []
                                          case
                                              GHC.Exception.$p1Exception $dException_s9FGg
                                          of
                                          sat_s9FGq
                                          { __DEFAULT ->
                                                case
                                                    Data.Typeable.Internal.sameTypeRep
                                                        sat_s9FGq lvl4_r9Fvf
                                                of
                                                { GHC.Types.False ->
                                                      case
                                                          GHC.Exception.$p2Exception
                                                              $dException_s9FGg
                                                      of
                                                      sat_s9FGs
                                                      { __DEFAULT ->
                                                            GHC.Show.showsPrec
                                                                sat_s9FGs
                                                                GHC.Conc.Sync.$fShowThreadStatus2
                                                                ex_s9FGh
                                                                GHC.Types.[];
                                                      };
                                                  GHC.Types.True ->
                                                      case ex_s9FGh of {
                                                        GHC.IO.Exception.Deadlock -> lvl3_r9Fve;
                                                      };
                                                };
                                          }; } in
                                let {
                                  sat_s9FGJ [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                                  [LclId] =
                                      [msg_s9FGp] \r [cfmt_s9FGu void_0E]
                                          case
                                              GHC.IO.Encoding.getForeignEncoding GHC.Prim.void#
                                          of
                                          { Unit# ipv5_s9FGy [Occ=Once] ->
                                                let {
                                                  sat_s9FGI [Occ=Once]
                                                    :: GHC.Foreign.CString -> GHC.Types.IO ()
                                                  [LclId] =
                                                      [cfmt_s9FGu] \r [cmsg_s9FGz void_0E]
                                                          case cfmt_s9FGu of {
                                                            GHC.Ptr.Ptr ds4_s9FGC [Occ=Once] ->
                                                                case cmsg_s9FGz of {
                                                                  GHC.Ptr.Ptr ds6_s9FGE [Occ=Once] ->
                                                                      case
                                                                          __pkg_ccall base-4.11.0.0 [ds4_s9FGC
                                                                                                     ds6_s9FGE
                                                                                                     GHC.Prim.void#]
                                                                      of
                                                                      { (##) ->
                                                                            Unit# [GHC.Tuple.()];
                                                                      };
                                                                };
                                                          };
                                                } in 
                                                  GHC.Foreign.charIsRepresentable3
                                                      ipv5_s9FGy msg_s9FGp sat_s9FGI GHC.Prim.void#;
                                          };
                                } in 
                                  GHC.Foreign.charIsRepresentable3
                                      ipv3_s9FGo lvl6_r9Fvh sat_s9FGJ GHC.Prim.void#;
                          };
                    };
              };
        };

lvl10_r9Fvl
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9FGL {
          (##) ->
              case newMutVar# [lvl9_r9Fvk GHC.Prim.void#] of {
                Unit# ipv1_s9FGO [Occ=Once] ->
                    let {
                      sat_s9FGP [Occ=Once]
                        :: GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ())
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_s9FGO];
                    } in  Unit# [sat_s9FGP];
              };
        };

GHC.Conc.Sync.uncaughtExceptionHandler [InlPrag=NOINLINE]
  :: GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case lvl10_r9Fvl GHC.Prim.realWorld# of {
          Unit# ipv1_s9FGS [Occ=Once] -> ipv1_s9FGS;
        };

GHC.Conc.Sync.setUncaughtExceptionHandler1
  :: (GHC.Exception.SomeException -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.STRef.writeSTRef1
            GHC.Conc.Sync.uncaughtExceptionHandler eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.setUncaughtExceptionHandler
  :: (GHC.Exception.SomeException -> GHC.Types.IO ())
     -> GHC.Types.IO ()
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.setUncaughtExceptionHandler1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.getUncaughtExceptionHandler1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Exception.SomeException -> GHC.Types.IO () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.STRef.readSTRef1
            GHC.Conc.Sync.uncaughtExceptionHandler GHC.Prim.void#;

GHC.Conc.Sync.getUncaughtExceptionHandler
  :: GHC.Types.IO (GHC.Exception.SomeException -> GHC.Types.IO ())
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.Conc.Sync.getUncaughtExceptionHandler1 GHC.Prim.void#;

GHC.Conc.Sync.reportError1
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [ex_s9FGT void_0E]
        case GHC.Conc.Sync.uncaughtExceptionHandler of {
          GHC.STRef.STRef var#_s9FGW [Occ=Once] ->
              case readMutVar# [var#_s9FGW GHC.Prim.void#] of {
                Unit# ipv1_s9FGZ [Occ=Once!] -> ipv1_s9FGZ ex_s9FGT GHC.Prim.void#;
              };
        };

GHC.Conc.Sync.reportError
  :: GHC.Exception.SomeException -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.reportError1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.sharedCAF1
  :: forall a.
     a
     -> (GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(C(S(SS(S)))),C(C1(U(U,1*U(U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [a1_s9FH0 get_or_set_s9FH1 void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_s9FH5 [Occ=Once!] ->
              let {
                io_s9FH6 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CSP #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [a1_s9FH0 get_or_set_s9FH1] \r [void_0E]
                        case makeStablePtr# [a1_s9FH0 GHC.Prim.void#] of {
                          Unit# ipv3_s9FHa ->
                              let {
                                sat_s9FHb [Occ=Once] :: GHC.Ptr.Ptr a_a9CSP
                                [LclId] =
                                    CCCS GHC.Ptr.Ptr! [ipv3_s9FHa];
                              } in 
                                case get_or_set_s9FH1 sat_s9FHb GHC.Prim.void# of {
                                  Unit# ipv5_s9FHe [Occ=Once!] ->
                                      case ipv5_s9FHe of {
                                        GHC.Ptr.Ptr b1_s9FHg ->
                                            case eqAddr# [ipv3_s9FHa b1_s9FHg] of {
                                              __DEFAULT ->
                                                  case
                                                      __pkg_ccall base-4.11.0.0 [ipv3_s9FHa
                                                                                 GHC.Prim.void#]
                                                  of
                                                  { (##) ->
                                                        deRefStablePtr# [b1_s9FHg GHC.Prim.void#];
                                                  };
                                              1# -> Unit# [a1_s9FH0];
                                            };
                                      };
                                };
                        };
              } in 
                case ipv1_s9FH5 of {
                  __DEFAULT -> io_s9FH6 GHC.Prim.void#;
                  0# -> maskAsyncExceptions# [io_s9FH6 GHC.Prim.void#];
                };
        };

GHC.Conc.Sync.sharedCAF
  :: forall a.
     a
     -> (GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a))
     -> GHC.Types.IO a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(C(S(SS(S)))),C(C1(U(U,1*U(U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.sharedCAF1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$wmodifyMVar_ [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MVar# GHC.Prim.RealWorld a
     -> (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s9FHm w_s9FHn void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_s9FHr [Occ=Once!] ->
              case ipv1_s9FHr of {
                __DEFAULT ->
                    case takeMVar# [ww_s9FHm GHC.Prim.void#] of {
                      Unit# ipv3_s9FHv ->
                          let {
                            sat_s9FHG [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [ww_s9FHm ipv3_s9FHv] \r [ds3_s9FHy]
                                    case ds3_s9FHy of {
                                      GHC.Exception.SomeException $dException_s9FHA [Occ=Once]
                                                                  e1_s9FHB [Occ=Once] ->
                                          let {
                                            sat_s9FHF [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a_s9ETF #)
                                            [LclId] =
                                                [ww_s9FHm
                                                 ipv3_s9FHv
                                                 $dException_s9FHA
                                                 e1_s9FHB] \r [void_0E]
                                                    case
                                                        putMVar# [ww_s9FHm
                                                                  ipv3_s9FHv
                                                                  GHC.Prim.void#]
                                                    of
                                                    { (##) ->
                                                          GHC.Exception.throw
                                                              $dException_s9FHA e1_s9FHB;
                                                    };
                                          } in  sat_s9FHF;
                                    }; } in
                          let {
                            sat_s9FHw [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [w_s9FHn ipv3_s9FHv] \u [] w_s9FHn ipv3_s9FHv; } in
                          let {
                            sat_s9FHx [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [sat_s9FHw] \r [void_0E]
                                    maskAsyncExceptions# [sat_s9FHw GHC.Prim.void#];
                          } in 
                            case catch# [sat_s9FHx sat_s9FHG GHC.Prim.void#] of {
                              Unit# ipv5_s9FHJ [Occ=Once] ->
                                  case putMVar# [ww_s9FHm ipv5_s9FHJ GHC.Prim.void#] of s2#_s9FHK {
                                    (##) -> Unit# [GHC.Tuple.()];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_s9FI4 [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_s9FHm w_s9FHn] \r [void_0E]
                              case takeMVar# [ww_s9FHm GHC.Prim.void#] of {
                                Unit# ipv3_s9FHO ->
                                    let {
                                      sat_s9FHZ [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [ww_s9FHm ipv3_s9FHO] \r [ds3_s9FHR]
                                              case ds3_s9FHR of {
                                                GHC.Exception.SomeException $dException_s9FHT [Occ=Once]
                                                                            e1_s9FHU [Occ=Once] ->
                                                    let {
                                                      sat_s9FHY [Occ=OnceT[0]]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_s9ETF #)
                                                      [LclId] =
                                                          [ww_s9FHm
                                                           ipv3_s9FHO
                                                           $dException_s9FHT
                                                           e1_s9FHU] \r [void_0E]
                                                              case
                                                                  putMVar# [ww_s9FHm
                                                                            ipv3_s9FHO
                                                                            GHC.Prim.void#]
                                                              of
                                                              { (##) ->
                                                                    GHC.Exception.throw
                                                                        $dException_s9FHT e1_s9FHU;
                                                              };
                                                    } in  sat_s9FHY;
                                              }; } in
                                    let {
                                      sat_s9FHP [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [w_s9FHn ipv3_s9FHO] \u [] w_s9FHn ipv3_s9FHO; } in
                                    let {
                                      sat_s9FHQ [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [sat_s9FHP] \r [void_0E]
                                              unmaskAsyncExceptions# [sat_s9FHP GHC.Prim.void#];
                                    } in 
                                      case catch# [sat_s9FHQ sat_s9FHZ GHC.Prim.void#] of {
                                        Unit# ipv5_s9FI2 [Occ=Once] ->
                                            case
                                                putMVar# [ww_s9FHm ipv5_s9FI2 GHC.Prim.void#]
                                            of
                                            s2#_s9FI3
                                            { (##) -> Unit# [GHC.Tuple.()];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_s9FI4 GHC.Prim.void#];
                1# ->
                    case takeMVar# [ww_s9FHm GHC.Prim.void#] of {
                      Unit# ipv3_s9FI7 ->
                          let {
                            sat_s9FIi [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [ww_s9FHm ipv3_s9FI7] \r [ds3_s9FIa]
                                    case ds3_s9FIa of {
                                      GHC.Exception.SomeException $dException_s9FIc [Occ=Once]
                                                                  e1_s9FId [Occ=Once] ->
                                          let {
                                            sat_s9FIh [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a_s9ETF #)
                                            [LclId] =
                                                [ww_s9FHm
                                                 ipv3_s9FI7
                                                 $dException_s9FIc
                                                 e1_s9FId] \r [void_0E]
                                                    case
                                                        putMVar# [ww_s9FHm
                                                                  ipv3_s9FI7
                                                                  GHC.Prim.void#]
                                                    of
                                                    { (##) ->
                                                          GHC.Exception.throw
                                                              $dException_s9FIc e1_s9FId;
                                                    };
                                          } in  sat_s9FIh;
                                    }; } in
                          let {
                            sat_s9FI8 [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [w_s9FHn ipv3_s9FI7] \u [] w_s9FHn ipv3_s9FI7; } in
                          let {
                            sat_s9FI9 [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [sat_s9FI8] \r [void_0E]
                                    maskUninterruptible# [sat_s9FI8 GHC.Prim.void#];
                          } in 
                            case catch# [sat_s9FI9 sat_s9FIi GHC.Prim.void#] of {
                              Unit# ipv5_s9FIl [Occ=Once] ->
                                  case putMVar# [ww_s9FHm ipv5_s9FIl GHC.Prim.void#] of s2#_s9FIm {
                                    (##) -> Unit# [GHC.Tuple.()];
                                  };
                            };
                    };
              };
        };

GHC.Conc.Sync.modifyMVar_1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.MVar.MVar a
     -> (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9FIn w1_s9FIo void_0E]
        case w_s9FIn of {
          GHC.MVar.MVar ww1_s9FIr [Occ=Once] ->
              GHC.Conc.Sync.$wmodifyMVar_ ww1_s9FIr w1_s9FIo GHC.Prim.void#;
        };

GHC.Conc.Sync.modifyMVar_
  :: forall a.
     GHC.MVar.MVar a -> (a -> GHC.Types.IO a) -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.modifyMVar_1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$wwithMVar [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     GHC.Prim.MVar# GHC.Prim.RealWorld a
     -> (a -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s9FIs w_s9FIt void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_s9FIx [Occ=Once!] ->
              case ipv1_s9FIx of {
                __DEFAULT ->
                    case takeMVar# [ww_s9FIs GHC.Prim.void#] of {
                      Unit# ipv3_s9FIB ->
                          let {
                            sat_s9FIM [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [ww_s9FIs ipv3_s9FIB] \r [ds3_s9FIE]
                                    case ds3_s9FIE of {
                                      GHC.Exception.SomeException $dException_s9FIG [Occ=Once]
                                                                  e1_s9FIH [Occ=Once] ->
                                          let {
                                            sat_s9FIL [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       b_s9ETP #)
                                            [LclId] =
                                                [ww_s9FIs
                                                 ipv3_s9FIB
                                                 $dException_s9FIG
                                                 e1_s9FIH] \r [void_0E]
                                                    case
                                                        putMVar# [ww_s9FIs
                                                                  ipv3_s9FIB
                                                                  GHC.Prim.void#]
                                                    of
                                                    { (##) ->
                                                          GHC.Exception.throw
                                                              $dException_s9FIG e1_s9FIH;
                                                    };
                                          } in  sat_s9FIL;
                                    }; } in
                          let {
                            sat_s9FIC [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [w_s9FIt ipv3_s9FIB] \u [] w_s9FIt ipv3_s9FIB; } in
                          let {
                            sat_s9FID [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [sat_s9FIC] \r [void_0E]
                                    maskAsyncExceptions# [sat_s9FIC GHC.Prim.void#];
                          } in 
                            case catch# [sat_s9FID sat_s9FIM GHC.Prim.void#] of {
                              Unit# ipv5_s9FIP [Occ=Once] ->
                                  case putMVar# [ww_s9FIs ipv3_s9FIB GHC.Prim.void#] of s2#_s9FIQ {
                                    (##) -> Unit# [ipv5_s9FIP];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_s9FJa [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                      [LclId] =
                          [ww_s9FIs w_s9FIt] \r [void_0E]
                              case takeMVar# [ww_s9FIs GHC.Prim.void#] of {
                                Unit# ipv3_s9FIU ->
                                    let {
                                      sat_s9FJ5 [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [ww_s9FIs ipv3_s9FIU] \r [ds3_s9FIX]
                                              case ds3_s9FIX of {
                                                GHC.Exception.SomeException $dException_s9FIZ [Occ=Once]
                                                                            e1_s9FJ0 [Occ=Once] ->
                                                    let {
                                                      sat_s9FJ4 [Occ=OnceT[0]]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 b_s9ETP #)
                                                      [LclId] =
                                                          [ww_s9FIs
                                                           ipv3_s9FIU
                                                           $dException_s9FIZ
                                                           e1_s9FJ0] \r [void_0E]
                                                              case
                                                                  putMVar# [ww_s9FIs
                                                                            ipv3_s9FIU
                                                                            GHC.Prim.void#]
                                                              of
                                                              { (##) ->
                                                                    GHC.Exception.throw
                                                                        $dException_s9FIZ e1_s9FJ0;
                                                              };
                                                    } in  sat_s9FJ4;
                                              }; } in
                                    let {
                                      sat_s9FIV [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [w_s9FIt ipv3_s9FIU] \u [] w_s9FIt ipv3_s9FIU; } in
                                    let {
                                      sat_s9FIW [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [sat_s9FIV] \r [void_0E]
                                              unmaskAsyncExceptions# [sat_s9FIV GHC.Prim.void#];
                                    } in 
                                      case catch# [sat_s9FIW sat_s9FJ5 GHC.Prim.void#] of {
                                        Unit# ipv5_s9FJ8 [Occ=Once] ->
                                            case
                                                putMVar# [ww_s9FIs ipv3_s9FIU GHC.Prim.void#]
                                            of
                                            s2#_s9FJ9
                                            { (##) -> Unit# [ipv5_s9FJ8];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_s9FJa GHC.Prim.void#];
                1# ->
                    case takeMVar# [ww_s9FIs GHC.Prim.void#] of {
                      Unit# ipv3_s9FJd ->
                          let {
                            sat_s9FJo [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [ww_s9FIs ipv3_s9FJd] \r [ds3_s9FJg]
                                    case ds3_s9FJg of {
                                      GHC.Exception.SomeException $dException_s9FJi [Occ=Once]
                                                                  e1_s9FJj [Occ=Once] ->
                                          let {
                                            sat_s9FJn [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       b_s9ETP #)
                                            [LclId] =
                                                [ww_s9FIs
                                                 ipv3_s9FJd
                                                 $dException_s9FJi
                                                 e1_s9FJj] \r [void_0E]
                                                    case
                                                        putMVar# [ww_s9FIs
                                                                  ipv3_s9FJd
                                                                  GHC.Prim.void#]
                                                    of
                                                    { (##) ->
                                                          GHC.Exception.throw
                                                              $dException_s9FJi e1_s9FJj;
                                                    };
                                          } in  sat_s9FJn;
                                    }; } in
                          let {
                            sat_s9FJe [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [w_s9FIt ipv3_s9FJd] \u [] w_s9FIt ipv3_s9FJd; } in
                          let {
                            sat_s9FJf [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [sat_s9FJe] \r [void_0E]
                                    maskUninterruptible# [sat_s9FJe GHC.Prim.void#];
                          } in 
                            case catch# [sat_s9FJf sat_s9FJo GHC.Prim.void#] of {
                              Unit# ipv5_s9FJr [Occ=Once] ->
                                  case putMVar# [ww_s9FIs ipv3_s9FJd GHC.Prim.void#] of s2#_s9FJs {
                                    (##) -> Unit# [ipv5_s9FJr];
                                  };
                            };
                    };
              };
        };

GHC.Conc.Sync.withMVar1 [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     GHC.MVar.MVar a
     -> (a -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9FJt w1_s9FJu void_0E]
        case w_s9FJt of {
          GHC.MVar.MVar ww1_s9FJx [Occ=Once] ->
              GHC.Conc.Sync.$wwithMVar ww1_s9FJx w1_s9FJu GHC.Prim.void#;
        };

GHC.Conc.Sync.withMVar
  :: forall a b.
     GHC.MVar.MVar a -> (a -> GHC.Types.IO b) -> GHC.Types.IO b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.withMVar1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.reportStackOverflow1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9FJB [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9FJB GHC.Prim.void#] of {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.reportStackOverflow :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.reportStackOverflow1 GHC.Prim.void#;

GHC.Conc.Sync.forkIO2
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [e1_s9FJF void_0E]
        GHC.Conc.Sync.childHandler1 e1_s9FJF GHC.Prim.void#;
GHC.Conc.Sync.childHandler1 [Occ=LoopBreaker]
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [err_s9FJH void_0E]
        let {
          sat_s9FKv [Occ=Once, Dmd=<L,1*C1(U)>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [err_s9FJH] \s []
                  case err_s9FJH of wild_s9FJJ {
                    GHC.Exception.SomeException $dException1_s9FJK e2_s9FJL ->
                        case GHC.Exception.$p1Exception $dException1_s9FJK of sat_s9FJM {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_s9FJM
                                      GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3
                              of
                              { GHC.Types.False ->
                                    case
                                        GHC.Exception.$p1Exception $dException1_s9FJK
                                    of
                                    sat_s9FJO
                                    { __DEFAULT ->
                                          case
                                              Data.Typeable.Internal.sameTypeRep
                                                  sat_s9FJO
                                                  GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3
                                          of
                                          { GHC.Types.False ->
                                                case
                                                    GHC.Exception.$p1Exception $dException1_s9FJK
                                                of
                                                sat_s9FKl
                                                { __DEFAULT ->
                                                      let-no-escape {
                                                        fail_s9FJQ [Occ=Once*!T[1],
                                                                    Dmd=<L,1*C1(C1(U))>]
                                                          :: GHC.Prim.Void#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   () #)
                                                        [LclId[JoinId(1)],
                                                         Arity=1,
                                                         Str=<L,A>,
                                                         Unf=OtherCon []] =
                                                            sat-only [wild_s9FJJ
                                                                      $dException1_s9FJK
                                                                      e2_s9FJL] \r [void_0E]
                                                                case
                                                                    GHC.Exception.$p1Exception
                                                                        $dException1_s9FJK
                                                                of
                                                                sat_s9FJS
                                                                { __DEFAULT ->
                                                                      case
                                                                          Data.Typeable.Internal.sameTypeRep
                                                                              sat_s9FJS
                                                                              GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                                      of
                                                                      { GHC.Types.False ->
                                                                            let {
                                                                              sat_s9FK0 [Occ=OnceT[0]]
                                                                                :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         () #)
                                                                              [LclId] =
                                                                                  [wild_s9FJJ] \r [void_0E]
                                                                                      case
                                                                                          GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                      of
                                                                                      { GHC.STRef.STRef var#_s9FJW [Occ=Once] ->
                                                                                            case
                                                                                                readMutVar# [var#_s9FJW
                                                                                                             GHC.Prim.void#]
                                                                                            of
                                                                                            { Unit# ipv1_s9FJZ [Occ=Once!] ->
                                                                                                  ipv1_s9FJZ
                                                                                                      wild_s9FJJ
                                                                                                      GHC.Prim.void#;
                                                                                            };
                                                                                      };
                                                                            } in  sat_s9FK0;
                                                                        GHC.Types.True ->
                                                                            case e2_s9FJL of {
                                                                              GHC.IO.Exception.SomeAsyncException $dException_s9FK2 [Occ=Once]
                                                                                                                  a_s9FK3 [Occ=Once] ->
                                                                                  case
                                                                                      GHC.Exception.$p1Exception
                                                                                          $dException_s9FK2
                                                                                  of
                                                                                  sat_s9FK4
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            Data.Typeable.Internal.sameTypeRep
                                                                                                sat_s9FK4
                                                                                                GHC.IO.Exception.$fExceptionAsyncException9
                                                                                        of
                                                                                        { GHC.Types.False ->
                                                                                              let {
                                                                                                sat_s9FKc [Occ=OnceT[0]]
                                                                                                  :: GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           () #)
                                                                                                [LclId] =
                                                                                                    [wild_s9FJJ] \r [void_0E]
                                                                                                        case
                                                                                                            GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                        of
                                                                                                        { GHC.STRef.STRef var#_s9FK8 [Occ=Once] ->
                                                                                                              case
                                                                                                                  readMutVar# [var#_s9FK8
                                                                                                                               GHC.Prim.void#]
                                                                                                              of
                                                                                                              { Unit# ipv1_s9FKb [Occ=Once!] ->
                                                                                                                    ipv1_s9FKb
                                                                                                                        wild_s9FJJ
                                                                                                                        GHC.Prim.void#;
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                sat_s9FKc;
                                                                                          GHC.Types.True ->
                                                                                              case
                                                                                                  a_s9FK3
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s9FKk [Occ=OnceT[0]]
                                                                                                        :: GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 () #)
                                                                                                      [LclId] =
                                                                                                          [wild_s9FJJ] \r [void_0E]
                                                                                                              case
                                                                                                                  GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                              of
                                                                                                              { GHC.STRef.STRef var#_s9FKg [Occ=Once] ->
                                                                                                                    case
                                                                                                                        readMutVar# [var#_s9FKg
                                                                                                                                     GHC.Prim.void#]
                                                                                                                    of
                                                                                                                    { Unit# ipv1_s9FKj [Occ=Once!] ->
                                                                                                                          ipv1_s9FKj
                                                                                                                              wild_s9FJJ
                                                                                                                              GHC.Prim.void#;
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      sat_s9FKk;
                                                                                                GHC.IO.Exception.StackOverflow ->
                                                                                                    GHC.Conc.Sync.reportStackOverflow1;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in 
                                                        case
                                                            Data.Typeable.Internal.sameTypeRep
                                                                sat_s9FKl
                                                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                        of
                                                        { GHC.Types.False ->
                                                              fail_s9FJQ GHC.Prim.void#;
                                                          GHC.Types.True ->
                                                              case e2_s9FJL of {
                                                                GHC.IO.Exception.SomeAsyncException $dException_s9FKo [Occ=Once]
                                                                                                    a_s9FKp [Occ=Once] ->
                                                                    case
                                                                        GHC.Exception.$p1Exception
                                                                            $dException_s9FKo
                                                                    of
                                                                    sat_s9FKq
                                                                    { __DEFAULT ->
                                                                          case
                                                                              Data.Typeable.Internal.sameTypeRep
                                                                                  sat_s9FKq
                                                                                  GHC.IO.Exception.$fExceptionAsyncException9
                                                                          of
                                                                          { GHC.Types.False ->
                                                                                fail_s9FJQ
                                                                                    GHC.Prim.void#;
                                                                            GHC.Types.True ->
                                                                                case a_s9FKp of {
                                                                                  __DEFAULT ->
                                                                                      fail_s9FJQ
                                                                                          GHC.Prim.void#;
                                                                                  GHC.IO.Exception.ThreadKilled ->
                                                                                      GHC.Conc.Sync.always2;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                };
                                            GHC.Types.True ->
                                                case e2_s9FJL of {
                                                  GHC.IO.Exception.BlockedIndefinitelyOnSTM ->
                                                      GHC.Conc.Sync.always2;
                                                };
                                          };
                                    };
                                GHC.Types.True ->
                                    case e2_s9FJL of {
                                      GHC.IO.Exception.BlockedIndefinitelyOnMVar ->
                                          GHC.Conc.Sync.always2;
                                    };
                              };
                        };
                  };
        } in  catch# [sat_s9FKv GHC.Conc.Sync.forkIO2 GHC.Prim.void#];

GHC.Conc.Sync.childHandler
  :: GHC.Exception.SomeException -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.childHandler1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.forkOn1
  :: GHC.Types.Int
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [ds_s9FKw action_s9FKx void_0E]
        case ds_s9FKw of {
          GHC.Types.I# cpu_s9FKA [Occ=Once] ->
              let {
                sat_s9FKC [Occ=Once] :: GHC.Types.IO ()
                [LclId] =
                    [action_s9FKx] \r [void_0E]
                        catch# [action_s9FKx GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
              } in 
                case forkOn# [cpu_s9FKA sat_s9FKC GHC.Prim.void#] of {
                  Unit# ipv1_s9FKF [Occ=Once] ->
                      let {
                        sat_s9FKG [Occ=Once] :: GHC.Conc.Sync.ThreadId
                        [LclId] =
                            CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9FKF];
                      } in  Unit# [sat_s9FKG];
                };
        };

GHC.Conc.Sync.forkOn
  :: GHC.Types.Int
     -> GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=3, Str=<S(S),1*U(U)><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.forkOn1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.forkOnWithUnmask1
  :: GHC.Types.Int
     -> ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
         -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [cpu_s9FKH io_s9FKI void_0E]
        case cpu_s9FKH of {
          GHC.Types.I# cpu1_s9FKL [Occ=Once] ->
              let {
                sat_s9FKP [Occ=Once] :: GHC.Types.IO ()
                [LclId] =
                    [io_s9FKI] \r [void_0E]
                        let {
                          sat_s9FKO [Occ=Once, Dmd=<L,1*C1(U)>]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          [LclId] =
                              [io_s9FKI] \s []
                                  let {
                                    sat_s9FKN [Occ=Once]
                                      :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                                    [LclId] =
                                        [] \r [eta_B2 void_0E]
                                            unmaskAsyncExceptions# [eta_B2 GHC.Prim.void#];
                                  } in  io_s9FKI sat_s9FKN;
                        } in  catch# [sat_s9FKO GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
              } in 
                case forkOn# [cpu1_s9FKL sat_s9FKP GHC.Prim.void#] of {
                  Unit# ipv1_s9FKS [Occ=Once] ->
                      let {
                        sat_s9FKT [Occ=Once] :: GHC.Conc.Sync.ThreadId
                        [LclId] =
                            CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9FKS];
                      } in  Unit# [sat_s9FKT];
                };
        };

GHC.Conc.Sync.forkOnWithUnmask
  :: GHC.Types.Int
     -> ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
         -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.forkOnWithUnmask1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.forkIO1
  :: GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [action_s9FKU void_0E]
        let {
          sat_s9FKX [Occ=Once] :: GHC.Types.IO ()
          [LclId] =
              [action_s9FKU] \r [void_0E]
                  catch# [action_s9FKU GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
        } in 
          case fork# [sat_s9FKX GHC.Prim.void#] of {
            Unit# ipv1_s9FL0 [Occ=Once] ->
                let {
                  sat_s9FL1 [Occ=Once] :: GHC.Conc.Sync.ThreadId
                  [LclId] =
                      CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9FL0];
                } in  Unit# [sat_s9FL1];
          };

GHC.Conc.Sync.forkIO
  :: GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.Conc.Sync.forkIO1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.forkIOWithUnmask1
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [io_s9FL2 void_0E]
        let {
          sat_s9FL7 [Occ=Once] :: GHC.Types.IO ()
          [LclId] =
              [io_s9FL2] \r [void_0E]
                  let {
                    sat_s9FL6 [Occ=Once, Dmd=<L,1*C1(U)>]
                      :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                    [LclId] =
                        [io_s9FL2] \s []
                            let {
                              sat_s9FL5 [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                              [LclId] =
                                  [] \r [eta_B2 void_0E]
                                      unmaskAsyncExceptions# [eta_B2 GHC.Prim.void#];
                            } in  io_s9FL2 sat_s9FL5;
                  } in  catch# [sat_s9FL6 GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
        } in 
          case fork# [sat_s9FL7 GHC.Prim.void#] of {
            Unit# ipv1_s9FLa [Occ=Once] ->
                let {
                  sat_s9FLb [Occ=Once] :: GHC.Conc.Sync.ThreadId
                  [LclId] =
                      CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9FLa];
                } in  Unit# [sat_s9FLb];
          };

GHC.Conc.Sync.forkIOWithUnmask
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.forkIOWithUnmask1 eta_B2 GHC.Prim.void#;

lvl11_r9Fvm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "setNumCapabilities: Capability count ("#;

lvl12_r9Fvn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") must be positive"#;

lvl13_r9Fvo :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_r9Fvn;

GHC.Conc.Sync.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_s9FLc void_0E]
        let {
          sat_s9FLi [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s9FLc] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s9FLc GHC.Types.[] of {
                    (#,#) ww5_s9FLf [Occ=Once] ww6_s9FLg [Occ=Once] ->
                        let {
                          sat_s9FLh [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_s9FLf ww6_s9FLg];
                        } in  GHC.Base.++ sat_s9FLh lvl13_r9Fvo;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl11_r9Fvm sat_s9FLi
          of
          sat_s9FLj
          { __DEFAULT -> GHC.IO.failIO1 sat_s9FLj GHC.Prim.void#;
          };

GHC.Conc.Sync.setNumCapabilities2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [w_s9FLk void_0E]
        case w_s9FLk of {
          GHC.Types.I# ww1_s9FLn [Occ=Once] ->
              GHC.Conc.Sync.$wlvl ww1_s9FLn GHC.Prim.void#;
        };

GHC.Conc.Sync.setNumCapabilities1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [i_s9FLo void_0E]
        case i_s9FLo of {
          GHC.Types.I# x_s9FLr ->
              case <=# [x_s9FLr 0#] of {
                __DEFAULT ->
                    case int2Word# [x_s9FLr] of sat_s9FLu {
                      __DEFAULT ->
                          case narrow32Word# [sat_s9FLu] of sat_s9FLv {
                            __DEFAULT ->
                                case __pkg_ccall_GC base-4.11.0.0 [sat_s9FLv GHC.Prim.void#] of {
                                  (##) -> Unit# [GHC.Tuple.()];
                                };
                          };
                    };
                1# -> GHC.Conc.Sync.$wlvl x_s9FLr GHC.Prim.void#;
              };
        };

GHC.Conc.Sync.setNumCapabilities
  :: GHC.Types.Int -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.setNumCapabilities1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.getNumCapabilities1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case
            readInt32OffAddr# [__label "enabled_capabilities" (data)
                               0#
                               GHC.Prim.void#]
        of
        { Unit# ipv1_s9FLB [Occ=Once] ->
              let {
                sat_s9FLC [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [ipv1_s9FLB];
              } in  Unit# [sat_s9FLC];
        };

GHC.Conc.Sync.getNumCapabilities :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.getNumCapabilities1 GHC.Prim.void#;

GHC.Conc.Sync.numCapabilities1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9FLE {
          (##) ->
              case
                  readInt32OffAddr# [__label "enabled_capabilities" (data)
                                     0#
                                     GHC.Prim.void#]
              of
              { Unit# ipv1_s9FLH [Occ=Once] ->
                    let {
                      sat_s9FLI [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          CCCS GHC.Types.I#! [ipv1_s9FLH];
                    } in  Unit# [sat_s9FLI];
              };
        };

GHC.Conc.Sync.numCapabilities :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.Conc.Sync.numCapabilities1 GHC.Prim.realWorld# of {
          Unit# ipv1_s9FLL [Occ=Once] -> ipv1_s9FLL;
        };

GHC.Conc.Sync.disableAllocationLimit1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9FLP [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9FLP GHC.Prim.void#] of {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.disableAllocationLimit :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.Conc.Sync.disableAllocationLimit1 GHC.Prim.void#;

GHC.Conc.Sync.enableAllocationLimit1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9FLW [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9FLW GHC.Prim.void#] of {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.enableAllocationLimit :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.Conc.Sync.enableAllocationLimit1 GHC.Prim.void#;

GHC.Conc.Sync.getAllocationCounter1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int64 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9FM3 [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9FM3 GHC.Prim.void#] of {
                Unit# ds2_s9FM7 [Occ=Once] ->
                    let {
                      sat_s9FM8 [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ds2_s9FM7];
                    } in  Unit# [sat_s9FM8];
              };
        };

GHC.Conc.Sync.getAllocationCounter :: GHC.Types.IO GHC.Int.Int64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.getAllocationCounter1 GHC.Prim.void#;

GHC.Conc.Sync.setAllocationCounter1
  :: GHC.Int.Int64
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [i_s9FM9 void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9FMd [Occ=Once] ->
              case i_s9FM9 of {
                GHC.Int.I64# ds2_s9FMf [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [ipv1_s9FMd ds2_s9FMf GHC.Prim.void#]
                    of
                    { (##) -> Unit# [GHC.Tuple.()];
                    };
              };
        };

GHC.Conc.Sync.setAllocationCounter
  :: GHC.Int.Int64 -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.setAllocationCounter1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.TVar
  :: forall a.
     GHC.Prim.TVar# GHC.Prim.RealWorld a -> GHC.Conc.Sync.TVar a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.TVar [eta_B1];

GHC.Conc.Sync.ThreadRunning :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadRunning! [];

GHC.Conc.Sync.ThreadFinished :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadFinished! [];

GHC.Conc.Sync.ThreadBlocked
  :: GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.ThreadStatus
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.ThreadBlocked [eta_B1];

GHC.Conc.Sync.ThreadDied :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadDied! [];

GHC.Conc.Sync.BlockedOnMVar :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnMVar! [];

GHC.Conc.Sync.BlockedOnBlackHole :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnBlackHole! [];

GHC.Conc.Sync.BlockedOnException :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnException! [];

GHC.Conc.Sync.BlockedOnSTM :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnSTM! [];

GHC.Conc.Sync.BlockedOnForeignCall :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnForeignCall! [];

GHC.Conc.Sync.BlockedOnOther :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnOther! [];

GHC.Conc.Sync.ThreadId
  :: GHC.Prim.ThreadId# -> GHC.Conc.Sync.ThreadId
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.ThreadId [eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:04:52.337550228 UTC

GHC.Conc.Sync.$fEqTVar_$c==
  :: forall a.
     GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.TVar a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s9LSP ds1_s9LSQ]
        case ds_s9LSP of {
          GHC.Conc.Sync.TVar tvar1#_s9LSS [Occ=Once] ->
              case ds1_s9LSQ of {
                GHC.Conc.Sync.TVar tvar2#_s9LSU [Occ=Once] ->
                    case sameTVar# [tvar1#_s9LSS tvar2#_s9LSU] of sat_s9LSV {
                      __DEFAULT -> tagToEnum# [sat_s9LSV];
                    };
              };
        };

GHC.Conc.Sync.$fEqTVar_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.TVar a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s9LSW eta1_s9LSX]
        case eta_s9LSW of {
          GHC.Conc.Sync.TVar tvar1#_s9LSZ [Occ=Once] ->
              case eta1_s9LSX of {
                GHC.Conc.Sync.TVar tvar2#_s9LT1 [Occ=Once] ->
                    case sameTVar# [tvar1#_s9LSZ tvar2#_s9LT1] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Conc.Sync.$fEqTVar [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Conc.Sync.TVar a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqTVar_$c==
                                     GHC.Conc.Sync.$fEqTVar_$c/=];

GHC.Conc.Sync.$fShowBlockReason12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnMVar"#;

GHC.Conc.Sync.$fShowBlockReason11 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason12;

GHC.Conc.Sync.$fShowBlockReason10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnBlackHole"#;

GHC.Conc.Sync.$fShowBlockReason9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason10;

GHC.Conc.Sync.$fShowBlockReason8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnException"#;

GHC.Conc.Sync.$fShowBlockReason7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason8;

GHC.Conc.Sync.$fShowBlockReason6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnSTM"#;

GHC.Conc.Sync.$fShowBlockReason5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason6;

GHC.Conc.Sync.$fShowBlockReason4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnForeignCall"#;

GHC.Conc.Sync.$fShowBlockReason3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason4;

GHC.Conc.Sync.$fShowBlockReason2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnOther"#;

GHC.Conc.Sync.$fShowBlockReason1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason2;

GHC.Conc.Sync.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Conc.Sync.BlockReason -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s9LT3 w1_s9LT4]
        case w_s9LT3 of {
          GHC.Conc.Sync.BlockedOnMVar ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason11 w1_s9LT4;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason9 w1_s9LT4;
          GHC.Conc.Sync.BlockedOnException ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason7 w1_s9LT4;
          GHC.Conc.Sync.BlockedOnSTM ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason5 w1_s9LT4;
          GHC.Conc.Sync.BlockedOnForeignCall ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason3 w1_s9LT4;
          GHC.Conc.Sync.BlockedOnOther ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason1 w1_s9LT4;
        };

GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Conc.Sync.BlockReason -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s9LT6 w1_s9LT7 w2_s9LT8]
        GHC.Conc.Sync.$w$cshowsPrec w1_s9LT7 w2_s9LT8;

GHC.Conc.Sync.$fShowBlockReason_$cshow
  :: GHC.Conc.Sync.BlockReason -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9LT9]
        case x_s9LT9 of {
          GHC.Conc.Sync.BlockedOnMVar -> GHC.Conc.Sync.$fShowBlockReason11;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              GHC.Conc.Sync.$fShowBlockReason9;
          GHC.Conc.Sync.BlockedOnException ->
              GHC.Conc.Sync.$fShowBlockReason7;
          GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.$fShowBlockReason5;
          GHC.Conc.Sync.BlockedOnForeignCall ->
              GHC.Conc.Sync.$fShowBlockReason3;
          GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.$fShowBlockReason1;
        };

GHC.Conc.Sync.$fShowBlockReason_$cshowList
  :: [GHC.Conc.Sync.BlockReason] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9LTb s_s9LTc]
        GHC.Show.showList__ GHC.Conc.Sync.$w$cshowsPrec ls_s9LTb s_s9LTc;

GHC.Conc.Sync.$fShowBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.BlockReason
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec
                                    GHC.Conc.Sync.$fShowBlockReason_$cshow
                                    GHC.Conc.Sync.$fShowBlockReason_$cshowList];

GHC.Conc.Sync.$fEqBlockReason_$c==
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LTd ds1_s9LTe]
        case ds_s9LTd of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fEqBlockReason_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s9LTm eta1_s9LTn]
        case eta_s9LTm of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fEqBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.BlockReason
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqBlockReason_$c==
                                     GHC.Conc.Sync.$fEqBlockReason_$c/=];

GHC.Conc.Sync.$fEqThreadStatus_$c==
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LTv ds1_s9LTw]
        case ds_s9LTv of {
          GHC.Conc.Sync.ThreadRunning ->
              case ds1_s9LTw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case ds1_s9LTw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LTA [Occ=Once] ->
              case ds1_s9LTw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LTC [Occ=Once] ->
                    GHC.Conc.Sync.$fEqBlockReason_$c== a1_s9LTA b1_s9LTC;
              };
          GHC.Conc.Sync.ThreadDied ->
              case ds1_s9LTw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fEqThreadStatus_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s9LTE eta1_s9LTF]
        case eta_s9LTE of {
          GHC.Conc.Sync.ThreadRunning ->
              case eta1_s9LTF of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case eta1_s9LTF of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LTJ [Occ=Once!] ->
              case eta1_s9LTF of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LTL [Occ=Once*!] ->
                    case a1_s9LTJ of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                    };
              };
          GHC.Conc.Sync.ThreadDied ->
              case eta1_s9LTF of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fEqThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqThreadStatus_$c==
                                     GHC.Conc.Sync.$fEqThreadStatus_$c/=];

GHC.Conc.Sync.numSparks1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9LTU]
        case numSparks# [s_s9LTU] of {
          (#,#) ipv_s9LTW [Occ=Once] ipv1_s9LTX [Occ=Once] ->
              let {
                sat_s9LTY [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [ipv1_s9LTX];
              } in  (#,#) [ipv_s9LTW sat_s9LTY];
        };

GHC.Conc.Sync.numSparks :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.numSparks1 eta_B1;

GHC.Conc.Sync.throwTo1
  :: forall e.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.ThreadId
     -> e
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(U),A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dException_s9LTZ ds_s9LU0 ex_s9LU1 eta_s9LU2]
        case ds_s9LU0 of {
          GHC.Conc.Sync.ThreadId tid_s9LU4 [Occ=Once] ->
              let {
                sat_s9LU5 [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [$dException_s9LTZ ex_s9LU1] \u []
                        GHC.Exception.toException $dException_s9LTZ ex_s9LU1;
              } in 
                case killThread# [tid_s9LU4 sat_s9LU5 eta_s9LU2] of s1_s9LU6 {
                  __DEFAULT -> (#,#) [s1_s9LU6 GHC.Tuple.()];
                };
        };

GHC.Conc.Sync.throwTo
  :: forall e.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.ThreadId -> e -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(U),A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.throwTo1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.myThreadId1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9LU7]
        case myThreadId# [s_s9LU7] of {
          (#,#) ipv_s9LU9 [Occ=Once] ipv1_s9LUa [Occ=Once] ->
              let {
                sat_s9LUb [Occ=Once] :: GHC.Conc.Sync.ThreadId
                [LclId] =
                    CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9LUa];
              } in  (#,#) [ipv_s9LU9 sat_s9LUb];
        };

GHC.Conc.Sync.myThreadId :: GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.myThreadId1 eta_B1;

GHC.Conc.Sync.yield1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9LUc]
        case yield# [s_s9LUc] of s1_s9LUd {
          __DEFAULT -> (#,#) [s1_s9LUd GHC.Tuple.()];
        };

GHC.Conc.Sync.yield :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.yield1 eta_B1;

GHC.Conc.Sync.labelThread1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s9LUe str_s9LUf eta_s9LUg]
        case ds_s9LUe of {
          GHC.Conc.Sync.ThreadId t_s9LUi [Occ=OnceL] ->
              let {
                sat_s9LUo [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                [LclId] =
                    [t_s9LUi] \r [ds1_s9LUj eta1_s9LUk]
                        case ds1_s9LUj of {
                          GHC.Ptr.Ptr p_s9LUm [Occ=Once] ->
                              case labelThread# [t_s9LUi p_s9LUm eta1_s9LUk] of s1_s9LUn {
                                __DEFAULT -> (#,#) [s1_s9LUn GHC.Tuple.()];
                              };
                        };
              } in 
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8 str_s9LUf sat_s9LUo eta_s9LUg;
        };

GHC.Conc.Sync.labelThread
  :: GHC.Conc.Sync.ThreadId -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.labelThread1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.pseq [InlPrag=INLINE (sat-args=2)]
  :: forall a b. a -> b -> b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [x_s9LUp y_s9LUq] case x_s9LUp of { __DEFAULT -> y_s9LUq; };

GHC.Conc.Sync.par [InlPrag=INLINE (sat-args=2)]
  :: forall a b. a -> b -> b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [x_s9LUs y_s9LUt]
        case par# [x_s9LUs] of { __DEFAULT -> y_s9LUt; };

GHC.Conc.Sync.runSparks_loop [Occ=LoopBreaker]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9LUv]
        case getSpark# [s_s9LUv] of {
          (#,,#) ipv_s9LUx [Occ=Once*]
                 ipv1_s9LUy [Occ=Once!]
                 ipv2_s9LUz [Occ=Once] ->
              case ipv1_s9LUy of {
                __DEFAULT ->
                    case ipv2_s9LUz of {
                      __DEFAULT -> GHC.Conc.Sync.runSparks_loop ipv_s9LUx;
                    };
                0# -> (#,#) [ipv_s9LUx GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.runSparks :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.runSparks_loop eta_B1;

GHC.Conc.Sync.threadCapability1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LUC eta_s9LUD]
        case ds_s9LUC of {
          GHC.Conc.Sync.ThreadId t_s9LUF [Occ=Once] ->
              case threadStatus# [t_s9LUF eta_s9LUD] of {
                (#,,,#) ipv_s9LUH [Occ=Once]
                        _ [Occ=Dead]
                        ipv2_s9LUJ [Occ=Once]
                        ipv3_s9LUK [Occ=Once!] ->
                    let {
                      sat_s9LUN [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [ipv3_s9LUK] \u []
                              case ipv3_s9LUK of {
                                __DEFAULT -> GHC.Types.True [];
                                0# -> GHC.Types.False [];
                              }; } in
                    let {
                      sat_s9LUL [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          CCCS GHC.Types.I#! [ipv2_s9LUJ]; } in
                    let {
                      sat_s9LUO [Occ=Once] :: (GHC.Types.Int, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [sat_s9LUL sat_s9LUN];
                    } in  (#,#) [ipv_s9LUH sat_s9LUO];
              };
        };

GHC.Conc.Sync.threadCapability
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO (GHC.Types.Int, GHC.Types.Bool)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.threadCapability1 eta_B2 eta_B1;

GHC.Conc.Sync.mkWeakThreadId1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Weak.Weak GHC.Conc.Sync.ThreadId #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [t_s9LUP eta_s9LUQ]
        case t_s9LUP of wild_s9LUR {
          GHC.Conc.Sync.ThreadId t#_s9LUS [Occ=Once] ->
              case mkWeakNoFinalizer# [t#_s9LUS wild_s9LUR eta_s9LUQ] of {
                (#,#) ipv_s9LUU [Occ=Once] ipv1_s9LUV [Occ=Once] ->
                    let {
                      sat_s9LUW [Occ=Once] :: GHC.Weak.Weak GHC.Conc.Sync.ThreadId
                      [LclId] =
                          CCCS GHC.Weak.Weak! [ipv1_s9LUV];
                    } in  (#,#) [ipv_s9LUU sat_s9LUW];
              };
        };

GHC.Conc.Sync.mkWeakThreadId
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO (GHC.Weak.Weak GHC.Conc.Sync.ThreadId)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.mkWeakThreadId1 eta_B2 eta_B1;

GHC.Conc.Sync.newStablePtrPrimMVar1
  :: GHC.MVar.MVar ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LUX eta_s9LUY]
        case ds_s9LUX of {
          GHC.MVar.MVar m_s9LV0 [Occ=Once] ->
              case makeStablePtr# [m_s9LV0 eta_s9LUY] of {
                (#,#) ipv_s9LV2 [Occ=Once] ipv1_s9LV3 [Occ=Once] ->
                    let {
                      sat_s9LV4 [Occ=Once] :: GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar
                      [LclId] =
                          CCCS GHC.Stable.StablePtr! [ipv1_s9LV3];
                    } in  (#,#) [ipv_s9LV2 sat_s9LV4];
              };
        };

GHC.Conc.Sync.newStablePtrPrimMVar
  :: GHC.MVar.MVar ()
     -> GHC.Types.IO (GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.newStablePtrPrimMVar1 eta_B2 eta_B1;

$c>>=_r9FuK
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> (a -> GHC.Conc.Sync.STM b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [m_s9LV5 k_s9LV6 s_s9LV7]
        case m_s9LV5 s_s9LV7 of {
          (#,#) ipv_s9LV9 [Occ=Once] ipv1_s9LVa [Occ=Once] ->
              k_s9LV6 ipv1_s9LVa ipv_s9LV9;
        };

GHC.Conc.Sync.$fMonadSTM_$c>>= [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> (a -> GHC.Conc.Sync.STM b) -> GHC.Conc.Sync.STM b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] $c>>=_r9FuK eta_B3 eta_B2 eta_B1;

$c*>_r9FuL
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [m_s9LVb k_s9LVc s_s9LVd]
        case m_s9LVb s_s9LVd of {
          (#,#) ipv_s9LVf [Occ=Once] _ [Occ=Dead] -> k_s9LVc ipv_s9LVf;
        };

GHC.Conc.Sync.$fApplicativeSTM_$c*> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM b -> GHC.Conc.Sync.STM b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] $c*>_r9FuL eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.orElse
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<xC(S),1*C1(U)><L,1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] catchRetry# [eta_B3 eta_B2 eta_B1];

GHC.Conc.Sync.catchSTM1
  :: forall e a.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.STM a
     -> (e -> GHC.Conc.Sync.STM a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(U),A)><L,1*C1(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [$dException_s9LVh ds_s9LVi handler_s9LVj eta_s9LVk]
        let {
          sat_s9LVp [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CX5 #)
          [LclId] =
              [$dException_s9LVh handler_s9LVj] \r [e1_s9LVl]
                  case GHC.Exception.fromException $dException_s9LVh e1_s9LVl of {
                    GHC.Base.Nothing ->
                        let {
                          sat_s9LVn [Occ=OnceT[0]]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CX5 #)
                          [LclId] =
                              [e1_s9LVl] \r [eta_B1] raiseIO# [e1_s9LVl eta_B1];
                        } in  sat_s9LVn;
                    GHC.Base.Just e'_s9LVo [Occ=Once] -> handler_s9LVj e'_s9LVo;
                  };
        } in  catchSTM# [ds_s9LVi sat_s9LVp eta_s9LVk];

GHC.Conc.Sync.catchSTM
  :: forall e a.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.STM a
     -> (e -> GHC.Conc.Sync.STM a) -> GHC.Conc.Sync.STM a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(U),A)><L,1*C1(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.catchSTM1 eta_B4 eta_B3 eta_B2 eta_B1;

$cpure_r9FuM
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [x_s9LVq s_s9LVr] (#,#) [s_s9LVr x_s9LVq];

GHC.Conc.Sync.$fApplicativeSTM_$cpure [InlPrag=INLINE (sat-args=1)]
  :: forall a. a -> GHC.Conc.Sync.STM a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] $cpure_r9FuM eta_B2 eta_B1;

GHC.Conc.Sync.unsafeIOToSTM1
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9LVs] ds_s9LVs;

GHC.Conc.Sync.unsafeIOToSTM
  :: forall a. GHC.Types.IO a -> GHC.Conc.Sync.STM a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.unsafeIOToSTM1 eta_B1;

GHC.Conc.Sync.atomically
  :: forall a. GHC.Conc.Sync.STM a -> GHC.Types.IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] atomically# [eta_B2 eta_B1];

GHC.Conc.Sync.retry :: forall a. GHC.Conc.Sync.STM a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] retry# [eta_B1];

GHC.Conc.Sync.throwSTM1
  :: forall e a.
     GHC.Exception.Exception e =>
     e
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U><B,U>x,
 Unf=OtherCon []] =
    [] \r [$dException_s9LVt e1_s9LVu eta_s9LVv]
        let {
          sat_s9LVw [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [$dException_s9LVt e1_s9LVu] \u []
                  GHC.Exception.toException $dException_s9LVt e1_s9LVu;
        } in  raiseIO# [sat_s9LVw eta_s9LVv];

GHC.Conc.Sync.throwSTM
  :: forall e a.
     GHC.Exception.Exception e =>
     e -> GHC.Conc.Sync.STM a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U><B,U>x,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.throwSTM1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.newTVar1
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.TVar a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [val_s9LVx s1#_s9LVy]
        case newTVar# [val_s9LVx s1#_s9LVy] of {
          (#,#) ipv_s9LVA [Occ=Once] ipv1_s9LVB [Occ=Once] ->
              let {
                sat_s9LVC [Occ=Once] :: GHC.Conc.Sync.TVar a_a9CVx
                [LclId] =
                    CCCS GHC.Conc.Sync.TVar! [ipv1_s9LVB];
              } in  (#,#) [ipv_s9LVA sat_s9LVC];
        };

GHC.Conc.Sync.newTVar
  :: forall a. a -> GHC.Conc.Sync.STM (GHC.Conc.Sync.TVar a)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.newTVar1 eta_B2 eta_B1;

GHC.Conc.Sync.newTVarIO
  :: forall a. a -> GHC.Types.IO (GHC.Conc.Sync.TVar a)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.newTVar1 eta_B2 eta_B1;

GHC.Conc.Sync.readTVarIO1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LVD eta_s9LVE]
        case ds_s9LVD of {
          GHC.Conc.Sync.TVar tvar#_s9LVG [Occ=Once] ->
              readTVarIO# [tvar#_s9LVG eta_s9LVE];
        };

GHC.Conc.Sync.readTVarIO
  :: forall a. GHC.Conc.Sync.TVar a -> GHC.Types.IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.readTVarIO1 eta_B2 eta_B1;

GHC.Conc.Sync.readTVar1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LVH eta_s9LVI]
        case ds_s9LVH of {
          GHC.Conc.Sync.TVar tvar#_s9LVK [Occ=Once] ->
              readTVar# [tvar#_s9LVK eta_s9LVI];
        };

GHC.Conc.Sync.readTVar
  :: forall a. GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.STM a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.readTVar1 eta_B2 eta_B1;

GHC.Conc.Sync.writeTVar1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LVL val_s9LVM eta_s9LVN]
        case ds_s9LVL of {
          GHC.Conc.Sync.TVar tvar#_s9LVP [Occ=Once] ->
              case writeTVar# [tvar#_s9LVP val_s9LVM eta_s9LVN] of s2#_s9LVQ {
                __DEFAULT -> (#,#) [s2#_s9LVQ GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.writeTVar
  :: forall a. GHC.Conc.Sync.TVar a -> a -> GHC.Conc.Sync.STM ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.writeTVar1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.$fOrdBlockReason_$ccompare
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LVR b_s9LVS]
        case a_s9LVR of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9LVS of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9LVS of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9LVS of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9LVS of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9LVS of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9LVS of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.EQ [];
              };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c<
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LW0 b_s9LW1]
        case a_s9LW0 of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9LW1 of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9LW1 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9LW1 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9LW1 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9LW1 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9LW1 of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c<=
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LW9 b_s9LWa]
        case b_s9LWa of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case a_s9LW9 of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case a_s9LW9 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case a_s9LW9 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case a_s9LW9 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case a_s9LW9 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case a_s9LW9 of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$cmax
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.BlockReason
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LWi y_s9LWj]
        case y_s9LWj of {
          GHC.Conc.Sync.BlockedOnMVar -> x_s9LWi;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case x_s9LWi of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnException ->
                    GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case x_s9LWi of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case x_s9LWi of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case x_s9LWi of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case x_s9LWi of { __DEFAULT -> GHC.Conc.Sync.BlockedOnOther []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c>=
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LWq b_s9LWr]
        case a_s9LWq of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9LWr of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9LWr of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9LWr of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9LWr of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9LWr of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9LWr of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c>
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LWz b_s9LWA]
        GHC.Conc.Sync.$fOrdBlockReason_$c< b_s9LWA a_s9LWz;

GHC.Conc.Sync.$fOrdBlockReason_$cmin
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.BlockReason
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LWB y_s9LWC]
        case y_s9LWC of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case x_s9LWB of { __DEFAULT -> GHC.Conc.Sync.BlockedOnMVar []; };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case x_s9LWB of wild1_s9LWF {
                __DEFAULT -> wild1_s9LWF;
                GHC.Conc.Sync.BlockedOnException ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case x_s9LWB of wild1_s9LWG {
                __DEFAULT -> wild1_s9LWG;
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnException [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case x_s9LWB of wild1_s9LWH {
                __DEFAULT -> wild1_s9LWH;
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnSTM [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case x_s9LWB of wild1_s9LWI {
                __DEFAULT -> wild1_s9LWI;
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
              };
          GHC.Conc.Sync.BlockedOnOther -> x_s9LWB;
        };

GHC.Conc.Sync.$fOrdBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.BlockReason
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqBlockReason
                                      GHC.Conc.Sync.$fOrdBlockReason_$ccompare
                                      GHC.Conc.Sync.$fOrdBlockReason_$c<
                                      GHC.Conc.Sync.$fOrdBlockReason_$c<=
                                      GHC.Conc.Sync.$fOrdBlockReason_$c>
                                      GHC.Conc.Sync.$fOrdBlockReason_$c>=
                                      GHC.Conc.Sync.$fOrdBlockReason_$cmax
                                      GHC.Conc.Sync.$fOrdBlockReason_$cmin];

GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LWJ b_s9LWK]
        case a_s9LWJ of {
          GHC.Conc.Sync.ThreadRunning ->
              case b_s9LWK of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.EQ [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case b_s9LWK of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.EQ [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LWQ [Occ=Once] ->
              case b_s9LWK of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LWS [Occ=Once] ->
                    GHC.Conc.Sync.$fOrdBlockReason_$ccompare a1_s9LWQ b1_s9LWS;
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case b_s9LWK of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.EQ [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c<
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LWU y_s9LWV]
        case x_s9LWU of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9LWV of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LWV of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LX1 [Occ=Once!] ->
              case y_s9LWV of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LX3 [Occ=Once*] ->
                    case a1_s9LX1 of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LX3 of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LX3 of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LX3 of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LX3 of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LX3 of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LX3 of { __DEFAULT -> GHC.Types.False []; };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9LWV of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c>=
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LXc y_s9LXd]
        case x_s9LXc of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9LXd of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LXd of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LXj [Occ=Once!] ->
              case y_s9LXd of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LXl [Occ=Once*] ->
                    case a1_s9LXj of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LXl of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LXl of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LXl of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LXl of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LXl of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LXl of { __DEFAULT -> GHC.Types.True []; };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9LXd of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c>
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LXu y_s9LXv]
        case x_s9LXu of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9LXv of { __DEFAULT -> GHC.Types.False []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LXv of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LXA [Occ=Once!] ->
              case y_s9LXv of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LXC [Occ=Once*] ->
                    case a1_s9LXA of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LXC of { __DEFAULT -> GHC.Types.False []; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LXC of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LXC of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LXC of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LXC of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LXC of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9LXv of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c<=
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LXL y_s9LXM]
        case x_s9LXL of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9LXM of { __DEFAULT -> GHC.Types.True []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LXM of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LXR [Occ=Once!] ->
              case y_s9LXM of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LXT [Occ=Once*] ->
                    case a1_s9LXR of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LXT of { __DEFAULT -> GHC.Types.True []; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LXT of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LXT of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LXT of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LXT of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LXT of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9LXM of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$cmax
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LY2 y_s9LY3]
        case x_s9LY2 of wild_s9LY4 {
          GHC.Conc.Sync.ThreadRunning -> y_s9LY3;
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LY3 of wild1_s9LY5 {
                __DEFAULT -> GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> wild1_s9LY5;
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadDied [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LY7 [Occ=Once!] ->
              case y_s9LY3 of wild1_s9LY8 {
                __DEFAULT -> wild_s9LY4;
                GHC.Conc.Sync.ThreadBlocked b1_s9LY9 [Occ=Once*] ->
                    case a1_s9LY7 of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LY9 of { __DEFAULT -> wild1_s9LY8; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LY9 of {
                            GHC.Conc.Sync.BlockedOnMVar -> wild_s9LY4;
                            GHC.Conc.Sync.BlockedOnBlackHole -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnException -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9LY8;
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LY9 of {
                            __DEFAULT -> wild_s9LY4;
                            GHC.Conc.Sync.BlockedOnException -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9LY8;
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LY9 of {
                            __DEFAULT -> wild_s9LY4;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9LY8;
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LY9 of {
                            __DEFAULT -> wild_s9LY4;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9LY8;
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LY9 of {
                            __DEFAULT -> wild_s9LY4;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9LY8;
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadDied [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9LY3 of { __DEFAULT -> GHC.Conc.Sync.ThreadDied []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$cmin
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LYi y_s9LYj]
        case x_s9LYi of wild_s9LYk {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9LYj of { __DEFAULT -> GHC.Conc.Sync.ThreadRunning []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LYj of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Conc.Sync.ThreadRunning [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] ->
                    GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadFinished [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LYo [Occ=Once!] ->
              case y_s9LYj of wild1_s9LYp {
                __DEFAULT -> wild1_s9LYp;
                GHC.Conc.Sync.ThreadBlocked b1_s9LYq [Occ=Once*] ->
                    case a1_s9LYo of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LYq of { __DEFAULT -> wild_s9LYk; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LYq of {
                            GHC.Conc.Sync.BlockedOnMVar -> wild1_s9LYp;
                            GHC.Conc.Sync.BlockedOnBlackHole -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnException -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9LYk;
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LYq of {
                            __DEFAULT -> wild1_s9LYp;
                            GHC.Conc.Sync.BlockedOnException -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9LYk;
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LYq of {
                            __DEFAULT -> wild1_s9LYp;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9LYk;
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LYq of {
                            __DEFAULT -> wild1_s9LYp;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9LYk;
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LYq of {
                            __DEFAULT -> wild1_s9LYp;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9LYk;
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> wild_s9LYk;
              };
          GHC.Conc.Sync.ThreadDied -> y_s9LYj;
        };

GHC.Conc.Sync.$fOrdThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqThreadStatus
                                      GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c<
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c<=
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c>
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c>=
                                      GHC.Conc.Sync.$fOrdThreadStatus_$cmax
                                      GHC.Conc.Sync.$fOrdThreadStatus_$cmin];

GHC.Conc.Sync.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Conc.Sync.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$trModule4];

GHC.Conc.Sync.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.Sync"#;

GHC.Conc.Sync.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$trModule2];

GHC.Conc.Sync.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Conc.Sync.$trModule3
                                     GHC.Conc.Sync.$trModule1];

$krep_r9FuN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'LiftedRep
                                              GHC.Types.[]];

$krep1_r9FuO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRuntimeRep
                                              GHC.Types.[]];

$krep2_r9FuP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRealWorld
                                              GHC.Types.[]];

$krep3_r9FuQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep4_r9FuR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcThreadId#
                                              GHC.Types.[]];

$krep5_r9FuS :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r9FuQ GHC.Types.[]];

$krep6_r9FuT :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r9FuP $krep5_r9FuS];

$krep7_r9FuU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcTVar#
                                              $krep6_r9FuT];

$krep8_r9FuV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r9FuP GHC.Types.[]];

$krep9_r9FuW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcState#
                                              $krep8_r9FuV];

$krep10_r9FuX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r9FuO GHC.Types.[]];

$krep11_r9FuY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'[]
                                              $krep10_r9FuX];

$krep12_r9FuZ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r9FuY GHC.Types.[]];

$krep13_r9Fv0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'TupleRep
                                              $krep12_r9FuZ];

$krep14_r9Fv1 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r9FuW $krep5_r9FuS];

$krep15_r9Fv2 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r9FuN $krep14_r9Fv1];

$krep16_r9Fv3 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r9Fv0 $krep15_r9Fv2];

$krep17_r9Fv4 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc(#,#)
                                              $krep16_r9Fv3];

$krep18_r9Fv5 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r9FuW $krep17_r9Fv4];

GHC.Conc.Sync.$tcThreadId2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadId"#;

GHC.Conc.Sync.$tcThreadId1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcThreadId2];

GHC.Conc.Sync.$tcThreadId :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16775948407395805744##
                                    12520674293648100702##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcThreadId1
                                    0#
                                    GHC.Types.krep$*];

$krep19_r9Fv6 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcThreadId
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'ThreadId1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r9FuR $krep19_r9Fv6];

GHC.Conc.Sync.$tc'ThreadId3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadId"#;

GHC.Conc.Sync.$tc'ThreadId2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadId3];

GHC.Conc.Sync.$tc'ThreadId :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18342150043682338300##
                                    5104860271509165481##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadId2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadId1];

GHC.Conc.Sync.$tcBlockReason2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockReason"#;

GHC.Conc.Sync.$tcBlockReason1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcBlockReason2];

GHC.Conc.Sync.$tcBlockReason :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13301038780413995570##
                                    11021250300446969031##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcBlockReason1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tc'BlockedOnBlackHole1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcBlockReason
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'BlockedOnMVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnMVar"#;

GHC.Conc.Sync.$tc'BlockedOnMVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnMVar2];

GHC.Conc.Sync.$tc'BlockedOnMVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6633002816895506850##
                                    13520604374172074732##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnMVar1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnBlackHole3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnBlackHole"#;

GHC.Conc.Sync.$tc'BlockedOnBlackHole2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnBlackHole3];

GHC.Conc.Sync.$tc'BlockedOnBlackHole :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9499731398899925739##
                                    7296688042620961692##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole2
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnException2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnException"#;

GHC.Conc.Sync.$tc'BlockedOnException1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnException2];

GHC.Conc.Sync.$tc'BlockedOnException :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16834505563200403543##
                                    10899729493106152581##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnException1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnSTM2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnSTM"#;

GHC.Conc.Sync.$tc'BlockedOnSTM1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnSTM2];

GHC.Conc.Sync.$tc'BlockedOnSTM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1161208048218837616##
                                    14246412223428266787##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnSTM1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnForeignCall2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnForeignCall"#;

GHC.Conc.Sync.$tc'BlockedOnForeignCall1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnForeignCall2];

GHC.Conc.Sync.$tc'BlockedOnForeignCall :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7408412473094687054##
                                    5512662453084487661##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnForeignCall1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnOther2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnOther"#;

GHC.Conc.Sync.$tc'BlockedOnOther1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnOther2];

GHC.Conc.Sync.$tc'BlockedOnOther :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12822899422417308746##
                                    1265626399802742388##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnOther1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tcThreadStatus2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadStatus"#;

GHC.Conc.Sync.$tcThreadStatus1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcThreadStatus2];

GHC.Conc.Sync.$tcThreadStatus :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16437204929171641638##
                                    3495092226815585861##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcThreadStatus1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tc'ThreadDied1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcThreadStatus
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'ThreadRunning2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadRunning"#;

GHC.Conc.Sync.$tc'ThreadRunning1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadRunning2];

GHC.Conc.Sync.$tc'ThreadRunning :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1667122312602609882##
                                    13647871799576313560##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadRunning1
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadFinished2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadFinished"#;

GHC.Conc.Sync.$tc'ThreadFinished1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadFinished2];

GHC.Conc.Sync.$tc'ThreadFinished :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2441107603776884109##
                                    12730966154693836607##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadFinished1
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadDied3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadDied"#;

GHC.Conc.Sync.$tc'ThreadDied2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadDied3];

GHC.Conc.Sync.$tc'ThreadDied :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9513974555658789847##
                                    4757719484357493227##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadDied2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadBlocked1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Conc.Sync.$tc'BlockedOnBlackHole1
                                         GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadBlocked3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadBlocked"#;

GHC.Conc.Sync.$tc'ThreadBlocked2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadBlocked3];

GHC.Conc.Sync.$tc'ThreadBlocked :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1896650886570328403##
                                    13390928353603149841##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadBlocked2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadBlocked1];

GHC.Conc.Sync.$tcPrimMVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrimMVar"#;

GHC.Conc.Sync.$tcPrimMVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcPrimMVar2];

GHC.Conc.Sync.$tcPrimMVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9965391380168186507##
                                    18322737771689556223##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcPrimMVar1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tcSTM2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STM"#;

GHC.Conc.Sync.$tcSTM1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcSTM2];

GHC.Conc.Sync.$tcSTM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2004856025729794332##
                                    14974623362753764267##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcSTM1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep20_r9Fv7 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcSTM
                                              $krep5_r9FuS];

GHC.Conc.Sync.$tc'STM1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r9Fv5 $krep20_r9Fv7];

GHC.Conc.Sync.$tc'STM3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'STM"#;

GHC.Conc.Sync.$tc'STM2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'STM3];

GHC.Conc.Sync.$tc'STM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11288073744523536973##
                                    9767688212531311940##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'STM2
                                    1#
                                    GHC.Conc.Sync.$tc'STM1];

GHC.Conc.Sync.$tcTVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TVar"#;

GHC.Conc.Sync.$tcTVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcTVar2];

GHC.Conc.Sync.$tcTVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13084572405727191592##
                                    5232564955606145236##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcTVar1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep21_r9Fv8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcTVar
                                              $krep5_r9FuS];

GHC.Conc.Sync.$tc'TVar1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r9FuU $krep21_r9Fv8];

GHC.Conc.Sync.$tc'TVar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TVar"#;

GHC.Conc.Sync.$tc'TVar2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'TVar3];

GHC.Conc.Sync.$tc'TVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9463269625853265574##
                                    3517068532143837766##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'TVar2
                                    1#
                                    GHC.Conc.Sync.$tc'TVar1];

GHC.Conc.Sync.$fShowThreadId2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadId "#;

GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
  :: GHC.Types.Int -> GHC.Conc.Sync.ThreadId -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(U)><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [d_s9LYy t_s9LYz]
        let {
          x_s9LYA [Occ=OnceL, Dmd=<L,U(U)>] :: Foreign.C.Types.CInt
          [LclId] =
              [t_s9LYz] \u []
                  case t_s9LYz of {
                    GHC.Conc.Sync.ThreadId t1_s9LYC [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t1_s9LYC GHC.Prim.realWorld#] of {
                          (#,#) _ [Occ=Dead] ds1_s9LYG [Occ=Once] ->
                              case narrow32Int# [ds1_s9LYG] of sat_s9LYH {
                                __DEFAULT -> GHC.Int.I32# [sat_s9LYH];
                              };
                        };
                  }; } in
        let {
          sat_s9LYR [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [d_s9LYy x_s9LYA] \r [x1_s9LYI]
                  let {
                    sat_s9LYQ [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [d_s9LYy x_s9LYA x1_s9LYI] \u []
                            case x_s9LYA of {
                              GHC.Int.I32# x#_s9LYK [Occ=Once] ->
                                  case d_s9LYy of {
                                    GHC.Types.I# ww1_s9LYM [Occ=Once] ->
                                        case
                                            GHC.Show.$wshowSignedInt ww1_s9LYM x#_s9LYK x1_s9LYI
                                        of
                                        { (#,#) ww5_s9LYO [Occ=Once] ww6_s9LYP [Occ=Once] ->
                                              : [ww5_s9LYO ww6_s9LYP];
                                        };
                                  };
                            };
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.Conc.Sync.$fShowThreadId2 sat_s9LYQ;
        } in  sat_s9LYR;

GHC.Conc.Sync.$fShowThreadId_$cshow
  :: GHC.Conc.Sync.ThreadId -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [x_s9LYS]
        let {
          sat_s9LZ3 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_s9LYS] \u []
                  case x_s9LYS of {
                    GHC.Conc.Sync.ThreadId t_s9LYU [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t_s9LYU GHC.Prim.realWorld#] of {
                          (#,#) _ [Occ=Dead] ds1_s9LYY [Occ=Once] ->
                              case narrow32Int# [ds1_s9LYY] of sat_s9LYZ {
                                __DEFAULT ->
                                    case GHC.Show.$wshowSignedInt 0# sat_s9LYZ GHC.Types.[] of {
                                      (#,#) ww5_s9LZ1 [Occ=Once] ww6_s9LZ2 [Occ=Once] ->
                                          : [ww5_s9LZ1 ww6_s9LZ2];
                                    };
                              };
                        };
                  };
        } in 
          GHC.CString.unpackAppendCString#
              GHC.Conc.Sync.$fShowThreadId2 sat_s9LZ3;

GHC.Conc.Sync.$fShowThreadId1
  :: GHC.Conc.Sync.ThreadId -> GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [t_s9LZ4]
        let {
          x_s9LZ5 [Occ=OnceL, Dmd=<L,U(U)>] :: Foreign.C.Types.CInt
          [LclId] =
              [t_s9LZ4] \u []
                  case t_s9LZ4 of {
                    GHC.Conc.Sync.ThreadId t1_s9LZ7 [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t1_s9LZ7 GHC.Prim.realWorld#] of {
                          (#,#) _ [Occ=Dead] ds1_s9LZb [Occ=Once] ->
                              case narrow32Int# [ds1_s9LZb] of sat_s9LZc {
                                __DEFAULT -> GHC.Int.I32# [sat_s9LZc];
                              };
                        };
                  }; } in
        let {
          sat_s9LZk [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [x_s9LZ5] \r [x1_s9LZd]
                  let {
                    sat_s9LZj [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [x_s9LZ5 x1_s9LZd] \u []
                            case x_s9LZ5 of {
                              GHC.Int.I32# x#_s9LZf [Occ=Once] ->
                                  case GHC.Show.$wshowSignedInt 0# x#_s9LZf x1_s9LZd of {
                                    (#,#) ww5_s9LZh [Occ=Once] ww6_s9LZi [Occ=Once] ->
                                        : [ww5_s9LZh ww6_s9LZi];
                                  };
                            };
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.Conc.Sync.$fShowThreadId2 sat_s9LZj;
        } in  sat_s9LZk;

GHC.Conc.Sync.$fShowThreadId_$cshowList
  :: [GHC.Conc.Sync.ThreadId] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s9LZl s_s9LZm]
        GHC.Show.showList__ GHC.Conc.Sync.$fShowThreadId1 ls_s9LZl s_s9LZm;

GHC.Conc.Sync.$fShowThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
                                    GHC.Conc.Sync.$fShowThreadId_$cshow
                                    GHC.Conc.Sync.$fShowThreadId_$cshowList];

reportHeapOverflow1_r9Fv9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s9LZn]
        case __pkg_ccall base-4.11.0.0 [ds_s9LZn] of {
          Unit# ds1_s9LZq [Occ=Once] -> (#,#) [ds1_s9LZq GHC.Tuple.()];
        };

GHC.Conc.Sync.reportHeapOverflow :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] reportHeapOverflow1_r9Fv9 eta_B1;

GHC.Conc.Sync.cmpThread
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [t1_s9LZr t2_s9LZs]
        case t2_s9LZs of {
          GHC.Conc.Sync.ThreadId t_s9LZu [Occ=Once] ->
              case t1_s9LZr of {
                GHC.Conc.Sync.ThreadId t4_s9LZw [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t4_s9LZw t_s9LZu GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9LZA [Occ=Once] ->
                          case narrow32Int# [ds1_s9LZA] of {
                            __DEFAULT -> GHC.Types.GT [];
                            -1# -> GHC.Types.LT [];
                            0# -> GHC.Types.EQ [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId_$c==
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [t1_s9LZC t2_s9LZD]
        case t2_s9LZD of {
          GHC.Conc.Sync.ThreadId t_s9LZF [Occ=Once] ->
              case t1_s9LZC of {
                GHC.Conc.Sync.ThreadId t4_s9LZH [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t4_s9LZH t_s9LZF GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9LZL [Occ=Once] ->
                          case narrow32Int# [ds1_s9LZL] of {
                            __DEFAULT -> GHC.Types.False [];
                            0# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s9LZN eta1_s9LZO]
        case eta1_s9LZO of {
          GHC.Conc.Sync.ThreadId t_s9LZQ [Occ=Once] ->
              case eta_s9LZN of {
                GHC.Conc.Sync.ThreadId t1_s9LZS [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9LZS t_s9LZQ GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9LZW [Occ=Once] ->
                          case narrow32Int# [ds1_s9LZW] of {
                            __DEFAULT -> GHC.Types.True [];
                            0# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqThreadId_$c==
                                     GHC.Conc.Sync.$fEqThreadId_$c/=];

GHC.Conc.Sync.$fOrdThreadId_$c<
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9LZY y_s9LZZ]
        case y_s9LZZ of {
          GHC.Conc.Sync.ThreadId t_s9M01 [Occ=Once] ->
              case x_s9LZY of {
                GHC.Conc.Sync.ThreadId t1_s9M03 [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M03 t_s9M01 GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9M07 [Occ=Once] ->
                          case narrow32Int# [ds1_s9M07] of {
                            __DEFAULT -> GHC.Types.False [];
                            -1# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c>=
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9M09 y_s9M0a]
        case y_s9M0a of {
          GHC.Conc.Sync.ThreadId t_s9M0c [Occ=Once] ->
              case x_s9M09 of {
                GHC.Conc.Sync.ThreadId t1_s9M0e [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M0e t_s9M0c GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9M0i [Occ=Once] ->
                          case narrow32Int# [ds1_s9M0i] of {
                            __DEFAULT -> GHC.Types.True [];
                            -1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c>
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9M0k y_s9M0l]
        case y_s9M0l of {
          GHC.Conc.Sync.ThreadId t_s9M0n [Occ=Once] ->
              case x_s9M0k of {
                GHC.Conc.Sync.ThreadId t1_s9M0p [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M0p t_s9M0n GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9M0t [Occ=Once] ->
                          case narrow32Int# [ds1_s9M0t] of {
                            __DEFAULT -> GHC.Types.True [];
                            -1# -> GHC.Types.False [];
                            0# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c<=
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9M0v y_s9M0w]
        case y_s9M0w of {
          GHC.Conc.Sync.ThreadId t_s9M0y [Occ=Once] ->
              case x_s9M0v of {
                GHC.Conc.Sync.ThreadId t1_s9M0A [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M0A t_s9M0y GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9M0E [Occ=Once] ->
                          case narrow32Int# [ds1_s9M0E] of {
                            __DEFAULT -> GHC.Types.False [];
                            -1# -> GHC.Types.True [];
                            0# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$cmax
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Conc.Sync.ThreadId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s9M0G y_s9M0H]
        case y_s9M0H of wild_s9M0I {
          GHC.Conc.Sync.ThreadId t_s9M0J [Occ=Once] ->
              case x_s9M0G of wild1_s9M0K {
                GHC.Conc.Sync.ThreadId t1_s9M0L [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M0L t_s9M0J GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9M0P [Occ=Once] ->
                          case narrow32Int# [ds1_s9M0P] of {
                            __DEFAULT -> wild1_s9M0K;
                            -1# -> wild_s9M0I;
                            0# -> wild_s9M0I;
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$cmin
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Conc.Sync.ThreadId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s9M0R y_s9M0S]
        case y_s9M0S of wild_s9M0T {
          GHC.Conc.Sync.ThreadId t_s9M0U [Occ=Once] ->
              case x_s9M0R of wild1_s9M0V {
                GHC.Conc.Sync.ThreadId t1_s9M0W [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M0W t_s9M0U GHC.Prim.realWorld#]
                    of
                    { (#,#) _ [Occ=Dead] ds1_s9M10 [Occ=Once] ->
                          case narrow32Int# [ds1_s9M10] of {
                            __DEFAULT -> wild_s9M0T;
                            -1# -> wild1_s9M0V;
                            0# -> wild1_s9M0V;
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqThreadId
                                      GHC.Conc.Sync.cmpThread
                                      GHC.Conc.Sync.$fOrdThreadId_$c<
                                      GHC.Conc.Sync.$fOrdThreadId_$c<=
                                      GHC.Conc.Sync.$fOrdThreadId_$c>
                                      GHC.Conc.Sync.$fOrdThreadId_$c>=
                                      GHC.Conc.Sync.$fOrdThreadId_$cmax
                                      GHC.Conc.Sync.$fOrdThreadId_$cmin];

GHC.Conc.Sync.$fShowThreadStatus10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadRunning"#;

GHC.Conc.Sync.$fShowThreadStatus9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus10;

GHC.Conc.Sync.$fShowThreadStatus8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadFinished"#;

GHC.Conc.Sync.$fShowThreadStatus7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus8;

GHC.Conc.Sync.$fShowThreadStatus6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadBlocked "#;

GHC.Conc.Sync.$fShowThreadStatus5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus6;

GHC.Conc.Sync.$fShowThreadStatus4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadDied"#;

GHC.Conc.Sync.$fShowThreadStatus3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus4;

GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
  :: GHC.Types.Int -> GHC.Conc.Sync.ThreadStatus -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,1*U(U)><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s9M12 ds1_s9M13 eta_s9M14]
        case ds1_s9M13 of {
          GHC.Conc.Sync.ThreadRunning ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus9 eta_s9M14;
          GHC.Conc.Sync.ThreadFinished ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus7 eta_s9M14;
          GHC.Conc.Sync.ThreadBlocked b1_s9M16 [Occ=Once*] ->
              case ds_s9M12 of {
                GHC.Types.I# x_s9M18 [Occ=Once] ->
                    case >=# [x_s9M18 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s9M1a [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [eta_s9M14 b1_s9M16] \s []
                                    GHC.Conc.Sync.$w$cshowsPrec b1_s9M16 eta_s9M14;
                          } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9M1a;
                      1# ->
                          let {
                            sat_s9M1d [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [eta_s9M14 b1_s9M16] \u []
                                    let {
                                      sat_s9M1c [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          [eta_s9M14 b1_s9M16] \s []
                                              let {
                                                sat_s9M1b [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)2 eta_s9M14];
                                              } in  GHC.Conc.Sync.$w$cshowsPrec b1_s9M16 sat_s9M1b;
                                    } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9M1c;
                          } in  : [GHC.Show.$fShow(,)4 sat_s9M1d];
                    };
              };
          GHC.Conc.Sync.ThreadDied ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus3 eta_s9M14;
        };

GHC.Conc.Sync.$fShowThreadStatus_$cshow
  :: GHC.Conc.Sync.ThreadStatus -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9M1e]
        case x_s9M1e of {
          GHC.Conc.Sync.ThreadRunning -> GHC.Conc.Sync.$fShowThreadStatus9;
          GHC.Conc.Sync.ThreadFinished -> GHC.Conc.Sync.$fShowThreadStatus7;
          GHC.Conc.Sync.ThreadBlocked b1_s9M1g [Occ=Once] ->
              let {
                sat_s9M1h [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s9M1g] \s [] GHC.Conc.Sync.$w$cshowsPrec b1_s9M1g GHC.Types.[];
              } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9M1h;
          GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.$fShowThreadStatus3;
        };

GHC.Conc.Sync.$fShowThreadStatus2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Conc.Sync.$fShowThreadStatus1
  :: GHC.Conc.Sync.ThreadStatus -> GHC.Show.ShowS
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
            GHC.Conc.Sync.$fShowThreadStatus2 eta_B2 eta_B1;

GHC.Conc.Sync.$fShowThreadStatus_$cshowList
  :: [GHC.Conc.Sync.ThreadStatus] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9M1i s_s9M1j]
        GHC.Show.showList__
            GHC.Conc.Sync.$fShowThreadStatus1 ls_s9M1i s_s9M1j;

GHC.Conc.Sync.$fShowThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
                                    GHC.Conc.Sync.$fShowThreadStatus_$cshow
                                    GHC.Conc.Sync.$fShowThreadStatus_$cshowList];

GHC.Conc.Sync.killThread2 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionAsyncException_$ctoException
            GHC.IO.Exception.ThreadKilled;

GHC.Conc.Sync.killThread1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [tid_s9M1k eta_s9M1l]
        case tid_s9M1k of {
          GHC.Conc.Sync.ThreadId tid1_s9M1n [Occ=Once] ->
              case
                  killThread# [tid1_s9M1n GHC.Conc.Sync.killThread2 eta_s9M1l]
              of
              s1_s9M1o
              { __DEFAULT -> (#,#) [s1_s9M1o GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.killThread
  :: GHC.Conc.Sync.ThreadId -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.killThread1 eta_B2 eta_B1;

GHC.Conc.Sync.getNumProcessors1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9M1p]
        case __pkg_ccall base-4.11.0.0 [s_s9M1p] of {
          (#,#) ds_s9M1s [Occ=Once] ds1_s9M1t [Occ=Once] ->
              case narrow32Word# [ds1_s9M1t] of sat_s9M1u {
                __DEFAULT ->
                    case word2Int# [sat_s9M1u] of sat_s9M1v {
                      __DEFAULT ->
                          let {
                            sat_s9M1w [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Types.I#! [sat_s9M1v];
                          } in  (#,#) [ds_s9M1s sat_s9M1w];
                    };
              };
        };

GHC.Conc.Sync.getNumProcessors :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.getNumProcessors1 eta_B1;

GHC.Conc.Sync.threadStatus7 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnOther];

GHC.Conc.Sync.threadStatus6 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnMVar];

GHC.Conc.Sync.threadStatus2 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnException];

GHC.Conc.Sync.threadStatus3 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnForeignCall];

GHC.Conc.Sync.threadStatus4 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnSTM];

GHC.Conc.Sync.threadStatus5 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnBlackHole];

GHC.Conc.Sync.$wthreadStatus [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Conc.Sync.ThreadStatus #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s9M1x w_s9M1y]
        case threadStatus# [ww_s9M1x w_s9M1y] of {
          (#,,,#) ipv_s9M1A [Occ=Once]
                  ipv1_s9M1B [Occ=Once!]
                  _ [Occ=Dead]
                  _ [Occ=Dead] ->
              let {
                sat_s9M1F [Occ=Once] :: GHC.Conc.Sync.ThreadStatus
                [LclId] =
                    [ipv1_s9M1B] \u []
                        case ipv1_s9M1B of {
                          __DEFAULT -> GHC.Conc.Sync.threadStatus7;
                          0# -> GHC.Conc.Sync.ThreadRunning [];
                          1# -> GHC.Conc.Sync.threadStatus6;
                          2# -> GHC.Conc.Sync.threadStatus5;
                          6# -> GHC.Conc.Sync.threadStatus4;
                          10# -> GHC.Conc.Sync.threadStatus3;
                          11# -> GHC.Conc.Sync.threadStatus3;
                          12# -> GHC.Conc.Sync.threadStatus2;
                          14# -> GHC.Conc.Sync.threadStatus6;
                          16# -> GHC.Conc.Sync.ThreadFinished [];
                          17# -> GHC.Conc.Sync.ThreadDied [];
                        };
              } in  (#,#) [ipv_s9M1A sat_s9M1F];
        };

GHC.Conc.Sync.threadStatus1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Conc.Sync.ThreadStatus #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9M1G w1_s9M1H]
        case w_s9M1G of {
          GHC.Conc.Sync.ThreadId ww1_s9M1J [Occ=Once] ->
              GHC.Conc.Sync.$wthreadStatus ww1_s9M1J w1_s9M1H;
        };

GHC.Conc.Sync.threadStatus
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.threadStatus1 eta_B2 eta_B1;

GHC.Conc.Sync.$fFunctorSTM2
  :: forall a b.
     (a -> b)
     -> GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><C(S(SL)),1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [f_s9M1K x_s9M1L s_s9M1M]
        case x_s9M1L s_s9M1M of {
          (#,#) ipv_s9M1O [Occ=Once] ipv1_s9M1P [Occ=Once] ->
              let {
                sat_s9M1Q [Occ=Once] :: b_a9Da0
                [LclId] =
                    [f_s9M1K ipv1_s9M1P] \u [] f_s9M1K ipv1_s9M1P;
              } in  (#,#) [ipv_s9M1O sat_s9M1Q];
        };

GHC.Conc.Sync.$fFunctorSTM1
  :: forall a b.
     a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(S(SL)),1*C1(U(U,A))><S,U>,
 Unf=OtherCon []] =
    [] \r [x_s9M1R eta_s9M1S eta1_s9M1T]
        case eta_s9M1S eta1_s9M1T of {
          (#,#) ipv_s9M1V [Occ=Once] _ [Occ=Dead] ->
              (#,#) [ipv_s9M1V x_s9M1R];
        };

GHC.Conc.Sync.$fApplicativeSTM2
  :: forall b a.
     GHC.Conc.Sync.STM (a -> b)
     -> GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,1*C1(U)))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [m1_s9M1X m2_s9M1Y s_s9M1Z]
        case m1_s9M1X s_s9M1Z of {
          (#,#) ipv_s9M21 [Occ=Once] ipv1_s9M22 [Occ=Once!] ->
              case m2_s9M1Y ipv_s9M21 of {
                (#,#) ipv2_s9M24 [Occ=Once] ipv3_s9M25 [Occ=Once] ->
                    let {
                      sat_s9M26 [Occ=Once] :: b_a9D90
                      [LclId] =
                          [ipv1_s9M22 ipv3_s9M25] \u [] ipv1_s9M22 ipv3_s9M25;
                    } in  (#,#) [ipv2_s9M24 sat_s9M26];
              };
        };

$cliftA2_r9Fva
  :: forall c b a.
     (a -> b -> c)
     -> GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, c #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [f_s9M27 m1_s9M28 m2_s9M29 s_s9M2a]
        case m1_s9M28 s_s9M2a of {
          (#,#) ipv_s9M2c [Occ=Once] ipv1_s9M2d [Occ=Once] ->
              case m2_s9M29 ipv_s9M2c of {
                (#,#) ipv2_s9M2f [Occ=Once] ipv3_s9M2g [Occ=Once] ->
                    let {
                      sat_s9M2h [Occ=Once] :: c_a9D9j
                      [LclId] =
                          [f_s9M27 ipv1_s9M2d ipv3_s9M2g] \u []
                              f_s9M27 ipv1_s9M2d ipv3_s9M2g;
                    } in  (#,#) [ipv2_s9M2f sat_s9M2h];
              };
        };

GHC.Conc.Sync.$fApplicativeSTM_$cliftA2 [InlPrag=INLINE (sat-args=0)]
  :: forall a b c.
     (a -> b -> c)
     -> GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Conc.Sync.STM c
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $cliftA2_r9Fva eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.$fApplicativeSTM1
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,A))><S,U>,
 Unf=OtherCon []] =
    [] \r [m1_s9M2i m2_s9M2j s_s9M2k]
        case m1_s9M2i s_s9M2k of {
          (#,#) ipv_s9M2m [Occ=Once] ipv1_s9M2n [Occ=Once] ->
              case m2_s9M2j ipv_s9M2m of {
                (#,#) ipv2_s9M2p [Occ=Once] _ [Occ=Dead] ->
                    (#,#) [ipv2_s9M2p ipv1_s9M2n];
              };
        };

GHC.Conc.Sync.$fFunctorSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor GHC.Conc.Sync.STM
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [GHC.Conc.Sync.$fFunctorSTM2
                                       GHC.Conc.Sync.$fFunctorSTM1];

GHC.Conc.Sync.$fApplicativeSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [GHC.Conc.Sync.$fFunctorSTM
                                           GHC.Conc.Sync.$fApplicativeSTM_$cpure
                                           GHC.Conc.Sync.$fApplicativeSTM2
                                           GHC.Conc.Sync.$fApplicativeSTM_$cliftA2
                                           GHC.Conc.Sync.$fApplicativeSTM_$c*>
                                           GHC.Conc.Sync.$fApplicativeSTM1];

lvl_r9Fvb :: forall a. [GHC.Types.Char] -> GHC.Conc.Sync.STM a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s9M2r] GHC.Err.errorWithoutStackTrace eta_s9M2r;

GHC.Conc.Sync.$fMonadSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [GHC.Conc.Sync.$fApplicativeSTM
                                     GHC.Conc.Sync.$fMonadSTM_$c>>=
                                     GHC.Conc.Sync.$fApplicativeSTM_$c*>
                                     GHC.Conc.Sync.$fApplicativeSTM_$cpure
                                     lvl_r9Fvb];

GHC.Conc.Sync.always2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9M2s] (#,#) [s_s9M2s GHC.Tuple.()];

GHC.Conc.Sync.alwaysSucceeds1
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<xB,U><S,U>, Unf=OtherCon []] =
    [] \r [i_s9M2t eta_s9M2u]
        let {
          sat_s9M2z [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [i_s9M2t] \r [s_s9M2v]
                  case i_s9M2t s_s9M2v of {
                    (#,#) ipv_s9M2x [Occ=Once] _ [Occ=Dead] -> retry# [ipv_s9M2x];
                  };
        } in 
          case catchRetry# [sat_s9M2z GHC.Conc.Sync.always2 eta_s9M2u] of {
            (#,#) ipv_s9M2B [Occ=Once] _ [Occ=Dead] ->
                case check# [i_s9M2t ipv_s9M2B] of s'_s9M2D {
                  __DEFAULT -> (#,#) [s'_s9M2D GHC.Tuple.()];
                };
          };

GHC.Conc.Sync.alwaysSucceeds
  :: forall a. GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<xB,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.alwaysSucceeds1 eta_B2 eta_B1;

GHC.Conc.Sync.$fAlternativeSTM2
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9M2E] (#,#) [s_s9M2E GHC.Types.[]];

GHC.Conc.Sync.$fAlternativeSTM3
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S(SL)),C(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [v_s9M2F eta_s9M2G]
        let {
          some_v_s9M2H [Occ=LoopBreaker]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7E] #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              [v_s9M2F some_v_s9M2H] \r [s_s9M2I]
                  case v_s9M2F s_s9M2I of {
                    (#,#) ipv_s9M2K [Occ=Once] ipv1_s9M2L [Occ=Once] ->
                        case
                            catchRetry# [some_v_s9M2H
                                         GHC.Conc.Sync.$fAlternativeSTM2
                                         ipv_s9M2K]
                        of
                        { (#,#) ipv2_s9M2N [Occ=Once] ipv3_s9M2O [Occ=Once] ->
                              let {
                                sat_s9M2P [Occ=Once] :: [a_a9D7E]
                                [LclId] =
                                    CCCS :! [ipv1_s9M2L ipv3_s9M2O];
                              } in  (#,#) [ipv2_s9M2N sat_s9M2P];
                        };
                  };
        } in  some_v_s9M2H eta_s9M2G;

GHC.Conc.Sync.$fAlternativeSTM1
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [v_s9M2Q eta_s9M2R]
        let {
          many_v_s9M2S [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7Q] #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              [v_s9M2Q many_v1_s9M2T] \r [s_s9M2U]
                  case v_s9M2Q s_s9M2U of {
                    (#,#) ipv_s9M2W [Occ=Once] ipv1_s9M2X [Occ=Once] ->
                        case many_v1_s9M2T ipv_s9M2W of {
                          (#,#) ipv2_s9M2Z [Occ=Once] ipv3_s9M30 [Occ=Once] ->
                              let {
                                sat_s9M31 [Occ=Once] :: [a_a9D7Q]
                                [LclId] =
                                    CCCS :! [ipv1_s9M2X ipv3_s9M30];
                              } in  (#,#) [ipv2_s9M2Z sat_s9M31];
                        };
                  };
          many_v1_s9M2T [Occ=LoopBreaker]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7Q] #)
          [LclId, Arity=1, Unf=OtherCon []] =
              sat-only [many_v_s9M2S] \r [eta_B1]
                  catchRetry# [many_v_s9M2S GHC.Conc.Sync.$fAlternativeSTM2 eta_B1];
        } in  many_v1_s9M2T eta_s9M2R;

sat_s9M33
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B3 eta_B2 eta_B1] catchRetry# [eta_B3 eta_B2 eta_B1];

sat_s9M32 :: forall a. GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B1] retry# [eta_B1];

GHC.Conc.Sync.$fAlternativeSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Alternative GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Alternative! [GHC.Conc.Sync.$fApplicativeSTM
                                           sat_s9M32
                                           sat_s9M33
                                           GHC.Conc.Sync.$fAlternativeSTM3
                                           GHC.Conc.Sync.$fAlternativeSTM1];

sat_s9M35
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B3 eta_B2 eta_B1] catchRetry# [eta_B3 eta_B2 eta_B1];

sat_s9M34 :: forall a. GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B1] retry# [eta_B1];

GHC.Conc.Sync.$fMonadPlusSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.MonadPlus GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:MonadPlus! [GHC.Conc.Sync.$fAlternativeSTM
                                         GHC.Conc.Sync.$fMonadSTM
                                         sat_s9M34
                                         sat_s9M35];

lvl1_r9Fvc :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Transactional invariant violation"#;

GHC.Conc.Sync.always3 :: GHC.Conc.Sync.STM ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl1_r9Fvc of sat_s9M36 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s9M36;
        };

GHC.Conc.Sync.always1
  :: GHC.Conc.Sync.STM GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<xB,C(U(U,1*U))><S,U>, Unf=OtherCon []] =
    [] \r [i_s9M37 eta_s9M38]
        let {
          sat_s9M3f [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [i_s9M37] \r [s_s9M39]
                  case i_s9M37 s_s9M39 of {
                    (#,#) ipv_s9M3b [Occ=Once] ipv1_s9M3c [Occ=Once!] ->
                        case ipv1_s9M3c of {
                          GHC.Types.False -> GHC.Conc.Sync.always3;
                          GHC.Types.True -> retry# [ipv_s9M3b];
                        };
                  };
        } in 
          case catchRetry# [sat_s9M3f GHC.Conc.Sync.always2 eta_s9M38] of {
            (#,#) ipv_s9M3h [Occ=Once] _ [Occ=Dead] ->
                let {
                  sat_s9M3p [Occ=Once]
                    :: GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                  [LclId] =
                      [i_s9M37] \r [s_s9M3j]
                          case i_s9M37 s_s9M3j of {
                            (#,#) ipv2_s9M3l [Occ=Once] ipv3_s9M3m [Occ=Once!] ->
                                case ipv3_s9M3m of {
                                  GHC.Types.False -> GHC.Conc.Sync.always3;
                                  GHC.Types.True -> (#,#) [ipv2_s9M3l GHC.Tuple.()];
                                };
                          };
                } in 
                  case check# [sat_s9M3p ipv_s9M3h] of s'_s9M3q {
                    __DEFAULT -> (#,#) [s'_s9M3q GHC.Tuple.()];
                  };
          };

GHC.Conc.Sync.always
  :: GHC.Conc.Sync.STM GHC.Types.Bool -> GHC.Conc.Sync.STM ()
[GblId, Arity=2, Str=<xB,C(U(U,1*U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.always1 eta_B2 eta_B1;

lvl2_r9Fvd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "no threads to run:  infinite loop or deadlock?"#;

lvl3_r9Fve :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_r9Fvd;

lvl4_r9Fvf
  :: Data.Typeable.Internal.TypeRep GHC.IO.Exception.Deadlock
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                18363794241794644491##
                11186984538024031318##
                GHC.IO.Exception.$trModule
                GHC.IO.Exception.$fExceptionDeadlock4
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9M3s [Occ=Once]
                   ww9_s9M3t [Occ=Once]
                   ww10_s9M3u [Occ=Once]
                   ww11_s9M3v [Occ=Once]
                   ww12_s9M3w [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_s9M3s
                                              ww9_s9M3t
                                              ww10_s9M3u
                                              ww11_s9M3v
                                              ww12_s9M3w];
        };

lvl5_r9Fvg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s"#;

lvl6_r9Fvh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_r9Fvg;

lvl7_r9Fvi
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds1_s9M3x eta_s9M3y]
        case ds1_s9M3x of {
          GHC.Exception.SomeException _ [Occ=Dead] _ [Occ=Dead] ->
              (#,#) [eta_s9M3y GHC.Tuple.()];
        };

lvl8_r9Fvj :: GHC.Types.IO ()
[GblId] =
    [] \u [] GHC.IO.Handle.hFlush GHC.IO.Handle.FD.stdout;

lvl9_r9Fvk
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [se_s9M3C eta_s9M3D]
        case se_s9M3C of {
          GHC.Exception.SomeException $dException_s9M3F
                                      ex_s9M3G [Occ=Once*] ->
              case lvl8_r9Fvj of io_s9M3H {
                __DEFAULT ->
                    case catch# [io_s9M3H lvl7_r9Fvi eta_s9M3D] of {
                      (#,#) ipv_s9M3J [Occ=Once] _ [Occ=Dead] ->
                          case GHC.IO.Encoding.getForeignEncoding ipv_s9M3J of {
                            (#,#) ipv2_s9M3M [Occ=Once] ipv3_s9M3N [Occ=Once] ->
                                let {
                                  msg_s9M3O [Occ=OnceL] :: [GHC.Types.Char]
                                  [LclId] =
                                      [$dException_s9M3F ex_s9M3G] \u []
                                          case
                                              GHC.Exception.$p1Exception $dException_s9M3F
                                          of
                                          sat_s9M3P
                                          { __DEFAULT ->
                                                case
                                                    Data.Typeable.Internal.sameTypeRep
                                                        sat_s9M3P lvl4_r9Fvf
                                                of
                                                { GHC.Types.False ->
                                                      case
                                                          GHC.Exception.$p2Exception
                                                              $dException_s9M3F
                                                      of
                                                      sat_s9M3R
                                                      { __DEFAULT ->
                                                            GHC.Show.showsPrec
                                                                sat_s9M3R
                                                                GHC.Conc.Sync.$fShowThreadStatus2
                                                                ex_s9M3G
                                                                GHC.Types.[];
                                                      };
                                                  GHC.Types.True ->
                                                      case ex_s9M3G of {
                                                        GHC.IO.Exception.Deadlock -> lvl3_r9Fve;
                                                      };
                                                };
                                          }; } in
                                let {
                                  sat_s9M48 [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                                  [LclId] =
                                      [msg_s9M3O] \r [cfmt_s9M3T s1_s9M3U]
                                          case GHC.IO.Encoding.getForeignEncoding s1_s9M3U of {
                                            (#,#) ipv4_s9M3W [Occ=Once] ipv5_s9M3X [Occ=Once] ->
                                                let {
                                                  sat_s9M47 [Occ=Once]
                                                    :: GHC.Foreign.CString -> GHC.Types.IO ()
                                                  [LclId] =
                                                      [cfmt_s9M3T] \r [cmsg_s9M3Y eta1_s9M3Z]
                                                          case cfmt_s9M3T of {
                                                            GHC.Ptr.Ptr ds4_s9M41 [Occ=Once] ->
                                                                case cmsg_s9M3Y of {
                                                                  GHC.Ptr.Ptr ds6_s9M43 [Occ=Once] ->
                                                                      case
                                                                          __pkg_ccall base-4.11.0.0 [ds4_s9M41
                                                                                                     ds6_s9M43
                                                                                                     eta1_s9M3Z]
                                                                      of
                                                                      { Unit# ds7_s9M46 [Occ=Once] ->
                                                                            (#,#) [ds7_s9M46
                                                                                   GHC.Tuple.()];
                                                                      };
                                                                };
                                                          };
                                                } in 
                                                  GHC.Foreign.charIsRepresentable3
                                                      ipv5_s9M3X msg_s9M3O sat_s9M47 ipv4_s9M3W;
                                          };
                                } in 
                                  GHC.Foreign.charIsRepresentable3
                                      ipv3_s9M3N lvl6_r9Fvh sat_s9M48 ipv2_s9M3M;
                          };
                    };
              };
        };

lvl10_r9Fvl
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_s9M49]
        case noDuplicate# [s_s9M49] of s'_s9M4a {
          __DEFAULT ->
              case newMutVar# [lvl9_r9Fvk s'_s9M4a] of {
                (#,#) ipv_s9M4c [Occ=Once] ipv1_s9M4d [Occ=Once] ->
                    let {
                      sat_s9M4e [Occ=Once]
                        :: GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ())
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_s9M4d];
                    } in  (#,#) [ipv_s9M4c sat_s9M4e];
              };
        };

GHC.Conc.Sync.uncaughtExceptionHandler [InlPrag=NOINLINE]
  :: GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case lvl10_r9Fvl GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9M4h [Occ=Once] -> ipv1_s9M4h;
        };

GHC.Conc.Sync.setUncaughtExceptionHandler1
  :: (GHC.Exception.SomeException -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.STRef.writeSTRef1
            GHC.Conc.Sync.uncaughtExceptionHandler eta_B2 eta_B1;

GHC.Conc.Sync.setUncaughtExceptionHandler
  :: (GHC.Exception.SomeException -> GHC.Types.IO ())
     -> GHC.Types.IO ()
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.setUncaughtExceptionHandler1 eta_B2 eta_B1;

GHC.Conc.Sync.getUncaughtExceptionHandler1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Exception.SomeException -> GHC.Types.IO () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.STRef.readSTRef1 GHC.Conc.Sync.uncaughtExceptionHandler eta_B1;

GHC.Conc.Sync.getUncaughtExceptionHandler
  :: GHC.Types.IO (GHC.Exception.SomeException -> GHC.Types.IO ())
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.getUncaughtExceptionHandler1 eta_B1;

GHC.Conc.Sync.reportError1
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [ex_s9M4i s_s9M4j]
        case GHC.Conc.Sync.uncaughtExceptionHandler of {
          GHC.STRef.STRef var#_s9M4l [Occ=Once] ->
              case readMutVar# [var#_s9M4l s_s9M4j] of {
                (#,#) ipv_s9M4n [Occ=Once] ipv1_s9M4o [Occ=Once!] ->
                    ipv1_s9M4o ex_s9M4i ipv_s9M4n;
              };
        };

GHC.Conc.Sync.reportError
  :: GHC.Exception.SomeException -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.reportError1 eta_B2 eta_B1;

GHC.Conc.Sync.sharedCAF1
  :: forall a.
     a
     -> (GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(C(S(SS(S)))),C(C1(U(U,1*U(U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [a1_s9M4p get_or_set_s9M4q eta_s9M4r]
        case getMaskingState# [eta_s9M4r] of {
          (#,#) ipv_s9M4t [Occ=Once*] ipv1_s9M4u [Occ=Once!] ->
              let {
                io_s9M4v [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CSP #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [a1_s9M4p get_or_set_s9M4q] \r [s_s9M4w]
                        case makeStablePtr# [a1_s9M4p s_s9M4w] of {
                          (#,#) ipv2_s9M4y [Occ=Once] ipv3_s9M4z ->
                              let {
                                sat_s9M4A [Occ=Once] :: GHC.Ptr.Ptr a_a9CSP
                                [LclId] =
                                    CCCS GHC.Ptr.Ptr! [ipv3_s9M4z];
                              } in 
                                case get_or_set_s9M4q sat_s9M4A ipv2_s9M4y of {
                                  (#,#) ipv4_s9M4C [Occ=Once*] ipv5_s9M4D [Occ=Once!] ->
                                      case ipv5_s9M4D of {
                                        GHC.Ptr.Ptr b1_s9M4F ->
                                            case eqAddr# [ipv3_s9M4z b1_s9M4F] of {
                                              __DEFAULT ->
                                                  case
                                                      __pkg_ccall base-4.11.0.0 [ipv3_s9M4z
                                                                                 ipv4_s9M4C]
                                                  of
                                                  { Unit# ds4_s9M4J [Occ=Once] ->
                                                        deRefStablePtr# [b1_s9M4F ds4_s9M4J];
                                                  };
                                              1# -> (#,#) [ipv4_s9M4C a1_s9M4p];
                                            };
                                      };
                                };
                        };
              } in 
                case ipv1_s9M4u of {
                  __DEFAULT -> io_s9M4v ipv_s9M4t;
                  0# -> maskAsyncExceptions# [io_s9M4v ipv_s9M4t];
                };
        };

GHC.Conc.Sync.sharedCAF
  :: forall a.
     a
     -> (GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a))
     -> GHC.Types.IO a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(C(S(SS(S)))),C(C1(U(U,1*U(U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.sharedCAF1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.$wmodifyMVar_ [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MVar# GHC.Prim.RealWorld a
     -> (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s9M4L w_s9M4M w1_s9M4N]
        case getMaskingState# [w1_s9M4N] of {
          (#,#) ipv_s9M4P [Occ=Once*] ipv1_s9M4Q [Occ=Once!] ->
              case ipv1_s9M4Q of {
                __DEFAULT ->
                    case takeMVar# [ww_s9M4L ipv_s9M4P] of {
                      (#,#) ipv2_s9M4T [Occ=Once] ipv3_s9M4U ->
                          let {
                            sat_s9M55 [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [ww_s9M4L ipv3_s9M4U] \r [ds3_s9M4X]
                                    case ds3_s9M4X of {
                                      GHC.Exception.SomeException $dException_s9M4Z [Occ=Once]
                                                                  e1_s9M50 [Occ=Once] ->
                                          let {
                                            sat_s9M54 [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a_s9ETF #)
                                            [LclId] =
                                                [ww_s9M4L
                                                 ipv3_s9M4U
                                                 $dException_s9M4Z
                                                 e1_s9M50] \r [s_s9M51]
                                                    case putMVar# [ww_s9M4L ipv3_s9M4U s_s9M51] of {
                                                      __DEFAULT ->
                                                          GHC.Exception.throw
                                                              $dException_s9M4Z e1_s9M50;
                                                    };
                                          } in  sat_s9M54;
                                    }; } in
                          let {
                            sat_s9M4V [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [w_s9M4M ipv3_s9M4U] \u [] w_s9M4M ipv3_s9M4U; } in
                          let {
                            sat_s9M4W [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [sat_s9M4V] \r [eta_B1] maskAsyncExceptions# [sat_s9M4V eta_B1];
                          } in 
                            case catch# [sat_s9M4W sat_s9M55 ipv2_s9M4T] of {
                              (#,#) ipv4_s9M57 [Occ=Once] ipv5_s9M58 [Occ=Once] ->
                                  case putMVar# [ww_s9M4L ipv5_s9M58 ipv4_s9M57] of s2#_s9M59 {
                                    __DEFAULT -> (#,#) [s2#_s9M59 GHC.Tuple.()];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_s9M5t [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_s9M4L w_s9M4M] \r [s_s9M5a]
                              case takeMVar# [ww_s9M4L s_s9M5a] of {
                                (#,#) ipv2_s9M5c [Occ=Once] ipv3_s9M5d ->
                                    let {
                                      sat_s9M5o [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [ww_s9M4L ipv3_s9M5d] \r [ds3_s9M5g]
                                              case ds3_s9M5g of {
                                                GHC.Exception.SomeException $dException_s9M5i [Occ=Once]
                                                                            e1_s9M5j [Occ=Once] ->
                                                    let {
                                                      sat_s9M5n [Occ=OnceT[0]]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_s9ETF #)
                                                      [LclId] =
                                                          [ww_s9M4L
                                                           ipv3_s9M5d
                                                           $dException_s9M5i
                                                           e1_s9M5j] \r [s1_s9M5k]
                                                              case
                                                                  putMVar# [ww_s9M4L
                                                                            ipv3_s9M5d
                                                                            s1_s9M5k]
                                                              of
                                                              { __DEFAULT ->
                                                                    GHC.Exception.throw
                                                                        $dException_s9M5i e1_s9M5j;
                                                              };
                                                    } in  sat_s9M5n;
                                              }; } in
                                    let {
                                      sat_s9M5e [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [w_s9M4M ipv3_s9M5d] \u [] w_s9M4M ipv3_s9M5d; } in
                                    let {
                                      sat_s9M5f [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [sat_s9M5e] \r [eta_B1]
                                              unmaskAsyncExceptions# [sat_s9M5e eta_B1];
                                    } in 
                                      case catch# [sat_s9M5f sat_s9M5o ipv2_s9M5c] of {
                                        (#,#) ipv4_s9M5q [Occ=Once] ipv5_s9M5r [Occ=Once] ->
                                            case
                                                putMVar# [ww_s9M4L ipv5_s9M5r ipv4_s9M5q]
                                            of
                                            s2#_s9M5s
                                            { __DEFAULT -> (#,#) [s2#_s9M5s GHC.Tuple.()];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_s9M5t ipv_s9M4P];
                1# ->
                    case takeMVar# [ww_s9M4L ipv_s9M4P] of {
                      (#,#) ipv2_s9M5v [Occ=Once] ipv3_s9M5w ->
                          let {
                            sat_s9M5H [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [ww_s9M4L ipv3_s9M5w] \r [ds3_s9M5z]
                                    case ds3_s9M5z of {
                                      GHC.Exception.SomeException $dException_s9M5B [Occ=Once]
                                                                  e1_s9M5C [Occ=Once] ->
                                          let {
                                            sat_s9M5G [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a_s9ETF #)
                                            [LclId] =
                                                [ww_s9M4L
                                                 ipv3_s9M5w
                                                 $dException_s9M5B
                                                 e1_s9M5C] \r [s_s9M5D]
                                                    case putMVar# [ww_s9M4L ipv3_s9M5w s_s9M5D] of {
                                                      __DEFAULT ->
                                                          GHC.Exception.throw
                                                              $dException_s9M5B e1_s9M5C;
                                                    };
                                          } in  sat_s9M5G;
                                    }; } in
                          let {
                            sat_s9M5x [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [w_s9M4M ipv3_s9M5w] \u [] w_s9M4M ipv3_s9M5w; } in
                          let {
                            sat_s9M5y [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [sat_s9M5x] \r [eta_B1] maskUninterruptible# [sat_s9M5x eta_B1];
                          } in 
                            case catch# [sat_s9M5y sat_s9M5H ipv2_s9M5v] of {
                              (#,#) ipv4_s9M5J [Occ=Once] ipv5_s9M5K [Occ=Once] ->
                                  case putMVar# [ww_s9M4L ipv5_s9M5K ipv4_s9M5J] of s2#_s9M5L {
                                    __DEFAULT -> (#,#) [s2#_s9M5L GHC.Tuple.()];
                                  };
                            };
                    };
              };
        };

GHC.Conc.Sync.modifyMVar_1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.MVar.MVar a
     -> (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9M5M w1_s9M5N w2_s9M5O]
        case w_s9M5M of {
          GHC.MVar.MVar ww1_s9M5Q [Occ=Once] ->
              GHC.Conc.Sync.$wmodifyMVar_ ww1_s9M5Q w1_s9M5N w2_s9M5O;
        };

GHC.Conc.Sync.modifyMVar_
  :: forall a.
     GHC.MVar.MVar a -> (a -> GHC.Types.IO a) -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.modifyMVar_1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.$wwithMVar [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     GHC.Prim.MVar# GHC.Prim.RealWorld a
     -> (a -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s9M5R w_s9M5S w1_s9M5T]
        case getMaskingState# [w1_s9M5T] of {
          (#,#) ipv_s9M5V [Occ=Once*] ipv1_s9M5W [Occ=Once!] ->
              case ipv1_s9M5W of {
                __DEFAULT ->
                    case takeMVar# [ww_s9M5R ipv_s9M5V] of {
                      (#,#) ipv2_s9M5Z [Occ=Once] ipv3_s9M60 ->
                          let {
                            sat_s9M6b [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [ww_s9M5R ipv3_s9M60] \r [ds3_s9M63]
                                    case ds3_s9M63 of {
                                      GHC.Exception.SomeException $dException_s9M65 [Occ=Once]
                                                                  e1_s9M66 [Occ=Once] ->
                                          let {
                                            sat_s9M6a [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       b_s9ETP #)
                                            [LclId] =
                                                [ww_s9M5R
                                                 ipv3_s9M60
                                                 $dException_s9M65
                                                 e1_s9M66] \r [s_s9M67]
                                                    case putMVar# [ww_s9M5R ipv3_s9M60 s_s9M67] of {
                                                      __DEFAULT ->
                                                          GHC.Exception.throw
                                                              $dException_s9M65 e1_s9M66;
                                                    };
                                          } in  sat_s9M6a;
                                    }; } in
                          let {
                            sat_s9M61 [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [w_s9M5S ipv3_s9M60] \u [] w_s9M5S ipv3_s9M60; } in
                          let {
                            sat_s9M62 [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [sat_s9M61] \r [eta_B1] maskAsyncExceptions# [sat_s9M61 eta_B1];
                          } in 
                            case catch# [sat_s9M62 sat_s9M6b ipv2_s9M5Z] of {
                              (#,#) ipv4_s9M6d [Occ=Once] ipv5_s9M6e [Occ=Once] ->
                                  case putMVar# [ww_s9M5R ipv3_s9M60 ipv4_s9M6d] of s2#_s9M6f {
                                    __DEFAULT -> (#,#) [s2#_s9M6f ipv5_s9M6e];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_s9M6z [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                      [LclId] =
                          [ww_s9M5R w_s9M5S] \r [s_s9M6g]
                              case takeMVar# [ww_s9M5R s_s9M6g] of {
                                (#,#) ipv2_s9M6i [Occ=Once] ipv3_s9M6j ->
                                    let {
                                      sat_s9M6u [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [ww_s9M5R ipv3_s9M6j] \r [ds3_s9M6m]
                                              case ds3_s9M6m of {
                                                GHC.Exception.SomeException $dException_s9M6o [Occ=Once]
                                                                            e1_s9M6p [Occ=Once] ->
                                                    let {
                                                      sat_s9M6t [Occ=OnceT[0]]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 b_s9ETP #)
                                                      [LclId] =
                                                          [ww_s9M5R
                                                           ipv3_s9M6j
                                                           $dException_s9M6o
                                                           e1_s9M6p] \r [s1_s9M6q]
                                                              case
                                                                  putMVar# [ww_s9M5R
                                                                            ipv3_s9M6j
                                                                            s1_s9M6q]
                                                              of
                                                              { __DEFAULT ->
                                                                    GHC.Exception.throw
                                                                        $dException_s9M6o e1_s9M6p;
                                                              };
                                                    } in  sat_s9M6t;
                                              }; } in
                                    let {
                                      sat_s9M6k [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [w_s9M5S ipv3_s9M6j] \u [] w_s9M5S ipv3_s9M6j; } in
                                    let {
                                      sat_s9M6l [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [sat_s9M6k] \r [eta_B1]
                                              unmaskAsyncExceptions# [sat_s9M6k eta_B1];
                                    } in 
                                      case catch# [sat_s9M6l sat_s9M6u ipv2_s9M6i] of {
                                        (#,#) ipv4_s9M6w [Occ=Once] ipv5_s9M6x [Occ=Once] ->
                                            case
                                                putMVar# [ww_s9M5R ipv3_s9M6j ipv4_s9M6w]
                                            of
                                            s2#_s9M6y
                                            { __DEFAULT -> (#,#) [s2#_s9M6y ipv5_s9M6x];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_s9M6z ipv_s9M5V];
                1# ->
                    case takeMVar# [ww_s9M5R ipv_s9M5V] of {
                      (#,#) ipv2_s9M6B [Occ=Once] ipv3_s9M6C ->
                          let {
                            sat_s9M6N [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [ww_s9M5R ipv3_s9M6C] \r [ds3_s9M6F]
                                    case ds3_s9M6F of {
                                      GHC.Exception.SomeException $dException_s9M6H [Occ=Once]
                                                                  e1_s9M6I [Occ=Once] ->
                                          let {
                                            sat_s9M6M [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       b_s9ETP #)
                                            [LclId] =
                                                [ww_s9M5R
                                                 ipv3_s9M6C
                                                 $dException_s9M6H
                                                 e1_s9M6I] \r [s_s9M6J]
                                                    case putMVar# [ww_s9M5R ipv3_s9M6C s_s9M6J] of {
                                                      __DEFAULT ->
                                                          GHC.Exception.throw
                                                              $dException_s9M6H e1_s9M6I;
                                                    };
                                          } in  sat_s9M6M;
                                    }; } in
                          let {
                            sat_s9M6D [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [w_s9M5S ipv3_s9M6C] \u [] w_s9M5S ipv3_s9M6C; } in
                          let {
                            sat_s9M6E [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [sat_s9M6D] \r [eta_B1] maskUninterruptible# [sat_s9M6D eta_B1];
                          } in 
                            case catch# [sat_s9M6E sat_s9M6N ipv2_s9M6B] of {
                              (#,#) ipv4_s9M6P [Occ=Once] ipv5_s9M6Q [Occ=Once] ->
                                  case putMVar# [ww_s9M5R ipv3_s9M6C ipv4_s9M6P] of s2#_s9M6R {
                                    __DEFAULT -> (#,#) [s2#_s9M6R ipv5_s9M6Q];
                                  };
                            };
                    };
              };
        };

GHC.Conc.Sync.withMVar1 [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     GHC.MVar.MVar a
     -> (a -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9M6S w1_s9M6T w2_s9M6U]
        case w_s9M6S of {
          GHC.MVar.MVar ww1_s9M6W [Occ=Once] ->
              GHC.Conc.Sync.$wwithMVar ww1_s9M6W w1_s9M6T w2_s9M6U;
        };

GHC.Conc.Sync.withMVar
  :: forall a b.
     GHC.MVar.MVar a -> (a -> GHC.Types.IO b) -> GHC.Types.IO b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.withMVar1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.reportStackOverflow1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9M6X]
        case myThreadId# [s_s9M6X] of {
          (#,#) ipv_s9M6Z [Occ=Once] ipv1_s9M70 [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9M70 ipv_s9M6Z] of {
                Unit# ds1_s9M73 [Occ=Once] -> (#,#) [ds1_s9M73 GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.reportStackOverflow :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.reportStackOverflow1 eta_B1;

GHC.Conc.Sync.forkIO2
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [e1_s9M74 eta_s9M75]
        GHC.Conc.Sync.childHandler1 e1_s9M74 eta_s9M75;
GHC.Conc.Sync.childHandler1 [Occ=LoopBreaker]
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [err_s9M76 eta_s9M77]
        let {
          sat_s9M7U [Occ=Once, Dmd=<L,1*C1(U)>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [err_s9M76] \s []
                  case err_s9M76 of wild_s9M78 {
                    GHC.Exception.SomeException $dException1_s9M79 e2_s9M7a ->
                        case GHC.Exception.$p1Exception $dException1_s9M79 of sat_s9M7b {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_s9M7b
                                      GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3
                              of
                              { GHC.Types.False ->
                                    case
                                        GHC.Exception.$p1Exception $dException1_s9M79
                                    of
                                    sat_s9M7d
                                    { __DEFAULT ->
                                          case
                                              Data.Typeable.Internal.sameTypeRep
                                                  sat_s9M7d
                                                  GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3
                                          of
                                          { GHC.Types.False ->
                                                case
                                                    GHC.Exception.$p1Exception $dException1_s9M79
                                                of
                                                sat_s9M7K
                                                { __DEFAULT ->
                                                      let-no-escape {
                                                        fail_s9M7f [Occ=Once*!T[1],
                                                                    Dmd=<L,1*C1(C1(U))>]
                                                          :: GHC.Prim.Void#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   () #)
                                                        [LclId[JoinId(1)],
                                                         Arity=1,
                                                         Str=<L,A>,
                                                         Unf=OtherCon []] =
                                                            sat-only [wild_s9M78
                                                                      $dException1_s9M79
                                                                      e2_s9M7a] \r [ds_s9M7g]
                                                                case
                                                                    GHC.Exception.$p1Exception
                                                                        $dException1_s9M79
                                                                of
                                                                sat_s9M7h
                                                                { __DEFAULT ->
                                                                      case
                                                                          Data.Typeable.Internal.sameTypeRep
                                                                              sat_s9M7h
                                                                              GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                                      of
                                                                      { GHC.Types.False ->
                                                                            let {
                                                                              sat_s9M7p [Occ=OnceT[0]]
                                                                                :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         () #)
                                                                              [LclId] =
                                                                                  [wild_s9M78] \r [s_s9M7j]
                                                                                      case
                                                                                          GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                      of
                                                                                      { GHC.STRef.STRef var#_s9M7l [Occ=Once] ->
                                                                                            case
                                                                                                readMutVar# [var#_s9M7l
                                                                                                             s_s9M7j]
                                                                                            of
                                                                                            { (#,#) ipv_s9M7n [Occ=Once]
                                                                                                    ipv1_s9M7o [Occ=Once!] ->
                                                                                                  ipv1_s9M7o
                                                                                                      wild_s9M78
                                                                                                      ipv_s9M7n;
                                                                                            };
                                                                                      };
                                                                            } in  sat_s9M7p;
                                                                        GHC.Types.True ->
                                                                            case e2_s9M7a of {
                                                                              GHC.IO.Exception.SomeAsyncException $dException_s9M7r [Occ=Once]
                                                                                                                  a_s9M7s [Occ=Once] ->
                                                                                  case
                                                                                      GHC.Exception.$p1Exception
                                                                                          $dException_s9M7r
                                                                                  of
                                                                                  sat_s9M7t
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            Data.Typeable.Internal.sameTypeRep
                                                                                                sat_s9M7t
                                                                                                GHC.IO.Exception.$fExceptionAsyncException9
                                                                                        of
                                                                                        { GHC.Types.False ->
                                                                                              let {
                                                                                                sat_s9M7B [Occ=OnceT[0]]
                                                                                                  :: GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           () #)
                                                                                                [LclId] =
                                                                                                    [wild_s9M78] \r [s_s9M7v]
                                                                                                        case
                                                                                                            GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                        of
                                                                                                        { GHC.STRef.STRef var#_s9M7x [Occ=Once] ->
                                                                                                              case
                                                                                                                  readMutVar# [var#_s9M7x
                                                                                                                               s_s9M7v]
                                                                                                              of
                                                                                                              { (#,#) ipv_s9M7z [Occ=Once]
                                                                                                                      ipv1_s9M7A [Occ=Once!] ->
                                                                                                                    ipv1_s9M7A
                                                                                                                        wild_s9M78
                                                                                                                        ipv_s9M7z;
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                sat_s9M7B;
                                                                                          GHC.Types.True ->
                                                                                              case
                                                                                                  a_s9M7s
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s9M7J [Occ=OnceT[0]]
                                                                                                        :: GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 () #)
                                                                                                      [LclId] =
                                                                                                          [wild_s9M78] \r [s_s9M7D]
                                                                                                              case
                                                                                                                  GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                              of
                                                                                                              { GHC.STRef.STRef var#_s9M7F [Occ=Once] ->
                                                                                                                    case
                                                                                                                        readMutVar# [var#_s9M7F
                                                                                                                                     s_s9M7D]
                                                                                                                    of
                                                                                                                    { (#,#) ipv_s9M7H [Occ=Once]
                                                                                                                            ipv1_s9M7I [Occ=Once!] ->
                                                                                                                          ipv1_s9M7I
                                                                                                                              wild_s9M78
                                                                                                                              ipv_s9M7H;
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      sat_s9M7J;
                                                                                                GHC.IO.Exception.StackOverflow ->
                                                                                                    GHC.Conc.Sync.reportStackOverflow1;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in 
                                                        case
                                                            Data.Typeable.Internal.sameTypeRep
                                                                sat_s9M7K
                                                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                        of
                                                        { GHC.Types.False ->
                                                              fail_s9M7f GHC.Prim.void#;
                                                          GHC.Types.True ->
                                                              case e2_s9M7a of {
                                                                GHC.IO.Exception.SomeAsyncException $dException_s9M7N [Occ=Once]
                                                                                                    a_s9M7O [Occ=Once] ->
                                                                    case
                                                                        GHC.Exception.$p1Exception
                                                                            $dException_s9M7N
                                                                    of
                                                                    sat_s9M7P
                                                                    { __DEFAULT ->
                                                                          case
                                                                              Data.Typeable.Internal.sameTypeRep
                                                                                  sat_s9M7P
                                                                                  GHC.IO.Exception.$fExceptionAsyncException9
                                                                          of
                                                                          { GHC.Types.False ->
                                                                                fail_s9M7f
                                                                                    GHC.Prim.void#;
                                                                            GHC.Types.True ->
                                                                                case a_s9M7O of {
                                                                                  __DEFAULT ->
                                                                                      fail_s9M7f
                                                                                          GHC.Prim.void#;
                                                                                  GHC.IO.Exception.ThreadKilled ->
                                                                                      GHC.Conc.Sync.always2;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                };
                                            GHC.Types.True ->
                                                case e2_s9M7a of {
                                                  GHC.IO.Exception.BlockedIndefinitelyOnSTM ->
                                                      GHC.Conc.Sync.always2;
                                                };
                                          };
                                    };
                                GHC.Types.True ->
                                    case e2_s9M7a of {
                                      GHC.IO.Exception.BlockedIndefinitelyOnMVar ->
                                          GHC.Conc.Sync.always2;
                                    };
                              };
                        };
                  };
        } in  catch# [sat_s9M7U GHC.Conc.Sync.forkIO2 eta_s9M77];

GHC.Conc.Sync.childHandler
  :: GHC.Exception.SomeException -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.childHandler1 eta_B2 eta_B1;

GHC.Conc.Sync.forkOn1
  :: GHC.Types.Int
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [ds_s9M7V action_s9M7W eta_s9M7X]
        case ds_s9M7V of {
          GHC.Types.I# cpu_s9M7Z [Occ=Once] ->
              let {
                sat_s9M81 [Occ=Once] :: GHC.Types.IO ()
                [LclId] =
                    [action_s9M7W] \r [eta1_s9M80]
                        catch# [action_s9M7W GHC.Conc.Sync.forkIO2 eta1_s9M80];
              } in 
                case forkOn# [cpu_s9M7Z sat_s9M81 eta_s9M7X] of {
                  (#,#) ipv_s9M83 [Occ=Once] ipv1_s9M84 [Occ=Once] ->
                      let {
                        sat_s9M85 [Occ=Once] :: GHC.Conc.Sync.ThreadId
                        [LclId] =
                            CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9M84];
                      } in  (#,#) [ipv_s9M83 sat_s9M85];
                };
        };

GHC.Conc.Sync.forkOn
  :: GHC.Types.Int
     -> GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=3, Str=<S(S),1*U(U)><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.forkOn1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.forkOnWithUnmask1
  :: GHC.Types.Int
     -> ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
         -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [cpu_s9M86 io_s9M87 eta_s9M88]
        case cpu_s9M86 of {
          GHC.Types.I# cpu1_s9M8a [Occ=Once] ->
              let {
                sat_s9M8e [Occ=Once] :: GHC.Types.IO ()
                [LclId] =
                    [io_s9M87] \r [eta1_s9M8b]
                        let {
                          sat_s9M8d [Occ=Once, Dmd=<L,1*C1(U)>]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          [LclId] =
                              [io_s9M87] \s []
                                  let {
                                    sat_s9M8c [Occ=Once]
                                      :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                                    [LclId] =
                                        [] \r [eta_B2 eta_B1]
                                            unmaskAsyncExceptions# [eta_B2 eta_B1];
                                  } in  io_s9M87 sat_s9M8c;
                        } in  catch# [sat_s9M8d GHC.Conc.Sync.forkIO2 eta1_s9M8b];
              } in 
                case forkOn# [cpu1_s9M8a sat_s9M8e eta_s9M88] of {
                  (#,#) ipv_s9M8g [Occ=Once] ipv1_s9M8h [Occ=Once] ->
                      let {
                        sat_s9M8i [Occ=Once] :: GHC.Conc.Sync.ThreadId
                        [LclId] =
                            CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9M8h];
                      } in  (#,#) [ipv_s9M8g sat_s9M8i];
                };
        };

GHC.Conc.Sync.forkOnWithUnmask
  :: GHC.Types.Int
     -> ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
         -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Conc.Sync.forkOnWithUnmask1 eta_B3 eta_B2 eta_B1;

GHC.Conc.Sync.forkIO1
  :: GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [action_s9M8j s_s9M8k]
        let {
          sat_s9M8m [Occ=Once] :: GHC.Types.IO ()
          [LclId] =
              [action_s9M8j] \r [eta_s9M8l]
                  catch# [action_s9M8j GHC.Conc.Sync.forkIO2 eta_s9M8l];
        } in 
          case fork# [sat_s9M8m s_s9M8k] of {
            (#,#) ipv_s9M8o [Occ=Once] ipv1_s9M8p [Occ=Once] ->
                let {
                  sat_s9M8q [Occ=Once] :: GHC.Conc.Sync.ThreadId
                  [LclId] =
                      CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9M8p];
                } in  (#,#) [ipv_s9M8o sat_s9M8q];
          };

GHC.Conc.Sync.forkIO
  :: GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.Sync.forkIO1 eta_B2 eta_B1;

GHC.Conc.Sync.forkIOWithUnmask1
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [io_s9M8r s_s9M8s]
        let {
          sat_s9M8w [Occ=Once] :: GHC.Types.IO ()
          [LclId] =
              [io_s9M8r] \r [eta_s9M8t]
                  let {
                    sat_s9M8v [Occ=Once, Dmd=<L,1*C1(U)>]
                      :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                    [LclId] =
                        [io_s9M8r] \s []
                            let {
                              sat_s9M8u [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                              [LclId] =
                                  [] \r [eta_B2 eta_B1] unmaskAsyncExceptions# [eta_B2 eta_B1];
                            } in  io_s9M8r sat_s9M8u;
                  } in  catch# [sat_s9M8v GHC.Conc.Sync.forkIO2 eta_s9M8t];
        } in 
          case fork# [sat_s9M8w s_s9M8s] of {
            (#,#) ipv_s9M8y [Occ=Once] ipv1_s9M8z [Occ=Once] ->
                let {
                  sat_s9M8A [Occ=Once] :: GHC.Conc.Sync.ThreadId
                  [LclId] =
                      CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9M8z];
                } in  (#,#) [ipv_s9M8y sat_s9M8A];
          };

GHC.Conc.Sync.forkIOWithUnmask
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.forkIOWithUnmask1 eta_B2 eta_B1;

lvl11_r9Fvm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "setNumCapabilities: Capability count ("#;

lvl12_r9Fvn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") must be positive"#;

lvl13_r9Fvo :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_r9Fvn;

GHC.Conc.Sync.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_s9M8B w_s9M8C]
        let {
          sat_s9M8H [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s9M8B] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s9M8B GHC.Types.[] of {
                    (#,#) ww5_s9M8E [Occ=Once] ww6_s9M8F [Occ=Once] ->
                        let {
                          sat_s9M8G [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_s9M8E ww6_s9M8F];
                        } in  GHC.Base.++ sat_s9M8G lvl13_r9Fvo;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl11_r9Fvm sat_s9M8H
          of
          sat_s9M8I
          { __DEFAULT -> GHC.IO.failIO1 sat_s9M8I w_s9M8C;
          };

GHC.Conc.Sync.setNumCapabilities2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [w_s9M8J w1_s9M8K]
        case w_s9M8J of {
          GHC.Types.I# ww1_s9M8M [Occ=Once] ->
              GHC.Conc.Sync.$wlvl ww1_s9M8M w1_s9M8K;
        };

GHC.Conc.Sync.setNumCapabilities1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [i_s9M8N eta_s9M8O]
        case i_s9M8N of {
          GHC.Types.I# x_s9M8Q ->
              case <=# [x_s9M8Q 0#] of {
                __DEFAULT ->
                    case int2Word# [x_s9M8Q] of sat_s9M8T {
                      __DEFAULT ->
                          case narrow32Word# [sat_s9M8T] of sat_s9M8U {
                            __DEFAULT ->
                                case __pkg_ccall_GC base-4.11.0.0 [sat_s9M8U eta_s9M8O] of {
                                  Unit# ds_s9M8W [Occ=Once] -> (#,#) [ds_s9M8W GHC.Tuple.()];
                                };
                          };
                    };
                1# -> GHC.Conc.Sync.$wlvl x_s9M8Q eta_s9M8O;
              };
        };

GHC.Conc.Sync.setNumCapabilities
  :: GHC.Types.Int -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.setNumCapabilities1 eta_B2 eta_B1;

GHC.Conc.Sync.getNumCapabilities1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9M8X]
        case
            readInt32OffAddr# [__label "enabled_capabilities" (data)
                               0#
                               s_s9M8X]
        of
        { (#,#) ipv_s9M8Z [Occ=Once] ipv1_s9M90 [Occ=Once] ->
              let {
                sat_s9M91 [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [ipv1_s9M90];
              } in  (#,#) [ipv_s9M8Z sat_s9M91];
        };

GHC.Conc.Sync.getNumCapabilities :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.getNumCapabilities1 eta_B1;

GHC.Conc.Sync.numCapabilities1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9M92]
        case noDuplicate# [s_s9M92] of s'_s9M93 {
          __DEFAULT ->
              case
                  readInt32OffAddr# [__label "enabled_capabilities" (data)
                                     0#
                                     s'_s9M93]
              of
              { (#,#) ipv_s9M95 [Occ=Once] ipv1_s9M96 [Occ=Once] ->
                    let {
                      sat_s9M97 [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          CCCS GHC.Types.I#! [ipv1_s9M96];
                    } in  (#,#) [ipv_s9M95 sat_s9M97];
              };
        };

GHC.Conc.Sync.numCapabilities :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.Conc.Sync.numCapabilities1 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9M9a [Occ=Once] -> ipv1_s9M9a;
        };

GHC.Conc.Sync.disableAllocationLimit1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9M9b]
        case myThreadId# [s_s9M9b] of {
          (#,#) ipv_s9M9d [Occ=Once] ipv1_s9M9e [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9M9e ipv_s9M9d] of {
                Unit# ds1_s9M9h [Occ=Once] -> (#,#) [ds1_s9M9h GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.disableAllocationLimit :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.disableAllocationLimit1 eta_B1;

GHC.Conc.Sync.enableAllocationLimit1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9M9i]
        case myThreadId# [s_s9M9i] of {
          (#,#) ipv_s9M9k [Occ=Once] ipv1_s9M9l [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9M9l ipv_s9M9k] of {
                Unit# ds1_s9M9o [Occ=Once] -> (#,#) [ds1_s9M9o GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.enableAllocationLimit :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.enableAllocationLimit1 eta_B1;

GHC.Conc.Sync.getAllocationCounter1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int64 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9M9p]
        case myThreadId# [s_s9M9p] of {
          (#,#) ipv_s9M9r [Occ=Once] ipv1_s9M9s [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9M9s ipv_s9M9r] of {
                (#,#) ds1_s9M9v [Occ=Once] ds2_s9M9w [Occ=Once] ->
                    let {
                      sat_s9M9x [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ds2_s9M9w];
                    } in  (#,#) [ds1_s9M9v sat_s9M9x];
              };
        };

GHC.Conc.Sync.getAllocationCounter :: GHC.Types.IO GHC.Int.Int64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.getAllocationCounter1 eta_B1;

GHC.Conc.Sync.setAllocationCounter1
  :: GHC.Int.Int64
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [i_s9M9y s_s9M9z]
        case myThreadId# [s_s9M9z] of {
          (#,#) ipv_s9M9B [Occ=Once] ipv1_s9M9C [Occ=Once] ->
              case i_s9M9y of {
                GHC.Int.I64# ds2_s9M9E [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [ipv1_s9M9C ds2_s9M9E ipv_s9M9B]
                    of
                    { Unit# ds3_s9M9H [Occ=Once] -> (#,#) [ds3_s9M9H GHC.Tuple.()];
                    };
              };
        };

GHC.Conc.Sync.setAllocationCounter
  :: GHC.Int.Int64 -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.setAllocationCounter1 eta_B2 eta_B1;

GHC.Conc.Sync.TVar
  :: forall a.
     GHC.Prim.TVar# GHC.Prim.RealWorld a -> GHC.Conc.Sync.TVar a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.TVar [eta_B1];

GHC.Conc.Sync.ThreadRunning :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadRunning! [];

GHC.Conc.Sync.ThreadFinished :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadFinished! [];

GHC.Conc.Sync.ThreadBlocked
  :: GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.ThreadStatus
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.ThreadBlocked [eta_B1];

GHC.Conc.Sync.ThreadDied :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadDied! [];

GHC.Conc.Sync.BlockedOnMVar :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnMVar! [];

GHC.Conc.Sync.BlockedOnBlackHole :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnBlackHole! [];

GHC.Conc.Sync.BlockedOnException :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnException! [];

GHC.Conc.Sync.BlockedOnSTM :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnSTM! [];

GHC.Conc.Sync.BlockedOnForeignCall :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnForeignCall! [];

GHC.Conc.Sync.BlockedOnOther :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnOther! [];

GHC.Conc.Sync.ThreadId
  :: GHC.Prim.ThreadId# -> GHC.Conc.Sync.ThreadId
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.ThreadId [eta_B1];


==================== STG syntax: ====================
2018-03-16 16:04:52.41986104 UTC

GHC.Conc.Sync.$fEqTVar_$c==
  :: forall a.
     GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.TVar a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s9LSP ds1_s9LSQ]
        case ds_s9LSP of {
          GHC.Conc.Sync.TVar tvar1#_s9LSS [Occ=Once] ->
              case ds1_s9LSQ of {
                GHC.Conc.Sync.TVar tvar2#_s9LSU [Occ=Once] ->
                    case sameTVar# [tvar1#_s9LSS tvar2#_s9LSU] of sat_s9LSV {
                      __DEFAULT -> tagToEnum# [sat_s9LSV];
                    };
              };
        };

GHC.Conc.Sync.$fEqTVar_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.TVar a -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s9LSW eta1_s9LSX]
        case eta_s9LSW of {
          GHC.Conc.Sync.TVar tvar1#_s9LSZ [Occ=Once] ->
              case eta1_s9LSX of {
                GHC.Conc.Sync.TVar tvar2#_s9LT1 [Occ=Once] ->
                    case sameTVar# [tvar1#_s9LSZ tvar2#_s9LT1] of {
                      __DEFAULT -> GHC.Types.True [];
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Conc.Sync.$fEqTVar [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Classes.Eq (GHC.Conc.Sync.TVar a)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqTVar_$c==
                                     GHC.Conc.Sync.$fEqTVar_$c/=];

GHC.Conc.Sync.$fShowBlockReason12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnMVar"#;

GHC.Conc.Sync.$fShowBlockReason11 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason12;

GHC.Conc.Sync.$fShowBlockReason10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnBlackHole"#;

GHC.Conc.Sync.$fShowBlockReason9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason10;

GHC.Conc.Sync.$fShowBlockReason8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnException"#;

GHC.Conc.Sync.$fShowBlockReason7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason8;

GHC.Conc.Sync.$fShowBlockReason6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnSTM"#;

GHC.Conc.Sync.$fShowBlockReason5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason6;

GHC.Conc.Sync.$fShowBlockReason4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnForeignCall"#;

GHC.Conc.Sync.$fShowBlockReason3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason4;

GHC.Conc.Sync.$fShowBlockReason2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockedOnOther"#;

GHC.Conc.Sync.$fShowBlockReason1 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowBlockReason2;

GHC.Conc.Sync.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Conc.Sync.BlockReason -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s9LT3 w1_s9LT4]
        case w_s9LT3 of {
          GHC.Conc.Sync.BlockedOnMVar ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason11 w1_s9LT4;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason9 w1_s9LT4;
          GHC.Conc.Sync.BlockedOnException ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason7 w1_s9LT4;
          GHC.Conc.Sync.BlockedOnSTM ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason5 w1_s9LT4;
          GHC.Conc.Sync.BlockedOnForeignCall ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason3 w1_s9LT4;
          GHC.Conc.Sync.BlockedOnOther ->
              GHC.Base.++ GHC.Conc.Sync.$fShowBlockReason1 w1_s9LT4;
        };

GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Conc.Sync.BlockReason -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s9LT6 w1_s9LT7 w2_s9LT8]
        GHC.Conc.Sync.$w$cshowsPrec w1_s9LT7 w2_s9LT8;

GHC.Conc.Sync.$fShowBlockReason_$cshow
  :: GHC.Conc.Sync.BlockReason -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9LT9]
        case x_s9LT9 of {
          GHC.Conc.Sync.BlockedOnMVar -> GHC.Conc.Sync.$fShowBlockReason11;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              GHC.Conc.Sync.$fShowBlockReason9;
          GHC.Conc.Sync.BlockedOnException ->
              GHC.Conc.Sync.$fShowBlockReason7;
          GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.$fShowBlockReason5;
          GHC.Conc.Sync.BlockedOnForeignCall ->
              GHC.Conc.Sync.$fShowBlockReason3;
          GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.$fShowBlockReason1;
        };

GHC.Conc.Sync.$fShowBlockReason_$cshowList
  :: [GHC.Conc.Sync.BlockReason] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9LTb s_s9LTc]
        GHC.Show.showList__ GHC.Conc.Sync.$w$cshowsPrec ls_s9LTb s_s9LTc;

GHC.Conc.Sync.$fShowBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.BlockReason
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec
                                    GHC.Conc.Sync.$fShowBlockReason_$cshow
                                    GHC.Conc.Sync.$fShowBlockReason_$cshowList];

GHC.Conc.Sync.$fEqBlockReason_$c==
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LTd ds1_s9LTe]
        case ds_s9LTd of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case ds1_s9LTe of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fEqBlockReason_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s9LTm eta1_s9LTn]
        case eta_s9LTm of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case eta1_s9LTn of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fEqBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.BlockReason
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqBlockReason_$c==
                                     GHC.Conc.Sync.$fEqBlockReason_$c/=];

GHC.Conc.Sync.$fEqThreadStatus_$c==
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LTv ds1_s9LTw]
        case ds_s9LTv of {
          GHC.Conc.Sync.ThreadRunning ->
              case ds1_s9LTw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case ds1_s9LTw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LTA [Occ=Once] ->
              case ds1_s9LTw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LTC [Occ=Once] ->
                    GHC.Conc.Sync.$fEqBlockReason_$c== a1_s9LTA b1_s9LTC;
              };
          GHC.Conc.Sync.ThreadDied ->
              case ds1_s9LTw of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fEqThreadStatus_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s9LTE eta1_s9LTF]
        case eta_s9LTE of {
          GHC.Conc.Sync.ThreadRunning ->
              case eta1_s9LTF of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case eta1_s9LTF of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LTJ [Occ=Once!] ->
              case eta1_s9LTF of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LTL [Occ=Once*!] ->
                    case a1_s9LTJ of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LTL of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                    };
              };
          GHC.Conc.Sync.ThreadDied ->
              case eta1_s9LTF of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fEqThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqThreadStatus_$c==
                                     GHC.Conc.Sync.$fEqThreadStatus_$c/=];

GHC.Conc.Sync.numSparks1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case numSparks# [GHC.Prim.void#] of {
          Unit# ipv1_s9LTX [Occ=Once] ->
              let {
                sat_s9LTY [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [ipv1_s9LTX];
              } in  Unit# [sat_s9LTY];
        };

GHC.Conc.Sync.numSparks :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.numSparks1 GHC.Prim.void#;

GHC.Conc.Sync.throwTo1
  :: forall e.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.ThreadId
     -> e
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(U),A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dException_s9LTZ ds_s9LU0 ex_s9LU1 void_0E]
        case ds_s9LU0 of {
          GHC.Conc.Sync.ThreadId tid_s9LU4 [Occ=Once] ->
              let {
                sat_s9LU5 [Occ=Once] :: GHC.Exception.SomeException
                [LclId] =
                    [$dException_s9LTZ ex_s9LU1] \u []
                        GHC.Exception.toException $dException_s9LTZ ex_s9LU1;
              } in 
                case killThread# [tid_s9LU4 sat_s9LU5 GHC.Prim.void#] of s1_s9LU6 {
                  (##) -> Unit# [GHC.Tuple.()];
                };
        };

GHC.Conc.Sync.throwTo
  :: forall e.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.ThreadId -> e -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(U),A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.throwTo1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.myThreadId1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9LUa [Occ=Once] ->
              let {
                sat_s9LUb [Occ=Once] :: GHC.Conc.Sync.ThreadId
                [LclId] =
                    CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9LUa];
              } in  Unit# [sat_s9LUb];
        };

GHC.Conc.Sync.myThreadId :: GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.myThreadId1 GHC.Prim.void#;

GHC.Conc.Sync.yield1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case yield# [GHC.Prim.void#] of s1_s9LUd {
          (##) -> Unit# [GHC.Tuple.()];
        };

GHC.Conc.Sync.yield :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.yield1 GHC.Prim.void#;

GHC.Conc.Sync.labelThread1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s9LUe str_s9LUf void_0E]
        case ds_s9LUe of {
          GHC.Conc.Sync.ThreadId t_s9LUi [Occ=OnceL] ->
              let {
                sat_s9LUo [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                [LclId] =
                    [t_s9LUi] \r [ds1_s9LUj void_0E]
                        case ds1_s9LUj of {
                          GHC.Ptr.Ptr p_s9LUm [Occ=Once] ->
                              case labelThread# [t_s9LUi p_s9LUm GHC.Prim.void#] of s1_s9LUn {
                                (##) -> Unit# [GHC.Tuple.()];
                              };
                        };
              } in 
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8 str_s9LUf sat_s9LUo GHC.Prim.void#;
        };

GHC.Conc.Sync.labelThread
  :: GHC.Conc.Sync.ThreadId -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.labelThread1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.pseq [InlPrag=INLINE (sat-args=2)]
  :: forall a b. a -> b -> b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [x_s9LUp y_s9LUq] case x_s9LUp of { __DEFAULT -> y_s9LUq; };

GHC.Conc.Sync.par [InlPrag=INLINE (sat-args=2)]
  :: forall a b. a -> b -> b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [x_s9LUs y_s9LUt]
        case par# [x_s9LUs] of { __DEFAULT -> y_s9LUt; };

GHC.Conc.Sync.runSparks_loop [Occ=LoopBreaker]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case getSpark# [GHC.Prim.void#] of {
          (#,#) ipv1_s9LUy [Occ=Once!] ipv2_s9LUz [Occ=Once] ->
              case ipv1_s9LUy of {
                __DEFAULT ->
                    case ipv2_s9LUz of {
                      __DEFAULT -> GHC.Conc.Sync.runSparks_loop GHC.Prim.void#;
                    };
                0# -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.runSparks :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.runSparks_loop GHC.Prim.void#;

GHC.Conc.Sync.threadCapability1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.Types.Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LUC void_0E]
        case ds_s9LUC of {
          GHC.Conc.Sync.ThreadId t_s9LUF [Occ=Once] ->
              case threadStatus# [t_s9LUF GHC.Prim.void#] of {
                (#,,#) _ [Occ=Dead] ipv2_s9LUJ [Occ=Once] ipv3_s9LUK [Occ=Once!] ->
                    let {
                      sat_s9LUN [Occ=Once] :: GHC.Types.Bool
                      [LclId] =
                          [ipv3_s9LUK] \u []
                              case ipv3_s9LUK of {
                                __DEFAULT -> GHC.Types.True [];
                                0# -> GHC.Types.False [];
                              }; } in
                    let {
                      sat_s9LUL [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          CCCS GHC.Types.I#! [ipv2_s9LUJ]; } in
                    let {
                      sat_s9LUO [Occ=Once] :: (GHC.Types.Int, GHC.Types.Bool)
                      [LclId] =
                          CCCS (,)! [sat_s9LUL sat_s9LUN];
                    } in  Unit# [sat_s9LUO];
              };
        };

GHC.Conc.Sync.threadCapability
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO (GHC.Types.Int, GHC.Types.Bool)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.threadCapability1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.mkWeakThreadId1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Weak.Weak GHC.Conc.Sync.ThreadId #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [t_s9LUP void_0E]
        case t_s9LUP of wild_s9LUR {
          GHC.Conc.Sync.ThreadId t#_s9LUS [Occ=Once] ->
              case mkWeakNoFinalizer# [t#_s9LUS wild_s9LUR GHC.Prim.void#] of {
                Unit# ipv1_s9LUV [Occ=Once] ->
                    let {
                      sat_s9LUW [Occ=Once] :: GHC.Weak.Weak GHC.Conc.Sync.ThreadId
                      [LclId] =
                          CCCS GHC.Weak.Weak! [ipv1_s9LUV];
                    } in  Unit# [sat_s9LUW];
              };
        };

GHC.Conc.Sync.mkWeakThreadId
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO (GHC.Weak.Weak GHC.Conc.Sync.ThreadId)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.mkWeakThreadId1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.newStablePtrPrimMVar1
  :: GHC.MVar.MVar ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LUX void_0E]
        case ds_s9LUX of {
          GHC.MVar.MVar m_s9LV0 [Occ=Once] ->
              case makeStablePtr# [m_s9LV0 GHC.Prim.void#] of {
                Unit# ipv1_s9LV3 [Occ=Once] ->
                    let {
                      sat_s9LV4 [Occ=Once] :: GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar
                      [LclId] =
                          CCCS GHC.Stable.StablePtr! [ipv1_s9LV3];
                    } in  Unit# [sat_s9LV4];
              };
        };

GHC.Conc.Sync.newStablePtrPrimMVar
  :: GHC.MVar.MVar ()
     -> GHC.Types.IO (GHC.Stable.StablePtr GHC.Conc.Sync.PrimMVar)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.newStablePtrPrimMVar1 eta_B2 GHC.Prim.void#;

$c>>=_r9FuK
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> (a -> GHC.Conc.Sync.STM b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [m_s9LV5 k_s9LV6 void_0E]
        case m_s9LV5 GHC.Prim.void# of {
          Unit# ipv1_s9LVa [Occ=Once] -> k_s9LV6 ipv1_s9LVa GHC.Prim.void#;
        };

GHC.Conc.Sync.$fMonadSTM_$c>>= [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> (a -> GHC.Conc.Sync.STM b) -> GHC.Conc.Sync.STM b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $c>>=_r9FuK eta_B3 eta_B2 GHC.Prim.void#;

$c*>_r9FuL
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [m_s9LVb k_s9LVc void_0E]
        case m_s9LVb GHC.Prim.void# of {
          Unit# _ [Occ=Dead] -> k_s9LVc GHC.Prim.void#;
        };

GHC.Conc.Sync.$fApplicativeSTM_$c*> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM b -> GHC.Conc.Sync.STM b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $c*>_r9FuL eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.orElse
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<xC(S),1*C1(U)><L,1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        catchRetry# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.Conc.Sync.catchSTM1
  :: forall e a.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.STM a
     -> (e -> GHC.Conc.Sync.STM a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(U),A)><L,1*C1(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [$dException_s9LVh ds_s9LVi handler_s9LVj void_0E]
        let {
          sat_s9LVp [Occ=Once]
            :: GHC.Exception.SomeException
               -> GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CX5 #)
          [LclId] =
              [$dException_s9LVh handler_s9LVj] \r [e1_s9LVl]
                  case GHC.Exception.fromException $dException_s9LVh e1_s9LVl of {
                    GHC.Base.Nothing ->
                        let {
                          sat_s9LVn [Occ=OnceT[0]]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CX5 #)
                          [LclId] =
                              [e1_s9LVl] \r [void_0E] raiseIO# [e1_s9LVl GHC.Prim.void#];
                        } in  sat_s9LVn;
                    GHC.Base.Just e'_s9LVo [Occ=Once] -> handler_s9LVj e'_s9LVo;
                  };
        } in  catchSTM# [ds_s9LVi sat_s9LVp GHC.Prim.void#];

GHC.Conc.Sync.catchSTM
  :: forall e a.
     GHC.Exception.Exception e =>
     GHC.Conc.Sync.STM a
     -> (e -> GHC.Conc.Sync.STM a) -> GHC.Conc.Sync.STM a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(U),A)><L,1*C1(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.catchSTM1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$cpure_r9FuM
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [x_s9LVq void_0E] Unit# [x_s9LVq];

GHC.Conc.Sync.$fApplicativeSTM_$cpure [InlPrag=INLINE (sat-args=1)]
  :: forall a. a -> GHC.Conc.Sync.STM a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] $cpure_r9FuM eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.unsafeIOToSTM1
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9LVs] ds_s9LVs;

GHC.Conc.Sync.unsafeIOToSTM
  :: forall a. GHC.Types.IO a -> GHC.Conc.Sync.STM a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.unsafeIOToSTM1 eta_B1;

GHC.Conc.Sync.atomically
  :: forall a. GHC.Conc.Sync.STM a -> GHC.Types.IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] atomically# [eta_B2 GHC.Prim.void#];

GHC.Conc.Sync.retry :: forall a. GHC.Conc.Sync.STM a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>x, Unf=OtherCon []] =
    [] \r [void_0E] retry# [GHC.Prim.void#];

GHC.Conc.Sync.throwSTM1
  :: forall e a.
     GHC.Exception.Exception e =>
     e
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U><B,U>x,
 Unf=OtherCon []] =
    [] \r [$dException_s9LVt e1_s9LVu void_0E]
        let {
          sat_s9LVw [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [$dException_s9LVt e1_s9LVu] \u []
                  GHC.Exception.toException $dException_s9LVt e1_s9LVu;
        } in  raiseIO# [sat_s9LVw GHC.Prim.void#];

GHC.Conc.Sync.throwSTM
  :: forall e a.
     GHC.Exception.Exception e =>
     e -> GHC.Conc.Sync.STM a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U><B,U>x,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.throwSTM1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.newTVar1
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.TVar a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [val_s9LVx void_0E]
        case newTVar# [val_s9LVx GHC.Prim.void#] of {
          Unit# ipv1_s9LVB [Occ=Once] ->
              let {
                sat_s9LVC [Occ=Once] :: GHC.Conc.Sync.TVar a_a9CVx
                [LclId] =
                    CCCS GHC.Conc.Sync.TVar! [ipv1_s9LVB];
              } in  Unit# [sat_s9LVC];
        };

GHC.Conc.Sync.newTVar
  :: forall a. a -> GHC.Conc.Sync.STM (GHC.Conc.Sync.TVar a)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.newTVar1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.newTVarIO
  :: forall a. a -> GHC.Types.IO (GHC.Conc.Sync.TVar a)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.newTVar1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.readTVarIO1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LVD void_0E]
        case ds_s9LVD of {
          GHC.Conc.Sync.TVar tvar#_s9LVG [Occ=Once] ->
              readTVarIO# [tvar#_s9LVG GHC.Prim.void#];
        };

GHC.Conc.Sync.readTVarIO
  :: forall a. GHC.Conc.Sync.TVar a -> GHC.Types.IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.readTVarIO1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.readTVar1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LVH void_0E]
        case ds_s9LVH of {
          GHC.Conc.Sync.TVar tvar#_s9LVK [Occ=Once] ->
              readTVar# [tvar#_s9LVK GHC.Prim.void#];
        };

GHC.Conc.Sync.readTVar
  :: forall a. GHC.Conc.Sync.TVar a -> GHC.Conc.Sync.STM a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.readTVar1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.writeTVar1
  :: forall a.
     GHC.Conc.Sync.TVar a
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_s9LVL val_s9LVM void_0E]
        case ds_s9LVL of {
          GHC.Conc.Sync.TVar tvar#_s9LVP [Occ=Once] ->
              case
                  writeTVar# [tvar#_s9LVP val_s9LVM GHC.Prim.void#]
              of
              s2#_s9LVQ
              { (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.writeTVar
  :: forall a. GHC.Conc.Sync.TVar a -> a -> GHC.Conc.Sync.STM ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.writeTVar1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$fOrdBlockReason_$ccompare
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LVR b_s9LVS]
        case a_s9LVR of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9LVS of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9LVS of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9LVS of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9LVS of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.LT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9LVS of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.EQ [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9LVS of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.EQ [];
              };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c<
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LW0 b_s9LW1]
        case a_s9LW0 of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9LW1 of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9LW1 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9LW1 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9LW1 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9LW1 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9LW1 of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c<=
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LW9 b_s9LWa]
        case b_s9LWa of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case a_s9LW9 of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case a_s9LW9 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case a_s9LW9 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case a_s9LW9 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case a_s9LW9 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case a_s9LW9 of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$cmax
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.BlockReason
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LWi y_s9LWj]
        case y_s9LWj of {
          GHC.Conc.Sync.BlockedOnMVar -> x_s9LWi;
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case x_s9LWi of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnException ->
                    GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case x_s9LWi of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case x_s9LWi of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case x_s9LWi of {
                __DEFAULT -> GHC.Conc.Sync.BlockedOnForeignCall [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case x_s9LWi of { __DEFAULT -> GHC.Conc.Sync.BlockedOnOther []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c>=
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LWq b_s9LWr]
        case a_s9LWq of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case b_s9LWr of {
                GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case b_s9LWr of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case b_s9LWr of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case b_s9LWr of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case b_s9LWr of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
              };
          GHC.Conc.Sync.BlockedOnOther ->
              case b_s9LWr of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdBlockReason_$c>
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LWz b_s9LWA]
        GHC.Conc.Sync.$fOrdBlockReason_$c< b_s9LWA a_s9LWz;

GHC.Conc.Sync.$fOrdBlockReason_$cmin
  :: GHC.Conc.Sync.BlockReason
     -> GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.BlockReason
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LWB y_s9LWC]
        case y_s9LWC of {
          GHC.Conc.Sync.BlockedOnMVar ->
              case x_s9LWB of { __DEFAULT -> GHC.Conc.Sync.BlockedOnMVar []; };
          GHC.Conc.Sync.BlockedOnBlackHole ->
              case x_s9LWB of wild1_s9LWF {
                __DEFAULT -> wild1_s9LWF;
                GHC.Conc.Sync.BlockedOnException ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnBlackHole [];
              };
          GHC.Conc.Sync.BlockedOnException ->
              case x_s9LWB of wild1_s9LWG {
                __DEFAULT -> wild1_s9LWG;
                GHC.Conc.Sync.BlockedOnSTM -> GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnException [];
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnException [];
              };
          GHC.Conc.Sync.BlockedOnSTM ->
              case x_s9LWB of wild1_s9LWH {
                __DEFAULT -> wild1_s9LWH;
                GHC.Conc.Sync.BlockedOnForeignCall ->
                    GHC.Conc.Sync.BlockedOnSTM [];
                GHC.Conc.Sync.BlockedOnOther -> GHC.Conc.Sync.BlockedOnSTM [];
              };
          GHC.Conc.Sync.BlockedOnForeignCall ->
              case x_s9LWB of wild1_s9LWI {
                __DEFAULT -> wild1_s9LWI;
                GHC.Conc.Sync.BlockedOnOther ->
                    GHC.Conc.Sync.BlockedOnForeignCall [];
              };
          GHC.Conc.Sync.BlockedOnOther -> x_s9LWB;
        };

GHC.Conc.Sync.$fOrdBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.BlockReason
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqBlockReason
                                      GHC.Conc.Sync.$fOrdBlockReason_$ccompare
                                      GHC.Conc.Sync.$fOrdBlockReason_$c<
                                      GHC.Conc.Sync.$fOrdBlockReason_$c<=
                                      GHC.Conc.Sync.$fOrdBlockReason_$c>
                                      GHC.Conc.Sync.$fOrdBlockReason_$c>=
                                      GHC.Conc.Sync.$fOrdBlockReason_$cmax
                                      GHC.Conc.Sync.$fOrdBlockReason_$cmin];

GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s9LWJ b_s9LWK]
        case a_s9LWJ of {
          GHC.Conc.Sync.ThreadRunning ->
              case b_s9LWK of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.EQ [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case b_s9LWK of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.EQ [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LWQ [Occ=Once] ->
              case b_s9LWK of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LWS [Occ=Once] ->
                    GHC.Conc.Sync.$fOrdBlockReason_$ccompare a1_s9LWQ b1_s9LWS;
                GHC.Conc.Sync.ThreadDied -> GHC.Types.LT [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case b_s9LWK of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.EQ [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c<
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LWU y_s9LWV]
        case x_s9LWU of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9LWV of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LWV of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LX1 [Occ=Once!] ->
              case y_s9LWV of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LX3 [Occ=Once*] ->
                    case a1_s9LX1 of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LX3 of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LX3 of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LX3 of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LX3 of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LX3 of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LX3 of { __DEFAULT -> GHC.Types.False []; };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9LWV of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c>=
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LXc y_s9LXd]
        case x_s9LXc of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9LXd of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LXd of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LXj [Occ=Once!] ->
              case y_s9LXd of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LXl [Occ=Once*] ->
                    case a1_s9LXj of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LXl of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LXl of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LXl of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LXl of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LXl of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LXl of { __DEFAULT -> GHC.Types.True []; };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9LXd of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c>
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LXu y_s9LXv]
        case x_s9LXu of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9LXv of { __DEFAULT -> GHC.Types.False []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LXv of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LXA [Occ=Once!] ->
              case y_s9LXv of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LXC [Occ=Once*] ->
                    case a1_s9LXA of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LXC of { __DEFAULT -> GHC.Types.False []; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LXC of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LXC of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LXC of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LXC of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LXC of {
                            __DEFAULT -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.False [];
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9LXv of {
                __DEFAULT -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.False [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$c<=
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LXL y_s9LXM]
        case x_s9LXL of {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9LXM of { __DEFAULT -> GHC.Types.True []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LXM of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> GHC.Types.True [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LXR [Occ=Once!] ->
              case y_s9LXM of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadBlocked b1_s9LXT [Occ=Once*] ->
                    case a1_s9LXR of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LXT of { __DEFAULT -> GHC.Types.True []; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LXT of {
                            GHC.Conc.Sync.BlockedOnMVar -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnBlackHole -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LXT of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnException -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LXT of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnSTM -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LXT of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnForeignCall -> GHC.Types.True [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LXT of {
                            __DEFAULT -> GHC.Types.False [];
                            GHC.Conc.Sync.BlockedOnOther -> GHC.Types.True [];
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9LXM of {
                __DEFAULT -> GHC.Types.False [];
                GHC.Conc.Sync.ThreadDied -> GHC.Types.True [];
              };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$cmax
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LY2 y_s9LY3]
        case x_s9LY2 of wild_s9LY4 {
          GHC.Conc.Sync.ThreadRunning -> y_s9LY3;
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LY3 of wild1_s9LY5 {
                __DEFAULT -> GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] -> wild1_s9LY5;
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadDied [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LY7 [Occ=Once!] ->
              case y_s9LY3 of wild1_s9LY8 {
                __DEFAULT -> wild_s9LY4;
                GHC.Conc.Sync.ThreadBlocked b1_s9LY9 [Occ=Once*] ->
                    case a1_s9LY7 of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LY9 of { __DEFAULT -> wild1_s9LY8; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LY9 of {
                            GHC.Conc.Sync.BlockedOnMVar -> wild_s9LY4;
                            GHC.Conc.Sync.BlockedOnBlackHole -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnException -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9LY8;
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LY9 of {
                            __DEFAULT -> wild_s9LY4;
                            GHC.Conc.Sync.BlockedOnException -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9LY8;
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LY9 of {
                            __DEFAULT -> wild_s9LY4;
                            GHC.Conc.Sync.BlockedOnSTM -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9LY8;
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LY9 of {
                            __DEFAULT -> wild_s9LY4;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild1_s9LY8;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9LY8;
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LY9 of {
                            __DEFAULT -> wild_s9LY4;
                            GHC.Conc.Sync.BlockedOnOther -> wild1_s9LY8;
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadDied [];
              };
          GHC.Conc.Sync.ThreadDied ->
              case y_s9LY3 of { __DEFAULT -> GHC.Conc.Sync.ThreadDied []; };
        };

GHC.Conc.Sync.$fOrdThreadStatus_$cmin
  :: GHC.Conc.Sync.ThreadStatus
     -> GHC.Conc.Sync.ThreadStatus -> GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s9LYi y_s9LYj]
        case x_s9LYi of wild_s9LYk {
          GHC.Conc.Sync.ThreadRunning ->
              case y_s9LYj of { __DEFAULT -> GHC.Conc.Sync.ThreadRunning []; };
          GHC.Conc.Sync.ThreadFinished ->
              case y_s9LYj of {
                GHC.Conc.Sync.ThreadRunning -> GHC.Conc.Sync.ThreadRunning [];
                GHC.Conc.Sync.ThreadFinished -> GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadBlocked _ [Occ=Dead] ->
                    GHC.Conc.Sync.ThreadFinished [];
                GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.ThreadFinished [];
              };
          GHC.Conc.Sync.ThreadBlocked a1_s9LYo [Occ=Once!] ->
              case y_s9LYj of wild1_s9LYp {
                __DEFAULT -> wild1_s9LYp;
                GHC.Conc.Sync.ThreadBlocked b1_s9LYq [Occ=Once*] ->
                    case a1_s9LYo of {
                      GHC.Conc.Sync.BlockedOnMVar ->
                          case b1_s9LYq of { __DEFAULT -> wild_s9LYk; };
                      GHC.Conc.Sync.BlockedOnBlackHole ->
                          case b1_s9LYq of {
                            GHC.Conc.Sync.BlockedOnMVar -> wild1_s9LYp;
                            GHC.Conc.Sync.BlockedOnBlackHole -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnException -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9LYk;
                          };
                      GHC.Conc.Sync.BlockedOnException ->
                          case b1_s9LYq of {
                            __DEFAULT -> wild1_s9LYp;
                            GHC.Conc.Sync.BlockedOnException -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9LYk;
                          };
                      GHC.Conc.Sync.BlockedOnSTM ->
                          case b1_s9LYq of {
                            __DEFAULT -> wild1_s9LYp;
                            GHC.Conc.Sync.BlockedOnSTM -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9LYk;
                          };
                      GHC.Conc.Sync.BlockedOnForeignCall ->
                          case b1_s9LYq of {
                            __DEFAULT -> wild1_s9LYp;
                            GHC.Conc.Sync.BlockedOnForeignCall -> wild_s9LYk;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9LYk;
                          };
                      GHC.Conc.Sync.BlockedOnOther ->
                          case b1_s9LYq of {
                            __DEFAULT -> wild1_s9LYp;
                            GHC.Conc.Sync.BlockedOnOther -> wild_s9LYk;
                          };
                    };
                GHC.Conc.Sync.ThreadDied -> wild_s9LYk;
              };
          GHC.Conc.Sync.ThreadDied -> y_s9LYj;
        };

GHC.Conc.Sync.$fOrdThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqThreadStatus
                                      GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c<
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c<=
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c>
                                      GHC.Conc.Sync.$fOrdThreadStatus_$c>=
                                      GHC.Conc.Sync.$fOrdThreadStatus_$cmax
                                      GHC.Conc.Sync.$fOrdThreadStatus_$cmin];

GHC.Conc.Sync.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Conc.Sync.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$trModule4];

GHC.Conc.Sync.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Conc.Sync"#;

GHC.Conc.Sync.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$trModule2];

GHC.Conc.Sync.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Conc.Sync.$trModule3
                                     GHC.Conc.Sync.$trModule1];

$krep_r9FuN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'LiftedRep
                                              GHC.Types.[]];

$krep1_r9FuO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRuntimeRep
                                              GHC.Types.[]];

$krep2_r9FuP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcRealWorld
                                              GHC.Types.[]];

$krep3_r9FuQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep4_r9FuR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcThreadId#
                                              GHC.Types.[]];

$krep5_r9FuS :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r9FuQ GHC.Types.[]];

$krep6_r9FuT :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r9FuP $krep5_r9FuS];

$krep7_r9FuU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcTVar#
                                              $krep6_r9FuT];

$krep8_r9FuV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r9FuP GHC.Types.[]];

$krep9_r9FuW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcState#
                                              $krep8_r9FuV];

$krep10_r9FuX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r9FuO GHC.Types.[]];

$krep11_r9FuY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'[]
                                              $krep10_r9FuX];

$krep12_r9FuZ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r9FuY GHC.Types.[]];

$krep13_r9Fv0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc'TupleRep
                                              $krep12_r9FuZ];

$krep14_r9Fv1 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r9FuW $krep5_r9FuS];

$krep15_r9Fv2 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r9FuN $krep14_r9Fv1];

$krep16_r9Fv3 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep13_r9Fv0 $krep15_r9Fv2];

$krep17_r9Fv4 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc(#,#)
                                              $krep16_r9Fv3];

$krep18_r9Fv5 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_r9FuW $krep17_r9Fv4];

GHC.Conc.Sync.$tcThreadId2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadId"#;

GHC.Conc.Sync.$tcThreadId1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcThreadId2];

GHC.Conc.Sync.$tcThreadId :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16775948407395805744##
                                    12520674293648100702##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcThreadId1
                                    0#
                                    GHC.Types.krep$*];

$krep19_r9Fv6 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcThreadId
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'ThreadId1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r9FuR $krep19_r9Fv6];

GHC.Conc.Sync.$tc'ThreadId3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadId"#;

GHC.Conc.Sync.$tc'ThreadId2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadId3];

GHC.Conc.Sync.$tc'ThreadId :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18342150043682338300##
                                    5104860271509165481##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadId2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadId1];

GHC.Conc.Sync.$tcBlockReason2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BlockReason"#;

GHC.Conc.Sync.$tcBlockReason1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcBlockReason2];

GHC.Conc.Sync.$tcBlockReason :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13301038780413995570##
                                    11021250300446969031##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcBlockReason1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tc'BlockedOnBlackHole1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcBlockReason
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'BlockedOnMVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnMVar"#;

GHC.Conc.Sync.$tc'BlockedOnMVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnMVar2];

GHC.Conc.Sync.$tc'BlockedOnMVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6633002816895506850##
                                    13520604374172074732##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnMVar1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnBlackHole3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnBlackHole"#;

GHC.Conc.Sync.$tc'BlockedOnBlackHole2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnBlackHole3];

GHC.Conc.Sync.$tc'BlockedOnBlackHole :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9499731398899925739##
                                    7296688042620961692##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole2
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnException2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnException"#;

GHC.Conc.Sync.$tc'BlockedOnException1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnException2];

GHC.Conc.Sync.$tc'BlockedOnException :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16834505563200403543##
                                    10899729493106152581##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnException1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnSTM2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnSTM"#;

GHC.Conc.Sync.$tc'BlockedOnSTM1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnSTM2];

GHC.Conc.Sync.$tc'BlockedOnSTM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1161208048218837616##
                                    14246412223428266787##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnSTM1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnForeignCall2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnForeignCall"#;

GHC.Conc.Sync.$tc'BlockedOnForeignCall1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnForeignCall2];

GHC.Conc.Sync.$tc'BlockedOnForeignCall :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7408412473094687054##
                                    5512662453084487661##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnForeignCall1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tc'BlockedOnOther2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BlockedOnOther"#;

GHC.Conc.Sync.$tc'BlockedOnOther1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'BlockedOnOther2];

GHC.Conc.Sync.$tc'BlockedOnOther :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12822899422417308746##
                                    1265626399802742388##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'BlockedOnOther1
                                    0#
                                    GHC.Conc.Sync.$tc'BlockedOnBlackHole1];

GHC.Conc.Sync.$tcThreadStatus2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadStatus"#;

GHC.Conc.Sync.$tcThreadStatus1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcThreadStatus2];

GHC.Conc.Sync.$tcThreadStatus :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16437204929171641638##
                                    3495092226815585861##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcThreadStatus1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tc'ThreadDied1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcThreadStatus
                                              GHC.Types.[]];

GHC.Conc.Sync.$tc'ThreadRunning2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadRunning"#;

GHC.Conc.Sync.$tc'ThreadRunning1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadRunning2];

GHC.Conc.Sync.$tc'ThreadRunning :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1667122312602609882##
                                    13647871799576313560##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadRunning1
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadFinished2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadFinished"#;

GHC.Conc.Sync.$tc'ThreadFinished1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadFinished2];

GHC.Conc.Sync.$tc'ThreadFinished :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2441107603776884109##
                                    12730966154693836607##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadFinished1
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadDied3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadDied"#;

GHC.Conc.Sync.$tc'ThreadDied2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadDied3];

GHC.Conc.Sync.$tc'ThreadDied :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9513974555658789847##
                                    4757719484357493227##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadDied2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadBlocked1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Conc.Sync.$tc'BlockedOnBlackHole1
                                         GHC.Conc.Sync.$tc'ThreadDied1];

GHC.Conc.Sync.$tc'ThreadBlocked3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ThreadBlocked"#;

GHC.Conc.Sync.$tc'ThreadBlocked2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'ThreadBlocked3];

GHC.Conc.Sync.$tc'ThreadBlocked :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1896650886570328403##
                                    13390928353603149841##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'ThreadBlocked2
                                    0#
                                    GHC.Conc.Sync.$tc'ThreadBlocked1];

GHC.Conc.Sync.$tcPrimMVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrimMVar"#;

GHC.Conc.Sync.$tcPrimMVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcPrimMVar2];

GHC.Conc.Sync.$tcPrimMVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9965391380168186507##
                                    18322737771689556223##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcPrimMVar1
                                    0#
                                    GHC.Types.krep$*];

GHC.Conc.Sync.$tcSTM2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STM"#;

GHC.Conc.Sync.$tcSTM1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcSTM2];

GHC.Conc.Sync.$tcSTM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2004856025729794332##
                                    14974623362753764267##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcSTM1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep20_r9Fv7 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcSTM
                                              $krep5_r9FuS];

GHC.Conc.Sync.$tc'STM1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r9Fv5 $krep20_r9Fv7];

GHC.Conc.Sync.$tc'STM3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'STM"#;

GHC.Conc.Sync.$tc'STM2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'STM3];

GHC.Conc.Sync.$tc'STM :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11288073744523536973##
                                    9767688212531311940##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'STM2
                                    1#
                                    GHC.Conc.Sync.$tc'STM1];

GHC.Conc.Sync.$tcTVar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TVar"#;

GHC.Conc.Sync.$tcTVar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tcTVar2];

GHC.Conc.Sync.$tcTVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13084572405727191592##
                                    5232564955606145236##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tcTVar1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep21_r9Fv8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Conc.Sync.$tcTVar
                                              $krep5_r9FuS];

GHC.Conc.Sync.$tc'TVar1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r9FuU $krep21_r9Fv8];

GHC.Conc.Sync.$tc'TVar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'TVar"#;

GHC.Conc.Sync.$tc'TVar2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Conc.Sync.$tc'TVar3];

GHC.Conc.Sync.$tc'TVar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9463269625853265574##
                                    3517068532143837766##
                                    GHC.Conc.Sync.$trModule
                                    GHC.Conc.Sync.$tc'TVar2
                                    1#
                                    GHC.Conc.Sync.$tc'TVar1];

GHC.Conc.Sync.$fShowThreadId2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadId "#;

GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
  :: GHC.Types.Int -> GHC.Conc.Sync.ThreadId -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(U)><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [d_s9LYy t_s9LYz]
        let {
          x_s9LYA [Occ=OnceL, Dmd=<L,U(U)>] :: Foreign.C.Types.CInt
          [LclId] =
              [t_s9LYz] \u []
                  case t_s9LYz of {
                    GHC.Conc.Sync.ThreadId t1_s9LYC [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t1_s9LYC GHC.Prim.realWorld#] of {
                          Unit# ds1_s9LYG [Occ=Once] ->
                              case narrow32Int# [ds1_s9LYG] of sat_s9LYH {
                                __DEFAULT -> GHC.Int.I32# [sat_s9LYH];
                              };
                        };
                  }; } in
        let {
          sat_s9LYR [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [d_s9LYy x_s9LYA] \r [x1_s9LYI]
                  let {
                    sat_s9LYQ [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [d_s9LYy x_s9LYA x1_s9LYI] \u []
                            case x_s9LYA of {
                              GHC.Int.I32# x#_s9LYK [Occ=Once] ->
                                  case d_s9LYy of {
                                    GHC.Types.I# ww1_s9LYM [Occ=Once] ->
                                        case
                                            GHC.Show.$wshowSignedInt ww1_s9LYM x#_s9LYK x1_s9LYI
                                        of
                                        { (#,#) ww5_s9LYO [Occ=Once] ww6_s9LYP [Occ=Once] ->
                                              : [ww5_s9LYO ww6_s9LYP];
                                        };
                                  };
                            };
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.Conc.Sync.$fShowThreadId2 sat_s9LYQ;
        } in  sat_s9LYR;

GHC.Conc.Sync.$fShowThreadId_$cshow
  :: GHC.Conc.Sync.ThreadId -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [x_s9LYS]
        let {
          sat_s9LZ3 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_s9LYS] \u []
                  case x_s9LYS of {
                    GHC.Conc.Sync.ThreadId t_s9LYU [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t_s9LYU GHC.Prim.realWorld#] of {
                          Unit# ds1_s9LYY [Occ=Once] ->
                              case narrow32Int# [ds1_s9LYY] of sat_s9LYZ {
                                __DEFAULT ->
                                    case GHC.Show.$wshowSignedInt 0# sat_s9LYZ GHC.Types.[] of {
                                      (#,#) ww5_s9LZ1 [Occ=Once] ww6_s9LZ2 [Occ=Once] ->
                                          : [ww5_s9LZ1 ww6_s9LZ2];
                                    };
                              };
                        };
                  };
        } in 
          GHC.CString.unpackAppendCString#
              GHC.Conc.Sync.$fShowThreadId2 sat_s9LZ3;

GHC.Conc.Sync.$fShowThreadId1
  :: GHC.Conc.Sync.ThreadId -> GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [t_s9LZ4]
        let {
          x_s9LZ5 [Occ=OnceL, Dmd=<L,U(U)>] :: Foreign.C.Types.CInt
          [LclId] =
              [t_s9LZ4] \u []
                  case t_s9LZ4 of {
                    GHC.Conc.Sync.ThreadId t1_s9LZ7 [Occ=Once] ->
                        case __pkg_ccall base-4.11.0.0 [t1_s9LZ7 GHC.Prim.realWorld#] of {
                          Unit# ds1_s9LZb [Occ=Once] ->
                              case narrow32Int# [ds1_s9LZb] of sat_s9LZc {
                                __DEFAULT -> GHC.Int.I32# [sat_s9LZc];
                              };
                        };
                  }; } in
        let {
          sat_s9LZk [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [x_s9LZ5] \r [x1_s9LZd]
                  let {
                    sat_s9LZj [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [x_s9LZ5 x1_s9LZd] \u []
                            case x_s9LZ5 of {
                              GHC.Int.I32# x#_s9LZf [Occ=Once] ->
                                  case GHC.Show.$wshowSignedInt 0# x#_s9LZf x1_s9LZd of {
                                    (#,#) ww5_s9LZh [Occ=Once] ww6_s9LZi [Occ=Once] ->
                                        : [ww5_s9LZh ww6_s9LZi];
                                  };
                            };
                  } in 
                    GHC.CString.unpackAppendCString#
                        GHC.Conc.Sync.$fShowThreadId2 sat_s9LZj;
        } in  sat_s9LZk;

GHC.Conc.Sync.$fShowThreadId_$cshowList
  :: [GHC.Conc.Sync.ThreadId] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s9LZl s_s9LZm]
        GHC.Show.showList__ GHC.Conc.Sync.$fShowThreadId1 ls_s9LZl s_s9LZm;

GHC.Conc.Sync.$fShowThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
                                    GHC.Conc.Sync.$fShowThreadId_$cshow
                                    GHC.Conc.Sync.$fShowThreadId_$cshowList];

reportHeapOverflow1_r9Fv9
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          (##) -> Unit# [GHC.Tuple.()];
        };

GHC.Conc.Sync.reportHeapOverflow :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] reportHeapOverflow1_r9Fv9 GHC.Prim.void#;

GHC.Conc.Sync.cmpThread
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [t1_s9LZr t2_s9LZs]
        case t2_s9LZs of {
          GHC.Conc.Sync.ThreadId t_s9LZu [Occ=Once] ->
              case t1_s9LZr of {
                GHC.Conc.Sync.ThreadId t4_s9LZw [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t4_s9LZw t_s9LZu GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9LZA [Occ=Once] ->
                          case narrow32Int# [ds1_s9LZA] of {
                            __DEFAULT -> GHC.Types.GT [];
                            -1# -> GHC.Types.LT [];
                            0# -> GHC.Types.EQ [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId_$c==
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [t1_s9LZC t2_s9LZD]
        case t2_s9LZD of {
          GHC.Conc.Sync.ThreadId t_s9LZF [Occ=Once] ->
              case t1_s9LZC of {
                GHC.Conc.Sync.ThreadId t4_s9LZH [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t4_s9LZH t_s9LZF GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9LZL [Occ=Once] ->
                          case narrow32Int# [ds1_s9LZL] of {
                            __DEFAULT -> GHC.Types.False [];
                            0# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [eta_s9LZN eta1_s9LZO]
        case eta1_s9LZO of {
          GHC.Conc.Sync.ThreadId t_s9LZQ [Occ=Once] ->
              case eta_s9LZN of {
                GHC.Conc.Sync.ThreadId t1_s9LZS [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9LZS t_s9LZQ GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9LZW [Occ=Once] ->
                          case narrow32Int# [ds1_s9LZW] of {
                            __DEFAULT -> GHC.Types.True [];
                            0# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fEqThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Conc.Sync.$fEqThreadId_$c==
                                     GHC.Conc.Sync.$fEqThreadId_$c/=];

GHC.Conc.Sync.$fOrdThreadId_$c<
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9LZY y_s9LZZ]
        case y_s9LZZ of {
          GHC.Conc.Sync.ThreadId t_s9M01 [Occ=Once] ->
              case x_s9LZY of {
                GHC.Conc.Sync.ThreadId t1_s9M03 [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M03 t_s9M01 GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9M07 [Occ=Once] ->
                          case narrow32Int# [ds1_s9M07] of {
                            __DEFAULT -> GHC.Types.False [];
                            -1# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c>=
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9M09 y_s9M0a]
        case y_s9M0a of {
          GHC.Conc.Sync.ThreadId t_s9M0c [Occ=Once] ->
              case x_s9M09 of {
                GHC.Conc.Sync.ThreadId t1_s9M0e [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M0e t_s9M0c GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9M0i [Occ=Once] ->
                          case narrow32Int# [ds1_s9M0i] of {
                            __DEFAULT -> GHC.Types.True [];
                            -1# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c>
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9M0k y_s9M0l]
        case y_s9M0l of {
          GHC.Conc.Sync.ThreadId t_s9M0n [Occ=Once] ->
              case x_s9M0k of {
                GHC.Conc.Sync.ThreadId t1_s9M0p [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M0p t_s9M0n GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9M0t [Occ=Once] ->
                          case narrow32Int# [ds1_s9M0t] of {
                            __DEFAULT -> GHC.Types.True [];
                            -1# -> GHC.Types.False [];
                            0# -> GHC.Types.False [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$c<=
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s9M0v y_s9M0w]
        case y_s9M0w of {
          GHC.Conc.Sync.ThreadId t_s9M0y [Occ=Once] ->
              case x_s9M0v of {
                GHC.Conc.Sync.ThreadId t1_s9M0A [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M0A t_s9M0y GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9M0E [Occ=Once] ->
                          case narrow32Int# [ds1_s9M0E] of {
                            __DEFAULT -> GHC.Types.False [];
                            -1# -> GHC.Types.True [];
                            0# -> GHC.Types.True [];
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$cmax
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Conc.Sync.ThreadId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s9M0G y_s9M0H]
        case y_s9M0H of wild_s9M0I {
          GHC.Conc.Sync.ThreadId t_s9M0J [Occ=Once] ->
              case x_s9M0G of wild1_s9M0K {
                GHC.Conc.Sync.ThreadId t1_s9M0L [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M0L t_s9M0J GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9M0P [Occ=Once] ->
                          case narrow32Int# [ds1_s9M0P] of {
                            __DEFAULT -> wild1_s9M0K;
                            -1# -> wild_s9M0I;
                            0# -> wild_s9M0I;
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId_$cmin
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Conc.Sync.ThreadId -> GHC.Conc.Sync.ThreadId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s9M0R y_s9M0S]
        case y_s9M0S of wild_s9M0T {
          GHC.Conc.Sync.ThreadId t_s9M0U [Occ=Once] ->
              case x_s9M0R of wild1_s9M0V {
                GHC.Conc.Sync.ThreadId t1_s9M0W [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [t1_s9M0W t_s9M0U GHC.Prim.realWorld#]
                    of
                    { Unit# ds1_s9M10 [Occ=Once] ->
                          case narrow32Int# [ds1_s9M10] of {
                            __DEFAULT -> wild_s9M0T;
                            -1# -> wild1_s9M0V;
                            0# -> wild1_s9M0V;
                          };
                    };
              };
        };

GHC.Conc.Sync.$fOrdThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Conc.Sync.ThreadId
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Conc.Sync.$fEqThreadId
                                      GHC.Conc.Sync.cmpThread
                                      GHC.Conc.Sync.$fOrdThreadId_$c<
                                      GHC.Conc.Sync.$fOrdThreadId_$c<=
                                      GHC.Conc.Sync.$fOrdThreadId_$c>
                                      GHC.Conc.Sync.$fOrdThreadId_$c>=
                                      GHC.Conc.Sync.$fOrdThreadId_$cmax
                                      GHC.Conc.Sync.$fOrdThreadId_$cmin];

GHC.Conc.Sync.$fShowThreadStatus10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadRunning"#;

GHC.Conc.Sync.$fShowThreadStatus9 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus10;

GHC.Conc.Sync.$fShowThreadStatus8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadFinished"#;

GHC.Conc.Sync.$fShowThreadStatus7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus8;

GHC.Conc.Sync.$fShowThreadStatus6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadBlocked "#;

GHC.Conc.Sync.$fShowThreadStatus5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus6;

GHC.Conc.Sync.$fShowThreadStatus4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ThreadDied"#;

GHC.Conc.Sync.$fShowThreadStatus3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Conc.Sync.$fShowThreadStatus4;

GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
  :: GHC.Types.Int -> GHC.Conc.Sync.ThreadStatus -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,1*U(U)><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s9M12 ds1_s9M13 eta_s9M14]
        case ds1_s9M13 of {
          GHC.Conc.Sync.ThreadRunning ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus9 eta_s9M14;
          GHC.Conc.Sync.ThreadFinished ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus7 eta_s9M14;
          GHC.Conc.Sync.ThreadBlocked b1_s9M16 [Occ=Once*] ->
              case ds_s9M12 of {
                GHC.Types.I# x_s9M18 [Occ=Once] ->
                    case >=# [x_s9M18 11#] of {
                      __DEFAULT ->
                          let {
                            sat_s9M1a [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [eta_s9M14 b1_s9M16] \s []
                                    GHC.Conc.Sync.$w$cshowsPrec b1_s9M16 eta_s9M14;
                          } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9M1a;
                      1# ->
                          let {
                            sat_s9M1d [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [eta_s9M14 b1_s9M16] \u []
                                    let {
                                      sat_s9M1c [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                      [LclId] =
                                          [eta_s9M14 b1_s9M16] \s []
                                              let {
                                                sat_s9M1b [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    CCCS :! [GHC.Show.$fShow(,)2 eta_s9M14];
                                              } in  GHC.Conc.Sync.$w$cshowsPrec b1_s9M16 sat_s9M1b;
                                    } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9M1c;
                          } in  : [GHC.Show.$fShow(,)4 sat_s9M1d];
                    };
              };
          GHC.Conc.Sync.ThreadDied ->
              GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus3 eta_s9M14;
        };

GHC.Conc.Sync.$fShowThreadStatus_$cshow
  :: GHC.Conc.Sync.ThreadStatus -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s9M1e]
        case x_s9M1e of {
          GHC.Conc.Sync.ThreadRunning -> GHC.Conc.Sync.$fShowThreadStatus9;
          GHC.Conc.Sync.ThreadFinished -> GHC.Conc.Sync.$fShowThreadStatus7;
          GHC.Conc.Sync.ThreadBlocked b1_s9M1g [Occ=Once] ->
              let {
                sat_s9M1h [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [b1_s9M1g] \s [] GHC.Conc.Sync.$w$cshowsPrec b1_s9M1g GHC.Types.[];
              } in  GHC.Base.++ GHC.Conc.Sync.$fShowThreadStatus5 sat_s9M1h;
          GHC.Conc.Sync.ThreadDied -> GHC.Conc.Sync.$fShowThreadStatus3;
        };

GHC.Conc.Sync.$fShowThreadStatus2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Conc.Sync.$fShowThreadStatus1
  :: GHC.Conc.Sync.ThreadStatus -> GHC.Show.ShowS
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
            GHC.Conc.Sync.$fShowThreadStatus2 eta_B2 eta_B1;

GHC.Conc.Sync.$fShowThreadStatus_$cshowList
  :: [GHC.Conc.Sync.ThreadStatus] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s9M1i s_s9M1j]
        GHC.Show.showList__
            GHC.Conc.Sync.$fShowThreadStatus1 ls_s9M1i s_s9M1j;

GHC.Conc.Sync.$fShowThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Conc.Sync.ThreadStatus
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
                                    GHC.Conc.Sync.$fShowThreadStatus_$cshow
                                    GHC.Conc.Sync.$fShowThreadStatus_$cshowList];

GHC.Conc.Sync.killThread2 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionAsyncException_$ctoException
            GHC.IO.Exception.ThreadKilled;

GHC.Conc.Sync.killThread1
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [tid_s9M1k void_0E]
        case tid_s9M1k of {
          GHC.Conc.Sync.ThreadId tid1_s9M1n [Occ=Once] ->
              case
                  killThread# [tid1_s9M1n GHC.Conc.Sync.killThread2 GHC.Prim.void#]
              of
              s1_s9M1o
              { (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.killThread
  :: GHC.Conc.Sync.ThreadId -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.killThread1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.getNumProcessors1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          Unit# ds1_s9M1t [Occ=Once] ->
              case narrow32Word# [ds1_s9M1t] of sat_s9M1u {
                __DEFAULT ->
                    case word2Int# [sat_s9M1u] of sat_s9M1v {
                      __DEFAULT ->
                          let {
                            sat_s9M1w [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Types.I#! [sat_s9M1v];
                          } in  Unit# [sat_s9M1w];
                    };
              };
        };

GHC.Conc.Sync.getNumProcessors :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.getNumProcessors1 GHC.Prim.void#;

GHC.Conc.Sync.threadStatus7 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnOther];

GHC.Conc.Sync.threadStatus6 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnMVar];

GHC.Conc.Sync.threadStatus2 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnException];

GHC.Conc.Sync.threadStatus3 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnForeignCall];

GHC.Conc.Sync.threadStatus4 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnSTM];

GHC.Conc.Sync.threadStatus5 :: GHC.Conc.Sync.ThreadStatus
[GblId, Caf=NoCafRefs, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadBlocked! [GHC.Conc.Sync.BlockedOnBlackHole];

GHC.Conc.Sync.$wthreadStatus [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Conc.Sync.ThreadStatus #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s9M1x void_0E]
        case threadStatus# [ww_s9M1x GHC.Prim.void#] of {
          (#,,#) ipv1_s9M1B [Occ=Once!] _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                sat_s9M1F [Occ=Once] :: GHC.Conc.Sync.ThreadStatus
                [LclId] =
                    [ipv1_s9M1B] \u []
                        case ipv1_s9M1B of {
                          __DEFAULT -> GHC.Conc.Sync.threadStatus7;
                          0# -> GHC.Conc.Sync.ThreadRunning [];
                          1# -> GHC.Conc.Sync.threadStatus6;
                          2# -> GHC.Conc.Sync.threadStatus5;
                          6# -> GHC.Conc.Sync.threadStatus4;
                          10# -> GHC.Conc.Sync.threadStatus3;
                          11# -> GHC.Conc.Sync.threadStatus3;
                          12# -> GHC.Conc.Sync.threadStatus2;
                          14# -> GHC.Conc.Sync.threadStatus6;
                          16# -> GHC.Conc.Sync.ThreadFinished [];
                          17# -> GHC.Conc.Sync.ThreadDied [];
                        };
              } in  Unit# [sat_s9M1F];
        };

GHC.Conc.Sync.threadStatus1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Conc.Sync.ThreadStatus #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9M1G void_0E]
        case w_s9M1G of {
          GHC.Conc.Sync.ThreadId ww1_s9M1J [Occ=Once] ->
              GHC.Conc.Sync.$wthreadStatus ww1_s9M1J GHC.Prim.void#;
        };

GHC.Conc.Sync.threadStatus
  :: GHC.Conc.Sync.ThreadId
     -> GHC.Types.IO GHC.Conc.Sync.ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.threadStatus1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$fFunctorSTM2
  :: forall a b.
     (a -> b)
     -> GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><C(S(SL)),1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [f_s9M1K x_s9M1L void_0E]
        case x_s9M1L GHC.Prim.void# of {
          Unit# ipv1_s9M1P [Occ=Once] ->
              let {
                sat_s9M1Q [Occ=Once] :: b_a9Da0
                [LclId] =
                    [f_s9M1K ipv1_s9M1P] \u [] f_s9M1K ipv1_s9M1P;
              } in  Unit# [sat_s9M1Q];
        };

GHC.Conc.Sync.$fFunctorSTM1
  :: forall a b.
     a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(S(SL)),1*C1(U(U,A))><S,U>,
 Unf=OtherCon []] =
    [] \r [x_s9M1R eta_s9M1S void_0E]
        case eta_s9M1S GHC.Prim.void# of {
          Unit# _ [Occ=Dead] -> Unit# [x_s9M1R];
        };

GHC.Conc.Sync.$fApplicativeSTM2
  :: forall b a.
     GHC.Conc.Sync.STM (a -> b)
     -> GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,1*C1(U)))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [m1_s9M1X m2_s9M1Y void_0E]
        case m1_s9M1X GHC.Prim.void# of {
          Unit# ipv1_s9M22 [Occ=Once!] ->
              case m2_s9M1Y GHC.Prim.void# of {
                Unit# ipv3_s9M25 [Occ=Once] ->
                    let {
                      sat_s9M26 [Occ=Once] :: b_a9D90
                      [LclId] =
                          [ipv1_s9M22 ipv3_s9M25] \u [] ipv1_s9M22 ipv3_s9M25;
                    } in  Unit# [sat_s9M26];
              };
        };

$cliftA2_r9Fva
  :: forall c b a.
     (a -> b -> c)
     -> GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, c #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [f_s9M27 m1_s9M28 m2_s9M29 void_0E]
        case m1_s9M28 GHC.Prim.void# of {
          Unit# ipv1_s9M2d [Occ=Once] ->
              case m2_s9M29 GHC.Prim.void# of {
                Unit# ipv3_s9M2g [Occ=Once] ->
                    let {
                      sat_s9M2h [Occ=Once] :: c_a9D9j
                      [LclId] =
                          [f_s9M27 ipv1_s9M2d ipv3_s9M2g] \u []
                              f_s9M27 ipv1_s9M2d ipv3_s9M2g;
                    } in  Unit# [sat_s9M2h];
              };
        };

GHC.Conc.Sync.$fApplicativeSTM_$cliftA2 [InlPrag=INLINE (sat-args=0)]
  :: forall a b c.
     (a -> b -> c)
     -> GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Conc.Sync.STM c
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $cliftA2_r9Fva eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$fApplicativeSTM1
  :: forall a b.
     GHC.Conc.Sync.STM a
     -> GHC.Conc.Sync.STM b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,A))><S,U>,
 Unf=OtherCon []] =
    [] \r [m1_s9M2i m2_s9M2j void_0E]
        case m1_s9M2i GHC.Prim.void# of {
          Unit# ipv1_s9M2n [Occ=Once] ->
              case m2_s9M2j GHC.Prim.void# of {
                Unit# _ [Occ=Dead] -> Unit# [ipv1_s9M2n];
              };
        };

GHC.Conc.Sync.$fFunctorSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor GHC.Conc.Sync.STM
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [GHC.Conc.Sync.$fFunctorSTM2
                                       GHC.Conc.Sync.$fFunctorSTM1];

GHC.Conc.Sync.$fApplicativeSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [GHC.Conc.Sync.$fFunctorSTM
                                           GHC.Conc.Sync.$fApplicativeSTM_$cpure
                                           GHC.Conc.Sync.$fApplicativeSTM2
                                           GHC.Conc.Sync.$fApplicativeSTM_$cliftA2
                                           GHC.Conc.Sync.$fApplicativeSTM_$c*>
                                           GHC.Conc.Sync.$fApplicativeSTM1];

lvl_r9Fvb :: forall a. [GHC.Types.Char] -> GHC.Conc.Sync.STM a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s9M2r] GHC.Err.errorWithoutStackTrace eta_s9M2r;

GHC.Conc.Sync.$fMonadSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [GHC.Conc.Sync.$fApplicativeSTM
                                     GHC.Conc.Sync.$fMonadSTM_$c>>=
                                     GHC.Conc.Sync.$fApplicativeSTM_$c*>
                                     GHC.Conc.Sync.$fApplicativeSTM_$cpure
                                     lvl_r9Fvb];

GHC.Conc.Sync.always2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [GHC.Tuple.()];

GHC.Conc.Sync.alwaysSucceeds1
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<xB,U><S,U>, Unf=OtherCon []] =
    [] \r [i_s9M2t void_0E]
        let {
          sat_s9M2z [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [i_s9M2t] \r [void_0E]
                  case i_s9M2t GHC.Prim.void# of {
                    Unit# _ [Occ=Dead] -> retry# [GHC.Prim.void#];
                  };
        } in 
          case
              catchRetry# [sat_s9M2z GHC.Conc.Sync.always2 GHC.Prim.void#]
          of
          { Unit# _ [Occ=Dead] ->
                case check# [i_s9M2t GHC.Prim.void#] of s'_s9M2D {
                  (##) -> Unit# [GHC.Tuple.()];
                };
          };

GHC.Conc.Sync.alwaysSucceeds
  :: forall a. GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM ()
[GblId, Arity=2, Caf=NoCafRefs, Str=<xB,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.alwaysSucceeds1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$fAlternativeSTM2
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] Unit# [GHC.Types.[]];

GHC.Conc.Sync.$fAlternativeSTM3
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S(SL)),C(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [v_s9M2F void_0E]
        let {
          some_v_s9M2H [Occ=LoopBreaker]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7E] #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              [v_s9M2F some_v_s9M2H] \r [void_0E]
                  case v_s9M2F GHC.Prim.void# of {
                    Unit# ipv1_s9M2L [Occ=Once] ->
                        case
                            catchRetry# [some_v_s9M2H
                                         GHC.Conc.Sync.$fAlternativeSTM2
                                         GHC.Prim.void#]
                        of
                        { Unit# ipv3_s9M2O [Occ=Once] ->
                              let {
                                sat_s9M2P [Occ=Once] :: [a_a9D7E]
                                [LclId] =
                                    CCCS :! [ipv1_s9M2L ipv3_s9M2O];
                              } in  Unit# [sat_s9M2P];
                        };
                  };
        } in  some_v_s9M2H GHC.Prim.void#;

GHC.Conc.Sync.$fAlternativeSTM1
  :: forall a.
     GHC.Conc.Sync.STM a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U(U,U))><S,U>,
 Unf=OtherCon []] =
    [] \r [v_s9M2Q void_0E]
        let {
          many_v_s9M2S [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7Q] #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              [v_s9M2Q many_v1_s9M2T] \r [void_0E]
                  case v_s9M2Q GHC.Prim.void# of {
                    Unit# ipv1_s9M2X [Occ=Once] ->
                        case many_v1_s9M2T GHC.Prim.void# of {
                          Unit# ipv3_s9M30 [Occ=Once] ->
                              let {
                                sat_s9M31 [Occ=Once] :: [a_a9D7Q]
                                [LclId] =
                                    CCCS :! [ipv1_s9M2X ipv3_s9M30];
                              } in  Unit# [sat_s9M31];
                        };
                  };
          many_v1_s9M2T [Occ=LoopBreaker]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, [a_a9D7Q] #)
          [LclId, Arity=1, Unf=OtherCon []] =
              sat-only [many_v_s9M2S] \r [void_0E]
                  catchRetry# [many_v_s9M2S
                               GHC.Conc.Sync.$fAlternativeSTM2
                               GHC.Prim.void#];
        } in  many_v1_s9M2T GHC.Prim.void#;

sat_s9M33
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B3 eta_B2 void_0E]
        catchRetry# [eta_B3 eta_B2 GHC.Prim.void#];

sat_s9M32 :: forall a. GHC.Conc.Sync.STM a
[LclId] =
    [] \r [void_0E] retry# [GHC.Prim.void#];

GHC.Conc.Sync.$fAlternativeSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Alternative GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Alternative! [GHC.Conc.Sync.$fApplicativeSTM
                                           sat_s9M32
                                           sat_s9M33
                                           GHC.Conc.Sync.$fAlternativeSTM3
                                           GHC.Conc.Sync.$fAlternativeSTM1];

sat_s9M35
  :: forall a.
     GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a -> GHC.Conc.Sync.STM a
[LclId] =
    [] \r [eta_B3 eta_B2 void_0E]
        catchRetry# [eta_B3 eta_B2 GHC.Prim.void#];

sat_s9M34 :: forall a. GHC.Conc.Sync.STM a
[LclId] =
    [] \r [void_0E] retry# [GHC.Prim.void#];

GHC.Conc.Sync.$fMonadPlusSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.MonadPlus GHC.Conc.Sync.STM
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:MonadPlus! [GHC.Conc.Sync.$fAlternativeSTM
                                         GHC.Conc.Sync.$fMonadSTM
                                         sat_s9M34
                                         sat_s9M35];

lvl1_r9Fvc :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Transactional invariant violation"#;

GHC.Conc.Sync.always3 :: GHC.Conc.Sync.STM ()
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl1_r9Fvc of sat_s9M36 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s9M36;
        };

GHC.Conc.Sync.always1
  :: GHC.Conc.Sync.STM GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<xB,C(U(U,1*U))><S,U>, Unf=OtherCon []] =
    [] \r [i_s9M37 void_0E]
        let {
          sat_s9M3f [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [i_s9M37] \r [void_0E]
                  case i_s9M37 GHC.Prim.void# of {
                    Unit# ipv1_s9M3c [Occ=Once!] ->
                        case ipv1_s9M3c of {
                          GHC.Types.False -> GHC.Conc.Sync.always3;
                          GHC.Types.True -> retry# [GHC.Prim.void#];
                        };
                  };
        } in 
          case
              catchRetry# [sat_s9M3f GHC.Conc.Sync.always2 GHC.Prim.void#]
          of
          { Unit# _ [Occ=Dead] ->
                let {
                  sat_s9M3p [Occ=Once]
                    :: GHC.Prim.State# GHC.Prim.RealWorld
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                  [LclId] =
                      [i_s9M37] \r [void_0E]
                          case i_s9M37 GHC.Prim.void# of {
                            Unit# ipv3_s9M3m [Occ=Once!] ->
                                case ipv3_s9M3m of {
                                  GHC.Types.False -> GHC.Conc.Sync.always3;
                                  GHC.Types.True -> Unit# [GHC.Tuple.()];
                                };
                          };
                } in 
                  case check# [sat_s9M3p GHC.Prim.void#] of s'_s9M3q {
                    (##) -> Unit# [GHC.Tuple.()];
                  };
          };

GHC.Conc.Sync.always
  :: GHC.Conc.Sync.STM GHC.Types.Bool -> GHC.Conc.Sync.STM ()
[GblId, Arity=2, Str=<xB,C(U(U,1*U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.Conc.Sync.always1 eta_B2 GHC.Prim.void#;

lvl2_r9Fvd :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "no threads to run:  infinite loop or deadlock?"#;

lvl3_r9Fve :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_r9Fvd;

lvl4_r9Fvf
  :: Data.Typeable.Internal.TypeRep GHC.IO.Exception.Deadlock
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                18363794241794644491##
                11186984538024031318##
                GHC.IO.Exception.$trModule
                GHC.IO.Exception.$fExceptionDeadlock4
                0#
                GHC.Types.krep$*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_s9M3s [Occ=Once]
                   ww9_s9M3t [Occ=Once]
                   ww10_s9M3u [Occ=Once]
                   ww11_s9M3v [Occ=Once]
                   ww12_s9M3w [Occ=Once] ->
              Data.Typeable.Internal.TrTyCon [ww8_s9M3s
                                              ww9_s9M3t
                                              ww10_s9M3u
                                              ww11_s9M3v
                                              ww12_s9M3w];
        };

lvl5_r9Fvg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s"#;

lvl6_r9Fvh :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_r9Fvg;

lvl7_r9Fvi
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds1_s9M3x void_0E]
        case ds1_s9M3x of {
          GHC.Exception.SomeException _ [Occ=Dead] _ [Occ=Dead] ->
              Unit# [GHC.Tuple.()];
        };

lvl8_r9Fvj :: GHC.Types.IO ()
[GblId] =
    [] \u [] GHC.IO.Handle.hFlush GHC.IO.Handle.FD.stdout;

lvl9_r9Fvk
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [se_s9M3C void_0E]
        case se_s9M3C of {
          GHC.Exception.SomeException $dException_s9M3F
                                      ex_s9M3G [Occ=Once*] ->
              case lvl8_r9Fvj of io_s9M3H {
                __DEFAULT ->
                    case catch# [io_s9M3H lvl7_r9Fvi GHC.Prim.void#] of {
                      Unit# _ [Occ=Dead] ->
                          case GHC.IO.Encoding.getForeignEncoding GHC.Prim.void# of {
                            Unit# ipv3_s9M3N [Occ=Once] ->
                                let {
                                  msg_s9M3O [Occ=OnceL] :: [GHC.Types.Char]
                                  [LclId] =
                                      [$dException_s9M3F ex_s9M3G] \u []
                                          case
                                              GHC.Exception.$p1Exception $dException_s9M3F
                                          of
                                          sat_s9M3P
                                          { __DEFAULT ->
                                                case
                                                    Data.Typeable.Internal.sameTypeRep
                                                        sat_s9M3P lvl4_r9Fvf
                                                of
                                                { GHC.Types.False ->
                                                      case
                                                          GHC.Exception.$p2Exception
                                                              $dException_s9M3F
                                                      of
                                                      sat_s9M3R
                                                      { __DEFAULT ->
                                                            GHC.Show.showsPrec
                                                                sat_s9M3R
                                                                GHC.Conc.Sync.$fShowThreadStatus2
                                                                ex_s9M3G
                                                                GHC.Types.[];
                                                      };
                                                  GHC.Types.True ->
                                                      case ex_s9M3G of {
                                                        GHC.IO.Exception.Deadlock -> lvl3_r9Fve;
                                                      };
                                                };
                                          }; } in
                                let {
                                  sat_s9M48 [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                                  [LclId] =
                                      [msg_s9M3O] \r [cfmt_s9M3T void_0E]
                                          case
                                              GHC.IO.Encoding.getForeignEncoding GHC.Prim.void#
                                          of
                                          { Unit# ipv5_s9M3X [Occ=Once] ->
                                                let {
                                                  sat_s9M47 [Occ=Once]
                                                    :: GHC.Foreign.CString -> GHC.Types.IO ()
                                                  [LclId] =
                                                      [cfmt_s9M3T] \r [cmsg_s9M3Y void_0E]
                                                          case cfmt_s9M3T of {
                                                            GHC.Ptr.Ptr ds4_s9M41 [Occ=Once] ->
                                                                case cmsg_s9M3Y of {
                                                                  GHC.Ptr.Ptr ds6_s9M43 [Occ=Once] ->
                                                                      case
                                                                          __pkg_ccall base-4.11.0.0 [ds4_s9M41
                                                                                                     ds6_s9M43
                                                                                                     GHC.Prim.void#]
                                                                      of
                                                                      { (##) ->
                                                                            Unit# [GHC.Tuple.()];
                                                                      };
                                                                };
                                                          };
                                                } in 
                                                  GHC.Foreign.charIsRepresentable3
                                                      ipv5_s9M3X msg_s9M3O sat_s9M47 GHC.Prim.void#;
                                          };
                                } in 
                                  GHC.Foreign.charIsRepresentable3
                                      ipv3_s9M3N lvl6_r9Fvh sat_s9M48 GHC.Prim.void#;
                          };
                    };
              };
        };

lvl10_r9Fvl
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9M4a {
          (##) ->
              case newMutVar# [lvl9_r9Fvk GHC.Prim.void#] of {
                Unit# ipv1_s9M4d [Occ=Once] ->
                    let {
                      sat_s9M4e [Occ=Once]
                        :: GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ())
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_s9M4d];
                    } in  Unit# [sat_s9M4e];
              };
        };

GHC.Conc.Sync.uncaughtExceptionHandler [InlPrag=NOINLINE]
  :: GHC.IORef.IORef (GHC.Exception.SomeException -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case lvl10_r9Fvl GHC.Prim.realWorld# of {
          Unit# ipv1_s9M4h [Occ=Once] -> ipv1_s9M4h;
        };

GHC.Conc.Sync.setUncaughtExceptionHandler1
  :: (GHC.Exception.SomeException -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.STRef.writeSTRef1
            GHC.Conc.Sync.uncaughtExceptionHandler eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.setUncaughtExceptionHandler
  :: (GHC.Exception.SomeException -> GHC.Types.IO ())
     -> GHC.Types.IO ()
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.setUncaughtExceptionHandler1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.getUncaughtExceptionHandler1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Exception.SomeException -> GHC.Types.IO () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.STRef.readSTRef1
            GHC.Conc.Sync.uncaughtExceptionHandler GHC.Prim.void#;

GHC.Conc.Sync.getUncaughtExceptionHandler
  :: GHC.Types.IO (GHC.Exception.SomeException -> GHC.Types.IO ())
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.Conc.Sync.getUncaughtExceptionHandler1 GHC.Prim.void#;

GHC.Conc.Sync.reportError1
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [ex_s9M4i void_0E]
        case GHC.Conc.Sync.uncaughtExceptionHandler of {
          GHC.STRef.STRef var#_s9M4l [Occ=Once] ->
              case readMutVar# [var#_s9M4l GHC.Prim.void#] of {
                Unit# ipv1_s9M4o [Occ=Once!] -> ipv1_s9M4o ex_s9M4i GHC.Prim.void#;
              };
        };

GHC.Conc.Sync.reportError
  :: GHC.Exception.SomeException -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.reportError1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.sharedCAF1
  :: forall a.
     a
     -> (GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(C(S(SS(S)))),C(C1(U(U,1*U(U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [a1_s9M4p get_or_set_s9M4q void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_s9M4u [Occ=Once!] ->
              let {
                io_s9M4v [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a9CSP #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [a1_s9M4p get_or_set_s9M4q] \r [void_0E]
                        case makeStablePtr# [a1_s9M4p GHC.Prim.void#] of {
                          Unit# ipv3_s9M4z ->
                              let {
                                sat_s9M4A [Occ=Once] :: GHC.Ptr.Ptr a_a9CSP
                                [LclId] =
                                    CCCS GHC.Ptr.Ptr! [ipv3_s9M4z];
                              } in 
                                case get_or_set_s9M4q sat_s9M4A GHC.Prim.void# of {
                                  Unit# ipv5_s9M4D [Occ=Once!] ->
                                      case ipv5_s9M4D of {
                                        GHC.Ptr.Ptr b1_s9M4F ->
                                            case eqAddr# [ipv3_s9M4z b1_s9M4F] of {
                                              __DEFAULT ->
                                                  case
                                                      __pkg_ccall base-4.11.0.0 [ipv3_s9M4z
                                                                                 GHC.Prim.void#]
                                                  of
                                                  { (##) ->
                                                        deRefStablePtr# [b1_s9M4F GHC.Prim.void#];
                                                  };
                                              1# -> Unit# [a1_s9M4p];
                                            };
                                      };
                                };
                        };
              } in 
                case ipv1_s9M4u of {
                  __DEFAULT -> io_s9M4v GHC.Prim.void#;
                  0# -> maskAsyncExceptions# [io_s9M4v GHC.Prim.void#];
                };
        };

GHC.Conc.Sync.sharedCAF
  :: forall a.
     a
     -> (GHC.Ptr.Ptr a -> GHC.Types.IO (GHC.Ptr.Ptr a))
     -> GHC.Types.IO a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(C(S(SS(S)))),C(C1(U(U,1*U(U))))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.sharedCAF1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$wmodifyMVar_ [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MVar# GHC.Prim.RealWorld a
     -> (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s9M4L w_s9M4M void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_s9M4Q [Occ=Once!] ->
              case ipv1_s9M4Q of {
                __DEFAULT ->
                    case takeMVar# [ww_s9M4L GHC.Prim.void#] of {
                      Unit# ipv3_s9M4U ->
                          let {
                            sat_s9M55 [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [ww_s9M4L ipv3_s9M4U] \r [ds3_s9M4X]
                                    case ds3_s9M4X of {
                                      GHC.Exception.SomeException $dException_s9M4Z [Occ=Once]
                                                                  e1_s9M50 [Occ=Once] ->
                                          let {
                                            sat_s9M54 [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a_s9ETF #)
                                            [LclId] =
                                                [ww_s9M4L
                                                 ipv3_s9M4U
                                                 $dException_s9M4Z
                                                 e1_s9M50] \r [void_0E]
                                                    case
                                                        putMVar# [ww_s9M4L
                                                                  ipv3_s9M4U
                                                                  GHC.Prim.void#]
                                                    of
                                                    { (##) ->
                                                          GHC.Exception.throw
                                                              $dException_s9M4Z e1_s9M50;
                                                    };
                                          } in  sat_s9M54;
                                    }; } in
                          let {
                            sat_s9M4V [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [w_s9M4M ipv3_s9M4U] \u [] w_s9M4M ipv3_s9M4U; } in
                          let {
                            sat_s9M4W [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [sat_s9M4V] \r [void_0E]
                                    maskAsyncExceptions# [sat_s9M4V GHC.Prim.void#];
                          } in 
                            case catch# [sat_s9M4W sat_s9M55 GHC.Prim.void#] of {
                              Unit# ipv5_s9M58 [Occ=Once] ->
                                  case putMVar# [ww_s9M4L ipv5_s9M58 GHC.Prim.void#] of s2#_s9M59 {
                                    (##) -> Unit# [GHC.Tuple.()];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_s9M5t [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_s9M4L w_s9M4M] \r [void_0E]
                              case takeMVar# [ww_s9M4L GHC.Prim.void#] of {
                                Unit# ipv3_s9M5d ->
                                    let {
                                      sat_s9M5o [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [ww_s9M4L ipv3_s9M5d] \r [ds3_s9M5g]
                                              case ds3_s9M5g of {
                                                GHC.Exception.SomeException $dException_s9M5i [Occ=Once]
                                                                            e1_s9M5j [Occ=Once] ->
                                                    let {
                                                      sat_s9M5n [Occ=OnceT[0]]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_s9ETF #)
                                                      [LclId] =
                                                          [ww_s9M4L
                                                           ipv3_s9M5d
                                                           $dException_s9M5i
                                                           e1_s9M5j] \r [void_0E]
                                                              case
                                                                  putMVar# [ww_s9M4L
                                                                            ipv3_s9M5d
                                                                            GHC.Prim.void#]
                                                              of
                                                              { (##) ->
                                                                    GHC.Exception.throw
                                                                        $dException_s9M5i e1_s9M5j;
                                                              };
                                                    } in  sat_s9M5n;
                                              }; } in
                                    let {
                                      sat_s9M5e [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [w_s9M4M ipv3_s9M5d] \u [] w_s9M4M ipv3_s9M5d; } in
                                    let {
                                      sat_s9M5f [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                                      [LclId] =
                                          [sat_s9M5e] \r [void_0E]
                                              unmaskAsyncExceptions# [sat_s9M5e GHC.Prim.void#];
                                    } in 
                                      case catch# [sat_s9M5f sat_s9M5o GHC.Prim.void#] of {
                                        Unit# ipv5_s9M5r [Occ=Once] ->
                                            case
                                                putMVar# [ww_s9M4L ipv5_s9M5r GHC.Prim.void#]
                                            of
                                            s2#_s9M5s
                                            { (##) -> Unit# [GHC.Tuple.()];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_s9M5t GHC.Prim.void#];
                1# ->
                    case takeMVar# [ww_s9M4L GHC.Prim.void#] of {
                      Unit# ipv3_s9M5w ->
                          let {
                            sat_s9M5H [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [ww_s9M4L ipv3_s9M5w] \r [ds3_s9M5z]
                                    case ds3_s9M5z of {
                                      GHC.Exception.SomeException $dException_s9M5B [Occ=Once]
                                                                  e1_s9M5C [Occ=Once] ->
                                          let {
                                            sat_s9M5G [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a_s9ETF #)
                                            [LclId] =
                                                [ww_s9M4L
                                                 ipv3_s9M5w
                                                 $dException_s9M5B
                                                 e1_s9M5C] \r [void_0E]
                                                    case
                                                        putMVar# [ww_s9M4L
                                                                  ipv3_s9M5w
                                                                  GHC.Prim.void#]
                                                    of
                                                    { (##) ->
                                                          GHC.Exception.throw
                                                              $dException_s9M5B e1_s9M5C;
                                                    };
                                          } in  sat_s9M5G;
                                    }; } in
                          let {
                            sat_s9M5x [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [w_s9M4M ipv3_s9M5w] \u [] w_s9M4M ipv3_s9M5w; } in
                          let {
                            sat_s9M5y [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_s9ETF #)
                            [LclId] =
                                [sat_s9M5x] \r [void_0E]
                                    maskUninterruptible# [sat_s9M5x GHC.Prim.void#];
                          } in 
                            case catch# [sat_s9M5y sat_s9M5H GHC.Prim.void#] of {
                              Unit# ipv5_s9M5K [Occ=Once] ->
                                  case putMVar# [ww_s9M4L ipv5_s9M5K GHC.Prim.void#] of s2#_s9M5L {
                                    (##) -> Unit# [GHC.Tuple.()];
                                  };
                            };
                    };
              };
        };

GHC.Conc.Sync.modifyMVar_1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.MVar.MVar a
     -> (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9M5M w1_s9M5N void_0E]
        case w_s9M5M of {
          GHC.MVar.MVar ww1_s9M5Q [Occ=Once] ->
              GHC.Conc.Sync.$wmodifyMVar_ ww1_s9M5Q w1_s9M5N GHC.Prim.void#;
        };

GHC.Conc.Sync.modifyMVar_
  :: forall a.
     GHC.MVar.MVar a -> (a -> GHC.Types.IO a) -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.modifyMVar_1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.$wwithMVar [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     GHC.Prim.MVar# GHC.Prim.RealWorld a
     -> (a -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s9M5R w_s9M5S void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_s9M5W [Occ=Once!] ->
              case ipv1_s9M5W of {
                __DEFAULT ->
                    case takeMVar# [ww_s9M5R GHC.Prim.void#] of {
                      Unit# ipv3_s9M60 ->
                          let {
                            sat_s9M6b [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [ww_s9M5R ipv3_s9M60] \r [ds3_s9M63]
                                    case ds3_s9M63 of {
                                      GHC.Exception.SomeException $dException_s9M65 [Occ=Once]
                                                                  e1_s9M66 [Occ=Once] ->
                                          let {
                                            sat_s9M6a [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       b_s9ETP #)
                                            [LclId] =
                                                [ww_s9M5R
                                                 ipv3_s9M60
                                                 $dException_s9M65
                                                 e1_s9M66] \r [void_0E]
                                                    case
                                                        putMVar# [ww_s9M5R
                                                                  ipv3_s9M60
                                                                  GHC.Prim.void#]
                                                    of
                                                    { (##) ->
                                                          GHC.Exception.throw
                                                              $dException_s9M65 e1_s9M66;
                                                    };
                                          } in  sat_s9M6a;
                                    }; } in
                          let {
                            sat_s9M61 [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [w_s9M5S ipv3_s9M60] \u [] w_s9M5S ipv3_s9M60; } in
                          let {
                            sat_s9M62 [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [sat_s9M61] \r [void_0E]
                                    maskAsyncExceptions# [sat_s9M61 GHC.Prim.void#];
                          } in 
                            case catch# [sat_s9M62 sat_s9M6b GHC.Prim.void#] of {
                              Unit# ipv5_s9M6e [Occ=Once] ->
                                  case putMVar# [ww_s9M5R ipv3_s9M60 GHC.Prim.void#] of s2#_s9M6f {
                                    (##) -> Unit# [ipv5_s9M6e];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_s9M6z [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                      [LclId] =
                          [ww_s9M5R w_s9M5S] \r [void_0E]
                              case takeMVar# [ww_s9M5R GHC.Prim.void#] of {
                                Unit# ipv3_s9M6j ->
                                    let {
                                      sat_s9M6u [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [ww_s9M5R ipv3_s9M6j] \r [ds3_s9M6m]
                                              case ds3_s9M6m of {
                                                GHC.Exception.SomeException $dException_s9M6o [Occ=Once]
                                                                            e1_s9M6p [Occ=Once] ->
                                                    let {
                                                      sat_s9M6t [Occ=OnceT[0]]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 b_s9ETP #)
                                                      [LclId] =
                                                          [ww_s9M5R
                                                           ipv3_s9M6j
                                                           $dException_s9M6o
                                                           e1_s9M6p] \r [void_0E]
                                                              case
                                                                  putMVar# [ww_s9M5R
                                                                            ipv3_s9M6j
                                                                            GHC.Prim.void#]
                                                              of
                                                              { (##) ->
                                                                    GHC.Exception.throw
                                                                        $dException_s9M6o e1_s9M6p;
                                                              };
                                                    } in  sat_s9M6t;
                                              }; } in
                                    let {
                                      sat_s9M6k [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [w_s9M5S ipv3_s9M6j] \u [] w_s9M5S ipv3_s9M6j; } in
                                    let {
                                      sat_s9M6l [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                                      [LclId] =
                                          [sat_s9M6k] \r [void_0E]
                                              unmaskAsyncExceptions# [sat_s9M6k GHC.Prim.void#];
                                    } in 
                                      case catch# [sat_s9M6l sat_s9M6u GHC.Prim.void#] of {
                                        Unit# ipv5_s9M6x [Occ=Once] ->
                                            case
                                                putMVar# [ww_s9M5R ipv3_s9M6j GHC.Prim.void#]
                                            of
                                            s2#_s9M6y
                                            { (##) -> Unit# [ipv5_s9M6x];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_s9M6z GHC.Prim.void#];
                1# ->
                    case takeMVar# [ww_s9M5R GHC.Prim.void#] of {
                      Unit# ipv3_s9M6C ->
                          let {
                            sat_s9M6N [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [ww_s9M5R ipv3_s9M6C] \r [ds3_s9M6F]
                                    case ds3_s9M6F of {
                                      GHC.Exception.SomeException $dException_s9M6H [Occ=Once]
                                                                  e1_s9M6I [Occ=Once] ->
                                          let {
                                            sat_s9M6M [Occ=OnceT[0]]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       b_s9ETP #)
                                            [LclId] =
                                                [ww_s9M5R
                                                 ipv3_s9M6C
                                                 $dException_s9M6H
                                                 e1_s9M6I] \r [void_0E]
                                                    case
                                                        putMVar# [ww_s9M5R
                                                                  ipv3_s9M6C
                                                                  GHC.Prim.void#]
                                                    of
                                                    { (##) ->
                                                          GHC.Exception.throw
                                                              $dException_s9M6H e1_s9M6I;
                                                    };
                                          } in  sat_s9M6M;
                                    }; } in
                          let {
                            sat_s9M6D [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [w_s9M5S ipv3_s9M6C] \u [] w_s9M5S ipv3_s9M6C; } in
                          let {
                            sat_s9M6E [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_s9ETP #)
                            [LclId] =
                                [sat_s9M6D] \r [void_0E]
                                    maskUninterruptible# [sat_s9M6D GHC.Prim.void#];
                          } in 
                            case catch# [sat_s9M6E sat_s9M6N GHC.Prim.void#] of {
                              Unit# ipv5_s9M6Q [Occ=Once] ->
                                  case putMVar# [ww_s9M5R ipv3_s9M6C GHC.Prim.void#] of s2#_s9M6R {
                                    (##) -> Unit# [ipv5_s9M6Q];
                                  };
                            };
                    };
              };
        };

GHC.Conc.Sync.withMVar1 [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     GHC.MVar.MVar a
     -> (a -> GHC.Types.IO b)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s9M6S w1_s9M6T void_0E]
        case w_s9M6S of {
          GHC.MVar.MVar ww1_s9M6W [Occ=Once] ->
              GHC.Conc.Sync.$wwithMVar ww1_s9M6W w1_s9M6T GHC.Prim.void#;
        };

GHC.Conc.Sync.withMVar
  :: forall a b.
     GHC.MVar.MVar a -> (a -> GHC.Types.IO b) -> GHC.Types.IO b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.withMVar1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.reportStackOverflow1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9M70 [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9M70 GHC.Prim.void#] of {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.reportStackOverflow :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.reportStackOverflow1 GHC.Prim.void#;

GHC.Conc.Sync.forkIO2
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [e1_s9M74 void_0E]
        GHC.Conc.Sync.childHandler1 e1_s9M74 GHC.Prim.void#;
GHC.Conc.Sync.childHandler1 [Occ=LoopBreaker]
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [err_s9M76 void_0E]
        let {
          sat_s9M7U [Occ=Once, Dmd=<L,1*C1(U)>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
          [LclId] =
              [err_s9M76] \s []
                  case err_s9M76 of wild_s9M78 {
                    GHC.Exception.SomeException $dException1_s9M79 e2_s9M7a ->
                        case GHC.Exception.$p1Exception $dException1_s9M79 of sat_s9M7b {
                          __DEFAULT ->
                              case
                                  Data.Typeable.Internal.sameTypeRep
                                      sat_s9M7b
                                      GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3
                              of
                              { GHC.Types.False ->
                                    case
                                        GHC.Exception.$p1Exception $dException1_s9M79
                                    of
                                    sat_s9M7d
                                    { __DEFAULT ->
                                          case
                                              Data.Typeable.Internal.sameTypeRep
                                                  sat_s9M7d
                                                  GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3
                                          of
                                          { GHC.Types.False ->
                                                case
                                                    GHC.Exception.$p1Exception $dException1_s9M79
                                                of
                                                sat_s9M7K
                                                { __DEFAULT ->
                                                      let-no-escape {
                                                        fail_s9M7f [Occ=Once*!T[1],
                                                                    Dmd=<L,1*C1(C1(U))>]
                                                          :: GHC.Prim.Void#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   () #)
                                                        [LclId[JoinId(1)],
                                                         Arity=1,
                                                         Str=<L,A>,
                                                         Unf=OtherCon []] =
                                                            sat-only [wild_s9M78
                                                                      $dException1_s9M79
                                                                      e2_s9M7a] \r [void_0E]
                                                                case
                                                                    GHC.Exception.$p1Exception
                                                                        $dException1_s9M79
                                                                of
                                                                sat_s9M7h
                                                                { __DEFAULT ->
                                                                      case
                                                                          Data.Typeable.Internal.sameTypeRep
                                                                              sat_s9M7h
                                                                              GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                                      of
                                                                      { GHC.Types.False ->
                                                                            let {
                                                                              sat_s9M7p [Occ=OnceT[0]]
                                                                                :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         () #)
                                                                              [LclId] =
                                                                                  [wild_s9M78] \r [void_0E]
                                                                                      case
                                                                                          GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                      of
                                                                                      { GHC.STRef.STRef var#_s9M7l [Occ=Once] ->
                                                                                            case
                                                                                                readMutVar# [var#_s9M7l
                                                                                                             GHC.Prim.void#]
                                                                                            of
                                                                                            { Unit# ipv1_s9M7o [Occ=Once!] ->
                                                                                                  ipv1_s9M7o
                                                                                                      wild_s9M78
                                                                                                      GHC.Prim.void#;
                                                                                            };
                                                                                      };
                                                                            } in  sat_s9M7p;
                                                                        GHC.Types.True ->
                                                                            case e2_s9M7a of {
                                                                              GHC.IO.Exception.SomeAsyncException $dException_s9M7r [Occ=Once]
                                                                                                                  a_s9M7s [Occ=Once] ->
                                                                                  case
                                                                                      GHC.Exception.$p1Exception
                                                                                          $dException_s9M7r
                                                                                  of
                                                                                  sat_s9M7t
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            Data.Typeable.Internal.sameTypeRep
                                                                                                sat_s9M7t
                                                                                                GHC.IO.Exception.$fExceptionAsyncException9
                                                                                        of
                                                                                        { GHC.Types.False ->
                                                                                              let {
                                                                                                sat_s9M7B [Occ=OnceT[0]]
                                                                                                  :: GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           () #)
                                                                                                [LclId] =
                                                                                                    [wild_s9M78] \r [void_0E]
                                                                                                        case
                                                                                                            GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                        of
                                                                                                        { GHC.STRef.STRef var#_s9M7x [Occ=Once] ->
                                                                                                              case
                                                                                                                  readMutVar# [var#_s9M7x
                                                                                                                               GHC.Prim.void#]
                                                                                                              of
                                                                                                              { Unit# ipv1_s9M7A [Occ=Once!] ->
                                                                                                                    ipv1_s9M7A
                                                                                                                        wild_s9M78
                                                                                                                        GHC.Prim.void#;
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                sat_s9M7B;
                                                                                          GHC.Types.True ->
                                                                                              case
                                                                                                  a_s9M7s
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    let {
                                                                                                      sat_s9M7J [Occ=OnceT[0]]
                                                                                                        :: GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 () #)
                                                                                                      [LclId] =
                                                                                                          [wild_s9M78] \r [void_0E]
                                                                                                              case
                                                                                                                  GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                              of
                                                                                                              { GHC.STRef.STRef var#_s9M7F [Occ=Once] ->
                                                                                                                    case
                                                                                                                        readMutVar# [var#_s9M7F
                                                                                                                                     GHC.Prim.void#]
                                                                                                                    of
                                                                                                                    { Unit# ipv1_s9M7I [Occ=Once!] ->
                                                                                                                          ipv1_s9M7I
                                                                                                                              wild_s9M78
                                                                                                                              GHC.Prim.void#;
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      sat_s9M7J;
                                                                                                GHC.IO.Exception.StackOverflow ->
                                                                                                    GHC.Conc.Sync.reportStackOverflow1;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                      } in 
                                                        case
                                                            Data.Typeable.Internal.sameTypeRep
                                                                sat_s9M7K
                                                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                                                        of
                                                        { GHC.Types.False ->
                                                              fail_s9M7f GHC.Prim.void#;
                                                          GHC.Types.True ->
                                                              case e2_s9M7a of {
                                                                GHC.IO.Exception.SomeAsyncException $dException_s9M7N [Occ=Once]
                                                                                                    a_s9M7O [Occ=Once] ->
                                                                    case
                                                                        GHC.Exception.$p1Exception
                                                                            $dException_s9M7N
                                                                    of
                                                                    sat_s9M7P
                                                                    { __DEFAULT ->
                                                                          case
                                                                              Data.Typeable.Internal.sameTypeRep
                                                                                  sat_s9M7P
                                                                                  GHC.IO.Exception.$fExceptionAsyncException9
                                                                          of
                                                                          { GHC.Types.False ->
                                                                                fail_s9M7f
                                                                                    GHC.Prim.void#;
                                                                            GHC.Types.True ->
                                                                                case a_s9M7O of {
                                                                                  __DEFAULT ->
                                                                                      fail_s9M7f
                                                                                          GHC.Prim.void#;
                                                                                  GHC.IO.Exception.ThreadKilled ->
                                                                                      GHC.Conc.Sync.always2;
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                };
                                            GHC.Types.True ->
                                                case e2_s9M7a of {
                                                  GHC.IO.Exception.BlockedIndefinitelyOnSTM ->
                                                      GHC.Conc.Sync.always2;
                                                };
                                          };
                                    };
                                GHC.Types.True ->
                                    case e2_s9M7a of {
                                      GHC.IO.Exception.BlockedIndefinitelyOnMVar ->
                                          GHC.Conc.Sync.always2;
                                    };
                              };
                        };
                  };
        } in  catch# [sat_s9M7U GHC.Conc.Sync.forkIO2 GHC.Prim.void#];

GHC.Conc.Sync.childHandler
  :: GHC.Exception.SomeException -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.childHandler1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.forkOn1
  :: GHC.Types.Int
     -> GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=3, Str=<S(S),1*U(U)><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [ds_s9M7V action_s9M7W void_0E]
        case ds_s9M7V of {
          GHC.Types.I# cpu_s9M7Z [Occ=Once] ->
              let {
                sat_s9M81 [Occ=Once] :: GHC.Types.IO ()
                [LclId] =
                    [action_s9M7W] \r [void_0E]
                        catch# [action_s9M7W GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
              } in 
                case forkOn# [cpu_s9M7Z sat_s9M81 GHC.Prim.void#] of {
                  Unit# ipv1_s9M84 [Occ=Once] ->
                      let {
                        sat_s9M85 [Occ=Once] :: GHC.Conc.Sync.ThreadId
                        [LclId] =
                            CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9M84];
                      } in  Unit# [sat_s9M85];
                };
        };

GHC.Conc.Sync.forkOn
  :: GHC.Types.Int
     -> GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=3, Str=<S(S),1*U(U)><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.forkOn1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.forkOnWithUnmask1
  :: GHC.Types.Int
     -> ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
         -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [cpu_s9M86 io_s9M87 void_0E]
        case cpu_s9M86 of {
          GHC.Types.I# cpu1_s9M8a [Occ=Once] ->
              let {
                sat_s9M8e [Occ=Once] :: GHC.Types.IO ()
                [LclId] =
                    [io_s9M87] \r [void_0E]
                        let {
                          sat_s9M8d [Occ=Once, Dmd=<L,1*C1(U)>]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          [LclId] =
                              [io_s9M87] \s []
                                  let {
                                    sat_s9M8c [Occ=Once]
                                      :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                                    [LclId] =
                                        [] \r [eta_B2 void_0E]
                                            unmaskAsyncExceptions# [eta_B2 GHC.Prim.void#];
                                  } in  io_s9M87 sat_s9M8c;
                        } in  catch# [sat_s9M8d GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
              } in 
                case forkOn# [cpu1_s9M8a sat_s9M8e GHC.Prim.void#] of {
                  Unit# ipv1_s9M8h [Occ=Once] ->
                      let {
                        sat_s9M8i [Occ=Once] :: GHC.Conc.Sync.ThreadId
                        [LclId] =
                            CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9M8h];
                      } in  Unit# [sat_s9M8i];
                };
        };

GHC.Conc.Sync.forkOnWithUnmask
  :: GHC.Types.Int
     -> ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
         -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Conc.Sync.forkOnWithUnmask1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.forkIO1
  :: GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [action_s9M8j void_0E]
        let {
          sat_s9M8m [Occ=Once] :: GHC.Types.IO ()
          [LclId] =
              [action_s9M8j] \r [void_0E]
                  catch# [action_s9M8j GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
        } in 
          case fork# [sat_s9M8m GHC.Prim.void#] of {
            Unit# ipv1_s9M8p [Occ=Once] ->
                let {
                  sat_s9M8q [Occ=Once] :: GHC.Conc.Sync.ThreadId
                  [LclId] =
                      CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9M8p];
                } in  Unit# [sat_s9M8q];
          };

GHC.Conc.Sync.forkIO
  :: GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.Conc.Sync.forkIO1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.forkIOWithUnmask1
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [io_s9M8r void_0E]
        let {
          sat_s9M8w [Occ=Once] :: GHC.Types.IO ()
          [LclId] =
              [io_s9M8r] \r [void_0E]
                  let {
                    sat_s9M8v [Occ=Once, Dmd=<L,1*C1(U)>]
                      :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                    [LclId] =
                        [io_s9M8r] \s []
                            let {
                              sat_s9M8u [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                              [LclId] =
                                  [] \r [eta_B2 void_0E]
                                      unmaskAsyncExceptions# [eta_B2 GHC.Prim.void#];
                            } in  io_s9M8r sat_s9M8u;
                  } in  catch# [sat_s9M8v GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
        } in 
          case fork# [sat_s9M8w GHC.Prim.void#] of {
            Unit# ipv1_s9M8z [Occ=Once] ->
                let {
                  sat_s9M8A [Occ=Once] :: GHC.Conc.Sync.ThreadId
                  [LclId] =
                      CCCS GHC.Conc.Sync.ThreadId! [ipv1_s9M8z];
                } in  Unit# [sat_s9M8A];
          };

GHC.Conc.Sync.forkIOWithUnmask
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.forkIOWithUnmask1 eta_B2 GHC.Prim.void#;

lvl11_r9Fvm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "setNumCapabilities: Capability count ("#;

lvl12_r9Fvn :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") must be positive"#;

lvl13_r9Fvo :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_r9Fvn;

GHC.Conc.Sync.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ww_s9M8B void_0E]
        let {
          sat_s9M8H [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s9M8B] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s9M8B GHC.Types.[] of {
                    (#,#) ww5_s9M8E [Occ=Once] ww6_s9M8F [Occ=Once] ->
                        let {
                          sat_s9M8G [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [ww5_s9M8E ww6_s9M8F];
                        } in  GHC.Base.++ sat_s9M8G lvl13_r9Fvo;
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl11_r9Fvm sat_s9M8H
          of
          sat_s9M8I
          { __DEFAULT -> GHC.IO.failIO1 sat_s9M8I GHC.Prim.void#;
          };

GHC.Conc.Sync.setNumCapabilities2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<B,1*U(U)><B,U>x, Unf=OtherCon []] =
    [] \r [w_s9M8J void_0E]
        case w_s9M8J of {
          GHC.Types.I# ww1_s9M8M [Occ=Once] ->
              GHC.Conc.Sync.$wlvl ww1_s9M8M GHC.Prim.void#;
        };

GHC.Conc.Sync.setNumCapabilities1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [i_s9M8N void_0E]
        case i_s9M8N of {
          GHC.Types.I# x_s9M8Q ->
              case <=# [x_s9M8Q 0#] of {
                __DEFAULT ->
                    case int2Word# [x_s9M8Q] of sat_s9M8T {
                      __DEFAULT ->
                          case narrow32Word# [sat_s9M8T] of sat_s9M8U {
                            __DEFAULT ->
                                case __pkg_ccall_GC base-4.11.0.0 [sat_s9M8U GHC.Prim.void#] of {
                                  (##) -> Unit# [GHC.Tuple.()];
                                };
                          };
                    };
                1# -> GHC.Conc.Sync.$wlvl x_s9M8Q GHC.Prim.void#;
              };
        };

GHC.Conc.Sync.setNumCapabilities
  :: GHC.Types.Int -> GHC.Types.IO ()
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.setNumCapabilities1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.getNumCapabilities1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case
            readInt32OffAddr# [__label "enabled_capabilities" (data)
                               0#
                               GHC.Prim.void#]
        of
        { Unit# ipv1_s9M90 [Occ=Once] ->
              let {
                sat_s9M91 [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [ipv1_s9M90];
              } in  Unit# [sat_s9M91];
        };

GHC.Conc.Sync.getNumCapabilities :: GHC.Types.IO GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.getNumCapabilities1 GHC.Prim.void#;

GHC.Conc.Sync.numCapabilities1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9M93 {
          (##) ->
              case
                  readInt32OffAddr# [__label "enabled_capabilities" (data)
                                     0#
                                     GHC.Prim.void#]
              of
              { Unit# ipv1_s9M96 [Occ=Once] ->
                    let {
                      sat_s9M97 [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          CCCS GHC.Types.I#! [ipv1_s9M96];
                    } in  Unit# [sat_s9M97];
              };
        };

GHC.Conc.Sync.numCapabilities :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.Conc.Sync.numCapabilities1 GHC.Prim.realWorld# of {
          Unit# ipv1_s9M9a [Occ=Once] -> ipv1_s9M9a;
        };

GHC.Conc.Sync.disableAllocationLimit1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9M9e [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9M9e GHC.Prim.void#] of {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.disableAllocationLimit :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.Conc.Sync.disableAllocationLimit1 GHC.Prim.void#;

GHC.Conc.Sync.enableAllocationLimit1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9M9l [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9M9l GHC.Prim.void#] of {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Conc.Sync.enableAllocationLimit :: GHC.Types.IO ()
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.Conc.Sync.enableAllocationLimit1 GHC.Prim.void#;

GHC.Conc.Sync.getAllocationCounter1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int64 #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9M9s [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ipv1_s9M9s GHC.Prim.void#] of {
                Unit# ds2_s9M9w [Occ=Once] ->
                    let {
                      sat_s9M9x [Occ=Once] :: GHC.Int.Int64
                      [LclId] =
                          CCCS GHC.Int.I64#! [ds2_s9M9w];
                    } in  Unit# [sat_s9M9x];
              };
        };

GHC.Conc.Sync.getAllocationCounter :: GHC.Types.IO GHC.Int.Int64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.Conc.Sync.getAllocationCounter1 GHC.Prim.void#;

GHC.Conc.Sync.setAllocationCounter1
  :: GHC.Int.Int64
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [i_s9M9y void_0E]
        case myThreadId# [GHC.Prim.void#] of {
          Unit# ipv1_s9M9C [Occ=Once] ->
              case i_s9M9y of {
                GHC.Int.I64# ds2_s9M9E [Occ=Once] ->
                    case
                        __pkg_ccall base-4.11.0.0 [ipv1_s9M9C ds2_s9M9E GHC.Prim.void#]
                    of
                    { (##) -> Unit# [GHC.Tuple.()];
                    };
              };
        };

GHC.Conc.Sync.setAllocationCounter
  :: GHC.Int.Int64 -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.Sync.setAllocationCounter1 eta_B2 GHC.Prim.void#;

GHC.Conc.Sync.TVar
  :: forall a.
     GHC.Prim.TVar# GHC.Prim.RealWorld a -> GHC.Conc.Sync.TVar a
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.TVar [eta_B1];

GHC.Conc.Sync.ThreadRunning :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadRunning! [];

GHC.Conc.Sync.ThreadFinished :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadFinished! [];

GHC.Conc.Sync.ThreadBlocked
  :: GHC.Conc.Sync.BlockReason -> GHC.Conc.Sync.ThreadStatus
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.ThreadBlocked [eta_B1];

GHC.Conc.Sync.ThreadDied :: GHC.Conc.Sync.ThreadStatus
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.ThreadDied! [];

GHC.Conc.Sync.BlockedOnMVar :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnMVar! [];

GHC.Conc.Sync.BlockedOnBlackHole :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnBlackHole! [];

GHC.Conc.Sync.BlockedOnException :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnException! [];

GHC.Conc.Sync.BlockedOnSTM :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnSTM! [];

GHC.Conc.Sync.BlockedOnForeignCall :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnForeignCall! [];

GHC.Conc.Sync.BlockedOnOther :: GHC.Conc.Sync.BlockReason
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Conc.Sync.BlockedOnOther! [];

GHC.Conc.Sync.ThreadId
  :: GHC.Prim.ThreadId# -> GHC.Conc.Sync.ThreadId
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Conc.Sync.ThreadId [eta_B1];

