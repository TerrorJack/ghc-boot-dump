
==================== Tidy Core ====================
2018-03-16 16:04:45.190915558 UTC

Result size of Tidy Core
  = {terms: 3,738, types: 4,323, coercions: 766, joins: 1/8}

-- RHS size: {terms: 13, types: 19, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqTVar_$c== :: forall a. TVar a -> TVar a -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9D6t)
                 (ds_d9DjM [Occ=Once!] :: TVar a_a9D6t)
                 (ds1_d9DjN [Occ=Once!] :: TVar a_a9D6t) ->
                 case ds_d9DjM of { TVar tvar1#_a9CA1 [Occ=Once] ->
                 case ds1_d9DjN of { TVar tvar2#_a9CA2 [Occ=Once] ->
                 tagToEnum#
                   @ Bool (sameTVar# @ RealWorld @ a_a9D6t tvar1#_a9CA1 tvar2#_a9CA2)
                 }
                 }}]
GHC.Conc.Sync.$fEqTVar_$c==
  = \ (@ a_a9D6t)
      (ds_d9DjM :: TVar a_a9D6t)
      (ds1_d9DjN :: TVar a_a9D6t) ->
      case ds_d9DjM of { TVar tvar1#_a9CA1 ->
      case ds1_d9DjN of { TVar tvar2#_a9CA2 ->
      tagToEnum#
        @ Bool (sameTVar# @ RealWorld @ a_a9D6t tvar1#_a9CA1 tvar2#_a9CA2)
      }
      }

-- RHS size: {terms: 17, types: 19, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqTVar_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall a. TVar a -> TVar a -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ a_a9D6t)
                 (x_a22b [Occ=Once!] :: TVar a_a9D6t)
                 (y_a22c [Occ=Once!] :: TVar a_a9D6t) ->
                 case x_a22b of { TVar tvar1#_a9CA1 [Occ=Once] ->
                 case y_a22c of { TVar tvar2#_a9CA2 [Occ=Once] ->
                 case sameTVar# @ RealWorld @ a_a9D6t tvar1#_a9CA1 tvar2#_a9CA2 of {
                   __DEFAULT -> GHC.Types.True;
                   1# -> GHC.Types.False
                 }
                 }
                 }}]
GHC.Conc.Sync.$fEqTVar_$c/=
  = \ (@ a_a9D6t)
      (eta_B2 :: TVar a_a9D6t)
      (eta1_B1 :: TVar a_a9D6t) ->
      case eta_B2 of { TVar tvar1#_a9CA1 ->
      case eta1_B1 of { TVar tvar2#_a9CA2 ->
      case sameTVar# @ RealWorld @ a_a9D6t tvar1#_a9CA1 tvar2#_a9CA2 of {
        __DEFAULT -> GHC.Types.True;
        1# -> GHC.Types.False
      }
      }
      }

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqTVar [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Eq (TVar a)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ (@ a_a9CA0) ->
       GHC.Classes.C:Eq TYPE: TVar a_a9CA0
                        GHC.Conc.Sync.$fEqTVar_$c== @ a_a9CA0
                        GHC.Conc.Sync.$fEqTVar_$c/= @ a_a9CA0]
GHC.Conc.Sync.$fEqTVar
  = \ (@ a_a9D6t) ->
      GHC.Classes.C:Eq
        @ (TVar a_a9D6t)
        (GHC.Conc.Sync.$fEqTVar_$c== @ a_a9D6t)
        (GHC.Conc.Sync.$fEqTVar_$c/= @ a_a9D6t)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$fShowBlockReason12 = "BlockedOnMVar"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason11 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$fShowBlockReason11
  = unpackCString# GHC.Conc.Sync.$fShowBlockReason12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Conc.Sync.$fShowBlockReason10 = "BlockedOnBlackHole"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason9 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$fShowBlockReason9
  = unpackCString# GHC.Conc.Sync.$fShowBlockReason10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Conc.Sync.$fShowBlockReason8 = "BlockedOnException"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$fShowBlockReason7
  = unpackCString# GHC.Conc.Sync.$fShowBlockReason8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Conc.Sync.$fShowBlockReason6 = "BlockedOnSTM"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$fShowBlockReason5
  = unpackCString# GHC.Conc.Sync.$fShowBlockReason6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Conc.Sync.$fShowBlockReason4 = "BlockedOnForeignCall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$fShowBlockReason3
  = unpackCString# GHC.Conc.Sync.$fShowBlockReason4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$fShowBlockReason2 = "BlockedOnOther"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason1 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$fShowBlockReason1
  = unpackCString# GHC.Conc.Sync.$fShowBlockReason2

-- RHS size: {terms: 28, types: 9, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: BlockReason -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [220 0] 240 0}]
GHC.Conc.Sync.$w$cshowsPrec
  = \ (w_s9ESK :: BlockReason) (w1_s9ESL :: String) ->
      case w_s9ESK of {
        BlockedOnMVar ->
          ++ @ Char GHC.Conc.Sync.$fShowBlockReason11 w1_s9ESL;
        BlockedOnBlackHole ->
          ++ @ Char GHC.Conc.Sync.$fShowBlockReason9 w1_s9ESL;
        BlockedOnException ->
          ++ @ Char GHC.Conc.Sync.$fShowBlockReason7 w1_s9ESL;
        BlockedOnSTM ->
          ++ @ Char GHC.Conc.Sync.$fShowBlockReason5 w1_s9ESL;
        BlockedOnForeignCall ->
          ++ @ Char GHC.Conc.Sync.$fShowBlockReason3 w1_s9ESL;
        BlockedOnOther ->
          ++ @ Char GHC.Conc.Sync.$fShowBlockReason1 w1_s9ESL
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> BlockReason -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_s9ESK [Occ=Once] :: BlockReason)
                 (w2_s9ESL [Occ=Once] :: String) ->
                 GHC.Conc.Sync.$w$cshowsPrec w1_s9ESK w2_s9ESL}]
GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec
  = \ _ [Occ=Dead] (w1_s9ESK :: BlockReason) (w2_s9ESL :: String) ->
      GHC.Conc.Sync.$w$cshowsPrec w1_s9ESK w2_s9ESL

-- RHS size: {terms: 15, types: 2, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason_$cshow :: BlockReason -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: BlockReason) ->
                 case x_i7Jay of {
                   BlockedOnMVar -> GHC.Conc.Sync.$fShowBlockReason11;
                   BlockedOnBlackHole -> GHC.Conc.Sync.$fShowBlockReason9;
                   BlockedOnException -> GHC.Conc.Sync.$fShowBlockReason7;
                   BlockedOnSTM -> GHC.Conc.Sync.$fShowBlockReason5;
                   BlockedOnForeignCall -> GHC.Conc.Sync.$fShowBlockReason3;
                   BlockedOnOther -> GHC.Conc.Sync.$fShowBlockReason1
                 }}]
GHC.Conc.Sync.$fShowBlockReason_$cshow
  = \ (x_i7Jay :: BlockReason) ->
      case x_i7Jay of {
        BlockedOnMVar -> GHC.Conc.Sync.$fShowBlockReason11;
        BlockedOnBlackHole -> GHC.Conc.Sync.$fShowBlockReason9;
        BlockedOnException -> GHC.Conc.Sync.$fShowBlockReason7;
        BlockedOnSTM -> GHC.Conc.Sync.$fShowBlockReason5;
        BlockedOnForeignCall -> GHC.Conc.Sync.$fShowBlockReason3;
        BlockedOnOther -> GHC.Conc.Sync.$fShowBlockReason1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason_$cshowList
  :: [BlockReason] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [BlockReason])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ BlockReason GHC.Conc.Sync.$w$cshowsPrec ls_i7JaB s_i7JaC}]
GHC.Conc.Sync.$fShowBlockReason_$cshowList
  = \ (ls_i7JaB :: [BlockReason]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ BlockReason GHC.Conc.Sync.$w$cshowsPrec ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: Show BlockReason
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: BlockReason
                       GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec
                       GHC.Conc.Sync.$fShowBlockReason_$cshow
                       GHC.Conc.Sync.$fShowBlockReason_$cshowList]
GHC.Conc.Sync.$fShowBlockReason
  = GHC.Show.C:Show
      @ BlockReason
      GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec
      GHC.Conc.Sync.$fShowBlockReason_$cshow
      GHC.Conc.Sync.$fShowBlockReason_$cshowList

-- RHS size: {terms: 46, types: 9, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqBlockReason_$c==
  :: BlockReason -> BlockReason -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [170 180] 180 120}]
GHC.Conc.Sync.$fEqBlockReason_$c==
  = \ (ds_d9Djs :: BlockReason) (ds1_d9Djt :: BlockReason) ->
      case ds_d9Djs of {
        BlockedOnMVar ->
          case ds1_d9Djt of {
            __DEFAULT -> GHC.Types.False;
            BlockedOnMVar -> GHC.Types.True
          };
        BlockedOnBlackHole ->
          case ds1_d9Djt of {
            __DEFAULT -> GHC.Types.False;
            BlockedOnBlackHole -> GHC.Types.True
          };
        BlockedOnException ->
          case ds1_d9Djt of {
            __DEFAULT -> GHC.Types.False;
            BlockedOnException -> GHC.Types.True
          };
        BlockedOnSTM ->
          case ds1_d9Djt of {
            __DEFAULT -> GHC.Types.False;
            BlockedOnSTM -> GHC.Types.True
          };
        BlockedOnForeignCall ->
          case ds1_d9Djt of {
            __DEFAULT -> GHC.Types.False;
            BlockedOnForeignCall -> GHC.Types.True
          };
        BlockedOnOther ->
          case ds1_d9Djt of {
            __DEFAULT -> GHC.Types.False;
            BlockedOnOther -> GHC.Types.True
          }
      }

-- RHS size: {terms: 46, types: 9, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqBlockReason_$c/= [InlPrag=INLINE (sat-args=2)]
  :: BlockReason -> BlockReason -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: BlockReason)
                 (y_a22c [Occ=Once*!] :: BlockReason) ->
                 case x_a22b of {
                   BlockedOnMVar ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       BlockedOnMVar -> GHC.Types.False
                     };
                   BlockedOnBlackHole ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       BlockedOnBlackHole -> GHC.Types.False
                     };
                   BlockedOnException ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       BlockedOnException -> GHC.Types.False
                     };
                   BlockedOnSTM ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       BlockedOnSTM -> GHC.Types.False
                     };
                   BlockedOnForeignCall ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       BlockedOnForeignCall -> GHC.Types.False
                     };
                   BlockedOnOther ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       BlockedOnOther -> GHC.Types.False
                     }
                 }}]
GHC.Conc.Sync.$fEqBlockReason_$c/=
  = \ (eta_B2 :: BlockReason) (eta1_B1 :: BlockReason) ->
      case eta_B2 of {
        BlockedOnMVar ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnMVar -> GHC.Types.False
          };
        BlockedOnBlackHole ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnBlackHole -> GHC.Types.False
          };
        BlockedOnException ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnException -> GHC.Types.False
          };
        BlockedOnSTM ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnSTM -> GHC.Types.False
          };
        BlockedOnForeignCall ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnForeignCall -> GHC.Types.False
          };
        BlockedOnOther ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnOther -> GHC.Types.False
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq BlockReason
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: BlockReason
                        GHC.Conc.Sync.$fEqBlockReason_$c==
                        GHC.Conc.Sync.$fEqBlockReason_$c/=]
GHC.Conc.Sync.$fEqBlockReason
  = GHC.Classes.C:Eq
      @ BlockReason
      GHC.Conc.Sync.$fEqBlockReason_$c==
      GHC.Conc.Sync.$fEqBlockReason_$c/=

-- RHS size: {terms: 34, types: 9, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqThreadStatus_$c==
  :: ThreadStatus -> ThreadStatus -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [110 120] 150 70}]
GHC.Conc.Sync.$fEqThreadStatus_$c==
  = \ (ds_d9Djy :: ThreadStatus) (ds1_d9Djz :: ThreadStatus) ->
      case ds_d9Djy of {
        ThreadRunning ->
          case ds1_d9Djz of {
            __DEFAULT -> GHC.Types.False;
            ThreadRunning -> GHC.Types.True
          };
        ThreadFinished ->
          case ds1_d9Djz of {
            __DEFAULT -> GHC.Types.False;
            ThreadFinished -> GHC.Types.True
          };
        ThreadBlocked a1_a9CHB ->
          case ds1_d9Djz of {
            __DEFAULT -> GHC.Types.False;
            ThreadBlocked b1_a9CHC ->
              GHC.Conc.Sync.$fEqBlockReason_$c== a1_a9CHB b1_a9CHC
          };
        ThreadDied ->
          case ds1_d9Djz of {
            __DEFAULT -> GHC.Types.False;
            ThreadDied -> GHC.Types.True
          }
      }

-- RHS size: {terms: 75, types: 16, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqThreadStatus_$c/= [InlPrag=INLINE (sat-args=2)]
  :: ThreadStatus -> ThreadStatus -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: ThreadStatus)
                 (y_a22c [Occ=Once*!] :: ThreadStatus) ->
                 case x_a22b of {
                   ThreadRunning ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       ThreadRunning -> GHC.Types.False
                     };
                   ThreadFinished ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       ThreadFinished -> GHC.Types.False
                     };
                   ThreadBlocked a1_a9CHB [Occ=Once!] ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       ThreadBlocked b1_a9CHC [Occ=Once*!] ->
                         case a1_a9CHB of {
                           BlockedOnMVar ->
                             case b1_a9CHC of {
                               __DEFAULT -> GHC.Types.True;
                               BlockedOnMVar -> GHC.Types.False
                             };
                           BlockedOnBlackHole ->
                             case b1_a9CHC of {
                               __DEFAULT -> GHC.Types.True;
                               BlockedOnBlackHole -> GHC.Types.False
                             };
                           BlockedOnException ->
                             case b1_a9CHC of {
                               __DEFAULT -> GHC.Types.True;
                               BlockedOnException -> GHC.Types.False
                             };
                           BlockedOnSTM ->
                             case b1_a9CHC of {
                               __DEFAULT -> GHC.Types.True;
                               BlockedOnSTM -> GHC.Types.False
                             };
                           BlockedOnForeignCall ->
                             case b1_a9CHC of {
                               __DEFAULT -> GHC.Types.True;
                               BlockedOnForeignCall -> GHC.Types.False
                             };
                           BlockedOnOther ->
                             case b1_a9CHC of {
                               __DEFAULT -> GHC.Types.True;
                               BlockedOnOther -> GHC.Types.False
                             }
                         }
                     };
                   ThreadDied ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       ThreadDied -> GHC.Types.False
                     }
                 }}]
GHC.Conc.Sync.$fEqThreadStatus_$c/=
  = \ (eta_B2 :: ThreadStatus) (eta1_B1 :: ThreadStatus) ->
      case eta_B2 of {
        ThreadRunning ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            ThreadRunning -> GHC.Types.False
          };
        ThreadFinished ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            ThreadFinished -> GHC.Types.False
          };
        ThreadBlocked a1_a9CHB ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            ThreadBlocked b1_a9CHC ->
              case a1_a9CHB of {
                BlockedOnMVar ->
                  case b1_a9CHC of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnMVar -> GHC.Types.False
                  };
                BlockedOnBlackHole ->
                  case b1_a9CHC of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnBlackHole -> GHC.Types.False
                  };
                BlockedOnException ->
                  case b1_a9CHC of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnException -> GHC.Types.False
                  };
                BlockedOnSTM ->
                  case b1_a9CHC of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnSTM -> GHC.Types.False
                  };
                BlockedOnForeignCall ->
                  case b1_a9CHC of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnForeignCall -> GHC.Types.False
                  };
                BlockedOnOther ->
                  case b1_a9CHC of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.False
                  }
              }
          };
        ThreadDied ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            ThreadDied -> GHC.Types.False
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq ThreadStatus
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: ThreadStatus
                        GHC.Conc.Sync.$fEqThreadStatus_$c==
                        GHC.Conc.Sync.$fEqThreadStatus_$c/=]
GHC.Conc.Sync.$fEqThreadStatus
  = GHC.Classes.C:Eq
      @ ThreadStatus
      GHC.Conc.Sync.$fEqThreadStatus_$c==
      GHC.Conc.Sync.$fEqThreadStatus_$c/=

-- RHS size: {terms: 9, types: 21, coercions: 0, joins: 0/0}
GHC.Conc.Sync.numSparks1
  :: State# RealWorld -> (# State# RealWorld, Int #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_a9CB8 [Occ=Once] :: State# RealWorld) ->
                 case numSparks# @ RealWorld s_a9CB8 of
                 { (# ipv_s9DmF [Occ=Once], ipv1_s9DmG [Occ=Once] #) ->
                 (# ipv_s9DmF, GHC.Types.I# ipv1_s9DmG #)
                 }}]
GHC.Conc.Sync.numSparks1
  = \ (s_a9CB8 :: State# RealWorld) ->
      case numSparks# @ RealWorld s_a9CB8 of
      { (# ipv_s9DmF, ipv1_s9DmG #) ->
      (# ipv_s9DmF, GHC.Types.I# ipv1_s9DmG #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
numSparks :: IO Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.numSparks1
               `cast` (Sym (GHC.Types.N:IO[0] <Int>_R)
                       :: (State# RealWorld -> (# State# RealWorld, Int #) :: *)
                          ~R# (IO Int :: *))}]
numSparks
  = GHC.Conc.Sync.numSparks1
    `cast` (Sym (GHC.Types.N:IO[0] <Int>_R)
            :: (State# RealWorld -> (# State# RealWorld, Int #) :: *)
               ~R# (IO Int :: *))

-- RHS size: {terms: 19, types: 21, coercions: 0, joins: 0/0}
GHC.Conc.Sync.throwTo1
  :: forall e.
     Exception e =>
     ThreadId -> e -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(U),A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ e_a9D0m)
                 ($dException_a9D0o [Occ=Once] :: Exception e_a9D0m)
                 (ds_d9Dhq [Occ=Once!] :: ThreadId)
                 (ex_a9CBf [Occ=Once] :: e_a9D0m)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ds_d9Dhq of { ThreadId tid_a9CBe [Occ=Once] ->
                 case killThread#
                        @ SomeException
                        tid_a9CBe
                        (toException @ e_a9D0m $dException_a9D0o ex_a9CBf)
                        eta_B1
                 of s1_a9CBh
                 { __DEFAULT ->
                 (# s1_a9CBh, GHC.Tuple.() #)
                 }
                 }}]
GHC.Conc.Sync.throwTo1
  = \ (@ e_a9D0m)
      ($dException_a9D0o :: Exception e_a9D0m)
      (ds_d9Dhq :: ThreadId)
      (ex_a9CBf :: e_a9D0m)
      (eta_B1 :: State# RealWorld) ->
      case ds_d9Dhq of { ThreadId tid_a9CBe ->
      case killThread#
             @ SomeException
             tid_a9CBe
             (toException @ e_a9D0m $dException_a9D0o ex_a9CBf)
             eta_B1
      of s1_a9CBh
      { __DEFAULT ->
      (# s1_a9CBh, GHC.Tuple.() #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
throwTo :: forall e. Exception e => ThreadId -> e -> IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(U),A,A)><S(S),1*U(U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.throwTo1
               `cast` (forall (e :: <*>_N).
                       <Exception e>_R
                       ->_R <ThreadId>_R
                       ->_R <e>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall e.
                           Exception e =>
                           ThreadId
                           -> e -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (forall e. Exception e => ThreadId -> e -> IO () :: *))}]
throwTo
  = GHC.Conc.Sync.throwTo1
    `cast` (forall (e :: <*>_N).
            <Exception e>_R
            ->_R <ThreadId>_R
            ->_R <e>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall e.
                Exception e =>
                ThreadId
                -> e -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (forall e. Exception e => ThreadId -> e -> IO () :: *))

-- RHS size: {terms: 9, types: 20, coercions: 0, joins: 0/0}
GHC.Conc.Sync.myThreadId1
  :: State# RealWorld -> (# State# RealWorld, ThreadId #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_a9CBi [Occ=Once] :: State# RealWorld) ->
                 case myThreadId# s_a9CBi of
                 { (# ipv_s9DmM [Occ=Once], ipv1_s9DmN [Occ=Once] #) ->
                 (# ipv_s9DmM, GHC.Conc.Sync.ThreadId ipv1_s9DmN #)
                 }}]
GHC.Conc.Sync.myThreadId1
  = \ (s_a9CBi :: State# RealWorld) ->
      case myThreadId# s_a9CBi of { (# ipv_s9DmM, ipv1_s9DmN #) ->
      (# ipv_s9DmM, GHC.Conc.Sync.ThreadId ipv1_s9DmN #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
myThreadId :: IO ThreadId
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.myThreadId1
               `cast` (Sym (GHC.Types.N:IO[0] <ThreadId>_R)
                       :: (State# RealWorld -> (# State# RealWorld, ThreadId #) :: *)
                          ~R# (IO ThreadId :: *))}]
myThreadId
  = GHC.Conc.Sync.myThreadId1
    `cast` (Sym (GHC.Types.N:IO[0] <ThreadId>_R)
            :: (State# RealWorld -> (# State# RealWorld, ThreadId #) :: *)
               ~R# (IO ThreadId :: *))

-- RHS size: {terms: 8, types: 11, coercions: 0, joins: 0/0}
GHC.Conc.Sync.yield1
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_a9CBl [Occ=Once] :: State# RealWorld) ->
                 case yield# s_a9CBl of s1_a9CBm { __DEFAULT ->
                 (# s1_a9CBm, GHC.Tuple.() #)
                 }}]
GHC.Conc.Sync.yield1
  = \ (s_a9CBl :: State# RealWorld) ->
      case yield# s_a9CBl of s1_a9CBm { __DEFAULT ->
      (# s1_a9CBm, GHC.Tuple.() #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
yield :: IO ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.yield1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
yield
  = GHC.Conc.Sync.yield1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))

-- RHS size: {terms: 24, types: 23, coercions: 6, joins: 0/0}
GHC.Conc.Sync.labelThread1
  :: ThreadId
     -> String -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S,1*U(U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9Dh1 [Occ=Once!] :: ThreadId)
                 (str_a9CBo [Occ=Once] :: String)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ds_d9Dh1 of { ThreadId t_a9CBn [Occ=OnceL] ->
                 GHC.Foreign.charIsRepresentable3
                   @ ()
                   utf8
                   str_a9CBo
                   ((\ (ds1_d9Dh2 [Occ=Once!] :: Ptr CChar)
                       (eta1_X6 [Occ=Once, OS=OneShot] :: State# RealWorld) ->
                       case ds1_d9Dh2 of { Ptr p_a9CBp [Occ=Once] ->
                       case labelThread# t_a9CBn p_a9CBp eta1_X6 of s1_a9CBr
                       { __DEFAULT ->
                       (# s1_a9CBr, GHC.Tuple.() #)
                       }
                       })
                    `cast` (<Ptr CChar>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                            :: (Ptr CChar
                                -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                               ~R# (Ptr CChar -> IO () :: *)))
                   eta_B1
                 }}]
GHC.Conc.Sync.labelThread1
  = \ (ds_d9Dh1 :: ThreadId)
      (str_a9CBo :: String)
      (eta_B1 :: State# RealWorld) ->
      case ds_d9Dh1 of { ThreadId t_a9CBn ->
      GHC.Foreign.charIsRepresentable3
        @ ()
        utf8
        str_a9CBo
        ((\ (ds1_d9Dh2 :: Ptr CChar)
            (eta1_X6 [OS=OneShot] :: State# RealWorld) ->
            case ds1_d9Dh2 of { Ptr p_a9CBp ->
            case labelThread# t_a9CBn p_a9CBp eta1_X6 of s1_a9CBr
            { __DEFAULT ->
            (# s1_a9CBr, GHC.Tuple.() #)
            }
            })
         `cast` (<Ptr CChar>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                 :: (Ptr CChar
                     -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                    ~R# (Ptr CChar -> IO () :: *)))
        eta_B1
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
labelThread :: ThreadId -> String -> IO ()
[GblId,
 Arity=3,
 Str=<S,1*U(U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.labelThread1
               `cast` (<ThreadId>_R
                       ->_R <String>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (ThreadId
                           -> String -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (ThreadId -> String -> IO () :: *))}]
labelThread
  = GHC.Conc.Sync.labelThread1
    `cast` (<ThreadId>_R
            ->_R <String>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (ThreadId
                -> String -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (ThreadId -> String -> IO () :: *))

-- RHS size: {terms: 9, types: 8, coercions: 0, joins: 0/0}
pseq [InlPrag=INLINE (sat-args=2)] :: forall a b. a -> b -> b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ a_a9CZR)
                 (@ b_a9CZS)
                 (x_a9CBs [Occ=Once] :: a_a9CZR)
                 (y_a9CBt [Occ=Once] :: b_a9CZS) ->
                 case x_a9CBs of { __DEFAULT -> lazy @ b_a9CZS y_a9CBt }}]
pseq
  = \ (@ a_a9CZR)
      (@ b_a9CZS)
      (x_a9CBs :: a_a9CZR)
      (y_a9CBt :: b_a9CZS) ->
      case x_a9CBs of { __DEFAULT -> lazy @ b_a9CZS y_a9CBt }

-- RHS size: {terms: 10, types: 9, coercions: 0, joins: 0/0}
par [InlPrag=INLINE (sat-args=2)] :: forall a b. a -> b -> b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (@ a_a9CZK)
                 (@ b_a9CZL)
                 (x_a9CBu [Occ=Once] :: a_a9CZK)
                 (y_a9CBv [Occ=Once] :: b_a9CZL) ->
                 case par# @ a_a9CZK x_a9CBu of { __DEFAULT ->
                 lazy @ b_a9CZL y_a9CBv
                 }}]
par
  = \ (@ a_a9CZK)
      (@ b_a9CZL)
      (x_a9CBu :: a_a9CZK)
      (y_a9CBv :: b_a9CZL) ->
      case par# @ a_a9CZK x_a9CBu of { __DEFAULT ->
      lazy @ b_a9CZL y_a9CBv
      }

Rec {
-- RHS size: {terms: 17, types: 35, coercions: 0, joins: 0/0}
GHC.Conc.Sync.runSparks_loop [Occ=LoopBreaker]
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []]
GHC.Conc.Sync.runSparks_loop
  = \ (s_a9CBx :: State# RealWorld) ->
      case getSpark# @ RealWorld @ Any s_a9CBx of
      { (# ipv_s9DmY, ipv1_s9DmZ, ipv2_s9Dn0 #) ->
      case ipv1_s9DmZ of {
        __DEFAULT ->
          case ipv2_s9Dn0 of { __DEFAULT ->
          GHC.Conc.Sync.runSparks_loop ipv_s9DmY
          };
        0# -> (# ipv_s9DmY, GHC.Tuple.() #)
      }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
runSparks :: IO ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.runSparks_loop
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
runSparks
  = GHC.Conc.Sync.runSparks_loop
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))

-- RHS size: {terms: 21, types: 34, coercions: 0, joins: 0/0}
GHC.Conc.Sync.threadCapability1
  :: ThreadId
     -> State# RealWorld -> (# State# RealWorld, (Int, Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9DfZ [Occ=Once!] :: ThreadId)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ds_d9DfZ of { ThreadId t_a9CBI [Occ=Once] ->
                 case threadStatus# t_a9CBI eta_B1 of
                 { (# ipv_s9Dn8 [Occ=Once], _ [Occ=Dead], ipv2_s9Dna [Occ=Once],
                      ipv3_s9Dnb [Occ=Once!] #) ->
                 (# ipv_s9Dn8,
                    (GHC.Types.I# ipv2_s9Dna,
                     case ipv3_s9Dnb of {
                       __DEFAULT -> GHC.Types.True;
                       0# -> GHC.Types.False
                     }) #)
                 }
                 }}]
GHC.Conc.Sync.threadCapability1
  = \ (ds_d9DfZ :: ThreadId) (eta_B1 :: State# RealWorld) ->
      case ds_d9DfZ of { ThreadId t_a9CBI ->
      case threadStatus# t_a9CBI eta_B1 of
      { (# ipv_s9Dn8, ipv1_s9Dn9, ipv2_s9Dna, ipv3_s9Dnb #) ->
      (# ipv_s9Dn8,
         (GHC.Types.I# ipv2_s9Dna,
          case ipv3_s9Dnb of {
            __DEFAULT -> GHC.Types.True;
            0# -> GHC.Types.False
          }) #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
threadCapability :: ThreadId -> IO (Int, Bool)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.threadCapability1
               `cast` (<ThreadId>_R ->_R Sym (GHC.Types.N:IO[0] <(Int, Bool)>_R)
                       :: (ThreadId
                           -> State# RealWorld -> (# State# RealWorld, (Int, Bool) #) :: *)
                          ~R# (ThreadId -> IO (Int, Bool) :: *))}]
threadCapability
  = GHC.Conc.Sync.threadCapability1
    `cast` (<ThreadId>_R ->_R Sym (GHC.Types.N:IO[0] <(Int, Bool)>_R)
            :: (ThreadId
                -> State# RealWorld -> (# State# RealWorld, (Int, Bool) #) :: *)
               ~R# (ThreadId -> IO (Int, Bool) :: *))

-- RHS size: {terms: 15, types: 30, coercions: 0, joins: 0/0}
GHC.Conc.Sync.mkWeakThreadId1
  :: ThreadId
     -> State# RealWorld -> (# State# RealWorld, Weak ThreadId #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (t_a9CBN [Occ=Once!] :: ThreadId)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case t_a9CBN of wild_X3o { ThreadId t#_a9CBO [Occ=Once] ->
                 case mkWeakNoFinalizer#
                        @ 'UnliftedRep @ ThreadId# @ ThreadId t#_a9CBO wild_X3o eta_B1
                 of
                 { (# ipv_s9Dng [Occ=Once], ipv1_s9Dnh [Occ=Once] #) ->
                 (# ipv_s9Dng, GHC.Weak.Weak @ ThreadId ipv1_s9Dnh #)
                 }
                 }}]
GHC.Conc.Sync.mkWeakThreadId1
  = \ (t_a9CBN :: ThreadId) (eta_B1 :: State# RealWorld) ->
      case t_a9CBN of wild_X3o { ThreadId t#_a9CBO ->
      case mkWeakNoFinalizer#
             @ 'UnliftedRep @ ThreadId# @ ThreadId t#_a9CBO wild_X3o eta_B1
      of
      { (# ipv_s9Dng, ipv1_s9Dnh #) ->
      (# ipv_s9Dng, GHC.Weak.Weak @ ThreadId ipv1_s9Dnh #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 6, joins: 0/0}
mkWeakThreadId :: ThreadId -> IO (Weak ThreadId)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.mkWeakThreadId1
               `cast` (<ThreadId>_R ->_R Sym (GHC.Types.N:IO[0] <Weak ThreadId>_R)
                       :: (ThreadId
                           -> State# RealWorld -> (# State# RealWorld, Weak ThreadId #) :: *)
                          ~R# (ThreadId -> IO (Weak ThreadId) :: *))}]
mkWeakThreadId
  = GHC.Conc.Sync.mkWeakThreadId1
    `cast` (<ThreadId>_R ->_R Sym (GHC.Types.N:IO[0] <Weak ThreadId>_R)
            :: (ThreadId
                -> State# RealWorld -> (# State# RealWorld, Weak ThreadId #) :: *)
               ~R# (ThreadId -> IO (Weak ThreadId) :: *))

-- RHS size: {terms: 14, types: 32, coercions: 6, joins: 0/0}
GHC.Conc.Sync.newStablePtrPrimMVar1
  :: MVar ()
     -> State# RealWorld -> (# State# RealWorld, StablePtr PrimMVar #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9DfF [Occ=Once!] :: MVar ())
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ds_d9DfF of { MVar m_a9CBS [Occ=Once] ->
                 case makeStablePtr#
                        @ PrimMVar
                        (m_a9CBS
                         `cast` (UnsafeCo representational (MVar# RealWorld ()) PrimMVar
                                 :: (MVar# RealWorld () :: TYPE 'UnliftedRep) ~R# (PrimMVar :: *)))
                        eta_B1
                 of
                 { (# ipv_s9Dnl [Occ=Once], ipv1_s9Dnm [Occ=Once] #) ->
                 (# ipv_s9Dnl, GHC.Stable.StablePtr @ PrimMVar ipv1_s9Dnm #)
                 }
                 }}]
GHC.Conc.Sync.newStablePtrPrimMVar1
  = \ (ds_d9DfF :: MVar ()) (eta_B1 :: State# RealWorld) ->
      case ds_d9DfF of { MVar m_a9CBS ->
      case makeStablePtr#
             @ PrimMVar
             (m_a9CBS
              `cast` (UnsafeCo representational (MVar# RealWorld ()) PrimMVar
                      :: (MVar# RealWorld () :: TYPE 'UnliftedRep) ~R# (PrimMVar :: *)))
             eta_B1
      of
      { (# ipv_s9Dnl, ipv1_s9Dnm #) ->
      (# ipv_s9Dnl, GHC.Stable.StablePtr @ PrimMVar ipv1_s9Dnm #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
newStablePtrPrimMVar :: MVar () -> IO (StablePtr PrimMVar)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.newStablePtrPrimMVar1
               `cast` (<MVar ()>_R
                       ->_R Sym (GHC.Types.N:IO[0] <StablePtr PrimMVar>_R)
                       :: (MVar ()
                           -> State# RealWorld
                           -> (# State# RealWorld, StablePtr PrimMVar #) :: *)
                          ~R# (MVar () -> IO (StablePtr PrimMVar) :: *))}]
newStablePtrPrimMVar
  = GHC.Conc.Sync.newStablePtrPrimMVar1
    `cast` (<MVar ()>_R
            ->_R Sym (GHC.Types.N:IO[0] <StablePtr PrimMVar>_R)
            :: (MVar ()
                -> State# RealWorld
                -> (# State# RealWorld, StablePtr PrimMVar #) :: *)
               ~R# (MVar () -> IO (StablePtr PrimMVar) :: *))

-- RHS size: {terms: 12, types: 22, coercions: 4, joins: 0/0}
$c>>=_r9FuK
  :: forall a b.
     STM a
     -> (a -> STM b) -> State# RealWorld -> (# State# RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=OtherCon []]
$c>>=_r9FuK
  = \ (@ a_a9D84)
      (@ b_a9D85)
      (m_a9CA3 :: STM a_a9D84)
      (k_a9CA4 :: a_a9D84 -> STM b_a9D85)
      (s_a9CBZ :: State# RealWorld) ->
      case (m_a9CA3
            `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D84>_R
                    :: (STM a_a9D84 :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a9D84 #) :: *)))
             s_a9CBZ
      of
      { (# ipv_s9Dnq, ipv1_s9Dnr #) ->
      ((k_a9CA4 ipv1_s9Dnr)
       `cast` (GHC.Conc.Sync.N:STM[0] <b_a9D85>_R
               :: (STM b_a9D85 :: *)
                  ~R# (State# RealWorld -> (# State# RealWorld, b_a9D85 #) :: *)))
        ipv_s9Dnq
      }

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
GHC.Conc.Sync.$fMonadSTM_$c>>= [InlPrag=INLINE (sat-args=2)]
  :: forall a b. STM a -> (a -> STM b) -> STM b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= (\ (@ a_X9DbI)
                  (@ b_X9DbK)
                  (m_X9CDJ [Occ=Once] :: STM a_X9DbI)
                  (k_X9CDL [Occ=Once!] :: a_X9DbI -> STM b_X9DbK)
                  (s_a9CBZ [Occ=Once] :: State# RealWorld) ->
                  case (m_X9CDJ
                        `cast` (GHC.Conc.Sync.N:STM[0] <a_X9DbI>_R
                                :: (STM a_X9DbI :: *)
                                   ~R# (State# RealWorld -> (# State# RealWorld, a_X9DbI #) :: *)))
                         s_a9CBZ
                  of
                  { (# ipv_s9Dnq [Occ=Once], ipv1_s9Dnr [Occ=Once] #) ->
                  ((k_X9CDL ipv1_s9Dnr)
                   `cast` (GHC.Conc.Sync.N:STM[0] <b_X9DbK>_R
                           :: (STM b_X9DbK :: *)
                              ~R# (State# RealWorld -> (# State# RealWorld, b_X9DbK #) :: *)))
                    ipv_s9Dnq
                  })
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <STM a>_R
                       ->_R <a -> STM b>_R
                       ->_R Sym (GHC.Conc.Sync.N:STM[0] <b>_R)
                       :: (forall a b.
                           STM a
                           -> (a -> STM b)
                           -> State# RealWorld
                           -> (# State# RealWorld, b #) :: *)
                          ~R# (forall a b. STM a -> (a -> STM b) -> STM b :: *))}]
GHC.Conc.Sync.$fMonadSTM_$c>>=
  = $c>>=_r9FuK
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <STM a>_R
            ->_R <a -> STM b>_R
            ->_R Sym (GHC.Conc.Sync.N:STM[0] <b>_R)
            :: (forall a b.
                STM a
                -> (a -> STM b)
                -> State# RealWorld
                -> (# State# RealWorld, b #) :: *)
               ~R# (forall a b. STM a -> (a -> STM b) -> STM b :: *))

-- RHS size: {terms: 11, types: 21, coercions: 4, joins: 0/0}
$c*>_r9FuL
  :: forall a b.
     STM a -> STM b -> State# RealWorld -> (# State# RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []]
$c*>_r9FuL
  = \ (@ a_a9D9z)
      (@ b_a9D9A)
      (m_a9CA6 :: STM a_a9D9z)
      (k_a9CA7 :: STM b_a9D9A)
      (s_a9CC4 :: State# RealWorld) ->
      case (m_a9CA6
            `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D9z>_R
                    :: (STM a_a9D9z :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a9D9z #) :: *)))
             s_a9CC4
      of
      { (# ipv_s9Dny, ipv1_s9Dnz #) ->
      (k_a9CA7
       `cast` (GHC.Conc.Sync.N:STM[0] <b_a9D9A>_R
               :: (STM b_a9D9A :: *)
                  ~R# (State# RealWorld -> (# State# RealWorld, b_a9D9A #) :: *)))
        ipv_s9Dny
      }

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
GHC.Conc.Sync.$fApplicativeSTM_$c*> [InlPrag=INLINE (sat-args=2)]
  :: forall a b. STM a -> STM b -> STM b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,A))><L,1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= (\ (@ a_X9Ddp)
                  (@ b_X9Ddr)
                  (m_X9CDY [Occ=Once] :: STM a_X9Ddp)
                  (k_X9CE0 [Occ=Once] :: STM b_X9Ddr)
                  (s_a9CC4 [Occ=Once] :: State# RealWorld) ->
                  case (m_X9CDY
                        `cast` (GHC.Conc.Sync.N:STM[0] <a_X9Ddp>_R
                                :: (STM a_X9Ddp :: *)
                                   ~R# (State# RealWorld -> (# State# RealWorld, a_X9Ddp #) :: *)))
                         s_a9CC4
                  of
                  { (# ipv_s9Dny [Occ=Once], _ [Occ=Dead] #) ->
                  (k_X9CE0
                   `cast` (GHC.Conc.Sync.N:STM[0] <b_X9Ddr>_R
                           :: (STM b_X9Ddr :: *)
                              ~R# (State# RealWorld -> (# State# RealWorld, b_X9Ddr #) :: *)))
                    ipv_s9Dny
                  })
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <STM a>_R ->_R <STM b>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <b>_R)
                       :: (forall a b.
                           STM a
                           -> STM b -> State# RealWorld -> (# State# RealWorld, b #) :: *)
                          ~R# (forall a b. STM a -> STM b -> STM b :: *))}]
GHC.Conc.Sync.$fApplicativeSTM_$c*>
  = $c*>_r9FuL
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <STM a>_R ->_R <STM b>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <b>_R)
            :: (forall a b.
                STM a
                -> STM b -> State# RealWorld -> (# State# RealWorld, b #) :: *)
               ~R# (forall a b. STM a -> STM b -> STM b :: *))

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
orElse :: forall a. STM a -> STM a -> STM a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<xC(S),1*C1(U)><L,1*C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= catchRetry#
               `cast` (forall (a :: <*>_N).
                       Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                       ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                       ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                       :: (forall a.
                           (State# RealWorld -> (# State# RealWorld, a #))
                           -> (State# RealWorld -> (# State# RealWorld, a #))
                           -> State# RealWorld
                           -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. STM a -> STM a -> STM a :: *))}]
orElse
  = catchRetry#
    `cast` (forall (a :: <*>_N).
            Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
            ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
            ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
            :: (forall a.
                (State# RealWorld -> (# State# RealWorld, a #))
                -> (State# RealWorld -> (# State# RealWorld, a #))
                -> State# RealWorld
                -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. STM a -> STM a -> STM a :: *))

-- RHS size: {terms: 20, types: 22, coercions: 4, joins: 0/0}
GHC.Conc.Sync.catchSTM1
  :: forall e a.
     Exception e =>
     STM a
     -> (e -> STM a) -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(U),A)><L,1*C1(U)><L,1*C1(C1(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ e_a9CX4)
                 (@ a_a9CX5)
                 ($dException_a9CX7 [Occ=Once] :: Exception e_a9CX4)
                 (ds_d9Dfp [Occ=Once] :: STM a_a9CX5)
                 (handler_a9CCh [Occ=Once!] :: e_a9CX4 -> STM a_a9CX5)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 catchSTM#
                   @ a_a9CX5
                   @ SomeException
                   (ds_d9Dfp
                    `cast` (GHC.Conc.Sync.N:STM[0] <a_a9CX5>_R
                            :: (STM a_a9CX5 :: *)
                               ~R# (State# RealWorld -> (# State# RealWorld, a_a9CX5 #) :: *)))
                   (\ (e1_a9CCj [OS=OneShot] :: SomeException) ->
                      case fromException @ e_a9CX4 $dException_a9CX7 e1_a9CCj of {
                        Nothing -> raiseIO# @ SomeException @ a_a9CX5 e1_a9CCj;
                        Just e'_a9CCk [Occ=Once] ->
                          (handler_a9CCh e'_a9CCk)
                          `cast` (GHC.Conc.Sync.N:STM[0] <a_a9CX5>_R
                                  :: (STM a_a9CX5 :: *)
                                     ~R# (State# RealWorld -> (# State# RealWorld, a_a9CX5 #) :: *))
                      })
                   eta_B1}]
GHC.Conc.Sync.catchSTM1
  = \ (@ e_a9CX4)
      (@ a_a9CX5)
      ($dException_a9CX7 :: Exception e_a9CX4)
      (ds_d9Dfp :: STM a_a9CX5)
      (handler_a9CCh :: e_a9CX4 -> STM a_a9CX5)
      (eta_B1 :: State# RealWorld) ->
      catchSTM#
        @ a_a9CX5
        @ SomeException
        (ds_d9Dfp
         `cast` (GHC.Conc.Sync.N:STM[0] <a_a9CX5>_R
                 :: (STM a_a9CX5 :: *)
                    ~R# (State# RealWorld -> (# State# RealWorld, a_a9CX5 #) :: *)))
        (\ (e1_a9CCj [OS=OneShot] :: SomeException) ->
           case fromException @ e_a9CX4 $dException_a9CX7 e1_a9CCj of {
             Nothing -> raiseIO# @ SomeException @ a_a9CX5 e1_a9CCj;
             Just e'_a9CCk ->
               (handler_a9CCh e'_a9CCk)
               `cast` (GHC.Conc.Sync.N:STM[0] <a_a9CX5>_R
                       :: (STM a_a9CX5 :: *)
                          ~R# (State# RealWorld -> (# State# RealWorld, a_a9CX5 #) :: *))
           })
        eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 19, joins: 0/0}
catchSTM
  :: forall e a. Exception e => STM a -> (e -> STM a) -> STM a
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(U),A)><L,1*C1(U)><L,1*C1(C1(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.catchSTM1
               `cast` (forall (e :: <*>_N) (a :: <*>_N).
                       <Exception e>_R
                       ->_R <STM a>_R
                       ->_R <e -> STM a>_R
                       ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                       :: (forall e a.
                           Exception e =>
                           STM a
                           -> (e -> STM a)
                           -> State# RealWorld
                           -> (# State# RealWorld, a #) :: *)
                          ~R# (forall e a.
                               Exception e =>
                               STM a -> (e -> STM a) -> STM a :: *))}]
catchSTM
  = GHC.Conc.Sync.catchSTM1
    `cast` (forall (e :: <*>_N) (a :: <*>_N).
            <Exception e>_R
            ->_R <STM a>_R
            ->_R <e -> STM a>_R
            ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
            :: (forall e a.
                Exception e =>
                STM a
                -> (e -> STM a)
                -> State# RealWorld
                -> (# State# RealWorld, a #) :: *)
               ~R# (forall e a.
                    Exception e =>
                    STM a -> (e -> STM a) -> STM a :: *))

-- RHS size: {terms: 6, types: 12, coercions: 0, joins: 0/0}
$cpure_r9FuM
  :: forall a. a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []]
$cpure_r9FuM
  = \ (@ a_a9D8R)
      (x_a9CA5 :: a_a9D8R)
      (s_a9CC7 :: State# RealWorld) ->
      (# s_a9CC7, x_a9CA5 #)

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
GHC.Conc.Sync.$fApplicativeSTM_$cpure [InlPrag=INLINE (sat-args=1)]
  :: forall a. a -> STM a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= (\ (@ a_X9DcX)
                  (x_X9CEc [Occ=Once] :: a_X9DcX)
                  (s_a9CC7 [Occ=Once] :: State# RealWorld) ->
                  (# s_a9CC7, x_X9CEc #))
               `cast` (forall (a :: <*>_N).
                       <a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                       :: (forall a.
                           a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. a -> STM a :: *))}]
GHC.Conc.Sync.$fApplicativeSTM_$cpure
  = $cpure_r9FuM
    `cast` (forall (a :: <*>_N).
            <a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
            :: (forall a.
                a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. a -> STM a :: *))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.Conc.Sync.unsafeIOToSTM1 :: forall a. IO a -> IO a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_a9CW9) (ds_d9DeK [Occ=Once] :: IO a_a9CW9) ->
                 ds_d9DeK}]
GHC.Conc.Sync.unsafeIOToSTM1
  = \ (@ a_a9CW9) (ds_d9DeK :: IO a_a9CW9) -> ds_d9DeK

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
unsafeIOToSTM :: forall a. IO a -> STM a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.unsafeIOToSTM1
               `cast` (forall (a :: <*>_N).
                       <IO a>_R
                       ->_R GHC.Types.N:IO[0] <a>_R ; Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                       :: (forall a. IO a -> IO a :: *)
                          ~R# (forall a. IO a -> STM a :: *))}]
unsafeIOToSTM
  = GHC.Conc.Sync.unsafeIOToSTM1
    `cast` (forall (a :: <*>_N).
            <IO a>_R
            ->_R GHC.Types.N:IO[0] <a>_R ; Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
            :: (forall a. IO a -> IO a :: *)
               ~R# (forall a. IO a -> STM a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 10, joins: 0/0}
atomically :: forall a. STM a -> IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= atomically#
               `cast` (forall (a :: <*>_N).
                       Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           (State# RealWorld -> (# State# RealWorld, a #))
                           -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. STM a -> IO a :: *))}]
atomically
  = atomically#
    `cast` (forall (a :: <*>_N).
            Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
            ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                (State# RealWorld -> (# State# RealWorld, a #))
                -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. STM a -> IO a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 6, joins: 0/0}
retry :: forall a. STM a
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= retry#
               `cast` (forall (a :: <*>_N). Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                       :: (forall a. State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. STM a :: *))}]
retry
  = retry#
    `cast` (forall (a :: <*>_N). Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
            :: (forall a. State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. STM a :: *))

-- RHS size: {terms: 10, types: 12, coercions: 0, joins: 0/0}
GHC.Conc.Sync.throwSTM1
  :: forall e a.
     Exception e =>
     e -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ e_a9CVN)
                 (@ a_a9CVO)
                 ($dException_a9CVQ [Occ=Once] :: Exception e_a9CVN)
                 (e1_a9CCf [Occ=Once] :: e_a9CVN)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 raiseIO#
                   @ SomeException
                   @ a_a9CVO
                   (toException @ e_a9CVN $dException_a9CVQ e1_a9CCf)
                   eta_B1}]
GHC.Conc.Sync.throwSTM1
  = \ (@ e_a9CVN)
      (@ a_a9CVO)
      ($dException_a9CVQ :: Exception e_a9CVN)
      (e1_a9CCf :: e_a9CVN)
      (eta_B1 :: State# RealWorld) ->
      raiseIO#
        @ SomeException
        @ a_a9CVO
        (toException @ e_a9CVN $dException_a9CVQ e1_a9CCf)
        eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
throwSTM :: forall e a. Exception e => e -> STM a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.throwSTM1
               `cast` (forall (e :: <*>_N) (a :: <*>_N).
                       <Exception e>_R ->_R <e>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                       :: (forall e a.
                           Exception e =>
                           e -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall e a. Exception e => e -> STM a :: *))}]
throwSTM
  = GHC.Conc.Sync.throwSTM1
    `cast` (forall (e :: <*>_N) (a :: <*>_N).
            <Exception e>_R ->_R <e>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
            :: (forall e a.
                Exception e =>
                e -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall e a. Exception e => e -> STM a :: *))

-- RHS size: {terms: 12, types: 31, coercions: 0, joins: 0/0}
GHC.Conc.Sync.newTVar1
  :: forall a.
     a -> State# RealWorld -> (# State# RealWorld, TVar a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9CVx)
                 (val_a9CCr [Occ=Once] :: a_a9CVx)
                 (s1#_a9CCs [Occ=Once] :: State# RealWorld) ->
                 case newTVar# @ a_a9CVx @ RealWorld val_a9CCr s1#_a9CCs of
                 { (# ipv_s9DnM [Occ=Once], ipv1_s9DnN [Occ=Once] #) ->
                 (# ipv_s9DnM, GHC.Conc.Sync.TVar @ a_a9CVx ipv1_s9DnN #)
                 }}]
GHC.Conc.Sync.newTVar1
  = \ (@ a_a9CVx)
      (val_a9CCr :: a_a9CVx)
      (s1#_a9CCs :: State# RealWorld) ->
      case newTVar# @ a_a9CVx @ RealWorld val_a9CCr s1#_a9CCs of
      { (# ipv_s9DnM, ipv1_s9DnN #) ->
      (# ipv_s9DnM, GHC.Conc.Sync.TVar @ a_a9CVx ipv1_s9DnN #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
newTVar :: forall a. a -> STM (TVar a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.newTVar1
               `cast` (forall (a :: <*>_N).
                       <a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <TVar a>_R)
                       :: (forall a.
                           a -> State# RealWorld -> (# State# RealWorld, TVar a #) :: *)
                          ~R# (forall a. a -> STM (TVar a) :: *))}]
newTVar
  = GHC.Conc.Sync.newTVar1
    `cast` (forall (a :: <*>_N).
            <a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <TVar a>_R)
            :: (forall a.
                a -> State# RealWorld -> (# State# RealWorld, TVar a #) :: *)
               ~R# (forall a. a -> STM (TVar a) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
newTVarIO :: forall a. a -> IO (TVar a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.newTVar1
               `cast` (forall (a :: <*>_N).
                       <a>_R ->_R Sym (GHC.Types.N:IO[0] <TVar a>_R)
                       :: (forall a.
                           a -> State# RealWorld -> (# State# RealWorld, TVar a #) :: *)
                          ~R# (forall a. a -> IO (TVar a) :: *))}]
newTVarIO
  = GHC.Conc.Sync.newTVar1
    `cast` (forall (a :: <*>_N).
            <a>_R ->_R Sym (GHC.Types.N:IO[0] <TVar a>_R)
            :: (forall a.
                a -> State# RealWorld -> (# State# RealWorld, TVar a #) :: *)
               ~R# (forall a. a -> IO (TVar a) :: *))

-- RHS size: {terms: 9, types: 13, coercions: 0, joins: 0/0}
GHC.Conc.Sync.readTVarIO1
  :: forall a.
     TVar a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9CVg)
                 (ds_d9Deb [Occ=Once!] :: TVar a_a9CVg)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ds_d9Deb of { TVar tvar#_a9CCz [Occ=Once] ->
                 readTVarIO# @ RealWorld @ a_a9CVg tvar#_a9CCz eta_B1
                 }}]
GHC.Conc.Sync.readTVarIO1
  = \ (@ a_a9CVg)
      (ds_d9Deb :: TVar a_a9CVg)
      (eta_B1 :: State# RealWorld) ->
      case ds_d9Deb of { TVar tvar#_a9CCz ->
      readTVarIO# @ RealWorld @ a_a9CVg tvar#_a9CCz eta_B1
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
readTVarIO :: forall a. TVar a -> IO a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.readTVarIO1
               `cast` (forall (a :: <*>_N).
                       <TVar a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           TVar a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. TVar a -> IO a :: *))}]
readTVarIO
  = GHC.Conc.Sync.readTVarIO1
    `cast` (forall (a :: <*>_N).
            <TVar a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                TVar a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. TVar a -> IO a :: *))

-- RHS size: {terms: 9, types: 13, coercions: 0, joins: 0/0}
GHC.Conc.Sync.readTVar1
  :: forall a.
     TVar a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9CV9)
                 (ds_d9De6 [Occ=Once!] :: TVar a_a9CV9)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ds_d9De6 of { TVar tvar#_a9CCB [Occ=Once] ->
                 readTVar# @ RealWorld @ a_a9CV9 tvar#_a9CCB eta_B1
                 }}]
GHC.Conc.Sync.readTVar1
  = \ (@ a_a9CV9)
      (ds_d9De6 :: TVar a_a9CV9)
      (eta_B1 :: State# RealWorld) ->
      case ds_d9De6 of { TVar tvar#_a9CCB ->
      readTVar# @ RealWorld @ a_a9CV9 tvar#_a9CCB eta_B1
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
readTVar :: forall a. TVar a -> STM a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.readTVar1
               `cast` (forall (a :: <*>_N).
                       <TVar a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                       :: (forall a.
                           TVar a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. TVar a -> STM a :: *))}]
readTVar
  = GHC.Conc.Sync.readTVar1
    `cast` (forall (a :: <*>_N).
            <TVar a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
            :: (forall a.
                TVar a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. TVar a -> STM a :: *))

-- RHS size: {terms: 16, types: 23, coercions: 0, joins: 0/0}
GHC.Conc.Sync.writeTVar1
  :: forall a.
     TVar a -> a -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9CV0)
                 (ds_d9De0 [Occ=Once!] :: TVar a_a9CV0)
                 (val_a9CCE [Occ=Once] :: a_a9CV0)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ds_d9De0 of { TVar tvar#_a9CCD [Occ=Once] ->
                 case writeTVar# @ RealWorld @ a_a9CV0 tvar#_a9CCD val_a9CCE eta_B1
                 of s2#_a9CCG
                 { __DEFAULT ->
                 (# s2#_a9CCG, GHC.Tuple.() #)
                 }
                 }}]
GHC.Conc.Sync.writeTVar1
  = \ (@ a_a9CV0)
      (ds_d9De0 :: TVar a_a9CV0)
      (val_a9CCE :: a_a9CV0)
      (eta_B1 :: State# RealWorld) ->
      case ds_d9De0 of { TVar tvar#_a9CCD ->
      case writeTVar# @ RealWorld @ a_a9CV0 tvar#_a9CCD val_a9CCE eta_B1
      of s2#_a9CCG
      { __DEFAULT ->
      (# s2#_a9CCG, GHC.Tuple.() #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 11, joins: 0/0}
writeTVar :: forall a. TVar a -> a -> STM ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.writeTVar1
               `cast` (forall (a :: <*>_N).
                       <TVar a>_R ->_R <a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)
                       :: (forall a.
                           TVar a -> a -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. TVar a -> a -> STM () :: *))}]
writeTVar
  = GHC.Conc.Sync.writeTVar1
    `cast` (forall (a :: <*>_N).
            <TVar a>_R ->_R <a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)
            :: (forall a.
                TVar a -> a -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. TVar a -> a -> STM () :: *))

-- RHS size: {terms: 74, types: 9, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdBlockReason_$ccompare
  :: BlockReason -> BlockReason -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [270 320] 320 260}]
GHC.Conc.Sync.$fOrdBlockReason_$ccompare
  = \ (a_a9CHn :: BlockReason) (b_a9CHo :: BlockReason) ->
      case a_a9CHn of {
        BlockedOnMVar ->
          case b_a9CHo of {
            BlockedOnMVar -> GHC.Types.EQ;
            BlockedOnBlackHole -> GHC.Types.LT;
            BlockedOnException -> GHC.Types.LT;
            BlockedOnSTM -> GHC.Types.LT;
            BlockedOnForeignCall -> GHC.Types.LT;
            BlockedOnOther -> GHC.Types.LT
          };
        BlockedOnBlackHole ->
          case b_a9CHo of {
            BlockedOnMVar -> GHC.Types.GT;
            BlockedOnBlackHole -> GHC.Types.EQ;
            BlockedOnException -> GHC.Types.LT;
            BlockedOnSTM -> GHC.Types.LT;
            BlockedOnForeignCall -> GHC.Types.LT;
            BlockedOnOther -> GHC.Types.LT
          };
        BlockedOnException ->
          case b_a9CHo of {
            __DEFAULT -> GHC.Types.GT;
            BlockedOnException -> GHC.Types.EQ;
            BlockedOnSTM -> GHC.Types.LT;
            BlockedOnForeignCall -> GHC.Types.LT;
            BlockedOnOther -> GHC.Types.LT
          };
        BlockedOnSTM ->
          case b_a9CHo of {
            __DEFAULT -> GHC.Types.GT;
            BlockedOnSTM -> GHC.Types.EQ;
            BlockedOnForeignCall -> GHC.Types.LT;
            BlockedOnOther -> GHC.Types.LT
          };
        BlockedOnForeignCall ->
          case b_a9CHo of {
            __DEFAULT -> GHC.Types.GT;
            BlockedOnForeignCall -> GHC.Types.EQ;
            BlockedOnOther -> GHC.Types.LT
          };
        BlockedOnOther ->
          case b_a9CHo of {
            __DEFAULT -> GHC.Types.GT;
            BlockedOnOther -> GHC.Types.EQ
          }
      }

-- RHS size: {terms: 64, types: 9, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdBlockReason_$c<
  :: BlockReason -> BlockReason -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [220 270] 270 210}]
GHC.Conc.Sync.$fOrdBlockReason_$c<
  = \ (a_a9CHr :: BlockReason) (b_a9CHs :: BlockReason) ->
      case a_a9CHr of {
        BlockedOnMVar ->
          case b_a9CHs of {
            BlockedOnMVar -> GHC.Types.False;
            BlockedOnBlackHole -> GHC.Types.True;
            BlockedOnException -> GHC.Types.True;
            BlockedOnSTM -> GHC.Types.True;
            BlockedOnForeignCall -> GHC.Types.True;
            BlockedOnOther -> GHC.Types.True
          };
        BlockedOnBlackHole ->
          case b_a9CHs of {
            __DEFAULT -> GHC.Types.False;
            BlockedOnException -> GHC.Types.True;
            BlockedOnSTM -> GHC.Types.True;
            BlockedOnForeignCall -> GHC.Types.True;
            BlockedOnOther -> GHC.Types.True
          };
        BlockedOnException ->
          case b_a9CHs of {
            __DEFAULT -> GHC.Types.False;
            BlockedOnSTM -> GHC.Types.True;
            BlockedOnForeignCall -> GHC.Types.True;
            BlockedOnOther -> GHC.Types.True
          };
        BlockedOnSTM ->
          case b_a9CHs of {
            __DEFAULT -> GHC.Types.False;
            BlockedOnForeignCall -> GHC.Types.True;
            BlockedOnOther -> GHC.Types.True
          };
        BlockedOnForeignCall ->
          case b_a9CHs of {
            __DEFAULT -> GHC.Types.False;
            BlockedOnOther -> GHC.Types.True
          };
        BlockedOnOther -> case b_a9CHs of { __DEFAULT -> GHC.Types.False }
      }

-- RHS size: {terms: 64, types: 9, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdBlockReason_$c<=
  :: BlockReason -> BlockReason -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [270 220] 270 210}]
GHC.Conc.Sync.$fOrdBlockReason_$c<=
  = \ (a_a9CHv :: BlockReason) (b_a9CHw :: BlockReason) ->
      case b_a9CHw of {
        BlockedOnMVar ->
          case a_a9CHv of {
            BlockedOnMVar -> GHC.Types.True;
            BlockedOnBlackHole -> GHC.Types.False;
            BlockedOnException -> GHC.Types.False;
            BlockedOnSTM -> GHC.Types.False;
            BlockedOnForeignCall -> GHC.Types.False;
            BlockedOnOther -> GHC.Types.False
          };
        BlockedOnBlackHole ->
          case a_a9CHv of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnException -> GHC.Types.False;
            BlockedOnSTM -> GHC.Types.False;
            BlockedOnForeignCall -> GHC.Types.False;
            BlockedOnOther -> GHC.Types.False
          };
        BlockedOnException ->
          case a_a9CHv of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnSTM -> GHC.Types.False;
            BlockedOnForeignCall -> GHC.Types.False;
            BlockedOnOther -> GHC.Types.False
          };
        BlockedOnSTM ->
          case a_a9CHv of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnForeignCall -> GHC.Types.False;
            BlockedOnOther -> GHC.Types.False
          };
        BlockedOnForeignCall ->
          case a_a9CHv of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnOther -> GHC.Types.False
          };
        BlockedOnOther -> case a_a9CHv of { __DEFAULT -> GHC.Types.True }
      }

-- RHS size: {terms: 51, types: 8, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdBlockReason_$cmax
  :: BlockReason -> BlockReason -> BlockReason
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [200 170] 210 150}]
GHC.Conc.Sync.$fOrdBlockReason_$cmax
  = \ (x_a55d :: BlockReason) (y_a55e :: BlockReason) ->
      case y_a55e of {
        BlockedOnMVar -> x_a55d;
        BlockedOnBlackHole ->
          case x_a55d of {
            __DEFAULT -> GHC.Conc.Sync.BlockedOnBlackHole;
            BlockedOnException -> GHC.Conc.Sync.BlockedOnException;
            BlockedOnSTM -> GHC.Conc.Sync.BlockedOnSTM;
            BlockedOnForeignCall -> GHC.Conc.Sync.BlockedOnForeignCall;
            BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther
          };
        BlockedOnException ->
          case x_a55d of {
            __DEFAULT -> GHC.Conc.Sync.BlockedOnException;
            BlockedOnSTM -> GHC.Conc.Sync.BlockedOnSTM;
            BlockedOnForeignCall -> GHC.Conc.Sync.BlockedOnForeignCall;
            BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther
          };
        BlockedOnSTM ->
          case x_a55d of {
            __DEFAULT -> GHC.Conc.Sync.BlockedOnSTM;
            BlockedOnForeignCall -> GHC.Conc.Sync.BlockedOnForeignCall;
            BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther
          };
        BlockedOnForeignCall ->
          case x_a55d of {
            __DEFAULT -> GHC.Conc.Sync.BlockedOnForeignCall;
            BlockedOnOther -> GHC.Conc.Sync.BlockedOnOther
          };
        BlockedOnOther ->
          case x_a55d of { __DEFAULT -> GHC.Conc.Sync.BlockedOnOther }
      }

-- RHS size: {terms: 64, types: 9, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdBlockReason_$c>=
  :: BlockReason -> BlockReason -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [220 270] 270 210}]
GHC.Conc.Sync.$fOrdBlockReason_$c>=
  = \ (a_a9CHz :: BlockReason) (b_a9CHA :: BlockReason) ->
      case a_a9CHz of {
        BlockedOnMVar ->
          case b_a9CHA of {
            BlockedOnMVar -> GHC.Types.True;
            BlockedOnBlackHole -> GHC.Types.False;
            BlockedOnException -> GHC.Types.False;
            BlockedOnSTM -> GHC.Types.False;
            BlockedOnForeignCall -> GHC.Types.False;
            BlockedOnOther -> GHC.Types.False
          };
        BlockedOnBlackHole ->
          case b_a9CHA of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnException -> GHC.Types.False;
            BlockedOnSTM -> GHC.Types.False;
            BlockedOnForeignCall -> GHC.Types.False;
            BlockedOnOther -> GHC.Types.False
          };
        BlockedOnException ->
          case b_a9CHA of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnSTM -> GHC.Types.False;
            BlockedOnForeignCall -> GHC.Types.False;
            BlockedOnOther -> GHC.Types.False
          };
        BlockedOnSTM ->
          case b_a9CHA of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnForeignCall -> GHC.Types.False;
            BlockedOnOther -> GHC.Types.False
          };
        BlockedOnForeignCall ->
          case b_a9CHA of {
            __DEFAULT -> GHC.Types.True;
            BlockedOnOther -> GHC.Types.False
          };
        BlockedOnOther -> case b_a9CHA of { __DEFAULT -> GHC.Types.True }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdBlockReason_$c>
  :: BlockReason -> BlockReason -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (a_a9CHx [Occ=Once] :: BlockReason)
                 (b_a9CHy [Occ=Once] :: BlockReason) ->
                 GHC.Conc.Sync.$fOrdBlockReason_$c< b_a9CHy a_a9CHx}]
GHC.Conc.Sync.$fOrdBlockReason_$c>
  = \ (a_a9CHx :: BlockReason) (b_a9CHy :: BlockReason) ->
      GHC.Conc.Sync.$fOrdBlockReason_$c< b_a9CHy a_a9CHx

-- RHS size: {terms: 51, types: 8, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdBlockReason_$cmin
  :: BlockReason -> BlockReason -> BlockReason
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [200 170] 210 110}]
GHC.Conc.Sync.$fOrdBlockReason_$cmin
  = \ (x_a55m :: BlockReason) (y_a55n :: BlockReason) ->
      case y_a55n of {
        BlockedOnMVar ->
          case x_a55m of { __DEFAULT -> GHC.Conc.Sync.BlockedOnMVar };
        BlockedOnBlackHole ->
          case x_a55m of wild1_Xbg {
            __DEFAULT -> wild1_Xbg;
            BlockedOnException -> GHC.Conc.Sync.BlockedOnBlackHole;
            BlockedOnSTM -> GHC.Conc.Sync.BlockedOnBlackHole;
            BlockedOnForeignCall -> GHC.Conc.Sync.BlockedOnBlackHole;
            BlockedOnOther -> GHC.Conc.Sync.BlockedOnBlackHole
          };
        BlockedOnException ->
          case x_a55m of wild1_Xbg {
            __DEFAULT -> wild1_Xbg;
            BlockedOnSTM -> GHC.Conc.Sync.BlockedOnException;
            BlockedOnForeignCall -> GHC.Conc.Sync.BlockedOnException;
            BlockedOnOther -> GHC.Conc.Sync.BlockedOnException
          };
        BlockedOnSTM ->
          case x_a55m of wild1_Xbg {
            __DEFAULT -> wild1_Xbg;
            BlockedOnForeignCall -> GHC.Conc.Sync.BlockedOnSTM;
            BlockedOnOther -> GHC.Conc.Sync.BlockedOnSTM
          };
        BlockedOnForeignCall ->
          case x_a55m of wild1_Xbg {
            __DEFAULT -> wild1_Xbg;
            BlockedOnOther -> GHC.Conc.Sync.BlockedOnForeignCall
          };
        BlockedOnOther -> x_a55m
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdBlockReason [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord BlockReason
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: BlockReason
                         GHC.Conc.Sync.$fEqBlockReason
                         GHC.Conc.Sync.$fOrdBlockReason_$ccompare
                         GHC.Conc.Sync.$fOrdBlockReason_$c<
                         GHC.Conc.Sync.$fOrdBlockReason_$c<=
                         GHC.Conc.Sync.$fOrdBlockReason_$c>
                         GHC.Conc.Sync.$fOrdBlockReason_$c>=
                         GHC.Conc.Sync.$fOrdBlockReason_$cmax
                         GHC.Conc.Sync.$fOrdBlockReason_$cmin]
GHC.Conc.Sync.$fOrdBlockReason
  = GHC.Classes.C:Ord
      @ BlockReason
      GHC.Conc.Sync.$fEqBlockReason
      GHC.Conc.Sync.$fOrdBlockReason_$ccompare
      GHC.Conc.Sync.$fOrdBlockReason_$c<
      GHC.Conc.Sync.$fOrdBlockReason_$c<=
      GHC.Conc.Sync.$fOrdBlockReason_$c>
      GHC.Conc.Sync.$fOrdBlockReason_$c>=
      GHC.Conc.Sync.$fOrdBlockReason_$cmax
      GHC.Conc.Sync.$fOrdBlockReason_$cmin

-- RHS size: {terms: 44, types: 11, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
  :: ThreadStatus -> ThreadStatus -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [150 170] 200 120}]
GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
  = \ (a_a9CHD :: ThreadStatus) (b_a9CHE :: ThreadStatus) ->
      case a_a9CHD of {
        ThreadRunning ->
          case b_a9CHE of {
            ThreadRunning -> GHC.Types.EQ;
            ThreadFinished -> GHC.Types.LT;
            ThreadBlocked ds_d9Dcq -> GHC.Types.LT;
            ThreadDied -> GHC.Types.LT
          };
        ThreadFinished ->
          case b_a9CHE of {
            ThreadRunning -> GHC.Types.GT;
            ThreadFinished -> GHC.Types.EQ;
            ThreadBlocked ds_d9Dcq -> GHC.Types.LT;
            ThreadDied -> GHC.Types.LT
          };
        ThreadBlocked a1_a9CHF ->
          case b_a9CHE of {
            __DEFAULT -> GHC.Types.GT;
            ThreadBlocked b1_a9CHG ->
              GHC.Conc.Sync.$fOrdBlockReason_$ccompare a1_a9CHF b1_a9CHG;
            ThreadDied -> GHC.Types.LT
          };
        ThreadDied ->
          case b_a9CHE of {
            __DEFAULT -> GHC.Types.GT;
            ThreadDied -> GHC.Types.EQ
          }
      }

-- RHS size: {terms: 99, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadStatus_$c<
  :: ThreadStatus -> ThreadStatus -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [130 150] 420 310}]
GHC.Conc.Sync.$fOrdThreadStatus_$c<
  = \ (x_a1MiF :: ThreadStatus) (y_a1MiG :: ThreadStatus) ->
      case x_a1MiF of {
        ThreadRunning ->
          case y_a1MiG of {
            ThreadRunning -> GHC.Types.False;
            ThreadFinished -> GHC.Types.True;
            ThreadBlocked ds_d9Dcq -> GHC.Types.True;
            ThreadDied -> GHC.Types.True
          };
        ThreadFinished ->
          case y_a1MiG of {
            __DEFAULT -> GHC.Types.False;
            ThreadBlocked ds_d9Dcq -> GHC.Types.True;
            ThreadDied -> GHC.Types.True
          };
        ThreadBlocked a1_a9CHF ->
          case y_a1MiG of {
            __DEFAULT -> GHC.Types.False;
            ThreadBlocked b1_a9CHG ->
              case a1_a9CHF of {
                BlockedOnMVar ->
                  case b1_a9CHG of {
                    BlockedOnMVar -> GHC.Types.False;
                    BlockedOnBlackHole -> GHC.Types.True;
                    BlockedOnException -> GHC.Types.True;
                    BlockedOnSTM -> GHC.Types.True;
                    BlockedOnForeignCall -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.True
                  };
                BlockedOnBlackHole ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.False;
                    BlockedOnException -> GHC.Types.True;
                    BlockedOnSTM -> GHC.Types.True;
                    BlockedOnForeignCall -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.True
                  };
                BlockedOnException ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.False;
                    BlockedOnSTM -> GHC.Types.True;
                    BlockedOnForeignCall -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.True
                  };
                BlockedOnSTM ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.False;
                    BlockedOnForeignCall -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.True
                  };
                BlockedOnForeignCall ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.False;
                    BlockedOnOther -> GHC.Types.True
                  };
                BlockedOnOther -> case b1_a9CHG of { __DEFAULT -> GHC.Types.False }
              };
            ThreadDied -> GHC.Types.True
          };
        ThreadDied -> case y_a1MiG of { __DEFAULT -> GHC.Types.False }
      }

-- RHS size: {terms: 99, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadStatus_$c>=
  :: ThreadStatus -> ThreadStatus -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [130 150] 420 310}]
GHC.Conc.Sync.$fOrdThreadStatus_$c>=
  = \ (x_a1fiT :: ThreadStatus) (y_a1fiU :: ThreadStatus) ->
      case x_a1fiT of {
        ThreadRunning ->
          case y_a1fiU of {
            ThreadRunning -> GHC.Types.True;
            ThreadFinished -> GHC.Types.False;
            ThreadBlocked ds_d9Dcq -> GHC.Types.False;
            ThreadDied -> GHC.Types.False
          };
        ThreadFinished ->
          case y_a1fiU of {
            __DEFAULT -> GHC.Types.True;
            ThreadBlocked ds_d9Dcq -> GHC.Types.False;
            ThreadDied -> GHC.Types.False
          };
        ThreadBlocked a1_a9CHF ->
          case y_a1fiU of {
            __DEFAULT -> GHC.Types.True;
            ThreadBlocked b1_a9CHG ->
              case a1_a9CHF of {
                BlockedOnMVar ->
                  case b1_a9CHG of {
                    BlockedOnMVar -> GHC.Types.True;
                    BlockedOnBlackHole -> GHC.Types.False;
                    BlockedOnException -> GHC.Types.False;
                    BlockedOnSTM -> GHC.Types.False;
                    BlockedOnForeignCall -> GHC.Types.False;
                    BlockedOnOther -> GHC.Types.False
                  };
                BlockedOnBlackHole ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnException -> GHC.Types.False;
                    BlockedOnSTM -> GHC.Types.False;
                    BlockedOnForeignCall -> GHC.Types.False;
                    BlockedOnOther -> GHC.Types.False
                  };
                BlockedOnException ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnSTM -> GHC.Types.False;
                    BlockedOnForeignCall -> GHC.Types.False;
                    BlockedOnOther -> GHC.Types.False
                  };
                BlockedOnSTM ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnForeignCall -> GHC.Types.False;
                    BlockedOnOther -> GHC.Types.False
                  };
                BlockedOnForeignCall ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.False
                  };
                BlockedOnOther -> case b1_a9CHG of { __DEFAULT -> GHC.Types.True }
              };
            ThreadDied -> GHC.Types.False
          };
        ThreadDied -> case y_a1fiU of { __DEFAULT -> GHC.Types.True }
      }

-- RHS size: {terms: 97, types: 17, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadStatus_$c>
  :: ThreadStatus -> ThreadStatus -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [120 140] 410 300}]
GHC.Conc.Sync.$fOrdThreadStatus_$c>
  = \ (x_a1fiM :: ThreadStatus) (y_a1fiN :: ThreadStatus) ->
      case x_a1fiM of {
        ThreadRunning -> case y_a1fiN of { __DEFAULT -> GHC.Types.False };
        ThreadFinished ->
          case y_a1fiN of {
            ThreadRunning -> GHC.Types.True;
            ThreadFinished -> GHC.Types.False;
            ThreadBlocked ds_d9Dcq -> GHC.Types.False;
            ThreadDied -> GHC.Types.False
          };
        ThreadBlocked a1_a9CHF ->
          case y_a1fiN of {
            __DEFAULT -> GHC.Types.True;
            ThreadBlocked b1_a9CHG ->
              case a1_a9CHF of {
                BlockedOnMVar -> case b1_a9CHG of { __DEFAULT -> GHC.Types.False };
                BlockedOnBlackHole ->
                  case b1_a9CHG of {
                    BlockedOnMVar -> GHC.Types.True;
                    BlockedOnBlackHole -> GHC.Types.False;
                    BlockedOnException -> GHC.Types.False;
                    BlockedOnSTM -> GHC.Types.False;
                    BlockedOnForeignCall -> GHC.Types.False;
                    BlockedOnOther -> GHC.Types.False
                  };
                BlockedOnException ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnException -> GHC.Types.False;
                    BlockedOnSTM -> GHC.Types.False;
                    BlockedOnForeignCall -> GHC.Types.False;
                    BlockedOnOther -> GHC.Types.False
                  };
                BlockedOnSTM ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnSTM -> GHC.Types.False;
                    BlockedOnForeignCall -> GHC.Types.False;
                    BlockedOnOther -> GHC.Types.False
                  };
                BlockedOnForeignCall ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnForeignCall -> GHC.Types.False;
                    BlockedOnOther -> GHC.Types.False
                  };
                BlockedOnOther ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.False
                  }
              };
            ThreadDied -> GHC.Types.False
          };
        ThreadDied ->
          case y_a1fiN of {
            __DEFAULT -> GHC.Types.True;
            ThreadDied -> GHC.Types.False
          }
      }

-- RHS size: {terms: 97, types: 17, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadStatus_$c<=
  :: ThreadStatus -> ThreadStatus -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [120 140] 410 300}]
GHC.Conc.Sync.$fOrdThreadStatus_$c<=
  = \ (x_a1MiL :: ThreadStatus) (y_a1MiM :: ThreadStatus) ->
      case x_a1MiL of {
        ThreadRunning -> case y_a1MiM of { __DEFAULT -> GHC.Types.True };
        ThreadFinished ->
          case y_a1MiM of {
            ThreadRunning -> GHC.Types.False;
            ThreadFinished -> GHC.Types.True;
            ThreadBlocked ds_d9Dcq -> GHC.Types.True;
            ThreadDied -> GHC.Types.True
          };
        ThreadBlocked a1_a9CHF ->
          case y_a1MiM of {
            __DEFAULT -> GHC.Types.False;
            ThreadBlocked b1_a9CHG ->
              case a1_a9CHF of {
                BlockedOnMVar -> case b1_a9CHG of { __DEFAULT -> GHC.Types.True };
                BlockedOnBlackHole ->
                  case b1_a9CHG of {
                    BlockedOnMVar -> GHC.Types.False;
                    BlockedOnBlackHole -> GHC.Types.True;
                    BlockedOnException -> GHC.Types.True;
                    BlockedOnSTM -> GHC.Types.True;
                    BlockedOnForeignCall -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.True
                  };
                BlockedOnException ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.False;
                    BlockedOnException -> GHC.Types.True;
                    BlockedOnSTM -> GHC.Types.True;
                    BlockedOnForeignCall -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.True
                  };
                BlockedOnSTM ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.False;
                    BlockedOnSTM -> GHC.Types.True;
                    BlockedOnForeignCall -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.True
                  };
                BlockedOnForeignCall ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.False;
                    BlockedOnForeignCall -> GHC.Types.True;
                    BlockedOnOther -> GHC.Types.True
                  };
                BlockedOnOther ->
                  case b1_a9CHG of {
                    __DEFAULT -> GHC.Types.False;
                    BlockedOnOther -> GHC.Types.True
                  }
              };
            ThreadDied -> GHC.Types.True
          };
        ThreadDied ->
          case y_a1MiM of {
            __DEFAULT -> GHC.Types.False;
            ThreadDied -> GHC.Types.True
          }
      }

-- RHS size: {terms: 90, types: 16, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadStatus_$cmax
  :: ThreadStatus -> ThreadStatus -> ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [90 100] 380 40}]
GHC.Conc.Sync.$fOrdThreadStatus_$cmax
  = \ (x_a55d :: ThreadStatus) (y_a55e :: ThreadStatus) ->
      case x_a55d of wild_X4G {
        ThreadRunning -> y_a55e;
        ThreadFinished ->
          case y_a55e of wild1_Xbz {
            __DEFAULT -> GHC.Conc.Sync.ThreadFinished;
            ThreadBlocked ds_d9Dcq -> wild1_Xbz;
            ThreadDied -> GHC.Conc.Sync.ThreadDied
          };
        ThreadBlocked a1_a9CHF ->
          case y_a55e of wild1_XX {
            __DEFAULT -> wild_X4G;
            ThreadBlocked b1_a9CHG ->
              case a1_a9CHF of {
                BlockedOnMVar -> case b1_a9CHG of { __DEFAULT -> wild1_XX };
                BlockedOnBlackHole ->
                  case b1_a9CHG of {
                    BlockedOnMVar -> wild_X4G;
                    BlockedOnBlackHole -> wild1_XX;
                    BlockedOnException -> wild1_XX;
                    BlockedOnSTM -> wild1_XX;
                    BlockedOnForeignCall -> wild1_XX;
                    BlockedOnOther -> wild1_XX
                  };
                BlockedOnException ->
                  case b1_a9CHG of {
                    __DEFAULT -> wild_X4G;
                    BlockedOnException -> wild1_XX;
                    BlockedOnSTM -> wild1_XX;
                    BlockedOnForeignCall -> wild1_XX;
                    BlockedOnOther -> wild1_XX
                  };
                BlockedOnSTM ->
                  case b1_a9CHG of {
                    __DEFAULT -> wild_X4G;
                    BlockedOnSTM -> wild1_XX;
                    BlockedOnForeignCall -> wild1_XX;
                    BlockedOnOther -> wild1_XX
                  };
                BlockedOnForeignCall ->
                  case b1_a9CHG of {
                    __DEFAULT -> wild_X4G;
                    BlockedOnForeignCall -> wild1_XX;
                    BlockedOnOther -> wild1_XX
                  };
                BlockedOnOther ->
                  case b1_a9CHG of {
                    __DEFAULT -> wild_X4G;
                    BlockedOnOther -> wild1_XX
                  }
              };
            ThreadDied -> GHC.Conc.Sync.ThreadDied
          };
        ThreadDied ->
          case y_a55e of { __DEFAULT -> GHC.Conc.Sync.ThreadDied }
      }

-- RHS size: {terms: 92, types: 16, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadStatus_$cmin
  :: ThreadStatus -> ThreadStatus -> ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [100 110] 390 50}]
GHC.Conc.Sync.$fOrdThreadStatus_$cmin
  = \ (x_a55m :: ThreadStatus) (y_a55n :: ThreadStatus) ->
      case x_a55m of wild_X4G {
        ThreadRunning ->
          case y_a55n of { __DEFAULT -> GHC.Conc.Sync.ThreadRunning };
        ThreadFinished ->
          case y_a55n of {
            ThreadRunning -> GHC.Conc.Sync.ThreadRunning;
            ThreadFinished -> GHC.Conc.Sync.ThreadFinished;
            ThreadBlocked ds_d9Dcq -> GHC.Conc.Sync.ThreadFinished;
            ThreadDied -> GHC.Conc.Sync.ThreadFinished
          };
        ThreadBlocked a1_a9CHF ->
          case y_a55n of wild1_XX {
            __DEFAULT -> wild1_XX;
            ThreadBlocked b1_a9CHG ->
              case a1_a9CHF of {
                BlockedOnMVar -> case b1_a9CHG of { __DEFAULT -> wild_X4G };
                BlockedOnBlackHole ->
                  case b1_a9CHG of {
                    BlockedOnMVar -> wild1_XX;
                    BlockedOnBlackHole -> wild_X4G;
                    BlockedOnException -> wild_X4G;
                    BlockedOnSTM -> wild_X4G;
                    BlockedOnForeignCall -> wild_X4G;
                    BlockedOnOther -> wild_X4G
                  };
                BlockedOnException ->
                  case b1_a9CHG of {
                    __DEFAULT -> wild1_XX;
                    BlockedOnException -> wild_X4G;
                    BlockedOnSTM -> wild_X4G;
                    BlockedOnForeignCall -> wild_X4G;
                    BlockedOnOther -> wild_X4G
                  };
                BlockedOnSTM ->
                  case b1_a9CHG of {
                    __DEFAULT -> wild1_XX;
                    BlockedOnSTM -> wild_X4G;
                    BlockedOnForeignCall -> wild_X4G;
                    BlockedOnOther -> wild_X4G
                  };
                BlockedOnForeignCall ->
                  case b1_a9CHG of {
                    __DEFAULT -> wild1_XX;
                    BlockedOnForeignCall -> wild_X4G;
                    BlockedOnOther -> wild_X4G
                  };
                BlockedOnOther ->
                  case b1_a9CHG of {
                    __DEFAULT -> wild1_XX;
                    BlockedOnOther -> wild_X4G
                  }
              };
            ThreadDied -> wild_X4G
          };
        ThreadDied -> y_a55n
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord ThreadStatus
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: ThreadStatus
                         GHC.Conc.Sync.$fEqThreadStatus
                         GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
                         GHC.Conc.Sync.$fOrdThreadStatus_$c<
                         GHC.Conc.Sync.$fOrdThreadStatus_$c<=
                         GHC.Conc.Sync.$fOrdThreadStatus_$c>
                         GHC.Conc.Sync.$fOrdThreadStatus_$c>=
                         GHC.Conc.Sync.$fOrdThreadStatus_$cmax
                         GHC.Conc.Sync.$fOrdThreadStatus_$cmin]
GHC.Conc.Sync.$fOrdThreadStatus
  = GHC.Classes.C:Ord
      @ ThreadStatus
      GHC.Conc.Sync.$fEqThreadStatus
      GHC.Conc.Sync.$fOrdThreadStatus_$ccompare
      GHC.Conc.Sync.$fOrdThreadStatus_$c<
      GHC.Conc.Sync.$fOrdThreadStatus_$c<=
      GHC.Conc.Sync.$fOrdThreadStatus_$c>
      GHC.Conc.Sync.$fOrdThreadStatus_$c>=
      GHC.Conc.Sync.$fOrdThreadStatus_$cmax
      GHC.Conc.Sync.$fOrdThreadStatus_$cmin

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$trModule3
  = GHC.Types.TrNameS GHC.Conc.Sync.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$trModule2 = "GHC.Conc.Sync"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$trModule1
  = GHC.Types.TrNameS GHC.Conc.Sync.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Conc.Sync.$trModule
  = GHC.Types.Module
      GHC.Conc.Sync.$trModule3 GHC.Conc.Sync.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r9FuN :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r9FuN
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tc'LiftedRep (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r9FuO :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r9FuO
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcRuntimeRep (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r9FuP :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r9FuP
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcRealWorld (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep3_r9FuQ :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep3_r9FuQ = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r9FuR :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_r9FuR
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcThreadId# (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep5_r9FuS :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep5_r9FuS
  = GHC.Types.: @ KindRep $krep3_r9FuQ (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6_r9FuT :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_r9FuT = GHC.Types.: @ KindRep $krep2_r9FuP $krep5_r9FuS

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r9FuU :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep7_r9FuU
  = GHC.Types.KindRepTyConApp GHC.Types.$tcTVar# $krep6_r9FuT

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep8_r9FuV :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep8_r9FuV
  = GHC.Types.: @ KindRep $krep2_r9FuP (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r9FuW :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep9_r9FuW
  = GHC.Types.KindRepTyConApp GHC.Types.$tcState# $krep8_r9FuV

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep10_r9FuX :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep10_r9FuX
  = GHC.Types.: @ KindRep $krep1_r9FuO (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_r9FuY :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep11_r9FuY
  = GHC.Types.KindRepTyConApp GHC.Types.$tc'[] $krep10_r9FuX

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep12_r9FuZ :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep12_r9FuZ
  = GHC.Types.: @ KindRep $krep11_r9FuY (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r9Fv0 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep13_r9Fv0
  = GHC.Types.KindRepTyConApp GHC.Types.$tc'TupleRep $krep12_r9FuZ

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep14_r9Fv1 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep14_r9Fv1 = GHC.Types.: @ KindRep $krep9_r9FuW $krep5_r9FuS

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep15_r9Fv2 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep15_r9Fv2 = GHC.Types.: @ KindRep $krep_r9FuN $krep14_r9Fv1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep16_r9Fv3 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep16_r9Fv3 = GHC.Types.: @ KindRep $krep13_r9Fv0 $krep15_r9Fv2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_r9Fv4 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep17_r9Fv4
  = GHC.Types.KindRepTyConApp GHC.Types.$tc(#,#) $krep16_r9Fv3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_r9Fv5 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep18_r9Fv5 = GHC.Types.KindRepFun $krep9_r9FuW $krep17_r9Fv4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcThreadId2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Conc.Sync.$tcThreadId2 = "ThreadId"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcThreadId1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tcThreadId1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tcThreadId2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcThreadId :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tcThreadId
  = GHC.Types.TyCon
      16775948407395805744##
      12520674293648100702##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tcThreadId1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep19_r9Fv6 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep19_r9Fv6
  = GHC.Types.KindRepTyConApp
      GHC.Conc.Sync.$tcThreadId (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadId1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Conc.Sync.$tc'ThreadId1
  = GHC.Types.KindRepFun $krep4_r9FuR $krep19_r9Fv6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadId3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Conc.Sync.$tc'ThreadId3 = "'ThreadId"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadId2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'ThreadId2
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'ThreadId3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadId :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'ThreadId
  = GHC.Types.TyCon
      18342150043682338300##
      5104860271509165481##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'ThreadId2
      0#
      GHC.Conc.Sync.$tc'ThreadId1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcBlockReason2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Conc.Sync.$tcBlockReason2 = "BlockReason"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcBlockReason1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tcBlockReason1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tcBlockReason2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcBlockReason :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tcBlockReason
  = GHC.Types.TyCon
      13301038780413995570##
      11021250300446969031##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tcBlockReason1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnBlackHole1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.Conc.Sync.$tc'BlockedOnBlackHole1
  = GHC.Types.KindRepTyConApp
      GHC.Conc.Sync.$tcBlockReason (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnMVar2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$tc'BlockedOnMVar2 = "'BlockedOnMVar"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnMVar1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'BlockedOnMVar1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'BlockedOnMVar2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnMVar :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'BlockedOnMVar
  = GHC.Types.TyCon
      6633002816895506850##
      13520604374172074732##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'BlockedOnMVar1
      0#
      GHC.Conc.Sync.$tc'BlockedOnBlackHole1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnBlackHole3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Conc.Sync.$tc'BlockedOnBlackHole3 = "'BlockedOnBlackHole"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnBlackHole2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'BlockedOnBlackHole2
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'BlockedOnBlackHole3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnBlackHole :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'BlockedOnBlackHole
  = GHC.Types.TyCon
      9499731398899925739##
      7296688042620961692##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'BlockedOnBlackHole2
      0#
      GHC.Conc.Sync.$tc'BlockedOnBlackHole1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnException2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Conc.Sync.$tc'BlockedOnException2 = "'BlockedOnException"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnException1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'BlockedOnException1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'BlockedOnException2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnException :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'BlockedOnException
  = GHC.Types.TyCon
      16834505563200403543##
      10899729493106152581##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'BlockedOnException1
      0#
      GHC.Conc.Sync.$tc'BlockedOnBlackHole1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnSTM2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$tc'BlockedOnSTM2 = "'BlockedOnSTM"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnSTM1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'BlockedOnSTM1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'BlockedOnSTM2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnSTM :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'BlockedOnSTM
  = GHC.Types.TyCon
      1161208048218837616##
      14246412223428266787##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'BlockedOnSTM1
      0#
      GHC.Conc.Sync.$tc'BlockedOnBlackHole1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnForeignCall2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.Conc.Sync.$tc'BlockedOnForeignCall2 = "'BlockedOnForeignCall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnForeignCall1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'BlockedOnForeignCall1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'BlockedOnForeignCall2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnForeignCall :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'BlockedOnForeignCall
  = GHC.Types.TyCon
      7408412473094687054##
      5512662453084487661##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'BlockedOnForeignCall1
      0#
      GHC.Conc.Sync.$tc'BlockedOnBlackHole1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnOther2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$tc'BlockedOnOther2 = "'BlockedOnOther"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnOther1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'BlockedOnOther1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'BlockedOnOther2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'BlockedOnOther :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'BlockedOnOther
  = GHC.Types.TyCon
      12822899422417308746##
      1265626399802742388##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'BlockedOnOther1
      0#
      GHC.Conc.Sync.$tc'BlockedOnBlackHole1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcThreadStatus2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Conc.Sync.$tcThreadStatus2 = "ThreadStatus"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcThreadStatus1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tcThreadStatus1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tcThreadStatus2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcThreadStatus :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tcThreadStatus
  = GHC.Types.TyCon
      16437204929171641638##
      3495092226815585861##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tcThreadStatus1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadDied1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.Conc.Sync.$tc'ThreadDied1
  = GHC.Types.KindRepTyConApp
      GHC.Conc.Sync.$tcThreadStatus (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadRunning2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$tc'ThreadRunning2 = "'ThreadRunning"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadRunning1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'ThreadRunning1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'ThreadRunning2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadRunning :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'ThreadRunning
  = GHC.Types.TyCon
      1667122312602609882##
      13647871799576313560##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'ThreadRunning1
      0#
      GHC.Conc.Sync.$tc'ThreadDied1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadFinished2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$tc'ThreadFinished2 = "'ThreadFinished"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadFinished1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'ThreadFinished1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'ThreadFinished2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadFinished :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'ThreadFinished
  = GHC.Types.TyCon
      2441107603776884109##
      12730966154693836607##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'ThreadFinished1
      0#
      GHC.Conc.Sync.$tc'ThreadDied1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadDied3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Conc.Sync.$tc'ThreadDied3 = "'ThreadDied"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadDied2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'ThreadDied2
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'ThreadDied3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadDied :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'ThreadDied
  = GHC.Types.TyCon
      9513974555658789847##
      4757719484357493227##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'ThreadDied2
      0#
      GHC.Conc.Sync.$tc'ThreadDied1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadBlocked1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Conc.Sync.$tc'ThreadBlocked1
  = GHC.Types.KindRepFun
      GHC.Conc.Sync.$tc'BlockedOnBlackHole1 GHC.Conc.Sync.$tc'ThreadDied1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadBlocked3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$tc'ThreadBlocked3 = "'ThreadBlocked"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadBlocked2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'ThreadBlocked2
  = GHC.Types.TrNameS GHC.Conc.Sync.$tc'ThreadBlocked3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'ThreadBlocked :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'ThreadBlocked
  = GHC.Types.TyCon
      1896650886570328403##
      13390928353603149841##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'ThreadBlocked2
      0#
      GHC.Conc.Sync.$tc'ThreadBlocked1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcPrimMVar2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Conc.Sync.$tcPrimMVar2 = "PrimMVar"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcPrimMVar1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tcPrimMVar1
  = GHC.Types.TrNameS GHC.Conc.Sync.$tcPrimMVar2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcPrimMVar :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tcPrimMVar
  = GHC.Types.TyCon
      9965391380168186507##
      18322737771689556223##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tcPrimMVar1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcSTM2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$tcSTM2 = "STM"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcSTM1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tcSTM1 = GHC.Types.TrNameS GHC.Conc.Sync.$tcSTM2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcSTM :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tcSTM
  = GHC.Types.TyCon
      2004856025729794332##
      14974623362753764267##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tcSTM1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_r9Fv7 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep20_r9Fv7
  = GHC.Types.KindRepTyConApp GHC.Conc.Sync.$tcSTM $krep5_r9FuS

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'STM1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Conc.Sync.$tc'STM1
  = GHC.Types.KindRepFun $krep18_r9Fv5 $krep20_r9Fv7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'STM3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$tc'STM3 = "'STM"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'STM2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'STM2 = GHC.Types.TrNameS GHC.Conc.Sync.$tc'STM3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'STM :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'STM
  = GHC.Types.TyCon
      11288073744523536973##
      9767688212531311940##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'STM2
      1#
      GHC.Conc.Sync.$tc'STM1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcTVar2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$tcTVar2 = "TVar"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcTVar1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tcTVar1 = GHC.Types.TrNameS GHC.Conc.Sync.$tcTVar2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tcTVar :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tcTVar
  = GHC.Types.TyCon
      13084572405727191592##
      5232564955606145236##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tcTVar1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_r9Fv8 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep21_r9Fv8
  = GHC.Types.KindRepTyConApp GHC.Conc.Sync.$tcTVar $krep5_r9FuS

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'TVar1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Conc.Sync.$tc'TVar1
  = GHC.Types.KindRepFun $krep7_r9FuU $krep21_r9Fv8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'TVar3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Conc.Sync.$tc'TVar3 = "'TVar"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'TVar2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$tc'TVar2 = GHC.Types.TrNameS GHC.Conc.Sync.$tc'TVar3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$tc'TVar :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Conc.Sync.$tc'TVar
  = GHC.Types.TyCon
      9463269625853265574##
      3517068532143837766##
      GHC.Conc.Sync.$trModule
      GHC.Conc.Sync.$tc'TVar2
      1#
      GHC.Conc.Sync.$tc'TVar1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadId2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Conc.Sync.$fShowThreadId2 = "ThreadId "#

-- RHS size: {terms: 32, types: 31, coercions: 3, joins: 0/1}
GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
  :: Int -> ThreadId -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(U)><L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 20] 171 60}]
GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
  = \ (d_a9CAc :: Int) (t_a9CAd :: ThreadId) ->
      let {
        x_s9DHQ [Dmd=<L,U(U)>] :: CInt
        [LclId]
        x_s9DHQ
          = case t_a9CAd of { ThreadId t1_a9CAK ->
            case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm8
                   t1_a9CAK realWorld#
            of
            { (# ds_d9Dm7, ds1_d9Dm6 #) ->
            (GHC.Int.I32# (narrow32Int# ds1_d9Dm6))
            `cast` (Sym (Foreign.C.Types.N:CInt[0])
                    :: (Int32 :: *) ~R# (CInt :: *))
            }
            } } in
      \ (x1_i7Rxi :: String) ->
        unpackAppendCString#
          GHC.Conc.Sync.$fShowThreadId2
          (case x_s9DHQ
                `cast` (Foreign.C.Types.N:CInt[0] :: (CInt :: *) ~R# (Int32 :: *))
           of
           { GHC.Int.I32# x#_i9gYS ->
           case d_a9CAc of { I# ww1_i9gYW ->
           case GHC.Show.$wshowSignedInt ww1_i9gYW x#_i9gYS x1_i7Rxi of
           { (# ww5_i9gZ0, ww6_i9gZ1 #) ->
           GHC.Types.: @ Char ww5_i9gZ0 ww6_i9gZ1
           }
           }
           })

-- RHS size: {terms: 21, types: 25, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadId_$cshow :: ThreadId -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 121 0}]
GHC.Conc.Sync.$fShowThreadId_$cshow
  = \ (x_i7Jay :: ThreadId) ->
      unpackAppendCString#
        GHC.Conc.Sync.$fShowThreadId2
        (case x_i7Jay of { ThreadId t_a9CAK ->
         case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm8
                t_a9CAK realWorld#
         of
         { (# ds_d9Dm7, ds1_d9Dm6 #) ->
         case GHC.Show.$wshowSignedInt
                0# (narrow32Int# ds1_d9Dm6) (GHC.Types.[] @ Char)
         of
         { (# ww5_i9gZ0, ww6_i9gZ1 #) ->
         GHC.Types.: @ Char ww5_i9gZ0 ww6_i9gZ1
         }
         }
         })

-- RHS size: {terms: 28, types: 28, coercions: 3, joins: 0/1}
GHC.Conc.Sync.$fShowThreadId1 :: ThreadId -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 161 60}]
GHC.Conc.Sync.$fShowThreadId1
  = \ (t_a9CAd :: ThreadId) ->
      let {
        x_s9DHQ [Dmd=<L,U(U)>] :: CInt
        [LclId]
        x_s9DHQ
          = case t_a9CAd of { ThreadId t1_a9CAK ->
            case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm8
                   t1_a9CAK realWorld#
            of
            { (# ds_d9Dm7, ds1_d9Dm6 #) ->
            (GHC.Int.I32# (narrow32Int# ds1_d9Dm6))
            `cast` (Sym (Foreign.C.Types.N:CInt[0])
                    :: (Int32 :: *) ~R# (CInt :: *))
            }
            } } in
      \ (x1_i7Rxi :: String) ->
        unpackAppendCString#
          GHC.Conc.Sync.$fShowThreadId2
          (case x_s9DHQ
                `cast` (Foreign.C.Types.N:CInt[0] :: (CInt :: *) ~R# (Int32 :: *))
           of
           { GHC.Int.I32# x#_i9gYS ->
           case GHC.Show.$wshowSignedInt 0# x#_i9gYS x1_i7Rxi of
           { (# ww5_i9gZ0, ww6_i9gZ1 #) ->
           GHC.Types.: @ Char ww5_i9gZ0 ww6_i9gZ1
           }
           })

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadId_$cshowList
  :: [ThreadId] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [ThreadId])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ ThreadId GHC.Conc.Sync.$fShowThreadId1 ls_i7JaB s_i7JaC}]
GHC.Conc.Sync.$fShowThreadId_$cshowList
  = \ (ls_i7JaB :: [ThreadId]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ ThreadId GHC.Conc.Sync.$fShowThreadId1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: Show ThreadId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: ThreadId
                       GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
                       GHC.Conc.Sync.$fShowThreadId_$cshow
                       GHC.Conc.Sync.$fShowThreadId_$cshowList]
GHC.Conc.Sync.$fShowThreadId
  = GHC.Show.C:Show
      @ ThreadId
      GHC.Conc.Sync.$fShowThreadId_$cshowsPrec
      GHC.Conc.Sync.$fShowThreadId_$cshow
      GHC.Conc.Sync.$fShowThreadId_$cshowList

-- RHS size: {terms: 8, types: 17, coercions: 0, joins: 0/0}
reportHeapOverflow1_r9Fv9
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []]
reportHeapOverflow1_r9Fv9
  = \ (ds_d9Dlh :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld #)}_d9Dli
             ds_d9Dlh
      of
      { (# ds1_d9Dlg #) ->
      (# ds1_d9Dlg, GHC.Tuple.() #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
reportHeapOverflow :: IO ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=False)
         Tmpl= (\ (ds_X9Ds4 [Occ=Once] :: State# RealWorld) ->
                  case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld #)}_d9Dli
                         ds_X9Ds4
                  of
                  { (# ds1_d9Dlg [Occ=Once] #) ->
                  (# ds1_d9Dlg, GHC.Tuple.() #)
                  })
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
reportHeapOverflow
  = reportHeapOverflow1_r9Fv9
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))

-- RHS size: {terms: 23, types: 18, coercions: 0, joins: 0/0}
cmpThread :: ThreadId -> ThreadId -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (t1_a9CAL [Occ=Once!] :: ThreadId)
                 (t2_a9CAM [Occ=Once!] :: ThreadId) ->
                 case t2_a9CAM of { ThreadId t_a9CAK [Occ=Once] ->
                 case t1_a9CAL of { ThreadId t4_X9CKS [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
                        t4_X9CKS t_a9CAK realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_d9Dm1 [Occ=Once] #) ->
                 case narrow32Int# ds1_d9Dm1 of {
                   __DEFAULT -> GHC.Types.GT;
                   -1# -> GHC.Types.LT;
                   0# -> GHC.Types.EQ
                 }
                 }
                 }
                 }}]
cmpThread
  = \ (t1_a9CAL :: ThreadId) (t2_a9CAM :: ThreadId) ->
      case t2_a9CAM of { ThreadId t_a9CAK ->
      case t1_a9CAL of { ThreadId t4_X9CKS ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
             t4_X9CKS t_a9CAK realWorld#
      of
      { (# ds_d9Dm2, ds1_d9Dm1 #) ->
      case narrow32Int# ds1_d9Dm1 of {
        __DEFAULT -> GHC.Types.GT;
        -1# -> GHC.Types.LT;
        0# -> GHC.Types.EQ
      }
      }
      }
      }

-- RHS size: {terms: 21, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqThreadId_$c== :: ThreadId -> ThreadId -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (t1_a9CAa [Occ=Once!] :: ThreadId)
                 (t2_a9CAb [Occ=Once!] :: ThreadId) ->
                 case t2_a9CAb of { ThreadId t_a9CAK [Occ=Once] ->
                 case t1_a9CAa of { ThreadId t4_X9CKS [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
                        t4_X9CKS t_a9CAK realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_d9Dm1 [Occ=Once] #) ->
                 case narrow32Int# ds1_d9Dm1 of {
                   __DEFAULT -> GHC.Types.False;
                   0# -> GHC.Types.True
                 }
                 }
                 }
                 }}]
GHC.Conc.Sync.$fEqThreadId_$c==
  = \ (t1_a9CAa :: ThreadId) (t2_a9CAb :: ThreadId) ->
      case t2_a9CAb of { ThreadId t_a9CAK ->
      case t1_a9CAa of { ThreadId t4_X9CKS ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
             t4_X9CKS t_a9CAK realWorld#
      of
      { (# ds_d9Dm2, ds1_d9Dm1 #) ->
      case narrow32Int# ds1_d9Dm1 of {
        __DEFAULT -> GHC.Types.False;
        0# -> GHC.Types.True
      }
      }
      }
      }

-- RHS size: {terms: 21, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqThreadId_$c/= [InlPrag=INLINE (sat-args=2)]
  :: ThreadId -> ThreadId -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: ThreadId)
                 (y_a22c [Occ=Once!] :: ThreadId) ->
                 case y_a22c of { ThreadId t_a9CAK [Occ=Once] ->
                 case x_a22b of { ThreadId t1_X9CKS [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
                        t1_X9CKS t_a9CAK realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_d9Dm1 [Occ=Once] #) ->
                 case narrow32Int# ds1_d9Dm1 of {
                   __DEFAULT -> GHC.Types.True;
                   0# -> GHC.Types.False
                 }
                 }
                 }
                 }}]
GHC.Conc.Sync.$fEqThreadId_$c/=
  = \ (eta_B2 :: ThreadId) (eta1_B1 :: ThreadId) ->
      case eta1_B1 of { ThreadId t_a9CAK ->
      case eta_B2 of { ThreadId t1_X9CKS ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
             t1_X9CKS t_a9CAK realWorld#
      of
      { (# ds_d9Dm2, ds1_d9Dm1 #) ->
      case narrow32Int# ds1_d9Dm1 of {
        __DEFAULT -> GHC.Types.True;
        0# -> GHC.Types.False
      }
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fEqThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq ThreadId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: ThreadId
                        GHC.Conc.Sync.$fEqThreadId_$c==
                        GHC.Conc.Sync.$fEqThreadId_$c/=]
GHC.Conc.Sync.$fEqThreadId
  = GHC.Classes.C:Eq
      @ ThreadId
      GHC.Conc.Sync.$fEqThreadId_$c==
      GHC.Conc.Sync.$fEqThreadId_$c/=

-- RHS size: {terms: 21, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadId_$c< :: ThreadId -> ThreadId -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a1MiF [Occ=Once!] :: ThreadId)
                 (y_a1MiG [Occ=Once!] :: ThreadId) ->
                 case y_a1MiG of { ThreadId t_a9CAK [Occ=Once] ->
                 case x_a1MiF of { ThreadId t1_X9CKS [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
                        t1_X9CKS t_a9CAK realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_d9Dm1 [Occ=Once] #) ->
                 case narrow32Int# ds1_d9Dm1 of {
                   __DEFAULT -> GHC.Types.False;
                   -1# -> GHC.Types.True
                 }
                 }
                 }
                 }}]
GHC.Conc.Sync.$fOrdThreadId_$c<
  = \ (x_a1MiF :: ThreadId) (y_a1MiG :: ThreadId) ->
      case y_a1MiG of { ThreadId t_a9CAK ->
      case x_a1MiF of { ThreadId t1_X9CKS ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
             t1_X9CKS t_a9CAK realWorld#
      of
      { (# ds_d9Dm2, ds1_d9Dm1 #) ->
      case narrow32Int# ds1_d9Dm1 of {
        __DEFAULT -> GHC.Types.False;
        -1# -> GHC.Types.True
      }
      }
      }
      }

-- RHS size: {terms: 21, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadId_$c>= :: ThreadId -> ThreadId -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a1fiT [Occ=Once!] :: ThreadId)
                 (y_a1fiU [Occ=Once!] :: ThreadId) ->
                 case y_a1fiU of { ThreadId t_a9CAK [Occ=Once] ->
                 case x_a1fiT of { ThreadId t1_X9CKS [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
                        t1_X9CKS t_a9CAK realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_d9Dm1 [Occ=Once] #) ->
                 case narrow32Int# ds1_d9Dm1 of {
                   __DEFAULT -> GHC.Types.True;
                   -1# -> GHC.Types.False
                 }
                 }
                 }
                 }}]
GHC.Conc.Sync.$fOrdThreadId_$c>=
  = \ (x_a1fiT :: ThreadId) (y_a1fiU :: ThreadId) ->
      case y_a1fiU of { ThreadId t_a9CAK ->
      case x_a1fiT of { ThreadId t1_X9CKS ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
             t1_X9CKS t_a9CAK realWorld#
      of
      { (# ds_d9Dm2, ds1_d9Dm1 #) ->
      case narrow32Int# ds1_d9Dm1 of {
        __DEFAULT -> GHC.Types.True;
        -1# -> GHC.Types.False
      }
      }
      }
      }

-- RHS size: {terms: 23, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadId_$c> :: ThreadId -> ThreadId -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a1fiM [Occ=Once!] :: ThreadId)
                 (y_a1fiN [Occ=Once!] :: ThreadId) ->
                 case y_a1fiN of { ThreadId t_a9CAK [Occ=Once] ->
                 case x_a1fiM of { ThreadId t1_X9CKS [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
                        t1_X9CKS t_a9CAK realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_d9Dm1 [Occ=Once] #) ->
                 case narrow32Int# ds1_d9Dm1 of {
                   __DEFAULT -> GHC.Types.True;
                   -1# -> GHC.Types.False;
                   0# -> GHC.Types.False
                 }
                 }
                 }
                 }}]
GHC.Conc.Sync.$fOrdThreadId_$c>
  = \ (x_a1fiM :: ThreadId) (y_a1fiN :: ThreadId) ->
      case y_a1fiN of { ThreadId t_a9CAK ->
      case x_a1fiM of { ThreadId t1_X9CKS ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
             t1_X9CKS t_a9CAK realWorld#
      of
      { (# ds_d9Dm2, ds1_d9Dm1 #) ->
      case narrow32Int# ds1_d9Dm1 of {
        __DEFAULT -> GHC.Types.True;
        -1# -> GHC.Types.False;
        0# -> GHC.Types.False
      }
      }
      }
      }

-- RHS size: {terms: 23, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadId_$c<= :: ThreadId -> ThreadId -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a1MiL [Occ=Once!] :: ThreadId)
                 (y_a1MiM [Occ=Once!] :: ThreadId) ->
                 case y_a1MiM of { ThreadId t_a9CAK [Occ=Once] ->
                 case x_a1MiL of { ThreadId t1_X9CKS [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
                        t1_X9CKS t_a9CAK realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_d9Dm1 [Occ=Once] #) ->
                 case narrow32Int# ds1_d9Dm1 of {
                   __DEFAULT -> GHC.Types.False;
                   -1# -> GHC.Types.True;
                   0# -> GHC.Types.True
                 }
                 }
                 }
                 }}]
GHC.Conc.Sync.$fOrdThreadId_$c<=
  = \ (x_a1MiL :: ThreadId) (y_a1MiM :: ThreadId) ->
      case y_a1MiM of { ThreadId t_a9CAK ->
      case x_a1MiL of { ThreadId t1_X9CKS ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
             t1_X9CKS t_a9CAK realWorld#
      of
      { (# ds_d9Dm2, ds1_d9Dm1 #) ->
      case narrow32Int# ds1_d9Dm1 of {
        __DEFAULT -> GHC.Types.False;
        -1# -> GHC.Types.True;
        0# -> GHC.Types.True
      }
      }
      }
      }

-- RHS size: {terms: 23, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadId_$cmax
  :: ThreadId -> ThreadId -> ThreadId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a55d [Occ=Once!] :: ThreadId)
                 (y_a55e [Occ=Once!] :: ThreadId) ->
                 case y_a55e of wild_X36 { ThreadId t_a9CAK [Occ=Once] ->
                 case x_a55d of wild1_Xdc { ThreadId t1_X9CKS [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
                        t1_X9CKS t_a9CAK realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_d9Dm1 [Occ=Once] #) ->
                 case narrow32Int# ds1_d9Dm1 of {
                   __DEFAULT -> wild1_Xdc;
                   -1# -> wild_X36;
                   0# -> wild_X36
                 }
                 }
                 }
                 }}]
GHC.Conc.Sync.$fOrdThreadId_$cmax
  = \ (x_a55d :: ThreadId) (y_a55e :: ThreadId) ->
      case y_a55e of wild_X36 { ThreadId t_a9CAK ->
      case x_a55d of wild1_Xdc { ThreadId t1_X9CKS ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
             t1_X9CKS t_a9CAK realWorld#
      of
      { (# ds_d9Dm2, ds1_d9Dm1 #) ->
      case narrow32Int# ds1_d9Dm1 of {
        __DEFAULT -> wild1_Xdc;
        -1# -> wild_X36;
        0# -> wild_X36
      }
      }
      }
      }

-- RHS size: {terms: 23, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadId_$cmin
  :: ThreadId -> ThreadId -> ThreadId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a55m [Occ=Once!] :: ThreadId)
                 (y_a55n [Occ=Once!] :: ThreadId) ->
                 case y_a55n of wild_X36 { ThreadId t_a9CAK [Occ=Once] ->
                 case x_a55m of wild1_Xdc { ThreadId t1_X9CKS [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
                        t1_X9CKS t_a9CAK realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_d9Dm1 [Occ=Once] #) ->
                 case narrow32Int# ds1_d9Dm1 of {
                   __DEFAULT -> wild_X36;
                   -1# -> wild1_Xdc;
                   0# -> wild1_Xdc
                 }
                 }
                 }
                 }}]
GHC.Conc.Sync.$fOrdThreadId_$cmin
  = \ (x_a55m :: ThreadId) (y_a55n :: ThreadId) ->
      case y_a55n of wild_X36 { ThreadId t_a9CAK ->
      case x_a55m of wild1_Xdc { ThreadId t1_X9CKS ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> ThreadId# -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9Dm3
             t1_X9CKS t_a9CAK realWorld#
      of
      { (# ds_d9Dm2, ds1_d9Dm1 #) ->
      case narrow32Int# ds1_d9Dm1 of {
        __DEFAULT -> wild_X36;
        -1# -> wild1_Xdc;
        0# -> wild1_Xdc
      }
      }
      }
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fOrdThreadId [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord ThreadId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: ThreadId
                         GHC.Conc.Sync.$fEqThreadId
                         cmpThread
                         GHC.Conc.Sync.$fOrdThreadId_$c<
                         GHC.Conc.Sync.$fOrdThreadId_$c<=
                         GHC.Conc.Sync.$fOrdThreadId_$c>
                         GHC.Conc.Sync.$fOrdThreadId_$c>=
                         GHC.Conc.Sync.$fOrdThreadId_$cmax
                         GHC.Conc.Sync.$fOrdThreadId_$cmin]
GHC.Conc.Sync.$fOrdThreadId
  = GHC.Classes.C:Ord
      @ ThreadId
      GHC.Conc.Sync.$fEqThreadId
      cmpThread
      GHC.Conc.Sync.$fOrdThreadId_$c<
      GHC.Conc.Sync.$fOrdThreadId_$c<=
      GHC.Conc.Sync.$fOrdThreadId_$c>
      GHC.Conc.Sync.$fOrdThreadId_$c>=
      GHC.Conc.Sync.$fOrdThreadId_$cmax
      GHC.Conc.Sync.$fOrdThreadId_$cmin

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus10 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$fShowThreadStatus10 = "ThreadRunning"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus9 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$fShowThreadStatus9
  = unpackCString# GHC.Conc.Sync.$fShowThreadStatus10

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$fShowThreadStatus8 = "ThreadFinished"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$fShowThreadStatus7
  = unpackCString# GHC.Conc.Sync.$fShowThreadStatus8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Conc.Sync.$fShowThreadStatus6 = "ThreadBlocked "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$fShowThreadStatus5
  = unpackCString# GHC.Conc.Sync.$fShowThreadStatus6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Conc.Sync.$fShowThreadStatus4 = "ThreadDied"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.$fShowThreadStatus3
  = unpackCString# GHC.Conc.Sync.$fShowThreadStatus4

-- RHS size: {terms: 41, types: 15, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
  :: Int -> ThreadStatus -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(U)><S,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 140 0] 301 30}]
GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
  = \ (ds_d9DjK :: Int)
      (ds1_d9DjL :: ThreadStatus)
      (eta_B1 :: String) ->
      case ds1_d9DjL of {
        ThreadRunning ->
          ++ @ Char GHC.Conc.Sync.$fShowThreadStatus9 eta_B1;
        ThreadFinished ->
          ++ @ Char GHC.Conc.Sync.$fShowThreadStatus7 eta_B1;
        ThreadBlocked b1_a9CHK ->
          case ds_d9DjK of { I# x_alMY ->
          case >=# x_alMY 11# of {
            __DEFAULT ->
              ++
                @ Char
                GHC.Conc.Sync.$fShowThreadStatus5
                (GHC.Conc.Sync.$w$cshowsPrec b1_a9CHK eta_B1);
            1# ->
              GHC.Types.:
                @ Char
                GHC.Show.$fShow(,)4
                (++
                   @ Char
                   GHC.Conc.Sync.$fShowThreadStatus5
                   (GHC.Conc.Sync.$w$cshowsPrec
                      b1_a9CHK (GHC.Types.: @ Char GHC.Show.$fShow(,)2 eta_B1)))
          }
          };
        ThreadDied -> ++ @ Char GHC.Conc.Sync.$fShowThreadStatus3 eta_B1
      }

-- RHS size: {terms: 15, types: 5, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus_$cshow :: ThreadStatus -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [50] 100 0}]
GHC.Conc.Sync.$fShowThreadStatus_$cshow
  = \ (x_i7Jay :: ThreadStatus) ->
      case x_i7Jay of {
        ThreadRunning -> GHC.Conc.Sync.$fShowThreadStatus9;
        ThreadFinished -> GHC.Conc.Sync.$fShowThreadStatus7;
        ThreadBlocked b1_a9CHK ->
          ++
            @ Char
            GHC.Conc.Sync.$fShowThreadStatus5
            (GHC.Conc.Sync.$w$cshowsPrec b1_a9CHK (GHC.Types.[] @ Char));
        ThreadDied -> GHC.Conc.Sync.$fShowThreadStatus3
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.$fShowThreadStatus2 = GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus1 :: ThreadStatus -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Conc.Sync.$fShowThreadStatus1
  = GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
      GHC.Conc.Sync.$fShowThreadStatus2

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus_$cshowList
  :: [ThreadStatus] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [ThreadStatus])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ ThreadStatus GHC.Conc.Sync.$fShowThreadStatus1 ls_i7JaB s_i7JaC}]
GHC.Conc.Sync.$fShowThreadStatus_$cshowList
  = \ (ls_i7JaB :: [ThreadStatus]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ ThreadStatus GHC.Conc.Sync.$fShowThreadStatus1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fShowThreadStatus [InlPrag=NOUSERINLINE CONLIKE]
  :: Show ThreadStatus
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: ThreadStatus
                       GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
                       GHC.Conc.Sync.$fShowThreadStatus_$cshow
                       GHC.Conc.Sync.$fShowThreadStatus_$cshowList]
GHC.Conc.Sync.$fShowThreadStatus
  = GHC.Show.C:Show
      @ ThreadStatus
      GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec
      GHC.Conc.Sync.$fShowThreadStatus_$cshow
      GHC.Conc.Sync.$fShowThreadStatus_$cshowList

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.killThread2 :: SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.Sync.killThread2
  = GHC.IO.Exception.$fExceptionAsyncException_$ctoException
      GHC.IO.Exception.ThreadKilled

-- RHS size: {terms: 14, types: 15, coercions: 0, joins: 0/0}
GHC.Conc.Sync.killThread1
  :: ThreadId -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (tid_a9CBd [Occ=Once!] :: ThreadId)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case tid_a9CBd of { ThreadId tid1_a9CBe [Occ=Once] ->
                 case killThread#
                        @ SomeException tid1_a9CBe GHC.Conc.Sync.killThread2 eta_B1
                 of s1_a9CBh
                 { __DEFAULT ->
                 (# s1_a9CBh, GHC.Tuple.() #)
                 }
                 }}]
GHC.Conc.Sync.killThread1
  = \ (tid_a9CBd :: ThreadId) (eta_B1 :: State# RealWorld) ->
      case tid_a9CBd of { ThreadId tid1_a9CBe ->
      case killThread#
             @ SomeException tid1_a9CBe GHC.Conc.Sync.killThread2 eta_B1
      of s1_a9CBh
      { __DEFAULT ->
      (# s1_a9CBh, GHC.Tuple.() #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
killThread :: ThreadId -> IO ()
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.killThread1
               `cast` (<ThreadId>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (ThreadId
                           -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (ThreadId -> IO () :: *))}]
killThread
  = GHC.Conc.Sync.killThread1
    `cast` (<ThreadId>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (ThreadId
                -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (ThreadId -> IO () :: *))

-- RHS size: {terms: 11, types: 20, coercions: 0, joins: 0/0}
GHC.Conc.Sync.getNumProcessors1
  :: State# RealWorld -> (# State# RealWorld, Int #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i7Vb0 [Occ=Once] :: State# RealWorld) ->
                 case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Word# #)}_d9Dls
                        s_i7Vb0
                 of
                 { (# ds_d9Dlq [Occ=Once], ds1_d9Dlp [Occ=Once] #) ->
                 (# ds_d9Dlq, GHC.Types.I# (word2Int# (narrow32Word# ds1_d9Dlp)) #)
                 }}]
GHC.Conc.Sync.getNumProcessors1
  = \ (s_i7Vb0 :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Word# #)}_d9Dls
             s_i7Vb0
      of
      { (# ds_d9Dlq, ds1_d9Dlp #) ->
      (# ds_d9Dlq, GHC.Types.I# (word2Int# (narrow32Word# ds1_d9Dlp)) #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getNumProcessors :: IO Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.getNumProcessors1
               `cast` (Sym (GHC.Types.N:IO[0] <Int>_R)
                       :: (State# RealWorld -> (# State# RealWorld, Int #) :: *)
                          ~R# (IO Int :: *))}]
getNumProcessors
  = GHC.Conc.Sync.getNumProcessors1
    `cast` (Sym (GHC.Types.N:IO[0] <Int>_R)
            :: (State# RealWorld -> (# State# RealWorld, Int #) :: *)
               ~R# (IO Int :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.threadStatus7 :: ThreadStatus
[GblId,
 Caf=NoCafRefs,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.threadStatus7
  = GHC.Conc.Sync.ThreadBlocked GHC.Conc.Sync.BlockedOnOther

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.threadStatus6 :: ThreadStatus
[GblId,
 Caf=NoCafRefs,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.threadStatus6
  = GHC.Conc.Sync.ThreadBlocked GHC.Conc.Sync.BlockedOnMVar

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.threadStatus2 :: ThreadStatus
[GblId,
 Caf=NoCafRefs,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.threadStatus2
  = GHC.Conc.Sync.ThreadBlocked GHC.Conc.Sync.BlockedOnException

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.threadStatus3 :: ThreadStatus
[GblId,
 Caf=NoCafRefs,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.threadStatus3
  = GHC.Conc.Sync.ThreadBlocked GHC.Conc.Sync.BlockedOnForeignCall

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.threadStatus4 :: ThreadStatus
[GblId,
 Caf=NoCafRefs,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.threadStatus4
  = GHC.Conc.Sync.ThreadBlocked GHC.Conc.Sync.BlockedOnSTM

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.Sync.threadStatus5 :: ThreadStatus
[GblId,
 Caf=NoCafRefs,
 Str=m3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.Sync.threadStatus5
  = GHC.Conc.Sync.ThreadBlocked GHC.Conc.Sync.BlockedOnBlackHole

-- RHS size: {terms: 33, types: 28, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$wthreadStatus [InlPrag=NOUSERINLINE[0]]
  :: ThreadId#
     -> State# RealWorld -> (# State# RealWorld, ThreadStatus #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 123 30}]
GHC.Conc.Sync.$wthreadStatus
  = \ (ww_s9ETu :: ThreadId#) (w_s9ETr :: State# RealWorld) ->
      case threadStatus# ww_s9ETu w_s9ETr of
      { (# ipv_s9DqF, ipv1_s9DqG, ipv2_s9DqH, ipv3_s9DqI #) ->
      (# ipv_s9DqF,
         case ipv1_s9DqG of {
           __DEFAULT -> GHC.Conc.Sync.threadStatus7;
           0# -> GHC.Conc.Sync.ThreadRunning;
           1# -> GHC.Conc.Sync.threadStatus6;
           2# -> GHC.Conc.Sync.threadStatus5;
           6# -> GHC.Conc.Sync.threadStatus4;
           10# -> GHC.Conc.Sync.threadStatus3;
           11# -> GHC.Conc.Sync.threadStatus3;
           12# -> GHC.Conc.Sync.threadStatus2;
           14# -> GHC.Conc.Sync.threadStatus6;
           16# -> GHC.Conc.Sync.ThreadFinished;
           17# -> GHC.Conc.Sync.ThreadDied
         } #)
      }

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
GHC.Conc.Sync.threadStatus1 [InlPrag=NOUSERINLINE[0]]
  :: ThreadId
     -> State# RealWorld -> (# State# RealWorld, ThreadStatus #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9ETq [Occ=Once!] :: ThreadId)
                 (w1_s9ETr [Occ=Once] :: State# RealWorld) ->
                 case w_s9ETq of { ThreadId ww1_s9ETu [Occ=Once] ->
                 GHC.Conc.Sync.$wthreadStatus ww1_s9ETu w1_s9ETr
                 }}]
GHC.Conc.Sync.threadStatus1
  = \ (w_s9ETq :: ThreadId) (w1_s9ETr :: State# RealWorld) ->
      case w_s9ETq of { ThreadId ww1_s9ETu ->
      GHC.Conc.Sync.$wthreadStatus ww1_s9ETu w1_s9ETr
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
threadStatus :: ThreadId -> IO ThreadStatus
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.threadStatus1
               `cast` (<ThreadId>_R ->_R Sym (GHC.Types.N:IO[0] <ThreadStatus>_R)
                       :: (ThreadId
                           -> State# RealWorld -> (# State# RealWorld, ThreadStatus #) :: *)
                          ~R# (ThreadId -> IO ThreadStatus :: *))}]
threadStatus
  = GHC.Conc.Sync.threadStatus1
    `cast` (<ThreadId>_R ->_R Sym (GHC.Types.N:IO[0] <ThreadStatus>_R)
            :: (ThreadId
                -> State# RealWorld -> (# State# RealWorld, ThreadStatus #) :: *)
               ~R# (ThreadId -> IO ThreadStatus :: *))

-- RHS size: {terms: 13, types: 28, coercions: 2, joins: 0/0}
GHC.Conc.Sync.$fFunctorSTM2
  :: forall a b.
     (a -> b) -> STM a -> State# RealWorld -> (# State# RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><C(S(SL)),1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9D9Z)
                 (@ b_a9Da0)
                 (f_a9CA8 [Occ=Once!] :: a_a9D9Z -> b_a9Da0)
                 (x_a9CA9 [Occ=Once] :: STM a_a9D9Z)
                 (s_a9CBZ [Occ=Once] :: State# RealWorld) ->
                 case (x_a9CA9
                       `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D9Z>_R
                               :: (STM a_a9D9Z :: *)
                                  ~R# (State# RealWorld -> (# State# RealWorld, a_a9D9Z #) :: *)))
                        s_a9CBZ
                 of
                 { (# ipv_s9Dnq [Occ=Once], ipv1_s9Dnr [Occ=Once] #) ->
                 (# ipv_s9Dnq, f_a9CA8 ipv1_s9Dnr #)
                 }}]
GHC.Conc.Sync.$fFunctorSTM2
  = \ (@ a_a9D9Z)
      (@ b_a9Da0)
      (f_a9CA8 :: a_a9D9Z -> b_a9Da0)
      (x_a9CA9 :: STM a_a9D9Z)
      (s_a9CBZ :: State# RealWorld) ->
      case (x_a9CA9
            `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D9Z>_R
                    :: (STM a_a9D9Z :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a9D9Z #) :: *)))
             s_a9CBZ
      of
      { (# ipv_s9Dnq, ipv1_s9Dnr #) ->
      (# ipv_s9Dnq, f_a9CA8 ipv1_s9Dnr #)
      }

-- RHS size: {terms: 12, types: 27, coercions: 2, joins: 0/0}
GHC.Conc.Sync.$fFunctorSTM1
  :: forall a b.
     a -> STM b -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(S(SL)),1*C1(U(U,A))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9Dak)
                 (@ b_a9Dal)
                 (x_i9DkS [Occ=Once] :: a_a9Dak)
                 (eta_B2 [Occ=Once] :: STM b_a9Dal)
                 (eta1_B1 [Occ=Once] :: State# RealWorld) ->
                 case (eta_B2
                       `cast` (GHC.Conc.Sync.N:STM[0] <b_a9Dal>_R
                               :: (STM b_a9Dal :: *)
                                  ~R# (State# RealWorld -> (# State# RealWorld, b_a9Dal #) :: *)))
                        eta1_B1
                 of
                 { (# ipv_s9Dnq [Occ=Once], _ [Occ=Dead] #) ->
                 (# ipv_s9Dnq, x_i9DkS #)
                 }}]
GHC.Conc.Sync.$fFunctorSTM1
  = \ (@ a_a9Dak)
      (@ b_a9Dal)
      (x_i9DkS :: a_a9Dak)
      (eta_B2 :: STM b_a9Dal)
      (eta1_B1 :: State# RealWorld) ->
      case (eta_B2
            `cast` (GHC.Conc.Sync.N:STM[0] <b_a9Dal>_R
                    :: (STM b_a9Dal :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, b_a9Dal #) :: *)))
             eta1_B1
      of
      { (# ipv_s9Dnq, ipv1_s9Dnr #) ->
      (# ipv_s9Dnq, x_i9DkS #)
      }

-- RHS size: {terms: 17, types: 42, coercions: 5, joins: 0/0}
GHC.Conc.Sync.$fApplicativeSTM2
  :: forall b a.
     STM (a -> b)
     -> STM a -> State# RealWorld -> (# State# RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,1*C1(U)))><L,1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b_a9D90)
                 (@ a_a9D8Z)
                 (m1_X9DrP [Occ=Once] :: STM (a_a9D8Z -> b_a9D90))
                 (m2_X9DrR [Occ=Once] :: STM a_a9D8Z)
                 (s_a9CBZ [Occ=Once] :: State# RealWorld) ->
                 case (m1_X9DrP
                       `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D8Z -> b_a9D90>_R
                               :: (STM (a_a9D8Z -> b_a9D90) :: *)
                                  ~R# (State# RealWorld
                                       -> (# State# RealWorld, a_a9D8Z -> b_a9D90 #) :: *)))
                        s_a9CBZ
                 of
                 { (# ipv_s9Dnq [Occ=Once], ipv1_s9Dnr [Occ=Once!] #) ->
                 case (m2_X9DrR
                       `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D8Z>_R
                               :: (STM a_a9D8Z :: *)
                                  ~R# (State# RealWorld -> (# State# RealWorld, a_a9D8Z #) :: *)))
                        ipv_s9Dnq
                 of
                 { (# ipv2_X9DuW [Occ=Once], ipv3_X9DuY [Occ=Once] #) ->
                 (# ipv2_X9DuW, ipv1_s9Dnr ipv3_X9DuY #)
                 }
                 }}]
GHC.Conc.Sync.$fApplicativeSTM2
  = \ (@ b_a9D90)
      (@ a_a9D8Z)
      (m1_X9DrP :: STM (a_a9D8Z -> b_a9D90))
      (m2_X9DrR :: STM a_a9D8Z)
      (s_a9CBZ :: State# RealWorld) ->
      case (m1_X9DrP
            `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D8Z -> b_a9D90>_R
                    :: (STM (a_a9D8Z -> b_a9D90) :: *)
                       ~R# (State# RealWorld
                            -> (# State# RealWorld, a_a9D8Z -> b_a9D90 #) :: *)))
             s_a9CBZ
      of
      { (# ipv_s9Dnq, ipv1_s9Dnr #) ->
      case (m2_X9DrR
            `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D8Z>_R
                    :: (STM a_a9D8Z :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a9D8Z #) :: *)))
             ipv_s9Dnq
      of
      { (# ipv2_X9DuW, ipv3_X9DuY #) ->
      (# ipv2_X9DuW, ipv1_s9Dnr ipv3_X9DuY #)
      }
      }

-- RHS size: {terms: 20, types: 44, coercions: 4, joins: 0/0}
$cliftA2_r9Fva
  :: forall c b a.
     (a -> b -> c)
     -> STM a -> STM b -> State# RealWorld -> (# State# RealWorld, c #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,U))><S,U>,
 Unf=OtherCon []]
$cliftA2_r9Fva
  = \ (@ c_a9D9j)
      (@ b_a9D9i)
      (@ a_a9D9h)
      (f_X9DrZ :: a_a9D9h -> b_a9D9i -> c_a9D9j)
      (m1_X9Ds1 :: STM a_a9D9h)
      (m2_X9Ds3 :: STM b_a9D9i)
      (s_a9CBZ :: State# RealWorld) ->
      case (m1_X9Ds1
            `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D9h>_R
                    :: (STM a_a9D9h :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a9D9h #) :: *)))
             s_a9CBZ
      of
      { (# ipv_s9Dnq, ipv1_s9Dnr #) ->
      case (m2_X9Ds3
            `cast` (GHC.Conc.Sync.N:STM[0] <b_a9D9i>_R
                    :: (STM b_a9D9i :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, b_a9D9i #) :: *)))
             ipv_s9Dnq
      of
      { (# ipv2_X9DuW, ipv3_X9DuY #) ->
      (# ipv2_X9DuW, f_X9DrZ ipv1_s9Dnr ipv3_X9DuY #)
      }
      }

-- RHS size: {terms: 4, types: 9, coercions: 22, joins: 0/0}
GHC.Conc.Sync.$fApplicativeSTM_$cliftA2 [InlPrag=INLINE (sat-args=0)]
  :: forall a b c. (a -> b -> c) -> STM a -> STM b -> STM c
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=False)
         Tmpl= (\ (@ a_a9D9h)
                  (@ b_a9D9i)
                  (@ c_a9D9j)
                  (f_i9DkB [Occ=Once!] :: a_a9D9h -> b_a9D9i -> c_a9D9j)
                  (m1_i9DkC [Occ=Once] :: STM a_a9D9h)
                  (m2_i9DkD [Occ=Once] :: STM b_a9D9i)
                  (s_a9CBZ [Occ=Once] :: State# RealWorld) ->
                  case (m1_i9DkC
                        `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D9h>_R
                                :: (STM a_a9D9h :: *)
                                   ~R# (State# RealWorld -> (# State# RealWorld, a_a9D9h #) :: *)))
                         s_a9CBZ
                  of
                  { (# ipv_s9Dnq [Occ=Once], ipv1_s9Dnr [Occ=Once] #) ->
                  case (m2_i9DkD
                        `cast` (GHC.Conc.Sync.N:STM[0] <b_a9D9i>_R
                                :: (STM b_a9D9i :: *)
                                   ~R# (State# RealWorld -> (# State# RealWorld, b_a9D9i #) :: *)))
                         ipv_s9Dnq
                  of
                  { (# ipv2_X9DuX [Occ=Once], ipv3_X9DuZ [Occ=Once] #) ->
                  (# ipv2_X9DuX, f_i9DkB ipv1_s9Dnr ipv3_X9DuZ #)
                  }
                  })
               `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                       <a -> b -> c>_R
                       ->_R <STM a>_R
                       ->_R <STM b>_R
                       ->_R Sym (GHC.Conc.Sync.N:STM[0] <c>_R)
                       :: (forall a b c.
                           (a -> b -> c)
                           -> STM a
                           -> STM b
                           -> State# RealWorld
                           -> (# State# RealWorld, c #) :: *)
                          ~R# (forall a b c.
                               (a -> b -> c) -> STM a -> STM b -> STM c :: *))}]
GHC.Conc.Sync.$fApplicativeSTM_$cliftA2
  = (\ (@ a_a9D9h) (@ b_a9D9i) (@ c_a9D9j) ->
       $cliftA2_r9Fva @ c_a9D9j @ b_a9D9i @ a_a9D9h)
    `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
            <a -> b -> c>_R
            ->_R <STM a>_R
            ->_R <STM b>_R
            ->_R Sym (GHC.Conc.Sync.N:STM[0] <c>_R)
            :: (forall a b c.
                (a -> b -> c)
                -> STM a
                -> STM b
                -> State# RealWorld
                -> (# State# RealWorld, c #) :: *)
               ~R# (forall a b c. (a -> b -> c) -> STM a -> STM b -> STM c :: *))

-- RHS size: {terms: 16, types: 39, coercions: 4, joins: 0/0}
GHC.Conc.Sync.$fApplicativeSTM1
  :: forall a b.
     STM a -> STM b -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S(SL)),1*C1(U(U,U))><L,1*C1(U(U,A))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9D9N)
                 (@ b_a9D9O)
                 (m1_X9DsN [Occ=Once] :: STM a_a9D9N)
                 (m2_X9DsP [Occ=Once] :: STM b_a9D9O)
                 (s_X9CKc [Occ=Once] :: State# RealWorld) ->
                 case (m1_X9DsN
                       `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D9N>_R
                               :: (STM a_a9D9N :: *)
                                  ~R# (State# RealWorld -> (# State# RealWorld, a_a9D9N #) :: *)))
                        s_X9CKc
                 of
                 { (# ipv_s9Dnq [Occ=Once], ipv1_s9Dnr [Occ=Once] #) ->
                 case (m2_X9DsP
                       `cast` (GHC.Conc.Sync.N:STM[0] <b_a9D9O>_R
                               :: (STM b_a9D9O :: *)
                                  ~R# (State# RealWorld -> (# State# RealWorld, b_a9D9O #) :: *)))
                        ipv_s9Dnq
                 of
                 { (# ipv2_X9DuX [Occ=Once], _ [Occ=Dead] #) ->
                 (# ipv2_X9DuX, ipv1_s9Dnr #)
                 }
                 }}]
GHC.Conc.Sync.$fApplicativeSTM1
  = \ (@ a_a9D9N)
      (@ b_a9D9O)
      (m1_X9DsN :: STM a_a9D9N)
      (m2_X9DsP :: STM b_a9D9O)
      (s_X9CKc :: State# RealWorld) ->
      case (m1_X9DsN
            `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D9N>_R
                    :: (STM a_a9D9N :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_a9D9N #) :: *)))
             s_X9CKc
      of
      { (# ipv_s9Dnq, ipv1_s9Dnr #) ->
      case (m2_X9DsP
            `cast` (GHC.Conc.Sync.N:STM[0] <b_a9D9O>_R
                    :: (STM b_a9D9O :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, b_a9D9O #) :: *)))
             ipv_s9Dnq
      of
      { (# ipv2_X9DuX, ipv3_X9DuZ #) ->
      (# ipv2_X9DuX, ipv1_s9Dnr #)
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 29, joins: 0/0}
GHC.Conc.Sync.$fFunctorSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: Functor STM
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Functor TYPE: STM
                          GHC.Conc.Sync.$fFunctorSTM2
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a -> b>_R ->_R <STM a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <b>_R)
                                  :: (forall a b.
                                      (a -> b)
                                      -> STM a
                                      -> State# RealWorld
                                      -> (# State# RealWorld, b #) :: *)
                                     ~R# (forall a b. (a -> b) -> STM a -> STM b :: *))
                          GHC.Conc.Sync.$fFunctorSTM1
                          `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                  <a>_R ->_R <STM b>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                                  :: (forall a b.
                                      a
                                      -> STM b
                                      -> State# RealWorld
                                      -> (# State# RealWorld, a #) :: *)
                                     ~R# (forall a b. a -> STM b -> STM a :: *))]
GHC.Conc.Sync.$fFunctorSTM
  = GHC.Base.C:Functor
      @ STM
      (GHC.Conc.Sync.$fFunctorSTM2
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a -> b>_R ->_R <STM a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <b>_R)
               :: (forall a b.
                   (a -> b)
                   -> STM a -> State# RealWorld -> (# State# RealWorld, b #) :: *)
                  ~R# (forall a b. (a -> b) -> STM a -> STM b :: *)))
      (GHC.Conc.Sync.$fFunctorSTM1
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <a>_R ->_R <STM b>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
               :: (forall a b.
                   a -> STM b -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                  ~R# (forall a b. a -> STM b -> STM a :: *)))

-- RHS size: {terms: 9, types: 7, coercions: 31, joins: 0/0}
GHC.Conc.Sync.$fApplicativeSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: Applicative STM
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Applicative TYPE: STM
                              GHC.Conc.Sync.$fFunctorSTM
                              GHC.Conc.Sync.$fApplicativeSTM_$cpure
                              (\ (@ a_a9D8Z) (@ b_a9D90) ->
                                 GHC.Conc.Sync.$fApplicativeSTM2 @ b_a9D90 @ a_a9D8Z)
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <STM (a -> b)>_R
                                      ->_R <STM a>_R
                                      ->_R Sym (GHC.Conc.Sync.N:STM[0] <b>_R)
                                      :: (forall a b.
                                          STM (a -> b)
                                          -> STM a
                                          -> State# RealWorld
                                          -> (# State# RealWorld, b #) :: *)
                                         ~R# (forall a b. STM (a -> b) -> STM a -> STM b :: *))
                              GHC.Conc.Sync.$fApplicativeSTM_$cliftA2
                              GHC.Conc.Sync.$fApplicativeSTM_$c*>
                              GHC.Conc.Sync.$fApplicativeSTM1
                              `cast` (forall (a :: <*>_N) (b :: <*>_N).
                                      <STM a>_R
                                      ->_R <STM b>_R
                                      ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                                      :: (forall a b.
                                          STM a
                                          -> STM b
                                          -> State# RealWorld
                                          -> (# State# RealWorld, a #) :: *)
                                         ~R# (forall a b. STM a -> STM b -> STM a :: *))]
GHC.Conc.Sync.$fApplicativeSTM
  = GHC.Base.C:Applicative
      @ STM
      GHC.Conc.Sync.$fFunctorSTM
      GHC.Conc.Sync.$fApplicativeSTM_$cpure
      ((\ (@ a_a9D8Z) (@ b_a9D90) ->
          GHC.Conc.Sync.$fApplicativeSTM2 @ b_a9D90 @ a_a9D8Z)
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <STM (a -> b)>_R
               ->_R <STM a>_R
               ->_R Sym (GHC.Conc.Sync.N:STM[0] <b>_R)
               :: (forall a b.
                   STM (a -> b)
                   -> STM a -> State# RealWorld -> (# State# RealWorld, b #) :: *)
                  ~R# (forall a b. STM (a -> b) -> STM a -> STM b :: *)))
      GHC.Conc.Sync.$fApplicativeSTM_$cliftA2
      GHC.Conc.Sync.$fApplicativeSTM_$c*>
      (GHC.Conc.Sync.$fApplicativeSTM1
       `cast` (forall (a :: <*>_N) (b :: <*>_N).
               <STM a>_R ->_R <STM b>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
               :: (forall a b.
                   STM a
                   -> STM b -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                  ~R# (forall a b. STM a -> STM b -> STM a :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
lvl_r9Fvb :: forall a. [Char] -> STM a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
lvl_r9Fvb
  = \ (@ a_a9D8D) (eta_B1 :: [Char]) ->
      errorWithoutStackTrace @ 'LiftedRep @ (STM a_a9D8D) eta_B1

-- RHS size: {terms: 6, types: 1, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fMonadSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: Monad STM
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Monad TYPE: STM
                        GHC.Conc.Sync.$fApplicativeSTM
                        GHC.Conc.Sync.$fMonadSTM_$c>>=
                        GHC.Conc.Sync.$fApplicativeSTM_$c*>
                        GHC.Conc.Sync.$fApplicativeSTM_$cpure
                        \ (@ a_a9D8D) ->
                          errorWithoutStackTrace @ 'LiftedRep @ (STM a_a9D8D)]
GHC.Conc.Sync.$fMonadSTM
  = GHC.Base.C:Monad
      @ STM
      GHC.Conc.Sync.$fApplicativeSTM
      GHC.Conc.Sync.$fMonadSTM_$c>>=
      GHC.Conc.Sync.$fApplicativeSTM_$c*>
      GHC.Conc.Sync.$fApplicativeSTM_$cpure
      lvl_r9Fvb

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
GHC.Conc.Sync.always2
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_a9CC7 [Occ=Once, OS=OneShot] :: State# RealWorld) ->
                 (# s_a9CC7, GHC.Tuple.() #)}]
GHC.Conc.Sync.always2
  = \ (s_a9CC7 [OS=OneShot] :: State# RealWorld) ->
      (# s_a9CC7, GHC.Tuple.() #)

-- RHS size: {terms: 23, types: 42, coercions: 4, joins: 0/0}
GHC.Conc.Sync.alwaysSucceeds1
  :: forall a.
     STM a -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<xB,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9CWC)
                 (i_a9CCo :: STM a_a9CWC)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case catchRetry#
                        @ ()
                        (\ (s_a9CC4 [Occ=Once, OS=OneShot] :: State# RealWorld) ->
                           case (i_a9CCo
                                 `cast` (GHC.Conc.Sync.N:STM[0] <a_a9CWC>_R
                                         :: (STM a_a9CWC :: *)
                                            ~R# (State# RealWorld
                                                 -> (# State# RealWorld, a_a9CWC #) :: *)))
                                  s_a9CC4
                           of
                           { (# ipv_s9Dny [Occ=Once], _ [Occ=Dead] #) ->
                           retry# @ () ipv_s9Dny
                           })
                        GHC.Conc.Sync.always2
                        eta_B1
                 of
                 { (# ipv_s9Dny [Occ=Once], _ [Occ=Dead] #) ->
                 case check#
                        @ a_a9CWC
                        (i_a9CCo
                         `cast` (GHC.Conc.Sync.N:STM[0] <a_a9CWC>_R
                                 :: (STM a_a9CWC :: *)
                                    ~R# (State# RealWorld -> (# State# RealWorld, a_a9CWC #) :: *)))
                        ipv_s9Dny
                 of s'_a9CCn
                 { __DEFAULT ->
                 (# s'_a9CCn, GHC.Tuple.() #)
                 }
                 }}]
GHC.Conc.Sync.alwaysSucceeds1
  = \ (@ a_a9CWC)
      (i_a9CCo :: STM a_a9CWC)
      (eta_B1 :: State# RealWorld) ->
      case catchRetry#
             @ ()
             (\ (s_a9CC4 [OS=OneShot] :: State# RealWorld) ->
                case (i_a9CCo
                      `cast` (GHC.Conc.Sync.N:STM[0] <a_a9CWC>_R
                              :: (STM a_a9CWC :: *)
                                 ~R# (State# RealWorld -> (# State# RealWorld, a_a9CWC #) :: *)))
                       s_a9CC4
                of
                { (# ipv_s9Dny, ipv1_s9Dnz #) ->
                retry# @ () ipv_s9Dny
                })
             GHC.Conc.Sync.always2
             eta_B1
      of
      { (# ipv_s9Dny, ipv1_s9Dnz #) ->
      case check#
             @ a_a9CWC
             (i_a9CCo
              `cast` (GHC.Conc.Sync.N:STM[0] <a_a9CWC>_R
                      :: (STM a_a9CWC :: *)
                         ~R# (State# RealWorld -> (# State# RealWorld, a_a9CWC #) :: *)))
             ipv_s9Dny
      of s'_a9CCn
      { __DEFAULT ->
      (# s'_a9CCn, GHC.Tuple.() #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
alwaysSucceeds :: forall a. STM a -> STM ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<xB,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.alwaysSucceeds1
               `cast` (forall (a :: <*>_N).
                       <STM a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)
                       :: (forall a.
                           STM a -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. STM a -> STM () :: *))}]
alwaysSucceeds
  = GHC.Conc.Sync.alwaysSucceeds1
    `cast` (forall (a :: <*>_N).
            <STM a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)
            :: (forall a.
                STM a -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. STM a -> STM () :: *))

-- RHS size: {terms: 5, types: 13, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$fAlternativeSTM2
  :: forall a. State# RealWorld -> (# State# RealWorld, [a] #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9D7E)
                 (s_a9CC7 [Occ=Once, OS=OneShot] :: State# RealWorld) ->
                 (# s_a9CC7, GHC.Types.[] @ a_a9D7E #)}]
GHC.Conc.Sync.$fAlternativeSTM2
  = \ (@ a_a9D7E) (s_a9CC7 [OS=OneShot] :: State# RealWorld) ->
      (# s_a9CC7, GHC.Types.[] @ a_a9D7E #)

-- RHS size: {terms: 22, types: 55, coercions: 2, joins: 0/1}
GHC.Conc.Sync.$fAlternativeSTM3
  :: forall a.
     STM a -> State# RealWorld -> (# State# RealWorld, [a] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S(SL)),C(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9D7E)
                 (v_i9Dk5 [Occ=Once] :: STM a_a9D7E)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 letrec {
                   some_v_s9DHF [Occ=LoopBreaker]
                     :: State# RealWorld -> (# State# RealWorld, [a_a9D7E] #)
                   [LclId, Arity=1, Unf=OtherCon []]
                   some_v_s9DHF
                     = \ (s_a9CBZ [Occ=Once] :: State# RealWorld) ->
                         case (v_i9Dk5
                               `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D7E>_R
                                       :: (STM a_a9D7E :: *)
                                          ~R# (State# RealWorld
                                               -> (# State# RealWorld, a_a9D7E #) :: *)))
                                s_a9CBZ
                         of
                         { (# ipv_s9Dnq [Occ=Once], ipv1_s9Dnr [Occ=Once] #) ->
                         case catchRetry#
                                @ [a_a9D7E]
                                some_v_s9DHF
                                (GHC.Conc.Sync.$fAlternativeSTM2 @ a_a9D7E)
                                ipv_s9Dnq
                         of
                         { (# ipv2_X9DuX [Occ=Once], ipv3_X9DuZ [Occ=Once] #) ->
                         (# ipv2_X9DuX, GHC.Types.: @ a_a9D7E ipv1_s9Dnr ipv3_X9DuZ #)
                         }
                         }; } in
                 some_v_s9DHF eta_B1}]
GHC.Conc.Sync.$fAlternativeSTM3
  = \ (@ a_a9D7E)
      (v_i9Dk5 :: STM a_a9D7E)
      (eta_B1 :: State# RealWorld) ->
      letrec {
        some_v_s9DHF [Occ=LoopBreaker]
          :: State# RealWorld -> (# State# RealWorld, [a_a9D7E] #)
        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
        some_v_s9DHF
          = \ (s_a9CBZ :: State# RealWorld) ->
              case (v_i9Dk5
                    `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D7E>_R
                            :: (STM a_a9D7E :: *)
                               ~R# (State# RealWorld -> (# State# RealWorld, a_a9D7E #) :: *)))
                     s_a9CBZ
              of
              { (# ipv_s9Dnq, ipv1_s9Dnr #) ->
              case catchRetry#
                     @ [a_a9D7E]
                     some_v_s9DHF
                     (GHC.Conc.Sync.$fAlternativeSTM2 @ a_a9D7E)
                     ipv_s9Dnq
              of
              { (# ipv2_X9DuX, ipv3_X9DuZ #) ->
              (# ipv2_X9DuX, GHC.Types.: @ a_a9D7E ipv1_s9Dnr ipv3_X9DuZ #)
              }
              }; } in
      some_v_s9DHF eta_B1

-- RHS size: {terms: 24, types: 66, coercions: 2, joins: 0/2}
GHC.Conc.Sync.$fAlternativeSTM1
  :: forall a.
     STM a -> State# RealWorld -> (# State# RealWorld, [a] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U(U,U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9D7Q)
                 (v_i9Dkb [Occ=Once] :: STM a_a9D7Q)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 letrec {
                   many_v_s9DHB [Occ=OnceL]
                     :: State# RealWorld -> (# State# RealWorld, [a_a9D7Q] #)
                   [LclId, Arity=1, Unf=OtherCon []]
                   many_v_s9DHB
                     = \ (s_a9CBZ [Occ=Once] :: State# RealWorld) ->
                         case (v_i9Dkb
                               `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D7Q>_R
                                       :: (STM a_a9D7Q :: *)
                                          ~R# (State# RealWorld
                                               -> (# State# RealWorld, a_a9D7Q #) :: *)))
                                s_a9CBZ
                         of
                         { (# ipv_s9Dnq [Occ=Once], ipv1_s9Dnr [Occ=Once] #) ->
                         case many_v1_s9DHC ipv_s9Dnq of
                         { (# ipv2_X9DuX [Occ=Once], ipv3_X9DuZ [Occ=Once] #) ->
                         (# ipv2_X9DuX, GHC.Types.: @ a_a9D7Q ipv1_s9Dnr ipv3_X9DuZ #)
                         }
                         };
                   many_v1_s9DHC [Occ=LoopBreaker]
                     :: State# RealWorld -> (# State# RealWorld, [a_a9D7Q] #)
                   [LclId, Arity=1, Unf=OtherCon []]
                   many_v1_s9DHC
                     = catchRetry#
                         @ [a_a9D7Q]
                         many_v_s9DHB
                         (GHC.Conc.Sync.$fAlternativeSTM2 @ a_a9D7Q); } in
                 many_v1_s9DHC eta_B1}]
GHC.Conc.Sync.$fAlternativeSTM1
  = \ (@ a_a9D7Q)
      (v_i9Dkb :: STM a_a9D7Q)
      (eta_B1 :: State# RealWorld) ->
      letrec {
        many_v_s9DHB
          :: State# RealWorld -> (# State# RealWorld, [a_a9D7Q] #)
        [LclId,
         Arity=1,
         Str=<S,U>,
         Unf=Unf{Src=InlineStable, TopLvl=False, Value=True, ConLike=True,
                 WorkFree=True, Expandable=True,
                 Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                 Tmpl= \ (s_a9CBZ [Occ=Once] :: State# RealWorld) ->
                         case (v_i9Dkb
                               `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D7Q>_R
                                       :: (STM a_a9D7Q :: *)
                                          ~R# (State# RealWorld
                                               -> (# State# RealWorld, a_a9D7Q #) :: *)))
                                s_a9CBZ
                         of
                         { (# ipv_s9Dnq [Occ=Once], ipv1_s9Dnr [Occ=Once] #) ->
                         case many_v1_s9DHC ipv_s9Dnq of
                         { (# ipv2_X9DuX [Occ=Once], ipv3_X9DuZ [Occ=Once] #) ->
                         (# ipv2_X9DuX, GHC.Types.: @ a_a9D7Q ipv1_s9Dnr ipv3_X9DuZ #)
                         }
                         }}]
        many_v_s9DHB
          = \ (s_a9CBZ :: State# RealWorld) ->
              case (v_i9Dkb
                    `cast` (GHC.Conc.Sync.N:STM[0] <a_a9D7Q>_R
                            :: (STM a_a9D7Q :: *)
                               ~R# (State# RealWorld -> (# State# RealWorld, a_a9D7Q #) :: *)))
                     s_a9CBZ
              of
              { (# ipv_s9Dnq, ipv1_s9Dnr #) ->
              case many_v1_s9DHC ipv_s9Dnq of { (# ipv2_X9DuX, ipv3_X9DuZ #) ->
              (# ipv2_X9DuX, GHC.Types.: @ a_a9D7Q ipv1_s9Dnr ipv3_X9DuZ #)
              }
              };
        many_v1_s9DHC [Occ=LoopBreaker]
          :: State# RealWorld -> (# State# RealWorld, [a_a9D7Q] #)
        [LclId, Arity=1, Unf=OtherCon []]
        many_v1_s9DHC
          = catchRetry#
              @ [a_a9D7Q]
              many_v_s9DHB
              (GHC.Conc.Sync.$fAlternativeSTM2 @ a_a9D7Q); } in
      many_v1_s9DHC eta_B1

-- RHS size: {terms: 6, types: 1, coercions: 40, joins: 0/0}
GHC.Conc.Sync.$fAlternativeSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: Alternative STM
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Alternative TYPE: STM
                              GHC.Conc.Sync.$fApplicativeSTM
                              retry#
                              `cast` (forall (a :: <*>_N). Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                                      :: (forall a.
                                          State# RealWorld -> (# State# RealWorld, a #) :: *)
                                         ~R# (forall a. STM a :: *))
                              catchRetry#
                              `cast` (forall (a :: <*>_N).
                                      Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                                      ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                                      ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                                      :: (forall a.
                                          (State# RealWorld -> (# State# RealWorld, a #))
                                          -> (State# RealWorld -> (# State# RealWorld, a #))
                                          -> State# RealWorld
                                          -> (# State# RealWorld, a #) :: *)
                                         ~R# (forall a. STM a -> STM a -> STM a :: *))
                              GHC.Conc.Sync.$fAlternativeSTM3
                              `cast` (forall (a :: <*>_N).
                                      <STM a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <[a]>_R)
                                      :: (forall a.
                                          STM a
                                          -> State# RealWorld -> (# State# RealWorld, [a] #) :: *)
                                         ~R# (forall a. STM a -> STM [a] :: *))
                              GHC.Conc.Sync.$fAlternativeSTM1
                              `cast` (forall (a :: <*>_N).
                                      <STM a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <[a]>_R)
                                      :: (forall a.
                                          STM a
                                          -> State# RealWorld -> (# State# RealWorld, [a] #) :: *)
                                         ~R# (forall a. STM a -> STM [a] :: *))]
GHC.Conc.Sync.$fAlternativeSTM
  = GHC.Base.C:Alternative
      @ STM
      GHC.Conc.Sync.$fApplicativeSTM
      (retry#
       `cast` (forall (a :: <*>_N). Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
               :: (forall a. State# RealWorld -> (# State# RealWorld, a #) :: *)
                  ~R# (forall a. STM a :: *)))
      (catchRetry#
       `cast` (forall (a :: <*>_N).
               Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
               ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
               ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
               :: (forall a.
                   (State# RealWorld -> (# State# RealWorld, a #))
                   -> (State# RealWorld -> (# State# RealWorld, a #))
                   -> State# RealWorld
                   -> (# State# RealWorld, a #) :: *)
                  ~R# (forall a. STM a -> STM a -> STM a :: *)))
      (GHC.Conc.Sync.$fAlternativeSTM3
       `cast` (forall (a :: <*>_N).
               <STM a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <[a]>_R)
               :: (forall a.
                   STM a -> State# RealWorld -> (# State# RealWorld, [a] #) :: *)
                  ~R# (forall a. STM a -> STM [a] :: *)))
      (GHC.Conc.Sync.$fAlternativeSTM1
       `cast` (forall (a :: <*>_N).
               <STM a>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <[a]>_R)
               :: (forall a.
                   STM a -> State# RealWorld -> (# State# RealWorld, [a] #) :: *)
                  ~R# (forall a. STM a -> STM [a] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 20, joins: 0/0}
GHC.Conc.Sync.$fMonadPlusSTM [InlPrag=NOUSERINLINE CONLIKE]
  :: MonadPlus STM
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:MonadPlus TYPE: STM
                            GHC.Conc.Sync.$fAlternativeSTM
                            GHC.Conc.Sync.$fMonadSTM
                            retry#
                            `cast` (forall (a :: <*>_N). Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                                    :: (forall a.
                                        State# RealWorld -> (# State# RealWorld, a #) :: *)
                                       ~R# (forall a. STM a :: *))
                            catchRetry#
                            `cast` (forall (a :: <*>_N).
                                    Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                                    ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                                    ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
                                    :: (forall a.
                                        (State# RealWorld -> (# State# RealWorld, a #))
                                        -> (State# RealWorld -> (# State# RealWorld, a #))
                                        -> State# RealWorld
                                        -> (# State# RealWorld, a #) :: *)
                                       ~R# (forall a. STM a -> STM a -> STM a :: *))]
GHC.Conc.Sync.$fMonadPlusSTM
  = GHC.Base.C:MonadPlus
      @ STM
      GHC.Conc.Sync.$fAlternativeSTM
      GHC.Conc.Sync.$fMonadSTM
      (retry#
       `cast` (forall (a :: <*>_N). Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
               :: (forall a. State# RealWorld -> (# State# RealWorld, a #) :: *)
                  ~R# (forall a. STM a :: *)))
      (catchRetry#
       `cast` (forall (a :: <*>_N).
               Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
               ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
               ->_R Sym (GHC.Conc.Sync.N:STM[0] <a>_R)
               :: (forall a.
                   (State# RealWorld -> (# State# RealWorld, a #))
                   -> (State# RealWorld -> (# State# RealWorld, a #))
                   -> State# RealWorld
                   -> (# State# RealWorld, a #) :: *)
                  ~R# (forall a. STM a -> STM a -> STM a :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_r9Fvc :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl1_r9Fvc = "Transactional invariant violation"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
GHC.Conc.Sync.always3 :: STM ()
[GblId, Str=x]
GHC.Conc.Sync.always3
  = errorWithoutStackTrace
      @ 'LiftedRep @ (STM ()) (unpackCString# lvl1_r9Fvc)

-- RHS size: {terms: 41, types: 66, coercions: 4, joins: 0/0}
GHC.Conc.Sync.always1
  :: STM Bool -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<xB,C(U(U,1*U))><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [120 0] 109 30}]
GHC.Conc.Sync.always1
  = \ (i_a9CCp :: STM Bool) (eta_B1 :: State# RealWorld) ->
      case catchRetry#
             @ ()
             (\ (s_a9CC4 [OS=OneShot] :: State# RealWorld) ->
                case (i_a9CCp
                      `cast` (GHC.Conc.Sync.N:STM[0] <Bool>_R
                              :: (STM Bool :: *)
                                 ~R# (State# RealWorld -> (# State# RealWorld, Bool #) :: *)))
                       s_a9CC4
                of
                { (# ipv_s9Dnq, ipv1_s9Dnr #) ->
                case ipv1_s9Dnr of {
                  False -> case GHC.Conc.Sync.always3 of wild1_00 { };
                  True -> retry# @ () ipv_s9Dnq
                }
                })
             GHC.Conc.Sync.always2
             eta_B1
      of
      { (# ipv_s9Dny, ipv1_s9Dnz #) ->
      case check#
             @ ()
             (\ (s_a9CBZ :: State# RealWorld) ->
                case (i_a9CCp
                      `cast` (GHC.Conc.Sync.N:STM[0] <Bool>_R
                              :: (STM Bool :: *)
                                 ~R# (State# RealWorld -> (# State# RealWorld, Bool #) :: *)))
                       s_a9CBZ
                of
                { (# ipv2_s9Dnq, ipv3_s9Dnr #) ->
                case ipv3_s9Dnr of {
                  False -> case GHC.Conc.Sync.always3 of wild1_00 { };
                  True -> (# ipv2_s9Dnq, GHC.Tuple.() #)
                }
                })
             ipv_s9Dny
      of s'_a9CCn
      { __DEFAULT ->
      (# s'_a9CCn, GHC.Tuple.() #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 6, joins: 0/0}
always :: STM Bool -> STM ()
[GblId,
 Arity=2,
 Str=<xB,C(U(U,1*U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.always1
               `cast` (<STM Bool>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)
                       :: (STM Bool
                           -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (STM Bool -> STM () :: *))}]
always
  = GHC.Conc.Sync.always1
    `cast` (<STM Bool>_R ->_R Sym (GHC.Conc.Sync.N:STM[0] <()>_R)
            :: (STM Bool
                -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (STM Bool -> STM () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_r9Fvd :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_r9Fvd = "no threads to run:  infinite loop or deadlock?"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_r9Fve :: [Char]
[GblId]
lvl3_r9Fve = unpackCString# lvl2_r9Fvd

-- RHS size: {terms: 16, types: 33, coercions: 0, joins: 0/0}
lvl4_r9Fvf :: Data.Typeable.Internal.TypeRep Deadlock
[GblId]
lvl4_r9Fvf
  = case Data.Typeable.Internal.$wmkTrCon
           @ *
           @ Deadlock
           18363794241794644491##
           11186984538024031318##
           GHC.IO.Exception.$trModule
           GHC.IO.Exception.$fExceptionDeadlock4
           0#
           GHC.Types.krep$*
           (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)
    of
    { (# ww8_i8htw, ww9_i8htx, ww10_i8hty, ww11_i8htz, ww12_i8htA #) ->
    Data.Typeable.Internal.TrTyCon
      @ * @ Deadlock ww8_i8htw ww9_i8htx ww10_i8hty ww11_i8htz ww12_i8htA
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl5_r9Fvg :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl5_r9Fvg = "%s"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_r9Fvh :: [Char]
[GblId]
lvl6_r9Fvh = unpackCString# lvl5_r9Fvg

-- RHS size: {terms: 8, types: 16, coercions: 0, joins: 0/0}
lvl7_r9Fvi
  :: SomeException -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,1*U><S,U>, Unf=OtherCon []]
lvl7_r9Fvi
  = \ (ds1_i94U2 [OS=OneShot] :: SomeException)
      (eta_Xa [OS=OneShot] :: State# RealWorld) ->
      case ds1_i94U2 of
      { SomeException @ e_i94U5 $dException_i94U6 e1_i94U7 ->
      (# eta_Xa, GHC.Tuple.() #)
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_r9Fvj :: IO ()
[GblId]
lvl8_r9Fvj = hFlush stdout

-- RHS size: {terms: 67, types: 97, coercions: 24, joins: 0/1}
lvl9_r9Fvk
  :: SomeException -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []]
lvl9_r9Fvk
  = \ (se_a9CD2 :: SomeException) (eta_B1 :: State# RealWorld) ->
      case se_a9CD2 of
      { SomeException @ e_a9CS1 $dException_a9CS2 ex_a9CD3 ->
      case lvl8_r9Fvj
           `cast` (GHC.Types.N:IO[0] <()>_R
                   :: (IO () :: *)
                      ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *))
      of io_i94U1
      { __DEFAULT ->
      case catch# @ () @ SomeException io_i94U1 lvl7_r9Fvi eta_B1 of
      { (# ipv_i7JiK, ipv1_i7JiL #) ->
      case (GHC.IO.Encoding.getForeignEncoding
            `cast` (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R
                    :: (IO GHC.IO.Encoding.Types.TextEncoding :: *)
                       ~R# (State# RealWorld
                            -> (# State# RealWorld,
                                  GHC.IO.Encoding.Types.TextEncoding #) :: *)))
             ipv_i7JiK
      of
      { (# ipv2_i7IAy, ipv3_i7IAz #) ->
      let {
        msg_s9DHw :: [Char]
        [LclId]
        msg_s9DHw
          = case Data.Typeable.Internal.sameTypeRep
                   @ *
                   @ *
                   @ e_a9CS1
                   @ Deadlock
                   ((GHC.Exception.$p1Exception @ e_a9CS1 $dException_a9CS2)
                    `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e_a9CS1>_N
                            :: (Typeable e_a9CS1 :: Constraint)
                               ~R# (Data.Typeable.Internal.TypeRep e_a9CS1 :: *)))
                   lvl4_r9Fvf
            of {
              False ->
                showsPrec
                  @ e_a9CS1
                  (GHC.Exception.$p2Exception @ e_a9CS1 $dException_a9CS2)
                  GHC.Conc.Sync.$fShowThreadStatus2
                  ex_a9CD3
                  (GHC.Types.[] @ Char);
              True ->
                case ex_a9CD3
                     `cast` (UnsafeCo representational e_a9CS1 Deadlock
                             :: (e_a9CS1 :: *) ~R# (Deadlock :: *))
                of
                { Deadlock ->
                lvl3_r9Fve
                }
            } } in
      GHC.Foreign.charIsRepresentable3
        @ ()
        ipv3_i7IAz
        lvl6_r9Fvh
        ((\ (cfmt_a9CD5 :: CString)
            (s1_i7IAv [OS=OneShot] :: State# RealWorld) ->
            case (GHC.IO.Encoding.getForeignEncoding
                  `cast` (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R
                          :: (IO GHC.IO.Encoding.Types.TextEncoding :: *)
                             ~R# (State# RealWorld
                                  -> (# State# RealWorld,
                                        GHC.IO.Encoding.Types.TextEncoding #) :: *)))
                   s1_i7IAv
            of
            { (# ipv4_X7IIE, ipv5_X7IIG #) ->
            GHC.Foreign.charIsRepresentable3
              @ ()
              ipv5_X7IIG
              msg_s9DHw
              ((\ (cmsg_a9CD6 :: CString)
                  (eta1_Xl [OS=OneShot] :: State# RealWorld) ->
                  case cfmt_a9CD5 of { Ptr ds4_d9Dl9 ->
                  case cmsg_a9CD6 of { Ptr ds6_d9Dlb ->
                  case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr# -> State# RealWorld -> (# State# RealWorld #)}_d9Dle
                         ds4_d9Dl9 ds6_d9Dlb eta1_Xl
                  of
                  { (# ds7_d9Dlc #) ->
                  (# ds7_d9Dlc, GHC.Tuple.() #)
                  }
                  }
                  })
               `cast` (<CString>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (CString -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (CString -> IO () :: *)))
              ipv4_X7IIE
            })
         `cast` (<CString>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                 :: (CString -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                    ~R# (CString -> IO () :: *)))
        ipv2_i7IAy
      }
      }
      }
      }

-- RHS size: {terms: 14, types: 42, coercions: 10, joins: 0/0}
lvl10_r9Fvl
  :: State# RealWorld
     -> (# State# RealWorld, IORef (SomeException -> IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []]
lvl10_r9Fvl
  = \ (s_i91ZD [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_i91ZD of s'_i91ZE { __DEFAULT ->
      case newMutVar#
             @ (SomeException -> IO ())
             @ RealWorld
             (lvl9_r9Fvk
              `cast` (<SomeException>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (SomeException
                          -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                         ~R# (SomeException -> IO () :: *)))
             s'_i91ZE
      of
      { (# ipv_i8ttV, ipv1_i8ttW #) ->
      (# ipv_i8ttV,
         (GHC.STRef.STRef @ RealWorld @ (SomeException -> IO ()) ipv1_i8ttW)
         `cast` (Sym (GHC.IORef.N:IORef[0]) <SomeException -> IO ()>_N
                 :: (GHC.STRef.STRef RealWorld (SomeException -> IO ()) :: *)
                    ~R# (IORef (SomeException -> IO ()) :: *)) #)
      }
      }

-- RHS size: {terms: 5, types: 39, coercions: 0, joins: 0/0}
uncaughtExceptionHandler [InlPrag=NOINLINE]
  :: IORef (SomeException -> IO ())
[GblId]
uncaughtExceptionHandler
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, IORef (SomeException -> IO ()) #)
           lvl10_r9Fvl
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }

-- RHS size: {terms: 2, types: 4, coercions: 4, joins: 0/0}
GHC.Conc.Sync.setUncaughtExceptionHandler1
  :: (SomeException -> IO ())
     -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Conc.Sync.setUncaughtExceptionHandler1
  = GHC.STRef.writeSTRef1
      @ RealWorld
      @ (SomeException -> IO ())
      (uncaughtExceptionHandler
       `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
               :: (IORef (SomeException -> IO ()) :: *)
                  ~R# (GHC.STRef.STRef RealWorld (SomeException -> IO ()) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
setUncaughtExceptionHandler :: (SomeException -> IO ()) -> IO ()
[GblId,
 Arity=2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.setUncaughtExceptionHandler1
               `cast` (<SomeException -> IO ()>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: ((SomeException -> IO ())
                           -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# ((SomeException -> IO ()) -> IO () :: *))}]
setUncaughtExceptionHandler
  = GHC.Conc.Sync.setUncaughtExceptionHandler1
    `cast` (<SomeException -> IO ()>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: ((SomeException -> IO ())
                -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# ((SomeException -> IO ()) -> IO () :: *))

-- RHS size: {terms: 2, types: 4, coercions: 4, joins: 0/0}
GHC.Conc.Sync.getUncaughtExceptionHandler1
  :: State# RealWorld
     -> (# State# RealWorld, SomeException -> IO () #)
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Conc.Sync.getUncaughtExceptionHandler1
  = GHC.STRef.readSTRef1
      @ RealWorld
      @ (SomeException -> IO ())
      (uncaughtExceptionHandler
       `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
               :: (IORef (SomeException -> IO ()) :: *)
                  ~R# (GHC.STRef.STRef RealWorld (SomeException -> IO ()) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
getUncaughtExceptionHandler :: IO (SomeException -> IO ())
[GblId,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.getUncaughtExceptionHandler1
               `cast` (Sym (GHC.Types.N:IO[0] <SomeException -> IO ()>_R)
                       :: (State# RealWorld
                           -> (# State# RealWorld, SomeException -> IO () #) :: *)
                          ~R# (IO (SomeException -> IO ()) :: *))}]
getUncaughtExceptionHandler
  = GHC.Conc.Sync.getUncaughtExceptionHandler1
    `cast` (Sym (GHC.Types.N:IO[0] <SomeException -> IO ()>_R)
            :: (State# RealWorld
                -> (# State# RealWorld, SomeException -> IO () #) :: *)
               ~R# (IO (SomeException -> IO ()) :: *))

-- RHS size: {terms: 13, types: 32, coercions: 6, joins: 0/0}
GHC.Conc.Sync.reportError1
  :: SomeException -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ex_a9CCZ [Occ=Once] :: SomeException)
                 (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case uncaughtExceptionHandler
                      `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
                              :: (IORef (SomeException -> IO ()) :: *)
                                 ~R# (GHC.STRef.STRef RealWorld (SomeException -> IO ()) :: *))
                 of
                 { GHC.STRef.STRef var#_i7IB3 [Occ=Once] ->
                 case readMutVar#
                        @ RealWorld @ (SomeException -> IO ()) var#_i7IB3 s_i7IAv
                 of
                 { (# ipv_i7IAy [Occ=Once], ipv1_i7IAz [Occ=Once!] #) ->
                 ((ipv1_i7IAz ex_a9CCZ)
                  `cast` (GHC.Types.N:IO[0] <()>_R
                          :: (IO () :: *)
                             ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                   ipv_i7IAy
                 }
                 }}]
GHC.Conc.Sync.reportError1
  = \ (ex_a9CCZ :: SomeException) (s_i7IAv :: State# RealWorld) ->
      case uncaughtExceptionHandler
           `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
                   :: (IORef (SomeException -> IO ()) :: *)
                      ~R# (GHC.STRef.STRef RealWorld (SomeException -> IO ()) :: *))
      of
      { GHC.STRef.STRef var#_i7IB3 ->
      case readMutVar#
             @ RealWorld @ (SomeException -> IO ()) var#_i7IB3 s_i7IAv
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      ((ipv1_i7IAz ex_a9CCZ)
       `cast` (GHC.Types.N:IO[0] <()>_R
               :: (IO () :: *)
                  ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
        ipv_i7IAy
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
reportError :: SomeException -> IO ()
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.reportError1
               `cast` (<SomeException>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (SomeException
                           -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (SomeException -> IO () :: *))}]
reportError
  = GHC.Conc.Sync.reportError1
    `cast` (<SomeException>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (SomeException
                -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (SomeException -> IO () :: *))

-- RHS size: {terms: 50, types: 84, coercions: 25, joins: 0/1}
GHC.Conc.Sync.sharedCAF1
  :: forall a.
     a
     -> (Ptr a -> IO (Ptr a))
     -> State# RealWorld
     -> (# State# RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(C(S(SS(S)))),C(C1(U(U,1*U(U))))><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 162 0}]
GHC.Conc.Sync.sharedCAF1
  = \ (@ a_a9CSP)
      (a1_a9CCT :: a_a9CSP)
      (get_or_set_a9CCU :: Ptr a_a9CSP -> IO (Ptr a_a9CSP))
      (eta_B1 :: State# RealWorld) ->
      case getMaskingState# eta_B1 of { (# ipv_i9DrM, ipv1_i9DrN #) ->
      let {
        io_s9DHs [Dmd=<C(S),C(U(U,U))>]
          :: State# RealWorld -> (# State# RealWorld, a_a9CSP #)
        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
        io_s9DHs
          = \ (s_i7IAv :: State# RealWorld) ->
              case makeStablePtr# @ a_a9CSP a1_a9CCT s_i7IAv of
              { (# ipv2_i9DrV, ipv3_i9DrW #) ->
              case ((get_or_set_a9CCU
                       ((GHC.Ptr.Ptr
                           @ ()
                           (ipv3_i9DrW
                            `cast` (UnsafeCo representational (StablePtr# a_a9CSP) Addr#
                                    :: (StablePtr# a_a9CSP :: TYPE 'AddrRep)
                                       ~R# (Addr# :: TYPE 'AddrRep))))
                        `cast` ((Ptr Univ(phantom phantom <*>_N :: (), a_a9CSP))_R
                                :: (Ptr () :: *) ~R# (Ptr a_a9CSP :: *))))
                    `cast` (GHC.Types.N:IO[0] <Ptr a_a9CSP>_R
                            :: (IO (Ptr a_a9CSP) :: *)
                               ~R# (State# RealWorld
                                    -> (# State# RealWorld, Ptr a_a9CSP #) :: *)))
                     ipv2_i9DrV
              of
              { (# ipv4_X7IIy, ipv5_X7IIA #) ->
              case ipv5_X7IIA of { Ptr b1_i7JfL ->
              case eqAddr#
                     (ipv3_i9DrW
                      `cast` (UnsafeCo representational (StablePtr# a_a9CSP) Addr#
                              :: (StablePtr# a_a9CSP :: TYPE 'AddrRep)
                                 ~R# (Addr# :: TYPE 'AddrRep)))
                     b1_i7JfL
              of {
                __DEFAULT ->
                  case {__pkg_ccall base-4.11.0.0 forall a.
                           StablePtr# a -> State# RealWorld -> (# State# RealWorld #)}_i9Ddh
                         @ a_a9CSP ipv3_i9DrW ipv4_X7IIy
                  of
                  { (# ds4_i9Ddm #) ->
                  deRefStablePtr#
                    @ a_a9CSP
                    (b1_i7JfL
                     `cast` (UnsafeCo representational Addr# (StablePtr# a_a9CSP)
                             :: (Addr# :: TYPE 'AddrRep)
                                ~R# (StablePtr# a_a9CSP :: TYPE 'AddrRep)))
                    ds4_i9Ddm
                  };
                1# -> (# ipv4_X7IIy, a1_a9CCT #)
              }
              }
              }
              } } in
      case ipv1_i9DrN of {
        __DEFAULT -> io_s9DHs ipv_i9DrM;
        0# -> maskAsyncExceptions# @ a_a9CSP io_s9DHs ipv_i9DrM
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
sharedCAF :: forall a. a -> (Ptr a -> IO (Ptr a)) -> IO a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><C(C(S(SS(S)))),C(C1(U(U,1*U(U))))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.sharedCAF1
               `cast` (forall (a :: <*>_N).
                       <a>_R
                       ->_R <Ptr a -> IO (Ptr a)>_R
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           a
                           -> (Ptr a -> IO (Ptr a))
                           -> State# RealWorld
                           -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. a -> (Ptr a -> IO (Ptr a)) -> IO a :: *))}]
sharedCAF
  = GHC.Conc.Sync.sharedCAF1
    `cast` (forall (a :: <*>_N).
            <a>_R
            ->_R <Ptr a -> IO (Ptr a)>_R
            ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                a
                -> (Ptr a -> IO (Ptr a))
                -> State# RealWorld
                -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. a -> (Ptr a -> IO (Ptr a)) -> IO a :: *))

-- RHS size: {terms: 124, types: 193, coercions: 6, joins: 0/0}
GHC.Conc.Sync.$wmodifyMVar_ [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     MVar# RealWorld a
     -> (a -> IO a) -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*C1(C1(U))><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 426 60}]
GHC.Conc.Sync.$wmodifyMVar_
  = \ (@ a_s9ETF)
      (ww_s9ETL :: MVar# RealWorld a_s9ETF)
      (w_s9ETH :: a_s9ETF -> IO a_s9ETF)
      (w1_s9ETI :: State# RealWorld) ->
      case getMaskingState# w1_s9ETI of { (# ipv_i94TO, ipv1_i94TP #) ->
      case ipv1_i94TP of {
        __DEFAULT ->
          case takeMVar# @ RealWorld @ a_s9ETF ww_s9ETL ipv_i94TO of
          { (# ipv2_i7IAy, ipv3_i7IAz #) ->
          case catch#
                 @ a_s9ETF
                 @ SomeException
                 (maskAsyncExceptions#
                    @ a_s9ETF
                    ((w_s9ETH ipv3_i7IAz)
                     `cast` (GHC.Types.N:IO[0] <a_s9ETF>_R
                             :: (IO a_s9ETF :: *)
                                ~R# (State# RealWorld -> (# State# RealWorld, a_s9ETF #) :: *))))
                 (\ (ds3_i94U2 [OS=OneShot] :: SomeException) ->
                    case ds3_i94U2 of
                    { SomeException @ e_i94U5 $dException_i94U6 e1_i94U7 ->
                    \ (s_i7JiH [OS=OneShot] :: State# RealWorld) ->
                      case putMVar# @ RealWorld @ a_s9ETF ww_s9ETL ipv3_i7IAz s_i7JiH of
                      { __DEFAULT ->
                      case throw @ e_i94U5 @ (IO a_s9ETF) $dException_i94U6 e1_i94U7
                      of wild1_00 {
                      }
                      }
                    })
                 ipv2_i7IAy
          of
          { (# ipv4_X7IIy, ipv5_X7IIA #) ->
          case putMVar# @ RealWorld @ a_s9ETF ww_s9ETL ipv5_X7IIA ipv4_X7IIy
          of s2#_i9DsB
          { __DEFAULT ->
          (# s2#_i9DsB, GHC.Tuple.() #)
          }
          }
          };
        0# ->
          maskAsyncExceptions#
            @ ()
            (\ (s_i7IAv [OS=OneShot] :: State# RealWorld) ->
               case takeMVar# @ RealWorld @ a_s9ETF ww_s9ETL s_i7IAv of
               { (# ipv2_i7IAy, ipv3_i7IAz #) ->
               case catch#
                      @ a_s9ETF
                      @ SomeException
                      (unmaskAsyncExceptions#
                         @ a_s9ETF
                         ((w_s9ETH ipv3_i7IAz)
                          `cast` (GHC.Types.N:IO[0] <a_s9ETF>_R
                                  :: (IO a_s9ETF :: *)
                                     ~R# (State# RealWorld
                                          -> (# State# RealWorld, a_s9ETF #) :: *))))
                      (\ (ds3_i94U2 [OS=OneShot] :: SomeException) ->
                         case ds3_i94U2 of
                         { SomeException @ e_i94U5 $dException_i94U6 e1_i94U7 ->
                         \ (s1_i7JiH [OS=OneShot] :: State# RealWorld) ->
                           case putMVar# @ RealWorld @ a_s9ETF ww_s9ETL ipv3_i7IAz s1_i7JiH of
                           { __DEFAULT ->
                           case throw @ e_i94U5 @ (IO a_s9ETF) $dException_i94U6 e1_i94U7
                           of wild1_00 {
                           }
                           }
                         })
                      ipv2_i7IAy
               of
               { (# ipv4_X7IIy, ipv5_X7IIA #) ->
               case putMVar# @ RealWorld @ a_s9ETF ww_s9ETL ipv5_X7IIA ipv4_X7IIy
               of s2#_i9DsB
               { __DEFAULT ->
               (# s2#_i9DsB, GHC.Tuple.() #)
               }
               }
               })
            ipv_i94TO;
        1# ->
          case takeMVar# @ RealWorld @ a_s9ETF ww_s9ETL ipv_i94TO of
          { (# ipv2_i7IAy, ipv3_i7IAz #) ->
          case catch#
                 @ a_s9ETF
                 @ SomeException
                 (maskUninterruptible#
                    @ a_s9ETF
                    ((w_s9ETH ipv3_i7IAz)
                     `cast` (GHC.Types.N:IO[0] <a_s9ETF>_R
                             :: (IO a_s9ETF :: *)
                                ~R# (State# RealWorld -> (# State# RealWorld, a_s9ETF #) :: *))))
                 (\ (ds3_i94U2 [OS=OneShot] :: SomeException) ->
                    case ds3_i94U2 of
                    { SomeException @ e_i94U5 $dException_i94U6 e1_i94U7 ->
                    \ (s_i7JiH [OS=OneShot] :: State# RealWorld) ->
                      case putMVar# @ RealWorld @ a_s9ETF ww_s9ETL ipv3_i7IAz s_i7JiH of
                      { __DEFAULT ->
                      case throw @ e_i94U5 @ (IO a_s9ETF) $dException_i94U6 e1_i94U7
                      of wild1_00 {
                      }
                      }
                    })
                 ipv2_i7IAy
          of
          { (# ipv4_X7IIy, ipv5_X7IIA #) ->
          case putMVar# @ RealWorld @ a_s9ETF ww_s9ETL ipv5_X7IIA ipv4_X7IIy
          of s2#_i9DsB
          { __DEFAULT ->
          (# s2#_i9DsB, GHC.Tuple.() #)
          }
          }
          }
      }
      }

-- RHS size: {terms: 11, types: 15, coercions: 0, joins: 0/0}
GHC.Conc.Sync.modifyMVar_1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     MVar a
     -> (a -> IO a) -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s9ETF)
                 (w_s9ETG [Occ=Once!] :: MVar a_s9ETF)
                 (w1_s9ETH [Occ=Once] :: a_s9ETF -> IO a_s9ETF)
                 (w2_s9ETI [Occ=Once] :: State# RealWorld) ->
                 case w_s9ETG of { MVar ww1_s9ETL [Occ=Once] ->
                 GHC.Conc.Sync.$wmodifyMVar_ @ a_s9ETF ww1_s9ETL w1_s9ETH w2_s9ETI
                 }}]
GHC.Conc.Sync.modifyMVar_1
  = \ (@ a_s9ETF)
      (w_s9ETG :: MVar a_s9ETF)
      (w1_s9ETH :: a_s9ETF -> IO a_s9ETF)
      (w2_s9ETI :: State# RealWorld) ->
      case w_s9ETG of { MVar ww1_s9ETL ->
      GHC.Conc.Sync.$wmodifyMVar_ @ a_s9ETF ww1_s9ETL w1_s9ETH w2_s9ETI
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
modifyMVar_ :: forall a. MVar a -> (a -> IO a) -> IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.modifyMVar_1
               `cast` (forall (a :: <*>_N).
                       <MVar a>_R ->_R <a -> IO a>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           MVar a
                           -> (a -> IO a)
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. MVar a -> (a -> IO a) -> IO () :: *))}]
modifyMVar_
  = GHC.Conc.Sync.modifyMVar_1
    `cast` (forall (a :: <*>_N).
            <MVar a>_R ->_R <a -> IO a>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                MVar a
                -> (a -> IO a)
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. MVar a -> (a -> IO a) -> IO () :: *))

-- RHS size: {terms: 125, types: 195, coercions: 6, joins: 0/0}
GHC.Conc.Sync.$wwithMVar [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     MVar# RealWorld a
     -> (a -> IO b) -> State# RealWorld -> (# State# RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*C1(C1(U))><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 426 60}]
GHC.Conc.Sync.$wwithMVar
  = \ (@ a_s9ETO)
      (@ b_s9ETP)
      (ww_s9ETV :: MVar# RealWorld a_s9ETO)
      (w_s9ETR :: a_s9ETO -> IO b_s9ETP)
      (w1_s9ETS :: State# RealWorld) ->
      case getMaskingState# w1_s9ETS of { (# ipv_i94TO, ipv1_i94TP #) ->
      case ipv1_i94TP of {
        __DEFAULT ->
          case takeMVar# @ RealWorld @ a_s9ETO ww_s9ETV ipv_i94TO of
          { (# ipv2_i7IAy, ipv3_i7IAz #) ->
          case catch#
                 @ b_s9ETP
                 @ SomeException
                 (maskAsyncExceptions#
                    @ b_s9ETP
                    ((w_s9ETR ipv3_i7IAz)
                     `cast` (GHC.Types.N:IO[0] <b_s9ETP>_R
                             :: (IO b_s9ETP :: *)
                                ~R# (State# RealWorld -> (# State# RealWorld, b_s9ETP #) :: *))))
                 (\ (ds3_i94U2 [OS=OneShot] :: SomeException) ->
                    case ds3_i94U2 of
                    { SomeException @ e_i94U5 $dException_i94U6 e1_i94U7 ->
                    \ (s_i7JiH [OS=OneShot] :: State# RealWorld) ->
                      case putMVar# @ RealWorld @ a_s9ETO ww_s9ETV ipv3_i7IAz s_i7JiH of
                      { __DEFAULT ->
                      case throw @ e_i94U5 @ (IO b_s9ETP) $dException_i94U6 e1_i94U7
                      of wild1_00 {
                      }
                      }
                    })
                 ipv2_i7IAy
          of
          { (# ipv4_X7IIA, ipv5_X7IIC #) ->
          case putMVar# @ RealWorld @ a_s9ETO ww_s9ETV ipv3_i7IAz ipv4_X7IIA
          of s2#_i9DsB
          { __DEFAULT ->
          (# s2#_i9DsB, ipv5_X7IIC #)
          }
          }
          };
        0# ->
          maskAsyncExceptions#
            @ b_s9ETP
            (\ (s_i7IAv [OS=OneShot] :: State# RealWorld) ->
               case takeMVar# @ RealWorld @ a_s9ETO ww_s9ETV s_i7IAv of
               { (# ipv2_i7IAy, ipv3_i7IAz #) ->
               case catch#
                      @ b_s9ETP
                      @ SomeException
                      (unmaskAsyncExceptions#
                         @ b_s9ETP
                         ((w_s9ETR ipv3_i7IAz)
                          `cast` (GHC.Types.N:IO[0] <b_s9ETP>_R
                                  :: (IO b_s9ETP :: *)
                                     ~R# (State# RealWorld
                                          -> (# State# RealWorld, b_s9ETP #) :: *))))
                      (\ (ds3_i94U2 [OS=OneShot] :: SomeException) ->
                         case ds3_i94U2 of
                         { SomeException @ e_i94U5 $dException_i94U6 e1_i94U7 ->
                         \ (s1_i7JiH [OS=OneShot] :: State# RealWorld) ->
                           case putMVar# @ RealWorld @ a_s9ETO ww_s9ETV ipv3_i7IAz s1_i7JiH of
                           { __DEFAULT ->
                           case throw @ e_i94U5 @ (IO b_s9ETP) $dException_i94U6 e1_i94U7
                           of wild1_00 {
                           }
                           }
                         })
                      ipv2_i7IAy
               of
               { (# ipv4_X7IIA, ipv5_X7IIC #) ->
               case putMVar# @ RealWorld @ a_s9ETO ww_s9ETV ipv3_i7IAz ipv4_X7IIA
               of s2#_i9DsB
               { __DEFAULT ->
               (# s2#_i9DsB, ipv5_X7IIC #)
               }
               }
               })
            ipv_i94TO;
        1# ->
          case takeMVar# @ RealWorld @ a_s9ETO ww_s9ETV ipv_i94TO of
          { (# ipv2_i7IAy, ipv3_i7IAz #) ->
          case catch#
                 @ b_s9ETP
                 @ SomeException
                 (maskUninterruptible#
                    @ b_s9ETP
                    ((w_s9ETR ipv3_i7IAz)
                     `cast` (GHC.Types.N:IO[0] <b_s9ETP>_R
                             :: (IO b_s9ETP :: *)
                                ~R# (State# RealWorld -> (# State# RealWorld, b_s9ETP #) :: *))))
                 (\ (ds3_i94U2 [OS=OneShot] :: SomeException) ->
                    case ds3_i94U2 of
                    { SomeException @ e_i94U5 $dException_i94U6 e1_i94U7 ->
                    \ (s_i7JiH [OS=OneShot] :: State# RealWorld) ->
                      case putMVar# @ RealWorld @ a_s9ETO ww_s9ETV ipv3_i7IAz s_i7JiH of
                      { __DEFAULT ->
                      case throw @ e_i94U5 @ (IO b_s9ETP) $dException_i94U6 e1_i94U7
                      of wild1_00 {
                      }
                      }
                    })
                 ipv2_i7IAy
          of
          { (# ipv4_X7IIA, ipv5_X7IIC #) ->
          case putMVar# @ RealWorld @ a_s9ETO ww_s9ETV ipv3_i7IAz ipv4_X7IIA
          of s2#_i9DsB
          { __DEFAULT ->
          (# s2#_i9DsB, ipv5_X7IIC #)
          }
          }
          }
      }
      }

-- RHS size: {terms: 12, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.Sync.withMVar1 [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     MVar a
     -> (a -> IO b) -> State# RealWorld -> (# State# RealWorld, b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_s9ETO)
                 (@ b_s9ETP)
                 (w_s9ETQ [Occ=Once!] :: MVar a_s9ETO)
                 (w1_s9ETR [Occ=Once] :: a_s9ETO -> IO b_s9ETP)
                 (w2_s9ETS [Occ=Once] :: State# RealWorld) ->
                 case w_s9ETQ of { MVar ww1_s9ETV [Occ=Once] ->
                 GHC.Conc.Sync.$wwithMVar
                   @ a_s9ETO @ b_s9ETP ww1_s9ETV w1_s9ETR w2_s9ETS
                 }}]
GHC.Conc.Sync.withMVar1
  = \ (@ a_s9ETO)
      (@ b_s9ETP)
      (w_s9ETQ :: MVar a_s9ETO)
      (w1_s9ETR :: a_s9ETO -> IO b_s9ETP)
      (w2_s9ETS :: State# RealWorld) ->
      case w_s9ETQ of { MVar ww1_s9ETV ->
      GHC.Conc.Sync.$wwithMVar
        @ a_s9ETO @ b_s9ETP ww1_s9ETV w1_s9ETR w2_s9ETS
      }

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
withMVar :: forall a b. MVar a -> (a -> IO b) -> IO b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*C1(C1(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.withMVar1
               `cast` (forall (a :: <*>_N) (b :: <*>_N).
                       <MVar a>_R ->_R <a -> IO b>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R)
                       :: (forall a b.
                           MVar a
                           -> (a -> IO b)
                           -> State# RealWorld
                           -> (# State# RealWorld, b #) :: *)
                          ~R# (forall a b. MVar a -> (a -> IO b) -> IO b :: *))}]
withMVar
  = GHC.Conc.Sync.withMVar1
    `cast` (forall (a :: <*>_N) (b :: <*>_N).
            <MVar a>_R ->_R <a -> IO b>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R)
            :: (forall a b.
                MVar a
                -> (a -> IO b)
                -> State# RealWorld
                -> (# State# RealWorld, b #) :: *)
               ~R# (forall a b. MVar a -> (a -> IO b) -> IO b :: *))

-- RHS size: {terms: 13, types: 28, coercions: 0, joins: 0/0}
GHC.Conc.Sync.reportStackOverflow1
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case myThreadId# s_i7IAv of
                 { (# ipv_s9DmM [Occ=Once], ipv1_s9DmN [Occ=Once] #) ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld #)}_d9Dln
                        ipv1_s9DmN ipv_s9DmM
                 of
                 { (# ds1_d9Dll [Occ=Once] #) ->
                 (# ds1_d9Dll, GHC.Tuple.() #)
                 }
                 }}]
GHC.Conc.Sync.reportStackOverflow1
  = \ (s_i7IAv :: State# RealWorld) ->
      case myThreadId# s_i7IAv of { (# ipv_s9DmM, ipv1_s9DmN #) ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld #)}_d9Dln
             ipv1_s9DmN ipv_s9DmM
      of
      { (# ds1_d9Dll #) ->
      (# ds1_d9Dll, GHC.Tuple.() #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
reportStackOverflow :: IO ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.reportStackOverflow1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
reportStackOverflow
  = GHC.Conc.Sync.reportStackOverflow1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))

Rec {
-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
GHC.Conc.Sync.forkIO2
  :: SomeException -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<L,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (e1_i8SfX [Occ=Once, OS=OneShot] :: SomeException)
                 (eta_B1 [Occ=Once, OS=OneShot] :: State# RealWorld) ->
                 GHC.Conc.Sync.childHandler1 e1_i8SfX eta_B1}]
GHC.Conc.Sync.forkIO2
  = \ (e1_i8SfX [OS=OneShot] :: SomeException)
      (eta_B1 [OS=OneShot] :: State# RealWorld) ->
      GHC.Conc.Sync.childHandler1 e1_i8SfX eta_B1

-- RHS size: {terms: 118, types: 180, coercions: 66, joins: 1/1}
GHC.Conc.Sync.childHandler1 [Occ=LoopBreaker]
  :: SomeException -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []]
GHC.Conc.Sync.childHandler1
  = \ (err_a9CBb :: SomeException) (eta_i8SfW :: State# RealWorld) ->
      catch#
        @ ()
        @ SomeException
        (case err_a9CBb of wild_i9DsZ
         { SomeException @ e1_i9Dt1 $dException1_i9Dt2 e2_i9Dt3 ->
         case Data.Typeable.Internal.sameTypeRep
                @ *
                @ *
                @ e1_i9Dt1
                @ BlockedIndefinitelyOnMVar
                ((GHC.Exception.$p1Exception @ e1_i9Dt1 $dException1_i9Dt2)
                 `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_i9Dt1>_N
                         :: (Typeable e1_i9Dt1 :: Constraint)
                            ~R# (Data.Typeable.Internal.TypeRep e1_i9Dt1 :: *)))
                GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3
         of {
           False ->
             case Data.Typeable.Internal.sameTypeRep
                    @ *
                    @ *
                    @ e1_i9Dt1
                    @ BlockedIndefinitelyOnSTM
                    ((GHC.Exception.$p1Exception @ e1_i9Dt1 $dException1_i9Dt2)
                     `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_i9Dt1>_N
                             :: (Typeable e1_i9Dt1 :: Constraint)
                                ~R# (Data.Typeable.Internal.TypeRep e1_i9Dt1 :: *)))
                    GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3
             of {
               False ->
                 join {
                   fail_s9DHm [Dmd=<L,1*C1(C1(U))>]
                     :: Void# -> State# RealWorld -> (# State# RealWorld, () #)
                   [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []]
                   fail_s9DHm _ [Occ=Dead, OS=OneShot]
                     = case Data.Typeable.Internal.sameTypeRep
                              @ *
                              @ *
                              @ e1_i9Dt1
                              @ SomeAsyncException
                              ((GHC.Exception.$p1Exception @ e1_i9Dt1 $dException1_i9Dt2)
                               `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_i9Dt1>_N
                                       :: (Typeable e1_i9Dt1 :: Constraint)
                                          ~R# (Data.Typeable.Internal.TypeRep e1_i9Dt1 :: *)))
                              GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                       of {
                         False ->
                           \ (s_i7IAv [OS=OneShot] :: State# RealWorld) ->
                             case uncaughtExceptionHandler
                                  `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
                                          :: (IORef (SomeException -> IO ()) :: *)
                                             ~R# (GHC.STRef.STRef
                                                    RealWorld (SomeException -> IO ()) :: *))
                             of
                             { GHC.STRef.STRef var#_i7IB3 ->
                             case readMutVar#
                                    @ RealWorld @ (SomeException -> IO ()) var#_i7IB3 s_i7IAv
                             of
                             { (# ipv_i7IAy, ipv1_i7IAz #) ->
                             ((ipv1_i7IAz wild_i9DsZ)
                              `cast` (GHC.Types.N:IO[0] <()>_R
                                      :: (IO () :: *)
                                         ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                               ipv_i7IAy
                             }
                             };
                         True ->
                           case e2_i9Dt3
                                `cast` (UnsafeCo representational e1_i9Dt1 SomeAsyncException
                                        :: (e1_i9Dt1 :: *) ~R# (SomeAsyncException :: *))
                           of
                           { SomeAsyncException @ e_i9DtG $dException_i9DtH a_i9DtI ->
                           case Data.Typeable.Internal.sameTypeRep
                                  @ *
                                  @ *
                                  @ e_i9DtG
                                  @ AsyncException
                                  ((GHC.Exception.$p1Exception @ e_i9DtG $dException_i9DtH)
                                   `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e_i9DtG>_N
                                           :: (Typeable e_i9DtG :: Constraint)
                                              ~R# (Data.Typeable.Internal.TypeRep e_i9DtG :: *)))
                                  GHC.IO.Exception.$fExceptionAsyncException9
                           of {
                             False ->
                               \ (s_i7IAv [OS=OneShot] :: State# RealWorld) ->
                                 case uncaughtExceptionHandler
                                      `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
                                              :: (IORef (SomeException -> IO ()) :: *)
                                                 ~R# (GHC.STRef.STRef
                                                        RealWorld (SomeException -> IO ()) :: *))
                                 of
                                 { GHC.STRef.STRef var#_i7IB3 ->
                                 case readMutVar#
                                        @ RealWorld @ (SomeException -> IO ()) var#_i7IB3 s_i7IAv
                                 of
                                 { (# ipv_i7IAy, ipv1_i7IAz #) ->
                                 ((ipv1_i7IAz wild_i9DsZ)
                                  `cast` (GHC.Types.N:IO[0] <()>_R
                                          :: (IO () :: *)
                                             ~R# (State# RealWorld
                                                  -> (# State# RealWorld, () #) :: *)))
                                   ipv_i7IAy
                                 }
                                 };
                             True ->
                               case a_i9DtI
                                    `cast` (UnsafeCo representational e_i9DtG AsyncException
                                            :: (e_i9DtG :: *) ~R# (AsyncException :: *))
                               of {
                                 __DEFAULT ->
                                   \ (s_i7IAv [OS=OneShot] :: State# RealWorld) ->
                                     case uncaughtExceptionHandler
                                          `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
                                                  :: (IORef (SomeException -> IO ()) :: *)
                                                     ~R# (GHC.STRef.STRef
                                                            RealWorld
                                                            (SomeException -> IO ()) :: *))
                                     of
                                     { GHC.STRef.STRef var#_i7IB3 ->
                                     case readMutVar#
                                            @ RealWorld
                                            @ (SomeException -> IO ())
                                            var#_i7IB3
                                            s_i7IAv
                                     of
                                     { (# ipv_i7IAy, ipv1_i7IAz #) ->
                                     ((ipv1_i7IAz wild_i9DsZ)
                                      `cast` (GHC.Types.N:IO[0] <()>_R
                                              :: (IO () :: *)
                                                 ~R# (State# RealWorld
                                                      -> (# State# RealWorld, () #) :: *)))
                                       ipv_i7IAy
                                     }
                                     };
                                 StackOverflow -> GHC.Conc.Sync.reportStackOverflow1
                               }
                           }
                           }
                       } } in
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e1_i9Dt1
                        @ SomeAsyncException
                        ((GHC.Exception.$p1Exception @ e1_i9Dt1 $dException1_i9Dt2)
                         `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_i9Dt1>_N
                                 :: (Typeable e1_i9Dt1 :: Constraint)
                                    ~R# (Data.Typeable.Internal.TypeRep e1_i9Dt1 :: *)))
                        GHC.IO.Exception.$fExceptionAllocationLimitExceeded6
                 of {
                   False -> jump fail_s9DHm void#;
                   True ->
                     case e2_i9Dt3
                          `cast` (UnsafeCo representational e1_i9Dt1 SomeAsyncException
                                  :: (e1_i9Dt1 :: *) ~R# (SomeAsyncException :: *))
                     of
                     { SomeAsyncException @ e_i9DtG $dException_i9DtH a_i9DtI ->
                     case Data.Typeable.Internal.sameTypeRep
                            @ *
                            @ *
                            @ e_i9DtG
                            @ AsyncException
                            ((GHC.Exception.$p1Exception @ e_i9DtG $dException_i9DtH)
                             `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e_i9DtG>_N
                                     :: (Typeable e_i9DtG :: Constraint)
                                        ~R# (Data.Typeable.Internal.TypeRep e_i9DtG :: *)))
                            GHC.IO.Exception.$fExceptionAsyncException9
                     of {
                       False -> jump fail_s9DHm void#;
                       True ->
                         case a_i9DtI
                              `cast` (UnsafeCo representational e_i9DtG AsyncException
                                      :: (e_i9DtG :: *) ~R# (AsyncException :: *))
                         of {
                           __DEFAULT -> jump fail_s9DHm void#;
                           ThreadKilled -> GHC.Conc.Sync.always2
                         }
                     }
                     }
                 };
               True ->
                 case e2_i9Dt3
                      `cast` (UnsafeCo representational e1_i9Dt1 BlockedIndefinitelyOnSTM
                              :: (e1_i9Dt1 :: *) ~R# (BlockedIndefinitelyOnSTM :: *))
                 of
                 { BlockedIndefinitelyOnSTM ->
                 GHC.Conc.Sync.always2
                 }
             };
           True ->
             case e2_i9Dt3
                  `cast` (UnsafeCo representational e1_i9Dt1 BlockedIndefinitelyOnMVar
                          :: (e1_i9Dt1 :: *) ~R# (BlockedIndefinitelyOnMVar :: *))
             of
             { BlockedIndefinitelyOnMVar ->
             GHC.Conc.Sync.always2
             }
         }
         })
        GHC.Conc.Sync.forkIO2
        eta_i8SfW
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
childHandler :: SomeException -> IO ()
[GblId,
 Arity=2,
 Str=<L,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.childHandler1
               `cast` (<SomeException>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (SomeException
                           -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (SomeException -> IO () :: *))}]
childHandler
  = GHC.Conc.Sync.childHandler1
    `cast` (<SomeException>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (SomeException
                -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (SomeException -> IO () :: *))

-- RHS size: {terms: 20, types: 31, coercions: 5, joins: 0/0}
GHC.Conc.Sync.forkOn1
  :: Int
     -> IO () -> State# RealWorld -> (# State# RealWorld, ThreadId #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9Diz [Occ=Once!] :: Int)
                 (action_a9CAZ [Occ=Once] :: IO ())
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ds_d9Diz of { I# cpu_a9CAY [Occ=Once] ->
                 case forkOn#
                        @ (IO ())
                        cpu_a9CAY
                        ((\ (eta1_i8SfW [Occ=Once] :: State# RealWorld) ->
                            catch#
                              @ ()
                              @ SomeException
                              (action_a9CAZ
                               `cast` (GHC.Types.N:IO[0] <()>_R
                                       :: (IO () :: *)
                                          ~R# (State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)))
                              GHC.Conc.Sync.forkIO2
                              eta1_i8SfW)
                         `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                 :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                    ~R# (IO () :: *)))
                        eta_B1
                 of
                 { (# ipv_s9Du2 [Occ=Once], ipv1_s9Du3 [Occ=Once] #) ->
                 (# ipv_s9Du2, GHC.Conc.Sync.ThreadId ipv1_s9Du3 #)
                 }
                 }}]
GHC.Conc.Sync.forkOn1
  = \ (ds_d9Diz :: Int)
      (action_a9CAZ :: IO ())
      (eta_B1 :: State# RealWorld) ->
      case ds_d9Diz of { I# cpu_a9CAY ->
      case forkOn#
             @ (IO ())
             cpu_a9CAY
             ((\ (eta1_i8SfW :: State# RealWorld) ->
                 catch#
                   @ ()
                   @ SomeException
                   (action_a9CAZ
                    `cast` (GHC.Types.N:IO[0] <()>_R
                            :: (IO () :: *)
                               ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                   GHC.Conc.Sync.forkIO2
                   eta1_i8SfW)
              `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                         ~R# (IO () :: *)))
             eta_B1
      of
      { (# ipv_s9Du2, ipv1_s9Du3 #) ->
      (# ipv_s9Du2, GHC.Conc.Sync.ThreadId ipv1_s9Du3 #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
forkOn :: Int -> IO () -> IO ThreadId
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.forkOn1
               `cast` (<Int>_R
                       ->_R <IO ()>_R
                       ->_R Sym (GHC.Types.N:IO[0] <ThreadId>_R)
                       :: (Int
                           -> IO ()
                           -> State# RealWorld
                           -> (# State# RealWorld, ThreadId #) :: *)
                          ~R# (Int -> IO () -> IO ThreadId :: *))}]
forkOn
  = GHC.Conc.Sync.forkOn1
    `cast` (<Int>_R
            ->_R <IO ()>_R
            ->_R Sym (GHC.Types.N:IO[0] <ThreadId>_R)
            :: (Int
                -> IO ()
                -> State# RealWorld
                -> (# State# RealWorld, ThreadId #) :: *)
               ~R# (Int -> IO () -> IO ThreadId :: *))

-- RHS size: {terms: 21, types: 37, coercions: 15, joins: 0/0}
GHC.Conc.Sync.forkOnWithUnmask1
  :: Int
     -> ((forall a. IO a -> IO a) -> IO ())
     -> State# RealWorld
     -> (# State# RealWorld, ThreadId #)
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(C1(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (cpu_a9CB4 [Occ=Once!] :: Int)
                 (io_a9CB5 [Occ=Once!] :: (forall a. IO a -> IO a) -> IO ())
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case cpu_a9CB4 of { I# cpu1_a9CAY [Occ=Once] ->
                 case forkOn#
                        @ (IO ())
                        cpu1_a9CAY
                        ((\ (eta1_i8SfW [Occ=Once] :: State# RealWorld) ->
                            catch#
                              @ ()
                              @ SomeException
                              ((io_a9CB5
                                  (unmaskAsyncExceptions#
                                   `cast` (forall (a :: <*>_N).
                                           Sym (GHC.Types.N:IO[0] <a>_R)
                                           ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                                           :: (forall a.
                                               (State# RealWorld -> (# State# RealWorld, a #))
                                               -> State# RealWorld
                                               -> (# State# RealWorld, a #) :: *)
                                              ~R# (forall a. IO a -> IO a :: *))))
                               `cast` (GHC.Types.N:IO[0] <()>_R
                                       :: (IO () :: *)
                                          ~R# (State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)))
                              GHC.Conc.Sync.forkIO2
                              eta1_i8SfW)
                         `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                 :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                    ~R# (IO () :: *)))
                        eta_B1
                 of
                 { (# ipv_s9Du2 [Occ=Once], ipv1_s9Du3 [Occ=Once] #) ->
                 (# ipv_s9Du2, GHC.Conc.Sync.ThreadId ipv1_s9Du3 #)
                 }
                 }}]
GHC.Conc.Sync.forkOnWithUnmask1
  = \ (cpu_a9CB4 :: Int)
      (io_a9CB5 :: (forall a. IO a -> IO a) -> IO ())
      (eta_B1 :: State# RealWorld) ->
      case cpu_a9CB4 of { I# cpu1_a9CAY ->
      case forkOn#
             @ (IO ())
             cpu1_a9CAY
             ((\ (eta1_i8SfW :: State# RealWorld) ->
                 catch#
                   @ ()
                   @ SomeException
                   ((io_a9CB5
                       (unmaskAsyncExceptions#
                        `cast` (forall (a :: <*>_N).
                                Sym (GHC.Types.N:IO[0] <a>_R) ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                                :: (forall a.
                                    (State# RealWorld -> (# State# RealWorld, a #))
                                    -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                                   ~R# (forall a. IO a -> IO a :: *))))
                    `cast` (GHC.Types.N:IO[0] <()>_R
                            :: (IO () :: *)
                               ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                   GHC.Conc.Sync.forkIO2
                   eta1_i8SfW)
              `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                         ~R# (IO () :: *)))
             eta_B1
      of
      { (# ipv_s9Du2, ipv1_s9Du3 #) ->
      (# ipv_s9Du2, GHC.Conc.Sync.ThreadId ipv1_s9Du3 #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
forkOnWithUnmask
  :: Int -> ((forall a. IO a -> IO a) -> IO ()) -> IO ThreadId
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><L,C(C1(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.forkOnWithUnmask1
               `cast` (<Int>_R
                       ->_R <(forall a. IO a -> IO a) -> IO ()>_R
                       ->_R Sym (GHC.Types.N:IO[0] <ThreadId>_R)
                       :: (Int
                           -> ((forall a. IO a -> IO a) -> IO ())
                           -> State# RealWorld
                           -> (# State# RealWorld, ThreadId #) :: *)
                          ~R# (Int
                               -> ((forall a. IO a -> IO a) -> IO ()) -> IO ThreadId :: *))}]
forkOnWithUnmask
  = GHC.Conc.Sync.forkOnWithUnmask1
    `cast` (<Int>_R
            ->_R <(forall a. IO a -> IO a) -> IO ()>_R
            ->_R Sym (GHC.Types.N:IO[0] <ThreadId>_R)
            :: (Int
                -> ((forall a. IO a -> IO a) -> IO ())
                -> State# RealWorld
                -> (# State# RealWorld, ThreadId #) :: *)
               ~R# (Int
                    -> ((forall a. IO a -> IO a) -> IO ()) -> IO ThreadId :: *))

-- RHS size: {terms: 15, types: 28, coercions: 5, joins: 0/0}
GHC.Conc.Sync.forkIO1
  :: IO () -> State# RealWorld -> (# State# RealWorld, ThreadId #)
[GblId,
 Arity=2,
 Str=<L,C(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (action_a9CAS [Occ=Once] :: IO ())
                 (s_a9CAU [Occ=Once] :: State# RealWorld) ->
                 case fork#
                        @ (IO ())
                        ((\ (eta_i8SfW [Occ=Once] :: State# RealWorld) ->
                            catch#
                              @ ()
                              @ SomeException
                              (action_a9CAS
                               `cast` (GHC.Types.N:IO[0] <()>_R
                                       :: (IO () :: *)
                                          ~R# (State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)))
                              GHC.Conc.Sync.forkIO2
                              eta_i8SfW)
                         `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                 :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                    ~R# (IO () :: *)))
                        s_a9CAU
                 of
                 { (# ipv_s9Du9 [Occ=Once], ipv1_s9Dua [Occ=Once] #) ->
                 (# ipv_s9Du9, GHC.Conc.Sync.ThreadId ipv1_s9Dua #)
                 }}]
GHC.Conc.Sync.forkIO1
  = \ (action_a9CAS :: IO ()) (s_a9CAU :: State# RealWorld) ->
      case fork#
             @ (IO ())
             ((\ (eta_i8SfW :: State# RealWorld) ->
                 catch#
                   @ ()
                   @ SomeException
                   (action_a9CAS
                    `cast` (GHC.Types.N:IO[0] <()>_R
                            :: (IO () :: *)
                               ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                   GHC.Conc.Sync.forkIO2
                   eta_i8SfW)
              `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                         ~R# (IO () :: *)))
             s_a9CAU
      of
      { (# ipv_s9Du9, ipv1_s9Dua #) ->
      (# ipv_s9Du9, GHC.Conc.Sync.ThreadId ipv1_s9Dua #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 6, joins: 0/0}
forkIO :: IO () -> IO ThreadId
[GblId,
 Arity=2,
 Str=<L,C(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.forkIO1
               `cast` (<IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <ThreadId>_R)
                       :: (IO ()
                           -> State# RealWorld -> (# State# RealWorld, ThreadId #) :: *)
                          ~R# (IO () -> IO ThreadId :: *))}]
forkIO
  = GHC.Conc.Sync.forkIO1
    `cast` (<IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <ThreadId>_R)
            :: (IO ()
                -> State# RealWorld -> (# State# RealWorld, ThreadId #) :: *)
               ~R# (IO () -> IO ThreadId :: *))

-- RHS size: {terms: 16, types: 34, coercions: 15, joins: 0/0}
GHC.Conc.Sync.forkIOWithUnmask1
  :: ((forall a. IO a -> IO a) -> IO ())
     -> State# RealWorld -> (# State# RealWorld, ThreadId #)
[GblId,
 Arity=2,
 Str=<L,C(C1(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (io_a9CAX [Occ=Once!] :: (forall a. IO a -> IO a) -> IO ())
                 (s_a9CAU [Occ=Once] :: State# RealWorld) ->
                 case fork#
                        @ (IO ())
                        ((\ (eta_i8SfW [Occ=Once] :: State# RealWorld) ->
                            catch#
                              @ ()
                              @ SomeException
                              ((io_a9CAX
                                  (unmaskAsyncExceptions#
                                   `cast` (forall (a :: <*>_N).
                                           Sym (GHC.Types.N:IO[0] <a>_R)
                                           ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                                           :: (forall a.
                                               (State# RealWorld -> (# State# RealWorld, a #))
                                               -> State# RealWorld
                                               -> (# State# RealWorld, a #) :: *)
                                              ~R# (forall a. IO a -> IO a :: *))))
                               `cast` (GHC.Types.N:IO[0] <()>_R
                                       :: (IO () :: *)
                                          ~R# (State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)))
                              GHC.Conc.Sync.forkIO2
                              eta_i8SfW)
                         `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                 :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                    ~R# (IO () :: *)))
                        s_a9CAU
                 of
                 { (# ipv_s9Du9 [Occ=Once], ipv1_s9Dua [Occ=Once] #) ->
                 (# ipv_s9Du9, GHC.Conc.Sync.ThreadId ipv1_s9Dua #)
                 }}]
GHC.Conc.Sync.forkIOWithUnmask1
  = \ (io_a9CAX :: (forall a. IO a -> IO a) -> IO ())
      (s_a9CAU :: State# RealWorld) ->
      case fork#
             @ (IO ())
             ((\ (eta_i8SfW :: State# RealWorld) ->
                 catch#
                   @ ()
                   @ SomeException
                   ((io_a9CAX
                       (unmaskAsyncExceptions#
                        `cast` (forall (a :: <*>_N).
                                Sym (GHC.Types.N:IO[0] <a>_R) ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                                :: (forall a.
                                    (State# RealWorld -> (# State# RealWorld, a #))
                                    -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                                   ~R# (forall a. IO a -> IO a :: *))))
                    `cast` (GHC.Types.N:IO[0] <()>_R
                            :: (IO () :: *)
                               ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                   GHC.Conc.Sync.forkIO2
                   eta_i8SfW)
              `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                         ~R# (IO () :: *)))
             s_a9CAU
      of
      { (# ipv_s9Du9, ipv1_s9Dua #) ->
      (# ipv_s9Du9, GHC.Conc.Sync.ThreadId ipv1_s9Dua #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
forkIOWithUnmask
  :: ((forall a. IO a -> IO a) -> IO ()) -> IO ThreadId
[GblId,
 Arity=2,
 Str=<L,C(C1(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.forkIOWithUnmask1
               `cast` (<(forall a. IO a -> IO a) -> IO ()>_R
                       ->_R Sym (GHC.Types.N:IO[0] <ThreadId>_R)
                       :: (((forall a. IO a -> IO a) -> IO ())
                           -> State# RealWorld -> (# State# RealWorld, ThreadId #) :: *)
                          ~R# (((forall a. IO a -> IO a) -> IO ()) -> IO ThreadId :: *))}]
forkIOWithUnmask
  = GHC.Conc.Sync.forkIOWithUnmask1
    `cast` (<(forall a. IO a -> IO a) -> IO ()>_R
            ->_R Sym (GHC.Types.N:IO[0] <ThreadId>_R)
            :: (((forall a. IO a -> IO a) -> IO ())
                -> State# RealWorld -> (# State# RealWorld, ThreadId #) :: *)
               ~R# (((forall a. IO a -> IO a) -> IO ()) -> IO ThreadId :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl11_r9Fvm :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl11_r9Fvm = "setNumCapabilities: Capability count ("#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl12_r9Fvn :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl12_r9Fvn = ") must be positive"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl13_r9Fvo :: [Char]
[GblId]
lvl13_r9Fvo = unpackCString# lvl12_r9Fvn

-- RHS size: {terms: 17, types: 16, coercions: 0, joins: 0/0}
GHC.Conc.Sync.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: Int# -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []]
GHC.Conc.Sync.$wlvl
  = \ (ww_s9EU5 :: Int#) (w_s9EU2 :: State# RealWorld) ->
      GHC.IO.failIO1
        @ ()
        (unpackAppendCString#
           lvl11_r9Fvm
           (case GHC.Show.$wshowSignedInt 0# ww_s9EU5 (GHC.Types.[] @ Char) of
            { (# ww5_i7NVe, ww6_i7NVf #) ->
            ++ @ Char (GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf) lvl13_r9Fvo
            }))
        w_s9EU2

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
GHC.Conc.Sync.setNumCapabilities2 [InlPrag=NOUSERINLINE[0]]
  :: Int -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<B,1*U(U)><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9EU1 [Occ=Once!] :: Int)
                 (w1_s9EU2 [Occ=Once] :: State# RealWorld) ->
                 case w_s9EU1 of { I# ww1_s9EU5 [Occ=Once] ->
                 GHC.Conc.Sync.$wlvl ww1_s9EU5 w1_s9EU2
                 }}]
GHC.Conc.Sync.setNumCapabilities2
  = \ (w_s9EU1 :: Int) (w1_s9EU2 :: State# RealWorld) ->
      case w_s9EU1 of { I# ww1_s9EU5 ->
      GHC.Conc.Sync.$wlvl ww1_s9EU5 w1_s9EU2
      }

-- RHS size: {terms: 24, types: 21, coercions: 0, joins: 0/0}
GHC.Conc.Sync.setNumCapabilities1
  :: Int -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (i_a9CB7 [Occ=Once!] :: Int)
                 (eta_B1 [Occ=Once*] :: State# RealWorld) ->
                 case i_a9CB7 of wild_at1c { I# x_at1e ->
                 case <=# x_at1e 0# of {
                   __DEFAULT ->
                     case {__pkg_ccall_GC base-4.11.0.0 Word#
                              -> State# RealWorld -> (# State# RealWorld #)}_d9Dlz
                            (narrow32Word# (int2Word# x_at1e)) eta_B1
                     of
                     { (# ds_d9Dlx [Occ=Once] #) ->
                     (# ds_d9Dlx, GHC.Tuple.() #)
                     };
                   1# -> GHC.Conc.Sync.setNumCapabilities2 wild_at1c eta_B1
                 }
                 }}]
GHC.Conc.Sync.setNumCapabilities1
  = \ (i_a9CB7 :: Int) (eta_B1 :: State# RealWorld) ->
      case i_a9CB7 of { I# x_at1e ->
      case <=# x_at1e 0# of {
        __DEFAULT ->
          case {__pkg_ccall_GC base-4.11.0.0 Word#
                              -> State# RealWorld -> (# State# RealWorld #)}_d9Dlz
                 (narrow32Word# (int2Word# x_at1e)) eta_B1
          of
          { (# ds_d9Dlx #) ->
          (# ds_d9Dlx, GHC.Tuple.() #)
          };
        1# -> GHC.Conc.Sync.$wlvl x_at1e eta_B1
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
setNumCapabilities :: Int -> IO ()
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.setNumCapabilities1
               `cast` (<Int>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Int -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Int -> IO () :: *))}]
setNumCapabilities
  = GHC.Conc.Sync.setNumCapabilities1
    `cast` (<Int>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Int -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Int -> IO () :: *))

-- RHS size: {terms: 11, types: 21, coercions: 0, joins: 0/0}
GHC.Conc.Sync.getNumCapabilities1
  :: State# RealWorld -> (# State# RealWorld, Int #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_X7IIB [Occ=Once] :: State# RealWorld) ->
                 case readInt32OffAddr#
                        @ RealWorld (__label "enabled_capabilities" (data)) 0# s_X7IIB
                 of
                 { (# ipv_i9h52 [Occ=Once], ipv1_i9h53 [Occ=Once] #) ->
                 (# ipv_i9h52, GHC.Types.I# ipv1_i9h53 #)
                 }}]
GHC.Conc.Sync.getNumCapabilities1
  = \ (s_X7IIB :: State# RealWorld) ->
      case readInt32OffAddr#
             @ RealWorld (__label "enabled_capabilities" (data)) 0# s_X7IIB
      of
      { (# ipv_i9h52, ipv1_i9h53 #) ->
      (# ipv_i9h52, GHC.Types.I# ipv1_i9h53 #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getNumCapabilities :: IO Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.getNumCapabilities1
               `cast` (Sym (GHC.Types.N:IO[0] <Int>_R)
                       :: (State# RealWorld -> (# State# RealWorld, Int #) :: *)
                          ~R# (IO Int :: *))}]
getNumCapabilities
  = GHC.Conc.Sync.getNumCapabilities1
    `cast` (Sym (GHC.Types.N:IO[0] <Int>_R)
            :: (State# RealWorld -> (# State# RealWorld, Int #) :: *)
               ~R# (IO Int :: *))

-- RHS size: {terms: 15, types: 24, coercions: 0, joins: 0/0}
GHC.Conc.Sync.numCapabilities1
  :: State# RealWorld -> (# State# RealWorld, Int #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 23 30}]
GHC.Conc.Sync.numCapabilities1
  = \ (s_i91ZD [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_i91ZD of s'_i91ZE { __DEFAULT ->
      case readInt32OffAddr#
             @ RealWorld (__label "enabled_capabilities" (data)) 0# s'_i91ZE
      of
      { (# ipv_i9h52, ipv1_i9h53 #) ->
      (# ipv_i9h52, GHC.Types.I# ipv1_i9h53 #)
      }
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
numCapabilities :: Int
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
numCapabilities
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, Int #)
           GHC.Conc.Sync.numCapabilities1
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }

-- RHS size: {terms: 13, types: 28, coercions: 0, joins: 0/0}
GHC.Conc.Sync.disableAllocationLimit1
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_X7IIF [Occ=Once] :: State# RealWorld) ->
                 case myThreadId# s_X7IIF of
                 { (# ipv_s9DmM [Occ=Once], ipv1_s9DmN [Occ=Once] #) ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld #)}_d9DlE
                        ipv1_s9DmN ipv_s9DmM
                 of
                 { (# ds1_d9DlC [Occ=Once] #) ->
                 (# ds1_d9DlC, GHC.Tuple.() #)
                 }
                 }}]
GHC.Conc.Sync.disableAllocationLimit1
  = \ (s_X7IIF :: State# RealWorld) ->
      case myThreadId# s_X7IIF of { (# ipv_s9DmM, ipv1_s9DmN #) ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld #)}_d9DlE
             ipv1_s9DmN ipv_s9DmM
      of
      { (# ds1_d9DlC #) ->
      (# ds1_d9DlC, GHC.Tuple.() #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
disableAllocationLimit :: IO ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.disableAllocationLimit1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
disableAllocationLimit
  = GHC.Conc.Sync.disableAllocationLimit1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))

-- RHS size: {terms: 13, types: 28, coercions: 0, joins: 0/0}
GHC.Conc.Sync.enableAllocationLimit1
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_X7III [Occ=Once] :: State# RealWorld) ->
                 case myThreadId# s_X7III of
                 { (# ipv_s9DmM [Occ=Once], ipv1_s9DmN [Occ=Once] #) ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld #)}_d9DlJ
                        ipv1_s9DmN ipv_s9DmM
                 of
                 { (# ds1_d9DlH [Occ=Once] #) ->
                 (# ds1_d9DlH, GHC.Tuple.() #)
                 }
                 }}]
GHC.Conc.Sync.enableAllocationLimit1
  = \ (s_X7III :: State# RealWorld) ->
      case myThreadId# s_X7III of { (# ipv_s9DmM, ipv1_s9DmN #) ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld #)}_d9DlJ
             ipv1_s9DmN ipv_s9DmM
      of
      { (# ds1_d9DlH #) ->
      (# ds1_d9DlH, GHC.Tuple.() #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
enableAllocationLimit :: IO ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.enableAllocationLimit1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
enableAllocationLimit
  = GHC.Conc.Sync.enableAllocationLimit1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))

-- RHS size: {terms: 14, types: 31, coercions: 0, joins: 0/0}
GHC.Conc.Sync.getAllocationCounter1
  :: State# RealWorld -> (# State# RealWorld, Int64 #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_X7IIL [Occ=Once] :: State# RealWorld) ->
                 case myThreadId# s_X7IIL of
                 { (# ipv_s9DmM [Occ=Once], ipv1_s9DmN [Occ=Once] #) ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9DlP
                        ipv1_s9DmN ipv_s9DmM
                 of
                 { (# ds1_d9DlN [Occ=Once], ds2_d9DlM [Occ=Once] #) ->
                 (# ds1_d9DlN, GHC.Int.I64# ds2_d9DlM #)
                 }
                 }}]
GHC.Conc.Sync.getAllocationCounter1
  = \ (s_X7IIL :: State# RealWorld) ->
      case myThreadId# s_X7IIL of { (# ipv_s9DmM, ipv1_s9DmN #) ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9DlP
             ipv1_s9DmN ipv_s9DmM
      of
      { (# ds1_d9DlN, ds2_d9DlM #) ->
      (# ds1_d9DlN, GHC.Int.I64# ds2_d9DlM #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
getAllocationCounter :: IO Int64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.getAllocationCounter1
               `cast` (Sym (GHC.Types.N:IO[0] <Int64>_R)
                       :: (State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                          ~R# (IO Int64 :: *))}]
getAllocationCounter
  = GHC.Conc.Sync.getAllocationCounter1
    `cast` (Sym (GHC.Types.N:IO[0] <Int64>_R)
            :: (State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
               ~R# (IO Int64 :: *))

-- RHS size: {terms: 18, types: 31, coercions: 0, joins: 0/0}
GHC.Conc.Sync.setAllocationCounter1
  :: Int64 -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (i_a9CAN [Occ=Once!] :: Int64)
                 (s_X7IIP [Occ=Once] :: State# RealWorld) ->
                 case myThreadId# s_X7IIP of
                 { (# ipv_s9DmM [Occ=Once], ipv1_s9DmN [Occ=Once] #) ->
                 case i_a9CAN of { GHC.Int.I64# ds2_d9DlU [Occ=Once] ->
                 case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> Int# -> State# RealWorld -> (# State# RealWorld #)}_d9DlX
                        ipv1_s9DmN ds2_d9DlU ipv_s9DmM
                 of
                 { (# ds3_d9DlV [Occ=Once] #) ->
                 (# ds3_d9DlV, GHC.Tuple.() #)
                 }
                 }
                 }}]
GHC.Conc.Sync.setAllocationCounter1
  = \ (i_a9CAN :: Int64) (s_X7IIP :: State# RealWorld) ->
      case myThreadId# s_X7IIP of { (# ipv_s9DmM, ipv1_s9DmN #) ->
      case i_a9CAN of { GHC.Int.I64# ds2_d9DlU ->
      case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> Int# -> State# RealWorld -> (# State# RealWorld #)}_d9DlX
             ipv1_s9DmN ds2_d9DlU ipv_s9DmM
      of
      { (# ds3_d9DlV #) ->
      (# ds3_d9DlV, GHC.Tuple.() #)
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
setAllocationCounter :: Int64 -> IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.Sync.setAllocationCounter1
               `cast` (<Int64>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Int64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Int64 -> IO () :: *))}]
setAllocationCounter
  = GHC.Conc.Sync.setAllocationCounter1
    `cast` (<Int64>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Int64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Int64 -> IO () :: *))


