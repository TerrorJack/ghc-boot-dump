
==================== Tidy Core ====================
2018-03-16 16:05:53.812447783 UTC

Result size of Tidy Core
  = {terms: 304, types: 498, coercions: 86, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
ensureIOManagerIsRunning :: IO ()
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.Thread.ensureIOManagerIsRunning1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
ensureIOManagerIsRunning
  = GHC.Event.Thread.ensureIOManagerIsRunning1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
ioManagerCapabilitiesChanged :: IO ()
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.Thread.ioManagerCapabilitiesChanged1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
ioManagerCapabilitiesChanged
  = GHC.Event.Thread.ioManagerCapabilitiesChanged1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.IO.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Conc.IO.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.IO.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.IO.$trModule3 = GHC.Types.TrNameS GHC.Conc.IO.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.IO.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Conc.IO.$trModule2 = "GHC.Conc.IO"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.IO.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Conc.IO.$trModule1 = GHC.Types.TrNameS GHC.Conc.IO.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Conc.IO.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Conc.IO.$trModule
  = GHC.Types.Module GHC.Conc.IO.$trModule3 GHC.Conc.IO.$trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_raTBq :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_raTBq = "registerDelay: requires -threaded"#

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.Conc.IO.registerDelay2 :: IO (TVar Bool)
[GblId, Str=x]
GHC.Conc.IO.registerDelay2
  = errorWithoutStackTrace
      @ 'LiftedRep @ (IO (TVar Bool)) (unpackCString# lvl_raTBq)

-- RHS size: {terms: 15, types: 18, coercions: 0, joins: 0/0}
GHC.Conc.IO.registerDelay1
  :: Int -> State# RealWorld -> (# State# RealWorld, TVar Bool #)
[GblId,
 Arity=2,
 Str=<L,1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (usecs_aaTn0 [Occ=Once] :: Int)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
                        realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_daTrA [Occ=Once!] #) ->
                 case ds1_daTrA of {
                   __DEFAULT -> GHC.Event.Thread.registerDelay1 usecs_aaTn0 eta_B1;
                   0# -> case GHC.Conc.IO.registerDelay2 of { }
                 }
                 }}]
GHC.Conc.IO.registerDelay1
  = \ (usecs_aaTn0 :: Int) (eta_B1 :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
             realWorld#
      of
      { (# ds_daTrB, ds1_daTrA #) ->
      case ds1_daTrA of {
        __DEFAULT -> GHC.Event.Thread.registerDelay1 usecs_aaTn0 eta_B1;
        0# -> case GHC.Conc.IO.registerDelay2 of wild2_00 { }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 6, joins: 0/0}
registerDelay :: Int -> IO (TVar Bool)
[GblId,
 Arity=2,
 Str=<L,1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.IO.registerDelay1
               `cast` (<Int>_R ->_R Sym (GHC.Types.N:IO[0] <TVar Bool>_R)
                       :: (Int
                           -> State# RealWorld -> (# State# RealWorld, TVar Bool #) :: *)
                          ~R# (Int -> IO (TVar Bool) :: *))}]
registerDelay
  = GHC.Conc.IO.registerDelay1
    `cast` (<Int>_R ->_R Sym (GHC.Types.N:IO[0] <TVar Bool>_R)
            :: (Int
                -> State# RealWorld -> (# State# RealWorld, TVar Bool #) :: *)
               ~R# (Int -> IO (TVar Bool) :: *))

-- RHS size: {terms: 24, types: 27, coercions: 0, joins: 0/0}
GHC.Conc.IO.threadDelay1
  :: Int -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<L,1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (time_aaTmW [Occ=Once*] :: Int)
                 (eta_B1 [Occ=Once*] :: State# RealWorld) ->
                 case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
                        realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_daTrA [Occ=Once!] #) ->
                 case ds1_daTrA of {
                   __DEFAULT -> GHC.Event.Thread.threadDelay1 time_aaTmW eta_B1;
                   0# ->
                     case time_aaTmW of { I# time#_aaTmY [Occ=Once] ->
                     case delay# @ RealWorld time#_aaTmY eta_B1 of s'_aaTmZ
                     { __DEFAULT ->
                     (# s'_aaTmZ, GHC.Tuple.() #)
                     }
                     }
                 }
                 }}]
GHC.Conc.IO.threadDelay1
  = \ (time_aaTmW :: Int) (eta_B1 :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
             realWorld#
      of
      { (# ds_daTrB, ds1_daTrA #) ->
      case ds1_daTrA of {
        __DEFAULT -> GHC.Event.Thread.threadDelay1 time_aaTmW eta_B1;
        0# ->
          case time_aaTmW of { I# time#_aaTmY ->
          case delay# @ RealWorld time#_aaTmY eta_B1 of s'_aaTmZ
          { __DEFAULT ->
          (# s'_aaTmZ, GHC.Tuple.() #)
          }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
threadDelay :: Int -> IO ()
[GblId,
 Arity=2,
 Str=<L,1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.IO.threadDelay1
               `cast` (<Int>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Int -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Int -> IO () :: *))}]
threadDelay
  = GHC.Conc.IO.threadDelay1
    `cast` (<Int>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Int -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Int -> IO () :: *))

-- RHS size: {terms: 18, types: 18, coercions: 2, joins: 0/0}
GHC.Conc.IO.closeFdWith1
  :: (Fd -> IO ())
     -> Fd -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Str=<L,C(C1(U(U,U)))><L,U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (close_aaTmU [Occ=Once*] :: Fd -> IO ())
                 (fd_aaTmV [Occ=Once*] :: Fd)
                 (eta_B1 [Occ=Once*] :: State# RealWorld) ->
                 case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
                        realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_daTrA [Occ=Once!] #) ->
                 case ds1_daTrA of {
                   __DEFAULT ->
                     GHC.Event.Thread.closeFdWith1 close_aaTmU fd_aaTmV eta_B1;
                   0# ->
                     ((close_aaTmU fd_aaTmV)
                      `cast` (GHC.Types.N:IO[0] <()>_R
                              :: (IO () :: *)
                                 ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                       eta_B1
                 }
                 }}]
GHC.Conc.IO.closeFdWith1
  = \ (close_aaTmU :: Fd -> IO ())
      (fd_aaTmV :: Fd)
      (eta_B1 :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
             realWorld#
      of
      { (# ds_daTrB, ds1_daTrA #) ->
      case ds1_daTrA of {
        __DEFAULT ->
          GHC.Event.Thread.closeFdWith1 close_aaTmU fd_aaTmV eta_B1;
        0# ->
          ((close_aaTmU fd_aaTmV)
           `cast` (GHC.Types.N:IO[0] <()>_R
                   :: (IO () :: *)
                      ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
            eta_B1
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
closeFdWith :: (Fd -> IO ()) -> Fd -> IO ()
[GblId,
 Arity=3,
 Str=<L,C(C1(U(U,U)))><L,U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.IO.closeFdWith1
               `cast` (<Fd -> IO ()>_R
                       ->_R <Fd>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: ((Fd -> IO ())
                           -> Fd -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# ((Fd -> IO ()) -> Fd -> IO () :: *))}]
closeFdWith
  = GHC.Conc.IO.closeFdWith1
    `cast` (<Fd -> IO ()>_R
            ->_R <Fd>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: ((Fd -> IO ())
                -> Fd -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# ((Fd -> IO ()) -> Fd -> IO () :: *))

-- RHS size: {terms: 25, types: 27, coercions: 3, joins: 0/0}
GHC.Conc.IO.threadWaitWrite1
  :: Fd -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<L,U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (fd_aaTmE [Occ=Once*] :: Fd)
                 (eta_B1 [Occ=Once*] :: State# RealWorld) ->
                 case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
                        realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_daTrA [Occ=Once!] #) ->
                 case ds1_daTrA of {
                   __DEFAULT ->
                     GHC.Event.Thread.threadWaitRead1
                       GHC.Event.Internal.evtWrite fd_aaTmE eta_B1;
                   0# ->
                     case fd_aaTmE
                          `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                                  :: (Fd :: *) ~R# (Int32 :: *))
                     of
                     { GHC.Int.I32# x#_i9h2V [Occ=Once] ->
                     case waitWrite# @ RealWorld x#_i9h2V eta_B1 of s'_aaTmH
                     { __DEFAULT ->
                     (# s'_aaTmH, GHC.Tuple.() #)
                     }
                     }
                 }
                 }}]
GHC.Conc.IO.threadWaitWrite1
  = \ (fd_aaTmE :: Fd) (eta_B1 :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
             realWorld#
      of
      { (# ds_daTrB, ds1_daTrA #) ->
      case ds1_daTrA of {
        __DEFAULT ->
          GHC.Event.Thread.threadWaitRead1
            GHC.Event.Internal.evtWrite fd_aaTmE eta_B1;
        0# ->
          case fd_aaTmE
               `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                       :: (Fd :: *) ~R# (Int32 :: *))
          of
          { GHC.Int.I32# x#_i9h2V ->
          case waitWrite# @ RealWorld x#_i9h2V eta_B1 of s'_aaTmH
          { __DEFAULT ->
          (# s'_aaTmH, GHC.Tuple.() #)
          }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
threadWaitWrite :: Fd -> IO ()
[GblId,
 Arity=2,
 Str=<L,U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.IO.threadWaitWrite1
               `cast` (<Fd>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Fd -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Fd -> IO () :: *))}]
threadWaitWrite
  = GHC.Conc.IO.threadWaitWrite1
    `cast` (<Fd>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Fd -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Fd -> IO () :: *))

-- RHS size: {terms: 76, types: 121, coercions: 12, joins: 0/0}
GHC.Conc.IO.threadWaitWriteSTM1
  :: Fd
     -> State# RealWorld -> (# State# RealWorld, (STM (), IO ()) #)
[GblId,
 Arity=2,
 Str=<L,U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 189 30}]
GHC.Conc.IO.threadWaitWriteSTM1
  = \ (fd_aaTmO :: Fd) (eta_B1 :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
             realWorld#
      of
      { (# ds_daTrB, ds1_daTrA #) ->
      case ds1_daTrA of {
        __DEFAULT ->
          GHC.Event.Thread.threadWaitReadSTM1
            GHC.Event.Internal.evtWrite fd_aaTmO eta_B1;
        0# ->
          case newTVar# @ Bool @ RealWorld GHC.Types.False eta_B1 of
          { (# ipv_iaIwd, ipv1_iaIwe #) ->
          case fork#
                 @ (IO ())
                 ((\ (eta1_iamwF :: State# RealWorld) ->
                     catch#
                       @ ()
                       @ GHC.Exception.SomeException
                       (\ (s_i7JiH [OS=OneShot] :: State# RealWorld) ->
                          case fd_aaTmO
                               `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                                       :: (Fd :: *) ~R# (Int32 :: *))
                          of
                          { GHC.Int.I32# x#_i9h2V ->
                          case waitWrite# @ RealWorld x#_i9h2V s_i7JiH of s'_aaTmH
                          { __DEFAULT ->
                          atomically#
                            @ ()
                            (\ (eta2_iaIwq [OS=OneShot] :: State# RealWorld) ->
                               case writeTVar#
                                      @ RealWorld @ Bool ipv1_iaIwe GHC.Types.True eta2_iaIwq
                               of s2#_iaIwv
                               { __DEFAULT ->
                               (# s2#_iaIwv, GHC.Tuple.() #)
                               })
                            s'_aaTmH
                          }
                          })
                       GHC.Conc.Sync.forkIO2
                       eta1_iamwF)
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 ipv_iaIwd
          of
          { (# ipv2_iamwJ, ipv3_iamwK #) ->
          (# ipv2_iamwJ,
             ((\ (s_iaIxO :: State# RealWorld) ->
                 case readTVar# @ RealWorld @ Bool ipv1_iaIwe s_iaIxO of
                 { (# ipv4_iaIxR, ipv5_iaIxS #) ->
                 case ipv5_iaIxS of {
                   False -> retry# @ () ipv4_iaIxR;
                   True -> (# ipv4_iaIxR, GHC.Tuple.() #)
                 }
                 })
              `cast` (Sym (GHC.Conc.Sync.N:STM[0] <()>_R)
                      :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                         ~R# (STM () :: *)),
              (\ (eta1_iaTs9 :: State# RealWorld) ->
                 case killThread#
                        @ GHC.Exception.SomeException
                        ipv3_iamwK
                        GHC.Conc.Sync.killThread2
                        eta1_iaTs9
                 of s1_iaTsf
                 { __DEFAULT ->
                 (# s1_iaTsf, GHC.Tuple.() #)
                 })
              `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                         ~R# (IO () :: *))) #)
          }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
threadWaitWriteSTM :: Fd -> IO (STM (), IO ())
[GblId,
 Arity=2,
 Str=<L,U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.IO.threadWaitWriteSTM1
               `cast` (<Fd>_R ->_R Sym (GHC.Types.N:IO[0] <(STM (), IO ())>_R)
                       :: (Fd
                           -> State# RealWorld
                           -> (# State# RealWorld, (STM (), IO ()) #) :: *)
                          ~R# (Fd -> IO (STM (), IO ()) :: *))}]
threadWaitWriteSTM
  = GHC.Conc.IO.threadWaitWriteSTM1
    `cast` (<Fd>_R ->_R Sym (GHC.Types.N:IO[0] <(STM (), IO ())>_R)
            :: (Fd
                -> State# RealWorld
                -> (# State# RealWorld, (STM (), IO ()) #) :: *)
               ~R# (Fd -> IO (STM (), IO ()) :: *))

-- RHS size: {terms: 25, types: 27, coercions: 3, joins: 0/0}
GHC.Conc.IO.threadWaitRead1
  :: Fd -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<L,U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (fd_aaTmA [Occ=Once*] :: Fd)
                 (eta_B1 [Occ=Once*] :: State# RealWorld) ->
                 case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
                        realWorld#
                 of
                 { (# _ [Occ=Dead], ds1_daTrA [Occ=Once!] #) ->
                 case ds1_daTrA of {
                   __DEFAULT ->
                     GHC.Event.Thread.threadWaitRead1
                       GHC.Event.Internal.evtRead fd_aaTmA eta_B1;
                   0# ->
                     case fd_aaTmA
                          `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                                  :: (Fd :: *) ~R# (Int32 :: *))
                     of
                     { GHC.Int.I32# x#_i9h2V [Occ=Once] ->
                     case waitRead# @ RealWorld x#_i9h2V eta_B1 of s'_aaTmD
                     { __DEFAULT ->
                     (# s'_aaTmD, GHC.Tuple.() #)
                     }
                     }
                 }
                 }}]
GHC.Conc.IO.threadWaitRead1
  = \ (fd_aaTmA :: Fd) (eta_B1 :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
             realWorld#
      of
      { (# ds_daTrB, ds1_daTrA #) ->
      case ds1_daTrA of {
        __DEFAULT ->
          GHC.Event.Thread.threadWaitRead1
            GHC.Event.Internal.evtRead fd_aaTmA eta_B1;
        0# ->
          case fd_aaTmA
               `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                       :: (Fd :: *) ~R# (Int32 :: *))
          of
          { GHC.Int.I32# x#_i9h2V ->
          case waitRead# @ RealWorld x#_i9h2V eta_B1 of s'_aaTmD
          { __DEFAULT ->
          (# s'_aaTmD, GHC.Tuple.() #)
          }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
threadWaitRead :: Fd -> IO ()
[GblId,
 Arity=2,
 Str=<L,U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.IO.threadWaitRead1
               `cast` (<Fd>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Fd -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Fd -> IO () :: *))}]
threadWaitRead
  = GHC.Conc.IO.threadWaitRead1
    `cast` (<Fd>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Fd -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Fd -> IO () :: *))

-- RHS size: {terms: 76, types: 121, coercions: 12, joins: 0/0}
GHC.Conc.IO.threadWaitReadSTM1
  :: Fd
     -> State# RealWorld -> (# State# RealWorld, (STM (), IO ()) #)
[GblId,
 Arity=2,
 Str=<L,U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 189 30}]
GHC.Conc.IO.threadWaitReadSTM1
  = \ (fd_aaTmI :: Fd) (eta_B1 :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_daTrC
             realWorld#
      of
      { (# ds_daTrB, ds1_daTrA #) ->
      case ds1_daTrA of {
        __DEFAULT ->
          GHC.Event.Thread.threadWaitReadSTM1
            GHC.Event.Internal.evtRead fd_aaTmI eta_B1;
        0# ->
          case newTVar# @ Bool @ RealWorld GHC.Types.False eta_B1 of
          { (# ipv_iaIwd, ipv1_iaIwe #) ->
          case fork#
                 @ (IO ())
                 ((\ (eta1_iamwF :: State# RealWorld) ->
                     catch#
                       @ ()
                       @ GHC.Exception.SomeException
                       (\ (s_i7JiH [OS=OneShot] :: State# RealWorld) ->
                          case fd_aaTmI
                               `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                                       :: (Fd :: *) ~R# (Int32 :: *))
                          of
                          { GHC.Int.I32# x#_i9h2V ->
                          case waitRead# @ RealWorld x#_i9h2V s_i7JiH of s'_aaTmD
                          { __DEFAULT ->
                          atomically#
                            @ ()
                            (\ (eta2_iaIwq [OS=OneShot] :: State# RealWorld) ->
                               case writeTVar#
                                      @ RealWorld @ Bool ipv1_iaIwe GHC.Types.True eta2_iaIwq
                               of s2#_iaIwv
                               { __DEFAULT ->
                               (# s2#_iaIwv, GHC.Tuple.() #)
                               })
                            s'_aaTmD
                          }
                          })
                       GHC.Conc.Sync.forkIO2
                       eta1_iamwF)
                  `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                          :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                             ~R# (IO () :: *)))
                 ipv_iaIwd
          of
          { (# ipv2_iamwJ, ipv3_iamwK #) ->
          (# ipv2_iamwJ,
             ((\ (s_iaIxO :: State# RealWorld) ->
                 case readTVar# @ RealWorld @ Bool ipv1_iaIwe s_iaIxO of
                 { (# ipv4_iaIxR, ipv5_iaIxS #) ->
                 case ipv5_iaIxS of {
                   False -> retry# @ () ipv4_iaIxR;
                   True -> (# ipv4_iaIxR, GHC.Tuple.() #)
                 }
                 })
              `cast` (Sym (GHC.Conc.Sync.N:STM[0] <()>_R)
                      :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                         ~R# (STM () :: *)),
              (\ (eta1_iaTs9 :: State# RealWorld) ->
                 case killThread#
                        @ GHC.Exception.SomeException
                        ipv3_iamwK
                        GHC.Conc.Sync.killThread2
                        eta1_iaTs9
                 of s1_iaTsf
                 { __DEFAULT ->
                 (# s1_iaTsf, GHC.Tuple.() #)
                 })
              `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                      :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                         ~R# (IO () :: *))) #)
          }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
threadWaitReadSTM :: Fd -> IO (STM (), IO ())
[GblId,
 Arity=2,
 Str=<L,U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Conc.IO.threadWaitReadSTM1
               `cast` (<Fd>_R ->_R Sym (GHC.Types.N:IO[0] <(STM (), IO ())>_R)
                       :: (Fd
                           -> State# RealWorld
                           -> (# State# RealWorld, (STM (), IO ()) #) :: *)
                          ~R# (Fd -> IO (STM (), IO ()) :: *))}]
threadWaitReadSTM
  = GHC.Conc.IO.threadWaitReadSTM1
    `cast` (<Fd>_R ->_R Sym (GHC.Types.N:IO[0] <(STM (), IO ())>_R)
            :: (Fd
                -> State# RealWorld
                -> (# State# RealWorld, (STM (), IO ()) #) :: *)
               ~R# (Fd -> IO (STM (), IO ()) :: *))


