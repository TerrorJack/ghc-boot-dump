
==================== Raw Cmm ====================
2018-03-16 16:04:46.280906788 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:46.283076363 UTC

[section ""data" . GHC.Conc.Sync.$fEqTVar_$c==_closure" {
     GHC.Conc.Sync.$fEqTVar_$c==_closure:
         const GHC.Conc.Sync.$fEqTVar_$c==_info;
 },
 GHC.Conc.Sync.$fEqTVar_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Jjj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Jjn; else goto c9Jjo;
       c9Jjn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqTVar_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Jjo: // global
           I64[Sp - 16] = block_c9Jjg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Jjx; else goto c9Jjh;
       u9Jjx: // global
           call _c9Jjg(R1) args: 0, res: 0, upd: 0;
       c9Jjh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqTVar_$c==_info" {
     GHC.Conc.Sync.$fEqTVar_$c==_info:
         const GHC.Conc.Sync.$fEqTVar_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Jjg() //  [R1]
         { []
         }
     {offset
       c9Jjg: // global
           I64[Sp] = block_c9Jjm_info;
           _s9Fvt::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9Fvt::P64;
           if (R1 & 7 != 0) goto u9Jjw; else goto c9Jjq;
       u9Jjw: // global
           call _c9Jjm(R1) args: 0, res: 0, upd: 0;
       c9Jjq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Jjg_info" {
     block_c9Jjg_info:
         const _c9Jjg;
         const 1;
         const 30;
 },
 _c9Jjm() //  [R1]
         { []
         }
     {offset
       c9Jjm: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Jjm_info" {
     block_c9Jjm_info:
         const _c9Jjm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.292294013 UTC

[section ""data" . GHC.Conc.Sync.$fEqTVar_$c/=_closure" {
     GHC.Conc.Sync.$fEqTVar_$c/=_closure:
         const GHC.Conc.Sync.$fEqTVar_$c/=_info;
 },
 GHC.Conc.Sync.$fEqTVar_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JjW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Jk0; else goto c9Jk1;
       c9Jk0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqTVar_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Jk1: // global
           I64[Sp - 16] = block_c9JjT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Jko; else goto c9JjU;
       u9Jko: // global
           call _c9JjT(R1) args: 0, res: 0, upd: 0;
       c9JjU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqTVar_$c/=_info" {
     GHC.Conc.Sync.$fEqTVar_$c/=_info:
         const GHC.Conc.Sync.$fEqTVar_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9JjT() //  [R1]
         { []
         }
     {offset
       c9JjT: // global
           I64[Sp] = block_c9JjZ_info;
           _s9FvA::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FvA::P64;
           if (R1 & 7 != 0) goto u9Jkn; else goto c9Jk3;
       u9Jkn: // global
           call _c9JjZ(R1) args: 0, res: 0, upd: 0;
       c9Jk3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JjT_info" {
     block_c9JjT_info:
         const _c9JjT;
         const 1;
         const 30;
 },
 _c9JjZ() //  [R1]
         { []
         }
     {offset
       c9JjZ: // global
           if (P64[Sp + 8] == P64[R1 + 7]) goto c9Jkj; else goto c9Jkd;
       c9Jkj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Jkd: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JjZ_info" {
     block_c9JjZ_info:
         const _c9JjZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.299011889 UTC

[section ""data" . GHC.Conc.Sync.$fEqTVar_closure" {
     GHC.Conc.Sync.$fEqTVar_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Conc.Sync.$fEqTVar_$c==_closure+2;
         const GHC.Conc.Sync.$fEqTVar_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.300675051 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason12_bytes" {
     GHC.Conc.Sync.$fShowBlockReason12_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.303223612 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason11_closure" {
     GHC.Conc.Sync.$fShowBlockReason11_closure:
         const GHC.Conc.Sync.$fShowBlockReason11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason11_entry() //  [R1]
         { []
         }
     {offset
       c9JkN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JkO; else goto c9JkP;
       c9JkO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9JkP: // global
           (_c9JkK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9JkK::I64 == 0) goto c9JkM; else goto c9JkL;
       c9JkM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9JkL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9JkK::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason11_info" {
     GHC.Conc.Sync.$fShowBlockReason11_info:
         const GHC.Conc.Sync.$fShowBlockReason11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.306736393 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason10_bytes" {
     GHC.Conc.Sync.$fShowBlockReason10_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,66,108,97,99,107,72,111,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.308907073 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason9_closure" {
     GHC.Conc.Sync.$fShowBlockReason9_closure:
         const GHC.Conc.Sync.$fShowBlockReason9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason9_entry() //  [R1]
         { []
         }
     {offset
       c9Jl4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Jl5; else goto c9Jl6;
       c9Jl5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Jl6: // global
           (_c9Jl1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Jl1::I64 == 0) goto c9Jl3; else goto c9Jl2;
       c9Jl3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Jl2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Jl1::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason9_info" {
     GHC.Conc.Sync.$fShowBlockReason9_info:
         const GHC.Conc.Sync.$fShowBlockReason9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.312401064 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason8_bytes" {
     GHC.Conc.Sync.$fShowBlockReason8_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.31456565 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason7_closure" {
     GHC.Conc.Sync.$fShowBlockReason7_closure:
         const GHC.Conc.Sync.$fShowBlockReason7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason7_entry() //  [R1]
         { []
         }
     {offset
       c9Jll: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Jlm; else goto c9Jln;
       c9Jlm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Jln: // global
           (_c9Jli::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Jli::I64 == 0) goto c9Jlk; else goto c9Jlj;
       c9Jlk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Jlj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Jli::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason7_info" {
     GHC.Conc.Sync.$fShowBlockReason7_info:
         const GHC.Conc.Sync.$fShowBlockReason7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.318223408 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason6_bytes" {
     GHC.Conc.Sync.$fShowBlockReason6_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.320314354 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason5_closure" {
     GHC.Conc.Sync.$fShowBlockReason5_closure:
         const GHC.Conc.Sync.$fShowBlockReason5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason5_entry() //  [R1]
         { []
         }
     {offset
       c9JlC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JlD; else goto c9JlE;
       c9JlD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9JlE: // global
           (_c9Jlz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Jlz::I64 == 0) goto c9JlB; else goto c9JlA;
       c9JlB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9JlA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Jlz::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason5_info" {
     GHC.Conc.Sync.$fShowBlockReason5_info:
         const GHC.Conc.Sync.$fShowBlockReason5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.324369292 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason4_bytes" {
     GHC.Conc.Sync.$fShowBlockReason4_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,70,111,114,101,105,103,110,67,97,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.326567971 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason3_closure" {
     GHC.Conc.Sync.$fShowBlockReason3_closure:
         const GHC.Conc.Sync.$fShowBlockReason3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason3_entry() //  [R1]
         { []
         }
     {offset
       c9JlT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JlU; else goto c9JlV;
       c9JlU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9JlV: // global
           (_c9JlQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9JlQ::I64 == 0) goto c9JlS; else goto c9JlR;
       c9JlS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9JlR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9JlQ::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason3_info" {
     GHC.Conc.Sync.$fShowBlockReason3_info:
         const GHC.Conc.Sync.$fShowBlockReason3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.33028834 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason2_bytes" {
     GHC.Conc.Sync.$fShowBlockReason2_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,79,116,104,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.332317274 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason1_closure" {
     GHC.Conc.Sync.$fShowBlockReason1_closure:
         const GHC.Conc.Sync.$fShowBlockReason1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason1_entry() //  [R1]
         { []
         }
     {offset
       c9Jma: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Jmb; else goto c9Jmc;
       c9Jmb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Jmc: // global
           (_c9Jm7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Jm7::I64 == 0) goto c9Jm9; else goto c9Jm8;
       c9Jm9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Jm8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Jm7::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason1_info" {
     GHC.Conc.Sync.$fShowBlockReason1_info:
         const GHC.Conc.Sync.$fShowBlockReason1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.336953134 UTC

[section ""data" . GHC.Conc.Sync.$w$cshowsPrec_closure" {
     GHC.Conc.Sync.$w$cshowsPrec_closure:
         const GHC.Conc.Sync.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Conc.Sync.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Jmz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JmA; else goto c9JmB;
       c9JmA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JmB: // global
           I64[Sp - 16] = block_c9Jmo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9JmU; else goto c9Jmp;
       u9JmU: // global
           call _c9Jmo(R1) args: 0, res: 0, upd: 0;
       c9Jmp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$w$cshowsPrec_info" {
     GHC.Conc.Sync.$w$cshowsPrec_info:
         const GHC.Conc.Sync.$w$cshowsPrec_entry;
         const 0;
         const 545460846606;
         const 8589934607;
         const S9FOI_srt;
 },
 _c9Jmo() //  [R1]
         { []
         }
     {offset
       c9Jmo: // global
           _s9FvF::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Jms;
               case 2 : goto c9Jmt;
               case 3 : goto c9Jmu;
               case 4 : goto c9Jmv;
               case 5 : goto c9Jmw;
               case 6 : goto c9Jmx;
           }
       c9Jmx: // global
           R3 = _s9FvF::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Jmw: // global
           R3 = _s9FvF::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Jmv: // global
           R3 = _s9FvF::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Jmu: // global
           R3 = _s9FvF::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Jmt: // global
           R3 = _s9FvF::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Jms: // global
           R3 = _s9FvF::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Jmo_info" {
     block_c9Jmo_info:
         const _c9Jmo;
         const 1;
         const 270582939678;
         const S9FOI_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.342649163 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_closure" {
     GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_closure:
         const GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_info;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c9Jnb: // global
           _s9FvI::P64 = R3;
           R3 = R4;
           R2 = _s9FvI::P64;
           call GHC.Conc.Sync.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_info" {
     GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_info:
         const GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S9FOI_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.346750782 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason_$cshow_closure" {
     GHC.Conc.Sync.$fShowBlockReason_$cshow_closure:
         const GHC.Conc.Sync.$fShowBlockReason_$cshow_info;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9Jnx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Jny; else goto c9Jnz;
       c9Jny: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowBlockReason_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Jnz: // global
           I64[Sp - 8] = block_c9Jnm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9JnS; else goto c9Jnn;
       u9JnS: // global
           call _c9Jnm(R1) args: 0, res: 0, upd: 0;
       c9Jnn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason_$cshow_info" {
     GHC.Conc.Sync.$fShowBlockReason_$cshow_info:
         const GHC.Conc.Sync.$fShowBlockReason_$cshow_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const S9FOI_srt+8;
 },
 _c9Jnm() //  [R1]
         { []
         }
     {offset
       c9Jnm: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Jnq;
               case 2 : goto c9Jnr;
               case 3 : goto c9Jns;
               case 4 : goto c9Jnt;
               case 5 : goto c9Jnu;
               case 6 : goto c9Jnv;
           }
       c9Jnv: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Jnu: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Jnt: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Jns: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Jnr: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Jnq: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Jnm_info" {
     block_c9Jnm_info:
         const _c9Jnm;
         const 0;
         const 270582939678;
         const S9FOI_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.352640511 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason_$cshowList_closure" {
     GHC.Conc.Sync.$fShowBlockReason_$cshowList_closure:
         const GHC.Conc.Sync.$fShowBlockReason_$cshowList_info;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Jof: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Conc.Sync.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason_$cshowList_info" {
     GHC.Conc.Sync.$fShowBlockReason_$cshowList_info:
         const GHC.Conc.Sync.$fShowBlockReason_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9FOI_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.356297333 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason_closure" {
     GHC.Conc.Sync.$fShowBlockReason_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_closure+3;
         const GHC.Conc.Sync.$fShowBlockReason_$cshow_closure+1;
         const GHC.Conc.Sync.$fShowBlockReason_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.360964328 UTC

[section ""data" . GHC.Conc.Sync.$fEqBlockReason_$c==_closure" {
     GHC.Conc.Sync.$fEqBlockReason_$c==_closure:
         const GHC.Conc.Sync.$fEqBlockReason_$c==_info;
 },
 GHC.Conc.Sync.$fEqBlockReason_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JoC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JoD; else goto c9JoE;
       c9JoD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqBlockReason_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JoE: // global
           I64[Sp - 16] = block_c9Jor_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Jqv; else goto c9Jos;
       u9Jqv: // global
           call _c9Jor(R1) args: 0, res: 0, upd: 0;
       c9Jos: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqBlockReason_$c==_info" {
     GHC.Conc.Sync.$fEqBlockReason_$c==_info:
         const GHC.Conc.Sync.$fEqBlockReason_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Jor() //  [R1]
         { []
         }
     {offset
       c9Jor: // global
           _s9FvP::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Jov;
               case 2 : goto c9Jow;
               case 3 : goto c9Jox;
               case 4 : goto c9Joy;
               case 5 : goto c9Joz;
               case 6 : goto c9JoA;
           }
       c9JoA: // global
           I64[Sp + 8] = block_c9JpU_info;
           R1 = _s9FvP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Jqu; else goto c9JpW;
       u9Jqu: // global
           call _c9JpU(R1) args: 0, res: 0, upd: 0;
       c9JpW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Joz: // global
           I64[Sp + 8] = block_c9JpF_info;
           R1 = _s9FvP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Jqt; else goto c9JpH;
       u9Jqt: // global
           call _c9JpF(R1) args: 0, res: 0, upd: 0;
       c9JpH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Joy: // global
           I64[Sp + 8] = block_c9Jpq_info;
           R1 = _s9FvP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Jqs; else goto c9Jps;
       u9Jqs: // global
           call _c9Jpq(R1) args: 0, res: 0, upd: 0;
       c9Jps: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Jox: // global
           I64[Sp + 8] = block_c9Jpb_info;
           R1 = _s9FvP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Jqr; else goto c9Jpd;
       u9Jqr: // global
           call _c9Jpb(R1) args: 0, res: 0, upd: 0;
       c9Jpd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Jow: // global
           I64[Sp + 8] = block_c9JoW_info;
           R1 = _s9FvP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Jqq; else goto c9JoY;
       u9Jqq: // global
           call _c9JoW(R1) args: 0, res: 0, upd: 0;
       c9JoY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Jov: // global
           I64[Sp + 8] = block_c9JoH_info;
           R1 = _s9FvP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Jqp; else goto c9JoJ;
       u9Jqp: // global
           call _c9JoH(R1) args: 0, res: 0, upd: 0;
       c9JoJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Jor_info" {
     block_c9Jor_info:
         const _c9Jor;
         const 1;
         const 30;
 },
 _c9JpU() //  [R1]
         { []
         }
     {offset
       c9JpU: // global
           if (R1 & 7 == 6) goto u9Jqd; else goto u9Jqe;
       u9Jqd: // global
           Sp = Sp + 8;
           call _c9Jq6() args: 0, res: 0, upd: 0;
       u9Jqe: // global
           Sp = Sp + 8;
           call _c9Jq2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JpU_info" {
     block_c9JpU_info:
         const _c9JpU;
         const 0;
         const 30;
 },
 _c9JpF() //  [R1]
         { []
         }
     {offset
       c9JpF: // global
           if (R1 & 7 == 5) goto u9Jqf; else goto u9Jqg;
       u9Jqf: // global
           Sp = Sp + 8;
           call _c9Jq6() args: 0, res: 0, upd: 0;
       u9Jqg: // global
           Sp = Sp + 8;
           call _c9Jq2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JpF_info" {
     block_c9JpF_info:
         const _c9JpF;
         const 0;
         const 30;
 },
 _c9Jpq() //  [R1]
         { []
         }
     {offset
       c9Jpq: // global
           if (R1 & 7 == 4) goto u9Jqh; else goto u9Jqi;
       u9Jqh: // global
           Sp = Sp + 8;
           call _c9Jq6() args: 0, res: 0, upd: 0;
       u9Jqi: // global
           Sp = Sp + 8;
           call _c9Jq2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jpq_info" {
     block_c9Jpq_info:
         const _c9Jpq;
         const 0;
         const 30;
 },
 _c9Jpb() //  [R1]
         { []
         }
     {offset
       c9Jpb: // global
           if (R1 & 7 == 3) goto u9Jqj; else goto u9Jqk;
       u9Jqj: // global
           Sp = Sp + 8;
           call _c9Jq6() args: 0, res: 0, upd: 0;
       u9Jqk: // global
           Sp = Sp + 8;
           call _c9Jq2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jpb_info" {
     block_c9Jpb_info:
         const _c9Jpb;
         const 0;
         const 30;
 },
 _c9JoW() //  [R1]
         { []
         }
     {offset
       c9JoW: // global
           if (R1 & 7 == 2) goto u9Jql; else goto u9Jqm;
       u9Jql: // global
           Sp = Sp + 8;
           call _c9Jq6() args: 0, res: 0, upd: 0;
       u9Jqm: // global
           Sp = Sp + 8;
           call _c9Jq2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JoW_info" {
     block_c9JoW_info:
         const _c9JoW;
         const 0;
         const 30;
 },
 _c9JoH() //  [R1]
         { []
         }
     {offset
       c9JoH: // global
           if (R1 & 7 == 1) goto u9Jqn; else goto u9Jqo;
       u9Jqn: // global
           Sp = Sp + 8;
           call _c9Jq6() args: 0, res: 0, upd: 0;
       u9Jqo: // global
           Sp = Sp + 8;
           call _c9Jq2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JoH_info" {
     block_c9JoH_info:
         const _c9JoH;
         const 0;
         const 30;
 },
 _c9Jq6() //  []
         { []
         }
     {offset
       c9Jq6: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Jq2() //  []
         { []
         }
     {offset
       c9Jq2: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.379835514 UTC

[section ""data" . GHC.Conc.Sync.$fEqBlockReason_$c/=_closure" {
     GHC.Conc.Sync.$fEqBlockReason_$c/=_closure:
         const GHC.Conc.Sync.$fEqBlockReason_$c/=_info;
 },
 GHC.Conc.Sync.$fEqBlockReason_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JrP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JrQ; else goto c9JrR;
       c9JrQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqBlockReason_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JrR: // global
           I64[Sp - 16] = block_c9JrE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9JtI; else goto c9JrF;
       u9JtI: // global
           call _c9JrE(R1) args: 0, res: 0, upd: 0;
       c9JrF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqBlockReason_$c/=_info" {
     GHC.Conc.Sync.$fEqBlockReason_$c/=_info:
         const GHC.Conc.Sync.$fEqBlockReason_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9JrE() //  [R1]
         { []
         }
     {offset
       c9JrE: // global
           _s9FvY::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9JrI;
               case 2 : goto c9JrJ;
               case 3 : goto c9JrK;
               case 4 : goto c9JrL;
               case 5 : goto c9JrM;
               case 6 : goto c9JrN;
           }
       c9JrN: // global
           I64[Sp + 8] = block_c9Jt7_info;
           R1 = _s9FvY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JtH; else goto c9Jt9;
       u9JtH: // global
           call _c9Jt7(R1) args: 0, res: 0, upd: 0;
       c9Jt9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JrM: // global
           I64[Sp + 8] = block_c9JsS_info;
           R1 = _s9FvY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JtG; else goto c9JsU;
       u9JtG: // global
           call _c9JsS(R1) args: 0, res: 0, upd: 0;
       c9JsU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JrL: // global
           I64[Sp + 8] = block_c9JsD_info;
           R1 = _s9FvY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JtF; else goto c9JsF;
       u9JtF: // global
           call _c9JsD(R1) args: 0, res: 0, upd: 0;
       c9JsF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JrK: // global
           I64[Sp + 8] = block_c9Jso_info;
           R1 = _s9FvY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JtE; else goto c9Jsq;
       u9JtE: // global
           call _c9Jso(R1) args: 0, res: 0, upd: 0;
       c9Jsq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JrJ: // global
           I64[Sp + 8] = block_c9Js9_info;
           R1 = _s9FvY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JtD; else goto c9Jsb;
       u9JtD: // global
           call _c9Js9(R1) args: 0, res: 0, upd: 0;
       c9Jsb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JrI: // global
           I64[Sp + 8] = block_c9JrU_info;
           R1 = _s9FvY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JtC; else goto c9JrW;
       u9JtC: // global
           call _c9JrU(R1) args: 0, res: 0, upd: 0;
       c9JrW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JrE_info" {
     block_c9JrE_info:
         const _c9JrE;
         const 1;
         const 30;
 },
 _c9Jt7() //  [R1]
         { []
         }
     {offset
       c9Jt7: // global
           if (R1 & 7 == 6) goto u9Jtq; else goto u9Jtr;
       u9Jtq: // global
           Sp = Sp + 8;
           call _c9Jtj() args: 0, res: 0, upd: 0;
       u9Jtr: // global
           Sp = Sp + 8;
           call _c9Jtf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jt7_info" {
     block_c9Jt7_info:
         const _c9Jt7;
         const 0;
         const 30;
 },
 _c9JsS() //  [R1]
         { []
         }
     {offset
       c9JsS: // global
           if (R1 & 7 == 5) goto u9Jts; else goto u9Jtt;
       u9Jts: // global
           Sp = Sp + 8;
           call _c9Jtj() args: 0, res: 0, upd: 0;
       u9Jtt: // global
           Sp = Sp + 8;
           call _c9Jtf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JsS_info" {
     block_c9JsS_info:
         const _c9JsS;
         const 0;
         const 30;
 },
 _c9JsD() //  [R1]
         { []
         }
     {offset
       c9JsD: // global
           if (R1 & 7 == 4) goto u9Jtu; else goto u9Jtv;
       u9Jtu: // global
           Sp = Sp + 8;
           call _c9Jtj() args: 0, res: 0, upd: 0;
       u9Jtv: // global
           Sp = Sp + 8;
           call _c9Jtf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JsD_info" {
     block_c9JsD_info:
         const _c9JsD;
         const 0;
         const 30;
 },
 _c9Jso() //  [R1]
         { []
         }
     {offset
       c9Jso: // global
           if (R1 & 7 == 3) goto u9Jtw; else goto u9Jtx;
       u9Jtw: // global
           Sp = Sp + 8;
           call _c9Jtj() args: 0, res: 0, upd: 0;
       u9Jtx: // global
           Sp = Sp + 8;
           call _c9Jtf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jso_info" {
     block_c9Jso_info:
         const _c9Jso;
         const 0;
         const 30;
 },
 _c9Js9() //  [R1]
         { []
         }
     {offset
       c9Js9: // global
           if (R1 & 7 == 2) goto u9Jty; else goto u9Jtz;
       u9Jty: // global
           Sp = Sp + 8;
           call _c9Jtj() args: 0, res: 0, upd: 0;
       u9Jtz: // global
           Sp = Sp + 8;
           call _c9Jtf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Js9_info" {
     block_c9Js9_info:
         const _c9Js9;
         const 0;
         const 30;
 },
 _c9JrU() //  [R1]
         { []
         }
     {offset
       c9JrU: // global
           if (R1 & 7 == 1) goto u9JtA; else goto u9JtB;
       u9JtA: // global
           Sp = Sp + 8;
           call _c9Jtj() args: 0, res: 0, upd: 0;
       u9JtB: // global
           Sp = Sp + 8;
           call _c9Jtf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JrU_info" {
     block_c9JrU_info:
         const _c9JrU;
         const 0;
         const 30;
 },
 _c9Jtj() //  []
         { []
         }
     {offset
       c9Jtj: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Jtf() //  []
         { []
         }
     {offset
       c9Jtf: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.396684165 UTC

[section ""data" . GHC.Conc.Sync.$fEqBlockReason_closure" {
     GHC.Conc.Sync.$fEqBlockReason_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Conc.Sync.$fEqBlockReason_$c==_closure+2;
         const GHC.Conc.Sync.$fEqBlockReason_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.401234689 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadStatus_$c==_closure" {
     GHC.Conc.Sync.$fEqThreadStatus_$c==_closure:
         const GHC.Conc.Sync.$fEqThreadStatus_$c==_info;
 },
 GHC.Conc.Sync.$fEqThreadStatus_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Jv1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Jv2; else goto c9Jv3;
       c9Jv2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqThreadStatus_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Jv3: // global
           I64[Sp - 16] = block_c9JuS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Jwj; else goto c9JuT;
       u9Jwj: // global
           call _c9JuS(R1) args: 0, res: 0, upd: 0;
       c9JuT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqThreadStatus_$c==_info" {
     GHC.Conc.Sync.$fEqThreadStatus_$c==_info:
         const GHC.Conc.Sync.$fEqThreadStatus_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9JuS() //  [R1]
         { []
         }
     {offset
       c9JuS: // global
           _s9Fw7::P64 = P64[Sp + 8];
           _c9Jv0::P64 = R1 & 7;
           if (_c9Jv0::P64 < 3) goto u9Jw6; else goto u9Jw7;
       u9Jw6: // global
           if (_c9Jv0::P64 < 2) goto c9JuW; else goto c9JuX;
       c9JuW: // global
           I64[Sp + 8] = block_c9Jv6_info;
           R1 = _s9Fw7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Jwf; else goto c9Jv8;
       u9Jwf: // global
           call _c9Jv6(R1) args: 0, res: 0, upd: 0;
       c9Jv8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JuX: // global
           I64[Sp + 8] = block_c9Jvl_info;
           R1 = _s9Fw7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Jwg; else goto c9Jvn;
       u9Jwg: // global
           call _c9Jvl(R1) args: 0, res: 0, upd: 0;
       c9Jvn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Jw7: // global
           if (_c9Jv0::P64 < 4) goto c9JuY; else goto c9JuZ;
       c9JuY: // global
           I64[Sp] = block_c9JvA_info;
           _s9Fwb::P64 = P64[R1 + 5];
           R1 = _s9Fw7::P64;
           P64[Sp + 8] = _s9Fwb::P64;
           if (R1 & 7 != 0) goto u9Jwh; else goto c9JvC;
       u9Jwh: // global
           call _c9JvA(R1) args: 0, res: 0, upd: 0;
       c9JvC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JuZ: // global
           I64[Sp + 8] = block_c9JvP_info;
           R1 = _s9Fw7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Jwi; else goto c9JvR;
       u9Jwi: // global
           call _c9JvP(R1) args: 0, res: 0, upd: 0;
       c9JvR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JuS_info" {
     block_c9JuS_info:
         const _c9JuS;
         const 1;
         const 30;
 },
 _c9Jv6() //  [R1]
         { []
         }
     {offset
       c9Jv6: // global
           if (R1 & 7 == 1) goto u9Jw8; else goto u9Jw9;
       u9Jw8: // global
           Sp = Sp + 8;
           call _c9Jw1() args: 0, res: 0, upd: 0;
       u9Jw9: // global
           Sp = Sp + 8;
           call _c9JvX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jv6_info" {
     block_c9Jv6_info:
         const _c9Jv6;
         const 0;
         const 30;
 },
 _c9Jvl() //  [R1]
         { []
         }
     {offset
       c9Jvl: // global
           if (R1 & 7 == 2) goto u9Jwa; else goto u9Jwb;
       u9Jwa: // global
           Sp = Sp + 8;
           call _c9Jw1() args: 0, res: 0, upd: 0;
       u9Jwb: // global
           Sp = Sp + 8;
           call _c9JvX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jvl_info" {
     block_c9Jvl_info:
         const _c9Jvl;
         const 0;
         const 30;
 },
 _c9JvA() //  [R1]
         { []
         }
     {offset
       c9JvA: // global
           if (R1 & 7 == 3) goto c9JvM; else goto u9Jwc;
       c9JvM: // global
           R3 = P64[R1 + 5];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Conc.Sync.$fEqBlockReason_$c==_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
       u9Jwc: // global
           Sp = Sp + 16;
           call _c9JvX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JvA_info" {
     block_c9JvA_info:
         const _c9JvA;
         const 1;
         const 30;
 },
 _c9JvP() //  [R1]
         { []
         }
     {offset
       c9JvP: // global
           if (R1 & 7 == 4) goto u9Jwd; else goto u9Jwe;
       u9Jwd: // global
           Sp = Sp + 8;
           call _c9Jw1() args: 0, res: 0, upd: 0;
       u9Jwe: // global
           Sp = Sp + 8;
           call _c9JvX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JvP_info" {
     block_c9JvP_info:
         const _c9JvP;
         const 0;
         const 30;
 },
 _c9Jw1() //  []
         { []
         }
     {offset
       c9Jw1: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9JvX() //  []
         { []
         }
     {offset
       c9JvX: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.419143149 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadStatus_$c/=_closure" {
     GHC.Conc.Sync.$fEqThreadStatus_$c/=_closure:
         const GHC.Conc.Sync.$fEqThreadStatus_$c/=_info;
 },
 GHC.Conc.Sync.$fEqThreadStatus_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Jxi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Jxj; else goto c9Jxk;
       c9Jxj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqThreadStatus_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Jxk: // global
           I64[Sp - 16] = block_c9Jx9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9JAv; else goto c9Jxa;
       u9JAv: // global
           call _c9Jx9(R1) args: 0, res: 0, upd: 0;
       c9Jxa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqThreadStatus_$c/=_info" {
     GHC.Conc.Sync.$fEqThreadStatus_$c/=_info:
         const GHC.Conc.Sync.$fEqThreadStatus_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Jx9() //  [R1]
         { []
         }
     {offset
       c9Jx9: // global
           _s9Fwg::P64 = P64[Sp + 8];
           _c9Jxh::P64 = R1 & 7;
           if (_c9Jxh::P64 < 3) goto u9JA6; else goto u9JA7;
       u9JA6: // global
           if (_c9Jxh::P64 < 2) goto c9Jxd; else goto c9Jxe;
       c9Jxd: // global
           I64[Sp + 8] = block_c9Jxn_info;
           R1 = _s9Fwg::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JAr; else goto c9Jxp;
       u9JAr: // global
           call _c9Jxn(R1) args: 0, res: 0, upd: 0;
       c9Jxp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Jxe: // global
           I64[Sp + 8] = block_c9JxC_info;
           R1 = _s9Fwg::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JAs; else goto c9JxE;
       u9JAs: // global
           call _c9JxC(R1) args: 0, res: 0, upd: 0;
       c9JxE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9JA7: // global
           if (_c9Jxh::P64 < 4) goto c9Jxf; else goto c9Jxg;
       c9Jxf: // global
           I64[Sp] = block_c9JxR_info;
           _s9Fwk::P64 = P64[R1 + 5];
           R1 = _s9Fwg::P64;
           P64[Sp + 8] = _s9Fwk::P64;
           if (R1 & 7 != 0) goto u9JAt; else goto c9JxT;
       u9JAt: // global
           call _c9JxR(R1) args: 0, res: 0, upd: 0;
       c9JxT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Jxg: // global
           I64[Sp + 8] = block_c9JzI_info;
           R1 = _s9Fwg::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JAu; else goto c9JzK;
       u9JAu: // global
           call _c9JzI(R1) args: 0, res: 0, upd: 0;
       c9JzK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Jx9_info" {
     block_c9Jx9_info:
         const _c9Jx9;
         const 1;
         const 30;
 },
 _c9Jxn() //  [R1]
         { []
         }
     {offset
       c9Jxn: // global
           if (R1 & 7 == 1) goto u9JA8; else goto u9JA9;
       u9JA8: // global
           Sp = Sp + 8;
           call _c9JzU() args: 0, res: 0, upd: 0;
       u9JA9: // global
           Sp = Sp + 8;
           call _c9JzQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jxn_info" {
     block_c9Jxn_info:
         const _c9Jxn;
         const 0;
         const 30;
 },
 _c9JxC() //  [R1]
         { []
         }
     {offset
       c9JxC: // global
           if (R1 & 7 == 2) goto u9JAa; else goto u9JAb;
       u9JAa: // global
           Sp = Sp + 8;
           call _c9JzU() args: 0, res: 0, upd: 0;
       u9JAb: // global
           Sp = Sp + 8;
           call _c9JzQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JxC_info" {
     block_c9JxC_info:
         const _c9JxC;
         const 0;
         const 30;
 },
 _c9JxR() //  [R1]
         { []
         }
     {offset
       c9JxR: // global
           if (R1 & 7 == 3) goto c9Jy4; else goto u9JAc;
       c9Jy4: // global
           I64[Sp] = block_c9Jy2_info;
           _s9Fwm::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9Fwm::P64;
           if (R1 & 7 != 0) goto u9JAA; else goto c9Jy5;
       u9JAA: // global
           call _c9Jy2(R1) args: 0, res: 0, upd: 0;
       c9Jy5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9JAc: // global
           Sp = Sp + 16;
           call _c9JzQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JxR_info" {
     block_c9JxR_info:
         const _c9JxR;
         const 1;
         const 30;
 },
 _c9Jy2() //  [R1]
         { []
         }
     {offset
       c9Jy2: // global
           _s9Fwm::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Jyc;
               case 2 : goto c9Jys;
               case 3 : goto c9JyI;
               case 4 : goto c9JyY;
               case 5 : goto c9Jze;
               case 6 : goto c9Jzu;
           }
       c9Jzu: // global
           I64[Sp + 8] = block_c9Jzs_info;
           R1 = _s9Fwm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JAH; else goto c9Jzv;
       u9JAH: // global
           call _c9Jzs(R1) args: 0, res: 0, upd: 0;
       c9Jzv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Jze: // global
           I64[Sp + 8] = block_c9Jzc_info;
           R1 = _s9Fwm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JAG; else goto c9Jzf;
       u9JAG: // global
           call _c9Jzc(R1) args: 0, res: 0, upd: 0;
       c9Jzf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JyY: // global
           I64[Sp + 8] = block_c9JyW_info;
           R1 = _s9Fwm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JAF; else goto c9JyZ;
       u9JAF: // global
           call _c9JyW(R1) args: 0, res: 0, upd: 0;
       c9JyZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JyI: // global
           I64[Sp + 8] = block_c9JyG_info;
           R1 = _s9Fwm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JAE; else goto c9JyJ;
       u9JAE: // global
           call _c9JyG(R1) args: 0, res: 0, upd: 0;
       c9JyJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Jys: // global
           I64[Sp + 8] = block_c9Jyq_info;
           R1 = _s9Fwm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JAD; else goto c9Jyt;
       u9JAD: // global
           call _c9Jyq(R1) args: 0, res: 0, upd: 0;
       c9Jyt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Jyc: // global
           I64[Sp + 8] = block_c9Jy9_info;
           R1 = _s9Fwm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JAC; else goto c9Jyd;
       u9JAC: // global
           call _c9Jy9(R1) args: 0, res: 0, upd: 0;
       c9Jyd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Jy2_info" {
     block_c9Jy2_info:
         const _c9Jy2;
         const 1;
         const 30;
 },
 _c9Jzs() //  [R1]
         { []
         }
     {offset
       c9Jzs: // global
           if (R1 & 7 == 6) goto u9JAd; else goto u9JAe;
       u9JAd: // global
           Sp = Sp + 8;
           call _c9JzU() args: 0, res: 0, upd: 0;
       u9JAe: // global
           Sp = Sp + 8;
           call _c9JzQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jzs_info" {
     block_c9Jzs_info:
         const _c9Jzs;
         const 0;
         const 30;
 },
 _c9Jzc() //  [R1]
         { []
         }
     {offset
       c9Jzc: // global
           if (R1 & 7 == 5) goto u9JAf; else goto u9JAg;
       u9JAf: // global
           Sp = Sp + 8;
           call _c9JzU() args: 0, res: 0, upd: 0;
       u9JAg: // global
           Sp = Sp + 8;
           call _c9JzQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jzc_info" {
     block_c9Jzc_info:
         const _c9Jzc;
         const 0;
         const 30;
 },
 _c9JyW() //  [R1]
         { []
         }
     {offset
       c9JyW: // global
           if (R1 & 7 == 4) goto u9JAh; else goto u9JAi;
       u9JAh: // global
           Sp = Sp + 8;
           call _c9JzU() args: 0, res: 0, upd: 0;
       u9JAi: // global
           Sp = Sp + 8;
           call _c9JzQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JyW_info" {
     block_c9JyW_info:
         const _c9JyW;
         const 0;
         const 30;
 },
 _c9JyG() //  [R1]
         { []
         }
     {offset
       c9JyG: // global
           if (R1 & 7 == 3) goto u9JAj; else goto u9JAk;
       u9JAj: // global
           Sp = Sp + 8;
           call _c9JzU() args: 0, res: 0, upd: 0;
       u9JAk: // global
           Sp = Sp + 8;
           call _c9JzQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JyG_info" {
     block_c9JyG_info:
         const _c9JyG;
         const 0;
         const 30;
 },
 _c9Jyq() //  [R1]
         { []
         }
     {offset
       c9Jyq: // global
           if (R1 & 7 == 2) goto u9JAl; else goto u9JAm;
       u9JAl: // global
           Sp = Sp + 8;
           call _c9JzU() args: 0, res: 0, upd: 0;
       u9JAm: // global
           Sp = Sp + 8;
           call _c9JzQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jyq_info" {
     block_c9Jyq_info:
         const _c9Jyq;
         const 0;
         const 30;
 },
 _c9Jy9() //  [R1]
         { []
         }
     {offset
       c9Jy9: // global
           if (R1 & 7 == 1) goto u9JAn; else goto u9JAo;
       u9JAn: // global
           Sp = Sp + 8;
           call _c9JzU() args: 0, res: 0, upd: 0;
       u9JAo: // global
           Sp = Sp + 8;
           call _c9JzQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Jy9_info" {
     block_c9Jy9_info:
         const _c9Jy9;
         const 0;
         const 30;
 },
 _c9JzI() //  [R1]
         { []
         }
     {offset
       c9JzI: // global
           if (R1 & 7 == 4) goto u9JAp; else goto u9JAq;
       u9JAp: // global
           Sp = Sp + 8;
           call _c9JzU() args: 0, res: 0, upd: 0;
       u9JAq: // global
           Sp = Sp + 8;
           call _c9JzQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JzI_info" {
     block_c9JzI_info:
         const _c9JzI;
         const 0;
         const 30;
 },
 _c9JzU() //  []
         { []
         }
     {offset
       c9JzU: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9JzQ() //  []
         { []
         }
     {offset
       c9JzQ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.443746413 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadStatus_closure" {
     GHC.Conc.Sync.$fEqThreadStatus_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Conc.Sync.$fEqThreadStatus_$c==_closure+2;
         const GHC.Conc.Sync.$fEqThreadStatus_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.44625 UTC

[section ""data" . GHC.Conc.Sync.numSparks1_closure" {
     GHC.Conc.Sync.numSparks1_closure:
         const GHC.Conc.Sync.numSparks1_info;
 },
 GHC.Conc.Sync.numSparks1_entry() //  []
         { []
         }
     {offset
       c9JCp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9JCq; else goto c9JCr;
       c9JCq: // global
           R1 = GHC.Conc.Sync.numSparks1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9JCr: // global
           I64[Sp - 8] = block_c9JCm_info;
           Sp = Sp - 8;
           call stg_numSparks#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.numSparks1_info" {
     GHC.Conc.Sync.numSparks1_info:
         const GHC.Conc.Sync.numSparks1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c9JCm() //  [R1]
         { []
         }
     {offset
       c9JCm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9JCu; else goto c9JCt;
       c9JCu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9JCt: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JCm_info" {
     block_c9JCm_info:
         const _c9JCm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.451065145 UTC

[section ""data" . GHC.Conc.Sync.numSparks_closure" {
     GHC.Conc.Sync.numSparks_closure:
         const GHC.Conc.Sync.numSparks_info;
 },
 GHC.Conc.Sync.numSparks_entry() //  []
         { []
         }
     {offset
       c9JCI: // global
           call GHC.Conc.Sync.numSparks1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.numSparks_info" {
     GHC.Conc.Sync.numSparks_info:
         const GHC.Conc.Sync.numSparks_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.455632757 UTC

[section ""data" . GHC.Conc.Sync.throwTo1_closure" {
     GHC.Conc.Sync.throwTo1_closure:
         const GHC.Conc.Sync.throwTo1_info;
 },
 sat_s9FwG_entry() //  [R1]
         { []
         }
     {offset
       c9JD2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9JD3; else goto c9JD4;
       c9JD3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9JD4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9FwG_info" {
     sat_s9FwG_info:
         const sat_s9FwG_entry;
         const 2;
         const 18;
 },
 GHC.Conc.Sync.throwTo1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9JD5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9JD7; else goto c9JD8;
       c9JD7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.throwTo1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JD8: // global
           I64[Sp - 24] = block_c9JCT_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9JDe; else goto c9JCU;
       u9JDe: // global
           call _c9JCT(R1) args: 0, res: 0, upd: 0;
       c9JCU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.throwTo1_info" {
     GHC.Conc.Sync.throwTo1_info:
         const GHC.Conc.Sync.throwTo1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9JCT() //  [R1]
         { []
         }
     {offset
       c9JCT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9JDb; else goto c9JDa;
       c9JDb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9JDa: // global
           _s9FwF::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9FwG_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c9JD6_info;
           R2 = Hp - 24;
           R1 = _s9FwF::P64;
           Sp = Sp + 16;
           call stg_killThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JCT_info" {
     block_c9JCT_info:
         const _c9JCT;
         const 2;
         const 30;
 },
 _c9JD6() //  []
         { []
         }
     {offset
       c9JD6: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JD6_info" {
     block_c9JD6_info:
         const _c9JD6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.463765131 UTC

[section ""data" . GHC.Conc.Sync.throwTo_closure" {
     GHC.Conc.Sync.throwTo_closure:
         const GHC.Conc.Sync.throwTo_info;
 },
 GHC.Conc.Sync.throwTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9JDD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.throwTo1_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.throwTo_info" {
     GHC.Conc.Sync.throwTo_info:
         const GHC.Conc.Sync.throwTo_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.467684373 UTC

[section ""data" . GHC.Conc.Sync.myThreadId1_closure" {
     GHC.Conc.Sync.myThreadId1_closure:
         const GHC.Conc.Sync.myThreadId1_info;
 },
 GHC.Conc.Sync.myThreadId1_entry() //  []
         { []
         }
     {offset
       c9JDP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9JDT; else goto c9JDS;
       c9JDT: // global
           HpAlloc = 16;
           R1 = GHC.Conc.Sync.myThreadId1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9JDS: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           I64[Hp] = CurrentTSO;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.myThreadId1_info" {
     GHC.Conc.Sync.myThreadId1_info:
         const GHC.Conc.Sync.myThreadId1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.471657621 UTC

[section ""data" . GHC.Conc.Sync.myThreadId_closure" {
     GHC.Conc.Sync.myThreadId_closure:
         const GHC.Conc.Sync.myThreadId_info;
 },
 GHC.Conc.Sync.myThreadId_entry() //  []
         { []
         }
     {offset
       c9JE4: // global
           call GHC.Conc.Sync.myThreadId1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.myThreadId_info" {
     GHC.Conc.Sync.myThreadId_info:
         const GHC.Conc.Sync.myThreadId_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.475095084 UTC

[section ""data" . GHC.Conc.Sync.yield1_closure" {
     GHC.Conc.Sync.yield1_closure:
         const GHC.Conc.Sync.yield1_info;
 },
 GHC.Conc.Sync.yield1_entry() //  []
         { []
         }
     {offset
       c9JEh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9JEi; else goto c9JEj;
       c9JEi: // global
           R1 = GHC.Conc.Sync.yield1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9JEj: // global
           I64[Sp - 8] = block_c9JEf_info;
           Sp = Sp - 8;
           call stg_yield#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.yield1_info" {
     GHC.Conc.Sync.yield1_info:
         const GHC.Conc.Sync.yield1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c9JEf() //  []
         { []
         }
     {offset
       c9JEf: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JEf_info" {
     block_c9JEf_info:
         const _c9JEf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.479748446 UTC

[section ""data" . GHC.Conc.Sync.yield_closure" {
     GHC.Conc.Sync.yield_closure:
         const GHC.Conc.Sync.yield_info;
 },
 GHC.Conc.Sync.yield_entry() //  []
         { []
         }
     {offset
       c9JEy: // global
           call GHC.Conc.Sync.yield1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.yield_info" {
     GHC.Conc.Sync.yield_info:
         const GHC.Conc.Sync.yield_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.484396431 UTC

[section ""data" . GHC.Conc.Sync.labelThread1_closure" {
     GHC.Conc.Sync.labelThread1_closure:
         const GHC.Conc.Sync.labelThread1_info;
         const 0;
 },
 sat_s9FwZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c9JEW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JF0; else goto c9JF1;
       c9JF0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9JF1: // global
           I64[Sp - 16] = block_c9JET_info;
           _s9FwT::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _s9FwT::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9JF5; else goto c9JEU;
       u9JF5: // global
           call _c9JET(R1) args: 0, res: 0, upd: 0;
       c9JEU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FwZ_info" {
     sat_s9FwZ_info:
         const sat_s9FwZ_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9JET() //  [R1]
         { []
         }
     {offset
       c9JET: // global
           _s9FwT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9JEZ_info;
           R2 = I64[R1 + 7];
           R1 = _s9FwT::P64;
           Sp = Sp + 8;
           call stg_labelThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JET_info" {
     block_c9JET_info:
         const _c9JET;
         const 1;
         const 30;
 },
 _c9JEZ() //  []
         { []
         }
     {offset
       c9JEZ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JEZ_info" {
     block_c9JEZ_info:
         const _c9JEZ;
         const 0;
         const 30;
 },
 GHC.Conc.Sync.labelThread1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JF6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JF7; else goto c9JF8;
       c9JF7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.labelThread1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JF8: // global
           I64[Sp - 16] = block_c9JEJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9JFc; else goto c9JEK;
       u9JFc: // global
           call _c9JEJ(R1) args: 0, res: 0, upd: 0;
       c9JEK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.labelThread1_info" {
     GHC.Conc.Sync.labelThread1_info:
         const GHC.Conc.Sync.labelThread1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S9FOI_srt+64;
 },
 _c9JEJ() //  [R1]
         { []
         }
     {offset
       c9JEJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9JFb; else goto c9JFa;
       c9JFb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9JFa: // global
           _s9FwT::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s9FwZ_info;
           P64[Hp] = _s9FwT::P64;
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JEJ_info" {
     block_c9JEJ_info:
         const _c9JEJ;
         const 1;
         const 4294967326;
         const S9FOI_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.494353461 UTC

[section ""data" . GHC.Conc.Sync.labelThread_closure" {
     GHC.Conc.Sync.labelThread_closure:
         const GHC.Conc.Sync.labelThread_info;
         const 0;
 },
 GHC.Conc.Sync.labelThread_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JFC: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.labelThread1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.labelThread_info" {
     GHC.Conc.Sync.labelThread_info:
         const GHC.Conc.Sync.labelThread_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S9FOI_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.49815817 UTC

[section ""data" . GHC.Conc.Sync.pseq_closure" {
     GHC.Conc.Sync.pseq_closure:
         const GHC.Conc.Sync.pseq_info;
 },
 GHC.Conc.Sync.pseq_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JFP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JFQ; else goto c9JFR;
       c9JFQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.pseq_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JFR: // global
           I64[Sp - 16] = block_c9JFN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.pseq_info" {
     GHC.Conc.Sync.pseq_info:
         const GHC.Conc.Sync.pseq_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9JFN() //  []
         { []
         }
     {offset
       c9JFN: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JFN_info" {
     block_c9JFN_info:
         const _c9JFN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.50328603 UTC

[section ""data" . GHC.Conc.Sync.par_closure" {
     GHC.Conc.Sync.par_closure:
         const GHC.Conc.Sync.par_info;
 },
 GHC.Conc.Sync.par_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JGa: // global
           _s9Fx4::P64 = R3;
           (_c9JG5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [] newSpark(BaseReg, R2);
           R1 = _s9Fx4::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.par_info" {
     GHC.Conc.Sync.par_info:
         const GHC.Conc.Sync.par_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.507171183 UTC

[section ""data" . GHC.Conc.Sync.runSparks_loop_closure" {
     GHC.Conc.Sync.runSparks_loop_closure:
         const GHC.Conc.Sync.runSparks_loop_info;
 },
 GHC.Conc.Sync.runSparks_loop_entry() //  []
         { []
         }
     {offset
       c9JGu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9JGv; else goto u9JGD;
       c9JGv: // global
           R1 = GHC.Conc.Sync.runSparks_loop_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       u9JGD: // global
           call _c9JGj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.runSparks_loop_info" {
     GHC.Conc.Sync.runSparks_loop_info:
         const GHC.Conc.Sync.runSparks_loop_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c9JGj() //  []
         { []
         }
     {offset
       c9JGj: // global
           I64[Sp - 8] = block_c9JGm_info;
           Sp = Sp - 8;
           call stg_getSpark#() args: 8, res: 8, upd: 8;
     }
 },
 _c9JGm() //  [R1, R2]
         { []
         }
     {offset
       c9JGm: // global
           if (R1 == 0) goto c9JGt; else goto c9JGs;
       c9JGt: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9JGs: // global
           I64[Sp] = block_c9JGz_info;
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JGm_info" {
     block_c9JGm_info:
         const _c9JGm;
         const 0;
         const 30;
 },
 _c9JGz() //  []
         { []
         }
     {offset
       c9JGz: // global
           Sp = Sp + 8;
           call _c9JGj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JGz_info" {
     block_c9JGz_info:
         const _c9JGz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.514045557 UTC

[section ""data" . GHC.Conc.Sync.runSparks_closure" {
     GHC.Conc.Sync.runSparks_closure:
         const GHC.Conc.Sync.runSparks_info;
 },
 GHC.Conc.Sync.runSparks_entry() //  []
         { []
         }
     {offset
       c9JGX: // global
           call GHC.Conc.Sync.runSparks_loop_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.runSparks_info" {
     GHC.Conc.Sync.runSparks_info:
         const GHC.Conc.Sync.runSparks_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.518577383 UTC

[section ""data" . GHC.Conc.Sync.threadCapability1_closure" {
     GHC.Conc.Sync.threadCapability1_closure:
         const GHC.Conc.Sync.threadCapability1_info;
 },
 sat_s9Fxo_entry() //  [R1]
         { []
         }
     {offset
       c9JHp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JHq; else goto c9JHr;
       c9JHq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9JHr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c9JHo; else goto c9JHn;
       c9JHo: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9JHn: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9Fxo_info" {
     sat_s9Fxo_info:
         const sat_s9Fxo_entry;
         const 4294967296;
         const 17;
 },
 GHC.Conc.Sync.threadCapability1_entry() //  [R2]
         { []
         }
     {offset
       c9JHs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9JHv; else goto c9JHw;
       c9JHv: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.threadCapability1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9JHw: // global
           I64[Sp - 8] = block_c9JH8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9JHD; else goto c9JH9;
       u9JHD: // global
           call _c9JH8(R1) args: 0, res: 0, upd: 0;
       c9JH9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.threadCapability1_info" {
     GHC.Conc.Sync.threadCapability1_info:
         const GHC.Conc.Sync.threadCapability1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9JH8() //  [R1]
         { []
         }
     {offset
       c9JH8: // global
           I64[Sp] = block_c9JHd_info;
           R1 = P64[R1 + 7];
           call stg_threadStatus#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JH8_info" {
     block_c9JH8_info:
         const _c9JH8;
         const 0;
         const 30;
 },
 _c9JHd() //  [R2, R3]
         { []
         }
     {offset
       c9JHd: // global
           I64[Sp - 8] = R3;
           I64[Sp] = R2;
           Sp = Sp - 16;
           call _c9JHe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JHd_info" {
     block_c9JHd_info:
         const _c9JHd;
         const 0;
         const 30;
 },
 _c9JHe() //  []
         { []
         }
     {offset
       c9JHe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c9JHA; else goto c9JHz;
       c9JHA: // global
           HpAlloc = 64;
           I64[Sp] = block_c9JHe_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9JHz: // global
           I64[Hp - 56] = sat_s9Fxo_info;
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JHe_info" {
     block_c9JHe_info:
         const _c9JHe;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.528502353 UTC

[section ""data" . GHC.Conc.Sync.threadCapability_closure" {
     GHC.Conc.Sync.threadCapability_closure:
         const GHC.Conc.Sync.threadCapability_info;
 },
 GHC.Conc.Sync.threadCapability_entry() //  [R2]
         { []
         }
     {offset
       c9JI8: // global
           R2 = R2;
           call GHC.Conc.Sync.threadCapability1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.threadCapability_info" {
     GHC.Conc.Sync.threadCapability_info:
         const GHC.Conc.Sync.threadCapability_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.532471444 UTC

[section ""data" . GHC.Conc.Sync.mkWeakThreadId1_closure" {
     GHC.Conc.Sync.mkWeakThreadId1_closure:
         const GHC.Conc.Sync.mkWeakThreadId1_info;
 },
 GHC.Conc.Sync.mkWeakThreadId1_entry() //  [R2]
         { []
         }
     {offset
       c9JIm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9JIs; else goto c9JIt;
       c9JIs: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.mkWeakThreadId1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9JIt: // global
           I64[Sp - 8] = block_c9JIj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9JIy; else goto c9JIk;
       u9JIy: // global
           call _c9JIj(R1) args: 0, res: 0, upd: 0;
       c9JIk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.mkWeakThreadId1_info" {
     GHC.Conc.Sync.mkWeakThreadId1_info:
         const GHC.Conc.Sync.mkWeakThreadId1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9JIj() //  [R1]
         { []
         }
     {offset
       c9JIj: // global
           I64[Sp] = block_c9JIp_info;
           R2 = R1;
           R1 = P64[R1 + 7];
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JIj_info" {
     block_c9JIj_info:
         const _c9JIj;
         const 0;
         const 30;
 },
 _c9JIp() //  [R1]
         { []
         }
     {offset
       c9JIp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9JIx; else goto c9JIw;
       c9JIx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9JIw: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JIp_info" {
     block_c9JIp_info:
         const _c9JIp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.53963026 UTC

[section ""data" . GHC.Conc.Sync.mkWeakThreadId_closure" {
     GHC.Conc.Sync.mkWeakThreadId_closure:
         const GHC.Conc.Sync.mkWeakThreadId_info;
 },
 GHC.Conc.Sync.mkWeakThreadId_entry() //  [R2]
         { []
         }
     {offset
       c9JIQ: // global
           R2 = R2;
           call GHC.Conc.Sync.mkWeakThreadId1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.mkWeakThreadId_info" {
     GHC.Conc.Sync.mkWeakThreadId_info:
         const GHC.Conc.Sync.mkWeakThreadId_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.543594029 UTC

[section ""data" . GHC.Conc.Sync.newStablePtrPrimMVar1_closure" {
     GHC.Conc.Sync.newStablePtrPrimMVar1_closure:
         const GHC.Conc.Sync.newStablePtrPrimMVar1_info;
 },
 GHC.Conc.Sync.newStablePtrPrimMVar1_entry() //  [R2]
         { []
         }
     {offset
       c9JJ4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9JJa; else goto c9JJb;
       c9JJa: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.newStablePtrPrimMVar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9JJb: // global
           I64[Sp - 8] = block_c9JJ1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9JJg; else goto c9JJ2;
       u9JJg: // global
           call _c9JJ1(R1) args: 0, res: 0, upd: 0;
       c9JJ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.newStablePtrPrimMVar1_info" {
     GHC.Conc.Sync.newStablePtrPrimMVar1_info:
         const GHC.Conc.Sync.newStablePtrPrimMVar1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9JJ1() //  [R1]
         { []
         }
     {offset
       c9JJ1: // global
           I64[Sp] = block_c9JJ7_info;
           R1 = P64[R1 + 7];
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JJ1_info" {
     block_c9JJ1_info:
         const _c9JJ1;
         const 0;
         const 30;
 },
 _c9JJ7() //  [R1]
         { []
         }
     {offset
       c9JJ7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9JJf; else goto c9JJe;
       c9JJf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9JJe: // global
           I64[Hp - 8] = GHC.Stable.StablePtr_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JJ7_info" {
     block_c9JJ7_info:
         const _c9JJ7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.550256249 UTC

[section ""data" . GHC.Conc.Sync.newStablePtrPrimMVar_closure" {
     GHC.Conc.Sync.newStablePtrPrimMVar_closure:
         const GHC.Conc.Sync.newStablePtrPrimMVar_info;
 },
 GHC.Conc.Sync.newStablePtrPrimMVar_entry() //  [R2]
         { []
         }
     {offset
       c9JJy: // global
           R2 = R2;
           call GHC.Conc.Sync.newStablePtrPrimMVar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.newStablePtrPrimMVar_info" {
     GHC.Conc.Sync.newStablePtrPrimMVar_info:
         const GHC.Conc.Sync.newStablePtrPrimMVar_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.553803662 UTC

[section ""data" . $c>>=_r9FuK_closure" {
     $c>>=_r9FuK_closure:
         const $c>>=_r9FuK_info;
 },
 $c>>=_r9FuK_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JJL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JJM; else goto c9JJN;
       c9JJM: // global
           R3 = R3;
           R2 = R2;
           R1 = $c>>=_r9FuK_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JJN: // global
           I64[Sp - 16] = block_c9JJJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $c>>=_r9FuK_info" {
     $c>>=_r9FuK_info:
         const $c>>=_r9FuK_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9JJJ() //  [R1]
         { []
         }
     {offset
       c9JJJ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JJJ_info" {
     block_c9JJJ_info:
         const _c9JJJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.558598461 UTC

[section ""data" . GHC.Conc.Sync.$fMonadSTM_$c>>=_closure" {
     GHC.Conc.Sync.$fMonadSTM_$c>>=_closure:
         const GHC.Conc.Sync.$fMonadSTM_$c>>=_info;
 },
 GHC.Conc.Sync.$fMonadSTM_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JK1: // global
           R3 = R3;
           R2 = R2;
           call $c>>=_r9FuK_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fMonadSTM_$c>>=_info" {
     GHC.Conc.Sync.$fMonadSTM_$c>>=_info:
         const GHC.Conc.Sync.$fMonadSTM_$c>>=_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.562204124 UTC

[section ""data" . $c*>_r9FuL_closure" {
     $c*>_r9FuL_closure:
         const $c*>_r9FuL_info;
 },
 $c*>_r9FuL_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JKe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JKf; else goto c9JKg;
       c9JKf: // global
           R3 = R3;
           R2 = R2;
           R1 = $c*>_r9FuL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JKg: // global
           I64[Sp - 16] = block_c9JKc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $c*>_r9FuL_info" {
     $c*>_r9FuL_info:
         const $c*>_r9FuL_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9JKc() //  []
         { []
         }
     {offset
       c9JKc: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JKc_info" {
     block_c9JKc_info:
         const _c9JKc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.567459917 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM_$c*>_closure" {
     GHC.Conc.Sync.$fApplicativeSTM_$c*>_closure:
         const GHC.Conc.Sync.$fApplicativeSTM_$c*>_info;
 },
 GHC.Conc.Sync.$fApplicativeSTM_$c*>_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JKu: // global
           R3 = R3;
           R2 = R2;
           call $c*>_r9FuL_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fApplicativeSTM_$c*>_info" {
     GHC.Conc.Sync.$fApplicativeSTM_$c*>_info:
         const GHC.Conc.Sync.$fApplicativeSTM_$c*>_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.571897075 UTC

[section ""data" . GHC.Conc.Sync.orElse_closure" {
     GHC.Conc.Sync.orElse_closure:
         const GHC.Conc.Sync.orElse_info;
 },
 GHC.Conc.Sync.orElse_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JKF: // global
           _B3::P64 = R2;
           R2 = R3;
           R1 = _B3::P64;
           call stg_catchRetry#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.orElse_info" {
     GHC.Conc.Sync.orElse_info:
         const GHC.Conc.Sync.orElse_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.576638107 UTC

[section ""data" . GHC.Conc.Sync.catchSTM1_closure" {
     GHC.Conc.Sync.catchSTM1_closure:
         const GHC.Conc.Sync.catchSTM1_info;
 },
 sat_s9FxY_entry() //  [R1]
         { []
         }
     {offset
       c9JL4: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FxY_info" {
     sat_s9FxY_info:
         const sat_s9FxY_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9Fy0_entry() //  [R1, R2]
         { []
         }
     {offset
       c9JLb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9JLc; else goto c9JLd;
       c9JLc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9JLd: // global
           I64[Sp - 24] = block_c9JKV_info;
           _s9FxW::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = _s9FxW::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s9FxW::P64;
           Sp = Sp - 40;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Fy0_info" {
     sat_s9Fy0_info:
         const sat_s9Fy0_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9JKV() //  [R1]
         { []
         }
     {offset
       c9JKV: // global
           if (R1 & 7 == 1) goto c9JL8; else goto c9JL9;
       c9JL8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9JLg; else goto c9JLf;
       c9JLg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9JLf: // global
           I64[Hp - 8] = sat_s9FxY_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9JL9: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JKV_info" {
     block_c9JKV_info:
         const _c9JKV;
         const 2;
         const 30;
 },
 GHC.Conc.Sync.catchSTM1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9JLk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9JLo; else goto c9JLn;
       c9JLo: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.catchSTM1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JLn: // global
           I64[Hp - 16] = sat_s9Fy0_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 15;
           R1 = R3;
           call stg_catchSTM#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.catchSTM1_info" {
     GHC.Conc.Sync.catchSTM1_info:
         const GHC.Conc.Sync.catchSTM1_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.585005463 UTC

[section ""data" . GHC.Conc.Sync.catchSTM_closure" {
     GHC.Conc.Sync.catchSTM_closure:
         const GHC.Conc.Sync.catchSTM_info;
 },
 GHC.Conc.Sync.catchSTM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9JLM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.catchSTM1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.catchSTM_info" {
     GHC.Conc.Sync.catchSTM_info:
         const GHC.Conc.Sync.catchSTM_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.588819065 UTC

[section ""data" . $cpure_r9FuM_closure" {
     $cpure_r9FuM_closure:
         const $cpure_r9FuM_info;
 },
 $cpure_r9FuM_entry() //  [R2]
         { []
         }
     {offset
       c9JLX: // global
           R1 = R2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $cpure_r9FuM_info" {
     $cpure_r9FuM_info:
         const $cpure_r9FuM_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.59203037 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM_$cpure_closure" {
     GHC.Conc.Sync.$fApplicativeSTM_$cpure_closure:
         const GHC.Conc.Sync.$fApplicativeSTM_$cpure_info;
 },
 GHC.Conc.Sync.$fApplicativeSTM_$cpure_entry() //  [R2]
         { []
         }
     {offset
       c9JM9: // global
           R2 = R2;
           call $cpure_r9FuM_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fApplicativeSTM_$cpure_info" {
     GHC.Conc.Sync.$fApplicativeSTM_$cpure_info:
         const GHC.Conc.Sync.$fApplicativeSTM_$cpure_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.59522988 UTC

[section ""data" . GHC.Conc.Sync.unsafeIOToSTM1_closure" {
     GHC.Conc.Sync.unsafeIOToSTM1_closure:
         const GHC.Conc.Sync.unsafeIOToSTM1_info;
 },
 GHC.Conc.Sync.unsafeIOToSTM1_entry() //  [R2]
         { []
         }
     {offset
       c9JMk: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.unsafeIOToSTM1_info" {
     GHC.Conc.Sync.unsafeIOToSTM1_info:
         const GHC.Conc.Sync.unsafeIOToSTM1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.598905752 UTC

[section ""data" . GHC.Conc.Sync.unsafeIOToSTM_closure" {
     GHC.Conc.Sync.unsafeIOToSTM_closure:
         const GHC.Conc.Sync.unsafeIOToSTM_info;
 },
 GHC.Conc.Sync.unsafeIOToSTM_entry() //  [R2]
         { []
         }
     {offset
       c9JMv: // global
           R2 = R2;
           call GHC.Conc.Sync.unsafeIOToSTM1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.unsafeIOToSTM_info" {
     GHC.Conc.Sync.unsafeIOToSTM_info:
         const GHC.Conc.Sync.unsafeIOToSTM_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.602480607 UTC

[section ""data" . GHC.Conc.Sync.atomically_closure" {
     GHC.Conc.Sync.atomically_closure:
         const GHC.Conc.Sync.atomically_info;
 },
 GHC.Conc.Sync.atomically_entry() //  [R2]
         { []
         }
     {offset
       c9JMG: // global
           R1 = R2;
           call stg_atomically#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.atomically_info" {
     GHC.Conc.Sync.atomically_info:
         const GHC.Conc.Sync.atomically_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.605618094 UTC

[section ""data" . GHC.Conc.Sync.retry_closure" {
     GHC.Conc.Sync.retry_closure:
         const GHC.Conc.Sync.retry_info;
 },
 GHC.Conc.Sync.retry_entry() //  []
         { []
         }
     {offset
       c9JMR: // global
           call stg_retry#() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.retry_info" {
     GHC.Conc.Sync.retry_info:
         const GHC.Conc.Sync.retry_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.609401113 UTC

[section ""data" . GHC.Conc.Sync.throwSTM1_closure" {
     GHC.Conc.Sync.throwSTM1_closure:
         const GHC.Conc.Sync.throwSTM1_info;
 },
 sat_s9Fy7_entry() //  [R1]
         { []
         }
     {offset
       c9JN6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9JN7; else goto c9JN8;
       c9JN7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9JN8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9Fy7_info" {
     sat_s9Fy7_info:
         const sat_s9Fy7_entry;
         const 2;
         const 18;
 },
 GHC.Conc.Sync.throwSTM1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JN9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9JNd; else goto c9JNc;
       c9JNd: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.throwSTM1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JNc: // global
           I64[Hp - 24] = sat_s9Fy7_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.throwSTM1_info" {
     GHC.Conc.Sync.throwSTM1_info:
         const GHC.Conc.Sync.throwSTM1_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.614886242 UTC

[section ""data" . GHC.Conc.Sync.throwSTM_closure" {
     GHC.Conc.Sync.throwSTM_closure:
         const GHC.Conc.Sync.throwSTM_info;
 },
 GHC.Conc.Sync.throwSTM_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JNr: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.throwSTM1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.throwSTM_info" {
     GHC.Conc.Sync.throwSTM_info:
         const GHC.Conc.Sync.throwSTM_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.618551996 UTC

[section ""data" . GHC.Conc.Sync.newTVar1_closure" {
     GHC.Conc.Sync.newTVar1_closure:
         const GHC.Conc.Sync.newTVar1_info;
 },
 GHC.Conc.Sync.newTVar1_entry() //  [R2]
         { []
         }
     {offset
       c9JNF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9JNG; else goto c9JNH;
       c9JNG: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.newTVar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9JNH: // global
           I64[Sp - 8] = block_c9JNC_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_newTVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.newTVar1_info" {
     GHC.Conc.Sync.newTVar1_info:
         const GHC.Conc.Sync.newTVar1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9JNC() //  [R1]
         { []
         }
     {offset
       c9JNC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9JNK; else goto c9JNJ;
       c9JNK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9JNJ: // global
           I64[Hp - 8] = GHC.Conc.Sync.TVar_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JNC_info" {
     block_c9JNC_info:
         const _c9JNC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.62360132 UTC

[section ""data" . GHC.Conc.Sync.newTVar_closure" {
     GHC.Conc.Sync.newTVar_closure:
         const GHC.Conc.Sync.newTVar_info;
 },
 GHC.Conc.Sync.newTVar_entry() //  [R2]
         { []
         }
     {offset
       c9JNY: // global
           R2 = R2;
           call GHC.Conc.Sync.newTVar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.newTVar_info" {
     GHC.Conc.Sync.newTVar_info:
         const GHC.Conc.Sync.newTVar_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.627108151 UTC

[section ""data" . GHC.Conc.Sync.newTVarIO_closure" {
     GHC.Conc.Sync.newTVarIO_closure:
         const GHC.Conc.Sync.newTVarIO_info;
 },
 GHC.Conc.Sync.newTVarIO_entry() //  [R2]
         { []
         }
     {offset
       c9JO9: // global
           R2 = R2;
           call GHC.Conc.Sync.newTVar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.newTVarIO_info" {
     GHC.Conc.Sync.newTVarIO_info:
         const GHC.Conc.Sync.newTVarIO_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.6311911 UTC

[section ""data" . GHC.Conc.Sync.readTVarIO1_closure" {
     GHC.Conc.Sync.readTVarIO1_closure:
         const GHC.Conc.Sync.readTVarIO1_info;
 },
 GHC.Conc.Sync.readTVarIO1_entry() //  [R2]
         { []
         }
     {offset
       c9JOn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9JOo; else goto c9JOp;
       c9JOo: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.readTVarIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9JOp: // global
           I64[Sp - 8] = block_c9JOk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9JOt; else goto c9JOl;
       u9JOt: // global
           call _c9JOk(R1) args: 0, res: 0, upd: 0;
       c9JOl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.readTVarIO1_info" {
     GHC.Conc.Sync.readTVarIO1_info:
         const GHC.Conc.Sync.readTVarIO1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9JOk() //  [R1]
         { []
         }
     {offset
       c9JOk: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_readTVarIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JOk_info" {
     block_c9JOk_info:
         const _c9JOk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.63606869 UTC

[section ""data" . GHC.Conc.Sync.readTVarIO_closure" {
     GHC.Conc.Sync.readTVarIO_closure:
         const GHC.Conc.Sync.readTVarIO_info;
 },
 GHC.Conc.Sync.readTVarIO_entry() //  [R2]
         { []
         }
     {offset
       c9JOH: // global
           R2 = R2;
           call GHC.Conc.Sync.readTVarIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.readTVarIO_info" {
     GHC.Conc.Sync.readTVarIO_info:
         const GHC.Conc.Sync.readTVarIO_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.639823673 UTC

[section ""data" . GHC.Conc.Sync.readTVar1_closure" {
     GHC.Conc.Sync.readTVar1_closure:
         const GHC.Conc.Sync.readTVar1_info;
 },
 GHC.Conc.Sync.readTVar1_entry() //  [R2]
         { []
         }
     {offset
       c9JOV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9JOW; else goto c9JOX;
       c9JOW: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.readTVar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9JOX: // global
           I64[Sp - 8] = block_c9JOS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9JP1; else goto c9JOT;
       u9JP1: // global
           call _c9JOS(R1) args: 0, res: 0, upd: 0;
       c9JOT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.readTVar1_info" {
     GHC.Conc.Sync.readTVar1_info:
         const GHC.Conc.Sync.readTVar1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9JOS() //  [R1]
         { []
         }
     {offset
       c9JOS: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_readTVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JOS_info" {
     block_c9JOS_info:
         const _c9JOS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.644555808 UTC

[section ""data" . GHC.Conc.Sync.readTVar_closure" {
     GHC.Conc.Sync.readTVar_closure:
         const GHC.Conc.Sync.readTVar_info;
 },
 GHC.Conc.Sync.readTVar_entry() //  [R2]
         { []
         }
     {offset
       c9JPf: // global
           R2 = R2;
           call GHC.Conc.Sync.readTVar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.readTVar_info" {
     GHC.Conc.Sync.readTVar_info:
         const GHC.Conc.Sync.readTVar_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.648315012 UTC

[section ""data" . GHC.Conc.Sync.writeTVar1_closure" {
     GHC.Conc.Sync.writeTVar1_closure:
         const GHC.Conc.Sync.writeTVar1_info;
 },
 GHC.Conc.Sync.writeTVar1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JPt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JPx; else goto c9JPy;
       c9JPx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.writeTVar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JPy: // global
           I64[Sp - 16] = block_c9JPq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9JPC; else goto c9JPr;
       u9JPC: // global
           call _c9JPq(R1) args: 0, res: 0, upd: 0;
       c9JPr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.writeTVar1_info" {
     GHC.Conc.Sync.writeTVar1_info:
         const GHC.Conc.Sync.writeTVar1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9JPq() //  [R1]
         { []
         }
     {offset
       c9JPq: // global
           _s9Fyn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9JPw_info;
           R2 = _s9Fyn::P64;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JPq_info" {
     block_c9JPq_info:
         const _c9JPq;
         const 1;
         const 30;
 },
 _c9JPw() //  []
         { []
         }
     {offset
       c9JPw: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JPw_info" {
     block_c9JPw_info:
         const _c9JPw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.654760803 UTC

[section ""data" . GHC.Conc.Sync.writeTVar_closure" {
     GHC.Conc.Sync.writeTVar_closure:
         const GHC.Conc.Sync.writeTVar_info;
 },
 GHC.Conc.Sync.writeTVar_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JPU: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.writeTVar1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.writeTVar_info" {
     GHC.Conc.Sync.writeTVar_info:
         const GHC.Conc.Sync.writeTVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.661822233 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$ccompare_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$ccompare_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$ccompare_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JQg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JQh; else goto c9JQi;
       c9JQh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JQi: // global
           I64[Sp - 16] = block_c9JQ5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9JTl; else goto c9JQ6;
       u9JTl: // global
           call _c9JQ5(R1) args: 0, res: 0, upd: 0;
       c9JQ6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$ccompare_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$ccompare_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9JQ5() //  [R1]
         { []
         }
     {offset
       c9JQ5: // global
           _s9Fyt::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9JQ9;
               case 2 : goto c9JQa;
               case 3 : goto c9JQb;
               case 4 : goto c9JQc;
               case 5 : goto c9JQd;
               case 6 : goto c9JQe;
           }
       c9JQe: // global
           I64[Sp + 8] = block_c9JSs_info;
           R1 = _s9Fyt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JTk; else goto c9JSu;
       u9JTk: // global
           call _c9JSs(R1) args: 0, res: 0, upd: 0;
       c9JSu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JQd: // global
           I64[Sp + 8] = block_c9JS9_info;
           R1 = _s9Fyt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JTj; else goto c9JSb;
       u9JTj: // global
           call _c9JS9(R1) args: 0, res: 0, upd: 0;
       c9JSb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JQc: // global
           I64[Sp + 8] = block_c9JRM_info;
           R1 = _s9Fyt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JTi; else goto c9JRO;
       u9JTi: // global
           call _c9JRM(R1) args: 0, res: 0, upd: 0;
       c9JRO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JQb: // global
           I64[Sp + 8] = block_c9JRl_info;
           R1 = _s9Fyt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JTh; else goto c9JRn;
       u9JTh: // global
           call _c9JRl(R1) args: 0, res: 0, upd: 0;
       c9JRn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JQa: // global
           I64[Sp + 8] = block_c9JQQ_info;
           R1 = _s9Fyt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JTg; else goto c9JQS;
       u9JTg: // global
           call _c9JQQ(R1) args: 0, res: 0, upd: 0;
       c9JQS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JQ9: // global
           I64[Sp + 8] = block_c9JQl_info;
           R1 = _s9Fyt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JTf; else goto c9JQn;
       u9JTf: // global
           call _c9JQl(R1) args: 0, res: 0, upd: 0;
       c9JQn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JQ5_info" {
     block_c9JQ5_info:
         const _c9JQ5;
         const 1;
         const 30;
 },
 _c9JSs() //  [R1]
         { []
         }
     {offset
       c9JSs: // global
           if (R1 & 7 == 6) goto u9JSQ; else goto u9JSR;
       u9JSQ: // global
           Sp = Sp + 8;
           call _c9JSE() args: 0, res: 0, upd: 0;
       u9JSR: // global
           Sp = Sp + 8;
           call _c9JSA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JSs_info" {
     block_c9JSs_info:
         const _c9JSs;
         const 0;
         const 30;
 },
 _c9JS9() //  [R1]
         { []
         }
     {offset
       c9JS9: // global
           _c9JSG::P64 = R1 & 7;
           if (_c9JSG::P64 != 5) goto u9JSP; else goto u9JSS;
       u9JSP: // global
           if (_c9JSG::P64 != 6) goto u9JSU; else goto u9JST;
       u9JSU: // global
           Sp = Sp + 8;
           call _c9JSA() args: 0, res: 0, upd: 0;
       u9JST: // global
           Sp = Sp + 8;
           call _c9JSp() args: 0, res: 0, upd: 0;
       u9JSS: // global
           Sp = Sp + 8;
           call _c9JSE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JS9_info" {
     block_c9JS9_info:
         const _c9JS9;
         const 0;
         const 30;
 },
 _c9JRM() //  [R1]
         { []
         }
     {offset
       c9JRM: // global
           _c9JSH::P64 = R1 & 7;
           if (_c9JSH::P64 < 5) goto u9JSN; else goto u9JSO;
       u9JSN: // global
           if (_c9JSH::P64 < 4) goto u9JSW; else goto u9JSV;
       u9JSW: // global
           Sp = Sp + 8;
           call _c9JSA() args: 0, res: 0, upd: 0;
       u9JSV: // global
           Sp = Sp + 8;
           call _c9JSE() args: 0, res: 0, upd: 0;
       u9JSO: // global
           if (_c9JSH::P64 < 6) goto u9JSY; else goto u9JSY;
       u9JSY: // global
           Sp = Sp + 8;
           call _c9JSp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JRM_info" {
     block_c9JRM_info:
         const _c9JRM;
         const 0;
         const 30;
 },
 _c9JRl() //  [R1]
         { []
         }
     {offset
       c9JRl: // global
           _c9JSI::P64 = R1 & 7;
           if (_c9JSI::P64 < 4) goto u9JSL; else goto u9JSM;
       u9JSL: // global
           if (_c9JSI::P64 < 3) goto u9JT0; else goto u9JSZ;
       u9JT0: // global
           Sp = Sp + 8;
           call _c9JSA() args: 0, res: 0, upd: 0;
       u9JSZ: // global
           Sp = Sp + 8;
           call _c9JSE() args: 0, res: 0, upd: 0;
       u9JSM: // global
           if (_c9JSI::P64 != 5) goto u9JT2; else goto u9JT2;
       u9JT2: // global
           Sp = Sp + 8;
           call _c9JSp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JRl_info" {
     block_c9JRl_info:
         const _c9JRl;
         const 0;
         const 30;
 },
 _c9JQQ() //  [R1]
         { []
         }
     {offset
       c9JQQ: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9JT3;
               case 2 : goto u9JT4;
               case 3, 4, 5, 6 : goto u9JT8;
           }
       u9JT8: // global
           Sp = Sp + 8;
           call _c9JSp() args: 0, res: 0, upd: 0;
       u9JT4: // global
           Sp = Sp + 8;
           call _c9JSE() args: 0, res: 0, upd: 0;
       u9JT3: // global
           Sp = Sp + 8;
           call _c9JSA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JQQ_info" {
     block_c9JQQ_info:
         const _c9JQQ;
         const 0;
         const 30;
 },
 _c9JSA() //  []
         { []
         }
     {offset
       c9JSA: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9JQl() //  [R1]
         { []
         }
     {offset
       c9JQl: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9JT9;
               case 2, 3, 4, 5, 6 : goto u9JTe;
           }
       u9JTe: // global
           Sp = Sp + 8;
           call _c9JSp() args: 0, res: 0, upd: 0;
       u9JT9: // global
           Sp = Sp + 8;
           call _c9JSE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JQl_info" {
     block_c9JQl_info:
         const _c9JQl;
         const 0;
         const 30;
 },
 _c9JSp() //  []
         { []
         }
     {offset
       c9JSp: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9JSE() //  []
         { []
         }
     {offset
       c9JSE: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.682885794 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$c<_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$c<_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$c<_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JUL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JUM; else goto c9JUN;
       c9JUM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JUN: // global
           I64[Sp - 16] = block_c9JUA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9JXl; else goto c9JUB;
       u9JXl: // global
           call _c9JUA(R1) args: 0, res: 0, upd: 0;
       c9JUB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$c<_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$c<_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9JUA() //  [R1]
         { []
         }
     {offset
       c9JUA: // global
           _s9FyC::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9JUE;
               case 2 : goto c9JUF;
               case 3 : goto c9JUG;
               case 4 : goto c9JUH;
               case 5 : goto c9JUI;
               case 6 : goto c9JUJ;
           }
       c9JUJ: // global
           I64[Sp + 8] = block_c9JWH_info;
           R1 = _s9FyC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JXk; else goto c9JWJ;
       u9JXk: // global
           call _c9JWH() args: 0, res: 0, upd: 0;
       c9JWJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JUI: // global
           I64[Sp + 8] = block_c9JWs_info;
           R1 = _s9FyC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JXj; else goto c9JWu;
       u9JXj: // global
           call _c9JWs(R1) args: 0, res: 0, upd: 0;
       c9JWu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JUH: // global
           I64[Sp + 8] = block_c9JW9_info;
           R1 = _s9FyC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JXi; else goto c9JWb;
       u9JXi: // global
           call _c9JW9(R1) args: 0, res: 0, upd: 0;
       c9JWb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JUG: // global
           I64[Sp + 8] = block_c9JVM_info;
           R1 = _s9FyC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JXh; else goto c9JVO;
       u9JXh: // global
           call _c9JVM(R1) args: 0, res: 0, upd: 0;
       c9JVO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JUF: // global
           I64[Sp + 8] = block_c9JVl_info;
           R1 = _s9FyC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JXg; else goto c9JVn;
       u9JXg: // global
           call _c9JVl(R1) args: 0, res: 0, upd: 0;
       c9JVn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JUE: // global
           I64[Sp + 8] = block_c9JUQ_info;
           R1 = _s9FyC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9JXf; else goto c9JUS;
       u9JXf: // global
           call _c9JUQ(R1) args: 0, res: 0, upd: 0;
       c9JUS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JUA_info" {
     block_c9JUA_info:
         const _c9JUA;
         const 1;
         const 30;
 },
 _c9JWH() //  []
         { []
         }
     {offset
       c9JWH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JWH_info" {
     block_c9JWH_info:
         const _c9JWH;
         const 0;
         const 30;
 },
 _c9JWs() //  [R1]
         { []
         }
     {offset
       c9JWs: // global
           if (R1 & 7 == 6) goto u9JWX; else goto u9JWY;
       u9JWX: // global
           Sp = Sp + 8;
           call _c9JWE() args: 0, res: 0, upd: 0;
       u9JWY: // global
           Sp = Sp + 8;
           call _c9JWA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JWs_info" {
     block_c9JWs_info:
         const _c9JWs;
         const 0;
         const 30;
 },
 _c9JW9() //  [R1]
         { []
         }
     {offset
       c9JW9: // global
           _c9JWP::P64 = R1 & 7;
           if (_c9JWP::P64 != 5) goto u9JWW; else goto u9JWZ;
       u9JWW: // global
           if (_c9JWP::P64 != 6) goto u9JX1; else goto u9JX0;
       u9JX1: // global
           Sp = Sp + 8;
           call _c9JWA() args: 0, res: 0, upd: 0;
       u9JX0: // global
           Sp = Sp + 8;
           goto u9JXu;
       u9JWZ: // global
           Sp = Sp + 8;
           goto u9JXu;
       u9JXu: // global
           call _c9JWE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JW9_info" {
     block_c9JW9_info:
         const _c9JW9;
         const 0;
         const 30;
 },
 _c9JVM() //  [R1]
         { []
         }
     {offset
       c9JVM: // global
           _c9JWQ::P64 = R1 & 7;
           if (_c9JWQ::P64 < 4) goto u9JX2; else goto u9JWV;
       u9JX2: // global
           Sp = Sp + 8;
           call _c9JWA() args: 0, res: 0, upd: 0;
       u9JWV: // global
           if (_c9JWQ::P64 != 5) goto u9JX4; else goto u9JX4;
       u9JX4: // global
           Sp = Sp + 8;
           call _c9JWE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JVM_info" {
     block_c9JVM_info:
         const _c9JVM;
         const 0;
         const 30;
 },
 _c9JVl() //  [R1]
         { []
         }
     {offset
       c9JVl: // global
           _c9JWR::P64 = R1 & 7;
           if (_c9JWR::P64 < 6) goto u9JWT; else goto u9JX5;
       u9JWT: // global
           if (_c9JWR::P64 < 3) goto u9JX6; else goto u9JWU;
       u9JX6: // global
           Sp = Sp + 8;
           call _c9JWA() args: 0, res: 0, upd: 0;
       u9JWU: // global
           if (_c9JWR::P64 != 4) goto u9JX8; else goto u9JX8;
       u9JX8: // global
           Sp = Sp + 8;
           goto u9JXq;
       u9JX5: // global
           Sp = Sp + 8;
           goto u9JXq;
       u9JXq: // global
           call _c9JWE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JVl_info" {
     block_c9JVl_info:
         const _c9JVl;
         const 0;
         const 30;
 },
 _c9JUQ() //  [R1]
         { []
         }
     {offset
       c9JUQ: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9JX9;
               case 2, 3, 4, 5, 6 : goto u9JXe;
           }
       u9JXe: // global
           Sp = Sp + 8;
           call _c9JWE() args: 0, res: 0, upd: 0;
       u9JX9: // global
           Sp = Sp + 8;
           call _c9JWA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JUQ_info" {
     block_c9JUQ_info:
         const _c9JUQ;
         const 0;
         const 30;
 },
 _c9JWE() //  []
         { []
         }
     {offset
       c9JWE: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9JWA() //  []
         { []
         }
     {offset
       c9JWA: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.702439771 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$c<=_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$c<=_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$c<=_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9JYC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9JYD; else goto c9JYE;
       c9JYD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9JYE: // global
           I64[Sp - 16] = block_c9JYr_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9K1c; else goto c9JYs;
       u9K1c: // global
           call _c9JYr(R1) args: 0, res: 0, upd: 0;
       c9JYs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$c<=_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$c<=_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9JYr() //  [R1]
         { []
         }
     {offset
       c9JYr: // global
           _s9FyK::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9JYv;
               case 2 : goto c9JYw;
               case 3 : goto c9JYx;
               case 4 : goto c9JYy;
               case 5 : goto c9JYz;
               case 6 : goto c9JYA;
           }
       c9JYA: // global
           I64[Sp + 8] = block_c9K0y_info;
           R1 = _s9FyK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K1b; else goto c9K0A;
       u9K1b: // global
           call _c9K0y() args: 0, res: 0, upd: 0;
       c9K0A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JYz: // global
           I64[Sp + 8] = block_c9K0j_info;
           R1 = _s9FyK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K1a; else goto c9K0l;
       u9K1a: // global
           call _c9K0j(R1) args: 0, res: 0, upd: 0;
       c9K0l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JYy: // global
           I64[Sp + 8] = block_c9K00_info;
           R1 = _s9FyK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K19; else goto c9K02;
       u9K19: // global
           call _c9K00(R1) args: 0, res: 0, upd: 0;
       c9K02: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JYx: // global
           I64[Sp + 8] = block_c9JZD_info;
           R1 = _s9FyK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K18; else goto c9JZF;
       u9K18: // global
           call _c9JZD(R1) args: 0, res: 0, upd: 0;
       c9JZF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JYw: // global
           I64[Sp + 8] = block_c9JZc_info;
           R1 = _s9FyK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K17; else goto c9JZe;
       u9K17: // global
           call _c9JZc(R1) args: 0, res: 0, upd: 0;
       c9JZe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9JYv: // global
           I64[Sp + 8] = block_c9JYH_info;
           R1 = _s9FyK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K16; else goto c9JYJ;
       u9K16: // global
           call _c9JYH(R1) args: 0, res: 0, upd: 0;
       c9JYJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9JYr_info" {
     block_c9JYr_info:
         const _c9JYr;
         const 1;
         const 30;
 },
 _c9K0y() //  []
         { []
         }
     {offset
       c9K0y: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9K0y_info" {
     block_c9K0y_info:
         const _c9K0y;
         const 0;
         const 30;
 },
 _c9K0j() //  [R1]
         { []
         }
     {offset
       c9K0j: // global
           if (R1 & 7 == 6) goto u9K0O; else goto u9K0P;
       u9K0O: // global
           Sp = Sp + 8;
           call _c9K0v() args: 0, res: 0, upd: 0;
       u9K0P: // global
           Sp = Sp + 8;
           call _c9K0r() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K0j_info" {
     block_c9K0j_info:
         const _c9K0j;
         const 0;
         const 30;
 },
 _c9K00() //  [R1]
         { []
         }
     {offset
       c9K00: // global
           _c9K0G::P64 = R1 & 7;
           if (_c9K0G::P64 != 5) goto u9K0N; else goto u9K0Q;
       u9K0N: // global
           if (_c9K0G::P64 != 6) goto u9K0S; else goto u9K0R;
       u9K0S: // global
           Sp = Sp + 8;
           call _c9K0r() args: 0, res: 0, upd: 0;
       u9K0R: // global
           Sp = Sp + 8;
           goto u9K1l;
       u9K0Q: // global
           Sp = Sp + 8;
           goto u9K1l;
       u9K1l: // global
           call _c9K0v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K00_info" {
     block_c9K00_info:
         const _c9K00;
         const 0;
         const 30;
 },
 _c9JZD() //  [R1]
         { []
         }
     {offset
       c9JZD: // global
           _c9K0H::P64 = R1 & 7;
           if (_c9K0H::P64 < 4) goto u9K0T; else goto u9K0M;
       u9K0T: // global
           Sp = Sp + 8;
           call _c9K0r() args: 0, res: 0, upd: 0;
       u9K0M: // global
           if (_c9K0H::P64 != 5) goto u9K0V; else goto u9K0V;
       u9K0V: // global
           Sp = Sp + 8;
           call _c9K0v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JZD_info" {
     block_c9JZD_info:
         const _c9JZD;
         const 0;
         const 30;
 },
 _c9JZc() //  [R1]
         { []
         }
     {offset
       c9JZc: // global
           _c9K0I::P64 = R1 & 7;
           if (_c9K0I::P64 < 6) goto u9K0K; else goto u9K0W;
       u9K0K: // global
           if (_c9K0I::P64 < 3) goto u9K0X; else goto u9K0L;
       u9K0X: // global
           Sp = Sp + 8;
           call _c9K0r() args: 0, res: 0, upd: 0;
       u9K0L: // global
           if (_c9K0I::P64 != 4) goto u9K0Z; else goto u9K0Z;
       u9K0Z: // global
           Sp = Sp + 8;
           goto u9K1h;
       u9K0W: // global
           Sp = Sp + 8;
           goto u9K1h;
       u9K1h: // global
           call _c9K0v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JZc_info" {
     block_c9JZc_info:
         const _c9JZc;
         const 0;
         const 30;
 },
 _c9JYH() //  [R1]
         { []
         }
     {offset
       c9JYH: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9K10;
               case 2, 3, 4, 5, 6 : goto u9K15;
           }
       u9K15: // global
           Sp = Sp + 8;
           call _c9K0v() args: 0, res: 0, upd: 0;
       u9K10: // global
           Sp = Sp + 8;
           call _c9K0r() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9JYH_info" {
     block_c9JYH_info:
         const _c9JYH;
         const 0;
         const 30;
 },
 _c9K0v() //  []
         { []
         }
     {offset
       c9K0v: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9K0r() //  []
         { []
         }
     {offset
       c9K0r: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.723168511 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$cmax_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$cmax_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$cmax_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c9K2t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9K2u; else goto c9K2v;
       c9K2u: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9K2v: // global
           I64[Sp - 16] = block_c9K2i_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9K4w; else goto c9K2j;
       u9K4w: // global
           call _c9K2i(R1) args: 0, res: 0, upd: 0;
       c9K2j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$cmax_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$cmax_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9K2i() //  [R1]
         { []
         }
     {offset
       c9K2i: // global
           _s9FyT::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9K2m;
               case 2 : goto c9K2n;
               case 3 : goto c9K2o;
               case 4 : goto c9K2p;
               case 5 : goto c9K2q;
               case 6 : goto c9K2r;
           }
       c9K2r: // global
           I64[Sp + 8] = block_c9K3X_info;
           R1 = _s9FyT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K4v; else goto c9K3Z;
       u9K4v: // global
           call _c9K3X() args: 0, res: 0, upd: 0;
       c9K3Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K2q: // global
           I64[Sp + 8] = block_c9K3I_info;
           R1 = _s9FyT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K4u; else goto c9K3K;
       u9K4u: // global
           call _c9K3I(R1) args: 0, res: 0, upd: 0;
       c9K3K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K2p: // global
           I64[Sp + 8] = block_c9K3p_info;
           R1 = _s9FyT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K4t; else goto c9K3r;
       u9K4t: // global
           call _c9K3p(R1) args: 0, res: 0, upd: 0;
       c9K3r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K2o: // global
           I64[Sp + 8] = block_c9K32_info;
           R1 = _s9FyT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K4s; else goto c9K34;
       u9K4s: // global
           call _c9K32(R1) args: 0, res: 0, upd: 0;
       c9K34: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K2n: // global
           I64[Sp + 8] = block_c9K2B_info;
           R1 = _s9FyT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K4r; else goto c9K2D;
       u9K4r: // global
           call _c9K2B(R1) args: 0, res: 0, upd: 0;
       c9K2D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K2m: // global
           R1 = _s9FyT::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9K2i_info" {
     block_c9K2i_info:
         const _c9K2i;
         const 1;
         const 30;
 },
 _c9K3X() //  []
         { []
         }
     {offset
       c9K3X: // global
           R1 = GHC.Conc.Sync.BlockedOnOther_closure+6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9K3X_info" {
     block_c9K3X_info:
         const _c9K3X;
         const 0;
         const 30;
 },
 _c9K3I() //  [R1]
         { []
         }
     {offset
       c9K3I: // global
           if (R1 & 7 == 6) goto u9K4e; else goto u9K4f;
       u9K4e: // global
           Sp = Sp + 8;
           call _c9K3U() args: 0, res: 0, upd: 0;
       u9K4f: // global
           Sp = Sp + 8;
           call _c9K3Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K3I_info" {
     block_c9K3I_info:
         const _c9K3I;
         const 0;
         const 30;
 },
 _c9K3p() //  [R1]
         { []
         }
     {offset
       c9K3p: // global
           _c9K45::P64 = R1 & 7;
           if (_c9K45::P64 != 5) goto u9K4d; else goto u9K4g;
       u9K4d: // global
           if (_c9K45::P64 != 6) goto u9K4i; else goto u9K4h;
       u9K4i: // global
           Sp = Sp + 8;
           call _c9K3x() args: 0, res: 0, upd: 0;
       u9K4h: // global
           Sp = Sp + 8;
           call _c9K3U() args: 0, res: 0, upd: 0;
       u9K4g: // global
           Sp = Sp + 8;
           call _c9K3Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K3p_info" {
     block_c9K3p_info:
         const _c9K3p;
         const 0;
         const 30;
 },
 _c9K32() //  [R1]
         { []
         }
     {offset
       c9K32: // global
           _c9K46::P64 = R1 & 7;
           if (_c9K46::P64 < 5) goto u9K4b; else goto u9K4c;
       u9K4b: // global
           if (_c9K46::P64 < 4) goto u9K4k; else goto u9K4j;
       u9K4k: // global
           Sp = Sp + 8;
           call _c9K3a() args: 0, res: 0, upd: 0;
       u9K4j: // global
           Sp = Sp + 8;
           call _c9K3x() args: 0, res: 0, upd: 0;
       u9K4c: // global
           if (_c9K46::P64 < 6) goto u9K4m; else goto u9K4l;
       u9K4m: // global
           Sp = Sp + 8;
           call _c9K3Q() args: 0, res: 0, upd: 0;
       u9K4l: // global
           Sp = Sp + 8;
           call _c9K3U() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K32_info" {
     block_c9K32_info:
         const _c9K32;
         const 0;
         const 30;
 },
 _c9K2B() //  [R1]
         { []
         }
     {offset
       c9K2B: // global
           _c9K47::P64 = R1 & 7;
           if (_c9K47::P64 < 5) goto u9K48; else goto u9K4a;
       u9K48: // global
           if (_c9K47::P64 < 4) goto u9K49; else goto u9K4n;
       u9K49: // global
           if (_c9K47::P64 < 3) goto c9K2J; else goto u9K4o;
       c9K2J: // global
           R1 = GHC.Conc.Sync.BlockedOnBlackHole_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9K4o: // global
           Sp = Sp + 8;
           call _c9K3a() args: 0, res: 0, upd: 0;
       u9K4n: // global
           Sp = Sp + 8;
           call _c9K3x() args: 0, res: 0, upd: 0;
       u9K4a: // global
           if (_c9K47::P64 < 6) goto u9K4q; else goto u9K4p;
       u9K4q: // global
           Sp = Sp + 8;
           call _c9K3Q() args: 0, res: 0, upd: 0;
       u9K4p: // global
           Sp = Sp + 8;
           call _c9K3U() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K2B_info" {
     block_c9K2B_info:
         const _c9K2B;
         const 0;
         const 30;
 },
 _c9K3a() //  []
         { []
         }
     {offset
       c9K3a: // global
           R1 = GHC.Conc.Sync.BlockedOnException_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9K3x() //  []
         { []
         }
     {offset
       c9K3x: // global
           R1 = GHC.Conc.Sync.BlockedOnSTM_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9K3Q() //  []
         { []
         }
     {offset
       c9K3Q: // global
           R1 = GHC.Conc.Sync.BlockedOnForeignCall_closure+5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9K3U() //  []
         { []
         }
     {offset
       c9K3U: // global
           R1 = GHC.Conc.Sync.BlockedOnOther_closure+6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.743190175 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$c>=_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$c>=_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$c>=_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9K5Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9K5R; else goto c9K5S;
       c9K5R: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9K5S: // global
           I64[Sp - 16] = block_c9K5F_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9K8q; else goto c9K5G;
       u9K8q: // global
           call _c9K5F(R1) args: 0, res: 0, upd: 0;
       c9K5G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$c>=_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$c>=_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9K5F() //  [R1]
         { []
         }
     {offset
       c9K5F: // global
           _s9Fz2::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9K5J;
               case 2 : goto c9K5K;
               case 3 : goto c9K5L;
               case 4 : goto c9K5M;
               case 5 : goto c9K5N;
               case 6 : goto c9K5O;
           }
       c9K5O: // global
           I64[Sp + 8] = block_c9K7M_info;
           R1 = _s9Fz2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K8p; else goto c9K7O;
       u9K8p: // global
           call _c9K7M() args: 0, res: 0, upd: 0;
       c9K7O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K5N: // global
           I64[Sp + 8] = block_c9K7x_info;
           R1 = _s9Fz2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K8o; else goto c9K7z;
       u9K8o: // global
           call _c9K7x(R1) args: 0, res: 0, upd: 0;
       c9K7z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K5M: // global
           I64[Sp + 8] = block_c9K7e_info;
           R1 = _s9Fz2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K8n; else goto c9K7g;
       u9K8n: // global
           call _c9K7e(R1) args: 0, res: 0, upd: 0;
       c9K7g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K5L: // global
           I64[Sp + 8] = block_c9K6R_info;
           R1 = _s9Fz2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K8m; else goto c9K6T;
       u9K8m: // global
           call _c9K6R(R1) args: 0, res: 0, upd: 0;
       c9K6T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K5K: // global
           I64[Sp + 8] = block_c9K6q_info;
           R1 = _s9Fz2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K8l; else goto c9K6s;
       u9K8l: // global
           call _c9K6q(R1) args: 0, res: 0, upd: 0;
       c9K6s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K5J: // global
           I64[Sp + 8] = block_c9K5V_info;
           R1 = _s9Fz2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9K8k; else goto c9K5X;
       u9K8k: // global
           call _c9K5V(R1) args: 0, res: 0, upd: 0;
       c9K5X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9K5F_info" {
     block_c9K5F_info:
         const _c9K5F;
         const 1;
         const 30;
 },
 _c9K7M() //  []
         { []
         }
     {offset
       c9K7M: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9K7M_info" {
     block_c9K7M_info:
         const _c9K7M;
         const 0;
         const 30;
 },
 _c9K7x() //  [R1]
         { []
         }
     {offset
       c9K7x: // global
           if (R1 & 7 == 6) goto u9K82; else goto u9K83;
       u9K82: // global
           Sp = Sp + 8;
           call _c9K7J() args: 0, res: 0, upd: 0;
       u9K83: // global
           Sp = Sp + 8;
           call _c9K7F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K7x_info" {
     block_c9K7x_info:
         const _c9K7x;
         const 0;
         const 30;
 },
 _c9K7e() //  [R1]
         { []
         }
     {offset
       c9K7e: // global
           _c9K7U::P64 = R1 & 7;
           if (_c9K7U::P64 != 5) goto u9K81; else goto u9K84;
       u9K81: // global
           if (_c9K7U::P64 != 6) goto u9K86; else goto u9K85;
       u9K86: // global
           Sp = Sp + 8;
           call _c9K7F() args: 0, res: 0, upd: 0;
       u9K85: // global
           Sp = Sp + 8;
           goto u9K8z;
       u9K84: // global
           Sp = Sp + 8;
           goto u9K8z;
       u9K8z: // global
           call _c9K7J() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K7e_info" {
     block_c9K7e_info:
         const _c9K7e;
         const 0;
         const 30;
 },
 _c9K6R() //  [R1]
         { []
         }
     {offset
       c9K6R: // global
           _c9K7V::P64 = R1 & 7;
           if (_c9K7V::P64 < 4) goto u9K87; else goto u9K80;
       u9K87: // global
           Sp = Sp + 8;
           call _c9K7F() args: 0, res: 0, upd: 0;
       u9K80: // global
           if (_c9K7V::P64 != 5) goto u9K89; else goto u9K89;
       u9K89: // global
           Sp = Sp + 8;
           call _c9K7J() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K6R_info" {
     block_c9K6R_info:
         const _c9K6R;
         const 0;
         const 30;
 },
 _c9K6q() //  [R1]
         { []
         }
     {offset
       c9K6q: // global
           _c9K7W::P64 = R1 & 7;
           if (_c9K7W::P64 < 6) goto u9K7Y; else goto u9K8a;
       u9K7Y: // global
           if (_c9K7W::P64 < 3) goto u9K8b; else goto u9K7Z;
       u9K8b: // global
           Sp = Sp + 8;
           call _c9K7F() args: 0, res: 0, upd: 0;
       u9K7Z: // global
           if (_c9K7W::P64 != 4) goto u9K8d; else goto u9K8d;
       u9K8d: // global
           Sp = Sp + 8;
           goto u9K8v;
       u9K8a: // global
           Sp = Sp + 8;
           goto u9K8v;
       u9K8v: // global
           call _c9K7J() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K6q_info" {
     block_c9K6q_info:
         const _c9K6q;
         const 0;
         const 30;
 },
 _c9K5V() //  [R1]
         { []
         }
     {offset
       c9K5V: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9K8e;
               case 2, 3, 4, 5, 6 : goto u9K8j;
           }
       u9K8j: // global
           Sp = Sp + 8;
           call _c9K7J() args: 0, res: 0, upd: 0;
       u9K8e: // global
           Sp = Sp + 8;
           call _c9K7F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9K5V_info" {
     block_c9K5V_info:
         const _c9K5V;
         const 0;
         const 30;
 },
 _c9K7J() //  []
         { []
         }
     {offset
       c9K7J: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9K7F() //  []
         { []
         }
     {offset
       c9K7F: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.760232868 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$c>_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$c>_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$c>_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c9K9w: // global
           _s9Fzb::P64 = R3;
           R3 = R2;
           R2 = _s9Fzb::P64;
           call GHC.Conc.Sync.$fOrdBlockReason_$c<_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$c>_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$c>_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.766452279 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$cmin_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$cmin_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$cmin_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c9K9S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9K9T; else goto c9K9U;
       c9K9T: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9K9U: // global
           I64[Sp - 16] = block_c9K9H_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KbG; else goto c9K9I;
       u9KbG: // global
           call _c9K9H(R1) args: 0, res: 0, upd: 0;
       c9K9I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$cmin_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$cmin_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9K9H() //  [R1]
         { []
         }
     {offset
       c9K9H: // global
           _s9Fzc::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9K9L;
               case 2 : goto c9K9M;
               case 3 : goto c9K9N;
               case 4 : goto c9K9O;
               case 5 : goto c9K9P;
               case 6 : goto c9K9Q;
           }
       c9K9Q: // global
           R1 = _s9Fzc::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9K9P: // global
           I64[Sp + 8] = block_c9Kbd_info;
           R1 = _s9Fzc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KbF; else goto c9Kbf;
       u9KbF: // global
           call _c9Kbd(R1) args: 0, res: 0, upd: 0;
       c9Kbf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K9O: // global
           I64[Sp + 8] = block_c9KaU_info;
           R1 = _s9Fzc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KbE; else goto c9KaW;
       u9KbE: // global
           call _c9KaU(R1) args: 0, res: 0, upd: 0;
       c9KaW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K9N: // global
           I64[Sp + 8] = block_c9Kax_info;
           R1 = _s9Fzc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KbD; else goto c9Kaz;
       u9KbD: // global
           call _c9Kax(R1) args: 0, res: 0, upd: 0;
       c9Kaz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K9M: // global
           I64[Sp + 8] = block_c9Ka6_info;
           R1 = _s9Fzc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KbC; else goto c9Ka8;
       u9KbC: // global
           call _c9Ka6(R1) args: 0, res: 0, upd: 0;
       c9Ka8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9K9L: // global
           I64[Sp + 8] = block_c9K9X_info;
           R1 = _s9Fzc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KbB; else goto c9K9Z;
       u9KbB: // global
           call _c9K9X() args: 0, res: 0, upd: 0;
       c9K9Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9K9H_info" {
     block_c9K9H_info:
         const _c9K9H;
         const 1;
         const 30;
 },
 _c9Kbd() //  [R1]
         { []
         }
     {offset
       c9Kbd: // global
           if (R1 & 7 == 6) goto c9Kbp; else goto c9Kbl;
       c9Kbp: // global
           R1 = GHC.Conc.Sync.BlockedOnForeignCall_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Kbl: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Kbd_info" {
     block_c9Kbd_info:
         const _c9Kbd;
         const 0;
         const 30;
 },
 _c9KaU() //  [R1]
         { []
         }
     {offset
       c9KaU: // global
           _c9Kbu::P64 = R1 & 7;
           if (_c9Kbu::P64 == 5) goto c9Kba; else goto u9KbA;
       u9KbA: // global
           if (_c9Kbu::P64 == 6) goto c9Kba; else goto c9Kb2;
       c9Kba: // global
           R1 = GHC.Conc.Sync.BlockedOnSTM_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Kb2: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KaU_info" {
     block_c9KaU_info:
         const _c9KaU;
         const 0;
         const 30;
 },
 _c9Kax() //  [R1]
         { []
         }
     {offset
       c9Kax: // global
           _c9Kbv::P64 = R1 & 7;
           if (_c9Kbv::P64 < 4) goto c9KaF; else goto u9Kbz;
       c9KaF: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9Kbz: // global
           if (_c9Kbv::P64 != 5) goto c9KaR; else goto c9KaR;
       c9KaR: // global
           R1 = GHC.Conc.Sync.BlockedOnException_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Kax_info" {
     block_c9Kax_info:
         const _c9Kax;
         const 0;
         const 30;
 },
 _c9Ka6() //  [R1]
         { []
         }
     {offset
       c9Ka6: // global
           _c9Kbw::P64 = R1 & 7;
           if (_c9Kbw::P64 >= 6) goto c9Kau; else goto u9Kbx;
       u9Kbx: // global
           if (_c9Kbw::P64 < 3) goto c9Kae; else goto u9Kby;
       c9Kae: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9Kby: // global
           if (_c9Kbw::P64 != 4) goto c9Kau; else goto c9Kau;
       c9Kau: // global
           R1 = GHC.Conc.Sync.BlockedOnBlackHole_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ka6_info" {
     block_c9Ka6_info:
         const _c9Ka6;
         const 0;
         const 30;
 },
 _c9K9X() //  []
         { []
         }
     {offset
       c9K9X: // global
           R1 = GHC.Conc.Sync.BlockedOnMVar_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9K9X_info" {
     block_c9K9X_info:
         const _c9K9X;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.779901938 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Conc.Sync.$fEqBlockReason_closure+1;
         const GHC.Conc.Sync.$fOrdBlockReason_$ccompare_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$c<_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$c<=_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$c>_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$c>=_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$cmax_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.785861396 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KcL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9KcM; else goto c9KcN;
       c9KcM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KcN: // global
           I64[Sp - 16] = block_c9KcC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Kev; else goto c9KcD;
       u9Kev: // global
           call _c9KcC(R1) args: 0, res: 0, upd: 0;
       c9KcD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9KcC() //  [R1]
         { []
         }
     {offset
       c9KcC: // global
           _s9Fzl::P64 = P64[Sp + 8];
           _c9KcK::P64 = R1 & 7;
           if (_c9KcK::P64 < 3) goto u9Kea; else goto u9Keb;
       u9Kea: // global
           if (_c9KcK::P64 < 2) goto c9KcG; else goto c9KcH;
       c9KcG: // global
           I64[Sp + 8] = block_c9KcQ_info;
           R1 = _s9Fzl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ker; else goto c9KcS;
       u9Ker: // global
           call _c9KcQ(R1) args: 0, res: 0, upd: 0;
       c9KcS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KcH: // global
           I64[Sp + 8] = block_c9Kdd_info;
           R1 = _s9Fzl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Kes; else goto c9Kdf;
       u9Kes: // global
           call _c9Kdd(R1) args: 0, res: 0, upd: 0;
       c9Kdf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Keb: // global
           if (_c9KcK::P64 < 4) goto c9KcI; else goto c9KcJ;
       c9KcI: // global
           I64[Sp] = block_c9KdA_info;
           _s9Fzr::P64 = P64[R1 + 5];
           R1 = _s9Fzl::P64;
           P64[Sp + 8] = _s9Fzr::P64;
           if (R1 & 7 != 0) goto u9Ket; else goto c9KdC;
       u9Ket: // global
           call _c9KdA(R1) args: 0, res: 0, upd: 0;
       c9KdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KcJ: // global
           I64[Sp + 8] = block_c9KdT_info;
           R1 = _s9Fzl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Keu; else goto c9KdV;
       u9Keu: // global
           call _c9KdT(R1) args: 0, res: 0, upd: 0;
       c9KdV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KcC_info" {
     block_c9KcC_info:
         const _c9KcC;
         const 1;
         const 30;
 },
 _c9KcQ() //  [R1]
         { []
         }
     {offset
       c9KcQ: // global
           _c9Ke9::P64 = R1 & 7;
           if (_c9Ke9::P64 < 2) goto u9Keg; else goto u9Kec;
       u9Keg: // global
           Sp = Sp + 8;
           call _c9Ke5() args: 0, res: 0, upd: 0;
       u9Kec: // global
           if (_c9Ke9::P64 != 3) goto u9Kei; else goto u9Kei;
       u9Kei: // global
           Sp = Sp + 8;
           call _c9KdQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KcQ_info" {
     block_c9KcQ_info:
         const _c9KcQ;
         const 0;
         const 30;
 },
 _c9Kdd() //  [R1]
         { []
         }
     {offset
       c9Kdd: // global
           _c9Ke8::P64 = R1 & 7;
           if (_c9Ke8::P64 < 3) goto u9Ked; else goto u9Kee;
       u9Ked: // global
           if (_c9Ke8::P64 < 2) goto u9Kek; else goto u9Kej;
       u9Kek: // global
           Sp = Sp + 8;
           call _c9Ke1() args: 0, res: 0, upd: 0;
       u9Kej: // global
           Sp = Sp + 8;
           call _c9Ke5() args: 0, res: 0, upd: 0;
       u9Kee: // global
           if (_c9Ke8::P64 < 4) goto u9Kem; else goto u9Kem;
       u9Kem: // global
           Sp = Sp + 8;
           call _c9KdQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kdd_info" {
     block_c9Kdd_info:
         const _c9Kdd;
         const 0;
         const 30;
 },
 _c9KdA() //  [R1]
         { []
         }
     {offset
       c9KdA: // global
           _c9Ke7::P64 = R1 & 7;
           if (_c9Ke7::P64 == 3) goto c9KdM; else goto u9Kef;
       c9KdM: // global
           R3 = P64[R1 + 5];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Conc.Sync.$fOrdBlockReason_$ccompare_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
       u9Kef: // global
           if (_c9Ke7::P64 != 4) goto u9Keo; else goto u9Ken;
       u9Keo: // global
           Sp = Sp + 16;
           call _c9Ke1() args: 0, res: 0, upd: 0;
       u9Ken: // global
           Sp = Sp + 16;
           call _c9KdQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KdA_info" {
     block_c9KdA_info:
         const _c9KdA;
         const 1;
         const 30;
 },
 _c9KdQ() //  []
         { []
         }
     {offset
       c9KdQ: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KdT() //  [R1]
         { []
         }
     {offset
       c9KdT: // global
           if (R1 & 7 == 4) goto u9Kep; else goto u9Keq;
       u9Kep: // global
           Sp = Sp + 8;
           call _c9Ke5() args: 0, res: 0, upd: 0;
       u9Keq: // global
           Sp = Sp + 8;
           call _c9Ke1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KdT_info" {
     block_c9KdT_info:
         const _c9KdT;
         const 0;
         const 30;
 },
 _c9Ke5() //  []
         { []
         }
     {offset
       c9Ke5: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Ke1() //  []
         { []
         }
     {offset
       c9Ke1: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.805224808 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$c<_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c<_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Kfw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Kfx; else goto c9Kfy;
       c9Kfx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Kfy: // global
           I64[Sp - 16] = block_c9Kfn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KjD; else goto c9Kfo;
       u9KjD: // global
           call _c9Kfn(R1) args: 0, res: 0, upd: 0;
       c9Kfo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$c<_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c<_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Kfn() //  [R1]
         { []
         }
     {offset
       c9Kfn: // global
           _s9Fzw::P64 = P64[Sp + 8];
           _c9Kfv::P64 = R1 & 7;
           if (_c9Kfv::P64 < 3) goto u9Kj0; else goto u9Kj1;
       u9Kj0: // global
           if (_c9Kfv::P64 < 2) goto c9Kfr; else goto c9Kfs;
       c9Kfr: // global
           I64[Sp + 8] = block_c9KfB_info;
           R1 = _s9Fzw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Kjz; else goto c9KfD;
       u9Kjz: // global
           call _c9KfB(R1) args: 0, res: 0, upd: 0;
       c9KfD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kfs: // global
           I64[Sp + 8] = block_c9KfY_info;
           R1 = _s9Fzw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KjA; else goto c9Kg0;
       u9KjA: // global
           call _c9KfY(R1) args: 0, res: 0, upd: 0;
       c9Kg0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Kj1: // global
           if (_c9Kfv::P64 < 4) goto c9Kft; else goto c9Kfu;
       c9Kft: // global
           I64[Sp] = block_c9Kgh_info;
           _s9FzC::P64 = P64[R1 + 5];
           R1 = _s9Fzw::P64;
           P64[Sp + 8] = _s9FzC::P64;
           if (R1 & 7 != 0) goto u9KjB; else goto c9Kgj;
       u9KjB: // global
           call _c9Kgh(R1) args: 0, res: 0, upd: 0;
       c9Kgj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kfu: // global
           I64[Sp + 8] = block_c9KiK_info;
           R1 = _s9Fzw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KjC; else goto c9KiM;
       u9KjC: // global
           call _c9KiK() args: 0, res: 0, upd: 0;
       c9KiM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Kfn_info" {
     block_c9Kfn_info:
         const _c9Kfn;
         const 1;
         const 30;
 },
 _c9KfB() //  [R1]
         { []
         }
     {offset
       c9KfB: // global
           _c9KiZ::P64 = R1 & 7;
           if (_c9KiZ::P64 < 2) goto u9Kj9; else goto u9Kj2;
       u9Kj9: // global
           Sp = Sp + 8;
           call _c9Kip() args: 0, res: 0, upd: 0;
       u9Kj2: // global
           if (_c9KiZ::P64 != 3) goto u9Kjb; else goto u9Kjb;
       u9Kjb: // global
           Sp = Sp + 8;
           call _c9KiH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KfB_info" {
     block_c9KfB_info:
         const _c9KfB;
         const 0;
         const 30;
 },
 _c9KfY() //  [R1]
         { []
         }
     {offset
       c9KfY: // global
           _c9KiY::P64 = R1 & 7;
           if (_c9KiY::P64 != 3) goto u9Kj3; else goto u9Kjc;
       u9Kj3: // global
           if (_c9KiY::P64 != 4) goto u9Kje; else goto u9Kjd;
       u9Kje: // global
           Sp = Sp + 8;
           call _c9Kip() args: 0, res: 0, upd: 0;
       u9Kjd: // global
           Sp = Sp + 8;
           goto u9KjH;
       u9Kjc: // global
           Sp = Sp + 8;
           goto u9KjH;
       u9KjH: // global
           call _c9KiH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KfY_info" {
     block_c9KfY_info:
         const _c9KfY;
         const 0;
         const 30;
 },
 _c9Kgh() //  [R1]
         { []
         }
     {offset
       c9Kgh: // global
           _c9KiR::P64 = R1 & 7;
           if (_c9KiR::P64 == 3) goto c9Kgu; else goto u9Kj4;
       c9Kgu: // global
           I64[Sp] = block_c9Kgs_info;
           _s9FzE::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FzE::P64;
           if (R1 & 7 != 0) goto u9KjJ; else goto c9Kgv;
       u9KjJ: // global
           call _c9Kgs(R1) args: 0, res: 0, upd: 0;
       c9Kgv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Kj4: // global
           if (_c9KiR::P64 != 4) goto u9Kjg; else goto u9Kjf;
       u9Kjg: // global
           Sp = Sp + 16;
           call _c9Kip() args: 0, res: 0, upd: 0;
       u9Kjf: // global
           Sp = Sp + 16;
           call _c9KiH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kgh_info" {
     block_c9Kgh_info:
         const _c9Kgh;
         const 1;
         const 30;
 },
 _c9Kgs() //  [R1]
         { []
         }
     {offset
       c9Kgs: // global
           _s9FzE::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9KgC;
               case 2 : goto c9Kh8;
               case 3 : goto c9KhA;
               case 4 : goto c9KhY;
               case 5 : goto c9Kii;
               case 6 : goto c9Kiy;
           }
       c9Kiy: // global
           I64[Sp + 8] = block_c9Kiw_info;
           R1 = _s9FzE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KjR; else goto c9Kiz;
       u9KjR: // global
           call _c9Kiw() args: 0, res: 0, upd: 0;
       c9Kiz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kii: // global
           I64[Sp + 8] = block_c9Kig_info;
           R1 = _s9FzE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KjQ; else goto c9Kij;
       u9KjQ: // global
           call _c9Kig(R1) args: 0, res: 0, upd: 0;
       c9Kij: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KhY: // global
           I64[Sp + 8] = block_c9KhW_info;
           R1 = _s9FzE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KjP; else goto c9KhZ;
       u9KjP: // global
           call _c9KhW(R1) args: 0, res: 0, upd: 0;
       c9KhZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KhA: // global
           I64[Sp + 8] = block_c9Khy_info;
           R1 = _s9FzE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KjO; else goto c9KhB;
       u9KjO: // global
           call _c9Khy(R1) args: 0, res: 0, upd: 0;
       c9KhB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kh8: // global
           I64[Sp + 8] = block_c9Kh6_info;
           R1 = _s9FzE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KjN; else goto c9Kh9;
       u9KjN: // global
           call _c9Kh6(R1) args: 0, res: 0, upd: 0;
       c9Kh9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KgC: // global
           I64[Sp + 8] = block_c9Kgz_info;
           R1 = _s9FzE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KjM; else goto c9KgD;
       u9KjM: // global
           call _c9Kgz(R1) args: 0, res: 0, upd: 0;
       c9KgD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Kgs_info" {
     block_c9Kgs_info:
         const _c9Kgs;
         const 1;
         const 30;
 },
 _c9Kiw() //  []
         { []
         }
     {offset
       c9Kiw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Kiw_info" {
     block_c9Kiw_info:
         const _c9Kiw;
         const 0;
         const 30;
 },
 _c9Kig() //  [R1]
         { []
         }
     {offset
       c9Kig: // global
           if (R1 & 7 == 6) goto u9Kjh; else goto u9Kji;
       u9Kjh: // global
           Sp = Sp + 8;
           call _c9KiH() args: 0, res: 0, upd: 0;
       u9Kji: // global
           Sp = Sp + 8;
           call _c9Kip() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kig_info" {
     block_c9Kig_info:
         const _c9Kig;
         const 0;
         const 30;
 },
 _c9KhW() //  [R1]
         { []
         }
     {offset
       c9KhW: // global
           _c9KiU::P64 = R1 & 7;
           if (_c9KiU::P64 != 5) goto u9Kj8; else goto u9Kjj;
       u9Kj8: // global
           if (_c9KiU::P64 != 6) goto u9Kjl; else goto u9Kjk;
       u9Kjl: // global
           Sp = Sp + 8;
           call _c9Kip() args: 0, res: 0, upd: 0;
       u9Kjk: // global
           Sp = Sp + 8;
           goto u9Kk0;
       u9Kjj: // global
           Sp = Sp + 8;
           goto u9Kk0;
       u9Kk0: // global
           call _c9KiH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KhW_info" {
     block_c9KhW_info:
         const _c9KhW;
         const 0;
         const 30;
 },
 _c9Khy() //  [R1]
         { []
         }
     {offset
       c9Khy: // global
           _c9KiV::P64 = R1 & 7;
           if (_c9KiV::P64 < 4) goto u9Kjm; else goto u9Kj7;
       u9Kjm: // global
           Sp = Sp + 8;
           call _c9Kip() args: 0, res: 0, upd: 0;
       u9Kj7: // global
           if (_c9KiV::P64 != 5) goto u9Kjo; else goto u9Kjo;
       u9Kjo: // global
           Sp = Sp + 8;
           call _c9KiH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Khy_info" {
     block_c9Khy_info:
         const _c9Khy;
         const 0;
         const 30;
 },
 _c9Kh6() //  [R1]
         { []
         }
     {offset
       c9Kh6: // global
           _c9KiW::P64 = R1 & 7;
           if (_c9KiW::P64 < 6) goto u9Kj5; else goto u9Kjp;
       u9Kj5: // global
           if (_c9KiW::P64 < 3) goto u9Kjq; else goto u9Kj6;
       u9Kjq: // global
           Sp = Sp + 8;
           call _c9Kip() args: 0, res: 0, upd: 0;
       u9Kj6: // global
           if (_c9KiW::P64 != 4) goto u9Kjs; else goto u9Kjs;
       u9Kjs: // global
           Sp = Sp + 8;
           goto u9KjW;
       u9Kjp: // global
           Sp = Sp + 8;
           goto u9KjW;
       u9KjW: // global
           call _c9KiH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kh6_info" {
     block_c9Kh6_info:
         const _c9Kh6;
         const 0;
         const 30;
 },
 _c9Kgz() //  [R1]
         { []
         }
     {offset
       c9Kgz: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9Kjt;
               case 2, 3, 4, 5, 6 : goto u9Kjy;
           }
       u9Kjy: // global
           Sp = Sp + 8;
           call _c9KiH() args: 0, res: 0, upd: 0;
       u9Kjt: // global
           Sp = Sp + 8;
           call _c9Kip() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kgz_info" {
     block_c9Kgz_info:
         const _c9Kgz;
         const 0;
         const 30;
 },
 _c9Kip() //  []
         { []
         }
     {offset
       c9Kip: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KiH() //  []
         { []
         }
     {offset
       c9KiH: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KiK() //  []
         { []
         }
     {offset
       c9KiK: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KiK_info" {
     block_c9KiK_info:
         const _c9KiK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.83621248 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$c>=_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c>=_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>=_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Klv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Klw; else goto c9Klx;
       c9Klw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Klx: // global
           I64[Sp - 16] = block_c9Klm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KpC; else goto c9Kln;
       u9KpC: // global
           call _c9Klm(R1) args: 0, res: 0, upd: 0;
       c9Kln: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$c>=_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c>=_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Klm() //  [R1]
         { []
         }
     {offset
       c9Klm: // global
           _s9FzO::P64 = P64[Sp + 8];
           _c9Klu::P64 = R1 & 7;
           if (_c9Klu::P64 < 3) goto u9KoZ; else goto u9Kp0;
       u9KoZ: // global
           if (_c9Klu::P64 < 2) goto c9Klq; else goto c9Klr;
       c9Klq: // global
           I64[Sp + 8] = block_c9KlA_info;
           R1 = _s9FzO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Kpy; else goto c9KlC;
       u9Kpy: // global
           call _c9KlA(R1) args: 0, res: 0, upd: 0;
       c9KlC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Klr: // global
           I64[Sp + 8] = block_c9KlX_info;
           R1 = _s9FzO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Kpz; else goto c9KlZ;
       u9Kpz: // global
           call _c9KlX(R1) args: 0, res: 0, upd: 0;
       c9KlZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Kp0: // global
           if (_c9Klu::P64 < 4) goto c9Kls; else goto c9Klt;
       c9Kls: // global
           I64[Sp] = block_c9Kmg_info;
           _s9FzU::P64 = P64[R1 + 5];
           R1 = _s9FzO::P64;
           P64[Sp + 8] = _s9FzU::P64;
           if (R1 & 7 != 0) goto u9KpA; else goto c9Kmi;
       u9KpA: // global
           call _c9Kmg(R1) args: 0, res: 0, upd: 0;
       c9Kmi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Klt: // global
           I64[Sp + 8] = block_c9KoJ_info;
           R1 = _s9FzO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KpB; else goto c9KoL;
       u9KpB: // global
           call _c9KoJ() args: 0, res: 0, upd: 0;
       c9KoL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Klm_info" {
     block_c9Klm_info:
         const _c9Klm;
         const 1;
         const 30;
 },
 _c9KlA() //  [R1]
         { []
         }
     {offset
       c9KlA: // global
           _c9KoY::P64 = R1 & 7;
           if (_c9KoY::P64 < 2) goto u9Kp8; else goto u9Kp1;
       u9Kp8: // global
           Sp = Sp + 8;
           call _c9Koo() args: 0, res: 0, upd: 0;
       u9Kp1: // global
           if (_c9KoY::P64 != 3) goto u9Kpa; else goto u9Kpa;
       u9Kpa: // global
           Sp = Sp + 8;
           call _c9KoG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KlA_info" {
     block_c9KlA_info:
         const _c9KlA;
         const 0;
         const 30;
 },
 _c9KlX() //  [R1]
         { []
         }
     {offset
       c9KlX: // global
           _c9KoX::P64 = R1 & 7;
           if (_c9KoX::P64 != 3) goto u9Kp2; else goto u9Kpb;
       u9Kp2: // global
           if (_c9KoX::P64 != 4) goto u9Kpd; else goto u9Kpc;
       u9Kpd: // global
           Sp = Sp + 8;
           call _c9Koo() args: 0, res: 0, upd: 0;
       u9Kpc: // global
           Sp = Sp + 8;
           goto u9KpG;
       u9Kpb: // global
           Sp = Sp + 8;
           goto u9KpG;
       u9KpG: // global
           call _c9KoG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KlX_info" {
     block_c9KlX_info:
         const _c9KlX;
         const 0;
         const 30;
 },
 _c9Kmg() //  [R1]
         { []
         }
     {offset
       c9Kmg: // global
           _c9KoQ::P64 = R1 & 7;
           if (_c9KoQ::P64 == 3) goto c9Kmt; else goto u9Kp3;
       c9Kmt: // global
           I64[Sp] = block_c9Kmr_info;
           _s9FzW::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FzW::P64;
           if (R1 & 7 != 0) goto u9KpI; else goto c9Kmu;
       u9KpI: // global
           call _c9Kmr(R1) args: 0, res: 0, upd: 0;
       c9Kmu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Kp3: // global
           if (_c9KoQ::P64 != 4) goto u9Kpf; else goto u9Kpe;
       u9Kpf: // global
           Sp = Sp + 16;
           call _c9Koo() args: 0, res: 0, upd: 0;
       u9Kpe: // global
           Sp = Sp + 16;
           call _c9KoG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kmg_info" {
     block_c9Kmg_info:
         const _c9Kmg;
         const 1;
         const 30;
 },
 _c9Kmr() //  [R1]
         { []
         }
     {offset
       c9Kmr: // global
           _s9FzW::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9KmB;
               case 2 : goto c9Kn7;
               case 3 : goto c9Knz;
               case 4 : goto c9KnX;
               case 5 : goto c9Koh;
               case 6 : goto c9Kox;
           }
       c9Kox: // global
           I64[Sp + 8] = block_c9Kov_info;
           R1 = _s9FzW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KpQ; else goto c9Koy;
       u9KpQ: // global
           call _c9Kov() args: 0, res: 0, upd: 0;
       c9Koy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Koh: // global
           I64[Sp + 8] = block_c9Kof_info;
           R1 = _s9FzW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KpP; else goto c9Koi;
       u9KpP: // global
           call _c9Kof(R1) args: 0, res: 0, upd: 0;
       c9Koi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KnX: // global
           I64[Sp + 8] = block_c9KnV_info;
           R1 = _s9FzW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KpO; else goto c9KnY;
       u9KpO: // global
           call _c9KnV(R1) args: 0, res: 0, upd: 0;
       c9KnY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Knz: // global
           I64[Sp + 8] = block_c9Knx_info;
           R1 = _s9FzW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KpN; else goto c9KnA;
       u9KpN: // global
           call _c9Knx(R1) args: 0, res: 0, upd: 0;
       c9KnA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kn7: // global
           I64[Sp + 8] = block_c9Kn5_info;
           R1 = _s9FzW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KpM; else goto c9Kn8;
       u9KpM: // global
           call _c9Kn5(R1) args: 0, res: 0, upd: 0;
       c9Kn8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KmB: // global
           I64[Sp + 8] = block_c9Kmy_info;
           R1 = _s9FzW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KpL; else goto c9KmC;
       u9KpL: // global
           call _c9Kmy(R1) args: 0, res: 0, upd: 0;
       c9KmC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Kmr_info" {
     block_c9Kmr_info:
         const _c9Kmr;
         const 1;
         const 30;
 },
 _c9Kov() //  []
         { []
         }
     {offset
       c9Kov: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Kov_info" {
     block_c9Kov_info:
         const _c9Kov;
         const 0;
         const 30;
 },
 _c9Kof() //  [R1]
         { []
         }
     {offset
       c9Kof: // global
           if (R1 & 7 == 6) goto u9Kpg; else goto u9Kph;
       u9Kpg: // global
           Sp = Sp + 8;
           call _c9KoG() args: 0, res: 0, upd: 0;
       u9Kph: // global
           Sp = Sp + 8;
           call _c9Koo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kof_info" {
     block_c9Kof_info:
         const _c9Kof;
         const 0;
         const 30;
 },
 _c9KnV() //  [R1]
         { []
         }
     {offset
       c9KnV: // global
           _c9KoT::P64 = R1 & 7;
           if (_c9KoT::P64 != 5) goto u9Kp7; else goto u9Kpi;
       u9Kp7: // global
           if (_c9KoT::P64 != 6) goto u9Kpk; else goto u9Kpj;
       u9Kpk: // global
           Sp = Sp + 8;
           call _c9Koo() args: 0, res: 0, upd: 0;
       u9Kpj: // global
           Sp = Sp + 8;
           goto u9KpZ;
       u9Kpi: // global
           Sp = Sp + 8;
           goto u9KpZ;
       u9KpZ: // global
           call _c9KoG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KnV_info" {
     block_c9KnV_info:
         const _c9KnV;
         const 0;
         const 30;
 },
 _c9Knx() //  [R1]
         { []
         }
     {offset
       c9Knx: // global
           _c9KoU::P64 = R1 & 7;
           if (_c9KoU::P64 < 4) goto u9Kpl; else goto u9Kp6;
       u9Kpl: // global
           Sp = Sp + 8;
           call _c9Koo() args: 0, res: 0, upd: 0;
       u9Kp6: // global
           if (_c9KoU::P64 != 5) goto u9Kpn; else goto u9Kpn;
       u9Kpn: // global
           Sp = Sp + 8;
           call _c9KoG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Knx_info" {
     block_c9Knx_info:
         const _c9Knx;
         const 0;
         const 30;
 },
 _c9Kn5() //  [R1]
         { []
         }
     {offset
       c9Kn5: // global
           _c9KoV::P64 = R1 & 7;
           if (_c9KoV::P64 < 6) goto u9Kp4; else goto u9Kpo;
       u9Kp4: // global
           if (_c9KoV::P64 < 3) goto u9Kpp; else goto u9Kp5;
       u9Kpp: // global
           Sp = Sp + 8;
           call _c9Koo() args: 0, res: 0, upd: 0;
       u9Kp5: // global
           if (_c9KoV::P64 != 4) goto u9Kpr; else goto u9Kpr;
       u9Kpr: // global
           Sp = Sp + 8;
           goto u9KpV;
       u9Kpo: // global
           Sp = Sp + 8;
           goto u9KpV;
       u9KpV: // global
           call _c9KoG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kn5_info" {
     block_c9Kn5_info:
         const _c9Kn5;
         const 0;
         const 30;
 },
 _c9Kmy() //  [R1]
         { []
         }
     {offset
       c9Kmy: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9Kps;
               case 2, 3, 4, 5, 6 : goto u9Kpx;
           }
       u9Kpx: // global
           Sp = Sp + 8;
           call _c9KoG() args: 0, res: 0, upd: 0;
       u9Kps: // global
           Sp = Sp + 8;
           call _c9Koo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kmy_info" {
     block_c9Kmy_info:
         const _c9Kmy;
         const 0;
         const 30;
 },
 _c9Koo() //  []
         { []
         }
     {offset
       c9Koo: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KoG() //  []
         { []
         }
     {offset
       c9KoG: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KoJ() //  []
         { []
         }
     {offset
       c9KoJ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KoJ_info" {
     block_c9KoJ_info:
         const _c9KoJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.866482851 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$c>_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c>_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Kru: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Krv; else goto c9Krw;
       c9Krv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Krw: // global
           I64[Sp - 16] = block_c9Krl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Kvv; else goto c9Krm;
       u9Kvv: // global
           call _c9Krl(R1) args: 0, res: 0, upd: 0;
       c9Krm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$c>_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c>_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Krl() //  [R1]
         { []
         }
     {offset
       c9Krl: // global
           _s9FA6::P64 = P64[Sp + 8];
           _c9Krt::P64 = R1 & 7;
           if (_c9Krt::P64 < 3) goto u9KuU; else goto u9KuV;
       u9KuU: // global
           if (_c9Krt::P64 < 2) goto c9Krp; else goto c9Krq;
       c9Krp: // global
           I64[Sp + 8] = block_c9Krz_info;
           R1 = _s9FA6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Kvr; else goto c9KrB;
       u9Kvr: // global
           call _c9Krz() args: 0, res: 0, upd: 0;
       c9KrB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Krq: // global
           I64[Sp + 8] = block_c9KrI_info;
           R1 = _s9FA6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Kvs; else goto c9KrK;
       u9Kvs: // global
           call _c9KrI(R1) args: 0, res: 0, upd: 0;
       c9KrK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9KuV: // global
           if (_c9Krt::P64 < 4) goto c9Krr; else goto c9Krs;
       c9Krr: // global
           I64[Sp] = block_c9Ks5_info;
           _s9FAb::P64 = P64[R1 + 5];
           R1 = _s9FA6::P64;
           P64[Sp + 8] = _s9FAb::P64;
           if (R1 & 7 != 0) goto u9Kvt; else goto c9Ks7;
       u9Kvt: // global
           call _c9Ks5(R1) args: 0, res: 0, upd: 0;
       c9Ks7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Krs: // global
           I64[Sp + 8] = block_c9Kuy_info;
           R1 = _s9FA6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Kvu; else goto c9KuA;
       u9Kvu: // global
           call _c9Kuy(R1) args: 0, res: 0, upd: 0;
       c9KuA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Krl_info" {
     block_c9Krl_info:
         const _c9Krl;
         const 1;
         const 30;
 },
 _c9Krz() //  []
         { []
         }
     {offset
       c9Krz: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Krz_info" {
     block_c9Krz_info:
         const _c9Krz;
         const 0;
         const 30;
 },
 _c9KrI() //  [R1]
         { []
         }
     {offset
       c9KrI: // global
           _c9KuT::P64 = R1 & 7;
           if (_c9KuT::P64 < 2) goto u9Kv2; else goto u9KuW;
       u9Kv2: // global
           Sp = Sp + 8;
           call _c9KuG() args: 0, res: 0, upd: 0;
       u9KuW: // global
           if (_c9KuT::P64 != 3) goto u9Kv4; else goto u9Kv4;
       u9Kv4: // global
           Sp = Sp + 8;
           call _c9KuK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KrI_info" {
     block_c9KrI_info:
         const _c9KrI;
         const 0;
         const 30;
 },
 _c9Ks5() //  [R1]
         { []
         }
     {offset
       c9Ks5: // global
           _c9KuM::P64 = R1 & 7;
           if (_c9KuM::P64 == 3) goto c9Ksi; else goto u9KuX;
       c9Ksi: // global
           I64[Sp] = block_c9Ksg_info;
           _s9FAd::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FAd::P64;
           if (R1 & 7 != 0) goto u9Kvy; else goto c9Ksj;
       u9Kvy: // global
           call _c9Ksg(R1) args: 0, res: 0, upd: 0;
       c9Ksj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9KuX: // global
           if (_c9KuM::P64 != 4) goto u9Kv6; else goto u9Kv5;
       u9Kv6: // global
           Sp = Sp + 16;
           call _c9KuG() args: 0, res: 0, upd: 0;
       u9Kv5: // global
           Sp = Sp + 16;
           call _c9KuK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Ks5_info" {
     block_c9Ks5_info:
         const _c9Ks5;
         const 1;
         const 30;
 },
 _c9Ksg() //  [R1]
         { []
         }
     {offset
       c9Ksg: // global
           _s9FAd::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Ksq;
               case 2 : goto c9KsA;
               case 3 : goto c9Kt6;
               case 4 : goto c9Kty;
               case 5 : goto c9KtW;
               case 6 : goto c9Kug;
           }
       c9Kug: // global
           I64[Sp + 8] = block_c9Kue_info;
           R1 = _s9FAd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KvG; else goto c9Kuh;
       u9KvG: // global
           call _c9Kue(R1) args: 0, res: 0, upd: 0;
       c9Kuh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KtW: // global
           I64[Sp + 8] = block_c9KtU_info;
           R1 = _s9FAd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KvF; else goto c9KtX;
       u9KvF: // global
           call _c9KtU(R1) args: 0, res: 0, upd: 0;
       c9KtX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kty: // global
           I64[Sp + 8] = block_c9Ktw_info;
           R1 = _s9FAd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KvE; else goto c9Ktz;
       u9KvE: // global
           call _c9Ktw(R1) args: 0, res: 0, upd: 0;
       c9Ktz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kt6: // global
           I64[Sp + 8] = block_c9Kt4_info;
           R1 = _s9FAd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KvD; else goto c9Kt7;
       u9KvD: // global
           call _c9Kt4(R1) args: 0, res: 0, upd: 0;
       c9Kt7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KsA: // global
           I64[Sp + 8] = block_c9Ksy_info;
           R1 = _s9FAd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KvC; else goto c9KsB;
       u9KvC: // global
           call _c9Ksy(R1) args: 0, res: 0, upd: 0;
       c9KsB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Ksq: // global
           I64[Sp + 8] = block_c9Ksn_info;
           R1 = _s9FAd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KvB; else goto c9Ksr;
       u9KvB: // global
           call _c9Ksn() args: 0, res: 0, upd: 0;
       c9Ksr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ksg_info" {
     block_c9Ksg_info:
         const _c9Ksg;
         const 1;
         const 30;
 },
 _c9Kue() //  [R1]
         { []
         }
     {offset
       c9Kue: // global
           if (R1 & 7 == 6) goto u9Kv7; else goto u9Kv8;
       u9Kv7: // global
           Sp = Sp + 8;
           call _c9KuK() args: 0, res: 0, upd: 0;
       u9Kv8: // global
           Sp = Sp + 8;
           call _c9KuG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kue_info" {
     block_c9Kue_info:
         const _c9Kue;
         const 0;
         const 30;
 },
 _c9KtU() //  [R1]
         { []
         }
     {offset
       c9KtU: // global
           _c9KuP::P64 = R1 & 7;
           if (_c9KuP::P64 != 5) goto u9Kv1; else goto u9Kv9;
       u9Kv1: // global
           if (_c9KuP::P64 != 6) goto u9Kvb; else goto u9Kva;
       u9Kvb: // global
           Sp = Sp + 8;
           call _c9KuG() args: 0, res: 0, upd: 0;
       u9Kva: // global
           Sp = Sp + 8;
           goto u9KvP;
       u9Kv9: // global
           Sp = Sp + 8;
           goto u9KvP;
       u9KvP: // global
           call _c9KuK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KtU_info" {
     block_c9KtU_info:
         const _c9KtU;
         const 0;
         const 30;
 },
 _c9Ktw() //  [R1]
         { []
         }
     {offset
       c9Ktw: // global
           _c9KuQ::P64 = R1 & 7;
           if (_c9KuQ::P64 < 4) goto u9Kvc; else goto u9Kv0;
       u9Kvc: // global
           Sp = Sp + 8;
           call _c9KuG() args: 0, res: 0, upd: 0;
       u9Kv0: // global
           if (_c9KuQ::P64 != 5) goto u9Kve; else goto u9Kve;
       u9Kve: // global
           Sp = Sp + 8;
           call _c9KuK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Ktw_info" {
     block_c9Ktw_info:
         const _c9Ktw;
         const 0;
         const 30;
 },
 _c9Kt4() //  [R1]
         { []
         }
     {offset
       c9Kt4: // global
           _c9KuR::P64 = R1 & 7;
           if (_c9KuR::P64 < 6) goto u9KuY; else goto u9Kvf;
       u9KuY: // global
           if (_c9KuR::P64 < 3) goto u9Kvg; else goto u9KuZ;
       u9Kvg: // global
           Sp = Sp + 8;
           call _c9KuG() args: 0, res: 0, upd: 0;
       u9KuZ: // global
           if (_c9KuR::P64 != 4) goto u9Kvi; else goto u9Kvi;
       u9Kvi: // global
           Sp = Sp + 8;
           goto u9KvL;
       u9Kvf: // global
           Sp = Sp + 8;
           goto u9KvL;
       u9KvL: // global
           call _c9KuK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kt4_info" {
     block_c9Kt4_info:
         const _c9Kt4;
         const 0;
         const 30;
 },
 _c9Ksy() //  [R1]
         { []
         }
     {offset
       c9Ksy: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9Kvj;
               case 2, 3, 4, 5, 6 : goto u9Kvo;
           }
       u9Kvo: // global
           Sp = Sp + 8;
           call _c9KuK() args: 0, res: 0, upd: 0;
       u9Kvj: // global
           Sp = Sp + 8;
           call _c9KuG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Ksy_info" {
     block_c9Ksy_info:
         const _c9Ksy;
         const 0;
         const 30;
 },
 _c9Ksn() //  []
         { []
         }
     {offset
       c9Ksn: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ksn_info" {
     block_c9Ksn_info:
         const _c9Ksn;
         const 0;
         const 30;
 },
 _c9Kuy() //  [R1]
         { []
         }
     {offset
       c9Kuy: // global
           if (R1 & 7 == 4) goto u9Kvp; else goto u9Kvq;
       u9Kvp: // global
           Sp = Sp + 8;
           call _c9KuK() args: 0, res: 0, upd: 0;
       u9Kvq: // global
           Sp = Sp + 8;
           call _c9KuG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kuy_info" {
     block_c9Kuy_info:
         const _c9Kuy;
         const 0;
         const 30;
 },
 _c9KuK() //  []
         { []
         }
     {offset
       c9KuK: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KuG() //  []
         { []
         }
     {offset
       c9KuG: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.897086445 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$c<=_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c<=_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<=_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Kxn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Kxo; else goto c9Kxp;
       c9Kxo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Kxp: // global
           I64[Sp - 16] = block_c9Kxe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KBo; else goto c9Kxf;
       u9KBo: // global
           call _c9Kxe(R1) args: 0, res: 0, upd: 0;
       c9Kxf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$c<=_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c<=_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Kxe() //  [R1]
         { []
         }
     {offset
       c9Kxe: // global
           _s9FAn::P64 = P64[Sp + 8];
           _c9Kxm::P64 = R1 & 7;
           if (_c9Kxm::P64 < 3) goto u9KAN; else goto u9KAO;
       u9KAN: // global
           if (_c9Kxm::P64 < 2) goto c9Kxi; else goto c9Kxj;
       c9Kxi: // global
           I64[Sp + 8] = block_c9Kxs_info;
           R1 = _s9FAn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KBk; else goto c9Kxu;
       u9KBk: // global
           call _c9Kxs() args: 0, res: 0, upd: 0;
       c9Kxu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kxj: // global
           I64[Sp + 8] = block_c9KxB_info;
           R1 = _s9FAn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KBl; else goto c9KxD;
       u9KBl: // global
           call _c9KxB(R1) args: 0, res: 0, upd: 0;
       c9KxD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9KAO: // global
           if (_c9Kxm::P64 < 4) goto c9Kxk; else goto c9Kxl;
       c9Kxk: // global
           I64[Sp] = block_c9KxY_info;
           _s9FAs::P64 = P64[R1 + 5];
           R1 = _s9FAn::P64;
           P64[Sp + 8] = _s9FAs::P64;
           if (R1 & 7 != 0) goto u9KBm; else goto c9Ky0;
       u9KBm: // global
           call _c9KxY(R1) args: 0, res: 0, upd: 0;
       c9Ky0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kxl: // global
           I64[Sp + 8] = block_c9KAr_info;
           R1 = _s9FAn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KBn; else goto c9KAt;
       u9KBn: // global
           call _c9KAr(R1) args: 0, res: 0, upd: 0;
       c9KAt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Kxe_info" {
     block_c9Kxe_info:
         const _c9Kxe;
         const 1;
         const 30;
 },
 _c9Kxs() //  []
         { []
         }
     {offset
       c9Kxs: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Kxs_info" {
     block_c9Kxs_info:
         const _c9Kxs;
         const 0;
         const 30;
 },
 _c9KxB() //  [R1]
         { []
         }
     {offset
       c9KxB: // global
           _c9KAM::P64 = R1 & 7;
           if (_c9KAM::P64 < 2) goto u9KAV; else goto u9KAP;
       u9KAV: // global
           Sp = Sp + 8;
           call _c9KAz() args: 0, res: 0, upd: 0;
       u9KAP: // global
           if (_c9KAM::P64 != 3) goto u9KAX; else goto u9KAX;
       u9KAX: // global
           Sp = Sp + 8;
           call _c9KAD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KxB_info" {
     block_c9KxB_info:
         const _c9KxB;
         const 0;
         const 30;
 },
 _c9KxY() //  [R1]
         { []
         }
     {offset
       c9KxY: // global
           _c9KAF::P64 = R1 & 7;
           if (_c9KAF::P64 == 3) goto c9Kyb; else goto u9KAQ;
       c9Kyb: // global
           I64[Sp] = block_c9Ky9_info;
           _s9FAu::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FAu::P64;
           if (R1 & 7 != 0) goto u9KBr; else goto c9Kyc;
       u9KBr: // global
           call _c9Ky9(R1) args: 0, res: 0, upd: 0;
       c9Kyc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9KAQ: // global
           if (_c9KAF::P64 != 4) goto u9KAZ; else goto u9KAY;
       u9KAZ: // global
           Sp = Sp + 16;
           call _c9KAz() args: 0, res: 0, upd: 0;
       u9KAY: // global
           Sp = Sp + 16;
           call _c9KAD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KxY_info" {
     block_c9KxY_info:
         const _c9KxY;
         const 1;
         const 30;
 },
 _c9Ky9() //  [R1]
         { []
         }
     {offset
       c9Ky9: // global
           _s9FAu::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Kyj;
               case 2 : goto c9Kyt;
               case 3 : goto c9KyZ;
               case 4 : goto c9Kzr;
               case 5 : goto c9KzP;
               case 6 : goto c9KA9;
           }
       c9KA9: // global
           I64[Sp + 8] = block_c9KA7_info;
           R1 = _s9FAu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KBz; else goto c9KAa;
       u9KBz: // global
           call _c9KA7(R1) args: 0, res: 0, upd: 0;
       c9KAa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KzP: // global
           I64[Sp + 8] = block_c9KzN_info;
           R1 = _s9FAu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KBy; else goto c9KzQ;
       u9KBy: // global
           call _c9KzN(R1) args: 0, res: 0, upd: 0;
       c9KzQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kzr: // global
           I64[Sp + 8] = block_c9Kzp_info;
           R1 = _s9FAu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KBx; else goto c9Kzs;
       u9KBx: // global
           call _c9Kzp(R1) args: 0, res: 0, upd: 0;
       c9Kzs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KyZ: // global
           I64[Sp + 8] = block_c9KyX_info;
           R1 = _s9FAu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KBw; else goto c9Kz0;
       u9KBw: // global
           call _c9KyX(R1) args: 0, res: 0, upd: 0;
       c9Kz0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kyt: // global
           I64[Sp + 8] = block_c9Kyr_info;
           R1 = _s9FAu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KBv; else goto c9Kyu;
       u9KBv: // global
           call _c9Kyr(R1) args: 0, res: 0, upd: 0;
       c9Kyu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Kyj: // global
           I64[Sp + 8] = block_c9Kyg_info;
           R1 = _s9FAu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KBu; else goto c9Kyk;
       u9KBu: // global
           call _c9Kyg() args: 0, res: 0, upd: 0;
       c9Kyk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ky9_info" {
     block_c9Ky9_info:
         const _c9Ky9;
         const 1;
         const 30;
 },
 _c9KA7() //  [R1]
         { []
         }
     {offset
       c9KA7: // global
           if (R1 & 7 == 6) goto u9KB0; else goto u9KB1;
       u9KB0: // global
           Sp = Sp + 8;
           call _c9KAD() args: 0, res: 0, upd: 0;
       u9KB1: // global
           Sp = Sp + 8;
           call _c9KAz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KA7_info" {
     block_c9KA7_info:
         const _c9KA7;
         const 0;
         const 30;
 },
 _c9KzN() //  [R1]
         { []
         }
     {offset
       c9KzN: // global
           _c9KAI::P64 = R1 & 7;
           if (_c9KAI::P64 != 5) goto u9KAU; else goto u9KB2;
       u9KAU: // global
           if (_c9KAI::P64 != 6) goto u9KB4; else goto u9KB3;
       u9KB4: // global
           Sp = Sp + 8;
           call _c9KAz() args: 0, res: 0, upd: 0;
       u9KB3: // global
           Sp = Sp + 8;
           goto u9KBI;
       u9KB2: // global
           Sp = Sp + 8;
           goto u9KBI;
       u9KBI: // global
           call _c9KAD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KzN_info" {
     block_c9KzN_info:
         const _c9KzN;
         const 0;
         const 30;
 },
 _c9Kzp() //  [R1]
         { []
         }
     {offset
       c9Kzp: // global
           _c9KAJ::P64 = R1 & 7;
           if (_c9KAJ::P64 < 4) goto u9KB5; else goto u9KAT;
       u9KB5: // global
           Sp = Sp + 8;
           call _c9KAz() args: 0, res: 0, upd: 0;
       u9KAT: // global
           if (_c9KAJ::P64 != 5) goto u9KB7; else goto u9KB7;
       u9KB7: // global
           Sp = Sp + 8;
           call _c9KAD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kzp_info" {
     block_c9Kzp_info:
         const _c9Kzp;
         const 0;
         const 30;
 },
 _c9KyX() //  [R1]
         { []
         }
     {offset
       c9KyX: // global
           _c9KAK::P64 = R1 & 7;
           if (_c9KAK::P64 < 6) goto u9KAR; else goto u9KB8;
       u9KAR: // global
           if (_c9KAK::P64 < 3) goto u9KB9; else goto u9KAS;
       u9KB9: // global
           Sp = Sp + 8;
           call _c9KAz() args: 0, res: 0, upd: 0;
       u9KAS: // global
           if (_c9KAK::P64 != 4) goto u9KBb; else goto u9KBb;
       u9KBb: // global
           Sp = Sp + 8;
           goto u9KBE;
       u9KB8: // global
           Sp = Sp + 8;
           goto u9KBE;
       u9KBE: // global
           call _c9KAD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KyX_info" {
     block_c9KyX_info:
         const _c9KyX;
         const 0;
         const 30;
 },
 _c9Kyr() //  [R1]
         { []
         }
     {offset
       c9Kyr: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9KBc;
               case 2, 3, 4, 5, 6 : goto u9KBh;
           }
       u9KBh: // global
           Sp = Sp + 8;
           call _c9KAD() args: 0, res: 0, upd: 0;
       u9KBc: // global
           Sp = Sp + 8;
           call _c9KAz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Kyr_info" {
     block_c9Kyr_info:
         const _c9Kyr;
         const 0;
         const 30;
 },
 _c9Kyg() //  []
         { []
         }
     {offset
       c9Kyg: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Kyg_info" {
     block_c9Kyg_info:
         const _c9Kyg;
         const 0;
         const 30;
 },
 _c9KAr() //  [R1]
         { []
         }
     {offset
       c9KAr: // global
           if (R1 & 7 == 4) goto u9KBi; else goto u9KBj;
       u9KBi: // global
           Sp = Sp + 8;
           call _c9KAD() args: 0, res: 0, upd: 0;
       u9KBj: // global
           Sp = Sp + 8;
           call _c9KAz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KAr_info" {
     block_c9KAr_info:
         const _c9KAr;
         const 0;
         const 30;
 },
 _c9KAD() //  []
         { []
         }
     {offset
       c9KAD: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KAz() //  []
         { []
         }
     {offset
       c9KAz: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.928331198 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$cmax_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$cmax_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmax_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KDg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9KDh; else goto c9KDi;
       c9KDh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KDi: // global
           I64[Sp - 16] = block_c9KD7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KGV; else goto c9KD8;
       u9KGV: // global
           call _c9KD7(R1) args: 0, res: 0, upd: 0;
       c9KD8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$cmax_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$cmax_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9KD7() //  [R1]
         { []
         }
     {offset
       c9KD7: // global
           _s9FAE::P64 = P64[Sp + 8];
           _c9KDf::P64 = R1 & 7;
           if (_c9KDf::P64 < 3) goto u9KGp; else goto u9KGq;
       u9KGp: // global
           if (_c9KDf::P64 < 2) goto c9KDb; else goto c9KDc;
       c9KDb: // global
           R1 = _s9FAE::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9KDc: // global
           I64[Sp + 8] = block_c9KDo_info;
           R1 = _s9FAE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KGS; else goto c9KDq;
       u9KGS: // global
           call _c9KDo(R1) args: 0, res: 0, upd: 0;
       c9KDq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9KGq: // global
           if (_c9KDf::P64 < 4) goto c9KDd; else goto c9KDe;
       c9KDd: // global
           I64[Sp - 8] = block_c9KDH_info;
           _s9FAF::P64 = R1;
           _s9FAI::P64 = P64[R1 + 5];
           R1 = _s9FAE::P64;
           P64[Sp] = _s9FAI::P64;
           P64[Sp + 8] = _s9FAF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9KGT; else goto c9KDJ;
       u9KGT: // global
           call _c9KDH(R1) args: 0, res: 0, upd: 0;
       c9KDJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KDe: // global
           I64[Sp + 8] = block_c9KGa_info;
           R1 = _s9FAE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KGU; else goto c9KGc;
       u9KGU: // global
           call _c9KGa() args: 0, res: 0, upd: 0;
       c9KGc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KD7_info" {
     block_c9KD7_info:
         const _c9KD7;
         const 1;
         const 30;
 },
 _c9KDo() //  [R1]
         { []
         }
     {offset
       c9KDo: // global
           _c9KGo::P64 = R1 & 7;
           if (_c9KGo::P64 == 3) goto c9KDA; else goto u9KGr;
       c9KDA: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9KGr: // global
           if (_c9KGo::P64 != 4) goto c9KDw; else goto u9KGx;
       c9KDw: // global
           R1 = GHC.Conc.Sync.ThreadFinished_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9KGx: // global
           Sp = Sp + 8;
           call _c9KG7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KDo_info" {
     block_c9KDo_info:
         const _c9KDo;
         const 0;
         const 30;
 },
 _c9KDH() //  [R1]
         { []
         }
     {offset
       c9KDH: // global
           _c9KGh::P64 = R1 & 7;
           if (_c9KGh::P64 == 3) goto c9KDU; else goto u9KGs;
       c9KDU: // global
           I64[Sp - 8] = block_c9KDS_info;
           _s9FAJ::P64 = R1;
           _s9FAK::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp] = _s9FAK::P64;
           P64[Sp + 8] = _s9FAJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9KGX; else goto c9KDV;
       u9KGX: // global
           call _c9KDS(R1) args: 0, res: 0, upd: 0;
       c9KDV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9KGs: // global
           if (_c9KGh::P64 != 4) goto u9KGz; else goto u9KGy;
       u9KGz: // global
           Sp = Sp + 16;
           call _c9KFZ() args: 0, res: 0, upd: 0;
       u9KGy: // global
           Sp = Sp + 24;
           call _c9KG7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KDH_info" {
     block_c9KDH_info:
         const _c9KDH;
         const 2;
         const 30;
 },
 _c9KDS() //  [R1]
         { []
         }
     {offset
       c9KDS: // global
           _s9FAK::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9KE2;
               case 2 : goto c9KEc;
               case 3 : goto c9KEI;
               case 4 : goto c9KFa;
               case 5 : goto c9KFy;
               case 6 : goto c9KFS;
           }
       c9KFS: // global
           I64[Sp + 8] = block_c9KFQ_info;
           R1 = _s9FAK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KH5; else goto c9KFT;
       u9KH5: // global
           call _c9KFQ(R1) args: 0, res: 0, upd: 0;
       c9KFT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KFy: // global
           I64[Sp + 8] = block_c9KFw_info;
           R1 = _s9FAK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KH4; else goto c9KFz;
       u9KH4: // global
           call _c9KFw(R1) args: 0, res: 0, upd: 0;
       c9KFz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KFa: // global
           I64[Sp + 8] = block_c9KF8_info;
           R1 = _s9FAK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KH3; else goto c9KFb;
       u9KH3: // global
           call _c9KF8(R1) args: 0, res: 0, upd: 0;
       c9KFb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KEI: // global
           I64[Sp + 8] = block_c9KEG_info;
           R1 = _s9FAK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KH2; else goto c9KEJ;
       u9KH2: // global
           call _c9KEG(R1) args: 0, res: 0, upd: 0;
       c9KEJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KEc: // global
           I64[Sp + 8] = block_c9KEa_info;
           R1 = _s9FAK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KH1; else goto c9KEd;
       u9KH1: // global
           call _c9KEa(R1) args: 0, res: 0, upd: 0;
       c9KEd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KE2: // global
           I64[Sp + 8] = block_c9KDZ_info;
           R1 = _s9FAK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KH0; else goto c9KE3;
       u9KH0: // global
           call _c9KDZ() args: 0, res: 0, upd: 0;
       c9KE3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KDS_info" {
     block_c9KDS_info:
         const _c9KDS;
         const 3;
         const 30;
 },
 _c9KFQ() //  [R1]
         { []
         }
     {offset
       c9KFQ: // global
           if (R1 & 7 == 6) goto u9KGA; else goto u9KGB;
       u9KGA: // global
           Sp = Sp + 8;
           call _c9KG3() args: 0, res: 0, upd: 0;
       u9KGB: // global
           Sp = Sp + 16;
           call _c9KFZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KFQ_info" {
     block_c9KFQ_info:
         const _c9KFQ;
         const 2;
         const 30;
 },
 _c9KFw() //  [R1]
         { []
         }
     {offset
       c9KFw: // global
           _c9KGk::P64 = R1 & 7;
           if (_c9KGk::P64 != 5) goto u9KGw; else goto u9KGC;
       u9KGw: // global
           if (_c9KGk::P64 != 6) goto u9KGE; else goto u9KGD;
       u9KGE: // global
           Sp = Sp + 16;
           call _c9KFZ() args: 0, res: 0, upd: 0;
       u9KGD: // global
           Sp = Sp + 8;
           goto u9KHe;
       u9KGC: // global
           Sp = Sp + 8;
           goto u9KHe;
       u9KHe: // global
           call _c9KG3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KFw_info" {
     block_c9KFw_info:
         const _c9KFw;
         const 2;
         const 30;
 },
 _c9KF8() //  [R1]
         { []
         }
     {offset
       c9KF8: // global
           _c9KGl::P64 = R1 & 7;
           if (_c9KGl::P64 < 4) goto u9KGF; else goto u9KGv;
       u9KGF: // global
           Sp = Sp + 16;
           call _c9KFZ() args: 0, res: 0, upd: 0;
       u9KGv: // global
           if (_c9KGl::P64 != 5) goto u9KGH; else goto u9KGH;
       u9KGH: // global
           Sp = Sp + 8;
           call _c9KG3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KF8_info" {
     block_c9KF8_info:
         const _c9KF8;
         const 2;
         const 30;
 },
 _c9KEG() //  [R1]
         { []
         }
     {offset
       c9KEG: // global
           _c9KGm::P64 = R1 & 7;
           if (_c9KGm::P64 < 6) goto u9KGt; else goto u9KGI;
       u9KGt: // global
           if (_c9KGm::P64 < 3) goto u9KGJ; else goto u9KGu;
       u9KGJ: // global
           Sp = Sp + 16;
           call _c9KFZ() args: 0, res: 0, upd: 0;
       u9KGu: // global
           if (_c9KGm::P64 != 4) goto u9KGL; else goto u9KGL;
       u9KGL: // global
           Sp = Sp + 8;
           goto u9KHa;
       u9KGI: // global
           Sp = Sp + 8;
           goto u9KHa;
       u9KHa: // global
           call _c9KG3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KEG_info" {
     block_c9KEG_info:
         const _c9KEG;
         const 2;
         const 30;
 },
 _c9KEa() //  [R1]
         { []
         }
     {offset
       c9KEa: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9KGM;
               case 2, 3, 4, 5, 6 : goto u9KGR;
           }
       u9KGR: // global
           Sp = Sp + 8;
           call _c9KG3() args: 0, res: 0, upd: 0;
       u9KGM: // global
           Sp = Sp + 16;
           call _c9KFZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KEa_info" {
     block_c9KEa_info:
         const _c9KEa;
         const 2;
         const 30;
 },
 _c9KG3() //  []
         { []
         }
     {offset
       c9KG3: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KDZ() //  []
         { []
         }
     {offset
       c9KDZ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KDZ_info" {
     block_c9KDZ_info:
         const _c9KDZ;
         const 130;
         const 30;
 },
 _c9KFZ() //  []
         { []
         }
     {offset
       c9KFZ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KG7() //  []
         { []
         }
     {offset
       c9KG7: // global
           R1 = GHC.Conc.Sync.ThreadDied_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KGa() //  []
         { []
         }
     {offset
       c9KGa: // global
           R1 = GHC.Conc.Sync.ThreadDied_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KGa_info" {
     block_c9KGa_info:
         const _c9KGa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.958455282 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$cmin_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$cmin_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmin_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KIP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9KIQ; else goto c9KIR;
       c9KIQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KIR: // global
           I64[Sp - 16] = block_c9KIG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KMx; else goto c9KIH;
       u9KMx: // global
           call _c9KIG(R1) args: 0, res: 0, upd: 0;
       c9KIH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$cmin_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$cmin_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9KIG() //  [R1]
         { []
         }
     {offset
       c9KIG: // global
           _s9FAU::P64 = P64[Sp + 8];
           _c9KIO::P64 = R1 & 7;
           if (_c9KIO::P64 < 3) goto u9KM2; else goto u9KM3;
       u9KM2: // global
           if (_c9KIO::P64 < 2) goto c9KIK; else goto c9KIL;
       c9KIK: // global
           I64[Sp + 8] = block_c9KIU_info;
           R1 = _s9FAU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KMu; else goto c9KIW;
       u9KMu: // global
           call _c9KIU() args: 0, res: 0, upd: 0;
       c9KIW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KIL: // global
           I64[Sp + 8] = block_c9KJ3_info;
           R1 = _s9FAU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KMv; else goto c9KJ5;
       u9KMv: // global
           call _c9KJ3(R1) args: 0, res: 0, upd: 0;
       c9KJ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9KM3: // global
           if (_c9KIO::P64 < 4) goto c9KIM; else goto c9KIN;
       c9KIM: // global
           I64[Sp - 8] = block_c9KJq_info;
           _s9FAV::P64 = R1;
           _s9FAZ::P64 = P64[R1 + 5];
           R1 = _s9FAU::P64;
           P64[Sp] = _s9FAZ::P64;
           P64[Sp + 8] = _s9FAV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9KMw; else goto c9KJs;
       u9KMw: // global
           call _c9KJq(R1) args: 0, res: 0, upd: 0;
       c9KJs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KIN: // global
           R1 = _s9FAU::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KIG_info" {
     block_c9KIG_info:
         const _c9KIG;
         const 1;
         const 30;
 },
 _c9KIU() //  []
         { []
         }
     {offset
       c9KIU: // global
           R1 = GHC.Conc.Sync.ThreadRunning_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KIU_info" {
     block_c9KIU_info:
         const _c9KIU;
         const 0;
         const 30;
 },
 _c9KJ3() //  [R1]
         { []
         }
     {offset
       c9KJ3: // global
           _c9KM1::P64 = R1 & 7;
           if (_c9KM1::P64 < 2) goto c9KJb; else goto u9KM4;
       c9KJb: // global
           R1 = GHC.Conc.Sync.ThreadRunning_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9KM4: // global
           if (_c9KM1::P64 != 3) goto c9KJn; else goto c9KJn;
       c9KJn: // global
           R1 = GHC.Conc.Sync.ThreadFinished_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KJ3_info" {
     block_c9KJ3_info:
         const _c9KJ3;
         const 0;
         const 30;
 },
 _c9KJq() //  [R1]
         { []
         }
     {offset
       c9KJq: // global
           _c9KLU::P64 = R1 & 7;
           if (_c9KLU::P64 == 3) goto c9KJD; else goto u9KM5;
       c9KJD: // global
           I64[Sp - 8] = block_c9KJB_info;
           _s9FB0::P64 = R1;
           _s9FB1::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp] = _s9FB1::P64;
           P64[Sp + 8] = _s9FB0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9KMy; else goto c9KJE;
       u9KMy: // global
           call _c9KJB(R1) args: 0, res: 0, upd: 0;
       c9KJE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9KM5: // global
           if (_c9KLU::P64 == 4) goto u9KMa; else goto u9KMb;
       u9KMa: // global
           Sp = Sp + 16;
           call _c9KLQ() args: 0, res: 0, upd: 0;
       u9KMb: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call _c9KLI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KJq_info" {
     block_c9KJq_info:
         const _c9KJq;
         const 2;
         const 30;
 },
 _c9KJB() //  [R1]
         { []
         }
     {offset
       c9KJB: // global
           _s9FB1::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9KJL;
               case 2 : goto c9KJV;
               case 3 : goto c9KKr;
               case 4 : goto c9KKT;
               case 5 : goto c9KLh;
               case 6 : goto c9KLB;
           }
       c9KLB: // global
           I64[Sp + 8] = block_c9KLz_info;
           R1 = _s9FB1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KMG; else goto c9KLC;
       u9KMG: // global
           call _c9KLz(R1) args: 0, res: 0, upd: 0;
       c9KLC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KLh: // global
           I64[Sp + 8] = block_c9KLf_info;
           R1 = _s9FB1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KMF; else goto c9KLi;
       u9KMF: // global
           call _c9KLf(R1) args: 0, res: 0, upd: 0;
       c9KLi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KKT: // global
           I64[Sp + 8] = block_c9KKR_info;
           R1 = _s9FB1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KME; else goto c9KKU;
       u9KME: // global
           call _c9KKR(R1) args: 0, res: 0, upd: 0;
       c9KKU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KKr: // global
           I64[Sp + 8] = block_c9KKp_info;
           R1 = _s9FB1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KMD; else goto c9KKs;
       u9KMD: // global
           call _c9KKp(R1) args: 0, res: 0, upd: 0;
       c9KKs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KJV: // global
           I64[Sp + 8] = block_c9KJT_info;
           R1 = _s9FB1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9KMC; else goto c9KJW;
       u9KMC: // global
           call _c9KJT(R1) args: 0, res: 0, upd: 0;
       c9KJW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9KJL: // global
           I64[Sp + 16] = block_c9KJI_info;
           R1 = _s9FB1::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9KMB; else goto c9KJM;
       u9KMB: // global
           call _c9KJI() args: 0, res: 0, upd: 0;
       c9KJM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KJB_info" {
     block_c9KJB_info:
         const _c9KJB;
         const 3;
         const 30;
 },
 _c9KLz() //  [R1]
         { []
         }
     {offset
       c9KLz: // global
           if (R1 & 7 == 6) goto u9KMc; else goto u9KMd;
       u9KMc: // global
           Sp = Sp + 16;
           call _c9KLQ() args: 0, res: 0, upd: 0;
       u9KMd: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c9KLI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KLz_info" {
     block_c9KLz_info:
         const _c9KLz;
         const 2;
         const 30;
 },
 _c9KLf() //  [R1]
         { []
         }
     {offset
       c9KLf: // global
           _c9KLX::P64 = R1 & 7;
           if (_c9KLX::P64 != 5) goto u9KM9; else goto u9KMe;
       u9KM9: // global
           if (_c9KLX::P64 != 6) goto u9KMg; else goto u9KMf;
       u9KMg: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c9KLI() args: 0, res: 0, upd: 0;
       u9KMf: // global
           Sp = Sp + 16;
           goto u9KMP;
       u9KMe: // global
           Sp = Sp + 16;
           goto u9KMP;
       u9KMP: // global
           call _c9KLQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KLf_info" {
     block_c9KLf_info:
         const _c9KLf;
         const 2;
         const 30;
 },
 _c9KKR() //  [R1]
         { []
         }
     {offset
       c9KKR: // global
           _c9KLY::P64 = R1 & 7;
           if (_c9KLY::P64 < 4) goto u9KMh; else goto u9KM8;
       u9KMh: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c9KLI() args: 0, res: 0, upd: 0;
       u9KM8: // global
           if (_c9KLY::P64 != 5) goto u9KMj; else goto u9KMj;
       u9KMj: // global
           Sp = Sp + 16;
           call _c9KLQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KKR_info" {
     block_c9KKR_info:
         const _c9KKR;
         const 2;
         const 30;
 },
 _c9KKp() //  [R1]
         { []
         }
     {offset
       c9KKp: // global
           _c9KLZ::P64 = R1 & 7;
           if (_c9KLZ::P64 < 6) goto u9KM6; else goto u9KMk;
       u9KM6: // global
           if (_c9KLZ::P64 < 3) goto u9KMl; else goto u9KM7;
       u9KMl: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c9KLI() args: 0, res: 0, upd: 0;
       u9KM7: // global
           if (_c9KLZ::P64 != 4) goto u9KMn; else goto u9KMn;
       u9KMn: // global
           Sp = Sp + 16;
           goto u9KML;
       u9KMk: // global
           Sp = Sp + 16;
           goto u9KML;
       u9KML: // global
           call _c9KLQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KKp_info" {
     block_c9KKp_info:
         const _c9KKp;
         const 2;
         const 30;
 },
 _c9KJT() //  [R1]
         { []
         }
     {offset
       c9KJT: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9KMo;
               case 2, 3, 4, 5, 6 : goto u9KMt;
           }
       u9KMt: // global
           Sp = Sp + 16;
           call _c9KLQ() args: 0, res: 0, upd: 0;
       u9KMo: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c9KLI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9KJT_info" {
     block_c9KJT_info:
         const _c9KJT;
         const 2;
         const 30;
 },
 _c9KJI() //  []
         { []
         }
     {offset
       c9KJI: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KJI_info" {
     block_c9KJI_info:
         const _c9KJI;
         const 1;
         const 30;
 },
 _c9KLQ() //  []
         { []
         }
     {offset
       c9KLQ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9KLI() //  []
         { []
         }
     {offset
       c9KLI: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.982404512 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Conc.Sync.$fEqThreadStatus_closure+1;
         const GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<=_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>=_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmax_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.984188981 UTC

[section ""cstring" . GHC.Conc.Sync.$trModule4_bytes" {
     GHC.Conc.Sync.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.985845727 UTC

[section ""data" . GHC.Conc.Sync.$trModule3_closure" {
     GHC.Conc.Sync.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.987483566 UTC

[section ""cstring" . GHC.Conc.Sync.$trModule2_bytes" {
     GHC.Conc.Sync.$trModule2_bytes:
         I8[] [71,72,67,46,67,111,110,99,46,83,121,110,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.98974764 UTC

[section ""data" . GHC.Conc.Sync.$trModule1_closure" {
     GHC.Conc.Sync.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.991416944 UTC

[section ""data" . GHC.Conc.Sync.$trModule_closure" {
     GHC.Conc.Sync.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Conc.Sync.$trModule3_closure+1;
         const GHC.Conc.Sync.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.993164514 UTC

[section ""data" . $krep_r9FuN_closure" {
     $krep_r9FuN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'LiftedRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.99547011 UTC

[section ""data" . $krep1_r9FuO_closure" {
     $krep1_r9FuO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRuntimeRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.997086134 UTC

[section ""data" . $krep2_r9FuP_closure" {
     $krep2_r9FuP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:46.998775979 UTC

[section ""data" . $krep3_r9FuQ_closure" {
     $krep3_r9FuQ_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.000346659 UTC

[section ""data" . $krep4_r9FuR_closure" {
     $krep4_r9FuR_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcThreadId#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.002003912 UTC

[section ""data" . $krep5_r9FuS_closure" {
     $krep5_r9FuS_closure:
         const :_con_info;
         const $krep3_r9FuQ_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.003696898 UTC

[section ""data" . $krep6_r9FuT_closure" {
     $krep6_r9FuT_closure:
         const :_con_info;
         const $krep2_r9FuP_closure+1;
         const $krep5_r9FuS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.005848234 UTC

[section ""data" . $krep7_r9FuU_closure" {
     $krep7_r9FuU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcTVar#_closure;
         const $krep6_r9FuT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.007411844 UTC

[section ""data" . $krep8_r9FuV_closure" {
     $krep8_r9FuV_closure:
         const :_con_info;
         const $krep2_r9FuP_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.009042638 UTC

[section ""data" . $krep9_r9FuW_closure" {
     $krep9_r9FuW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcState#_closure;
         const $krep8_r9FuV_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.010776135 UTC

[section ""data" . $krep10_r9FuX_closure" {
     $krep10_r9FuX_closure:
         const :_con_info;
         const $krep1_r9FuO_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.012430231 UTC

[section ""data" . $krep11_r9FuY_closure" {
     $krep11_r9FuY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'[]_closure;
         const $krep10_r9FuX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.014729479 UTC

[section ""data" . $krep12_r9FuZ_closure" {
     $krep12_r9FuZ_closure:
         const :_con_info;
         const $krep11_r9FuY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.016372124 UTC

[section ""data" . $krep13_r9Fv0_closure" {
     $krep13_r9Fv0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'TupleRep_closure;
         const $krep12_r9FuZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.018441772 UTC

[section ""data" . $krep14_r9Fv1_closure" {
     $krep14_r9Fv1_closure:
         const :_con_info;
         const $krep9_r9FuW_closure+1;
         const $krep5_r9FuS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.020079516 UTC

[section ""data" . $krep15_r9Fv2_closure" {
     $krep15_r9Fv2_closure:
         const :_con_info;
         const $krep_r9FuN_closure+1;
         const $krep14_r9Fv1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.021751279 UTC

[section ""data" . $krep16_r9Fv3_closure" {
     $krep16_r9Fv3_closure:
         const :_con_info;
         const $krep13_r9Fv0_closure+1;
         const $krep15_r9Fv2_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.023391692 UTC

[section ""data" . $krep17_r9Fv4_closure" {
     $krep17_r9Fv4_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc(#,#)_closure;
         const $krep16_r9Fv3_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.025066715 UTC

[section ""data" . $krep18_r9Fv5_closure" {
     $krep18_r9Fv5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r9FuW_closure+1;
         const $krep17_r9Fv4_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.026725913 UTC

[section ""cstring" . GHC.Conc.Sync.$tcThreadId2_bytes" {
     GHC.Conc.Sync.$tcThreadId2_bytes:
         I8[] [84,104,114,101,97,100,73,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.028346053 UTC

[section ""data" . GHC.Conc.Sync.$tcThreadId1_closure" {
     GHC.Conc.Sync.$tcThreadId1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcThreadId2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.030480655 UTC

[section ""data" . GHC.Conc.Sync.$tcThreadId_closure" {
     GHC.Conc.Sync.$tcThreadId_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcThreadId1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16775948407395805744;
         const 12520674293648100702;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.032193656 UTC

[section ""data" . $krep19_r9Fv6_closure" {
     $krep19_r9Fv6_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Conc.Sync.$tcThreadId_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.03391674 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadId1_closure" {
     GHC.Conc.Sync.$tc'ThreadId1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r9FuR_closure+1;
         const $krep19_r9Fv6_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.035544118 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'ThreadId3_bytes" {
     GHC.Conc.Sync.$tc'ThreadId3_bytes:
         I8[] [39,84,104,114,101,97,100,73,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.037202215 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadId2_closure" {
     GHC.Conc.Sync.$tc'ThreadId2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'ThreadId3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.039368307 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadId_closure" {
     GHC.Conc.Sync.$tc'ThreadId_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'ThreadId2_closure+1;
         const GHC.Conc.Sync.$tc'ThreadId1_closure+4;
         const 18342150043682338300;
         const 5104860271509165481;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.041183881 UTC

[section ""cstring" . GHC.Conc.Sync.$tcBlockReason2_bytes" {
     GHC.Conc.Sync.$tcBlockReason2_bytes:
         I8[] [66,108,111,99,107,82,101,97,115,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.043263796 UTC

[section ""data" . GHC.Conc.Sync.$tcBlockReason1_closure" {
     GHC.Conc.Sync.$tcBlockReason1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcBlockReason2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.044962044 UTC

[section ""data" . GHC.Conc.Sync.$tcBlockReason_closure" {
     GHC.Conc.Sync.$tcBlockReason_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcBlockReason1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13301038780413995570;
         const 11021250300446969031;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.046690326 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Conc.Sync.$tcBlockReason_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.048289819 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnMVar2_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnMVar2_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.049936291 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnMVar1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnMVar1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnMVar2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.051608507 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnMVar_closure" {
     GHC.Conc.Sync.$tc'BlockedOnMVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnMVar1_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 6633002816895506850;
         const 13520604374172074732;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.053332597 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnBlackHole3_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnBlackHole3_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,66,108,97,99,107,72,111,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.054994962 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnBlackHole2_closure" {
     GHC.Conc.Sync.$tc'BlockedOnBlackHole2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.056683542 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnBlackHole_closure" {
     GHC.Conc.Sync.$tc'BlockedOnBlackHole_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole2_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 9499731398899925739;
         const 7296688042620961692;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.058460984 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnException2_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnException2_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.060055551 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnException1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnException1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnException2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.062209248 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnException_closure" {
     GHC.Conc.Sync.$tc'BlockedOnException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnException1_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 16834505563200403543;
         const 10899729493106152581;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.06393942 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnSTM2_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnSTM2_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.06616946 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnSTM1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnSTM1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnSTM2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.067825489 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnSTM_closure" {
     GHC.Conc.Sync.$tc'BlockedOnSTM_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnSTM1_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 1161208048218837616;
         const 14246412223428266787;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.06960397 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnForeignCall2_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnForeignCall2_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,70,111,114,101,105,103,110,67,97,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.071251803 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnForeignCall1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnForeignCall1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnForeignCall2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.073011277 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnForeignCall_closure" {
     GHC.Conc.Sync.$tc'BlockedOnForeignCall_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnForeignCall1_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 7408412473094687054;
         const 5512662453084487661;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.075407285 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnOther2_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnOther2_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,79,116,104,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.077099129 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnOther1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnOther1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnOther2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.078816339 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnOther_closure" {
     GHC.Conc.Sync.$tc'BlockedOnOther_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnOther1_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 12822899422417308746;
         const 1265626399802742388;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.080553273 UTC

[section ""cstring" . GHC.Conc.Sync.$tcThreadStatus2_bytes" {
     GHC.Conc.Sync.$tcThreadStatus2_bytes:
         I8[] [84,104,114,101,97,100,83,116,97,116,117,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.082269606 UTC

[section ""data" . GHC.Conc.Sync.$tcThreadStatus1_closure" {
     GHC.Conc.Sync.$tcThreadStatus1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcThreadStatus2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.083952933 UTC

[section ""data" . GHC.Conc.Sync.$tcThreadStatus_closure" {
     GHC.Conc.Sync.$tcThreadStatus_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcThreadStatus1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16437204929171641638;
         const 3495092226815585861;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.086107741 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadDied1_closure" {
     GHC.Conc.Sync.$tc'ThreadDied1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Conc.Sync.$tcThreadStatus_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.087781515 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'ThreadRunning2_bytes" {
     GHC.Conc.Sync.$tc'ThreadRunning2_bytes:
         I8[] [39,84,104,114,101,97,100,82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.089417207 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadRunning1_closure" {
     GHC.Conc.Sync.$tc'ThreadRunning1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'ThreadRunning2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.091645331 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadRunning_closure" {
     GHC.Conc.Sync.$tc'ThreadRunning_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'ThreadRunning1_closure+1;
         const GHC.Conc.Sync.$tc'ThreadDied1_closure+1;
         const 1667122312602609882;
         const 13647871799576313560;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.09339867 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'ThreadFinished2_bytes" {
     GHC.Conc.Sync.$tc'ThreadFinished2_bytes:
         I8[] [39,84,104,114,101,97,100,70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.095099762 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadFinished1_closure" {
     GHC.Conc.Sync.$tc'ThreadFinished1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'ThreadFinished2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.096841534 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadFinished_closure" {
     GHC.Conc.Sync.$tc'ThreadFinished_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'ThreadFinished1_closure+1;
         const GHC.Conc.Sync.$tc'ThreadDied1_closure+1;
         const 2441107603776884109;
         const 12730966154693836607;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.098554843 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'ThreadDied3_bytes" {
     GHC.Conc.Sync.$tc'ThreadDied3_bytes:
         I8[] [39,84,104,114,101,97,100,68,105,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.100168041 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadDied2_closure" {
     GHC.Conc.Sync.$tc'ThreadDied2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'ThreadDied3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.101946675 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadDied_closure" {
     GHC.Conc.Sync.$tc'ThreadDied_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'ThreadDied2_closure+1;
         const GHC.Conc.Sync.$tc'ThreadDied1_closure+1;
         const 9513974555658789847;
         const 4757719484357493227;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.103660397 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadBlocked1_closure" {
     GHC.Conc.Sync.$tc'ThreadBlocked1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const GHC.Conc.Sync.$tc'ThreadDied1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.105673732 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'ThreadBlocked3_bytes" {
     GHC.Conc.Sync.$tc'ThreadBlocked3_bytes:
         I8[] [39,84,104,114,101,97,100,66,108,111,99,107,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.107344364 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadBlocked2_closure" {
     GHC.Conc.Sync.$tc'ThreadBlocked2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'ThreadBlocked3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.109038405 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadBlocked_closure" {
     GHC.Conc.Sync.$tc'ThreadBlocked_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'ThreadBlocked2_closure+1;
         const GHC.Conc.Sync.$tc'ThreadBlocked1_closure+4;
         const 1896650886570328403;
         const 13390928353603149841;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.110779612 UTC

[section ""cstring" . GHC.Conc.Sync.$tcPrimMVar2_bytes" {
     GHC.Conc.Sync.$tcPrimMVar2_bytes:
         I8[] [80,114,105,109,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.112419799 UTC

[section ""data" . GHC.Conc.Sync.$tcPrimMVar1_closure" {
     GHC.Conc.Sync.$tcPrimMVar1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcPrimMVar2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.114190622 UTC

[section ""data" . GHC.Conc.Sync.$tcPrimMVar_closure" {
     GHC.Conc.Sync.$tcPrimMVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcPrimMVar1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9965391380168186507;
         const 18322737771689556223;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.11650444 UTC

[section ""cstring" . GHC.Conc.Sync.$tcSTM2_bytes" {
     GHC.Conc.Sync.$tcSTM2_bytes:
         I8[] [83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.118704406 UTC

[section ""data" . GHC.Conc.Sync.$tcSTM1_closure" {
     GHC.Conc.Sync.$tcSTM1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcSTM2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.120374918 UTC

[section ""data" . GHC.Conc.Sync.$tcSTM_closure" {
     GHC.Conc.Sync.$tcSTM_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcSTM1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 2004856025729794332;
         const 14974623362753764267;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.122106139 UTC

[section ""data" . $krep20_r9Fv7_closure" {
     $krep20_r9Fv7_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Conc.Sync.$tcSTM_closure+1;
         const $krep5_r9FuS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.123798961 UTC

[section ""data" . GHC.Conc.Sync.$tc'STM1_closure" {
     GHC.Conc.Sync.$tc'STM1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r9Fv5_closure+4;
         const $krep20_r9Fv7_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.125459022 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'STM3_bytes" {
     GHC.Conc.Sync.$tc'STM3_bytes:
         I8[] [39,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.127038393 UTC

[section ""data" . GHC.Conc.Sync.$tc'STM2_closure" {
     GHC.Conc.Sync.$tc'STM2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'STM3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.128681176 UTC

[section ""data" . GHC.Conc.Sync.$tc'STM_closure" {
     GHC.Conc.Sync.$tc'STM_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'STM2_closure+1;
         const GHC.Conc.Sync.$tc'STM1_closure+4;
         const 11288073744523536973;
         const 9767688212531311940;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.130732917 UTC

[section ""cstring" . GHC.Conc.Sync.$tcTVar2_bytes" {
     GHC.Conc.Sync.$tcTVar2_bytes:
         I8[] [84,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.132385384 UTC

[section ""data" . GHC.Conc.Sync.$tcTVar1_closure" {
     GHC.Conc.Sync.$tcTVar1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcTVar2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.134161918 UTC

[section ""data" . GHC.Conc.Sync.$tcTVar_closure" {
     GHC.Conc.Sync.$tcTVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcTVar1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 13084572405727191592;
         const 5232564955606145236;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.135934445 UTC

[section ""data" . $krep21_r9Fv8_closure" {
     $krep21_r9Fv8_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Conc.Sync.$tcTVar_closure+1;
         const $krep5_r9FuS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.137638096 UTC

[section ""data" . GHC.Conc.Sync.$tc'TVar1_closure" {
     GHC.Conc.Sync.$tc'TVar1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r9FuU_closure+1;
         const $krep21_r9Fv8_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.1392417 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'TVar3_bytes" {
     GHC.Conc.Sync.$tc'TVar3_bytes:
         I8[] [39,84,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.141776032 UTC

[section ""data" . GHC.Conc.Sync.$tc'TVar2_closure" {
     GHC.Conc.Sync.$tc'TVar2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'TVar3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.143393377 UTC

[section ""data" . GHC.Conc.Sync.$tc'TVar_closure" {
     GHC.Conc.Sync.$tc'TVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'TVar2_closure+1;
         const GHC.Conc.Sync.$tc'TVar1_closure+4;
         const 9463269625853265574;
         const 3517068532143837766;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.145096794 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowThreadId2_bytes" {
     GHC.Conc.Sync.$fShowThreadId2_bytes:
         I8[] [84,104,114,101,97,100,73,100,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.150122791 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_closure" {
     GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_closure:
         const GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_info;
 },
 x_s9FBb_entry() //  [R1]
         { []
         }
     {offset
       c9KPT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9KQ2; else goto c9KQ3;
       c9KQ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9KQ3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9KPQ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9KQ7; else goto c9KPR;
       u9KQ7: // global
           call _c9KPQ(R1) args: 0, res: 0, upd: 0;
       c9KPR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_s9FBb_info" {
     x_s9FBb_info:
         const x_s9FBb_entry;
         const 1;
         const 16;
 },
 _c9KPQ() //  [R1]
         { []
         }
     {offset
       c9KPQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9KQ6; else goto c9KQ5;
       c9KQ6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9KQ5: // global
           (_s9FBh::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] rts_getThreadId(P64[R1 + 7]);
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9FBh::I64));
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9KPQ_info" {
     block_c9KPQ_info:
         const _c9KPQ;
         const 0;
         const 30;
 },
 sat_s9FBr_entry() //  [R1]
         { []
         }
     {offset
       c9KQk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9KQv; else goto c9KQw;
       c9KQv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9KQw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c9KQh_info;
           _s9FB9::P64 = P64[R1 + 16];
           _s9FBj::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s9FB9::P64;
           P64[Sp - 24] = _s9FBj::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u9KQD; else goto c9KQi;
       u9KQD: // global
           call _c9KQh(R1) args: 0, res: 0, upd: 0;
       c9KQi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9FBr_info" {
     sat_s9FBr_info:
         const sat_s9FBr_entry;
         const 3;
         const 15;
 },
 _c9KQh() //  [R1]
         { []
         }
     {offset
       c9KQh: // global
           I64[Sp] = block_c9KQn_info;
           _s9FBl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9FBl::I64;
           if (R1 & 7 != 0) goto u9KQC; else goto c9KQo;
       u9KQC: // global
           call _c9KQn(R1) args: 0, res: 0, upd: 0;
       c9KQo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9KQh_info" {
     block_c9KQh_info:
         const _c9KQh;
         const 2;
         const 30;
 },
 _c9KQn() //  [R1]
         { []
         }
     {offset
       c9KQn: // global
           _s9FBj::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c9KQs_info;
           R4 = _s9FBj::P64;
           R3 = I64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9KQn_info" {
     block_c9KQn_info:
         const _c9KQn;
         const 66;
         const 30;
 },
 _c9KQs() //  [R1, R2]
         { []
         }
     {offset
       c9KQs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9KQB; else goto c9KQA;
       c9KQB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9KQA: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9KQs_info" {
     block_c9KQs_info:
         const _c9KQs;
         const 0;
         const 30;
 },
 sat_s9FBs_entry() //  [R1, R2]
         { []
         }
     {offset
       c9KQE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9KQI; else goto c9KQH;
       c9KQI: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9KQH: // global
           _s9FB9::P64 = P64[R1 + 7];
           _s9FBb::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9FBr_info;
           P64[Hp - 16] = _s9FB9::P64;
           P64[Hp - 8] = _s9FBb::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = GHC.Conc.Sync.$fShowThreadId2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FBs_info" {
     sat_s9FBs_info:
         const sat_s9FBs_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KQJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9KQN; else goto c9KQM;
       c9KQN: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KQM: // global
           I64[Hp - 40] = x_s9FBb_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s9FBs_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_info" {
     GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_info:
         const GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.166516776 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadId_$cshow_closure" {
     GHC.Conc.Sync.$fShowThreadId_$cshow_closure:
         const GHC.Conc.Sync.$fShowThreadId_$cshow_info;
 },
 sat_s9FBE_entry() //  [R1]
         { []
         }
     {offset
       c9KRy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9KRJ; else goto c9KRK;
       c9KRJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9KRK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9KRv_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9KRP; else goto c9KRw;
       u9KRP: // global
           call _c9KRv(R1) args: 0, res: 0, upd: 0;
       c9KRw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9FBE_info" {
     sat_s9FBE_info:
         const sat_s9FBE_entry;
         const 1;
         const 16;
 },
 _c9KRv() //  [R1]
         { []
         }
     {offset
       c9KRv: // global
           (_s9FBz::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] rts_getThreadId(P64[R1 + 7]);
           I64[Sp] = block_c9KRG_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9FBz::I64));
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9KRv_info" {
     block_c9KRv_info:
         const _c9KRv;
         const 0;
         const 30;
 },
 _c9KRG() //  [R1, R2]
         { []
         }
     {offset
       c9KRG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9KRO; else goto c9KRN;
       c9KRO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9KRN: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9KRG_info" {
     block_c9KRG_info:
         const _c9KRG;
         const 0;
         const 30;
 },
 GHC.Conc.Sync.$fShowThreadId_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9KRQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9KRU; else goto c9KRT;
       c9KRU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowThreadId_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9KRT: // global
           I64[Hp - 16] = sat_s9FBE_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Conc.Sync.$fShowThreadId2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadId_$cshow_info" {
     GHC.Conc.Sync.$fShowThreadId_$cshow_info:
         const GHC.Conc.Sync.$fShowThreadId_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.177751749 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadId1_closure" {
     GHC.Conc.Sync.$fShowThreadId1_closure:
         const GHC.Conc.Sync.$fShowThreadId1_info;
 },
 x_s9FBG_entry() //  [R1]
         { []
         }
     {offset
       c9KSm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9KSv; else goto c9KSw;
       c9KSv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9KSw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9KSj_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9KSA; else goto c9KSk;
       u9KSA: // global
           call _c9KSj(R1) args: 0, res: 0, upd: 0;
       c9KSk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_s9FBG_info" {
     x_s9FBG_info:
         const x_s9FBG_entry;
         const 1;
         const 16;
 },
 _c9KSj() //  [R1]
         { []
         }
     {offset
       c9KSj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9KSz; else goto c9KSy;
       c9KSz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9KSy: // global
           (_s9FBM::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] rts_getThreadId(P64[R1 + 7]);
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9FBM::I64));
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9KSj_info" {
     block_c9KSj_info:
         const _c9KSj;
         const 0;
         const 30;
 },
 sat_s9FBU_entry() //  [R1]
         { []
         }
     {offset
       c9KSN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9KST; else goto c9KSU;
       c9KST: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9KSU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9KSK_info;
           _s9FBO::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9FBO::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9KSZ; else goto c9KSL;
       u9KSZ: // global
           call _c9KSK(R1) args: 0, res: 0, upd: 0;
       c9KSL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9FBU_info" {
     sat_s9FBU_info:
         const sat_s9FBU_entry;
         const 2;
         const 18;
 },
 _c9KSK() //  [R1]
         { []
         }
     {offset
       c9KSK: // global
           _s9FBO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9KSQ_info;
           R4 = _s9FBO::P64;
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9KSK_info" {
     block_c9KSK_info:
         const _c9KSK;
         const 1;
         const 30;
 },
 _c9KSQ() //  [R1, R2]
         { []
         }
     {offset
       c9KSQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9KSY; else goto c9KSX;
       c9KSY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9KSX: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9KSQ_info" {
     block_c9KSQ_info:
         const _c9KSQ;
         const 0;
         const 30;
 },
 sat_s9FBV_entry() //  [R1, R2]
         { []
         }
     {offset
       c9KT0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9KT4; else goto c9KT3;
       c9KT4: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9KT3: // global
           _s9FBG::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9FBU_info;
           P64[Hp - 8] = _s9FBG::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = GHC.Conc.Sync.$fShowThreadId2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FBV_info" {
     sat_s9FBV_info:
         const sat_s9FBV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Conc.Sync.$fShowThreadId1_entry() //  [R2]
         { []
         }
     {offset
       c9KT5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9KT9; else goto c9KT8;
       c9KT9: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowThreadId1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9KT8: // global
           I64[Hp - 32] = x_s9FBG_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s9FBV_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadId1_info" {
     GHC.Conc.Sync.$fShowThreadId1_info:
         const GHC.Conc.Sync.$fShowThreadId1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.19191588 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadId_$cshowList_closure" {
     GHC.Conc.Sync.$fShowThreadId_$cshowList_closure:
         const GHC.Conc.Sync.$fShowThreadId_$cshowList_info;
 },
 GHC.Conc.Sync.$fShowThreadId_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KTJ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Conc.Sync.$fShowThreadId1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadId_$cshowList_info" {
     GHC.Conc.Sync.$fShowThreadId_$cshowList_info:
         const GHC.Conc.Sync.$fShowThreadId_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.195174519 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadId_closure" {
     GHC.Conc.Sync.$fShowThreadId_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_closure+2;
         const GHC.Conc.Sync.$fShowThreadId_$cshow_closure+1;
         const GHC.Conc.Sync.$fShowThreadId_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.197181301 UTC

[section ""data" . reportHeapOverflow1_r9Fv9_closure" {
     reportHeapOverflow1_r9Fv9_closure:
         const reportHeapOverflow1_r9Fv9_info;
 },
 reportHeapOverflow1_r9Fv9_entry() //  []
         { []
         }
     {offset
       c9KTW: // global
           call "ccall" arg hints:  []  result hints:  [] reportHeapOverflow();
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . reportHeapOverflow1_r9Fv9_info" {
     reportHeapOverflow1_r9Fv9_info:
         const reportHeapOverflow1_r9Fv9_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.20046145 UTC

[section ""data" . GHC.Conc.Sync.reportHeapOverflow_closure" {
     GHC.Conc.Sync.reportHeapOverflow_closure:
         const GHC.Conc.Sync.reportHeapOverflow_info;
 },
 GHC.Conc.Sync.reportHeapOverflow_entry() //  []
         { []
         }
     {offset
       c9KU8: // global
           call reportHeapOverflow1_r9Fv9_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.reportHeapOverflow_info" {
     GHC.Conc.Sync.reportHeapOverflow_info:
         const GHC.Conc.Sync.reportHeapOverflow_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.205555166 UTC

[section ""data" . GHC.Conc.Sync.cmpThread_closure" {
     GHC.Conc.Sync.cmpThread_closure:
         const GHC.Conc.Sync.cmpThread_info;
 },
 GHC.Conc.Sync.cmpThread_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KUm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9KUq; else goto c9KUr;
       c9KUq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.cmpThread_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KUr: // global
           I64[Sp - 16] = block_c9KUj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KUY; else goto c9KUk;
       u9KUY: // global
           call _c9KUj(R1) args: 0, res: 0, upd: 0;
       c9KUk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.cmpThread_info" {
     GHC.Conc.Sync.cmpThread_info:
         const GHC.Conc.Sync.cmpThread_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9KUj() //  [R1]
         { []
         }
     {offset
       c9KUj: // global
           I64[Sp] = block_c9KUp_info;
           _s9FC5::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FC5::P64;
           if (R1 & 7 != 0) goto u9KUX; else goto c9KUt;
       u9KUX: // global
           call _c9KUp(R1) args: 0, res: 0, upd: 0;
       c9KUt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KUj_info" {
     block_c9KUj_info:
         const _c9KUj;
         const 1;
         const 30;
 },
 _c9KUp() //  [R1]
         { []
         }
     {offset
       c9KUp: // global
           (_s9FCb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           _s9FCc::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9FCb::I64));
           if (_s9FCc::I64 != (-1)) goto u9KUW; else goto c9KUM;
       u9KUW: // global
           if (_s9FCc::I64 != 0) goto c9KUG; else goto c9KUS;
       c9KUG: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9KUS: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9KUM: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KUp_info" {
     block_c9KUp_info:
         const _c9KUp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.21353552 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadId_$c==_closure" {
     GHC.Conc.Sync.$fEqThreadId_$c==_closure:
         const GHC.Conc.Sync.$fEqThreadId_$c==_info;
 },
 GHC.Conc.Sync.$fEqThreadId_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KVm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9KVq; else goto c9KVr;
       c9KVq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqThreadId_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KVr: // global
           I64[Sp - 16] = block_c9KVj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KVR; else goto c9KVk;
       u9KVR: // global
           call _c9KVj(R1) args: 0, res: 0, upd: 0;
       c9KVk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqThreadId_$c==_info" {
     GHC.Conc.Sync.$fEqThreadId_$c==_info:
         const GHC.Conc.Sync.$fEqThreadId_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9KVj() //  [R1]
         { []
         }
     {offset
       c9KVj: // global
           I64[Sp] = block_c9KVp_info;
           _s9FCg::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FCg::P64;
           if (R1 & 7 != 0) goto u9KVQ; else goto c9KVt;
       u9KVQ: // global
           call _c9KVp(R1) args: 0, res: 0, upd: 0;
       c9KVt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KVj_info" {
     block_c9KVj_info:
         const _c9KVj;
         const 1;
         const 30;
 },
 _c9KVp() //  [R1]
         { []
         }
     {offset
       c9KVp: // global
           (_s9FCm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           if (%MO_SS_Conv_W64_W32(_s9FCm::I64) == 0 :: W32) goto c9KVM; else goto c9KVG;
       c9KVM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9KVG: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KVp_info" {
     block_c9KVp_info:
         const _c9KVp;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.22244722 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadId_$c/=_closure" {
     GHC.Conc.Sync.$fEqThreadId_$c/=_closure:
         const GHC.Conc.Sync.$fEqThreadId_$c/=_info;
 },
 GHC.Conc.Sync.$fEqThreadId_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KWe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9KWi; else goto c9KWj;
       c9KWi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqThreadId_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KWj: // global
           I64[Sp - 16] = block_c9KWb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KWJ; else goto c9KWc;
       u9KWJ: // global
           call _c9KWb(R1) args: 0, res: 0, upd: 0;
       c9KWc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqThreadId_$c/=_info" {
     GHC.Conc.Sync.$fEqThreadId_$c/=_info:
         const GHC.Conc.Sync.$fEqThreadId_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9KWb() //  [R1]
         { []
         }
     {offset
       c9KWb: // global
           I64[Sp] = block_c9KWh_info;
           _s9FCr::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FCr::P64;
           if (R1 & 7 != 0) goto u9KWI; else goto c9KWl;
       u9KWI: // global
           call _c9KWh(R1) args: 0, res: 0, upd: 0;
       c9KWl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KWb_info" {
     block_c9KWb_info:
         const _c9KWb;
         const 1;
         const 30;
 },
 _c9KWh() //  [R1]
         { []
         }
     {offset
       c9KWh: // global
           (_s9FCx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           if (%MO_SS_Conv_W64_W32(_s9FCx::I64) == 0 :: W32) goto c9KWE; else goto c9KWy;
       c9KWE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9KWy: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KWh_info" {
     block_c9KWh_info:
         const _c9KWh;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.228841858 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadId_closure" {
     GHC.Conc.Sync.$fEqThreadId_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Conc.Sync.$fEqThreadId_$c==_closure+2;
         const GHC.Conc.Sync.$fEqThreadId_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.231764606 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$c<_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$c<_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$c<_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KX7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9KXb; else goto c9KXc;
       c9KXb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KXc: // global
           I64[Sp - 16] = block_c9KX4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KXC; else goto c9KX5;
       u9KXC: // global
           call _c9KX4(R1) args: 0, res: 0, upd: 0;
       c9KX5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$c<_info" {
     GHC.Conc.Sync.$fOrdThreadId_$c<_info:
         const GHC.Conc.Sync.$fOrdThreadId_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9KX4() //  [R1]
         { []
         }
     {offset
       c9KX4: // global
           I64[Sp] = block_c9KXa_info;
           _s9FCC::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FCC::P64;
           if (R1 & 7 != 0) goto u9KXB; else goto c9KXe;
       u9KXB: // global
           call _c9KXa(R1) args: 0, res: 0, upd: 0;
       c9KXe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KX4_info" {
     block_c9KX4_info:
         const _c9KX4;
         const 1;
         const 30;
 },
 _c9KXa() //  [R1]
         { []
         }
     {offset
       c9KXa: // global
           (_s9FCI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           if (%MO_SS_Conv_W64_W32(_s9FCI::I64) == (-1) :: W32) goto c9KXx; else goto c9KXr;
       c9KXx: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9KXr: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KXa_info" {
     block_c9KXa_info:
         const _c9KXa;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.240079587 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$c>=_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$c>=_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$c>=_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KXZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9KY3; else goto c9KY4;
       c9KY3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KY4: // global
           I64[Sp - 16] = block_c9KXW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KYu; else goto c9KXX;
       u9KYu: // global
           call _c9KXW(R1) args: 0, res: 0, upd: 0;
       c9KXX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$c>=_info" {
     GHC.Conc.Sync.$fOrdThreadId_$c>=_info:
         const GHC.Conc.Sync.$fOrdThreadId_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9KXW() //  [R1]
         { []
         }
     {offset
       c9KXW: // global
           I64[Sp] = block_c9KY2_info;
           _s9FCN::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FCN::P64;
           if (R1 & 7 != 0) goto u9KYt; else goto c9KY6;
       u9KYt: // global
           call _c9KY2(R1) args: 0, res: 0, upd: 0;
       c9KY6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KXW_info" {
     block_c9KXW_info:
         const _c9KXW;
         const 1;
         const 30;
 },
 _c9KY2() //  [R1]
         { []
         }
     {offset
       c9KY2: // global
           (_s9FCT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           if (%MO_SS_Conv_W64_W32(_s9FCT::I64) == (-1) :: W32) goto c9KYp; else goto c9KYj;
       c9KYp: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9KYj: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KY2_info" {
     block_c9KY2_info:
         const _c9KY2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.247975782 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$c>_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$c>_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$c>_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KYR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9KYV; else goto c9KYW;
       c9KYV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KYW: // global
           I64[Sp - 16] = block_c9KYO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9KZt; else goto c9KYP;
       u9KZt: // global
           call _c9KYO(R1) args: 0, res: 0, upd: 0;
       c9KYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$c>_info" {
     GHC.Conc.Sync.$fOrdThreadId_$c>_info:
         const GHC.Conc.Sync.$fOrdThreadId_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9KYO() //  [R1]
         { []
         }
     {offset
       c9KYO: // global
           I64[Sp] = block_c9KYU_info;
           _s9FCY::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FCY::P64;
           if (R1 & 7 != 0) goto u9KZs; else goto c9KYY;
       u9KZs: // global
           call _c9KYU(R1) args: 0, res: 0, upd: 0;
       c9KYY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KYO_info" {
     block_c9KYO_info:
         const _c9KYO;
         const 1;
         const 30;
 },
 _c9KYU() //  [R1]
         { []
         }
     {offset
       c9KYU: // global
           (_s9FD4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           _s9FD5::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9FD4::I64));
           if (_s9FD5::I64 == (-1)) goto c9KZn; else goto u9KZr;
       u9KZr: // global
           if (_s9FD5::I64 == 0) goto c9KZn; else goto c9KZb;
       c9KZn: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9KZb: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KYU_info" {
     block_c9KYU_info:
         const _c9KYU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.256869572 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$c<=_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$c<=_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$c<=_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9KZQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9KZU; else goto c9KZV;
       c9KZU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9KZV: // global
           I64[Sp - 16] = block_c9KZN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9L0s; else goto c9KZO;
       u9L0s: // global
           call _c9KZN(R1) args: 0, res: 0, upd: 0;
       c9KZO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$c<=_info" {
     GHC.Conc.Sync.$fOrdThreadId_$c<=_info:
         const GHC.Conc.Sync.$fOrdThreadId_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9KZN() //  [R1]
         { []
         }
     {offset
       c9KZN: // global
           I64[Sp] = block_c9KZT_info;
           _s9FD9::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FD9::P64;
           if (R1 & 7 != 0) goto u9L0r; else goto c9KZX;
       u9L0r: // global
           call _c9KZT(R1) args: 0, res: 0, upd: 0;
       c9KZX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KZN_info" {
     block_c9KZN_info:
         const _c9KZN;
         const 1;
         const 30;
 },
 _c9KZT() //  [R1]
         { []
         }
     {offset
       c9KZT: // global
           (_s9FDf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           _s9FDg::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9FDf::I64));
           if (_s9FDg::I64 == (-1)) goto c9L0m; else goto u9L0q;
       u9L0q: // global
           if (_s9FDg::I64 == 0) goto c9L0m; else goto c9L0a;
       c9L0m: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9L0a: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9KZT_info" {
     block_c9KZT_info:
         const _c9KZT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.264662273 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$cmax_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$cmax_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$cmax_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c9L0P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9L0T; else goto c9L0U;
       c9L0T: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9L0U: // global
           I64[Sp - 16] = block_c9L0M_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9L1r; else goto c9L0N;
       u9L1r: // global
           call _c9L0M(R1) args: 0, res: 0, upd: 0;
       c9L0N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$cmax_info" {
     GHC.Conc.Sync.$fOrdThreadId_$cmax_info:
         const GHC.Conc.Sync.$fOrdThreadId_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9L0M() //  [R1]
         { []
         }
     {offset
       c9L0M: // global
           I64[Sp - 8] = block_c9L0S_info;
           _s9FDj::P64 = R1;
           _s9FDk::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s9FDk::P64;
           P64[Sp + 8] = _s9FDj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9L1q; else goto c9L0W;
       u9L1q: // global
           call _c9L0S(R1) args: 0, res: 0, upd: 0;
       c9L0W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L0M_info" {
     block_c9L0M_info:
         const _c9L0M;
         const 1;
         const 30;
 },
 _c9L0S() //  [R1]
         { []
         }
     {offset
       c9L0S: // global
           _s9FDj::P64 = P64[Sp + 16];
           (_s9FDq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           _s9FDr::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9FDq::I64));
           if (_s9FDr::I64 == (-1)) goto c9L1l; else goto u9L1p;
       u9L1p: // global
           if (_s9FDr::I64 == 0) goto c9L1l; else goto c9L19;
       c9L1l: // global
           R1 = _s9FDj::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9L19: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L0S_info" {
     block_c9L0S_info:
         const _c9L0S;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.272999007 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$cmin_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$cmin_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$cmin_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c9L1Q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9L1U; else goto c9L1V;
       c9L1U: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9L1V: // global
           I64[Sp - 16] = block_c9L1N_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9L2s; else goto c9L1O;
       u9L2s: // global
           call _c9L1N(R1) args: 0, res: 0, upd: 0;
       c9L1O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$cmin_info" {
     GHC.Conc.Sync.$fOrdThreadId_$cmin_info:
         const GHC.Conc.Sync.$fOrdThreadId_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9L1N() //  [R1]
         { []
         }
     {offset
       c9L1N: // global
           I64[Sp - 8] = block_c9L1T_info;
           _s9FDu::P64 = R1;
           _s9FDv::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s9FDv::P64;
           P64[Sp + 8] = _s9FDu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9L2r; else goto c9L1X;
       u9L2r: // global
           call _c9L1T(R1) args: 0, res: 0, upd: 0;
       c9L1X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L1N_info" {
     block_c9L1N_info:
         const _c9L1N;
         const 1;
         const 30;
 },
 _c9L1T() //  [R1]
         { []
         }
     {offset
       c9L1T: // global
           _s9FDu::P64 = P64[Sp + 16];
           (_s9FDB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           _s9FDw::P64 = R1;
           _s9FDC::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9FDB::I64));
           if (_s9FDC::I64 == (-1)) goto c9L2m; else goto u9L2q;
       u9L2q: // global
           if (_s9FDC::I64 == 0) goto c9L2m; else goto c9L2a;
       c9L2m: // global
           R1 = _s9FDw::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9L2a: // global
           R1 = _s9FDu::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L1T_info" {
     block_c9L1T_info:
         const _c9L1T;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.280011027 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_closure" {
     GHC.Conc.Sync.$fOrdThreadId_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Conc.Sync.$fEqThreadId_closure+1;
         const GHC.Conc.Sync.cmpThread_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$c<_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$c<=_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$c>_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$c>=_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$cmax_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.281779266 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowThreadStatus10_bytes" {
     GHC.Conc.Sync.$fShowThreadStatus10_bytes:
         I8[] [84,104,114,101,97,100,82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.284127278 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus9_closure" {
     GHC.Conc.Sync.$fShowThreadStatus9_closure:
         const GHC.Conc.Sync.$fShowThreadStatus9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus9_entry() //  [R1]
         { []
         }
     {offset
       c9L2S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9L2T; else goto c9L2U;
       c9L2T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9L2U: // global
           (_c9L2P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9L2P::I64 == 0) goto c9L2R; else goto c9L2Q;
       c9L2R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9L2Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9L2P::I64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus9_info" {
     GHC.Conc.Sync.$fShowThreadStatus9_info:
         const GHC.Conc.Sync.$fShowThreadStatus9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.287541518 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowThreadStatus8_bytes" {
     GHC.Conc.Sync.$fShowThreadStatus8_bytes:
         I8[] [84,104,114,101,97,100,70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.290580088 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus7_closure" {
     GHC.Conc.Sync.$fShowThreadStatus7_closure:
         const GHC.Conc.Sync.$fShowThreadStatus7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus7_entry() //  [R1]
         { []
         }
     {offset
       c9L39: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9L3a; else goto c9L3b;
       c9L3a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9L3b: // global
           (_c9L36::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9L36::I64 == 0) goto c9L38; else goto c9L37;
       c9L38: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9L37: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9L36::I64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus7_info" {
     GHC.Conc.Sync.$fShowThreadStatus7_info:
         const GHC.Conc.Sync.$fShowThreadStatus7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.29411556 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowThreadStatus6_bytes" {
     GHC.Conc.Sync.$fShowThreadStatus6_bytes:
         I8[] [84,104,114,101,97,100,66,108,111,99,107,101,100,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.29619298 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus5_closure" {
     GHC.Conc.Sync.$fShowThreadStatus5_closure:
         const GHC.Conc.Sync.$fShowThreadStatus5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus5_entry() //  [R1]
         { []
         }
     {offset
       c9L3q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9L3r; else goto c9L3s;
       c9L3r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9L3s: // global
           (_c9L3n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9L3n::I64 == 0) goto c9L3p; else goto c9L3o;
       c9L3p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9L3o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9L3n::I64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus5_info" {
     GHC.Conc.Sync.$fShowThreadStatus5_info:
         const GHC.Conc.Sync.$fShowThreadStatus5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.299675622 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowThreadStatus4_bytes" {
     GHC.Conc.Sync.$fShowThreadStatus4_bytes:
         I8[] [84,104,114,101,97,100,68,105,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.30214125 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus3_closure" {
     GHC.Conc.Sync.$fShowThreadStatus3_closure:
         const GHC.Conc.Sync.$fShowThreadStatus3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus3_entry() //  [R1]
         { []
         }
     {offset
       c9L3H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9L3I; else goto c9L3J;
       c9L3I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9L3J: // global
           (_c9L3E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9L3E::I64 == 0) goto c9L3G; else goto c9L3F;
       c9L3G: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9L3F: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9L3E::I64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus3_info" {
     GHC.Conc.Sync.$fShowThreadStatus3_info:
         const GHC.Conc.Sync.$fShowThreadStatus3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.308731059 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_closure" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_closure:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_info;
         const 0;
 },
 sat_s9FDL_entry() //  [R1]
         { []
         }
     {offset
       c9L4e: // global
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           call GHC.Conc.Sync.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FDL_info" {
     sat_s9FDL_info:
         const sat_s9FDL_entry;
         const 2;
         const 4294967314;
         const S9FOI_srt;
 },
 sat_s9FDN_entry() //  [R1]
         { []
         }
     {offset
       c9L4r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9L4v; else goto c9L4u;
       c9L4v: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9L4u: // global
           _s9FDF::P64 = P64[R1 + 16];
           _s9FDH::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9FDF::P64;
           R3 = Hp - 14;
           R2 = _s9FDH::P64;
           call GHC.Conc.Sync.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FDN_info" {
     sat_s9FDN_info:
         const sat_s9FDN_entry;
         const 2;
         const 4294967314;
         const S9FOI_srt;
 },
 sat_s9FDO_entry() //  [R1]
         { []
         }
     {offset
       c9L4w: // global
           _s9FDO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9L4x; else goto c9L4y;
       c9L4y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9L4A; else goto c9L4z;
       c9L4A: // global
           HpAlloc = 32;
           goto c9L4x;
       c9L4x: // global
           R1 = _s9FDO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9L4z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9FDO::P64;
           _s9FDF::P64 = P64[_s9FDO::P64 + 16];
           _s9FDH::P64 = P64[_s9FDO::P64 + 24];
           I64[Hp - 24] = sat_s9FDN_info;
           P64[Hp - 8] = _s9FDF::P64;
           P64[Hp] = _s9FDH::P64;
           R3 = Hp - 24;
           R2 = GHC.Conc.Sync.$fShowThreadStatus5_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9FDO_info" {
     sat_s9FDO_info:
         const sat_s9FDO_entry;
         const 2;
         const 4402341478418;
         const S9FOI_srt;
 },
 GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c9L4H: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9L4I; else goto c9L4J;
       c9L4I: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9L4J: // global
           I64[Sp - 24] = block_c9L3V_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9L52; else goto c9L3W;
       u9L52: // global
           call _c9L3V(R1) args: 0, res: 0, upd: 0;
       c9L3W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_info" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_info:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_entry;
         const 0;
         const 136343736811534;
         const 12884901911;
         const S9FOI_srt;
 },
 _c9L3V() //  [R1]
         { []
         }
     {offset
       c9L3V: // global
           _s9FDF::P64 = P64[Sp + 16];
           _c9L4G::P64 = R1 & 7;
           if (_c9L4G::P64 < 3) goto u9L4Z; else goto u9L50;
       u9L4Z: // global
           if (_c9L4G::P64 < 2) goto c9L4C; else goto c9L4D;
       c9L4C: // global
           R3 = _s9FDF::P64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus9_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9L4D: // global
           R3 = _s9FDF::P64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus7_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       u9L50: // global
           if (_c9L4G::P64 < 4) goto c9L4E; else goto c9L4F;
       c9L4E: // global
           I64[Sp] = block_c9L42_info;
           _s9FDH::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FDH::P64;
           if (R1 & 7 != 0) goto u9L51; else goto c9L43;
       u9L51: // global
           call _c9L42(R1) args: 0, res: 0, upd: 0;
       c9L43: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9L4F: // global
           R3 = _s9FDF::P64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus3_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L3V_info" {
     block_c9L3V_info:
         const _c9L3V;
         const 2;
         const 127547643789342;
         const S9FOI_srt;
 },
 _c9L42() //  [R1]
         { []
         }
     {offset
       c9L42: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9L4R; else goto c9L4Q;
       c9L4R: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9L4Q: // global
           _s9FDF::P64 = P64[Sp + 16];
           _s9FDH::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c9L4T; else goto c9L4V;
       c9L4T: // global
           I64[Hp - 48] = sat_s9FDL_info;
           P64[Hp - 32] = _s9FDF::P64;
           P64[Hp - 24] = _s9FDH::P64;
           _c9L4a::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9L4a::P64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus5_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9L4V: // global
           I64[Hp - 48] = sat_s9FDO_info;
           P64[Hp - 32] = _s9FDF::P64;
           P64[Hp - 24] = _s9FDH::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L42_info" {
     block_c9L42_info:
         const _c9L42;
         const 2;
         const 4402341478430;
         const S9FOI_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.322705223 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus_$cshow_closure" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshow_closure:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshow_info;
         const 0;
 },
 sat_s9FDS_entry() //  [R1]
         { []
         }
     {offset
       c9L5I: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.Conc.Sync.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FDS_info" {
     sat_s9FDS_info:
         const sat_s9FDS_entry;
         const 1;
         const 4294967312;
         const S9FOI_srt;
 },
 GHC.Conc.Sync.$fShowThreadStatus_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9L5R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9L5S; else goto c9L5T;
       c9L5S: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowThreadStatus_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9L5T: // global
           I64[Sp - 8] = block_c9L5x_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9L66; else goto c9L5y;
       u9L66: // global
           call _c9L5x(R1) args: 0, res: 0, upd: 0;
       c9L5y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus_$cshow_info" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshow_info:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshow_entry;
         const 0;
         const 268285132144654;
         const 4294967301;
         const S9FOI_srt;
 },
 _c9L5x() //  [R1]
         { []
         }
     {offset
       c9L5x: // global
           _c9L5Q::P64 = R1 & 7;
           if (_c9L5Q::P64 < 3) goto u9L64; else goto u9L65;
       u9L64: // global
           if (_c9L5Q::P64 < 2) goto c9L5M; else goto c9L5N;
       c9L5M: // global
           R1 = GHC.Conc.Sync.$fShowThreadStatus9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9L5N: // global
           R1 = GHC.Conc.Sync.$fShowThreadStatus7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9L65: // global
           if (_c9L5Q::P64 < 4) goto c9L5O; else goto c9L5P;
       c9L5O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9L60; else goto c9L5Z;
       c9L60: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9L5Z: // global
           _s9FDR::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_s9FDS_info;
           P64[Hp] = _s9FDR::P64;
           R3 = Hp - 16;
           R2 = GHC.Conc.Sync.$fShowThreadStatus5_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9L5P: // global
           R1 = GHC.Conc.Sync.$fShowThreadStatus3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L5x_info" {
     block_c9L5x_info:
         const _c9L5x;
         const 0;
         const 127547643789342;
         const S9FOI_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.330193004 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus2_closure" {
     GHC.Conc.Sync.$fShowThreadStatus2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.332160848 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus1_closure" {
     GHC.Conc.Sync.$fShowThreadStatus1_closure:
         const GHC.Conc.Sync.$fShowThreadStatus1_info;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9L6s: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Conc.Sync.$fShowThreadStatus2_closure+1;
           call GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus1_info" {
     GHC.Conc.Sync.$fShowThreadStatus1_info:
         const GHC.Conc.Sync.$fShowThreadStatus1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9FOI_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.335435184 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus_$cshowList_closure" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshowList_closure:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowList_info;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9L6D: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Conc.Sync.$fShowThreadStatus1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus_$cshowList_info" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshowList_info:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9FOI_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.33884461 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus_closure" {
     GHC.Conc.Sync.$fShowThreadStatus_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_closure+3;
         const GHC.Conc.Sync.$fShowThreadStatus_$cshow_closure+1;
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.341094709 UTC

[section ""data" . GHC.Conc.Sync.killThread2_closure" {
     GHC.Conc.Sync.killThread2_closure:
         const GHC.Conc.Sync.killThread2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.killThread2_entry() //  [R1]
         { []
         }
     {offset
       c9L6R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9L6S; else goto c9L6T;
       c9L6S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9L6T: // global
           (_c9L6O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9L6O::I64 == 0) goto c9L6Q; else goto c9L6P;
       c9L6Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9L6P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9L6O::I64;
           R2 = GHC.IO.Exception.ThreadKilled_closure+3;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.killThread2_info" {
     GHC.Conc.Sync.killThread2_info:
         const GHC.Conc.Sync.killThread2_entry;
         const 0;
         const 4294967317;
         const S9FOI_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.345481281 UTC

[section ""data" . GHC.Conc.Sync.killThread1_closure" {
     GHC.Conc.Sync.killThread1_closure:
         const GHC.Conc.Sync.killThread1_info;
         const 0;
 },
 GHC.Conc.Sync.killThread1_entry() //  [R2]
         { []
         }
     {offset
       c9L78: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9L7c; else goto c9L7d;
       c9L7c: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.killThread1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9L7d: // global
           I64[Sp - 8] = block_c9L75_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9L7h; else goto c9L76;
       u9L7h: // global
           call _c9L75(R1) args: 0, res: 0, upd: 0;
       c9L76: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.killThread1_info" {
     GHC.Conc.Sync.killThread1_info:
         const GHC.Conc.Sync.killThread1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S9FOI_srt+144;
 },
 _c9L75() //  [R1]
         { []
         }
     {offset
       c9L75: // global
           I64[Sp] = block_c9L7b_info;
           R2 = GHC.Conc.Sync.killThread2_closure;
           R1 = P64[R1 + 7];
           call stg_killThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L75_info" {
     block_c9L75_info:
         const _c9L75;
         const 0;
         const 4294967326;
         const S9FOI_srt+152;
 },
 _c9L7b() //  []
         { []
         }
     {offset
       c9L7b: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L7b_info" {
     block_c9L7b_info:
         const _c9L7b;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.352051946 UTC

[section ""data" . GHC.Conc.Sync.killThread_closure" {
     GHC.Conc.Sync.killThread_closure:
         const GHC.Conc.Sync.killThread_info;
         const 0;
 },
 GHC.Conc.Sync.killThread_entry() //  [R2]
         { []
         }
     {offset
       c9L7z: // global
           R2 = R2;
           call GHC.Conc.Sync.killThread1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.killThread_info" {
     GHC.Conc.Sync.killThread_info:
         const GHC.Conc.Sync.killThread_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9FOI_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.35558071 UTC

[section ""data" . GHC.Conc.Sync.getNumProcessors1_closure" {
     GHC.Conc.Sync.getNumProcessors1_closure:
         const GHC.Conc.Sync.getNumProcessors1_info;
 },
 GHC.Conc.Sync.getNumProcessors1_entry() //  []
         { []
         }
     {offset
       c9L7N: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9L7W; else goto c9L7V;
       c9L7W: // global
           HpAlloc = 16;
           R1 = GHC.Conc.Sync.getNumProcessors1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9L7V: // global
           (_s9FE4::I64) = call "ccall" arg hints:  []  result hints:  [] getNumberOfProcessors();
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(_s9FE4::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getNumProcessors1_info" {
     GHC.Conc.Sync.getNumProcessors1_info:
         const GHC.Conc.Sync.getNumProcessors1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.359691996 UTC

[section ""data" . GHC.Conc.Sync.getNumProcessors_closure" {
     GHC.Conc.Sync.getNumProcessors_closure:
         const GHC.Conc.Sync.getNumProcessors_info;
 },
 GHC.Conc.Sync.getNumProcessors_entry() //  []
         { []
         }
     {offset
       c9L87: // global
           call GHC.Conc.Sync.getNumProcessors1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getNumProcessors_info" {
     GHC.Conc.Sync.getNumProcessors_info:
         const GHC.Conc.Sync.getNumProcessors_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.362976596 UTC

[section ""data" . GHC.Conc.Sync.threadStatus7_closure" {
     GHC.Conc.Sync.threadStatus7_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnOther_closure+6;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.364664526 UTC

[section ""data" . GHC.Conc.Sync.threadStatus6_closure" {
     GHC.Conc.Sync.threadStatus6_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnMVar_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.366395615 UTC

[section ""data" . GHC.Conc.Sync.threadStatus2_closure" {
     GHC.Conc.Sync.threadStatus2_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnException_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.368129065 UTC

[section ""data" . GHC.Conc.Sync.threadStatus3_closure" {
     GHC.Conc.Sync.threadStatus3_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnForeignCall_closure+5;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.369802302 UTC

[section ""data" . GHC.Conc.Sync.threadStatus4_closure" {
     GHC.Conc.Sync.threadStatus4_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnSTM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.371470404 UTC

[section ""data" . GHC.Conc.Sync.threadStatus5_closure" {
     GHC.Conc.Sync.threadStatus5_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnBlackHole_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.3752711 UTC

[section ""data" . GHC.Conc.Sync.$wthreadStatus_closure" {
     GHC.Conc.Sync.$wthreadStatus_closure:
         const GHC.Conc.Sync.$wthreadStatus_info;
 },
 sat_s9FEg_entry() //  [R1]
         { []
         }
     {offset
       c9L8J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9L8K; else goto c9L8L;
       c9L8K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9L8L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s9FEf::I64 = I64[R1 + 16];
           if (%MO_S_Ge_W64(_s9FEf::I64, 18)) goto c9L8y; else goto u9L8M;
       u9L8M: // global
           if (%MO_S_Lt_W64(_s9FEf::I64, 0)) goto c9L8y; else goto u9L8N;
       u9L8N: // global
           switch [0 .. 17] _s9FEf::I64 {
               case 0 : goto c9L8z;
               case 1 : goto c9L8G;
               case 2 : goto c9L8B;
               case 6 : goto c9L8C;
               case 10, 11 : goto c9L8E;
               case 12 : goto c9L8F;
               case 14 : goto c9L8G;
               case 16 : goto c9L8H;
               case 17 : goto c9L8I;
               default: {goto c9L8y;}
           }
       c9L8I: // global
           R1 = GHC.Conc.Sync.ThreadDied_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9L8H: // global
           R1 = GHC.Conc.Sync.ThreadFinished_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9L8F: // global
           R1 = GHC.Conc.Sync.threadStatus2_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9L8E: // global
           R1 = GHC.Conc.Sync.threadStatus3_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9L8C: // global
           R1 = GHC.Conc.Sync.threadStatus4_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9L8B: // global
           R1 = GHC.Conc.Sync.threadStatus5_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9L8G: // global
           R1 = GHC.Conc.Sync.threadStatus6_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9L8z: // global
           R1 = GHC.Conc.Sync.ThreadRunning_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9L8y: // global
           R1 = GHC.Conc.Sync.threadStatus7_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9FEg_info" {
     sat_s9FEg_info:
         const sat_s9FEg_entry;
         const 4294967296;
         const 17;
 },
 GHC.Conc.Sync.$wthreadStatus_entry() //  [R2]
         { []
         }
     {offset
       c9L8O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9L8P; else goto c9L8Q;
       c9L8P: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.$wthreadStatus_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9L8Q: // global
           I64[Sp - 8] = block_c9L8o_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_threadStatus#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$wthreadStatus_info" {
     GHC.Conc.Sync.$wthreadStatus_info:
         const GHC.Conc.Sync.$wthreadStatus_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9L8o() //  [R1]
         { []
         }
     {offset
       c9L8o: // global
           I64[Sp] = R1;
           Sp = Sp - 8;
           call _c9L8p() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9L8o_info" {
     block_c9L8o_info:
         const _c9L8o;
         const 0;
         const 30;
 },
 _c9L8p() //  []
         { []
         }
     {offset
       c9L8p: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9L8T; else goto c9L8S;
       c9L8T: // global
           HpAlloc = 24;
           I64[Sp] = block_c9L8p_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9L8S: // global
           I64[Hp - 16] = sat_s9FEg_info;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L8p_info" {
     block_c9L8p_info:
         const _c9L8p;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.384836875 UTC

[section ""data" . GHC.Conc.Sync.threadStatus1_closure" {
     GHC.Conc.Sync.threadStatus1_closure:
         const GHC.Conc.Sync.threadStatus1_info;
 },
 GHC.Conc.Sync.threadStatus1_entry() //  [R2]
         { []
         }
     {offset
       c9L9u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9L9v; else goto c9L9w;
       c9L9v: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.threadStatus1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9L9w: // global
           I64[Sp - 8] = block_c9L9r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9L9A; else goto c9L9s;
       u9L9A: // global
           call _c9L9r(R1) args: 0, res: 0, upd: 0;
       c9L9s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.threadStatus1_info" {
     GHC.Conc.Sync.threadStatus1_info:
         const GHC.Conc.Sync.threadStatus1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9L9r() //  [R1]
         { []
         }
     {offset
       c9L9r: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Conc.Sync.$wthreadStatus_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L9r_info" {
     block_c9L9r_info:
         const _c9L9r;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.390564757 UTC

[section ""data" . GHC.Conc.Sync.threadStatus_closure" {
     GHC.Conc.Sync.threadStatus_closure:
         const GHC.Conc.Sync.threadStatus_info;
 },
 GHC.Conc.Sync.threadStatus_entry() //  [R2]
         { []
         }
     {offset
       c9L9O: // global
           R2 = R2;
           call GHC.Conc.Sync.threadStatus1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.threadStatus_info" {
     GHC.Conc.Sync.threadStatus_info:
         const GHC.Conc.Sync.threadStatus_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.394437452 UTC

[section ""data" . GHC.Conc.Sync.$fFunctorSTM2_closure" {
     GHC.Conc.Sync.$fFunctorSTM2_closure:
         const GHC.Conc.Sync.$fFunctorSTM2_info;
 },
 GHC.Conc.Sync.$fFunctorSTM2_entry() //  [R2, R3]
         { []
         }
     {offset
       c9La2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9La3; else goto c9La4;
       c9La3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fFunctorSTM2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9La4: // global
           I64[Sp - 16] = block_c9L9Z_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fFunctorSTM2_info" {
     GHC.Conc.Sync.$fFunctorSTM2_info:
         const GHC.Conc.Sync.$fFunctorSTM2_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9L9Z() //  [R1]
         { []
         }
     {offset
       c9L9Z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9La7; else goto c9La6;
       c9La7: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9La6: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9L9Z_info" {
     block_c9L9Z_info:
         const _c9L9Z;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.399722955 UTC

[section ""data" . GHC.Conc.Sync.$fFunctorSTM1_closure" {
     GHC.Conc.Sync.$fFunctorSTM1_closure:
         const GHC.Conc.Sync.$fFunctorSTM1_info;
 },
 GHC.Conc.Sync.$fFunctorSTM1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Lao: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Lap; else goto c9Laq;
       c9Lap: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fFunctorSTM1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Laq: // global
           I64[Sp - 16] = block_c9Lam_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fFunctorSTM1_info" {
     GHC.Conc.Sync.$fFunctorSTM1_info:
         const GHC.Conc.Sync.$fFunctorSTM1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Lam() //  []
         { []
         }
     {offset
       c9Lam: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lam_info" {
     block_c9Lam_info:
         const _c9Lam;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.405448963 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM2_closure" {
     GHC.Conc.Sync.$fApplicativeSTM2_closure:
         const GHC.Conc.Sync.$fApplicativeSTM2_info;
 },
 GHC.Conc.Sync.$fApplicativeSTM2_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LaK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LaL; else goto c9LaM;
       c9LaL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fApplicativeSTM2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9LaM: // global
           I64[Sp - 16] = block_c9LaF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fApplicativeSTM2_info" {
     GHC.Conc.Sync.$fApplicativeSTM2_info:
         const GHC.Conc.Sync.$fApplicativeSTM2_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9LaF() //  [R1]
         { []
         }
     {offset
       c9LaF: // global
           I64[Sp] = block_c9LaH_info;
           _s9FED::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FED::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LaF_info" {
     block_c9LaF_info:
         const _c9LaF;
         const 1;
         const 30;
 },
 _c9LaH() //  [R1]
         { []
         }
     {offset
       c9LaH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9LaQ; else goto c9LaP;
       c9LaQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LaP: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LaH_info" {
     block_c9LaH_info:
         const _c9LaH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.412507271 UTC

[section ""data" . $cliftA2_r9Fva_closure" {
     $cliftA2_r9Fva_closure:
         const $cliftA2_r9Fva_info;
 },
 $cliftA2_r9Fva_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9Lbd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lbe; else goto c9Lbf;
       c9Lbe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $cliftA2_r9Fva_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Lbf: // global
           I64[Sp - 24] = block_c9Lb8_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $cliftA2_r9Fva_info" {
     $cliftA2_r9Fva_info:
         const $cliftA2_r9Fva_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9Lb8() //  [R1]
         { []
         }
     {offset
       c9Lb8: // global
           I64[Sp] = block_c9Lba_info;
           _s9FEO::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s9FEO::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lb8_info" {
     block_c9Lb8_info:
         const _c9Lb8;
         const 2;
         const 30;
 },
 _c9Lba() //  [R1]
         { []
         }
     {offset
       c9Lba: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Lbj; else goto c9Lbi;
       c9Lbj: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Lbi: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lba_info" {
     block_c9Lba_info:
         const _c9Lba;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.419243331 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_closure" {
     GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_closure:
         const GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_info;
 },
 GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9LbC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $cliftA2_r9Fva_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_info" {
     GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_info:
         const GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.422969311 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM1_closure" {
     GHC.Conc.Sync.$fApplicativeSTM1_closure:
         const GHC.Conc.Sync.$fApplicativeSTM1_info;
 },
 GHC.Conc.Sync.$fApplicativeSTM1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LbR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LbS; else goto c9LbT;
       c9LbS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fApplicativeSTM1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9LbT: // global
           I64[Sp - 16] = block_c9LbN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fApplicativeSTM1_info" {
     GHC.Conc.Sync.$fApplicativeSTM1_info:
         const GHC.Conc.Sync.$fApplicativeSTM1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9LbN() //  [R1]
         { []
         }
     {offset
       c9LbN: // global
           I64[Sp] = block_c9LbP_info;
           _s9FEY::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FEY::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LbN_info" {
     block_c9LbN_info:
         const _c9LbN;
         const 1;
         const 30;
 },
 _c9LbP() //  []
         { []
         }
     {offset
       c9LbP: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LbP_info" {
     block_c9LbP_info:
         const _c9LbP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.4296528 UTC

[section ""data" . GHC.Conc.Sync.$fFunctorSTM_closure" {
     GHC.Conc.Sync.$fFunctorSTM_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Conc.Sync.$fFunctorSTM2_closure+3;
         const GHC.Conc.Sync.$fFunctorSTM1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.431375142 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM_closure" {
     GHC.Conc.Sync.$fApplicativeSTM_closure:
         const GHC.Base.C:Applicative_con_info;
         const GHC.Conc.Sync.$fFunctorSTM_closure+1;
         const GHC.Conc.Sync.$fApplicativeSTM_$cpure_closure+2;
         const GHC.Conc.Sync.$fApplicativeSTM2_closure+3;
         const GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_closure+4;
         const GHC.Conc.Sync.$fApplicativeSTM_$c*>_closure+3;
         const GHC.Conc.Sync.$fApplicativeSTM1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.433536097 UTC

[section ""data" . lvl_r9Fvb_closure" {
     lvl_r9Fvb_closure:
         const lvl_r9Fvb_info;
         const 0;
 },
 lvl_r9Fvb_entry() //  [R2]
         { []
         }
     {offset
       c9Lce: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_r9Fvb_info" {
     lvl_r9Fvb_info:
         const lvl_r9Fvb_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S9FOI_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.436436278 UTC

[section ""data" . GHC.Conc.Sync.$fMonadSTM_closure" {
     GHC.Conc.Sync.$fMonadSTM_closure:
         const GHC.Base.C:Monad_con_info;
         const GHC.Conc.Sync.$fApplicativeSTM_closure+1;
         const GHC.Conc.Sync.$fMonadSTM_$c>>=_closure+3;
         const GHC.Conc.Sync.$fApplicativeSTM_$c*>_closure+3;
         const GHC.Conc.Sync.$fApplicativeSTM_$cpure_closure+2;
         const lvl_r9Fvb_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.438738766 UTC

[section ""data" . GHC.Conc.Sync.always2_closure" {
     GHC.Conc.Sync.always2_closure:
         const GHC.Conc.Sync.always2_info;
 },
 GHC.Conc.Sync.always2_entry() //  []
         { []
         }
     {offset
       c9Lcq: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.always2_info" {
     GHC.Conc.Sync.always2_info:
         const GHC.Conc.Sync.always2_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.443262227 UTC

[section ""data" . GHC.Conc.Sync.alwaysSucceeds1_closure" {
     GHC.Conc.Sync.alwaysSucceeds1_closure:
         const GHC.Conc.Sync.alwaysSucceeds1_info;
 },
 sat_s9FFa_entry() //  [R1]
         { []
         }
     {offset
       c9LcJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9LcK; else goto c9LcL;
       c9LcK: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LcL: // global
           I64[Sp - 8] = block_c9LcH_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FFa_info" {
     sat_s9FFa_info:
         const sat_s9FFa_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _c9LcH() //  []
         { []
         }
     {offset
       c9LcH: // global
           Sp = Sp + 8;
           call stg_retry#() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LcH_info" {
     block_c9LcH_info:
         const _c9LcH;
         const 0;
         const 30;
 },
 GHC.Conc.Sync.alwaysSucceeds1_entry() //  [R2]
         { []
         }
     {offset
       c9LcR: // global
           _s9FF4::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c9LcS; else goto c9LcT;
       c9LcT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LcV; else goto c9LcU;
       c9LcV: // global
           HpAlloc = 16;
           goto c9LcS;
       c9LcS: // global
           R2 = _s9FF4::P64;
           R1 = GHC.Conc.Sync.alwaysSucceeds1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LcU: // global
           I64[Hp - 8] = sat_s9FFa_info;
           P64[Hp] = _s9FF4::P64;
           I64[Sp - 16] = block_c9LcN_info;
           R2 = GHC.Conc.Sync.always2_closure+1;
           R1 = Hp - 7;
           P64[Sp - 8] = _s9FF4::P64;
           Sp = Sp - 16;
           call stg_catchRetry#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.alwaysSucceeds1_info" {
     GHC.Conc.Sync.alwaysSucceeds1_info:
         const GHC.Conc.Sync.alwaysSucceeds1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9LcN() //  []
         { []
         }
     {offset
       c9LcN: // global
           _s9FF4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9LcP_info;
           R1 = _s9FF4::P64;
           Sp = Sp + 8;
           call stg_check#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LcN_info" {
     block_c9LcN_info:
         const _c9LcN;
         const 1;
         const 30;
 },
 _c9LcP() //  []
         { []
         }
     {offset
       c9LcP: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LcP_info" {
     block_c9LcP_info:
         const _c9LcP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.452842272 UTC

[section ""data" . GHC.Conc.Sync.alwaysSucceeds_closure" {
     GHC.Conc.Sync.alwaysSucceeds_closure:
         const GHC.Conc.Sync.alwaysSucceeds_info;
 },
 GHC.Conc.Sync.alwaysSucceeds_entry() //  [R2]
         { []
         }
     {offset
       c9Ldl: // global
           R2 = R2;
           call GHC.Conc.Sync.alwaysSucceeds1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.alwaysSucceeds_info" {
     GHC.Conc.Sync.alwaysSucceeds_info:
         const GHC.Conc.Sync.alwaysSucceeds_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.456759306 UTC

[section ""data" . GHC.Conc.Sync.$fAlternativeSTM2_closure" {
     GHC.Conc.Sync.$fAlternativeSTM2_closure:
         const GHC.Conc.Sync.$fAlternativeSTM2_info;
 },
 GHC.Conc.Sync.$fAlternativeSTM2_entry() //  []
         { []
         }
     {offset
       c9Ldw: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fAlternativeSTM2_info" {
     GHC.Conc.Sync.$fAlternativeSTM2_info:
         const GHC.Conc.Sync.$fAlternativeSTM2_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.461721103 UTC

[section ""data" . GHC.Conc.Sync.$fAlternativeSTM3_closure" {
     GHC.Conc.Sync.$fAlternativeSTM3_closure:
         const GHC.Conc.Sync.$fAlternativeSTM3_info;
 },
 some_v_s9FFi_entry() //  [R1]
         { []
         }
     {offset
       c9LdS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LdT; else goto c9LdU;
       c9LdT: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LdU: // global
           I64[Sp - 16] = block_c9LdN_info;
           _s9FFi::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s9FFi::P64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . some_v_s9FFi_info" {
     some_v_s9FFi_info:
         const some_v_s9FFi_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _c9LdN() //  [R1]
         { []
         }
     {offset
       c9LdN: // global
           I64[Sp] = block_c9LdP_info;
           R2 = GHC.Conc.Sync.$fAlternativeSTM2_closure+1;
           _s9FFm::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FFm::P64;
           call stg_catchRetry#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LdN_info" {
     block_c9LdN_info:
         const _c9LdN;
         const 1;
         const 30;
 },
 _c9LdP() //  [R1]
         { []
         }
     {offset
       c9LdP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9LdY; else goto c9LdX;
       c9LdY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LdX: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LdP_info" {
     block_c9LdP_info:
         const _c9LdP;
         const 1;
         const 30;
 },
 GHC.Conc.Sync.$fAlternativeSTM3_entry() //  [R2]
         { []
         }
     {offset
       c9LdZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Le3; else goto c9Le2;
       c9Le3: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fAlternativeSTM3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Le2: // global
           I64[Hp - 8] = some_v_s9FFi_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call some_v_s9FFi_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fAlternativeSTM3_info" {
     GHC.Conc.Sync.$fAlternativeSTM3_info:
         const GHC.Conc.Sync.$fAlternativeSTM3_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.471150136 UTC

[section ""data" . GHC.Conc.Sync.$fAlternativeSTM1_closure" {
     GHC.Conc.Sync.$fAlternativeSTM1_closure:
         const GHC.Conc.Sync.$fAlternativeSTM1_info;
 },
 many_v_s9FFt_entry() //  [R1]
         { []
         }
     {offset
       c9Lez: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LeA; else goto c9LeB;
       c9LeA: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LeB: // global
           I64[Sp - 16] = block_c9Leu_info;
           _s9FFu::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s9FFu::P64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . many_v_s9FFt_info" {
     many_v_s9FFt_info:
         const many_v_s9FFt_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c9Leu() //  [R1]
         { []
         }
     {offset
       c9Leu: // global
           I64[Sp] = block_c9Lew_info;
           _s9FFy::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9FFy::P64;
           call many_v1_s9FFu_entry(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Leu_info" {
     block_c9Leu_info:
         const _c9Leu;
         const 1;
         const 30;
 },
 _c9Lew() //  [R1]
         { []
         }
     {offset
       c9Lew: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9LeF; else goto c9LeE;
       c9LeF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LeE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lew_info" {
     block_c9Lew_info:
         const _c9Lew;
         const 1;
         const 30;
 },
 many_v1_s9FFu_entry() //  [R1]
         { []
         }
     {offset
       c9LeK: // global
           R2 = GHC.Conc.Sync.$fAlternativeSTM2_closure+1;
           R1 = P64[R1 + 7];
           call stg_catchRetry#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . many_v1_s9FFu_info" {
     many_v1_s9FFu_info:
         const many_v1_s9FFu_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Conc.Sync.$fAlternativeSTM1_entry() //  [R2]
         { []
         }
     {offset
       c9LeN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9LeR; else goto c9LeQ;
       c9LeR: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fAlternativeSTM1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LeQ: // global
           I64[Hp - 32] = many_v_s9FFt_info;
           P64[Hp - 24] = R2;
           _c9Lep::P64 = Hp - 7;
           P64[Hp - 16] = _c9Lep::P64;
           I64[Hp - 8] = many_v1_s9FFu_info;
           P64[Hp] = Hp - 31;
           R1 = _c9Lep::P64;
           call many_v1_s9FFu_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fAlternativeSTM1_info" {
     GHC.Conc.Sync.$fAlternativeSTM1_info:
         const GHC.Conc.Sync.$fAlternativeSTM1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.481208848 UTC

[section ""data" . sat_s9FFE_closure" {
     sat_s9FFE_closure:
         const sat_s9FFE_info;
         const 0;
 },
 sat_s9FFE_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Lfg: // global
           _B3::P64 = R2;
           R2 = R3;
           R1 = _B3::P64;
           call stg_catchRetry#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FFE_info" {
     sat_s9FFE_info:
         const sat_s9FFE_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.484458128 UTC

[section ""data" . sat_s9FFD_closure" {
     sat_s9FFD_closure:
         const sat_s9FFD_info;
         const 0;
 },
 sat_s9FFD_entry() //  []
         { []
         }
     {offset
       c9Lfr: // global
           call stg_retry#() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FFD_info" {
     sat_s9FFD_info:
         const sat_s9FFD_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.487506421 UTC

[section ""data" . GHC.Conc.Sync.$fAlternativeSTM_closure" {
     GHC.Conc.Sync.$fAlternativeSTM_closure:
         const GHC.Base.C:Alternative_con_info;
         const GHC.Conc.Sync.$fApplicativeSTM_closure+1;
         const sat_s9FFD_closure+1;
         const sat_s9FFE_closure+3;
         const GHC.Conc.Sync.$fAlternativeSTM3_closure+2;
         const GHC.Conc.Sync.$fAlternativeSTM1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.490121815 UTC

[section ""data" . sat_s9FFG_closure" {
     sat_s9FFG_closure:
         const sat_s9FFG_info;
         const 0;
 },
 sat_s9FFG_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LfD: // global
           _B3::P64 = R2;
           R2 = R3;
           R1 = _B3::P64;
           call stg_catchRetry#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FFG_info" {
     sat_s9FFG_info:
         const sat_s9FFG_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.493329669 UTC

[section ""data" . sat_s9FFF_closure" {
     sat_s9FFF_closure:
         const sat_s9FFF_info;
         const 0;
 },
 sat_s9FFF_entry() //  []
         { []
         }
     {offset
       c9LfO: // global
           call stg_retry#() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FFF_info" {
     sat_s9FFF_info:
         const sat_s9FFF_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.496252756 UTC

[section ""data" . GHC.Conc.Sync.$fMonadPlusSTM_closure" {
     GHC.Conc.Sync.$fMonadPlusSTM_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const GHC.Conc.Sync.$fAlternativeSTM_closure+1;
         const GHC.Conc.Sync.$fMonadSTM_closure+1;
         const sat_s9FFF_closure+1;
         const sat_s9FFG_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.498344707 UTC

[section ""cstring" . lvl1_r9Fvc_bytes" {
     lvl1_r9Fvc_bytes:
         I8[] [84,114,97,110,115,97,99,116,105,111,110,97,108,32,105,110,118,97,114,105,97,110,116,32,118,105,111,108,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.500690396 UTC

[section ""data" . GHC.Conc.Sync.always3_closure" {
     GHC.Conc.Sync.always3_closure:
         const GHC.Conc.Sync.always3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.always3_entry() //  [R1]
         { []
         }
     {offset
       c9Lg5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lg6; else goto c9Lg7;
       c9Lg6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Lg7: // global
           (_c9Lg0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Lg0::I64 == 0) goto c9Lg2; else goto c9Lg1;
       c9Lg2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Lg1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Lg0::I64;
           I64[Sp - 24] = block_c9Lg3_info;
           R2 = lvl1_r9Fvc_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.always3_info" {
     GHC.Conc.Sync.always3_info:
         const GHC.Conc.Sync.always3_entry;
         const 0;
         const 4294967317;
         const S9FOI_srt+160;
 },
 _c9Lg3() //  [R1]
         { []
         }
     {offset
       c9Lg3: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Lg3_info" {
     block_c9Lg3_info:
         const _c9Lg3;
         const 0;
         const 4294967326;
         const S9FOI_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.50803227 UTC

[section ""data" . GHC.Conc.Sync.always1_closure" {
     GHC.Conc.Sync.always1_closure:
         const GHC.Conc.Sync.always1_info;
         const 0;
 },
 sat_s9FFQ_entry() //  [R1]
         { []
         }
     {offset
       c9LgD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9LgE; else goto c9LgF;
       c9LgE: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LgF: // global
           I64[Sp - 8] = block_c9Lgu_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FFQ_info" {
     sat_s9FFQ_info:
         const sat_s9FFQ_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9FOI_srt+168;
 },
 _c9Lgu() //  [R1]
         { []
         }
     {offset
       c9Lgu: // global
           I64[Sp] = block_c9Lgw_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9LgN; else goto c9Lgx;
       u9LgN: // global
           call _c9Lgw(R1) args: 0, res: 0, upd: 0;
       c9Lgx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lgu_info" {
     block_c9Lgu_info:
         const _c9Lgu;
         const 0;
         const 4294967326;
         const S9FOI_srt+168;
 },
 _c9Lgw() //  [R1]
         { []
         }
     {offset
       c9Lgw: // global
           if (R1 & 7 == 1) goto c9LgA; else goto c9LgB;
       c9LgA: // global
           R1 = GHC.Conc.Sync.always3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c9LgB: // global
           Sp = Sp + 8;
           call stg_retry#() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lgw_info" {
     block_c9Lgw_info:
         const _c9Lgw;
         const 0;
         const 4294967326;
         const S9FOI_srt+168;
 },
 sat_s9FG0_entry() //  [R1]
         { []
         }
     {offset
       c9Lh4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Lh5; else goto c9Lh6;
       c9Lh5: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Lh6: // global
           I64[Sp - 8] = block_c9LgV_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FG0_info" {
     sat_s9FG0_info:
         const sat_s9FG0_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9FOI_srt+168;
 },
 _c9LgV() //  [R1]
         { []
         }
     {offset
       c9LgV: // global
           I64[Sp] = block_c9LgX_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9Lhe; else goto c9LgY;
       u9Lhe: // global
           call _c9LgX(R1) args: 0, res: 0, upd: 0;
       c9LgY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LgV_info" {
     block_c9LgV_info:
         const _c9LgV;
         const 0;
         const 4294967326;
         const S9FOI_srt+168;
 },
 _c9LgX() //  [R1]
         { []
         }
     {offset
       c9LgX: // global
           if (R1 & 7 == 1) goto c9Lh1; else goto c9Lh2;
       c9Lh1: // global
           R1 = GHC.Conc.Sync.always3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c9Lh2: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LgX_info" {
     block_c9LgX_info:
         const _c9LgX;
         const 0;
         const 4294967326;
         const S9FOI_srt+168;
 },
 GHC.Conc.Sync.always1_entry() //  [R2]
         { []
         }
     {offset
       c9Lhh: // global
           _s9FFI::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Lhi; else goto c9Lhj;
       c9Lhj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Lhl; else goto c9Lhk;
       c9Lhl: // global
           HpAlloc = 16;
           goto c9Lhi;
       c9Lhi: // global
           R2 = _s9FFI::P64;
           R1 = GHC.Conc.Sync.always1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Lhk: // global
           I64[Hp - 8] = sat_s9FFQ_info;
           P64[Hp] = _s9FFI::P64;
           I64[Sp - 16] = block_c9LgO_info;
           R2 = GHC.Conc.Sync.always2_closure+1;
           R1 = Hp - 7;
           P64[Sp - 8] = _s9FFI::P64;
           Sp = Sp - 16;
           call stg_catchRetry#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.always1_info" {
     GHC.Conc.Sync.always1_info:
         const GHC.Conc.Sync.always1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S9FOI_srt+168;
 },
 _c9LgO() //  [R1]
         { []
         }
     {offset
       c9LgO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Lho; else goto c9Lhn;
       c9Lho: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Lhn: // global
           I64[Hp - 8] = sat_s9FG0_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9Lhf_info;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_check#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LgO_info" {
     block_c9LgO_info:
         const _c9LgO;
         const 1;
         const 4294967326;
         const S9FOI_srt+168;
 },
 _c9Lhf() //  []
         { []
         }
     {offset
       c9Lhf: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lhf_info" {
     block_c9Lhf_info:
         const _c9Lhf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.524769119 UTC

[section ""data" . GHC.Conc.Sync.always_closure" {
     GHC.Conc.Sync.always_closure:
         const GHC.Conc.Sync.always_info;
         const 0;
 },
 GHC.Conc.Sync.always_entry() //  [R2]
         { []
         }
     {offset
       c9Li8: // global
           R2 = R2;
           call GHC.Conc.Sync.always1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.always_info" {
     GHC.Conc.Sync.always_info:
         const GHC.Conc.Sync.always_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9FOI_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.52777716 UTC

[section ""cstring" . lvl2_r9Fvd_bytes" {
     lvl2_r9Fvd_bytes:
         I8[] [110,111,32,116,104,114,101,97,100,115,32,116,111,32,114,117,110,58,32,32,105,110,102,105,110,105,116,101,32,108,111,111,112,32,111,114,32,100,101,97,100,108,111,99,107,63]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.529893929 UTC

[section ""data" . lvl3_r9Fve_closure" {
     lvl3_r9Fve_closure:
         const lvl3_r9Fve_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r9Fve_entry() //  [R1]
         { []
         }
     {offset
       c9Lim: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Lin; else goto c9Lio;
       c9Lin: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Lio: // global
           (_c9Lij::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Lij::I64 == 0) goto c9Lil; else goto c9Lik;
       c9Lil: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Lik: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Lij::I64;
           R2 = lvl2_r9Fvd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r9Fve_info" {
     lvl3_r9Fve_info:
         const lvl3_r9Fve_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.534692437 UTC

[section ""data" . lvl4_r9Fvf_closure" {
     lvl4_r9Fvf_closure:
         const lvl4_r9Fvf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r9Fvf_entry() //  [R1]
         { []
         }
     {offset
       c9LiH: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9LiI; else goto c9LiJ;
       c9LiI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9LiJ: // global
           (_c9Liz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Liz::I64 == 0) goto c9LiB; else goto c9LiA;
       c9LiB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9LiA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Liz::I64;
           I64[Sp - 24] = block_c9LiC_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionDeadlock4_closure;
           R4 = GHC.IO.Exception.$trModule_closure;
           R3 = 11186984538024031318;
           R2 = 18363794241794644491;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r9Fvf_info" {
     lvl4_r9Fvf_info:
         const lvl4_r9Fvf_entry;
         const 0;
         const 4294967317;
         const S9FOI_srt+184;
 },
 _c9LiC() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9LiC: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9LiD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9LiC_info" {
     block_c9LiC_info:
         const _c9LiC;
         const 0;
         const 30;
 },
 _c9LiD() //  []
         { []
         }
     {offset
       c9LiD: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9LiM; else goto c9LiL;
       c9LiM: // global
           HpAlloc = 48;
           I64[Sp] = block_c9LiD_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9LiL: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9LiD_info" {
     block_c9LiD_info:
         const _c9LiD;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.54171407 UTC

[section ""cstring" . lvl5_r9Fvg_bytes" {
     lvl5_r9Fvg_bytes:
         I8[] [37,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.543829798 UTC

[section ""data" . lvl6_r9Fvh_closure" {
     lvl6_r9Fvh_closure:
         const lvl6_r9Fvh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r9Fvh_entry() //  [R1]
         { []
         }
     {offset
       c9Ljf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ljg; else goto c9Ljh;
       c9Ljg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ljh: // global
           (_c9Ljc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ljc::I64 == 0) goto c9Lje; else goto c9Ljd;
       c9Lje: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ljd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ljc::I64;
           R2 = lvl5_r9Fvg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r9Fvh_info" {
     lvl6_r9Fvh_info:
         const lvl6_r9Fvh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.547745871 UTC

[section ""data" . lvl7_r9Fvi_closure" {
     lvl7_r9Fvi_closure:
         const lvl7_r9Fvi_info;
 },
 lvl7_r9Fvi_entry() //  [R2]
         { []
         }
     {offset
       c9Ljw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ljx; else goto c9Ljy;
       c9Ljx: // global
           R2 = R2;
           R1 = lvl7_r9Fvi_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ljy: // global
           I64[Sp - 8] = block_c9Ljt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9LjC; else goto c9Lju;
       u9LjC: // global
           call _c9Ljt() args: 0, res: 0, upd: 0;
       c9Lju: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_r9Fvi_info" {
     lvl7_r9Fvi_info:
         const lvl7_r9Fvi_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9Ljt() //  []
         { []
         }
     {offset
       c9Ljt: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ljt_info" {
     block_c9Ljt_info:
         const _c9Ljt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.553129808 UTC

[section ""data" . lvl8_r9Fvj_closure" {
     lvl8_r9Fvj_closure:
         const lvl8_r9Fvj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r9Fvj_entry() //  [R1]
         { []
         }
     {offset
       c9LjT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LjU; else goto c9LjV;
       c9LjU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9LjV: // global
           (_c9LjQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9LjQ::I64 == 0) goto c9LjS; else goto c9LjR;
       c9LjS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9LjR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9LjQ::I64;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           R1 = GHC.IO.Handle.hFlush_closure;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_r9Fvj_info" {
     lvl8_r9Fvj_info:
         const lvl8_r9Fvj_entry;
         const 0;
         const 12884901909;
         const S9FOI_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.561773775 UTC

[section ""data" . lvl9_r9Fvk_closure" {
     lvl9_r9Fvk_closure:
         const lvl9_r9Fvk_info;
         const 0;
 },
 msg_s9FGp_entry() //  [R1]
         { []
         }
     {offset
       c9Lko: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9Lkp; else goto c9Lkq;
       c9Lkp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Lkq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c9Lkm_info;
           _s9FGg::P64 = P64[R1 + 16];
           R2 = _s9FGg::P64;
           P64[Sp - 32] = _s9FGg::P64;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . msg_s9FGp_info" {
     msg_s9FGp_info:
         const msg_s9FGp_entry;
         const 2;
         const 30064771090;
         const S9FOI_srt+208;
 },
 _c9Lkm() //  [R1]
         { []
         }
     {offset
       c9Lkm: // global
           I64[Sp] = block_c9Lkt_info;
           R3 = lvl4_r9Fvf_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Lkm_info" {
     block_c9Lkm_info:
         const _c9Lkm;
         const 2;
         const 30064771102;
         const S9FOI_srt+208;
 },
 _c9Lkt() //  [R1]
         { []
         }
     {offset
       c9Lkt: // global
           if (R1 & 7 == 1) goto c9LkB; else goto c9LkK;
       c9LkB: // global
           _s9FGg::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9Lky_info;
           R2 = _s9FGg::P64;
           Sp = Sp + 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 24;
       c9LkK: // global
           _s9FGh::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c9LkI_info;
           R1 = _s9FGh::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Lkt_info" {
     block_c9Lkt_info:
         const _c9Lkt;
         const 2;
         const 4294967326;
         const S9FOI_srt+216;
 },
 _c9Lky() //  [R1]
         { []
         }
     {offset
       c9Lky: // global
           R2 = R1;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = GHC.Conc.Sync.$fShowThreadStatus2_closure+1;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Lky_info" {
     block_c9Lky_info:
         const _c9Lky;
         const 1;
         const 30;
 },
 _c9LkI() //  []
         { []
         }
     {offset
       c9LkI: // global
           R1 = lvl3_r9Fve_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9LkI_info" {
     block_c9LkI_info:
         const _c9LkI;
         const 0;
         const 4294967326;
         const S9FOI_srt+216;
 },
 sat_s9FGI_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Ll5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ll9; else goto c9Lla;
       c9Ll9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Lla: // global
           I64[Sp - 16] = block_c9Ll2_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Lll; else goto c9Ll3;
       u9Lll: // global
           call _c9Ll2(R1) args: 0, res: 0, upd: 0;
       c9Ll3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FGI_info" {
     sat_s9FGI_info:
         const sat_s9FGI_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9Ll2() //  [R1]
         { []
         }
     {offset
       c9Ll2: // global
           I64[Sp] = block_c9Ll8_info;
           _s9FGC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9FGC::I64;
           if (R1 & 7 != 0) goto u9Llk; else goto c9Llc;
       u9Llk: // global
           call _c9Ll8(R1) args: 0, res: 0, upd: 0;
       c9Llc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ll2_info" {
     block_c9Ll2_info:
         const _c9Ll2;
         const 1;
         const 30;
 },
 _c9Ll8() //  [R1]
         { []
         }
     {offset
       c9Ll8: // global
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] errorBelch2(I64[Sp + 8], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ll8_info" {
     block_c9Ll8_info:
         const _c9Ll8;
         const 65;
         const 30;
 },
 sat_s9FGJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Llm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lln; else goto c9Llo;
       c9Lln: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Llo: // global
           I64[Sp - 24] = block_c9LkV_info;
           _s9FGp::P64 = P64[R1 + 6];
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 16] = _s9FGp::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FGJ_info" {
     sat_s9FGJ_info:
         const sat_s9FGJ_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const S9FOI_srt+232;
 },
 _c9LkV() //  [R1]
         { []
         }
     {offset
       c9LkV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Llr; else goto c9Llq;
       c9Llr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Llq: // global
           I64[Hp - 8] = sat_s9FGI_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LkV_info" {
     block_c9LkV_info:
         const _c9LkV;
         const 2;
         const 30;
 },
 lvl9_r9Fvk_entry() //  [R2]
         { []
         }
     {offset
       c9Lls: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Llt; else goto c9Llu;
       c9Llt: // global
           R2 = R2;
           R1 = lvl9_r9Fvk_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Llu: // global
           I64[Sp - 8] = block_c9Lk7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9LlB; else goto c9Lk8;
       u9LlB: // global
           call _c9Lk7(R1) args: 0, res: 0, upd: 0;
       c9Lk8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl9_r9Fvk_info" {
     lvl9_r9Fvk_info:
         const lvl9_r9Fvk_entry;
         const 0;
         const 545460846606;
         const 8589934597;
         const S9FOI_srt+208;
 },
 _c9Lk7() //  [R1]
         { []
         }
     {offset
       c9Lk7: // global
           I64[Sp - 16] = block_c9Lkc_info;
           _s9FGg::P64 = P64[R1 + 7];
           _s9FGh::P64 = P64[R1 + 15];
           R1 = lvl8_r9Fvj_closure;
           P64[Sp - 8] = _s9FGh::P64;
           P64[Sp] = _s9FGg::P64;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lk7_info" {
     block_c9Lk7_info:
         const _c9Lk7;
         const 0;
         const 270582939678;
         const S9FOI_srt+208;
 },
 _c9Lkc() //  [R1]
         { []
         }
     {offset
       c9Lkc: // global
           I64[Sp] = block_c9Lke_info;
           R2 = lvl7_r9Fvi_closure+2;
           R1 = R1;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lkc_info" {
     block_c9Lkc_info:
         const _c9Lkc;
         const 2;
         const 133143986206;
         const S9FOI_srt+208;
 },
 _c9Lke() //  []
         { []
         }
     {offset
       c9Lke: // global
           I64[Sp] = block_c9Lkg_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lke_info" {
     block_c9Lke_info:
         const _c9Lke;
         const 2;
         const 133143986206;
         const S9FOI_srt+208;
 },
 _c9Lkg() //  [R1]
         { []
         }
     {offset
       c9Lkg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9LlA; else goto c9Llz;
       c9LlA: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Llz: // global
           I64[Hp - 40] = msg_s9FGp_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = sat_s9FGJ_info;
           P64[Hp] = Hp - 40;
           R4 = Hp - 6;
           R3 = lvl6_r9Fvh_closure;
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lkg_info" {
     block_c9Lkg_info:
         const _c9Lkg;
         const 2;
         const 133143986206;
         const S9FOI_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.586929149 UTC

[section ""data" . lvl10_r9Fvl_closure" {
     lvl10_r9Fvl_closure:
         const lvl10_r9Fvl_info;
         const 0;
 },
 lvl10_r9Fvl_entry() //  []
         { []
         }
     {offset
       c9LmM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9LmN; else goto c9LmO;
       c9LmN: // global
           R1 = lvl10_r9Fvl_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LmO: // global
           I64[Sp - 8] = block_c9LmH_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl10_r9Fvl_info" {
     lvl10_r9Fvl_info:
         const lvl10_r9Fvl_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const S9FOI_srt+256;
 },
 _c9LmH() //  []
         { []
         }
     {offset
       c9LmH: // global
           I64[Sp] = block_c9LmJ_info;
           R1 = lvl9_r9Fvk_closure+2;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LmH_info" {
     block_c9LmH_info:
         const _c9LmH;
         const 0;
         const 4294967326;
         const S9FOI_srt+256;
 },
 _c9LmJ() //  [R1]
         { []
         }
     {offset
       c9LmJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LmS; else goto c9LmR;
       c9LmS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LmR: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LmJ_info" {
     block_c9LmJ_info:
         const _c9LmJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.594521839 UTC

[section ""data" . GHC.Conc.Sync.uncaughtExceptionHandler_closure" {
     GHC.Conc.Sync.uncaughtExceptionHandler_closure:
         const GHC.Conc.Sync.uncaughtExceptionHandler_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.uncaughtExceptionHandler_entry() //  [R1]
         { []
         }
     {offset
       c9Lnd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lne; else goto c9Lnf;
       c9Lne: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Lnf: // global
           (_c9Ln8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ln8::I64 == 0) goto c9Lna; else goto c9Ln9;
       c9Lna: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ln9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ln8::I64;
           I64[Sp - 24] = block_c9Lnb_info;
           Sp = Sp - 24;
           call lvl10_r9Fvl_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.uncaughtExceptionHandler_info" {
     GHC.Conc.Sync.uncaughtExceptionHandler_info:
         const GHC.Conc.Sync.uncaughtExceptionHandler_entry;
         const 0;
         const 4294967317;
         const S9FOI_srt+264;
 },
 _c9Lnb() //  [R1]
         { []
         }
     {offset
       c9Lnb: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Lnb_info" {
     block_c9Lnb_info:
         const _c9Lnb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.599630862 UTC

[section ""data" . GHC.Conc.Sync.setUncaughtExceptionHandler1_closure" {
     GHC.Conc.Sync.setUncaughtExceptionHandler1_closure:
         const GHC.Conc.Sync.setUncaughtExceptionHandler1_info;
         const 0;
 },
 GHC.Conc.Sync.setUncaughtExceptionHandler1_entry() //  [R2]
         { []
         }
     {offset
       c9Lnx: // global
           R3 = R2;
           R2 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           call GHC.STRef.writeSTRef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setUncaughtExceptionHandler1_info" {
     GHC.Conc.Sync.setUncaughtExceptionHandler1_info:
         const GHC.Conc.Sync.setUncaughtExceptionHandler1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9FOI_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.603198683 UTC

[section ""data" . GHC.Conc.Sync.setUncaughtExceptionHandler_closure" {
     GHC.Conc.Sync.setUncaughtExceptionHandler_closure:
         const GHC.Conc.Sync.setUncaughtExceptionHandler_info;
         const 0;
 },
 GHC.Conc.Sync.setUncaughtExceptionHandler_entry() //  [R2]
         { []
         }
     {offset
       c9LnI: // global
           R2 = R2;
           call GHC.Conc.Sync.setUncaughtExceptionHandler1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setUncaughtExceptionHandler_info" {
     GHC.Conc.Sync.setUncaughtExceptionHandler_info:
         const GHC.Conc.Sync.setUncaughtExceptionHandler_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9FOI_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.606480049 UTC

[section ""data" . GHC.Conc.Sync.getUncaughtExceptionHandler1_closure" {
     GHC.Conc.Sync.getUncaughtExceptionHandler1_closure:
         const GHC.Conc.Sync.getUncaughtExceptionHandler1_info;
         const 0;
 },
 GHC.Conc.Sync.getUncaughtExceptionHandler1_entry() //  []
         { []
         }
     {offset
       c9LnT: // global
           R2 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           call GHC.STRef.readSTRef1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getUncaughtExceptionHandler1_info" {
     GHC.Conc.Sync.getUncaughtExceptionHandler1_info:
         const GHC.Conc.Sync.getUncaughtExceptionHandler1_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const S9FOI_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.609730718 UTC

[section ""data" . GHC.Conc.Sync.getUncaughtExceptionHandler_closure" {
     GHC.Conc.Sync.getUncaughtExceptionHandler_closure:
         const GHC.Conc.Sync.getUncaughtExceptionHandler_info;
         const 0;
 },
 GHC.Conc.Sync.getUncaughtExceptionHandler_entry() //  []
         { []
         }
     {offset
       c9Lo4: // global
           call GHC.Conc.Sync.getUncaughtExceptionHandler1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getUncaughtExceptionHandler_info" {
     GHC.Conc.Sync.getUncaughtExceptionHandler_info:
         const GHC.Conc.Sync.getUncaughtExceptionHandler_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const S9FOI_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.613805368 UTC

[section ""data" . GHC.Conc.Sync.reportError1_closure" {
     GHC.Conc.Sync.reportError1_closure:
         const GHC.Conc.Sync.reportError1_info;
         const 0;
 },
 GHC.Conc.Sync.reportError1_entry() //  [R2]
         { []
         }
     {offset
       c9Loi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Loj; else goto c9Lok;
       c9Loj: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.reportError1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Lok: // global
           I64[Sp - 16] = block_c9Lof_info;
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Loo; else goto c9Log;
       u9Loo: // global
           call _c9Lof(R1) args: 0, res: 0, upd: 0;
       c9Log: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.reportError1_info" {
     GHC.Conc.Sync.reportError1_info:
         const GHC.Conc.Sync.reportError1_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const S9FOI_srt+272;
 },
 _c9Lof() //  [R1]
         { []
         }
     {offset
       c9Lof: // global
           R2 = P64[Sp + 8];
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lof_info" {
     block_c9Lof_info:
         const _c9Lof;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.618951192 UTC

[section ""data" . GHC.Conc.Sync.reportError_closure" {
     GHC.Conc.Sync.reportError_closure:
         const GHC.Conc.Sync.reportError_info;
         const 0;
 },
 GHC.Conc.Sync.reportError_entry() //  [R2]
         { []
         }
     {offset
       c9LoD: // global
           R2 = R2;
           call GHC.Conc.Sync.reportError1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.reportError_info" {
     GHC.Conc.Sync.reportError_info:
         const GHC.Conc.Sync.reportError_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9FOI_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.624304209 UTC

[section ""data" . GHC.Conc.Sync.sharedCAF1_closure" {
     GHC.Conc.Sync.sharedCAF1_closure:
         const GHC.Conc.Sync.sharedCAF1_info;
 },
 io_s9FH6_entry() //  [R1]
         { []
         }
     {offset
       c9Lp3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lp4; else goto c9Lp5;
       c9Lp4: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Lp5: // global
           I64[Sp - 24] = block_c9LoV_info;
           _s9FH0::P64 = P64[R1 + 7];
           _s9FH1::P64 = P64[R1 + 15];
           R1 = _s9FH0::P64;
           P64[Sp - 16] = _s9FH0::P64;
           P64[Sp - 8] = _s9FH1::P64;
           Sp = Sp - 24;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_s9FH6_info" {
     io_s9FH6_info:
         const io_s9FH6_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c9LoV() //  [R1]
         { []
         }
     {offset
       c9LoV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Lp8; else goto c9Lp7;
       c9Lp8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Lp7: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = R1;
           I64[Sp] = block_c9LoY_info;
           R2 = Hp - 7;
           _s9FHa::I64 = R1;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9FHa::I64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LoV_info" {
     block_c9LoV_info:
         const _c9LoV;
         const 2;
         const 30;
 },
 _c9LoY() //  [R1]
         { []
         }
     {offset
       c9LoY: // global
           I64[Sp] = block_c9Lp0_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9Lpl; else goto c9Lp1;
       u9Lpl: // global
           call _c9Lp0(R1) args: 0, res: 0, upd: 0;
       c9Lp1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LoY_info" {
     block_c9LoY_info:
         const _c9LoY;
         const 130;
         const 30;
 },
 _c9Lp0() //  [R1]
         { []
         }
     {offset
       c9Lp0: // global
           _s9FHa::I64 = I64[Sp + 16];
           _s9FHg::I64 = I64[R1 + 7];
           if (_s9FHa::I64 == _s9FHg::I64) goto c9Lph; else goto c9Lpg;
       c9Lph: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Lpg: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(_s9FHa::I64);
           R1 = _s9FHg::I64;
           Sp = Sp + 24;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lp0_info" {
     block_c9Lp0_info:
         const _c9Lp0;
         const 130;
         const 30;
 },
 GHC.Conc.Sync.sharedCAF1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Lpq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lpr; else goto c9Lps;
       c9Lpr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.sharedCAF1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Lps: // global
           I64[Sp - 24] = block_c9LoO_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.sharedCAF1_info" {
     GHC.Conc.Sync.sharedCAF1_info:
         const GHC.Conc.Sync.sharedCAF1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9LoO() //  [R1]
         { []
         }
     {offset
       c9LoO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Lpv; else goto c9Lpu;
       c9Lpv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Lpu: // global
           I64[Hp - 16] = io_s9FH6_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _c9LoQ::P64 = Hp - 15;
           if (R1 == 0) goto c9Lpp; else goto c9Lpo;
       c9Lpp: // global
           R1 = _c9LoQ::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       c9Lpo: // global
           R1 = _c9LoQ::P64;
           Sp = Sp + 24;
           call io_s9FH6_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LoO_info" {
     block_c9LoO_info:
         const _c9LoO;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.636745254 UTC

[section ""data" . GHC.Conc.Sync.sharedCAF_closure" {
     GHC.Conc.Sync.sharedCAF_closure:
         const GHC.Conc.Sync.sharedCAF_info;
 },
 GHC.Conc.Sync.sharedCAF_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LpZ: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.sharedCAF1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.sharedCAF_info" {
     GHC.Conc.Sync.sharedCAF_info:
         const GHC.Conc.Sync.sharedCAF_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.648273622 UTC

[section ""data" . GHC.Conc.Sync.$wmodifyMVar__closure" {
     GHC.Conc.Sync.$wmodifyMVar__closure:
         const GHC.Conc.Sync.$wmodifyMVar__info;
 },
 sat_s9FHF_entry() //  [R1]
         { []
         }
     {offset
       c9Lqx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lqy; else goto c9Lqz;
       c9Lqy: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Lqz: // global
           I64[Sp - 24] = block_c9Lqv_info;
           R2 = P64[R1 + 15];
           _s9FHA::P64 = P64[R1 + 23];
           _s9FHB::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9FHA::P64;
           P64[Sp - 8] = _s9FHB::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FHF_info" {
     sat_s9FHF_info:
         const sat_s9FHF_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9Lqv() //  []
         { []
         }
     {offset
       c9Lqv: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lqv_info" {
     block_c9Lqv_info:
         const _c9Lqv;
         const 2;
         const 30;
 },
 sat_s9FHG_entry() //  [R1, R2]
         { []
         }
     {offset
       c9LqB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9LqC; else goto c9LqD;
       c9LqC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LqD: // global
           I64[Sp - 24] = block_c9Lql_info;
           _s9FHm::P64 = P64[R1 + 7];
           _s9FHv::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9FHm::P64;
           P64[Sp - 8] = _s9FHv::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9LqH; else goto c9Lqm;
       u9LqH: // global
           call _c9Lql(R1) args: 0, res: 0, upd: 0;
       c9Lqm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FHG_info" {
     sat_s9FHG_info:
         const sat_s9FHG_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9Lql() //  [R1]
         { []
         }
     {offset
       c9Lql: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9LqG; else goto c9LqF;
       c9LqG: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LqF: // global
           _s9FHA::P64 = P64[R1 + 7];
           _s9FHB::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9FHF_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9FHA::P64;
           P64[Hp] = _s9FHB::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lql_info" {
     block_c9Lql_info:
         const _c9Lql;
         const 2;
         const 30;
 },
 sat_s9FHx_entry() //  [R1]
         { []
         }
     {offset
       c9LqO: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FHx_info" {
     sat_s9FHx_info:
         const sat_s9FHx_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9FHY_entry() //  [R1]
         { []
         }
     {offset
       c9Lrg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lrh; else goto c9Lri;
       c9Lrh: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Lri: // global
           I64[Sp - 24] = block_c9Lre_info;
           R2 = P64[R1 + 15];
           _s9FHT::P64 = P64[R1 + 23];
           _s9FHU::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9FHT::P64;
           P64[Sp - 8] = _s9FHU::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FHY_info" {
     sat_s9FHY_info:
         const sat_s9FHY_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9Lre() //  []
         { []
         }
     {offset
       c9Lre: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lre_info" {
     block_c9Lre_info:
         const _c9Lre;
         const 2;
         const 30;
 },
 sat_s9FHZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Lrk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lrl; else goto c9Lrm;
       c9Lrl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Lrm: // global
           I64[Sp - 24] = block_c9Lr4_info;
           _s9FHm::P64 = P64[R1 + 7];
           _s9FHO::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9FHm::P64;
           P64[Sp - 8] = _s9FHO::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Lrq; else goto c9Lr5;
       u9Lrq: // global
           call _c9Lr4(R1) args: 0, res: 0, upd: 0;
       c9Lr5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FHZ_info" {
     sat_s9FHZ_info:
         const sat_s9FHZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9Lr4() //  [R1]
         { []
         }
     {offset
       c9Lr4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Lrp; else goto c9Lro;
       c9Lrp: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Lro: // global
           _s9FHT::P64 = P64[R1 + 7];
           _s9FHU::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9FHY_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9FHT::P64;
           P64[Hp] = _s9FHU::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lr4_info" {
     block_c9Lr4_info:
         const _c9Lr4;
         const 2;
         const 30;
 },
 sat_s9FHQ_entry() //  [R1]
         { []
         }
     {offset
       c9Lrx: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FHQ_info" {
     sat_s9FHQ_info:
         const sat_s9FHQ_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9FI4_entry() //  [R1]
         { []
         }
     {offset
       c9LrE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9LrF; else goto c9LrG;
       c9LrF: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LrG: // global
           I64[Sp - 24] = block_c9LqX_info;
           _s9FHm::P64 = P64[R1 + 7];
           _s9FHn::P64 = P64[R1 + 15];
           R1 = _s9FHm::P64;
           P64[Sp - 16] = _s9FHm::P64;
           P64[Sp - 8] = _s9FHn::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FI4_info" {
     sat_s9FI4_info:
         const sat_s9FI4_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c9LqX() //  [R1]
         { []
         }
     {offset
       c9LqX: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9LrJ; else goto c9LrI;
       c9LrJ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LrI: // global
           I64[Hp - 64] = sat_s9FHZ_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9FHQ_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9LrA_info;
           R2 = Hp - 63;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LqX_info" {
     block_c9LqX_info:
         const _c9LqX;
         const 2;
         const 30;
 },
 _c9LrA() //  [R1]
         { []
         }
     {offset
       c9LrA: // global
           I64[Sp + 16] = block_c9LrC_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LrA_info" {
     block_c9LrA_info:
         const _c9LrA;
         const 130;
         const 30;
 },
 _c9LrC() //  []
         { []
         }
     {offset
       c9LrC: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LrC_info" {
     block_c9LrC_info:
         const _c9LrC;
         const 0;
         const 30;
 },
 sat_s9FIh_entry() //  [R1]
         { []
         }
     {offset
       c9Ls6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ls7; else goto c9Ls8;
       c9Ls7: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ls8: // global
           I64[Sp - 24] = block_c9Ls4_info;
           R2 = P64[R1 + 15];
           _s9FIc::P64 = P64[R1 + 23];
           _s9FId::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9FIc::P64;
           P64[Sp - 8] = _s9FId::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FIh_info" {
     sat_s9FIh_info:
         const sat_s9FIh_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9Ls4() //  []
         { []
         }
     {offset
       c9Ls4: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ls4_info" {
     block_c9Ls4_info:
         const _c9Ls4;
         const 2;
         const 30;
 },
 sat_s9FIi_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Lsa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lsb; else goto c9Lsc;
       c9Lsb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Lsc: // global
           I64[Sp - 24] = block_c9LrU_info;
           _s9FHm::P64 = P64[R1 + 7];
           _s9FI7::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9FHm::P64;
           P64[Sp - 8] = _s9FI7::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Lsg; else goto c9LrV;
       u9Lsg: // global
           call _c9LrU(R1) args: 0, res: 0, upd: 0;
       c9LrV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FIi_info" {
     sat_s9FIi_info:
         const sat_s9FIi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9LrU() //  [R1]
         { []
         }
     {offset
       c9LrU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Lsf; else goto c9Lse;
       c9Lsf: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Lse: // global
           _s9FIc::P64 = P64[R1 + 7];
           _s9FId::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9FIh_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9FIc::P64;
           P64[Hp] = _s9FId::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LrU_info" {
     block_c9LrU_info:
         const _c9LrU;
         const 2;
         const 30;
 },
 sat_s9FI9_entry() //  [R1]
         { []
         }
     {offset
       c9Lsn: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FI9_info" {
     sat_s9FI9_info:
         const sat_s9FI9_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Conc.Sync.$wmodifyMVar__entry() //  [R2, R3]
         { []
         }
     {offset
       c9Lsu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lsv; else goto c9Lsw;
       c9Lsv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$wmodifyMVar__closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Lsw: // global
           I64[Sp - 24] = block_c9Lqa_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$wmodifyMVar__info" {
     GHC.Conc.Sync.$wmodifyMVar__info:
         const GHC.Conc.Sync.$wmodifyMVar__entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Lqa() //  [R1]
         { []
         }
     {offset
       c9Lqa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Lsz; else goto c9Lsy;
       c9Lsz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Lsy: // global
           _s9FHm::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9Lss; else goto u9LsS;
       c9Lss: // global
           I64[Hp - 16] = sat_s9FI4_info;
           P64[Hp - 8] = _s9FHm::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9LsS: // global
           if (R1 == 1) goto c9Lst; else goto c9Lsr;
       c9Lst: // global
           Hp = Hp - 24;
           I64[Sp] = block_c9LrN_info;
           R1 = _s9FHm::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       c9Lsr: // global
           Hp = Hp - 24;
           I64[Sp] = block_c9Lqe_info;
           R1 = _s9FHm::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lqa_info" {
     block_c9Lqa_info:
         const _c9Lqa;
         const 2;
         const 30;
 },
 _c9LrN() //  [R1]
         { []
         }
     {offset
       c9LrN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9LsO; else goto c9LsN;
       c9LsO: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LsN: // global
           I64[Hp - 64] = sat_s9FIi_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9FI9_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9LsJ_info;
           R2 = Hp - 63;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LrN_info" {
     block_c9LrN_info:
         const _c9LrN;
         const 2;
         const 30;
 },
 _c9LsJ() //  [R1]
         { []
         }
     {offset
       c9LsJ: // global
           I64[Sp + 16] = block_c9LsL_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LsJ_info" {
     block_c9LsJ_info:
         const _c9LsJ;
         const 130;
         const 30;
 },
 _c9Lqe() //  [R1]
         { []
         }
     {offset
       c9Lqe: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9LsF; else goto c9LsE;
       c9LsF: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LsE: // global
           I64[Hp - 64] = sat_s9FHG_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9FHx_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9LsA_info;
           R2 = Hp - 63;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lqe_info" {
     block_c9Lqe_info:
         const _c9Lqe;
         const 2;
         const 30;
 },
 _c9LsA() //  [R1]
         { []
         }
     {offset
       c9LsA: // global
           I64[Sp + 16] = block_c9LsL_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LsA_info" {
     block_c9LsA_info:
         const _c9LsA;
         const 130;
         const 30;
 },
 _c9LsL() //  []
         { []
         }
     {offset
       c9LsL: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LsL_info" {
     block_c9LsL_info:
         const _c9LsL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.69149953 UTC

[section ""data" . GHC.Conc.Sync.modifyMVar_1_closure" {
     GHC.Conc.Sync.modifyMVar_1_closure:
         const GHC.Conc.Sync.modifyMVar_1_info;
 },
 GHC.Conc.Sync.modifyMVar_1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LuN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LuO; else goto c9LuP;
       c9LuO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.modifyMVar_1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9LuP: // global
           I64[Sp - 16] = block_c9LuK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9LuT; else goto c9LuL;
       u9LuT: // global
           call _c9LuK(R1) args: 0, res: 0, upd: 0;
       c9LuL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.modifyMVar_1_info" {
     GHC.Conc.Sync.modifyMVar_1_info:
         const GHC.Conc.Sync.modifyMVar_1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9LuK() //  [R1]
         { []
         }
     {offset
       c9LuK: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Conc.Sync.$wmodifyMVar__entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LuK_info" {
     block_c9LuK_info:
         const _c9LuK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.696423414 UTC

[section ""data" . GHC.Conc.Sync.modifyMVar__closure" {
     GHC.Conc.Sync.modifyMVar__closure:
         const GHC.Conc.Sync.modifyMVar__info;
 },
 GHC.Conc.Sync.modifyMVar__entry() //  [R2, R3]
         { []
         }
     {offset
       c9Lv7: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.modifyMVar_1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.modifyMVar__info" {
     GHC.Conc.Sync.modifyMVar__info:
         const GHC.Conc.Sync.modifyMVar__entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.708931974 UTC

[section ""data" . GHC.Conc.Sync.$wwithMVar_closure" {
     GHC.Conc.Sync.$wwithMVar_closure:
         const GHC.Conc.Sync.$wwithMVar_info;
 },
 sat_s9FIL_entry() //  [R1]
         { []
         }
     {offset
       c9LvF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9LvG; else goto c9LvH;
       c9LvG: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LvH: // global
           I64[Sp - 24] = block_c9LvD_info;
           R2 = P64[R1 + 15];
           _s9FIG::P64 = P64[R1 + 23];
           _s9FIH::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9FIG::P64;
           P64[Sp - 8] = _s9FIH::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FIL_info" {
     sat_s9FIL_info:
         const sat_s9FIL_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9LvD() //  []
         { []
         }
     {offset
       c9LvD: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LvD_info" {
     block_c9LvD_info:
         const _c9LvD;
         const 2;
         const 30;
 },
 sat_s9FIM_entry() //  [R1, R2]
         { []
         }
     {offset
       c9LvJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9LvK; else goto c9LvL;
       c9LvK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LvL: // global
           I64[Sp - 24] = block_c9Lvt_info;
           _s9FIs::P64 = P64[R1 + 7];
           _s9FIB::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9FIs::P64;
           P64[Sp - 8] = _s9FIB::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9LvP; else goto c9Lvu;
       u9LvP: // global
           call _c9Lvt(R1) args: 0, res: 0, upd: 0;
       c9Lvu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FIM_info" {
     sat_s9FIM_info:
         const sat_s9FIM_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9Lvt() //  [R1]
         { []
         }
     {offset
       c9Lvt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9LvO; else goto c9LvN;
       c9LvO: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LvN: // global
           _s9FIG::P64 = P64[R1 + 7];
           _s9FIH::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9FIL_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9FIG::P64;
           P64[Hp] = _s9FIH::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lvt_info" {
     block_c9Lvt_info:
         const _c9Lvt;
         const 2;
         const 30;
 },
 sat_s9FID_entry() //  [R1]
         { []
         }
     {offset
       c9LvW: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FID_info" {
     sat_s9FID_info:
         const sat_s9FID_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9FJ4_entry() //  [R1]
         { []
         }
     {offset
       c9Lwo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lwp; else goto c9Lwq;
       c9Lwp: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Lwq: // global
           I64[Sp - 24] = block_c9Lwm_info;
           R2 = P64[R1 + 15];
           _s9FIZ::P64 = P64[R1 + 23];
           _s9FJ0::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9FIZ::P64;
           P64[Sp - 8] = _s9FJ0::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FJ4_info" {
     sat_s9FJ4_info:
         const sat_s9FJ4_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9Lwm() //  []
         { []
         }
     {offset
       c9Lwm: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lwm_info" {
     block_c9Lwm_info:
         const _c9Lwm;
         const 2;
         const 30;
 },
 sat_s9FJ5_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Lws: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lwt; else goto c9Lwu;
       c9Lwt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Lwu: // global
           I64[Sp - 24] = block_c9Lwc_info;
           _s9FIs::P64 = P64[R1 + 7];
           _s9FIU::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9FIs::P64;
           P64[Sp - 8] = _s9FIU::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Lwy; else goto c9Lwd;
       u9Lwy: // global
           call _c9Lwc(R1) args: 0, res: 0, upd: 0;
       c9Lwd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FJ5_info" {
     sat_s9FJ5_info:
         const sat_s9FJ5_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9Lwc() //  [R1]
         { []
         }
     {offset
       c9Lwc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Lwx; else goto c9Lww;
       c9Lwx: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Lww: // global
           _s9FIZ::P64 = P64[R1 + 7];
           _s9FJ0::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9FJ4_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9FIZ::P64;
           P64[Hp] = _s9FJ0::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lwc_info" {
     block_c9Lwc_info:
         const _c9Lwc;
         const 2;
         const 30;
 },
 sat_s9FIW_entry() //  [R1]
         { []
         }
     {offset
       c9LwF: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FIW_info" {
     sat_s9FIW_info:
         const sat_s9FIW_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9FJa_entry() //  [R1]
         { []
         }
     {offset
       c9LwM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9LwN; else goto c9LwO;
       c9LwN: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LwO: // global
           I64[Sp - 24] = block_c9Lw5_info;
           _s9FIs::P64 = P64[R1 + 7];
           _s9FIt::P64 = P64[R1 + 15];
           R1 = _s9FIs::P64;
           P64[Sp - 16] = _s9FIs::P64;
           P64[Sp - 8] = _s9FIt::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FJa_info" {
     sat_s9FJa_info:
         const sat_s9FJa_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c9Lw5() //  [R1]
         { []
         }
     {offset
       c9Lw5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9LwR; else goto c9LwQ;
       c9LwR: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LwQ: // global
           I64[Hp - 64] = sat_s9FJ5_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9FIW_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9LwI_info;
           R2 = Hp - 63;
           _s9FIU::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9FIU::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lw5_info" {
     block_c9Lw5_info:
         const _c9Lw5;
         const 2;
         const 30;
 },
 _c9LwI() //  [R1]
         { []
         }
     {offset
       c9LwI: // global
           _s9FIs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9LwK_info;
           R2 = P64[Sp + 16];
           _s9FJ8::P64 = R1;
           R1 = _s9FIs::P64;
           P64[Sp + 16] = _s9FJ8::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LwI_info" {
     block_c9LwI_info:
         const _c9LwI;
         const 2;
         const 30;
 },
 _c9LwK() //  []
         { []
         }
     {offset
       c9LwK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LwK_info" {
     block_c9LwK_info:
         const _c9LwK;
         const 1;
         const 30;
 },
 sat_s9FJn_entry() //  [R1]
         { []
         }
     {offset
       c9Lxe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lxf; else goto c9Lxg;
       c9Lxf: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Lxg: // global
           I64[Sp - 24] = block_c9Lxc_info;
           R2 = P64[R1 + 15];
           _s9FJi::P64 = P64[R1 + 23];
           _s9FJj::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9FJi::P64;
           P64[Sp - 8] = _s9FJj::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FJn_info" {
     sat_s9FJn_info:
         const sat_s9FJn_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9Lxc() //  []
         { []
         }
     {offset
       c9Lxc: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lxc_info" {
     block_c9Lxc_info:
         const _c9Lxc;
         const 2;
         const 30;
 },
 sat_s9FJo_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Lxi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Lxj; else goto c9Lxk;
       c9Lxj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Lxk: // global
           I64[Sp - 24] = block_c9Lx2_info;
           _s9FIs::P64 = P64[R1 + 7];
           _s9FJd::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9FIs::P64;
           P64[Sp - 8] = _s9FJd::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Lxo; else goto c9Lx3;
       u9Lxo: // global
           call _c9Lx2(R1) args: 0, res: 0, upd: 0;
       c9Lx3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FJo_info" {
     sat_s9FJo_info:
         const sat_s9FJo_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9Lx2() //  [R1]
         { []
         }
     {offset
       c9Lx2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Lxn; else goto c9Lxm;
       c9Lxn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Lxm: // global
           _s9FJi::P64 = P64[R1 + 7];
           _s9FJj::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9FJn_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9FJi::P64;
           P64[Hp] = _s9FJj::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lx2_info" {
     block_c9Lx2_info:
         const _c9Lx2;
         const 2;
         const 30;
 },
 sat_s9FJf_entry() //  [R1]
         { []
         }
     {offset
       c9Lxv: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FJf_info" {
     sat_s9FJf_info:
         const sat_s9FJf_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Conc.Sync.$wwithMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LxC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9LxD; else goto c9LxE;
       c9LxD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$wwithMVar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9LxE: // global
           I64[Sp - 24] = block_c9Lvi_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$wwithMVar_info" {
     GHC.Conc.Sync.$wwithMVar_info:
         const GHC.Conc.Sync.$wwithMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Lvi() //  [R1]
         { []
         }
     {offset
       c9Lvi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9LxH; else goto c9LxG;
       c9LxH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9LxG: // global
           _s9FIs::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9LxA; else goto u9Ly0;
       c9LxA: // global
           I64[Hp - 16] = sat_s9FJa_info;
           P64[Hp - 8] = _s9FIs::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9Ly0: // global
           if (R1 == 1) goto c9LxB; else goto c9Lxz;
       c9LxB: // global
           Hp = Hp - 24;
           I64[Sp] = block_c9LwV_info;
           R1 = _s9FIs::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       c9Lxz: // global
           Hp = Hp - 24;
           I64[Sp] = block_c9Lvm_info;
           R1 = _s9FIs::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lvi_info" {
     block_c9Lvi_info:
         const _c9Lvi;
         const 2;
         const 30;
 },
 _c9LwV() //  [R1]
         { []
         }
     {offset
       c9LwV: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9LxW; else goto c9LxV;
       c9LxW: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LxV: // global
           I64[Hp - 64] = sat_s9FJo_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9FJf_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9LxR_info;
           R2 = Hp - 63;
           _s9FJd::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9FJd::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LwV_info" {
     block_c9LwV_info:
         const _c9LwV;
         const 2;
         const 30;
 },
 _c9LxR() //  [R1]
         { []
         }
     {offset
       c9LxR: // global
           _s9FIs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9LxT_info;
           R2 = P64[Sp + 16];
           _s9FJr::P64 = R1;
           R1 = _s9FIs::P64;
           P64[Sp + 16] = _s9FJr::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LxR_info" {
     block_c9LxR_info:
         const _c9LxR;
         const 2;
         const 30;
 },
 _c9LxT() //  []
         { []
         }
     {offset
       c9LxT: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LxT_info" {
     block_c9LxT_info:
         const _c9LxT;
         const 1;
         const 30;
 },
 _c9Lvm() //  [R1]
         { []
         }
     {offset
       c9Lvm: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9LxN; else goto c9LxM;
       c9LxN: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LxM: // global
           I64[Hp - 64] = sat_s9FIM_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9FID_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9LxI_info;
           R2 = Hp - 63;
           _s9FIB::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9FIB::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Lvm_info" {
     block_c9Lvm_info:
         const _c9Lvm;
         const 2;
         const 30;
 },
 _c9LxI() //  [R1]
         { []
         }
     {offset
       c9LxI: // global
           _s9FIs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9LxK_info;
           R2 = P64[Sp + 16];
           _s9FIP::P64 = R1;
           R1 = _s9FIs::P64;
           P64[Sp + 16] = _s9FIP::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LxI_info" {
     block_c9LxI_info:
         const _c9LxI;
         const 2;
         const 30;
 },
 _c9LxK() //  []
         { []
         }
     {offset
       c9LxK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LxK_info" {
     block_c9LxK_info:
         const _c9LxK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.755085588 UTC

[section ""data" . GHC.Conc.Sync.withMVar1_closure" {
     GHC.Conc.Sync.withMVar1_closure:
         const GHC.Conc.Sync.withMVar1_info;
 },
 GHC.Conc.Sync.withMVar1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LzZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LA0; else goto c9LA1;
       c9LA0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.withMVar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9LA1: // global
           I64[Sp - 16] = block_c9LzW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9LA5; else goto c9LzX;
       u9LA5: // global
           call _c9LzW(R1) args: 0, res: 0, upd: 0;
       c9LzX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.withMVar1_info" {
     GHC.Conc.Sync.withMVar1_info:
         const GHC.Conc.Sync.withMVar1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9LzW() //  [R1]
         { []
         }
     {offset
       c9LzW: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Conc.Sync.$wwithMVar_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LzW_info" {
     block_c9LzW_info:
         const _c9LzW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.760059042 UTC

[section ""data" . GHC.Conc.Sync.withMVar_closure" {
     GHC.Conc.Sync.withMVar_closure:
         const GHC.Conc.Sync.withMVar_info;
 },
 GHC.Conc.Sync.withMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LAj: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.withMVar1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.withMVar_info" {
     GHC.Conc.Sync.withMVar_info:
         const GHC.Conc.Sync.withMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.763362288 UTC

[section ""data" . GHC.Conc.Sync.reportStackOverflow1_closure" {
     GHC.Conc.Sync.reportStackOverflow1_closure:
         const GHC.Conc.Sync.reportStackOverflow1_info;
 },
 GHC.Conc.Sync.reportStackOverflow1_entry() //  []
         { []
         }
     {offset
       c9LAw: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] reportStackOverflow(CurrentTSO);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.reportStackOverflow1_info" {
     GHC.Conc.Sync.reportStackOverflow1_info:
         const GHC.Conc.Sync.reportStackOverflow1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.766623947 UTC

[section ""data" . GHC.Conc.Sync.reportStackOverflow_closure" {
     GHC.Conc.Sync.reportStackOverflow_closure:
         const GHC.Conc.Sync.reportStackOverflow_info;
 },
 GHC.Conc.Sync.reportStackOverflow_entry() //  []
         { []
         }
     {offset
       c9LAI: // global
           call GHC.Conc.Sync.reportStackOverflow1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.reportStackOverflow_info" {
     GHC.Conc.Sync.reportStackOverflow_info:
         const GHC.Conc.Sync.reportStackOverflow_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.778193538 UTC

[section ""data" . GHC.Conc.Sync.forkIO2_closure" {
     GHC.Conc.Sync.forkIO2_closure:
         const GHC.Conc.Sync.forkIO2_info;
         const 0;
 },
 GHC.Conc.Sync.forkIO2_entry() //  [R2]
         { []
         }
     {offset
       c9LAT: // global
           R2 = R2;
           call GHC.Conc.Sync.childHandler1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkIO2_info" {
     GHC.Conc.Sync.forkIO2_info:
         const GHC.Conc.Sync.forkIO2_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9FOI_srt+304;
 },
 section ""data" . GHC.Conc.Sync.childHandler1_closure" {
     GHC.Conc.Sync.childHandler1_closure:
         const GHC.Conc.Sync.childHandler1_info;
         const 0;
 },
 sat_s9FK0_entry() //  [R1]
         { []
         }
     {offset
       c9LBO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LBP; else goto c9LBQ;
       c9LBP: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LBQ: // global
           I64[Sp - 16] = block_c9LBL_info;
           _s9FJJ::P64 = P64[R1 + 7];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 8] = _s9FJJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9LBU; else goto c9LBM;
       u9LBU: // global
           call _c9LBL(R1) args: 0, res: 0, upd: 0;
       c9LBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FK0_info" {
     sat_s9FK0_info:
         const sat_s9FK0_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9FOI_srt+272;
 },
 _c9LBL() //  [R1]
         { []
         }
     {offset
       c9LBL: // global
           R2 = P64[Sp + 8];
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LBL_info" {
     block_c9LBL_info:
         const _c9LBL;
         const 1;
         const 30;
 },
 sat_s9FKc_entry() //  [R1]
         { []
         }
     {offset
       c9LCh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LCi; else goto c9LCj;
       c9LCi: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LCj: // global
           I64[Sp - 16] = block_c9LCe_info;
           _s9FJJ::P64 = P64[R1 + 7];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 8] = _s9FJJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9LCn; else goto c9LCf;
       u9LCn: // global
           call _c9LCe(R1) args: 0, res: 0, upd: 0;
       c9LCf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FKc_info" {
     sat_s9FKc_info:
         const sat_s9FKc_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9FOI_srt+272;
 },
 _c9LCe() //  [R1]
         { []
         }
     {offset
       c9LCe: // global
           R2 = P64[Sp + 8];
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LCe_info" {
     block_c9LCe_info:
         const _c9LCe;
         const 1;
         const 30;
 },
 sat_s9FKk_entry() //  [R1]
         { []
         }
     {offset
       c9LCC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LCD; else goto c9LCE;
       c9LCD: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LCE: // global
           I64[Sp - 16] = block_c9LCz_info;
           _s9FJJ::P64 = P64[R1 + 7];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 8] = _s9FJJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9LCI; else goto c9LCA;
       u9LCI: // global
           call _c9LCz(R1) args: 0, res: 0, upd: 0;
       c9LCA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FKk_info" {
     sat_s9FKk_info:
         const sat_s9FKk_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9FOI_srt+272;
 },
 _c9LCz() //  [R1]
         { []
         }
     {offset
       c9LCz: // global
           R2 = P64[Sp + 8];
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LCz_info" {
     block_c9LCz_info:
         const _c9LCz;
         const 1;
         const 30;
 },
 sat_s9FKv_entry() //  [R1]
         { []
         }
     {offset
       c9LCJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9LCK; else goto c9LCL;
       c9LCK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9LCL: // global
           I64[Sp - 8] = block_c9LB4_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9LEx; else goto c9LB5;
       u9LEx: // global
           call _c9LB4(R1) args: 0, res: 0, upd: 0;
       c9LB5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FKv_info" {
     sat_s9FKv_info:
         const sat_s9FKv_entry;
         const 1;
         const 528869387927568;
         const S9FOI_srt+208;
 },
 _c9LB4() //  [R1]
         { []
         }
     {offset
       c9LB4: // global
           I64[Sp - 24] = block_c9LB9_info;
           _s9FJK::P64 = P64[R1 + 7];
           R2 = _s9FJK::P64;
           P64[Sp - 16] = _s9FJK::P64;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 24;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LB4_info" {
     block_c9LB4_info:
         const _c9LB4;
         const 0;
         const 528869387927582;
         const S9FOI_srt+208;
 },
 _c9LB9() //  [R1]
         { []
         }
     {offset
       c9LB9: // global
           I64[Sp] = block_c9LBd_info;
           R3 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LB9_info" {
     block_c9LB9_info:
         const _c9LB9;
         const 3;
         const 528869387927582;
         const S9FOI_srt+208;
 },
 _c9LBd() //  [R1]
         { []
         }
     {offset
       c9LBd: // global
           if (R1 & 7 == 1) goto c9LCQ; else goto c9LEh;
       c9LCQ: // global
           I64[Sp] = block_c9LBh_info;
           R2 = P64[Sp + 8];
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
       c9LEh: // global
           I64[Sp + 24] = block_c9LEf_info;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LBd_info" {
     block_c9LBd_info:
         const _c9LBd;
         const 3;
         const 388131899572254;
         const S9FOI_srt+208;
 },
 _c9LBh() //  [R1]
         { []
         }
     {offset
       c9LBh: // global
           I64[Sp] = block_c9LBl_info;
           R3 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LBh_info" {
     block_c9LBh_info:
         const _c9LBh;
         const 3;
         const 388131899572254;
         const S9FOI_srt+208;
 },
 _c9LBl() //  [R1]
         { []
         }
     {offset
       c9LBl: // global
           if (R1 & 7 == 1) goto c9LCU; else goto c9LE8;
       c9LCU: // global
           I64[Sp] = block_c9LBp_info;
           R2 = P64[Sp + 8];
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
       c9LE8: // global
           I64[Sp + 24] = block_c9LE6_info;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LBl_info" {
     block_c9LBl_info:
         const _c9LBl;
         const 3;
         const 106656922861598;
         const S9FOI_srt+208;
 },
 _c9LBp() //  [R1]
         { []
         }
     {offset
       c9LBp: // global
           I64[Sp] = block_c9LCV_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LBp_info" {
     block_c9LBp_info:
         const _c9LBp;
         const 3;
         const 106656922861598;
         const S9FOI_srt+208;
 },
 _c9LCV() //  [R1]
         { []
         }
     {offset
       c9LCV: // global
           if (R1 & 7 == 1) goto u9LEu; else goto c9LDC;
       u9LEu: // global
           Sp = Sp + 8;
           call _s9FJQ() args: 0, res: 0, upd: 0;
       c9LDC: // global
           I64[Sp] = block_c9LDw_info;
           R1 = P64[Sp + 16];
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LCV_info" {
     block_c9LCV_info:
         const _c9LCV;
         const 3;
         const 106656922861598;
         const S9FOI_srt+208;
 },
 _c9LDw() //  [R1]
         { []
         }
     {offset
       c9LDw: // global
           I64[Sp - 8] = block_c9LDA_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LDw_info" {
     block_c9LDw_info:
         const _c9LDw;
         const 3;
         const 106656922861598;
         const S9FOI_srt+208;
 },
 _c9LDA() //  [R1]
         { []
         }
     {offset
       c9LDA: // global
           I64[Sp] = block_c9LDH_info;
           R3 = GHC.IO.Exception.$fExceptionAsyncException9_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LDA_info" {
     block_c9LDA_info:
         const _c9LDA;
         const 4;
         const 106656922861598;
         const S9FOI_srt+208;
 },
 _c9LDH() //  [R1]
         { []
         }
     {offset
       c9LDH: // global
           if (R1 & 7 == 1) goto u9LEv; else goto c9LDT;
       u9LEv: // global
           Sp = Sp + 16;
           call _s9FJQ() args: 0, res: 0, upd: 0;
       c9LDT: // global
           _s9FKp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9LDR_info;
           R1 = _s9FKp::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LDH_info" {
     block_c9LDH_info:
         const _c9LDH;
         const 4;
         const 106656922861598;
         const S9FOI_srt+208;
 },
 _c9LDR() //  [R1]
         { []
         }
     {offset
       c9LDR: // global
           if (R1 & 7 == 3) goto c9LE3; else goto u9LEw;
       c9LE3: // global
           R1 = GHC.Conc.Sync.always2_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9LEw: // global
           Sp = Sp + 8;
           call _s9FJQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9LDR_info" {
     block_c9LDR_info:
         const _c9LDR;
         const 3;
         const 106656922861598;
         const S9FOI_srt+208;
 },
 _s9FJQ() //  []
         { []
         }
     {offset
       s9FJQ: // global
           _s9FJK::P64 = P64[Sp];
           I64[Sp] = block_c9LBy_info;
           R2 = _s9FJK::P64;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9LBy() //  [R1]
         { []
         }
     {offset
       c9LBy: // global
           I64[Sp] = block_c9LBC_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LBy_info" {
     block_c9LBy_info:
         const _c9LBy;
         const 2;
         const 106656922861598;
         const S9FOI_srt+208;
 },
 _c9LBC() //  [R1]
         { []
         }
     {offset
       c9LBC: // global
           if (R1 & 7 == 1) goto c9LD0; else goto c9LD5;
       c9LD0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LD3; else goto c9LD2;
       c9LD3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LD2: // global
           I64[Hp - 8] = sat_s9FK0_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9LD5: // global
           _s9FJL::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9LBX_info;
           R1 = _s9FJL::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LBC_info" {
     block_c9LBC_info:
         const _c9LBC;
         const 2;
         const 71472550772766;
         const S9FOI_srt+208;
 },
 _c9LBX() //  [R1]
         { []
         }
     {offset
       c9LBX: // global
           I64[Sp - 8] = block_c9LC1_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LBX_info" {
     block_c9LBX_info:
         const _c9LBX;
         const 1;
         const 71472550772766;
         const S9FOI_srt+208;
 },
 _c9LC1() //  [R1]
         { []
         }
     {offset
       c9LC1: // global
           I64[Sp] = block_c9LC5_info;
           R3 = GHC.IO.Exception.$fExceptionAsyncException9_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LC1_info" {
     block_c9LC1_info:
         const _c9LC1;
         const 2;
         const 71472550772766;
         const S9FOI_srt+208;
 },
 _c9LC5() //  [R1]
         { []
         }
     {offset
       c9LC5: // global
           if (R1 & 7 == 1) goto c9LD9; else goto c9LDe;
       c9LD9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LDc; else goto c9LDb;
       c9LDc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LDb: // global
           I64[Hp - 8] = sat_s9FKc_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9LDe: // global
           _s9FK3::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9LCq_info;
           R1 = _s9FK3::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LC5_info" {
     block_c9LC5_info:
         const _c9LC5;
         const 2;
         const 4294967326;
         const S9FOI_srt+272;
 },
 _c9LCq() //  [R1]
         { []
         }
     {offset
       c9LCq: // global
           if (R1 & 7 == 1) goto c9LDn; else goto c9LDg;
       c9LDn: // global
           R1 = GHC.Conc.Sync.reportStackOverflow1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9LDg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LDj; else goto c9LDi;
       c9LDj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LDi: // global
           I64[Hp - 8] = sat_s9FKk_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LCq_info" {
     block_c9LCq_info:
         const _c9LCq;
         const 1;
         const 4294967326;
         const S9FOI_srt+272;
 },
 _c9LE6() //  []
         { []
         }
     {offset
       c9LE6: // global
           R1 = GHC.Conc.Sync.always2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LE6_info" {
     block_c9LE6_info:
         const _c9LE6;
         const 0;
         const 30;
 },
 _c9LEf() //  []
         { []
         }
     {offset
       c9LEf: // global
           R1 = GHC.Conc.Sync.always2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LEf_info" {
     block_c9LEf_info:
         const _c9LEf;
         const 0;
         const 30;
 },
 GHC.Conc.Sync.childHandler1_entry() //  [R2]
         { []
         }
     {offset
       c9LEB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9LEF; else goto c9LEE;
       c9LEF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Conc.Sync.childHandler1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LEE: // global
           I64[Hp - 16] = sat_s9FKv_info;
           P64[Hp] = R2;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.childHandler1_info" {
     GHC.Conc.Sync.childHandler1_info:
         const GHC.Conc.Sync.childHandler1_entry;
         const 0;
         const 1109411527393294;
         const 8589934597;
         const S9FOI_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.824452322 UTC

[section ""data" . GHC.Conc.Sync.childHandler_closure" {
     GHC.Conc.Sync.childHandler_closure:
         const GHC.Conc.Sync.childHandler_info;
         const 0;
 },
 GHC.Conc.Sync.childHandler_entry() //  [R2]
         { []
         }
     {offset
       c9LGO: // global
           R2 = R2;
           call GHC.Conc.Sync.childHandler1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.childHandler_info" {
     GHC.Conc.Sync.childHandler_info:
         const GHC.Conc.Sync.childHandler_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9FOI_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.829389126 UTC

[section ""data" . GHC.Conc.Sync.forkOn1_closure" {
     GHC.Conc.Sync.forkOn1_closure:
         const GHC.Conc.Sync.forkOn1_info;
         const 0;
 },
 sat_s9FKC_entry() //  [R1]
         { []
         }
     {offset
       c9LH9: // global
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = P64[R1 + 7];
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FKC_info" {
     sat_s9FKC_info:
         const sat_s9FKC_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9FOI_srt+344;
 },
 GHC.Conc.Sync.forkOn1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LHc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LHg; else goto c9LHh;
       c9LHg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.forkOn1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9LHh: // global
           I64[Sp - 16] = block_c9LGZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9LHo; else goto c9LH0;
       u9LHo: // global
           call _c9LGZ(R1) args: 0, res: 0, upd: 0;
       c9LH0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkOn1_info" {
     GHC.Conc.Sync.forkOn1_info:
         const GHC.Conc.Sync.forkOn1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S9FOI_srt+344;
 },
 _c9LGZ() //  [R1]
         { []
         }
     {offset
       c9LGZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LHk; else goto c9LHj;
       c9LHk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LHj: // global
           _s9FKA::I64 = I64[R1 + 7];
           I64[Hp - 8] = sat_s9FKC_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9LHd_info;
           R2 = Hp - 7;
           R1 = _s9FKA::I64;
           Sp = Sp + 8;
           call stg_forkOn#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LGZ_info" {
     block_c9LGZ_info:
         const _c9LGZ;
         const 1;
         const 4294967326;
         const S9FOI_srt+344;
 },
 _c9LHd() //  [R1]
         { []
         }
     {offset
       c9LHd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LHn; else goto c9LHm;
       c9LHn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LHm: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LHd_info" {
     block_c9LHd_info:
         const _c9LHd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.83931078 UTC

[section ""data" . GHC.Conc.Sync.forkOn_closure" {
     GHC.Conc.Sync.forkOn_closure:
         const GHC.Conc.Sync.forkOn_info;
         const 0;
 },
 GHC.Conc.Sync.forkOn_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LHK: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.forkOn1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkOn_info" {
     GHC.Conc.Sync.forkOn_info:
         const GHC.Conc.Sync.forkOn_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S9FOI_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.844971352 UTC

[section ""data" . GHC.Conc.Sync.forkOnWithUnmask1_closure" {
     GHC.Conc.Sync.forkOnWithUnmask1_closure:
         const GHC.Conc.Sync.forkOnWithUnmask1_info;
         const 0;
 },
 sat_s9FKN_entry() //  [R2]
         { []
         }
     {offset
       c9LIe: // global
           R1 = R2;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FKN_info" {
     sat_s9FKN_info:
         const sat_s9FKN_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s9FKO_entry() //  [R1]
         { []
         }
     {offset
       c9LIh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LIl; else goto c9LIk;
       c9LIl: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9LIk: // global
           _s9FKI::P64 = P64[R1 + 16];
           I64[Hp - 8] = sat_s9FKN_info;
           R2 = Hp - 6;
           R1 = _s9FKI::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FKO_info" {
     sat_s9FKO_info:
         const sat_s9FKO_entry;
         const 1;
         const 16;
 },
 sat_s9FKP_entry() //  [R1]
         { []
         }
     {offset
       c9LIm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9LIq; else goto c9LIp;
       c9LIq: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LIp: // global
           _s9FKI::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9FKO_info;
           P64[Hp] = _s9FKI::P64;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FKP_info" {
     sat_s9FKP_info:
         const sat_s9FKP_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9FOI_srt+344;
 },
 GHC.Conc.Sync.forkOnWithUnmask1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LIr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LIv; else goto c9LIw;
       c9LIv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.forkOnWithUnmask1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9LIw: // global
           I64[Sp - 16] = block_c9LHV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9LID; else goto c9LHW;
       u9LID: // global
           call _c9LHV(R1) args: 0, res: 0, upd: 0;
       c9LHW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkOnWithUnmask1_info" {
     GHC.Conc.Sync.forkOnWithUnmask1_info:
         const GHC.Conc.Sync.forkOnWithUnmask1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const S9FOI_srt+344;
 },
 _c9LHV() //  [R1]
         { []
         }
     {offset
       c9LHV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LIz; else goto c9LIy;
       c9LIz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LIy: // global
           _s9FKL::I64 = I64[R1 + 7];
           I64[Hp - 8] = sat_s9FKP_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9LIs_info;
           R2 = Hp - 7;
           R1 = _s9FKL::I64;
           Sp = Sp + 8;
           call stg_forkOn#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LHV_info" {
     block_c9LHV_info:
         const _c9LHV;
         const 1;
         const 4294967326;
         const S9FOI_srt+344;
 },
 _c9LIs() //  [R1]
         { []
         }
     {offset
       c9LIs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LIC; else goto c9LIB;
       c9LIC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LIB: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LIs_info" {
     block_c9LIs_info:
         const _c9LIs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.857850725 UTC

[section ""data" . GHC.Conc.Sync.forkOnWithUnmask_closure" {
     GHC.Conc.Sync.forkOnWithUnmask_closure:
         const GHC.Conc.Sync.forkOnWithUnmask_info;
         const 0;
 },
 GHC.Conc.Sync.forkOnWithUnmask_entry() //  [R2, R3]
         { []
         }
     {offset
       c9LJ5: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.forkOnWithUnmask1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkOnWithUnmask_info" {
     GHC.Conc.Sync.forkOnWithUnmask_info:
         const GHC.Conc.Sync.forkOnWithUnmask_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S9FOI_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.862075272 UTC

[section ""data" . GHC.Conc.Sync.forkIO1_closure" {
     GHC.Conc.Sync.forkIO1_closure:
         const GHC.Conc.Sync.forkIO1_info;
         const 0;
 },
 sat_s9FKX_entry() //  [R1]
         { []
         }
     {offset
       c9LJl: // global
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = P64[R1 + 7];
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FKX_info" {
     sat_s9FKX_info:
         const sat_s9FKX_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9FOI_srt+344;
 },
 GHC.Conc.Sync.forkIO1_entry() //  [R2]
         { []
         }
     {offset
       c9LJr: // global
           _s9FKU::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9LJs; else goto c9LJt;
       c9LJt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LJv; else goto c9LJu;
       c9LJv: // global
           HpAlloc = 16;
           goto c9LJs;
       c9LJs: // global
           R2 = _s9FKU::P64;
           R1 = GHC.Conc.Sync.forkIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LJu: // global
           I64[Hp - 8] = sat_s9FKX_info;
           P64[Hp] = _s9FKU::P64;
           I64[Sp - 8] = block_c9LJo_info;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call stg_fork#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkIO1_info" {
     GHC.Conc.Sync.forkIO1_info:
         const GHC.Conc.Sync.forkIO1_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const S9FOI_srt+344;
 },
 _c9LJo() //  [R1]
         { []
         }
     {offset
       c9LJo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LJy; else goto c9LJx;
       c9LJy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LJx: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LJo_info" {
     block_c9LJo_info:
         const _c9LJo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.868766377 UTC

[section ""data" . GHC.Conc.Sync.forkIO_closure" {
     GHC.Conc.Sync.forkIO_closure:
         const GHC.Conc.Sync.forkIO_info;
         const 0;
 },
 GHC.Conc.Sync.forkIO_entry() //  [R2]
         { []
         }
     {offset
       c9LJP: // global
           R2 = R2;
           call GHC.Conc.Sync.forkIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkIO_info" {
     GHC.Conc.Sync.forkIO_info:
         const GHC.Conc.Sync.forkIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9FOI_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.873856386 UTC

[section ""data" . GHC.Conc.Sync.forkIOWithUnmask1_closure" {
     GHC.Conc.Sync.forkIOWithUnmask1_closure:
         const GHC.Conc.Sync.forkIOWithUnmask1_info;
         const 0;
 },
 sat_s9FL5_entry() //  [R2]
         { []
         }
     {offset
       c9LKe: // global
           R1 = R2;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FL5_info" {
     sat_s9FL5_info:
         const sat_s9FL5_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s9FL6_entry() //  [R1]
         { []
         }
     {offset
       c9LKh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LKl; else goto c9LKk;
       c9LKl: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9LKk: // global
           _s9FL2::P64 = P64[R1 + 16];
           I64[Hp - 8] = sat_s9FL5_info;
           R2 = Hp - 6;
           R1 = _s9FL2::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FL6_info" {
     sat_s9FL6_info:
         const sat_s9FL6_entry;
         const 1;
         const 16;
 },
 sat_s9FL7_entry() //  [R1]
         { []
         }
     {offset
       c9LKm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9LKq; else goto c9LKp;
       c9LKq: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LKp: // global
           _s9FL2::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9FL6_info;
           P64[Hp] = _s9FL2::P64;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9FL7_info" {
     sat_s9FL7_info:
         const sat_s9FL7_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9FOI_srt+344;
 },
 GHC.Conc.Sync.forkIOWithUnmask1_entry() //  [R2]
         { []
         }
     {offset
       c9LKu: // global
           _s9FL2::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9LKv; else goto c9LKw;
       c9LKw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LKy; else goto c9LKx;
       c9LKy: // global
           HpAlloc = 16;
           goto c9LKv;
       c9LKv: // global
           R2 = _s9FL2::P64;
           R1 = GHC.Conc.Sync.forkIOWithUnmask1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LKx: // global
           I64[Hp - 8] = sat_s9FL7_info;
           P64[Hp] = _s9FL2::P64;
           I64[Sp - 8] = block_c9LKr_info;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call stg_fork#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkIOWithUnmask1_info" {
     GHC.Conc.Sync.forkIOWithUnmask1_info:
         const GHC.Conc.Sync.forkIOWithUnmask1_entry;
         const 0;
         const 73014444046;
         const 8589934597;
         const S9FOI_srt+344;
 },
 _c9LKr() //  [R1]
         { []
         }
     {offset
       c9LKr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LKB; else goto c9LKA;
       c9LKB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9LKA: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LKr_info" {
     block_c9LKr_info:
         const _c9LKr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.883745408 UTC

[section ""data" . GHC.Conc.Sync.forkIOWithUnmask_closure" {
     GHC.Conc.Sync.forkIOWithUnmask_closure:
         const GHC.Conc.Sync.forkIOWithUnmask_info;
         const 0;
 },
 GHC.Conc.Sync.forkIOWithUnmask_entry() //  [R2]
         { []
         }
     {offset
       c9LKY: // global
           R2 = R2;
           call GHC.Conc.Sync.forkIOWithUnmask1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkIOWithUnmask_info" {
     GHC.Conc.Sync.forkIOWithUnmask_info:
         const GHC.Conc.Sync.forkIOWithUnmask_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9FOI_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.88671851 UTC

[section ""cstring" . lvl11_r9Fvm_bytes" {
     lvl11_r9Fvm_bytes:
         I8[] [115,101,116,78,117,109,67,97,112,97,98,105,108,105,116,105,101,115,58,32,67,97,112,97,98,105,108,105,116,121,32,99,111,117,110,116,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.88896275 UTC

[section ""cstring" . lvl12_r9Fvn_bytes" {
     lvl12_r9Fvn_bytes:
         I8[] [41,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.891046376 UTC

[section ""data" . lvl13_r9Fvo_closure" {
     lvl13_r9Fvo_closure:
         const lvl13_r9Fvo_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r9Fvo_entry() //  [R1]
         { []
         }
     {offset
       c9LLd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LLe; else goto c9LLf;
       c9LLe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9LLf: // global
           (_c9LLa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9LLa::I64 == 0) goto c9LLc; else goto c9LLb;
       c9LLc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9LLb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9LLa::I64;
           R2 = lvl12_r9Fvn_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_r9Fvo_info" {
     lvl13_r9Fvo_info:
         const lvl13_r9Fvo_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.896123462 UTC

[section ""data" . GHC.Conc.Sync.$wlvl_closure" {
     GHC.Conc.Sync.$wlvl_closure:
         const GHC.Conc.Sync.$wlvl_info;
         const 0;
 },
 sat_s9FLi_entry() //  [R1]
         { []
         }
     {offset
       c9LLy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9LLz; else goto c9LLA;
       c9LLz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9LLA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9LLv_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9FLi_info" {
     sat_s9FLi_info:
         const sat_s9FLi_entry;
         const 4294967296;
         const 4294967313;
         const S9FOI_srt+384;
 },
 _c9LLv() //  [R1, R2]
         { []
         }
     {offset
       c9LLv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9LLD; else goto c9LLC;
       c9LLD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9LLC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = lvl13_r9Fvo_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9LLv_info" {
     block_c9LLv_info:
         const _c9LLv;
         const 0;
         const 4294967326;
         const S9FOI_srt+384;
 },
 GHC.Conc.Sync.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c9LLG: // global
           _s9FLc::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9LLH; else goto c9LLI;
       c9LLI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9LLK; else goto c9LLJ;
       c9LLK: // global
           HpAlloc = 24;
           goto c9LLH;
       c9LLH: // global
           R2 = _s9FLc::I64;
           R1 = GHC.Conc.Sync.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LLJ: // global
           I64[Hp - 16] = sat_s9FLi_info;
           I64[Hp] = _s9FLc::I64;
           I64[Sp - 8] = block_c9LLE_info;
           R3 = Hp - 16;
           R2 = lvl11_r9Fvm_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$wlvl_info" {
     GHC.Conc.Sync.$wlvl_info:
         const GHC.Conc.Sync.$wlvl_entry;
         const 0;
         const 30064771086;
         const 8589934596;
         const S9FOI_srt+384;
 },
 _c9LLE() //  [R1]
         { []
         }
     {offset
       c9LLE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LLE_info" {
     block_c9LLE_info:
         const _c9LLE;
         const 0;
         const 4294967326;
         const S9FOI_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.904547336 UTC

[section ""data" . GHC.Conc.Sync.setNumCapabilities2_closure" {
     GHC.Conc.Sync.setNumCapabilities2_closure:
         const GHC.Conc.Sync.setNumCapabilities2_info;
         const 0;
 },
 GHC.Conc.Sync.setNumCapabilities2_entry() //  [R2]
         { []
         }
     {offset
       c9LMa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9LMb; else goto c9LMc;
       c9LMb: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.setNumCapabilities2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LMc: // global
           I64[Sp - 8] = block_c9LM7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9LMg; else goto c9LM8;
       u9LMg: // global
           call _c9LM7(R1) args: 0, res: 0, upd: 0;
       c9LM8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setNumCapabilities2_info" {
     GHC.Conc.Sync.setNumCapabilities2_info:
         const GHC.Conc.Sync.setNumCapabilities2_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S9FOI_srt+400;
 },
 _c9LM7() //  [R1]
         { []
         }
     {offset
       c9LM7: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Conc.Sync.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LM7_info" {
     block_c9LM7_info:
         const _c9LM7;
         const 0;
         const 4294967326;
         const S9FOI_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.910938932 UTC

[section ""data" . GHC.Conc.Sync.setNumCapabilities1_closure" {
     GHC.Conc.Sync.setNumCapabilities1_closure:
         const GHC.Conc.Sync.setNumCapabilities1_info;
         const 0;
 },
 GHC.Conc.Sync.setNumCapabilities1_entry() //  [R2]
         { []
         }
     {offset
       c9LMx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9LMy; else goto c9LMz;
       c9LMy: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.setNumCapabilities1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LMz: // global
           I64[Sp - 8] = block_c9LMu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9LN4; else goto c9LMv;
       u9LN4: // global
           call _c9LMu(R1) args: 0, res: 0, upd: 0;
       c9LMv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setNumCapabilities1_info" {
     GHC.Conc.Sync.setNumCapabilities1_info:
         const GHC.Conc.Sync.setNumCapabilities1_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const S9FOI_srt+400;
 },
 _c9LMu() //  [R1]
         { []
         }
     {offset
       c9LMu: // global
           _s9FLr::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s9FLr::I64, 0)) goto c9LMG; else goto c9LMT;
       c9LMG: // global
           I64[Sp] = block_c9LMQ_info;
           _u9LMW::P64 = CurrentTSO;
           I64[I64[_u9LMW::P64 + 24] + 16] = Sp;
           _u9LMX::I64 = CurrentNursery;
           P64[_u9LMX::I64 + 8] = Hp + 8;
           I64[_u9LMW::P64 + 104] = I64[_u9LMW::P64 + 104] - ((Hp + 8) - I64[_u9LMX::I64]);
           (_u9LMU::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] setNumCapabilities(%MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(_s9FLr::I64)));
           (_u9LMV::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_u9LMU::I64);
           BaseReg = _u9LMV::I64;
           _u9LMY::P64 = CurrentTSO;
           _u9LMZ::P64 = I64[_u9LMY::P64 + 24];
           Sp = I64[_u9LMZ::P64 + 16];
           SpLim = _u9LMZ::P64 + 192;
           HpAlloc = 0;
           _u9LN0::I64 = CurrentNursery;
           _u9LN1::I64 = I64[_u9LN0::I64 + 8];
           Hp = _u9LN1::I64 - 8;
           _u9LN2::I64 = I64[_u9LN0::I64];
           HpLim = _u9LN2::I64 + ((%MO_SS_Conv_W32_W64(I32[_u9LN0::I64 + 48]) << 12) - 1);
           I64[_u9LMY::P64 + 104] = I64[_u9LMY::P64 + 104] + (_u9LN1::I64 - _u9LN2::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
       c9LMT: // global
           R2 = _s9FLr::I64;
           Sp = Sp + 8;
           call GHC.Conc.Sync.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LMu_info" {
     block_c9LMu_info:
         const _c9LMu;
         const 0;
         const 4294967326;
         const S9FOI_srt+400;
 },
 _c9LMQ() //  []
         { []
         }
     {offset
       c9LMQ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LMQ_info" {
     block_c9LMQ_info:
         const _c9LMQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.918448934 UTC

[section ""data" . GHC.Conc.Sync.setNumCapabilities_closure" {
     GHC.Conc.Sync.setNumCapabilities_closure:
         const GHC.Conc.Sync.setNumCapabilities_info;
         const 0;
 },
 GHC.Conc.Sync.setNumCapabilities_entry() //  [R2]
         { []
         }
     {offset
       c9LNB: // global
           R2 = R2;
           call GHC.Conc.Sync.setNumCapabilities1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setNumCapabilities_info" {
     GHC.Conc.Sync.setNumCapabilities_info:
         const GHC.Conc.Sync.setNumCapabilities_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9FOI_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.92241107 UTC

[section ""data" . GHC.Conc.Sync.getNumCapabilities1_closure" {
     GHC.Conc.Sync.getNumCapabilities1_closure:
         const GHC.Conc.Sync.getNumCapabilities1_info;
 },
 GHC.Conc.Sync.getNumCapabilities1_entry() //  []
         { []
         }
     {offset
       c9LNN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LNR; else goto c9LNQ;
       c9LNR: // global
           HpAlloc = 16;
           R1 = GHC.Conc.Sync.getNumCapabilities1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LNQ: // global
           _s9FLB::I64 = %MO_SS_Conv_W32_W64(I32[enabled_capabilities]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9FLB::I64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getNumCapabilities1_info" {
     GHC.Conc.Sync.getNumCapabilities1_info:
         const GHC.Conc.Sync.getNumCapabilities1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.9261792 UTC

[section ""data" . GHC.Conc.Sync.getNumCapabilities_closure" {
     GHC.Conc.Sync.getNumCapabilities_closure:
         const GHC.Conc.Sync.getNumCapabilities_info;
 },
 GHC.Conc.Sync.getNumCapabilities_entry() //  []
         { []
         }
     {offset
       c9LO1: // global
           call GHC.Conc.Sync.getNumCapabilities1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getNumCapabilities_info" {
     GHC.Conc.Sync.getNumCapabilities_info:
         const GHC.Conc.Sync.getNumCapabilities_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.929655428 UTC

[section ""data" . GHC.Conc.Sync.numCapabilities1_closure" {
     GHC.Conc.Sync.numCapabilities1_closure:
         const GHC.Conc.Sync.numCapabilities1_info;
 },
 GHC.Conc.Sync.numCapabilities1_entry() //  []
         { []
         }
     {offset
       c9LOf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9LOg; else goto c9LOh;
       c9LOg: // global
           R1 = GHC.Conc.Sync.numCapabilities1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LOh: // global
           I64[Sp - 8] = block_c9LOc_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.numCapabilities1_info" {
     GHC.Conc.Sync.numCapabilities1_info:
         const GHC.Conc.Sync.numCapabilities1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c9LOc() //  []
         { []
         }
     {offset
       c9LOc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LOk; else goto c9LOj;
       c9LOk: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9LOj: // global
           _s9FLH::I64 = %MO_SS_Conv_W32_W64(I32[enabled_capabilities]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9FLH::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LOc_info" {
     block_c9LOc_info:
         const _c9LOc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.934954601 UTC

[section ""data" . GHC.Conc.Sync.numCapabilities_closure" {
     GHC.Conc.Sync.numCapabilities_closure:
         const GHC.Conc.Sync.numCapabilities_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.numCapabilities_entry() //  [R1]
         { []
         }
     {offset
       c9LOC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9LOD; else goto c9LOE;
       c9LOD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9LOE: // global
           (_c9LOx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9LOx::I64 == 0) goto c9LOz; else goto c9LOy;
       c9LOz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9LOy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9LOx::I64;
           I64[Sp - 24] = block_c9LOA_info;
           Sp = Sp - 24;
           call GHC.Conc.Sync.numCapabilities1_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.numCapabilities_info" {
     GHC.Conc.Sync.numCapabilities_info:
         const GHC.Conc.Sync.numCapabilities_entry;
         const 0;
         const 21;
 },
 _c9LOA() //  [R1]
         { []
         }
     {offset
       c9LOA: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9LOA_info" {
     block_c9LOA_info:
         const _c9LOA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.940148203 UTC

[section ""data" . GHC.Conc.Sync.disableAllocationLimit1_closure" {
     GHC.Conc.Sync.disableAllocationLimit1_closure:
         const GHC.Conc.Sync.disableAllocationLimit1_info;
 },
 GHC.Conc.Sync.disableAllocationLimit1_entry() //  []
         { []
         }
     {offset
       c9LOY: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] rts_disableThreadAllocationLimit(CurrentTSO);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.disableAllocationLimit1_info" {
     GHC.Conc.Sync.disableAllocationLimit1_info:
         const GHC.Conc.Sync.disableAllocationLimit1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.943402997 UTC

[section ""data" . GHC.Conc.Sync.disableAllocationLimit_closure" {
     GHC.Conc.Sync.disableAllocationLimit_closure:
         const GHC.Conc.Sync.disableAllocationLimit_info;
 },
 GHC.Conc.Sync.disableAllocationLimit_entry() //  []
         { []
         }
     {offset
       c9LPa: // global
           call GHC.Conc.Sync.disableAllocationLimit1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.disableAllocationLimit_info" {
     GHC.Conc.Sync.disableAllocationLimit_info:
         const GHC.Conc.Sync.disableAllocationLimit_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.946622511 UTC

[section ""data" . GHC.Conc.Sync.enableAllocationLimit1_closure" {
     GHC.Conc.Sync.enableAllocationLimit1_closure:
         const GHC.Conc.Sync.enableAllocationLimit1_info;
 },
 GHC.Conc.Sync.enableAllocationLimit1_entry() //  []
         { []
         }
     {offset
       c9LPn: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] rts_enableThreadAllocationLimit(CurrentTSO);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.enableAllocationLimit1_info" {
     GHC.Conc.Sync.enableAllocationLimit1_info:
         const GHC.Conc.Sync.enableAllocationLimit1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.950157002 UTC

[section ""data" . GHC.Conc.Sync.enableAllocationLimit_closure" {
     GHC.Conc.Sync.enableAllocationLimit_closure:
         const GHC.Conc.Sync.enableAllocationLimit_info;
 },
 GHC.Conc.Sync.enableAllocationLimit_entry() //  []
         { []
         }
     {offset
       c9LPz: // global
           call GHC.Conc.Sync.enableAllocationLimit1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.enableAllocationLimit_info" {
     GHC.Conc.Sync.enableAllocationLimit_info:
         const GHC.Conc.Sync.enableAllocationLimit_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.954108951 UTC

[section ""data" . GHC.Conc.Sync.getAllocationCounter1_closure" {
     GHC.Conc.Sync.getAllocationCounter1_closure:
         const GHC.Conc.Sync.getAllocationCounter1_info;
 },
 GHC.Conc.Sync.getAllocationCounter1_entry() //  []
         { []
         }
     {offset
       c9LPN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LPR; else goto c9LPQ;
       c9LPR: // global
           HpAlloc = 16;
           R1 = GHC.Conc.Sync.getAllocationCounter1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9LPQ: // global
           (_s9FM7::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] rts_getThreadAllocationCounter(CurrentTSO);
           I64[Hp - 8] = GHC.Int.I64#_con_info;
           I64[Hp] = _s9FM7::I64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getAllocationCounter1_info" {
     GHC.Conc.Sync.getAllocationCounter1_info:
         const GHC.Conc.Sync.getAllocationCounter1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.957555556 UTC

[section ""data" . GHC.Conc.Sync.getAllocationCounter_closure" {
     GHC.Conc.Sync.getAllocationCounter_closure:
         const GHC.Conc.Sync.getAllocationCounter_info;
 },
 GHC.Conc.Sync.getAllocationCounter_entry() //  []
         { []
         }
     {offset
       c9LQ1: // global
           call GHC.Conc.Sync.getAllocationCounter1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getAllocationCounter_info" {
     GHC.Conc.Sync.getAllocationCounter_info:
         const GHC.Conc.Sync.getAllocationCounter_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.961209837 UTC

[section ""data" . GHC.Conc.Sync.setAllocationCounter1_closure" {
     GHC.Conc.Sync.setAllocationCounter1_closure:
         const GHC.Conc.Sync.setAllocationCounter1_info;
 },
 GHC.Conc.Sync.setAllocationCounter1_entry() //  [R2]
         { []
         }
     {offset
       c9LQf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9LQg; else goto c9LQh;
       c9LQg: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.setAllocationCounter1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LQh: // global
           I64[Sp - 16] = block_c9LQc_info;
           R1 = R2;
           I64[Sp - 8] = CurrentTSO;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9LQo; else goto c9LQd;
       u9LQo: // global
           call _c9LQc(R1) args: 0, res: 0, upd: 0;
       c9LQd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setAllocationCounter1_info" {
     GHC.Conc.Sync.setAllocationCounter1_info:
         const GHC.Conc.Sync.setAllocationCounter1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9LQc() //  [R1]
         { []
         }
     {offset
       c9LQc: // global
           call "ccall" arg hints:  [PtrHint,
                                     ‘signed’]  result hints:  [] rts_setThreadAllocationCounter(P64[Sp + 8], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9LQc_info" {
     block_c9LQc_info:
         const _c9LQc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.966601178 UTC

[section ""data" . GHC.Conc.Sync.setAllocationCounter_closure" {
     GHC.Conc.Sync.setAllocationCounter_closure:
         const GHC.Conc.Sync.setAllocationCounter_info;
 },
 GHC.Conc.Sync.setAllocationCounter_entry() //  [R2]
         { []
         }
     {offset
       c9LQE: // global
           R2 = R2;
           call GHC.Conc.Sync.setAllocationCounter1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setAllocationCounter_info" {
     GHC.Conc.Sync.setAllocationCounter_info:
         const GHC.Conc.Sync.setAllocationCounter_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.969815948 UTC

[section ""data" . GHC.Conc.Sync.TVar_closure" {
     GHC.Conc.Sync.TVar_closure:
         const GHC.Conc.Sync.TVar_info;
 },
 GHC.Conc.Sync.TVar_entry() //  [R2]
         { []
         }
     {offset
       c9LQQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LQU; else goto c9LQT;
       c9LQU: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Conc.Sync.TVar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LQT: // global
           I64[Hp - 8] = GHC.Conc.Sync.TVar_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.TVar_info" {
     GHC.Conc.Sync.TVar_info:
         const GHC.Conc.Sync.TVar_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.972969593 UTC

[section ""data" . GHC.Conc.Sync.ThreadRunning_closure" {
     GHC.Conc.Sync.ThreadRunning_closure:
         const GHC.Conc.Sync.ThreadRunning_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.974825607 UTC

[section ""data" . GHC.Conc.Sync.ThreadFinished_closure" {
     GHC.Conc.Sync.ThreadFinished_closure:
         const GHC.Conc.Sync.ThreadFinished_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.976906021 UTC

[section ""data" . GHC.Conc.Sync.ThreadBlocked_closure" {
     GHC.Conc.Sync.ThreadBlocked_closure:
         const GHC.Conc.Sync.ThreadBlocked_info;
 },
 GHC.Conc.Sync.ThreadBlocked_entry() //  [R2]
         { []
         }
     {offset
       c9LR7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LRb; else goto c9LRa;
       c9LRb: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Conc.Sync.ThreadBlocked_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LRa: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadBlocked_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadBlocked_info" {
     GHC.Conc.Sync.ThreadBlocked_info:
         const GHC.Conc.Sync.ThreadBlocked_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.980126093 UTC

[section ""data" . GHC.Conc.Sync.ThreadDied_closure" {
     GHC.Conc.Sync.ThreadDied_closure:
         const GHC.Conc.Sync.ThreadDied_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.981712064 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnMVar_closure" {
     GHC.Conc.Sync.BlockedOnMVar_closure:
         const GHC.Conc.Sync.BlockedOnMVar_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.983839858 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnBlackHole_closure" {
     GHC.Conc.Sync.BlockedOnBlackHole_closure:
         const GHC.Conc.Sync.BlockedOnBlackHole_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.985699655 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnException_closure" {
     GHC.Conc.Sync.BlockedOnException_closure:
         const GHC.Conc.Sync.BlockedOnException_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.987241971 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnSTM_closure" {
     GHC.Conc.Sync.BlockedOnSTM_closure:
         const GHC.Conc.Sync.BlockedOnSTM_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.988813375 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnForeignCall_closure" {
     GHC.Conc.Sync.BlockedOnForeignCall_closure:
         const GHC.Conc.Sync.BlockedOnForeignCall_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.990361304 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnOther_closure" {
     GHC.Conc.Sync.BlockedOnOther_closure:
         const GHC.Conc.Sync.BlockedOnOther_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.992522744 UTC

[section ""data" . GHC.Conc.Sync.ThreadId_closure" {
     GHC.Conc.Sync.ThreadId_closure:
         const GHC.Conc.Sync.ThreadId_info;
 },
 GHC.Conc.Sync.ThreadId_entry() //  [R2]
         { []
         }
     {offset
       c9LRt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9LRx; else goto c9LRw;
       c9LRx: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Conc.Sync.ThreadId_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9LRw: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadId_info" {
     GHC.Conc.Sync.ThreadId_info:
         const GHC.Conc.Sync.ThreadId_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.995850973 UTC

[section ""cstring" . i9JiP_str" {
     i9JiP_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,86,97,114]
 },
 GHC.Conc.Sync.TVar_con_entry() //  [R1]
         { []
         }
     {offset
       c9LRD: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.TVar_con_info" {
     GHC.Conc.Sync.TVar_con_info:
         const GHC.Conc.Sync.TVar_con_entry;
         const 1;
         const 2;
         const i9JiP_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:47.998814245 UTC

[section ""cstring" . i9JiR_str" {
     i9JiR_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,104,114,101,97,100,82,117,110,110,105,110,103]
 },
 GHC.Conc.Sync.ThreadRunning_con_entry() //  [R1]
         { []
         }
     {offset
       c9LRJ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadRunning_con_info" {
     GHC.Conc.Sync.ThreadRunning_con_info:
         const GHC.Conc.Sync.ThreadRunning_con_entry;
         const 4294967296;
         const 3;
         const i9JiR_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.002047813 UTC

[section ""cstring" . i9JiT_str" {
     i9JiT_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,104,114,101,97,100,70,105,110,105,115,104,101,100]
 },
 GHC.Conc.Sync.ThreadFinished_con_entry() //  [R1]
         { []
         }
     {offset
       c9LRP: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadFinished_con_info" {
     GHC.Conc.Sync.ThreadFinished_con_info:
         const GHC.Conc.Sync.ThreadFinished_con_entry;
         const 4294967296;
         const 4294967299;
         const i9JiT_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.004909618 UTC

[section ""cstring" . i9JiV_str" {
     i9JiV_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,104,114,101,97,100,66,108,111,99,107,101,100]
 },
 GHC.Conc.Sync.ThreadBlocked_con_entry() //  [R1]
         { []
         }
     {offset
       c9LRV: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadBlocked_con_info" {
     GHC.Conc.Sync.ThreadBlocked_con_info:
         const GHC.Conc.Sync.ThreadBlocked_con_entry;
         const 1;
         const 8589934594;
         const i9JiV_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.008274721 UTC

[section ""cstring" . i9JiX_str" {
     i9JiX_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,104,114,101,97,100,68,105,101,100]
 },
 GHC.Conc.Sync.ThreadDied_con_entry() //  [R1]
         { []
         }
     {offset
       c9LS1: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadDied_con_info" {
     GHC.Conc.Sync.ThreadDied_con_info:
         const GHC.Conc.Sync.ThreadDied_con_entry;
         const 4294967296;
         const 12884901891;
         const i9JiX_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.011083765 UTC

[section ""relreadonly" . GHC.Conc.Sync.BlockReason_closure_tbl" {
     GHC.Conc.Sync.BlockReason_closure_tbl:
         const GHC.Conc.Sync.BlockedOnMVar_closure+1;
         const GHC.Conc.Sync.BlockedOnBlackHole_closure+2;
         const GHC.Conc.Sync.BlockedOnException_closure+3;
         const GHC.Conc.Sync.BlockedOnSTM_closure+4;
         const GHC.Conc.Sync.BlockedOnForeignCall_closure+5;
         const GHC.Conc.Sync.BlockedOnOther_closure+6;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.012787225 UTC

[section ""cstring" . i9JiZ_str" {
     i9JiZ_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,77,86,97,114]
 },
 GHC.Conc.Sync.BlockedOnMVar_con_entry() //  [R1]
         { []
         }
     {offset
       c9LS8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnMVar_con_info" {
     GHC.Conc.Sync.BlockedOnMVar_con_info:
         const GHC.Conc.Sync.BlockedOnMVar_con_entry;
         const 4294967296;
         const 3;
         const i9JiZ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.016220784 UTC

[section ""cstring" . i9Jj1_str" {
     i9Jj1_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,66,108,97,99,107,72,111,108,101]
 },
 GHC.Conc.Sync.BlockedOnBlackHole_con_entry() //  [R1]
         { []
         }
     {offset
       c9LSe: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnBlackHole_con_info" {
     GHC.Conc.Sync.BlockedOnBlackHole_con_info:
         const GHC.Conc.Sync.BlockedOnBlackHole_con_entry;
         const 4294967296;
         const 4294967299;
         const i9Jj1_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.019145721 UTC

[section ""cstring" . i9Jj3_str" {
     i9Jj3_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,69,120,99,101,112,116,105,111,110]
 },
 GHC.Conc.Sync.BlockedOnException_con_entry() //  [R1]
         { []
         }
     {offset
       c9LSk: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnException_con_info" {
     GHC.Conc.Sync.BlockedOnException_con_info:
         const GHC.Conc.Sync.BlockedOnException_con_entry;
         const 4294967296;
         const 8589934595;
         const i9Jj3_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.022103135 UTC

[section ""cstring" . i9Jj5_str" {
     i9Jj5_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,83,84,77]
 },
 GHC.Conc.Sync.BlockedOnSTM_con_entry() //  [R1]
         { []
         }
     {offset
       c9LSq: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnSTM_con_info" {
     GHC.Conc.Sync.BlockedOnSTM_con_info:
         const GHC.Conc.Sync.BlockedOnSTM_con_entry;
         const 4294967296;
         const 12884901891;
         const i9Jj5_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.02513041 UTC

[section ""cstring" . i9Jj7_str" {
     i9Jj7_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,70,111,114,101,105,103,110,67,97,108,108]
 },
 GHC.Conc.Sync.BlockedOnForeignCall_con_entry() //  [R1]
         { []
         }
     {offset
       c9LSw: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnForeignCall_con_info" {
     GHC.Conc.Sync.BlockedOnForeignCall_con_info:
         const GHC.Conc.Sync.BlockedOnForeignCall_con_entry;
         const 4294967296;
         const 17179869187;
         const i9Jj7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.028448308 UTC

[section ""cstring" . i9Jj9_str" {
     i9Jj9_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,79,116,104,101,114]
 },
 GHC.Conc.Sync.BlockedOnOther_con_entry() //  [R1]
         { []
         }
     {offset
       c9LSC: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnOther_con_info" {
     GHC.Conc.Sync.BlockedOnOther_con_info:
         const GHC.Conc.Sync.BlockedOnOther_con_entry;
         const 4294967296;
         const 21474836483;
         const i9Jj9_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.031374729 UTC

[section ""cstring" . i9Jjb_str" {
     i9Jjb_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,104,114,101,97,100,73,100]
 },
 GHC.Conc.Sync.ThreadId_con_entry() //  [R1]
         { []
         }
     {offset
       c9LSI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadId_con_info" {
     GHC.Conc.Sync.ThreadId_con_info:
         const GHC.Conc.Sync.ThreadId_con_entry;
         const 1;
         const 2;
         const i9Jjb_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:48.035211434 UTC

[section ""relreadonly" . S9FOI_srt" {
     S9FOI_srt:
         const GHC.Conc.Sync.$w$cshowsPrec_closure;
         const GHC.Conc.Sync.$fShowBlockReason1_closure;
         const GHC.Conc.Sync.$fShowBlockReason3_closure;
         const GHC.Conc.Sync.$fShowBlockReason5_closure;
         const GHC.Conc.Sync.$fShowBlockReason7_closure;
         const GHC.Conc.Sync.$fShowBlockReason9_closure;
         const GHC.Conc.Sync.$fShowBlockReason11_closure;
         const GHC.Conc.Sync.$fShowBlockReason_$cshow_closure;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const GHC.Conc.Sync.labelThread1_closure;
         const GHC.Conc.Sync.$fShowThreadStatus5_closure;
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_closure;
         const GHC.Conc.Sync.$fShowThreadStatus3_closure;
         const GHC.Conc.Sync.$fShowThreadStatus7_closure;
         const GHC.Conc.Sync.$fShowThreadStatus9_closure;
         const GHC.Conc.Sync.$fShowThreadStatus_$cshow_closure;
         const GHC.Conc.Sync.$fShowThreadStatus1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure;
         const GHC.Conc.Sync.killThread1_closure;
         const GHC.Conc.Sync.killThread2_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Conc.Sync.always3_closure;
         const GHC.Conc.Sync.always1_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.IO.Handle.hFlush_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const lvl3_r9Fve_closure;
         const lvl4_r9Fvf_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const lvl6_r9Fvh_closure;
         const lvl8_r9Fvj_closure;
         const lvl9_r9Fvk_closure;
         const lvl10_r9Fvl_closure;
         const GHC.Conc.Sync.uncaughtExceptionHandler_closure;
         const GHC.Conc.Sync.setUncaughtExceptionHandler1_closure;
         const GHC.Conc.Sync.getUncaughtExceptionHandler1_closure;
         const GHC.Conc.Sync.reportError1_closure;
         const GHC.Conc.Sync.childHandler1_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
         const GHC.IO.Exception.$fExceptionAsyncException9_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure;
         const GHC.Conc.Sync.forkIO2_closure;
         const GHC.Conc.Sync.forkOn1_closure;
         const GHC.Conc.Sync.forkOnWithUnmask1_closure;
         const GHC.Conc.Sync.forkIO1_closure;
         const GHC.Conc.Sync.forkIOWithUnmask1_closure;
         const lvl13_r9Fvo_closure;
         const GHC.IO.failIO1_closure;
         const GHC.Conc.Sync.$wlvl_closure;
         const GHC.Conc.Sync.setNumCapabilities2_closure;
         const GHC.Conc.Sync.setNumCapabilities1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.480384767 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:52.482728049 UTC

[section ""data" . GHC.Conc.Sync.$fEqTVar_$c==_closure" {
     GHC.Conc.Sync.$fEqTVar_$c==_closure:
         const GHC.Conc.Sync.$fEqTVar_$c==_info;
 },
 GHC.Conc.Sync.$fEqTVar_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c9M9P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9M9T; else goto c9M9U;
       c9M9T: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqTVar_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9M9U: // global
           I64[Sp - 16] = block_c9M9M_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Ma3; else goto c9M9N;
       u9Ma3: // global
           call _c9M9M(R1) args: 0, res: 0, upd: 0;
       c9M9N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqTVar_$c==_info" {
     GHC.Conc.Sync.$fEqTVar_$c==_info:
         const GHC.Conc.Sync.$fEqTVar_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9M9M() //  [R1]
         { []
         }
     {offset
       c9M9M: // global
           I64[Sp] = block_c9M9S_info;
           _s9LSS::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9LSS::P64;
           if (R1 & 7 != 0) goto u9Ma2; else goto c9M9W;
       u9Ma2: // global
           call _c9M9S(R1) args: 0, res: 0, upd: 0;
       c9M9W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9M9M_info" {
     block_c9M9M_info:
         const _c9M9M;
         const 1;
         const 30;
 },
 _c9M9S() //  [R1]
         { []
         }
     {offset
       c9M9S: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9M9S_info" {
     block_c9M9S_info:
         const _c9M9S;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.489986758 UTC

[section ""data" . GHC.Conc.Sync.$fEqTVar_$c/=_closure" {
     GHC.Conc.Sync.$fEqTVar_$c/=_closure:
         const GHC.Conc.Sync.$fEqTVar_$c/=_info;
 },
 GHC.Conc.Sync.$fEqTVar_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Mav: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Maz; else goto c9MaA;
       c9Maz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqTVar_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MaA: // global
           I64[Sp - 16] = block_c9Mas_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MaX; else goto c9Mat;
       u9MaX: // global
           call _c9Mas(R1) args: 0, res: 0, upd: 0;
       c9Mat: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqTVar_$c/=_info" {
     GHC.Conc.Sync.$fEqTVar_$c/=_info:
         const GHC.Conc.Sync.$fEqTVar_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Mas() //  [R1]
         { []
         }
     {offset
       c9Mas: // global
           I64[Sp] = block_c9May_info;
           _s9LSZ::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9LSZ::P64;
           if (R1 & 7 != 0) goto u9MaW; else goto c9MaC;
       u9MaW: // global
           call _c9May(R1) args: 0, res: 0, upd: 0;
       c9MaC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Mas_info" {
     block_c9Mas_info:
         const _c9Mas;
         const 1;
         const 30;
 },
 _c9May() //  [R1]
         { []
         }
     {offset
       c9May: // global
           if (P64[Sp + 8] == P64[R1 + 7]) goto c9MaS; else goto c9MaM;
       c9MaS: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9MaM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9May_info" {
     block_c9May_info:
         const _c9May;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.495951924 UTC

[section ""data" . GHC.Conc.Sync.$fEqTVar_closure" {
     GHC.Conc.Sync.$fEqTVar_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Conc.Sync.$fEqTVar_$c==_closure+2;
         const GHC.Conc.Sync.$fEqTVar_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.49758331 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason12_bytes" {
     GHC.Conc.Sync.$fShowBlockReason12_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.499652612 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason11_closure" {
     GHC.Conc.Sync.$fShowBlockReason11_closure:
         const GHC.Conc.Sync.$fShowBlockReason11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason11_entry() //  [R1]
         { []
         }
     {offset
       c9Mbq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Mbr; else goto c9Mbs;
       c9Mbr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Mbs: // global
           (_c9Mbn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Mbn::I64 == 0) goto c9Mbp; else goto c9Mbo;
       c9Mbp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Mbo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Mbn::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason11_info" {
     GHC.Conc.Sync.$fShowBlockReason11_info:
         const GHC.Conc.Sync.$fShowBlockReason11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.503181203 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason10_bytes" {
     GHC.Conc.Sync.$fShowBlockReason10_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,66,108,97,99,107,72,111,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.505336542 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason9_closure" {
     GHC.Conc.Sync.$fShowBlockReason9_closure:
         const GHC.Conc.Sync.$fShowBlockReason9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason9_entry() //  [R1]
         { []
         }
     {offset
       c9MbI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MbJ; else goto c9MbK;
       c9MbJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9MbK: // global
           (_c9MbF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9MbF::I64 == 0) goto c9MbH; else goto c9MbG;
       c9MbH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9MbG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9MbF::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason9_info" {
     GHC.Conc.Sync.$fShowBlockReason9_info:
         const GHC.Conc.Sync.$fShowBlockReason9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.50868542 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason8_bytes" {
     GHC.Conc.Sync.$fShowBlockReason8_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.512200001 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason7_closure" {
     GHC.Conc.Sync.$fShowBlockReason7_closure:
         const GHC.Conc.Sync.$fShowBlockReason7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason7_entry() //  [R1]
         { []
         }
     {offset
       c9Mc0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Mc1; else goto c9Mc2;
       c9Mc1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Mc2: // global
           (_c9MbX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9MbX::I64 == 0) goto c9MbZ; else goto c9MbY;
       c9MbZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9MbY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9MbX::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason7_info" {
     GHC.Conc.Sync.$fShowBlockReason7_info:
         const GHC.Conc.Sync.$fShowBlockReason7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.51556534 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason6_bytes" {
     GHC.Conc.Sync.$fShowBlockReason6_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.51783825 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason5_closure" {
     GHC.Conc.Sync.$fShowBlockReason5_closure:
         const GHC.Conc.Sync.$fShowBlockReason5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason5_entry() //  [R1]
         { []
         }
     {offset
       c9Mci: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Mcj; else goto c9Mck;
       c9Mcj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Mck: // global
           (_c9Mcf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Mcf::I64 == 0) goto c9Mch; else goto c9Mcg;
       c9Mch: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Mcg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Mcf::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason5_info" {
     GHC.Conc.Sync.$fShowBlockReason5_info:
         const GHC.Conc.Sync.$fShowBlockReason5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.521166671 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason4_bytes" {
     GHC.Conc.Sync.$fShowBlockReason4_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,70,111,114,101,105,103,110,67,97,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.523212753 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason3_closure" {
     GHC.Conc.Sync.$fShowBlockReason3_closure:
         const GHC.Conc.Sync.$fShowBlockReason3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason3_entry() //  [R1]
         { []
         }
     {offset
       c9McA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9McB; else goto c9McC;
       c9McB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9McC: // global
           (_c9Mcx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Mcx::I64 == 0) goto c9Mcz; else goto c9Mcy;
       c9Mcz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Mcy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Mcx::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason3_info" {
     GHC.Conc.Sync.$fShowBlockReason3_info:
         const GHC.Conc.Sync.$fShowBlockReason3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.52656758 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowBlockReason2_bytes" {
     GHC.Conc.Sync.$fShowBlockReason2_bytes:
         I8[] [66,108,111,99,107,101,100,79,110,79,116,104,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.528641738 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason1_closure" {
     GHC.Conc.Sync.$fShowBlockReason1_closure:
         const GHC.Conc.Sync.$fShowBlockReason1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason1_entry() //  [R1]
         { []
         }
     {offset
       c9McS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9McT; else goto c9McU;
       c9McT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9McU: // global
           (_c9McP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9McP::I64 == 0) goto c9McR; else goto c9McQ;
       c9McR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9McQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9McP::I64;
           R2 = GHC.Conc.Sync.$fShowBlockReason2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason1_info" {
     GHC.Conc.Sync.$fShowBlockReason1_info:
         const GHC.Conc.Sync.$fShowBlockReason1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.533496027 UTC

[section ""data" . GHC.Conc.Sync.$w$cshowsPrec_closure" {
     GHC.Conc.Sync.$w$cshowsPrec_closure:
         const GHC.Conc.Sync.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Conc.Sync.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Mdi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Mdj; else goto c9Mdk;
       c9Mdj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Mdk: // global
           I64[Sp - 16] = block_c9Md7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MdD; else goto c9Md8;
       u9MdD: // global
           call _c9Md7(R1) args: 0, res: 0, upd: 0;
       c9Md8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$w$cshowsPrec_info" {
     GHC.Conc.Sync.$w$cshowsPrec_info:
         const GHC.Conc.Sync.$w$cshowsPrec_entry;
         const 0;
         const 545460846606;
         const 8589934607;
         const S9MdE_srt;
 },
 _c9Md7() //  [R1]
         { []
         }
     {offset
       c9Md7: // global
           _s9LT4::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Mdb;
               case 2 : goto c9Mdc;
               case 3 : goto c9Mdd;
               case 4 : goto c9Mde;
               case 5 : goto c9Mdf;
               case 6 : goto c9Mdg;
           }
       c9Mdg: // global
           R3 = _s9LT4::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Mdf: // global
           R3 = _s9LT4::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Mde: // global
           R3 = _s9LT4::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Mdd: // global
           R3 = _s9LT4::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Mdc: // global
           R3 = _s9LT4::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Mdb: // global
           R3 = _s9LT4::P64;
           R2 = GHC.Conc.Sync.$fShowBlockReason11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Md7_info" {
     block_c9Md7_info:
         const _c9Md7;
         const 1;
         const 270582939678;
         const S9MdE_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.539203818 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_closure" {
     GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_closure:
         const GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_info;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c9MdY: // global
           _s9LT7::P64 = R3;
           R3 = R4;
           R2 = _s9LT7::P64;
           call GHC.Conc.Sync.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_info" {
     GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_info:
         const GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S9MdE_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.544118769 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason_$cshow_closure" {
     GHC.Conc.Sync.$fShowBlockReason_$cshow_closure:
         const GHC.Conc.Sync.$fShowBlockReason_$cshow_info;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9Mek: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Mel; else goto c9Mem;
       c9Mel: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowBlockReason_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Mem: // global
           I64[Sp - 8] = block_c9Me9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9MeF; else goto c9Mea;
       u9MeF: // global
           call _c9Me9(R1) args: 0, res: 0, upd: 0;
       c9Mea: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason_$cshow_info" {
     GHC.Conc.Sync.$fShowBlockReason_$cshow_info:
         const GHC.Conc.Sync.$fShowBlockReason_$cshow_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const S9MdE_srt+8;
 },
 _c9Me9() //  [R1]
         { []
         }
     {offset
       c9Me9: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Med;
               case 2 : goto c9Mee;
               case 3 : goto c9Mef;
               case 4 : goto c9Meg;
               case 5 : goto c9Meh;
               case 6 : goto c9Mei;
           }
       c9Mei: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Meh: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Meg: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Mef: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Mee: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Med: // global
           R1 = GHC.Conc.Sync.$fShowBlockReason11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Me9_info" {
     block_c9Me9_info:
         const _c9Me9;
         const 0;
         const 270582939678;
         const S9MdE_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.54969364 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason_$cshowList_closure" {
     GHC.Conc.Sync.$fShowBlockReason_$cshowList_closure:
         const GHC.Conc.Sync.$fShowBlockReason_$cshowList_info;
         const 0;
 },
 GHC.Conc.Sync.$fShowBlockReason_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Mf5: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Conc.Sync.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowBlockReason_$cshowList_info" {
     GHC.Conc.Sync.$fShowBlockReason_$cshowList_info:
         const GHC.Conc.Sync.$fShowBlockReason_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9MdE_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.552776135 UTC

[section ""data" . GHC.Conc.Sync.$fShowBlockReason_closure" {
     GHC.Conc.Sync.$fShowBlockReason_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Conc.Sync.$fShowBlockReason_$cshowsPrec_closure+3;
         const GHC.Conc.Sync.$fShowBlockReason_$cshow_closure+1;
         const GHC.Conc.Sync.$fShowBlockReason_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.5577853 UTC

[section ""data" . GHC.Conc.Sync.$fEqBlockReason_$c==_closure" {
     GHC.Conc.Sync.$fEqBlockReason_$c==_closure:
         const GHC.Conc.Sync.$fEqBlockReason_$c==_info;
 },
 GHC.Conc.Sync.$fEqBlockReason_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Mfs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Mft; else goto c9Mfu;
       c9Mft: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqBlockReason_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Mfu: // global
           I64[Sp - 16] = block_c9Mfh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Mhl; else goto c9Mfi;
       u9Mhl: // global
           call _c9Mfh(R1) args: 0, res: 0, upd: 0;
       c9Mfi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqBlockReason_$c==_info" {
     GHC.Conc.Sync.$fEqBlockReason_$c==_info:
         const GHC.Conc.Sync.$fEqBlockReason_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Mfh() //  [R1]
         { []
         }
     {offset
       c9Mfh: // global
           _s9LTe::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Mfl;
               case 2 : goto c9Mfm;
               case 3 : goto c9Mfn;
               case 4 : goto c9Mfo;
               case 5 : goto c9Mfp;
               case 6 : goto c9Mfq;
           }
       c9Mfq: // global
           I64[Sp + 8] = block_c9MgK_info;
           R1 = _s9LTe::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Mhk; else goto c9MgM;
       u9Mhk: // global
           call _c9MgK(R1) args: 0, res: 0, upd: 0;
       c9MgM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mfp: // global
           I64[Sp + 8] = block_c9Mgv_info;
           R1 = _s9LTe::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Mhj; else goto c9Mgx;
       u9Mhj: // global
           call _c9Mgv(R1) args: 0, res: 0, upd: 0;
       c9Mgx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mfo: // global
           I64[Sp + 8] = block_c9Mgg_info;
           R1 = _s9LTe::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Mhi; else goto c9Mgi;
       u9Mhi: // global
           call _c9Mgg(R1) args: 0, res: 0, upd: 0;
       c9Mgi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mfn: // global
           I64[Sp + 8] = block_c9Mg1_info;
           R1 = _s9LTe::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Mhh; else goto c9Mg3;
       u9Mhh: // global
           call _c9Mg1(R1) args: 0, res: 0, upd: 0;
       c9Mg3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mfm: // global
           I64[Sp + 8] = block_c9MfM_info;
           R1 = _s9LTe::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Mhg; else goto c9MfO;
       u9Mhg: // global
           call _c9MfM(R1) args: 0, res: 0, upd: 0;
       c9MfO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mfl: // global
           I64[Sp + 8] = block_c9Mfx_info;
           R1 = _s9LTe::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Mhf; else goto c9Mfz;
       u9Mhf: // global
           call _c9Mfx(R1) args: 0, res: 0, upd: 0;
       c9Mfz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Mfh_info" {
     block_c9Mfh_info:
         const _c9Mfh;
         const 1;
         const 30;
 },
 _c9MgK() //  [R1]
         { []
         }
     {offset
       c9MgK: // global
           if (R1 & 7 == 6) goto u9Mh3; else goto u9Mh4;
       u9Mh3: // global
           Sp = Sp + 8;
           call _c9MgW() args: 0, res: 0, upd: 0;
       u9Mh4: // global
           Sp = Sp + 8;
           call _c9MgS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MgK_info" {
     block_c9MgK_info:
         const _c9MgK;
         const 0;
         const 30;
 },
 _c9Mgv() //  [R1]
         { []
         }
     {offset
       c9Mgv: // global
           if (R1 & 7 == 5) goto u9Mh5; else goto u9Mh6;
       u9Mh5: // global
           Sp = Sp + 8;
           call _c9MgW() args: 0, res: 0, upd: 0;
       u9Mh6: // global
           Sp = Sp + 8;
           call _c9MgS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mgv_info" {
     block_c9Mgv_info:
         const _c9Mgv;
         const 0;
         const 30;
 },
 _c9Mgg() //  [R1]
         { []
         }
     {offset
       c9Mgg: // global
           if (R1 & 7 == 4) goto u9Mh7; else goto u9Mh8;
       u9Mh7: // global
           Sp = Sp + 8;
           call _c9MgW() args: 0, res: 0, upd: 0;
       u9Mh8: // global
           Sp = Sp + 8;
           call _c9MgS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mgg_info" {
     block_c9Mgg_info:
         const _c9Mgg;
         const 0;
         const 30;
 },
 _c9Mg1() //  [R1]
         { []
         }
     {offset
       c9Mg1: // global
           if (R1 & 7 == 3) goto u9Mh9; else goto u9Mha;
       u9Mh9: // global
           Sp = Sp + 8;
           call _c9MgW() args: 0, res: 0, upd: 0;
       u9Mha: // global
           Sp = Sp + 8;
           call _c9MgS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mg1_info" {
     block_c9Mg1_info:
         const _c9Mg1;
         const 0;
         const 30;
 },
 _c9MfM() //  [R1]
         { []
         }
     {offset
       c9MfM: // global
           if (R1 & 7 == 2) goto u9Mhb; else goto u9Mhc;
       u9Mhb: // global
           Sp = Sp + 8;
           call _c9MgW() args: 0, res: 0, upd: 0;
       u9Mhc: // global
           Sp = Sp + 8;
           call _c9MgS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MfM_info" {
     block_c9MfM_info:
         const _c9MfM;
         const 0;
         const 30;
 },
 _c9Mfx() //  [R1]
         { []
         }
     {offset
       c9Mfx: // global
           if (R1 & 7 == 1) goto u9Mhd; else goto u9Mhe;
       u9Mhd: // global
           Sp = Sp + 8;
           call _c9MgW() args: 0, res: 0, upd: 0;
       u9Mhe: // global
           Sp = Sp + 8;
           call _c9MgS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mfx_info" {
     block_c9Mfx_info:
         const _c9Mfx;
         const 0;
         const 30;
 },
 _c9MgW() //  []
         { []
         }
     {offset
       c9MgW: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9MgS() //  []
         { []
         }
     {offset
       c9MgS: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.576787901 UTC

[section ""data" . GHC.Conc.Sync.$fEqBlockReason_$c/=_closure" {
     GHC.Conc.Sync.$fEqBlockReason_$c/=_closure:
         const GHC.Conc.Sync.$fEqBlockReason_$c/=_info;
 },
 GHC.Conc.Sync.$fEqBlockReason_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MiQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MiR; else goto c9MiS;
       c9MiR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqBlockReason_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MiS: // global
           I64[Sp - 16] = block_c9MiF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MkJ; else goto c9MiG;
       u9MkJ: // global
           call _c9MiF(R1) args: 0, res: 0, upd: 0;
       c9MiG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqBlockReason_$c/=_info" {
     GHC.Conc.Sync.$fEqBlockReason_$c/=_info:
         const GHC.Conc.Sync.$fEqBlockReason_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9MiF() //  [R1]
         { []
         }
     {offset
       c9MiF: // global
           _s9LTn::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9MiJ;
               case 2 : goto c9MiK;
               case 3 : goto c9MiL;
               case 4 : goto c9MiM;
               case 5 : goto c9MiN;
               case 6 : goto c9MiO;
           }
       c9MiO: // global
           I64[Sp + 8] = block_c9Mk8_info;
           R1 = _s9LTn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MkI; else goto c9Mka;
       u9MkI: // global
           call _c9Mk8(R1) args: 0, res: 0, upd: 0;
       c9Mka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MiN: // global
           I64[Sp + 8] = block_c9MjT_info;
           R1 = _s9LTn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MkH; else goto c9MjV;
       u9MkH: // global
           call _c9MjT(R1) args: 0, res: 0, upd: 0;
       c9MjV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MiM: // global
           I64[Sp + 8] = block_c9MjE_info;
           R1 = _s9LTn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MkG; else goto c9MjG;
       u9MkG: // global
           call _c9MjE(R1) args: 0, res: 0, upd: 0;
       c9MjG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MiL: // global
           I64[Sp + 8] = block_c9Mjp_info;
           R1 = _s9LTn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MkF; else goto c9Mjr;
       u9MkF: // global
           call _c9Mjp(R1) args: 0, res: 0, upd: 0;
       c9Mjr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MiK: // global
           I64[Sp + 8] = block_c9Mja_info;
           R1 = _s9LTn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MkE; else goto c9Mjc;
       u9MkE: // global
           call _c9Mja(R1) args: 0, res: 0, upd: 0;
       c9Mjc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MiJ: // global
           I64[Sp + 8] = block_c9MiV_info;
           R1 = _s9LTn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MkD; else goto c9MiX;
       u9MkD: // global
           call _c9MiV(R1) args: 0, res: 0, upd: 0;
       c9MiX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MiF_info" {
     block_c9MiF_info:
         const _c9MiF;
         const 1;
         const 30;
 },
 _c9Mk8() //  [R1]
         { []
         }
     {offset
       c9Mk8: // global
           if (R1 & 7 == 6) goto u9Mkr; else goto u9Mks;
       u9Mkr: // global
           Sp = Sp + 8;
           call _c9Mkk() args: 0, res: 0, upd: 0;
       u9Mks: // global
           Sp = Sp + 8;
           call _c9Mkg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mk8_info" {
     block_c9Mk8_info:
         const _c9Mk8;
         const 0;
         const 30;
 },
 _c9MjT() //  [R1]
         { []
         }
     {offset
       c9MjT: // global
           if (R1 & 7 == 5) goto u9Mkt; else goto u9Mku;
       u9Mkt: // global
           Sp = Sp + 8;
           call _c9Mkk() args: 0, res: 0, upd: 0;
       u9Mku: // global
           Sp = Sp + 8;
           call _c9Mkg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MjT_info" {
     block_c9MjT_info:
         const _c9MjT;
         const 0;
         const 30;
 },
 _c9MjE() //  [R1]
         { []
         }
     {offset
       c9MjE: // global
           if (R1 & 7 == 4) goto u9Mkv; else goto u9Mkw;
       u9Mkv: // global
           Sp = Sp + 8;
           call _c9Mkk() args: 0, res: 0, upd: 0;
       u9Mkw: // global
           Sp = Sp + 8;
           call _c9Mkg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MjE_info" {
     block_c9MjE_info:
         const _c9MjE;
         const 0;
         const 30;
 },
 _c9Mjp() //  [R1]
         { []
         }
     {offset
       c9Mjp: // global
           if (R1 & 7 == 3) goto u9Mkx; else goto u9Mky;
       u9Mkx: // global
           Sp = Sp + 8;
           call _c9Mkk() args: 0, res: 0, upd: 0;
       u9Mky: // global
           Sp = Sp + 8;
           call _c9Mkg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mjp_info" {
     block_c9Mjp_info:
         const _c9Mjp;
         const 0;
         const 30;
 },
 _c9Mja() //  [R1]
         { []
         }
     {offset
       c9Mja: // global
           if (R1 & 7 == 2) goto u9Mkz; else goto u9MkA;
       u9Mkz: // global
           Sp = Sp + 8;
           call _c9Mkk() args: 0, res: 0, upd: 0;
       u9MkA: // global
           Sp = Sp + 8;
           call _c9Mkg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mja_info" {
     block_c9Mja_info:
         const _c9Mja;
         const 0;
         const 30;
 },
 _c9MiV() //  [R1]
         { []
         }
     {offset
       c9MiV: // global
           if (R1 & 7 == 1) goto u9MkB; else goto u9MkC;
       u9MkB: // global
           Sp = Sp + 8;
           call _c9Mkk() args: 0, res: 0, upd: 0;
       u9MkC: // global
           Sp = Sp + 8;
           call _c9Mkg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MiV_info" {
     block_c9MiV_info:
         const _c9MiV;
         const 0;
         const 30;
 },
 _c9Mkk() //  []
         { []
         }
     {offset
       c9Mkk: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Mkg() //  []
         { []
         }
     {offset
       c9Mkg: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.593679877 UTC

[section ""data" . GHC.Conc.Sync.$fEqBlockReason_closure" {
     GHC.Conc.Sync.$fEqBlockReason_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Conc.Sync.$fEqBlockReason_$c==_closure+2;
         const GHC.Conc.Sync.$fEqBlockReason_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.598072595 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadStatus_$c==_closure" {
     GHC.Conc.Sync.$fEqThreadStatus_$c==_closure:
         const GHC.Conc.Sync.$fEqThreadStatus_$c==_info;
 },
 GHC.Conc.Sync.$fEqThreadStatus_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Mmd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Mme; else goto c9Mmf;
       c9Mme: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqThreadStatus_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Mmf: // global
           I64[Sp - 16] = block_c9Mm4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Mnv; else goto c9Mm5;
       u9Mnv: // global
           call _c9Mm4(R1) args: 0, res: 0, upd: 0;
       c9Mm5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqThreadStatus_$c==_info" {
     GHC.Conc.Sync.$fEqThreadStatus_$c==_info:
         const GHC.Conc.Sync.$fEqThreadStatus_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Mm4() //  [R1]
         { []
         }
     {offset
       c9Mm4: // global
           _s9LTw::P64 = P64[Sp + 8];
           _c9Mmc::P64 = R1 & 7;
           if (_c9Mmc::P64 < 3) goto u9Mni; else goto u9Mnj;
       u9Mni: // global
           if (_c9Mmc::P64 < 2) goto c9Mm8; else goto c9Mm9;
       c9Mm8: // global
           I64[Sp + 8] = block_c9Mmi_info;
           R1 = _s9LTw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Mnr; else goto c9Mmk;
       u9Mnr: // global
           call _c9Mmi(R1) args: 0, res: 0, upd: 0;
       c9Mmk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mm9: // global
           I64[Sp + 8] = block_c9Mmx_info;
           R1 = _s9LTw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Mns; else goto c9Mmz;
       u9Mns: // global
           call _c9Mmx(R1) args: 0, res: 0, upd: 0;
       c9Mmz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Mnj: // global
           if (_c9Mmc::P64 < 4) goto c9Mma; else goto c9Mmb;
       c9Mma: // global
           I64[Sp] = block_c9MmM_info;
           _s9LTA::P64 = P64[R1 + 5];
           R1 = _s9LTw::P64;
           P64[Sp + 8] = _s9LTA::P64;
           if (R1 & 7 != 0) goto u9Mnt; else goto c9MmO;
       u9Mnt: // global
           call _c9MmM(R1) args: 0, res: 0, upd: 0;
       c9MmO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mmb: // global
           I64[Sp + 8] = block_c9Mn1_info;
           R1 = _s9LTw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Mnu; else goto c9Mn3;
       u9Mnu: // global
           call _c9Mn1(R1) args: 0, res: 0, upd: 0;
       c9Mn3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Mm4_info" {
     block_c9Mm4_info:
         const _c9Mm4;
         const 1;
         const 30;
 },
 _c9Mmi() //  [R1]
         { []
         }
     {offset
       c9Mmi: // global
           if (R1 & 7 == 1) goto u9Mnk; else goto u9Mnl;
       u9Mnk: // global
           Sp = Sp + 8;
           call _c9Mnd() args: 0, res: 0, upd: 0;
       u9Mnl: // global
           Sp = Sp + 8;
           call _c9Mn9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mmi_info" {
     block_c9Mmi_info:
         const _c9Mmi;
         const 0;
         const 30;
 },
 _c9Mmx() //  [R1]
         { []
         }
     {offset
       c9Mmx: // global
           if (R1 & 7 == 2) goto u9Mnm; else goto u9Mnn;
       u9Mnm: // global
           Sp = Sp + 8;
           call _c9Mnd() args: 0, res: 0, upd: 0;
       u9Mnn: // global
           Sp = Sp + 8;
           call _c9Mn9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mmx_info" {
     block_c9Mmx_info:
         const _c9Mmx;
         const 0;
         const 30;
 },
 _c9MmM() //  [R1]
         { []
         }
     {offset
       c9MmM: // global
           if (R1 & 7 == 3) goto c9MmY; else goto u9Mno;
       c9MmY: // global
           R3 = P64[R1 + 5];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Conc.Sync.$fEqBlockReason_$c==_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
       u9Mno: // global
           Sp = Sp + 16;
           call _c9Mn9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MmM_info" {
     block_c9MmM_info:
         const _c9MmM;
         const 1;
         const 30;
 },
 _c9Mn1() //  [R1]
         { []
         }
     {offset
       c9Mn1: // global
           if (R1 & 7 == 4) goto u9Mnp; else goto u9Mnq;
       u9Mnp: // global
           Sp = Sp + 8;
           call _c9Mnd() args: 0, res: 0, upd: 0;
       u9Mnq: // global
           Sp = Sp + 8;
           call _c9Mn9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mn1_info" {
     block_c9Mn1_info:
         const _c9Mn1;
         const 0;
         const 30;
 },
 _c9Mnd() //  []
         { []
         }
     {offset
       c9Mnd: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Mn9() //  []
         { []
         }
     {offset
       c9Mn9: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.616078542 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadStatus_$c/=_closure" {
     GHC.Conc.Sync.$fEqThreadStatus_$c/=_closure:
         const GHC.Conc.Sync.$fEqThreadStatus_$c/=_info;
 },
 GHC.Conc.Sync.$fEqThreadStatus_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MoB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MoC; else goto c9MoD;
       c9MoC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqThreadStatus_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MoD: // global
           I64[Sp - 16] = block_c9Mos_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MrO; else goto c9Mot;
       u9MrO: // global
           call _c9Mos(R1) args: 0, res: 0, upd: 0;
       c9Mot: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqThreadStatus_$c/=_info" {
     GHC.Conc.Sync.$fEqThreadStatus_$c/=_info:
         const GHC.Conc.Sync.$fEqThreadStatus_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Mos() //  [R1]
         { []
         }
     {offset
       c9Mos: // global
           _s9LTF::P64 = P64[Sp + 8];
           _c9MoA::P64 = R1 & 7;
           if (_c9MoA::P64 < 3) goto u9Mrp; else goto u9Mrq;
       u9Mrp: // global
           if (_c9MoA::P64 < 2) goto c9Mow; else goto c9Mox;
       c9Mow: // global
           I64[Sp + 8] = block_c9MoG_info;
           R1 = _s9LTF::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MrK; else goto c9MoI;
       u9MrK: // global
           call _c9MoG(R1) args: 0, res: 0, upd: 0;
       c9MoI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mox: // global
           I64[Sp + 8] = block_c9MoV_info;
           R1 = _s9LTF::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MrL; else goto c9MoX;
       u9MrL: // global
           call _c9MoV(R1) args: 0, res: 0, upd: 0;
       c9MoX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Mrq: // global
           if (_c9MoA::P64 < 4) goto c9Moy; else goto c9Moz;
       c9Moy: // global
           I64[Sp] = block_c9Mpa_info;
           _s9LTJ::P64 = P64[R1 + 5];
           R1 = _s9LTF::P64;
           P64[Sp + 8] = _s9LTJ::P64;
           if (R1 & 7 != 0) goto u9MrM; else goto c9Mpc;
       u9MrM: // global
           call _c9Mpa(R1) args: 0, res: 0, upd: 0;
       c9Mpc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Moz: // global
           I64[Sp + 8] = block_c9Mr1_info;
           R1 = _s9LTF::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MrN; else goto c9Mr3;
       u9MrN: // global
           call _c9Mr1(R1) args: 0, res: 0, upd: 0;
       c9Mr3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Mos_info" {
     block_c9Mos_info:
         const _c9Mos;
         const 1;
         const 30;
 },
 _c9MoG() //  [R1]
         { []
         }
     {offset
       c9MoG: // global
           if (R1 & 7 == 1) goto u9Mrr; else goto u9Mrs;
       u9Mrr: // global
           Sp = Sp + 8;
           call _c9Mrd() args: 0, res: 0, upd: 0;
       u9Mrs: // global
           Sp = Sp + 8;
           call _c9Mr9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MoG_info" {
     block_c9MoG_info:
         const _c9MoG;
         const 0;
         const 30;
 },
 _c9MoV() //  [R1]
         { []
         }
     {offset
       c9MoV: // global
           if (R1 & 7 == 2) goto u9Mrt; else goto u9Mru;
       u9Mrt: // global
           Sp = Sp + 8;
           call _c9Mrd() args: 0, res: 0, upd: 0;
       u9Mru: // global
           Sp = Sp + 8;
           call _c9Mr9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MoV_info" {
     block_c9MoV_info:
         const _c9MoV;
         const 0;
         const 30;
 },
 _c9Mpa() //  [R1]
         { []
         }
     {offset
       c9Mpa: // global
           if (R1 & 7 == 3) goto c9Mpn; else goto u9Mrv;
       c9Mpn: // global
           I64[Sp] = block_c9Mpl_info;
           _s9LTL::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9LTL::P64;
           if (R1 & 7 != 0) goto u9MrT; else goto c9Mpo;
       u9MrT: // global
           call _c9Mpl(R1) args: 0, res: 0, upd: 0;
       c9Mpo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Mrv: // global
           Sp = Sp + 16;
           call _c9Mr9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mpa_info" {
     block_c9Mpa_info:
         const _c9Mpa;
         const 1;
         const 30;
 },
 _c9Mpl() //  [R1]
         { []
         }
     {offset
       c9Mpl: // global
           _s9LTL::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Mpv;
               case 2 : goto c9MpL;
               case 3 : goto c9Mq1;
               case 4 : goto c9Mqh;
               case 5 : goto c9Mqx;
               case 6 : goto c9MqN;
           }
       c9MqN: // global
           I64[Sp + 8] = block_c9MqL_info;
           R1 = _s9LTL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ms0; else goto c9MqO;
       u9Ms0: // global
           call _c9MqL(R1) args: 0, res: 0, upd: 0;
       c9MqO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mqx: // global
           I64[Sp + 8] = block_c9Mqv_info;
           R1 = _s9LTL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MrZ; else goto c9Mqy;
       u9MrZ: // global
           call _c9Mqv(R1) args: 0, res: 0, upd: 0;
       c9Mqy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mqh: // global
           I64[Sp + 8] = block_c9Mqf_info;
           R1 = _s9LTL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MrY; else goto c9Mqi;
       u9MrY: // global
           call _c9Mqf(R1) args: 0, res: 0, upd: 0;
       c9Mqi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mq1: // global
           I64[Sp + 8] = block_c9MpZ_info;
           R1 = _s9LTL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MrX; else goto c9Mq2;
       u9MrX: // global
           call _c9MpZ(R1) args: 0, res: 0, upd: 0;
       c9Mq2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MpL: // global
           I64[Sp + 8] = block_c9MpJ_info;
           R1 = _s9LTL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MrW; else goto c9MpM;
       u9MrW: // global
           call _c9MpJ(R1) args: 0, res: 0, upd: 0;
       c9MpM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Mpv: // global
           I64[Sp + 8] = block_c9Mps_info;
           R1 = _s9LTL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MrV; else goto c9Mpw;
       u9MrV: // global
           call _c9Mps(R1) args: 0, res: 0, upd: 0;
       c9Mpw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Mpl_info" {
     block_c9Mpl_info:
         const _c9Mpl;
         const 1;
         const 30;
 },
 _c9MqL() //  [R1]
         { []
         }
     {offset
       c9MqL: // global
           if (R1 & 7 == 6) goto u9Mrw; else goto u9Mrx;
       u9Mrw: // global
           Sp = Sp + 8;
           call _c9Mrd() args: 0, res: 0, upd: 0;
       u9Mrx: // global
           Sp = Sp + 8;
           call _c9Mr9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MqL_info" {
     block_c9MqL_info:
         const _c9MqL;
         const 0;
         const 30;
 },
 _c9Mqv() //  [R1]
         { []
         }
     {offset
       c9Mqv: // global
           if (R1 & 7 == 5) goto u9Mry; else goto u9Mrz;
       u9Mry: // global
           Sp = Sp + 8;
           call _c9Mrd() args: 0, res: 0, upd: 0;
       u9Mrz: // global
           Sp = Sp + 8;
           call _c9Mr9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mqv_info" {
     block_c9Mqv_info:
         const _c9Mqv;
         const 0;
         const 30;
 },
 _c9Mqf() //  [R1]
         { []
         }
     {offset
       c9Mqf: // global
           if (R1 & 7 == 4) goto u9MrA; else goto u9MrB;
       u9MrA: // global
           Sp = Sp + 8;
           call _c9Mrd() args: 0, res: 0, upd: 0;
       u9MrB: // global
           Sp = Sp + 8;
           call _c9Mr9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mqf_info" {
     block_c9Mqf_info:
         const _c9Mqf;
         const 0;
         const 30;
 },
 _c9MpZ() //  [R1]
         { []
         }
     {offset
       c9MpZ: // global
           if (R1 & 7 == 3) goto u9MrC; else goto u9MrD;
       u9MrC: // global
           Sp = Sp + 8;
           call _c9Mrd() args: 0, res: 0, upd: 0;
       u9MrD: // global
           Sp = Sp + 8;
           call _c9Mr9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MpZ_info" {
     block_c9MpZ_info:
         const _c9MpZ;
         const 0;
         const 30;
 },
 _c9MpJ() //  [R1]
         { []
         }
     {offset
       c9MpJ: // global
           if (R1 & 7 == 2) goto u9MrE; else goto u9MrF;
       u9MrE: // global
           Sp = Sp + 8;
           call _c9Mrd() args: 0, res: 0, upd: 0;
       u9MrF: // global
           Sp = Sp + 8;
           call _c9Mr9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MpJ_info" {
     block_c9MpJ_info:
         const _c9MpJ;
         const 0;
         const 30;
 },
 _c9Mps() //  [R1]
         { []
         }
     {offset
       c9Mps: // global
           if (R1 & 7 == 1) goto u9MrG; else goto u9MrH;
       u9MrG: // global
           Sp = Sp + 8;
           call _c9Mrd() args: 0, res: 0, upd: 0;
       u9MrH: // global
           Sp = Sp + 8;
           call _c9Mr9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mps_info" {
     block_c9Mps_info:
         const _c9Mps;
         const 0;
         const 30;
 },
 _c9Mr1() //  [R1]
         { []
         }
     {offset
       c9Mr1: // global
           if (R1 & 7 == 4) goto u9MrI; else goto u9MrJ;
       u9MrI: // global
           Sp = Sp + 8;
           call _c9Mrd() args: 0, res: 0, upd: 0;
       u9MrJ: // global
           Sp = Sp + 8;
           call _c9Mr9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mr1_info" {
     block_c9Mr1_info:
         const _c9Mr1;
         const 0;
         const 30;
 },
 _c9Mrd() //  []
         { []
         }
     {offset
       c9Mrd: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Mr9() //  []
         { []
         }
     {offset
       c9Mr9: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.640501071 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadStatus_closure" {
     GHC.Conc.Sync.$fEqThreadStatus_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Conc.Sync.$fEqThreadStatus_$c==_closure+2;
         const GHC.Conc.Sync.$fEqThreadStatus_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.643078087 UTC

[section ""data" . GHC.Conc.Sync.numSparks1_closure" {
     GHC.Conc.Sync.numSparks1_closure:
         const GHC.Conc.Sync.numSparks1_info;
 },
 GHC.Conc.Sync.numSparks1_entry() //  []
         { []
         }
     {offset
       c9MtY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9MtZ; else goto c9Mu0;
       c9MtZ: // global
           R1 = GHC.Conc.Sync.numSparks1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Mu0: // global
           I64[Sp - 8] = block_c9MtV_info;
           Sp = Sp - 8;
           call stg_numSparks#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.numSparks1_info" {
     GHC.Conc.Sync.numSparks1_info:
         const GHC.Conc.Sync.numSparks1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c9MtV() //  [R1]
         { []
         }
     {offset
       c9MtV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Mu3; else goto c9Mu2;
       c9Mu3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Mu2: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MtV_info" {
     block_c9MtV_info:
         const _c9MtV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.648092156 UTC

[section ""data" . GHC.Conc.Sync.numSparks_closure" {
     GHC.Conc.Sync.numSparks_closure:
         const GHC.Conc.Sync.numSparks_info;
 },
 GHC.Conc.Sync.numSparks_entry() //  []
         { []
         }
     {offset
       c9Muj: // global
           call GHC.Conc.Sync.numSparks1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.numSparks_info" {
     GHC.Conc.Sync.numSparks_info:
         const GHC.Conc.Sync.numSparks_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.652470762 UTC

[section ""data" . GHC.Conc.Sync.throwTo1_closure" {
     GHC.Conc.Sync.throwTo1_closure:
         const GHC.Conc.Sync.throwTo1_info;
 },
 sat_s9LU5_entry() //  [R1]
         { []
         }
     {offset
       c9MuD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9MuE; else goto c9MuF;
       c9MuE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9MuF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9LU5_info" {
     sat_s9LU5_info:
         const sat_s9LU5_entry;
         const 2;
         const 18;
 },
 GHC.Conc.Sync.throwTo1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9MuG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9MuI; else goto c9MuJ;
       c9MuI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.throwTo1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MuJ: // global
           I64[Sp - 24] = block_c9Muu_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9MuP; else goto c9Muv;
       u9MuP: // global
           call _c9Muu(R1) args: 0, res: 0, upd: 0;
       c9Muv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.throwTo1_info" {
     GHC.Conc.Sync.throwTo1_info:
         const GHC.Conc.Sync.throwTo1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9Muu() //  [R1]
         { []
         }
     {offset
       c9Muu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9MuM; else goto c9MuL;
       c9MuM: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9MuL: // global
           _s9LU4::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9LU5_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c9MuH_info;
           R2 = Hp - 24;
           R1 = _s9LU4::P64;
           Sp = Sp + 16;
           call stg_killThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Muu_info" {
     block_c9Muu_info:
         const _c9Muu;
         const 2;
         const 30;
 },
 _c9MuH() //  []
         { []
         }
     {offset
       c9MuH: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MuH_info" {
     block_c9MuH_info:
         const _c9MuH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.662232374 UTC

[section ""data" . GHC.Conc.Sync.throwTo_closure" {
     GHC.Conc.Sync.throwTo_closure:
         const GHC.Conc.Sync.throwTo_info;
 },
 GHC.Conc.Sync.throwTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9Mvk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.throwTo1_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.throwTo_info" {
     GHC.Conc.Sync.throwTo_info:
         const GHC.Conc.Sync.throwTo_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.665710659 UTC

[section ""data" . GHC.Conc.Sync.myThreadId1_closure" {
     GHC.Conc.Sync.myThreadId1_closure:
         const GHC.Conc.Sync.myThreadId1_info;
 },
 GHC.Conc.Sync.myThreadId1_entry() //  []
         { []
         }
     {offset
       c9Mvw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9MvA; else goto c9Mvz;
       c9MvA: // global
           HpAlloc = 16;
           R1 = GHC.Conc.Sync.myThreadId1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Mvz: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           I64[Hp] = CurrentTSO;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.myThreadId1_info" {
     GHC.Conc.Sync.myThreadId1_info:
         const GHC.Conc.Sync.myThreadId1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.6691396 UTC

[section ""data" . GHC.Conc.Sync.myThreadId_closure" {
     GHC.Conc.Sync.myThreadId_closure:
         const GHC.Conc.Sync.myThreadId_info;
 },
 GHC.Conc.Sync.myThreadId_entry() //  []
         { []
         }
     {offset
       c9MvM: // global
           call GHC.Conc.Sync.myThreadId1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.myThreadId_info" {
     GHC.Conc.Sync.myThreadId_info:
         const GHC.Conc.Sync.myThreadId_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.672692558 UTC

[section ""data" . GHC.Conc.Sync.yield1_closure" {
     GHC.Conc.Sync.yield1_closure:
         const GHC.Conc.Sync.yield1_info;
 },
 GHC.Conc.Sync.yield1_entry() //  []
         { []
         }
     {offset
       c9MvZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Mw0; else goto c9Mw1;
       c9Mw0: // global
           R1 = GHC.Conc.Sync.yield1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Mw1: // global
           I64[Sp - 8] = block_c9MvX_info;
           Sp = Sp - 8;
           call stg_yield#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.yield1_info" {
     GHC.Conc.Sync.yield1_info:
         const GHC.Conc.Sync.yield1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c9MvX() //  []
         { []
         }
     {offset
       c9MvX: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MvX_info" {
     block_c9MvX_info:
         const _c9MvX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.677264351 UTC

[section ""data" . GHC.Conc.Sync.yield_closure" {
     GHC.Conc.Sync.yield_closure:
         const GHC.Conc.Sync.yield_info;
 },
 GHC.Conc.Sync.yield_entry() //  []
         { []
         }
     {offset
       c9Mwi: // global
           call GHC.Conc.Sync.yield1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.yield_info" {
     GHC.Conc.Sync.yield_info:
         const GHC.Conc.Sync.yield_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.682069723 UTC

[section ""data" . GHC.Conc.Sync.labelThread1_closure" {
     GHC.Conc.Sync.labelThread1_closure:
         const GHC.Conc.Sync.labelThread1_info;
         const 0;
 },
 sat_s9LUo_entry() //  [R1, R2]
         { []
         }
     {offset
       c9MwG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MwK; else goto c9MwL;
       c9MwK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9MwL: // global
           I64[Sp - 16] = block_c9MwD_info;
           _s9LUi::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _s9LUi::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MwP; else goto c9MwE;
       u9MwP: // global
           call _c9MwD(R1) args: 0, res: 0, upd: 0;
       c9MwE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9LUo_info" {
     sat_s9LUo_info:
         const sat_s9LUo_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9MwD() //  [R1]
         { []
         }
     {offset
       c9MwD: // global
           _s9LUi::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9MwJ_info;
           R2 = I64[R1 + 7];
           R1 = _s9LUi::P64;
           Sp = Sp + 8;
           call stg_labelThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MwD_info" {
     block_c9MwD_info:
         const _c9MwD;
         const 1;
         const 30;
 },
 _c9MwJ() //  []
         { []
         }
     {offset
       c9MwJ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MwJ_info" {
     block_c9MwJ_info:
         const _c9MwJ;
         const 0;
         const 30;
 },
 GHC.Conc.Sync.labelThread1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MwQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MwR; else goto c9MwS;
       c9MwR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.labelThread1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MwS: // global
           I64[Sp - 16] = block_c9Mwt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MwW; else goto c9Mwu;
       u9MwW: // global
           call _c9Mwt(R1) args: 0, res: 0, upd: 0;
       c9Mwu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.labelThread1_info" {
     GHC.Conc.Sync.labelThread1_info:
         const GHC.Conc.Sync.labelThread1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S9MdE_srt+64;
 },
 _c9Mwt() //  [R1]
         { []
         }
     {offset
       c9Mwt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9MwV; else goto c9MwU;
       c9MwV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9MwU: // global
           _s9LUi::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s9LUo_info;
           P64[Hp] = _s9LUi::P64;
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Mwt_info" {
     block_c9Mwt_info:
         const _c9Mwt;
         const 1;
         const 4294967326;
         const S9MdE_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.692237214 UTC

[section ""data" . GHC.Conc.Sync.labelThread_closure" {
     GHC.Conc.Sync.labelThread_closure:
         const GHC.Conc.Sync.labelThread_info;
         const 0;
 },
 GHC.Conc.Sync.labelThread_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Mxr: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.labelThread1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.labelThread_info" {
     GHC.Conc.Sync.labelThread_info:
         const GHC.Conc.Sync.labelThread_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S9MdE_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.695829445 UTC

[section ""data" . GHC.Conc.Sync.pseq_closure" {
     GHC.Conc.Sync.pseq_closure:
         const GHC.Conc.Sync.pseq_info;
 },
 GHC.Conc.Sync.pseq_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MxE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MxF; else goto c9MxG;
       c9MxF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.pseq_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MxG: // global
           I64[Sp - 16] = block_c9MxC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.pseq_info" {
     GHC.Conc.Sync.pseq_info:
         const GHC.Conc.Sync.pseq_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9MxC() //  []
         { []
         }
     {offset
       c9MxC: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MxC_info" {
     block_c9MxC_info:
         const _c9MxC;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.701073283 UTC

[section ""data" . GHC.Conc.Sync.par_closure" {
     GHC.Conc.Sync.par_closure:
         const GHC.Conc.Sync.par_info;
 },
 GHC.Conc.Sync.par_entry() //  [R2, R3]
         { []
         }
     {offset
       c9My0: // global
           _s9LUt::P64 = R3;
           (_c9MxV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [] newSpark(BaseReg, R2);
           R1 = _s9LUt::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.par_info" {
     GHC.Conc.Sync.par_info:
         const GHC.Conc.Sync.par_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.705159416 UTC

[section ""data" . GHC.Conc.Sync.runSparks_loop_closure" {
     GHC.Conc.Sync.runSparks_loop_closure:
         const GHC.Conc.Sync.runSparks_loop_info;
 },
 GHC.Conc.Sync.runSparks_loop_entry() //  []
         { []
         }
     {offset
       c9Myk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Myl; else goto u9Myt;
       c9Myl: // global
           R1 = GHC.Conc.Sync.runSparks_loop_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       u9Myt: // global
           call _c9My9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.runSparks_loop_info" {
     GHC.Conc.Sync.runSparks_loop_info:
         const GHC.Conc.Sync.runSparks_loop_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c9My9() //  []
         { []
         }
     {offset
       c9My9: // global
           I64[Sp - 8] = block_c9Myc_info;
           Sp = Sp - 8;
           call stg_getSpark#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Myc() //  [R1, R2]
         { []
         }
     {offset
       c9Myc: // global
           if (R1 == 0) goto c9Myj; else goto c9Myi;
       c9Myj: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Myi: // global
           I64[Sp] = block_c9Myp_info;
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Myc_info" {
     block_c9Myc_info:
         const _c9Myc;
         const 0;
         const 30;
 },
 _c9Myp() //  []
         { []
         }
     {offset
       c9Myp: // global
           Sp = Sp + 8;
           call _c9My9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Myp_info" {
     block_c9Myp_info:
         const _c9Myp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.711909889 UTC

[section ""data" . GHC.Conc.Sync.runSparks_closure" {
     GHC.Conc.Sync.runSparks_closure:
         const GHC.Conc.Sync.runSparks_info;
 },
 GHC.Conc.Sync.runSparks_entry() //  []
         { []
         }
     {offset
       c9MyQ: // global
           call GHC.Conc.Sync.runSparks_loop_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.runSparks_info" {
     GHC.Conc.Sync.runSparks_info:
         const GHC.Conc.Sync.runSparks_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.716930371 UTC

[section ""data" . GHC.Conc.Sync.threadCapability1_closure" {
     GHC.Conc.Sync.threadCapability1_closure:
         const GHC.Conc.Sync.threadCapability1_info;
 },
 sat_s9LUN_entry() //  [R1]
         { []
         }
     {offset
       c9Mzi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Mzj; else goto c9Mzk;
       c9Mzj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Mzk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c9Mzh; else goto c9Mzg;
       c9Mzh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9Mzg: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9LUN_info" {
     sat_s9LUN_info:
         const sat_s9LUN_entry;
         const 4294967296;
         const 17;
 },
 GHC.Conc.Sync.threadCapability1_entry() //  [R2]
         { []
         }
     {offset
       c9Mzl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Mzo; else goto c9Mzp;
       c9Mzo: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.threadCapability1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Mzp: // global
           I64[Sp - 8] = block_c9Mz1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Mzw; else goto c9Mz2;
       u9Mzw: // global
           call _c9Mz1(R1) args: 0, res: 0, upd: 0;
       c9Mz2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.threadCapability1_info" {
     GHC.Conc.Sync.threadCapability1_info:
         const GHC.Conc.Sync.threadCapability1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9Mz1() //  [R1]
         { []
         }
     {offset
       c9Mz1: // global
           I64[Sp] = block_c9Mz6_info;
           R1 = P64[R1 + 7];
           call stg_threadStatus#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Mz1_info" {
     block_c9Mz1_info:
         const _c9Mz1;
         const 0;
         const 30;
 },
 _c9Mz6() //  [R2, R3]
         { []
         }
     {offset
       c9Mz6: // global
           I64[Sp - 8] = R3;
           I64[Sp] = R2;
           Sp = Sp - 16;
           call _c9Mz7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Mz6_info" {
     block_c9Mz6_info:
         const _c9Mz6;
         const 0;
         const 30;
 },
 _c9Mz7() //  []
         { []
         }
     {offset
       c9Mz7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c9Mzt; else goto c9Mzs;
       c9Mzt: // global
           HpAlloc = 64;
           I64[Sp] = block_c9Mz7_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9Mzs: // global
           I64[Hp - 56] = sat_s9LUN_info;
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Mz7_info" {
     block_c9Mz7_info:
         const _c9Mz7;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.727427187 UTC

[section ""data" . GHC.Conc.Sync.threadCapability_closure" {
     GHC.Conc.Sync.threadCapability_closure:
         const GHC.Conc.Sync.threadCapability_info;
 },
 GHC.Conc.Sync.threadCapability_entry() //  [R2]
         { []
         }
     {offset
       c9MAa: // global
           R2 = R2;
           call GHC.Conc.Sync.threadCapability1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.threadCapability_info" {
     GHC.Conc.Sync.threadCapability_info:
         const GHC.Conc.Sync.threadCapability_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.731282401 UTC

[section ""data" . GHC.Conc.Sync.mkWeakThreadId1_closure" {
     GHC.Conc.Sync.mkWeakThreadId1_closure:
         const GHC.Conc.Sync.mkWeakThreadId1_info;
 },
 GHC.Conc.Sync.mkWeakThreadId1_entry() //  [R2]
         { []
         }
     {offset
       c9MAo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9MAu; else goto c9MAv;
       c9MAu: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.mkWeakThreadId1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9MAv: // global
           I64[Sp - 8] = block_c9MAl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9MAA; else goto c9MAm;
       u9MAA: // global
           call _c9MAl(R1) args: 0, res: 0, upd: 0;
       c9MAm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.mkWeakThreadId1_info" {
     GHC.Conc.Sync.mkWeakThreadId1_info:
         const GHC.Conc.Sync.mkWeakThreadId1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9MAl() //  [R1]
         { []
         }
     {offset
       c9MAl: // global
           I64[Sp] = block_c9MAr_info;
           R2 = R1;
           R1 = P64[R1 + 7];
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MAl_info" {
     block_c9MAl_info:
         const _c9MAl;
         const 0;
         const 30;
 },
 _c9MAr() //  [R1]
         { []
         }
     {offset
       c9MAr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9MAz; else goto c9MAy;
       c9MAz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9MAy: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MAr_info" {
     block_c9MAr_info:
         const _c9MAr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.737944886 UTC

[section ""data" . GHC.Conc.Sync.mkWeakThreadId_closure" {
     GHC.Conc.Sync.mkWeakThreadId_closure:
         const GHC.Conc.Sync.mkWeakThreadId_info;
 },
 GHC.Conc.Sync.mkWeakThreadId_entry() //  [R2]
         { []
         }
     {offset
       c9MAV: // global
           R2 = R2;
           call GHC.Conc.Sync.mkWeakThreadId1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.mkWeakThreadId_info" {
     GHC.Conc.Sync.mkWeakThreadId_info:
         const GHC.Conc.Sync.mkWeakThreadId_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.742149768 UTC

[section ""data" . GHC.Conc.Sync.newStablePtrPrimMVar1_closure" {
     GHC.Conc.Sync.newStablePtrPrimMVar1_closure:
         const GHC.Conc.Sync.newStablePtrPrimMVar1_info;
 },
 GHC.Conc.Sync.newStablePtrPrimMVar1_entry() //  [R2]
         { []
         }
     {offset
       c9MB9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9MBf; else goto c9MBg;
       c9MBf: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.newStablePtrPrimMVar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9MBg: // global
           I64[Sp - 8] = block_c9MB6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9MBl; else goto c9MB7;
       u9MBl: // global
           call _c9MB6(R1) args: 0, res: 0, upd: 0;
       c9MB7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.newStablePtrPrimMVar1_info" {
     GHC.Conc.Sync.newStablePtrPrimMVar1_info:
         const GHC.Conc.Sync.newStablePtrPrimMVar1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9MB6() //  [R1]
         { []
         }
     {offset
       c9MB6: // global
           I64[Sp] = block_c9MBc_info;
           R1 = P64[R1 + 7];
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MB6_info" {
     block_c9MB6_info:
         const _c9MB6;
         const 0;
         const 30;
 },
 _c9MBc() //  [R1]
         { []
         }
     {offset
       c9MBc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9MBk; else goto c9MBj;
       c9MBk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9MBj: // global
           I64[Hp - 8] = GHC.Stable.StablePtr_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MBc_info" {
     block_c9MBc_info:
         const _c9MBc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.748545579 UTC

[section ""data" . GHC.Conc.Sync.newStablePtrPrimMVar_closure" {
     GHC.Conc.Sync.newStablePtrPrimMVar_closure:
         const GHC.Conc.Sync.newStablePtrPrimMVar_info;
 },
 GHC.Conc.Sync.newStablePtrPrimMVar_entry() //  [R2]
         { []
         }
     {offset
       c9MBG: // global
           R2 = R2;
           call GHC.Conc.Sync.newStablePtrPrimMVar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.newStablePtrPrimMVar_info" {
     GHC.Conc.Sync.newStablePtrPrimMVar_info:
         const GHC.Conc.Sync.newStablePtrPrimMVar_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.752053658 UTC

[section ""data" . $c>>=_r9FuK_closure" {
     $c>>=_r9FuK_closure:
         const $c>>=_r9FuK_info;
 },
 $c>>=_r9FuK_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MBT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MBU; else goto c9MBV;
       c9MBU: // global
           R3 = R3;
           R2 = R2;
           R1 = $c>>=_r9FuK_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MBV: // global
           I64[Sp - 16] = block_c9MBR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $c>>=_r9FuK_info" {
     $c>>=_r9FuK_info:
         const $c>>=_r9FuK_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9MBR() //  [R1]
         { []
         }
     {offset
       c9MBR: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MBR_info" {
     block_c9MBR_info:
         const _c9MBR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.757653161 UTC

[section ""data" . GHC.Conc.Sync.$fMonadSTM_$c>>=_closure" {
     GHC.Conc.Sync.$fMonadSTM_$c>>=_closure:
         const GHC.Conc.Sync.$fMonadSTM_$c>>=_info;
 },
 GHC.Conc.Sync.$fMonadSTM_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MCa: // global
           R3 = R3;
           R2 = R2;
           call $c>>=_r9FuK_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fMonadSTM_$c>>=_info" {
     GHC.Conc.Sync.$fMonadSTM_$c>>=_info:
         const GHC.Conc.Sync.$fMonadSTM_$c>>=_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.761094984 UTC

[section ""data" . $c*>_r9FuL_closure" {
     $c*>_r9FuL_closure:
         const $c*>_r9FuL_info;
 },
 $c*>_r9FuL_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MCn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MCo; else goto c9MCp;
       c9MCo: // global
           R3 = R3;
           R2 = R2;
           R1 = $c*>_r9FuL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MCp: // global
           I64[Sp - 16] = block_c9MCl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $c*>_r9FuL_info" {
     $c*>_r9FuL_info:
         const $c*>_r9FuL_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9MCl() //  []
         { []
         }
     {offset
       c9MCl: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MCl_info" {
     block_c9MCl_info:
         const _c9MCl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.765919339 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM_$c*>_closure" {
     GHC.Conc.Sync.$fApplicativeSTM_$c*>_closure:
         const GHC.Conc.Sync.$fApplicativeSTM_$c*>_info;
 },
 GHC.Conc.Sync.$fApplicativeSTM_$c*>_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MCE: // global
           R3 = R3;
           R2 = R2;
           call $c*>_r9FuL_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fApplicativeSTM_$c*>_info" {
     GHC.Conc.Sync.$fApplicativeSTM_$c*>_info:
         const GHC.Conc.Sync.$fApplicativeSTM_$c*>_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.769173294 UTC

[section ""data" . GHC.Conc.Sync.orElse_closure" {
     GHC.Conc.Sync.orElse_closure:
         const GHC.Conc.Sync.orElse_info;
 },
 GHC.Conc.Sync.orElse_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MCP: // global
           _B3::P64 = R2;
           R2 = R3;
           R1 = _B3::P64;
           call stg_catchRetry#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.orElse_info" {
     GHC.Conc.Sync.orElse_info:
         const GHC.Conc.Sync.orElse_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.774250051 UTC

[section ""data" . GHC.Conc.Sync.catchSTM1_closure" {
     GHC.Conc.Sync.catchSTM1_closure:
         const GHC.Conc.Sync.catchSTM1_info;
 },
 sat_s9LVn_entry() //  [R1]
         { []
         }
     {offset
       c9MDe: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9LVn_info" {
     sat_s9LVn_info:
         const sat_s9LVn_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9LVp_entry() //  [R1, R2]
         { []
         }
     {offset
       c9MDl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9MDm; else goto c9MDn;
       c9MDm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9MDn: // global
           I64[Sp - 24] = block_c9MD5_info;
           _s9LVl::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = _s9LVl::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s9LVl::P64;
           Sp = Sp - 40;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9LVp_info" {
     sat_s9LVp_info:
         const sat_s9LVp_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9MD5() //  [R1]
         { []
         }
     {offset
       c9MD5: // global
           if (R1 & 7 == 1) goto c9MDi; else goto c9MDj;
       c9MDi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9MDq; else goto c9MDp;
       c9MDq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9MDp: // global
           I64[Hp - 8] = sat_s9LVn_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9MDj: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MD5_info" {
     block_c9MD5_info:
         const _c9MD5;
         const 2;
         const 30;
 },
 GHC.Conc.Sync.catchSTM1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9MDu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9MDy; else goto c9MDx;
       c9MDy: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.catchSTM1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MDx: // global
           I64[Hp - 16] = sat_s9LVp_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 15;
           R1 = R3;
           call stg_catchSTM#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.catchSTM1_info" {
     GHC.Conc.Sync.catchSTM1_info:
         const GHC.Conc.Sync.catchSTM1_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.783208906 UTC

[section ""data" . GHC.Conc.Sync.catchSTM_closure" {
     GHC.Conc.Sync.catchSTM_closure:
         const GHC.Conc.Sync.catchSTM_info;
 },
 GHC.Conc.Sync.catchSTM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9ME0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.catchSTM1_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.catchSTM_info" {
     GHC.Conc.Sync.catchSTM_info:
         const GHC.Conc.Sync.catchSTM_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.786561974 UTC

[section ""data" . $cpure_r9FuM_closure" {
     $cpure_r9FuM_closure:
         const $cpure_r9FuM_info;
 },
 $cpure_r9FuM_entry() //  [R2]
         { []
         }
     {offset
       c9MEb: // global
           R1 = R2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $cpure_r9FuM_info" {
     $cpure_r9FuM_info:
         const $cpure_r9FuM_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.790400002 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM_$cpure_closure" {
     GHC.Conc.Sync.$fApplicativeSTM_$cpure_closure:
         const GHC.Conc.Sync.$fApplicativeSTM_$cpure_info;
 },
 GHC.Conc.Sync.$fApplicativeSTM_$cpure_entry() //  [R2]
         { []
         }
     {offset
       c9MEn: // global
           R2 = R2;
           call $cpure_r9FuM_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fApplicativeSTM_$cpure_info" {
     GHC.Conc.Sync.$fApplicativeSTM_$cpure_info:
         const GHC.Conc.Sync.$fApplicativeSTM_$cpure_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.79344966 UTC

[section ""data" . GHC.Conc.Sync.unsafeIOToSTM1_closure" {
     GHC.Conc.Sync.unsafeIOToSTM1_closure:
         const GHC.Conc.Sync.unsafeIOToSTM1_info;
 },
 GHC.Conc.Sync.unsafeIOToSTM1_entry() //  [R2]
         { []
         }
     {offset
       c9MEy: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.unsafeIOToSTM1_info" {
     GHC.Conc.Sync.unsafeIOToSTM1_info:
         const GHC.Conc.Sync.unsafeIOToSTM1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.796571131 UTC

[section ""data" . GHC.Conc.Sync.unsafeIOToSTM_closure" {
     GHC.Conc.Sync.unsafeIOToSTM_closure:
         const GHC.Conc.Sync.unsafeIOToSTM_info;
 },
 GHC.Conc.Sync.unsafeIOToSTM_entry() //  [R2]
         { []
         }
     {offset
       c9MEJ: // global
           R2 = R2;
           call GHC.Conc.Sync.unsafeIOToSTM1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.unsafeIOToSTM_info" {
     GHC.Conc.Sync.unsafeIOToSTM_info:
         const GHC.Conc.Sync.unsafeIOToSTM_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.799767472 UTC

[section ""data" . GHC.Conc.Sync.atomically_closure" {
     GHC.Conc.Sync.atomically_closure:
         const GHC.Conc.Sync.atomically_info;
 },
 GHC.Conc.Sync.atomically_entry() //  [R2]
         { []
         }
     {offset
       c9MEU: // global
           R1 = R2;
           call stg_atomically#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.atomically_info" {
     GHC.Conc.Sync.atomically_info:
         const GHC.Conc.Sync.atomically_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.802809799 UTC

[section ""data" . GHC.Conc.Sync.retry_closure" {
     GHC.Conc.Sync.retry_closure:
         const GHC.Conc.Sync.retry_info;
 },
 GHC.Conc.Sync.retry_entry() //  []
         { []
         }
     {offset
       c9MF5: // global
           call stg_retry#() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.retry_info" {
     GHC.Conc.Sync.retry_info:
         const GHC.Conc.Sync.retry_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.806537691 UTC

[section ""data" . GHC.Conc.Sync.throwSTM1_closure" {
     GHC.Conc.Sync.throwSTM1_closure:
         const GHC.Conc.Sync.throwSTM1_info;
 },
 sat_s9LVw_entry() //  [R1]
         { []
         }
     {offset
       c9MFk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9MFl; else goto c9MFm;
       c9MFl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9MFm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9LVw_info" {
     sat_s9LVw_info:
         const sat_s9LVw_entry;
         const 2;
         const 18;
 },
 GHC.Conc.Sync.throwSTM1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MFn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9MFr; else goto c9MFq;
       c9MFr: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.throwSTM1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MFq: // global
           I64[Hp - 24] = sat_s9LVw_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.throwSTM1_info" {
     GHC.Conc.Sync.throwSTM1_info:
         const GHC.Conc.Sync.throwSTM1_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.811885679 UTC

[section ""data" . GHC.Conc.Sync.throwSTM_closure" {
     GHC.Conc.Sync.throwSTM_closure:
         const GHC.Conc.Sync.throwSTM_info;
 },
 GHC.Conc.Sync.throwSTM_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MFI: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.throwSTM1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.throwSTM_info" {
     GHC.Conc.Sync.throwSTM_info:
         const GHC.Conc.Sync.throwSTM_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.815584713 UTC

[section ""data" . GHC.Conc.Sync.newTVar1_closure" {
     GHC.Conc.Sync.newTVar1_closure:
         const GHC.Conc.Sync.newTVar1_info;
 },
 GHC.Conc.Sync.newTVar1_entry() //  [R2]
         { []
         }
     {offset
       c9MFW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9MFX; else goto c9MFY;
       c9MFX: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.newTVar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9MFY: // global
           I64[Sp - 8] = block_c9MFT_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_newTVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.newTVar1_info" {
     GHC.Conc.Sync.newTVar1_info:
         const GHC.Conc.Sync.newTVar1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9MFT() //  [R1]
         { []
         }
     {offset
       c9MFT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9MG1; else goto c9MG0;
       c9MG1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9MG0: // global
           I64[Hp - 8] = GHC.Conc.Sync.TVar_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MFT_info" {
     block_c9MFT_info:
         const _c9MFT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.82103116 UTC

[section ""data" . GHC.Conc.Sync.newTVar_closure" {
     GHC.Conc.Sync.newTVar_closure:
         const GHC.Conc.Sync.newTVar_info;
 },
 GHC.Conc.Sync.newTVar_entry() //  [R2]
         { []
         }
     {offset
       c9MGh: // global
           R2 = R2;
           call GHC.Conc.Sync.newTVar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.newTVar_info" {
     GHC.Conc.Sync.newTVar_info:
         const GHC.Conc.Sync.newTVar_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.824825101 UTC

[section ""data" . GHC.Conc.Sync.newTVarIO_closure" {
     GHC.Conc.Sync.newTVarIO_closure:
         const GHC.Conc.Sync.newTVarIO_info;
 },
 GHC.Conc.Sync.newTVarIO_entry() //  [R2]
         { []
         }
     {offset
       c9MGs: // global
           R2 = R2;
           call GHC.Conc.Sync.newTVar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.newTVarIO_info" {
     GHC.Conc.Sync.newTVarIO_info:
         const GHC.Conc.Sync.newTVarIO_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.828430857 UTC

[section ""data" . GHC.Conc.Sync.readTVarIO1_closure" {
     GHC.Conc.Sync.readTVarIO1_closure:
         const GHC.Conc.Sync.readTVarIO1_info;
 },
 GHC.Conc.Sync.readTVarIO1_entry() //  [R2]
         { []
         }
     {offset
       c9MGG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9MGH; else goto c9MGI;
       c9MGH: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.readTVarIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9MGI: // global
           I64[Sp - 8] = block_c9MGD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9MGM; else goto c9MGE;
       u9MGM: // global
           call _c9MGD(R1) args: 0, res: 0, upd: 0;
       c9MGE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.readTVarIO1_info" {
     GHC.Conc.Sync.readTVarIO1_info:
         const GHC.Conc.Sync.readTVarIO1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9MGD() //  [R1]
         { []
         }
     {offset
       c9MGD: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_readTVarIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MGD_info" {
     block_c9MGD_info:
         const _c9MGD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.8336885 UTC

[section ""data" . GHC.Conc.Sync.readTVarIO_closure" {
     GHC.Conc.Sync.readTVarIO_closure:
         const GHC.Conc.Sync.readTVarIO_info;
 },
 GHC.Conc.Sync.readTVarIO_entry() //  [R2]
         { []
         }
     {offset
       c9MH1: // global
           R2 = R2;
           call GHC.Conc.Sync.readTVarIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.readTVarIO_info" {
     GHC.Conc.Sync.readTVarIO_info:
         const GHC.Conc.Sync.readTVarIO_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.837132617 UTC

[section ""data" . GHC.Conc.Sync.readTVar1_closure" {
     GHC.Conc.Sync.readTVar1_closure:
         const GHC.Conc.Sync.readTVar1_info;
 },
 GHC.Conc.Sync.readTVar1_entry() //  [R2]
         { []
         }
     {offset
       c9MHf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9MHg; else goto c9MHh;
       c9MHg: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.readTVar1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9MHh: // global
           I64[Sp - 8] = block_c9MHc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9MHl; else goto c9MHd;
       u9MHl: // global
           call _c9MHc(R1) args: 0, res: 0, upd: 0;
       c9MHd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.readTVar1_info" {
     GHC.Conc.Sync.readTVar1_info:
         const GHC.Conc.Sync.readTVar1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9MHc() //  [R1]
         { []
         }
     {offset
       c9MHc: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_readTVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MHc_info" {
     block_c9MHc_info:
         const _c9MHc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.841965525 UTC

[section ""data" . GHC.Conc.Sync.readTVar_closure" {
     GHC.Conc.Sync.readTVar_closure:
         const GHC.Conc.Sync.readTVar_info;
 },
 GHC.Conc.Sync.readTVar_entry() //  [R2]
         { []
         }
     {offset
       c9MHA: // global
           R2 = R2;
           call GHC.Conc.Sync.readTVar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.readTVar_info" {
     GHC.Conc.Sync.readTVar_info:
         const GHC.Conc.Sync.readTVar_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.846079901 UTC

[section ""data" . GHC.Conc.Sync.writeTVar1_closure" {
     GHC.Conc.Sync.writeTVar1_closure:
         const GHC.Conc.Sync.writeTVar1_info;
 },
 GHC.Conc.Sync.writeTVar1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MHO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MHS; else goto c9MHT;
       c9MHS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.writeTVar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MHT: // global
           I64[Sp - 16] = block_c9MHL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MHX; else goto c9MHM;
       u9MHX: // global
           call _c9MHL(R1) args: 0, res: 0, upd: 0;
       c9MHM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.writeTVar1_info" {
     GHC.Conc.Sync.writeTVar1_info:
         const GHC.Conc.Sync.writeTVar1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9MHL() //  [R1]
         { []
         }
     {offset
       c9MHL: // global
           _s9LVM::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9MHR_info;
           R2 = _s9LVM::P64;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MHL_info" {
     block_c9MHL_info:
         const _c9MHL;
         const 1;
         const 30;
 },
 _c9MHR() //  []
         { []
         }
     {offset
       c9MHR: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MHR_info" {
     block_c9MHR_info:
         const _c9MHR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.852920215 UTC

[section ""data" . GHC.Conc.Sync.writeTVar_closure" {
     GHC.Conc.Sync.writeTVar_closure:
         const GHC.Conc.Sync.writeTVar_info;
 },
 GHC.Conc.Sync.writeTVar_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MIi: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.writeTVar1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.writeTVar_info" {
     GHC.Conc.Sync.writeTVar_info:
         const GHC.Conc.Sync.writeTVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.860115525 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$ccompare_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$ccompare_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$ccompare_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MIE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MIF; else goto c9MIG;
       c9MIF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MIG: // global
           I64[Sp - 16] = block_c9MIt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MLJ; else goto c9MIu;
       u9MLJ: // global
           call _c9MIt(R1) args: 0, res: 0, upd: 0;
       c9MIu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$ccompare_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$ccompare_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9MIt() //  [R1]
         { []
         }
     {offset
       c9MIt: // global
           _s9LVS::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9MIx;
               case 2 : goto c9MIy;
               case 3 : goto c9MIz;
               case 4 : goto c9MIA;
               case 5 : goto c9MIB;
               case 6 : goto c9MIC;
           }
       c9MIC: // global
           I64[Sp + 8] = block_c9MKQ_info;
           R1 = _s9LVS::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MLI; else goto c9MKS;
       u9MLI: // global
           call _c9MKQ(R1) args: 0, res: 0, upd: 0;
       c9MKS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MIB: // global
           I64[Sp + 8] = block_c9MKx_info;
           R1 = _s9LVS::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MLH; else goto c9MKz;
       u9MLH: // global
           call _c9MKx(R1) args: 0, res: 0, upd: 0;
       c9MKz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MIA: // global
           I64[Sp + 8] = block_c9MKa_info;
           R1 = _s9LVS::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MLG; else goto c9MKc;
       u9MLG: // global
           call _c9MKa(R1) args: 0, res: 0, upd: 0;
       c9MKc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MIz: // global
           I64[Sp + 8] = block_c9MJJ_info;
           R1 = _s9LVS::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MLF; else goto c9MJL;
       u9MLF: // global
           call _c9MJJ(R1) args: 0, res: 0, upd: 0;
       c9MJL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MIy: // global
           I64[Sp + 8] = block_c9MJe_info;
           R1 = _s9LVS::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MLE; else goto c9MJg;
       u9MLE: // global
           call _c9MJe(R1) args: 0, res: 0, upd: 0;
       c9MJg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MIx: // global
           I64[Sp + 8] = block_c9MIJ_info;
           R1 = _s9LVS::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MLD; else goto c9MIL;
       u9MLD: // global
           call _c9MIJ(R1) args: 0, res: 0, upd: 0;
       c9MIL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MIt_info" {
     block_c9MIt_info:
         const _c9MIt;
         const 1;
         const 30;
 },
 _c9MKQ() //  [R1]
         { []
         }
     {offset
       c9MKQ: // global
           if (R1 & 7 == 6) goto u9MLe; else goto u9MLf;
       u9MLe: // global
           Sp = Sp + 8;
           call _c9ML2() args: 0, res: 0, upd: 0;
       u9MLf: // global
           Sp = Sp + 8;
           call _c9MKY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MKQ_info" {
     block_c9MKQ_info:
         const _c9MKQ;
         const 0;
         const 30;
 },
 _c9MKx() //  [R1]
         { []
         }
     {offset
       c9MKx: // global
           _c9ML4::P64 = R1 & 7;
           if (_c9ML4::P64 != 5) goto u9MLd; else goto u9MLg;
       u9MLd: // global
           if (_c9ML4::P64 != 6) goto u9MLi; else goto u9MLh;
       u9MLi: // global
           Sp = Sp + 8;
           call _c9MKY() args: 0, res: 0, upd: 0;
       u9MLh: // global
           Sp = Sp + 8;
           call _c9MKN() args: 0, res: 0, upd: 0;
       u9MLg: // global
           Sp = Sp + 8;
           call _c9ML2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MKx_info" {
     block_c9MKx_info:
         const _c9MKx;
         const 0;
         const 30;
 },
 _c9MKa() //  [R1]
         { []
         }
     {offset
       c9MKa: // global
           _c9ML5::P64 = R1 & 7;
           if (_c9ML5::P64 < 5) goto u9MLb; else goto u9MLc;
       u9MLb: // global
           if (_c9ML5::P64 < 4) goto u9MLk; else goto u9MLj;
       u9MLk: // global
           Sp = Sp + 8;
           call _c9MKY() args: 0, res: 0, upd: 0;
       u9MLj: // global
           Sp = Sp + 8;
           call _c9ML2() args: 0, res: 0, upd: 0;
       u9MLc: // global
           if (_c9ML5::P64 < 6) goto u9MLm; else goto u9MLm;
       u9MLm: // global
           Sp = Sp + 8;
           call _c9MKN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MKa_info" {
     block_c9MKa_info:
         const _c9MKa;
         const 0;
         const 30;
 },
 _c9MJJ() //  [R1]
         { []
         }
     {offset
       c9MJJ: // global
           _c9ML6::P64 = R1 & 7;
           if (_c9ML6::P64 < 4) goto u9ML9; else goto u9MLa;
       u9ML9: // global
           if (_c9ML6::P64 < 3) goto u9MLo; else goto u9MLn;
       u9MLo: // global
           Sp = Sp + 8;
           call _c9MKY() args: 0, res: 0, upd: 0;
       u9MLn: // global
           Sp = Sp + 8;
           call _c9ML2() args: 0, res: 0, upd: 0;
       u9MLa: // global
           if (_c9ML6::P64 != 5) goto u9MLq; else goto u9MLq;
       u9MLq: // global
           Sp = Sp + 8;
           call _c9MKN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MJJ_info" {
     block_c9MJJ_info:
         const _c9MJJ;
         const 0;
         const 30;
 },
 _c9MJe() //  [R1]
         { []
         }
     {offset
       c9MJe: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9MLr;
               case 2 : goto u9MLs;
               case 3, 4, 5, 6 : goto u9MLw;
           }
       u9MLw: // global
           Sp = Sp + 8;
           call _c9MKN() args: 0, res: 0, upd: 0;
       u9MLs: // global
           Sp = Sp + 8;
           call _c9ML2() args: 0, res: 0, upd: 0;
       u9MLr: // global
           Sp = Sp + 8;
           call _c9MKY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MJe_info" {
     block_c9MJe_info:
         const _c9MJe;
         const 0;
         const 30;
 },
 _c9MKY() //  []
         { []
         }
     {offset
       c9MKY: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9MIJ() //  [R1]
         { []
         }
     {offset
       c9MIJ: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9MLx;
               case 2, 3, 4, 5, 6 : goto u9MLC;
           }
       u9MLC: // global
           Sp = Sp + 8;
           call _c9MKN() args: 0, res: 0, upd: 0;
       u9MLx: // global
           Sp = Sp + 8;
           call _c9ML2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MIJ_info" {
     block_c9MIJ_info:
         const _c9MIJ;
         const 0;
         const 30;
 },
 _c9MKN() //  []
         { []
         }
     {offset
       c9MKN: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9ML2() //  []
         { []
         }
     {offset
       c9ML2: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.880949718 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$c<_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$c<_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$c<_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MNp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MNq; else goto c9MNr;
       c9MNq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MNr: // global
           I64[Sp - 16] = block_c9MNe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MPZ; else goto c9MNf;
       u9MPZ: // global
           call _c9MNe(R1) args: 0, res: 0, upd: 0;
       c9MNf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$c<_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$c<_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9MNe() //  [R1]
         { []
         }
     {offset
       c9MNe: // global
           _s9LW1::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9MNi;
               case 2 : goto c9MNj;
               case 3 : goto c9MNk;
               case 4 : goto c9MNl;
               case 5 : goto c9MNm;
               case 6 : goto c9MNn;
           }
       c9MNn: // global
           I64[Sp + 8] = block_c9MPl_info;
           R1 = _s9LW1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MPY; else goto c9MPn;
       u9MPY: // global
           call _c9MPl() args: 0, res: 0, upd: 0;
       c9MPn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MNm: // global
           I64[Sp + 8] = block_c9MP6_info;
           R1 = _s9LW1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MPX; else goto c9MP8;
       u9MPX: // global
           call _c9MP6(R1) args: 0, res: 0, upd: 0;
       c9MP8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MNl: // global
           I64[Sp + 8] = block_c9MON_info;
           R1 = _s9LW1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MPW; else goto c9MOP;
       u9MPW: // global
           call _c9MON(R1) args: 0, res: 0, upd: 0;
       c9MOP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MNk: // global
           I64[Sp + 8] = block_c9MOq_info;
           R1 = _s9LW1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MPV; else goto c9MOs;
       u9MPV: // global
           call _c9MOq(R1) args: 0, res: 0, upd: 0;
       c9MOs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MNj: // global
           I64[Sp + 8] = block_c9MNZ_info;
           R1 = _s9LW1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MPU; else goto c9MO1;
       u9MPU: // global
           call _c9MNZ(R1) args: 0, res: 0, upd: 0;
       c9MO1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MNi: // global
           I64[Sp + 8] = block_c9MNu_info;
           R1 = _s9LW1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MPT; else goto c9MNw;
       u9MPT: // global
           call _c9MNu(R1) args: 0, res: 0, upd: 0;
       c9MNw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MNe_info" {
     block_c9MNe_info:
         const _c9MNe;
         const 1;
         const 30;
 },
 _c9MPl() //  []
         { []
         }
     {offset
       c9MPl: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MPl_info" {
     block_c9MPl_info:
         const _c9MPl;
         const 0;
         const 30;
 },
 _c9MP6() //  [R1]
         { []
         }
     {offset
       c9MP6: // global
           if (R1 & 7 == 6) goto u9MPB; else goto u9MPC;
       u9MPB: // global
           Sp = Sp + 8;
           call _c9MPi() args: 0, res: 0, upd: 0;
       u9MPC: // global
           Sp = Sp + 8;
           call _c9MPe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MP6_info" {
     block_c9MP6_info:
         const _c9MP6;
         const 0;
         const 30;
 },
 _c9MON() //  [R1]
         { []
         }
     {offset
       c9MON: // global
           _c9MPt::P64 = R1 & 7;
           if (_c9MPt::P64 != 5) goto u9MPA; else goto u9MPD;
       u9MPA: // global
           if (_c9MPt::P64 != 6) goto u9MPF; else goto u9MPE;
       u9MPF: // global
           Sp = Sp + 8;
           call _c9MPe() args: 0, res: 0, upd: 0;
       u9MPE: // global
           Sp = Sp + 8;
           goto u9MQ8;
       u9MPD: // global
           Sp = Sp + 8;
           goto u9MQ8;
       u9MQ8: // global
           call _c9MPi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MON_info" {
     block_c9MON_info:
         const _c9MON;
         const 0;
         const 30;
 },
 _c9MOq() //  [R1]
         { []
         }
     {offset
       c9MOq: // global
           _c9MPu::P64 = R1 & 7;
           if (_c9MPu::P64 < 4) goto u9MPG; else goto u9MPz;
       u9MPG: // global
           Sp = Sp + 8;
           call _c9MPe() args: 0, res: 0, upd: 0;
       u9MPz: // global
           if (_c9MPu::P64 != 5) goto u9MPI; else goto u9MPI;
       u9MPI: // global
           Sp = Sp + 8;
           call _c9MPi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MOq_info" {
     block_c9MOq_info:
         const _c9MOq;
         const 0;
         const 30;
 },
 _c9MNZ() //  [R1]
         { []
         }
     {offset
       c9MNZ: // global
           _c9MPv::P64 = R1 & 7;
           if (_c9MPv::P64 < 6) goto u9MPx; else goto u9MPJ;
       u9MPx: // global
           if (_c9MPv::P64 < 3) goto u9MPK; else goto u9MPy;
       u9MPK: // global
           Sp = Sp + 8;
           call _c9MPe() args: 0, res: 0, upd: 0;
       u9MPy: // global
           if (_c9MPv::P64 != 4) goto u9MPM; else goto u9MPM;
       u9MPM: // global
           Sp = Sp + 8;
           goto u9MQ4;
       u9MPJ: // global
           Sp = Sp + 8;
           goto u9MQ4;
       u9MQ4: // global
           call _c9MPi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MNZ_info" {
     block_c9MNZ_info:
         const _c9MNZ;
         const 0;
         const 30;
 },
 _c9MNu() //  [R1]
         { []
         }
     {offset
       c9MNu: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9MPN;
               case 2, 3, 4, 5, 6 : goto u9MPS;
           }
       u9MPS: // global
           Sp = Sp + 8;
           call _c9MPi() args: 0, res: 0, upd: 0;
       u9MPN: // global
           Sp = Sp + 8;
           call _c9MPe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MNu_info" {
     block_c9MNu_info:
         const _c9MNu;
         const 0;
         const 30;
 },
 _c9MPi() //  []
         { []
         }
     {offset
       c9MPi: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9MPe() //  []
         { []
         }
     {offset
       c9MPe: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.901628304 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$c<=_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$c<=_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$c<=_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MRu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MRv; else goto c9MRw;
       c9MRv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MRw: // global
           I64[Sp - 16] = block_c9MRj_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MU4; else goto c9MRk;
       u9MU4: // global
           call _c9MRj(R1) args: 0, res: 0, upd: 0;
       c9MRk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$c<=_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$c<=_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9MRj() //  [R1]
         { []
         }
     {offset
       c9MRj: // global
           _s9LW9::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9MRn;
               case 2 : goto c9MRo;
               case 3 : goto c9MRp;
               case 4 : goto c9MRq;
               case 5 : goto c9MRr;
               case 6 : goto c9MRs;
           }
       c9MRs: // global
           I64[Sp + 8] = block_c9MTq_info;
           R1 = _s9LW9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MU3; else goto c9MTs;
       u9MU3: // global
           call _c9MTq() args: 0, res: 0, upd: 0;
       c9MTs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MRr: // global
           I64[Sp + 8] = block_c9MTb_info;
           R1 = _s9LW9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MU2; else goto c9MTd;
       u9MU2: // global
           call _c9MTb(R1) args: 0, res: 0, upd: 0;
       c9MTd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MRq: // global
           I64[Sp + 8] = block_c9MSS_info;
           R1 = _s9LW9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MU1; else goto c9MSU;
       u9MU1: // global
           call _c9MSS(R1) args: 0, res: 0, upd: 0;
       c9MSU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MRp: // global
           I64[Sp + 8] = block_c9MSv_info;
           R1 = _s9LW9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MU0; else goto c9MSx;
       u9MU0: // global
           call _c9MSv(R1) args: 0, res: 0, upd: 0;
       c9MSx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MRo: // global
           I64[Sp + 8] = block_c9MS4_info;
           R1 = _s9LW9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MTZ; else goto c9MS6;
       u9MTZ: // global
           call _c9MS4(R1) args: 0, res: 0, upd: 0;
       c9MS6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MRn: // global
           I64[Sp + 8] = block_c9MRz_info;
           R1 = _s9LW9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MTY; else goto c9MRB;
       u9MTY: // global
           call _c9MRz(R1) args: 0, res: 0, upd: 0;
       c9MRB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MRj_info" {
     block_c9MRj_info:
         const _c9MRj;
         const 1;
         const 30;
 },
 _c9MTq() //  []
         { []
         }
     {offset
       c9MTq: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MTq_info" {
     block_c9MTq_info:
         const _c9MTq;
         const 0;
         const 30;
 },
 _c9MTb() //  [R1]
         { []
         }
     {offset
       c9MTb: // global
           if (R1 & 7 == 6) goto u9MTG; else goto u9MTH;
       u9MTG: // global
           Sp = Sp + 8;
           call _c9MTn() args: 0, res: 0, upd: 0;
       u9MTH: // global
           Sp = Sp + 8;
           call _c9MTj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MTb_info" {
     block_c9MTb_info:
         const _c9MTb;
         const 0;
         const 30;
 },
 _c9MSS() //  [R1]
         { []
         }
     {offset
       c9MSS: // global
           _c9MTy::P64 = R1 & 7;
           if (_c9MTy::P64 != 5) goto u9MTF; else goto u9MTI;
       u9MTF: // global
           if (_c9MTy::P64 != 6) goto u9MTK; else goto u9MTJ;
       u9MTK: // global
           Sp = Sp + 8;
           call _c9MTj() args: 0, res: 0, upd: 0;
       u9MTJ: // global
           Sp = Sp + 8;
           goto u9MUd;
       u9MTI: // global
           Sp = Sp + 8;
           goto u9MUd;
       u9MUd: // global
           call _c9MTn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MSS_info" {
     block_c9MSS_info:
         const _c9MSS;
         const 0;
         const 30;
 },
 _c9MSv() //  [R1]
         { []
         }
     {offset
       c9MSv: // global
           _c9MTz::P64 = R1 & 7;
           if (_c9MTz::P64 < 4) goto u9MTL; else goto u9MTE;
       u9MTL: // global
           Sp = Sp + 8;
           call _c9MTj() args: 0, res: 0, upd: 0;
       u9MTE: // global
           if (_c9MTz::P64 != 5) goto u9MTN; else goto u9MTN;
       u9MTN: // global
           Sp = Sp + 8;
           call _c9MTn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MSv_info" {
     block_c9MSv_info:
         const _c9MSv;
         const 0;
         const 30;
 },
 _c9MS4() //  [R1]
         { []
         }
     {offset
       c9MS4: // global
           _c9MTA::P64 = R1 & 7;
           if (_c9MTA::P64 < 6) goto u9MTC; else goto u9MTO;
       u9MTC: // global
           if (_c9MTA::P64 < 3) goto u9MTP; else goto u9MTD;
       u9MTP: // global
           Sp = Sp + 8;
           call _c9MTj() args: 0, res: 0, upd: 0;
       u9MTD: // global
           if (_c9MTA::P64 != 4) goto u9MTR; else goto u9MTR;
       u9MTR: // global
           Sp = Sp + 8;
           goto u9MU9;
       u9MTO: // global
           Sp = Sp + 8;
           goto u9MU9;
       u9MU9: // global
           call _c9MTn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MS4_info" {
     block_c9MS4_info:
         const _c9MS4;
         const 0;
         const 30;
 },
 _c9MRz() //  [R1]
         { []
         }
     {offset
       c9MRz: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9MTS;
               case 2, 3, 4, 5, 6 : goto u9MTX;
           }
       u9MTX: // global
           Sp = Sp + 8;
           call _c9MTn() args: 0, res: 0, upd: 0;
       u9MTS: // global
           Sp = Sp + 8;
           call _c9MTj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MRz_info" {
     block_c9MRz_info:
         const _c9MRz;
         const 0;
         const 30;
 },
 _c9MTn() //  []
         { []
         }
     {offset
       c9MTn: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9MTj() //  []
         { []
         }
     {offset
       c9MTj: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.921695605 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$cmax_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$cmax_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$cmax_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MVz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MVA; else goto c9MVB;
       c9MVA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MVB: // global
           I64[Sp - 16] = block_c9MVo_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9MXC; else goto c9MVp;
       u9MXC: // global
           call _c9MVo(R1) args: 0, res: 0, upd: 0;
       c9MVp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$cmax_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$cmax_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9MVo() //  [R1]
         { []
         }
     {offset
       c9MVo: // global
           _s9LWi::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9MVs;
               case 2 : goto c9MVt;
               case 3 : goto c9MVu;
               case 4 : goto c9MVv;
               case 5 : goto c9MVw;
               case 6 : goto c9MVx;
           }
       c9MVx: // global
           I64[Sp + 8] = block_c9MX3_info;
           R1 = _s9LWi::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MXB; else goto c9MX5;
       u9MXB: // global
           call _c9MX3() args: 0, res: 0, upd: 0;
       c9MX5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MVw: // global
           I64[Sp + 8] = block_c9MWO_info;
           R1 = _s9LWi::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MXA; else goto c9MWQ;
       u9MXA: // global
           call _c9MWO(R1) args: 0, res: 0, upd: 0;
       c9MWQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MVv: // global
           I64[Sp + 8] = block_c9MWv_info;
           R1 = _s9LWi::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MXz; else goto c9MWx;
       u9MXz: // global
           call _c9MWv(R1) args: 0, res: 0, upd: 0;
       c9MWx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MVu: // global
           I64[Sp + 8] = block_c9MW8_info;
           R1 = _s9LWi::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MXy; else goto c9MWa;
       u9MXy: // global
           call _c9MW8(R1) args: 0, res: 0, upd: 0;
       c9MWa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MVt: // global
           I64[Sp + 8] = block_c9MVH_info;
           R1 = _s9LWi::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9MXx; else goto c9MVJ;
       u9MXx: // global
           call _c9MVH(R1) args: 0, res: 0, upd: 0;
       c9MVJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MVs: // global
           R1 = _s9LWi::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MVo_info" {
     block_c9MVo_info:
         const _c9MVo;
         const 1;
         const 30;
 },
 _c9MX3() //  []
         { []
         }
     {offset
       c9MX3: // global
           R1 = GHC.Conc.Sync.BlockedOnOther_closure+6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MX3_info" {
     block_c9MX3_info:
         const _c9MX3;
         const 0;
         const 30;
 },
 _c9MWO() //  [R1]
         { []
         }
     {offset
       c9MWO: // global
           if (R1 & 7 == 6) goto u9MXk; else goto u9MXl;
       u9MXk: // global
           Sp = Sp + 8;
           call _c9MX0() args: 0, res: 0, upd: 0;
       u9MXl: // global
           Sp = Sp + 8;
           call _c9MWW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MWO_info" {
     block_c9MWO_info:
         const _c9MWO;
         const 0;
         const 30;
 },
 _c9MWv() //  [R1]
         { []
         }
     {offset
       c9MWv: // global
           _c9MXb::P64 = R1 & 7;
           if (_c9MXb::P64 != 5) goto u9MXj; else goto u9MXm;
       u9MXj: // global
           if (_c9MXb::P64 != 6) goto u9MXo; else goto u9MXn;
       u9MXo: // global
           Sp = Sp + 8;
           call _c9MWD() args: 0, res: 0, upd: 0;
       u9MXn: // global
           Sp = Sp + 8;
           call _c9MX0() args: 0, res: 0, upd: 0;
       u9MXm: // global
           Sp = Sp + 8;
           call _c9MWW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MWv_info" {
     block_c9MWv_info:
         const _c9MWv;
         const 0;
         const 30;
 },
 _c9MW8() //  [R1]
         { []
         }
     {offset
       c9MW8: // global
           _c9MXc::P64 = R1 & 7;
           if (_c9MXc::P64 < 5) goto u9MXh; else goto u9MXi;
       u9MXh: // global
           if (_c9MXc::P64 < 4) goto u9MXq; else goto u9MXp;
       u9MXq: // global
           Sp = Sp + 8;
           call _c9MWg() args: 0, res: 0, upd: 0;
       u9MXp: // global
           Sp = Sp + 8;
           call _c9MWD() args: 0, res: 0, upd: 0;
       u9MXi: // global
           if (_c9MXc::P64 < 6) goto u9MXs; else goto u9MXr;
       u9MXs: // global
           Sp = Sp + 8;
           call _c9MWW() args: 0, res: 0, upd: 0;
       u9MXr: // global
           Sp = Sp + 8;
           call _c9MX0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MW8_info" {
     block_c9MW8_info:
         const _c9MW8;
         const 0;
         const 30;
 },
 _c9MVH() //  [R1]
         { []
         }
     {offset
       c9MVH: // global
           _c9MXd::P64 = R1 & 7;
           if (_c9MXd::P64 < 5) goto u9MXe; else goto u9MXg;
       u9MXe: // global
           if (_c9MXd::P64 < 4) goto u9MXf; else goto u9MXt;
       u9MXf: // global
           if (_c9MXd::P64 < 3) goto c9MVP; else goto u9MXu;
       c9MVP: // global
           R1 = GHC.Conc.Sync.BlockedOnBlackHole_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9MXu: // global
           Sp = Sp + 8;
           call _c9MWg() args: 0, res: 0, upd: 0;
       u9MXt: // global
           Sp = Sp + 8;
           call _c9MWD() args: 0, res: 0, upd: 0;
       u9MXg: // global
           if (_c9MXd::P64 < 6) goto u9MXw; else goto u9MXv;
       u9MXw: // global
           Sp = Sp + 8;
           call _c9MWW() args: 0, res: 0, upd: 0;
       u9MXv: // global
           Sp = Sp + 8;
           call _c9MX0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MVH_info" {
     block_c9MVH_info:
         const _c9MVH;
         const 0;
         const 30;
 },
 _c9MWg() //  []
         { []
         }
     {offset
       c9MWg: // global
           R1 = GHC.Conc.Sync.BlockedOnException_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9MWD() //  []
         { []
         }
     {offset
       c9MWD: // global
           R1 = GHC.Conc.Sync.BlockedOnSTM_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9MWW() //  []
         { []
         }
     {offset
       c9MWW: // global
           R1 = GHC.Conc.Sync.BlockedOnForeignCall_closure+5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9MX0() //  []
         { []
         }
     {offset
       c9MX0: // global
           R1 = GHC.Conc.Sync.BlockedOnOther_closure+6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.942342028 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$c>=_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$c>=_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$c>=_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9MZ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9MZ5; else goto c9MZ6;
       c9MZ5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9MZ6: // global
           I64[Sp - 16] = block_c9MYT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9N1E; else goto c9MYU;
       u9N1E: // global
           call _c9MYT(R1) args: 0, res: 0, upd: 0;
       c9MYU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$c>=_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$c>=_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9MYT() //  [R1]
         { []
         }
     {offset
       c9MYT: // global
           _s9LWr::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9MYX;
               case 2 : goto c9MYY;
               case 3 : goto c9MYZ;
               case 4 : goto c9MZ0;
               case 5 : goto c9MZ1;
               case 6 : goto c9MZ2;
           }
       c9MZ2: // global
           I64[Sp + 8] = block_c9N10_info;
           R1 = _s9LWr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N1D; else goto c9N12;
       u9N1D: // global
           call _c9N10() args: 0, res: 0, upd: 0;
       c9N12: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MZ1: // global
           I64[Sp + 8] = block_c9N0L_info;
           R1 = _s9LWr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N1C; else goto c9N0N;
       u9N1C: // global
           call _c9N0L(R1) args: 0, res: 0, upd: 0;
       c9N0N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MZ0: // global
           I64[Sp + 8] = block_c9N0s_info;
           R1 = _s9LWr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N1B; else goto c9N0u;
       u9N1B: // global
           call _c9N0s(R1) args: 0, res: 0, upd: 0;
       c9N0u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MYZ: // global
           I64[Sp + 8] = block_c9N05_info;
           R1 = _s9LWr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N1A; else goto c9N07;
       u9N1A: // global
           call _c9N05(R1) args: 0, res: 0, upd: 0;
       c9N07: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MYY: // global
           I64[Sp + 8] = block_c9MZE_info;
           R1 = _s9LWr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N1z; else goto c9MZG;
       u9N1z: // global
           call _c9MZE(R1) args: 0, res: 0, upd: 0;
       c9MZG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9MYX: // global
           I64[Sp + 8] = block_c9MZ9_info;
           R1 = _s9LWr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N1y; else goto c9MZb;
       u9N1y: // global
           call _c9MZ9(R1) args: 0, res: 0, upd: 0;
       c9MZb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9MYT_info" {
     block_c9MYT_info:
         const _c9MYT;
         const 1;
         const 30;
 },
 _c9N10() //  []
         { []
         }
     {offset
       c9N10: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9N10_info" {
     block_c9N10_info:
         const _c9N10;
         const 0;
         const 30;
 },
 _c9N0L() //  [R1]
         { []
         }
     {offset
       c9N0L: // global
           if (R1 & 7 == 6) goto u9N1g; else goto u9N1h;
       u9N1g: // global
           Sp = Sp + 8;
           call _c9N0X() args: 0, res: 0, upd: 0;
       u9N1h: // global
           Sp = Sp + 8;
           call _c9N0T() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9N0L_info" {
     block_c9N0L_info:
         const _c9N0L;
         const 0;
         const 30;
 },
 _c9N0s() //  [R1]
         { []
         }
     {offset
       c9N0s: // global
           _c9N18::P64 = R1 & 7;
           if (_c9N18::P64 != 5) goto u9N1f; else goto u9N1i;
       u9N1f: // global
           if (_c9N18::P64 != 6) goto u9N1k; else goto u9N1j;
       u9N1k: // global
           Sp = Sp + 8;
           call _c9N0T() args: 0, res: 0, upd: 0;
       u9N1j: // global
           Sp = Sp + 8;
           goto u9N1N;
       u9N1i: // global
           Sp = Sp + 8;
           goto u9N1N;
       u9N1N: // global
           call _c9N0X() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9N0s_info" {
     block_c9N0s_info:
         const _c9N0s;
         const 0;
         const 30;
 },
 _c9N05() //  [R1]
         { []
         }
     {offset
       c9N05: // global
           _c9N19::P64 = R1 & 7;
           if (_c9N19::P64 < 4) goto u9N1l; else goto u9N1e;
       u9N1l: // global
           Sp = Sp + 8;
           call _c9N0T() args: 0, res: 0, upd: 0;
       u9N1e: // global
           if (_c9N19::P64 != 5) goto u9N1n; else goto u9N1n;
       u9N1n: // global
           Sp = Sp + 8;
           call _c9N0X() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9N05_info" {
     block_c9N05_info:
         const _c9N05;
         const 0;
         const 30;
 },
 _c9MZE() //  [R1]
         { []
         }
     {offset
       c9MZE: // global
           _c9N1a::P64 = R1 & 7;
           if (_c9N1a::P64 < 6) goto u9N1c; else goto u9N1o;
       u9N1c: // global
           if (_c9N1a::P64 < 3) goto u9N1p; else goto u9N1d;
       u9N1p: // global
           Sp = Sp + 8;
           call _c9N0T() args: 0, res: 0, upd: 0;
       u9N1d: // global
           if (_c9N1a::P64 != 4) goto u9N1r; else goto u9N1r;
       u9N1r: // global
           Sp = Sp + 8;
           goto u9N1J;
       u9N1o: // global
           Sp = Sp + 8;
           goto u9N1J;
       u9N1J: // global
           call _c9N0X() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MZE_info" {
     block_c9MZE_info:
         const _c9MZE;
         const 0;
         const 30;
 },
 _c9MZ9() //  [R1]
         { []
         }
     {offset
       c9MZ9: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9N1s;
               case 2, 3, 4, 5, 6 : goto u9N1x;
           }
       u9N1x: // global
           Sp = Sp + 8;
           call _c9N0X() args: 0, res: 0, upd: 0;
       u9N1s: // global
           Sp = Sp + 8;
           call _c9N0T() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9MZ9_info" {
     block_c9MZ9_info:
         const _c9MZ9;
         const 0;
         const 30;
 },
 _c9N0X() //  []
         { []
         }
     {offset
       c9N0X: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9N0T() //  []
         { []
         }
     {offset
       c9N0T: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.958796309 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$c>_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$c>_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$c>_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c9N2Y: // global
           _s9LWA::P64 = R3;
           R3 = R2;
           R2 = _s9LWA::P64;
           call GHC.Conc.Sync.$fOrdBlockReason_$c<_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$c>_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$c>_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.964720114 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_$cmin_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_$cmin_closure:
         const GHC.Conc.Sync.$fOrdBlockReason_$cmin_info;
 },
 GHC.Conc.Sync.$fOrdBlockReason_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c9N3k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9N3l; else goto c9N3m;
       c9N3l: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdBlockReason_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9N3m: // global
           I64[Sp - 16] = block_c9N39_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9N58; else goto c9N3a;
       u9N58: // global
           call _c9N39(R1) args: 0, res: 0, upd: 0;
       c9N3a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdBlockReason_$cmin_info" {
     GHC.Conc.Sync.$fOrdBlockReason_$cmin_info:
         const GHC.Conc.Sync.$fOrdBlockReason_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9N39() //  [R1]
         { []
         }
     {offset
       c9N39: // global
           _s9LWB::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9N3d;
               case 2 : goto c9N3e;
               case 3 : goto c9N3f;
               case 4 : goto c9N3g;
               case 5 : goto c9N3h;
               case 6 : goto c9N3i;
           }
       c9N3i: // global
           R1 = _s9LWB::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9N3h: // global
           I64[Sp + 8] = block_c9N4F_info;
           R1 = _s9LWB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N57; else goto c9N4H;
       u9N57: // global
           call _c9N4F(R1) args: 0, res: 0, upd: 0;
       c9N4H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9N3g: // global
           I64[Sp + 8] = block_c9N4m_info;
           R1 = _s9LWB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N56; else goto c9N4o;
       u9N56: // global
           call _c9N4m(R1) args: 0, res: 0, upd: 0;
       c9N4o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9N3f: // global
           I64[Sp + 8] = block_c9N3Z_info;
           R1 = _s9LWB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N55; else goto c9N41;
       u9N55: // global
           call _c9N3Z(R1) args: 0, res: 0, upd: 0;
       c9N41: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9N3e: // global
           I64[Sp + 8] = block_c9N3y_info;
           R1 = _s9LWB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N54; else goto c9N3A;
       u9N54: // global
           call _c9N3y(R1) args: 0, res: 0, upd: 0;
       c9N3A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9N3d: // global
           I64[Sp + 8] = block_c9N3p_info;
           R1 = _s9LWB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N53; else goto c9N3r;
       u9N53: // global
           call _c9N3p() args: 0, res: 0, upd: 0;
       c9N3r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9N39_info" {
     block_c9N39_info:
         const _c9N39;
         const 1;
         const 30;
 },
 _c9N4F() //  [R1]
         { []
         }
     {offset
       c9N4F: // global
           if (R1 & 7 == 6) goto c9N4R; else goto c9N4N;
       c9N4R: // global
           R1 = GHC.Conc.Sync.BlockedOnForeignCall_closure+5;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9N4N: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9N4F_info" {
     block_c9N4F_info:
         const _c9N4F;
         const 0;
         const 30;
 },
 _c9N4m() //  [R1]
         { []
         }
     {offset
       c9N4m: // global
           _c9N4W::P64 = R1 & 7;
           if (_c9N4W::P64 == 5) goto c9N4C; else goto u9N52;
       u9N52: // global
           if (_c9N4W::P64 == 6) goto c9N4C; else goto c9N4u;
       c9N4C: // global
           R1 = GHC.Conc.Sync.BlockedOnSTM_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9N4u: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9N4m_info" {
     block_c9N4m_info:
         const _c9N4m;
         const 0;
         const 30;
 },
 _c9N3Z() //  [R1]
         { []
         }
     {offset
       c9N3Z: // global
           _c9N4X::P64 = R1 & 7;
           if (_c9N4X::P64 < 4) goto c9N47; else goto u9N51;
       c9N47: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9N51: // global
           if (_c9N4X::P64 != 5) goto c9N4j; else goto c9N4j;
       c9N4j: // global
           R1 = GHC.Conc.Sync.BlockedOnException_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9N3Z_info" {
     block_c9N3Z_info:
         const _c9N3Z;
         const 0;
         const 30;
 },
 _c9N3y() //  [R1]
         { []
         }
     {offset
       c9N3y: // global
           _c9N4Y::P64 = R1 & 7;
           if (_c9N4Y::P64 >= 6) goto c9N3W; else goto u9N4Z;
       u9N4Z: // global
           if (_c9N4Y::P64 < 3) goto c9N3G; else goto u9N50;
       c9N3G: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9N50: // global
           if (_c9N4Y::P64 != 4) goto c9N3W; else goto c9N3W;
       c9N3W: // global
           R1 = GHC.Conc.Sync.BlockedOnBlackHole_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9N3y_info" {
     block_c9N3y_info:
         const _c9N3y;
         const 0;
         const 30;
 },
 _c9N3p() //  []
         { []
         }
     {offset
       c9N3p: // global
           R1 = GHC.Conc.Sync.BlockedOnMVar_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9N3p_info" {
     block_c9N3p_info:
         const _c9N3p;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.979296773 UTC

[section ""data" . GHC.Conc.Sync.$fOrdBlockReason_closure" {
     GHC.Conc.Sync.$fOrdBlockReason_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Conc.Sync.$fEqBlockReason_closure+1;
         const GHC.Conc.Sync.$fOrdBlockReason_$ccompare_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$c<_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$c<=_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$c>_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$c>=_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$cmax_closure+2;
         const GHC.Conc.Sync.$fOrdBlockReason_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:52.984184359 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c9N6l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9N6m; else goto c9N6n;
       c9N6m: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9N6n: // global
           I64[Sp - 16] = block_c9N6c_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9N85; else goto c9N6d;
       u9N85: // global
           call _c9N6c(R1) args: 0, res: 0, upd: 0;
       c9N6d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9N6c() //  [R1]
         { []
         }
     {offset
       c9N6c: // global
           _s9LWK::P64 = P64[Sp + 8];
           _c9N6k::P64 = R1 & 7;
           if (_c9N6k::P64 < 3) goto u9N7K; else goto u9N7L;
       u9N7K: // global
           if (_c9N6k::P64 < 2) goto c9N6g; else goto c9N6h;
       c9N6g: // global
           I64[Sp + 8] = block_c9N6q_info;
           R1 = _s9LWK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N81; else goto c9N6s;
       u9N81: // global
           call _c9N6q(R1) args: 0, res: 0, upd: 0;
       c9N6s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9N6h: // global
           I64[Sp + 8] = block_c9N6N_info;
           R1 = _s9LWK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N82; else goto c9N6P;
       u9N82: // global
           call _c9N6N(R1) args: 0, res: 0, upd: 0;
       c9N6P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9N7L: // global
           if (_c9N6k::P64 < 4) goto c9N6i; else goto c9N6j;
       c9N6i: // global
           I64[Sp] = block_c9N7a_info;
           _s9LWQ::P64 = P64[R1 + 5];
           R1 = _s9LWK::P64;
           P64[Sp + 8] = _s9LWQ::P64;
           if (R1 & 7 != 0) goto u9N83; else goto c9N7c;
       u9N83: // global
           call _c9N7a(R1) args: 0, res: 0, upd: 0;
       c9N7c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9N6j: // global
           I64[Sp + 8] = block_c9N7t_info;
           R1 = _s9LWK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9N84; else goto c9N7v;
       u9N84: // global
           call _c9N7t(R1) args: 0, res: 0, upd: 0;
       c9N7v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9N6c_info" {
     block_c9N6c_info:
         const _c9N6c;
         const 1;
         const 30;
 },
 _c9N6q() //  [R1]
         { []
         }
     {offset
       c9N6q: // global
           _c9N7J::P64 = R1 & 7;
           if (_c9N7J::P64 < 2) goto u9N7Q; else goto u9N7M;
       u9N7Q: // global
           Sp = Sp + 8;
           call _c9N7F() args: 0, res: 0, upd: 0;
       u9N7M: // global
           if (_c9N7J::P64 != 3) goto u9N7S; else goto u9N7S;
       u9N7S: // global
           Sp = Sp + 8;
           call _c9N7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9N6q_info" {
     block_c9N6q_info:
         const _c9N6q;
         const 0;
         const 30;
 },
 _c9N6N() //  [R1]
         { []
         }
     {offset
       c9N6N: // global
           _c9N7I::P64 = R1 & 7;
           if (_c9N7I::P64 < 3) goto u9N7N; else goto u9N7O;
       u9N7N: // global
           if (_c9N7I::P64 < 2) goto u9N7U; else goto u9N7T;
       u9N7U: // global
           Sp = Sp + 8;
           call _c9N7B() args: 0, res: 0, upd: 0;
       u9N7T: // global
           Sp = Sp + 8;
           call _c9N7F() args: 0, res: 0, upd: 0;
       u9N7O: // global
           if (_c9N7I::P64 < 4) goto u9N7W; else goto u9N7W;
       u9N7W: // global
           Sp = Sp + 8;
           call _c9N7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9N6N_info" {
     block_c9N6N_info:
         const _c9N6N;
         const 0;
         const 30;
 },
 _c9N7a() //  [R1]
         { []
         }
     {offset
       c9N7a: // global
           _c9N7H::P64 = R1 & 7;
           if (_c9N7H::P64 == 3) goto c9N7m; else goto u9N7P;
       c9N7m: // global
           R3 = P64[R1 + 5];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Conc.Sync.$fOrdBlockReason_$ccompare_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
       u9N7P: // global
           if (_c9N7H::P64 != 4) goto u9N7Y; else goto u9N7X;
       u9N7Y: // global
           Sp = Sp + 16;
           call _c9N7B() args: 0, res: 0, upd: 0;
       u9N7X: // global
           Sp = Sp + 16;
           call _c9N7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9N7a_info" {
     block_c9N7a_info:
         const _c9N7a;
         const 1;
         const 30;
 },
 _c9N7q() //  []
         { []
         }
     {offset
       c9N7q: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9N7t() //  [R1]
         { []
         }
     {offset
       c9N7t: // global
           if (R1 & 7 == 4) goto u9N7Z; else goto u9N80;
       u9N7Z: // global
           Sp = Sp + 8;
           call _c9N7F() args: 0, res: 0, upd: 0;
       u9N80: // global
           Sp = Sp + 8;
           call _c9N7B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9N7t_info" {
     block_c9N7t_info:
         const _c9N7t;
         const 0;
         const 30;
 },
 _c9N7F() //  []
         { []
         }
     {offset
       c9N7F: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9N7B() //  []
         { []
         }
     {offset
       c9N7B: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.003794304 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$c<_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c<_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c9N9e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9N9f; else goto c9N9g;
       c9N9f: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9N9g: // global
           I64[Sp - 16] = block_c9N95_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Ndl; else goto c9N96;
       u9Ndl: // global
           call _c9N95(R1) args: 0, res: 0, upd: 0;
       c9N96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$c<_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c<_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9N95() //  [R1]
         { []
         }
     {offset
       c9N95: // global
           _s9LWV::P64 = P64[Sp + 8];
           _c9N9d::P64 = R1 & 7;
           if (_c9N9d::P64 < 3) goto u9NcI; else goto u9NcJ;
       u9NcI: // global
           if (_c9N9d::P64 < 2) goto c9N99; else goto c9N9a;
       c9N99: // global
           I64[Sp + 8] = block_c9N9j_info;
           R1 = _s9LWV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ndh; else goto c9N9l;
       u9Ndh: // global
           call _c9N9j(R1) args: 0, res: 0, upd: 0;
       c9N9l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9N9a: // global
           I64[Sp + 8] = block_c9N9G_info;
           R1 = _s9LWV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ndi; else goto c9N9I;
       u9Ndi: // global
           call _c9N9G(R1) args: 0, res: 0, upd: 0;
       c9N9I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9NcJ: // global
           if (_c9N9d::P64 < 4) goto c9N9b; else goto c9N9c;
       c9N9b: // global
           I64[Sp] = block_c9N9Z_info;
           _s9LX1::P64 = P64[R1 + 5];
           R1 = _s9LWV::P64;
           P64[Sp + 8] = _s9LX1::P64;
           if (R1 & 7 != 0) goto u9Ndj; else goto c9Na1;
       u9Ndj: // global
           call _c9N9Z(R1) args: 0, res: 0, upd: 0;
       c9Na1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9N9c: // global
           I64[Sp + 8] = block_c9Ncs_info;
           R1 = _s9LWV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ndk; else goto c9Ncu;
       u9Ndk: // global
           call _c9Ncs() args: 0, res: 0, upd: 0;
       c9Ncu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9N95_info" {
     block_c9N95_info:
         const _c9N95;
         const 1;
         const 30;
 },
 _c9N9j() //  [R1]
         { []
         }
     {offset
       c9N9j: // global
           _c9NcH::P64 = R1 & 7;
           if (_c9NcH::P64 < 2) goto u9NcR; else goto u9NcK;
       u9NcR: // global
           Sp = Sp + 8;
           call _c9Nc7() args: 0, res: 0, upd: 0;
       u9NcK: // global
           if (_c9NcH::P64 != 3) goto u9NcT; else goto u9NcT;
       u9NcT: // global
           Sp = Sp + 8;
           call _c9Ncp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9N9j_info" {
     block_c9N9j_info:
         const _c9N9j;
         const 0;
         const 30;
 },
 _c9N9G() //  [R1]
         { []
         }
     {offset
       c9N9G: // global
           _c9NcG::P64 = R1 & 7;
           if (_c9NcG::P64 != 3) goto u9NcL; else goto u9NcU;
       u9NcL: // global
           if (_c9NcG::P64 != 4) goto u9NcW; else goto u9NcV;
       u9NcW: // global
           Sp = Sp + 8;
           call _c9Nc7() args: 0, res: 0, upd: 0;
       u9NcV: // global
           Sp = Sp + 8;
           goto u9Ndp;
       u9NcU: // global
           Sp = Sp + 8;
           goto u9Ndp;
       u9Ndp: // global
           call _c9Ncp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9N9G_info" {
     block_c9N9G_info:
         const _c9N9G;
         const 0;
         const 30;
 },
 _c9N9Z() //  [R1]
         { []
         }
     {offset
       c9N9Z: // global
           _c9Ncz::P64 = R1 & 7;
           if (_c9Ncz::P64 == 3) goto c9Nac; else goto u9NcM;
       c9Nac: // global
           I64[Sp] = block_c9Naa_info;
           _s9LX3::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9LX3::P64;
           if (R1 & 7 != 0) goto u9Ndr; else goto c9Nad;
       u9Ndr: // global
           call _c9Naa(R1) args: 0, res: 0, upd: 0;
       c9Nad: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9NcM: // global
           if (_c9Ncz::P64 != 4) goto u9NcY; else goto u9NcX;
       u9NcY: // global
           Sp = Sp + 16;
           call _c9Nc7() args: 0, res: 0, upd: 0;
       u9NcX: // global
           Sp = Sp + 16;
           call _c9Ncp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9N9Z_info" {
     block_c9N9Z_info:
         const _c9N9Z;
         const 1;
         const 30;
 },
 _c9Naa() //  [R1]
         { []
         }
     {offset
       c9Naa: // global
           _s9LX3::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Nak;
               case 2 : goto c9NaQ;
               case 3 : goto c9Nbi;
               case 4 : goto c9NbG;
               case 5 : goto c9Nc0;
               case 6 : goto c9Ncg;
           }
       c9Ncg: // global
           I64[Sp + 8] = block_c9Nce_info;
           R1 = _s9LX3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ndz; else goto c9Nch;
       u9Ndz: // global
           call _c9Nce() args: 0, res: 0, upd: 0;
       c9Nch: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nc0: // global
           I64[Sp + 8] = block_c9NbY_info;
           R1 = _s9LX3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ndy; else goto c9Nc1;
       u9Ndy: // global
           call _c9NbY(R1) args: 0, res: 0, upd: 0;
       c9Nc1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NbG: // global
           I64[Sp + 8] = block_c9NbE_info;
           R1 = _s9LX3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ndx; else goto c9NbH;
       u9Ndx: // global
           call _c9NbE(R1) args: 0, res: 0, upd: 0;
       c9NbH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nbi: // global
           I64[Sp + 8] = block_c9Nbg_info;
           R1 = _s9LX3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ndw; else goto c9Nbj;
       u9Ndw: // global
           call _c9Nbg(R1) args: 0, res: 0, upd: 0;
       c9Nbj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NaQ: // global
           I64[Sp + 8] = block_c9NaO_info;
           R1 = _s9LX3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ndv; else goto c9NaR;
       u9Ndv: // global
           call _c9NaO(R1) args: 0, res: 0, upd: 0;
       c9NaR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nak: // global
           I64[Sp + 8] = block_c9Nah_info;
           R1 = _s9LX3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Ndu; else goto c9Nal;
       u9Ndu: // global
           call _c9Nah(R1) args: 0, res: 0, upd: 0;
       c9Nal: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Naa_info" {
     block_c9Naa_info:
         const _c9Naa;
         const 1;
         const 30;
 },
 _c9Nce() //  []
         { []
         }
     {offset
       c9Nce: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Nce_info" {
     block_c9Nce_info:
         const _c9Nce;
         const 0;
         const 30;
 },
 _c9NbY() //  [R1]
         { []
         }
     {offset
       c9NbY: // global
           if (R1 & 7 == 6) goto u9NcZ; else goto u9Nd0;
       u9NcZ: // global
           Sp = Sp + 8;
           call _c9Ncp() args: 0, res: 0, upd: 0;
       u9Nd0: // global
           Sp = Sp + 8;
           call _c9Nc7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NbY_info" {
     block_c9NbY_info:
         const _c9NbY;
         const 0;
         const 30;
 },
 _c9NbE() //  [R1]
         { []
         }
     {offset
       c9NbE: // global
           _c9NcC::P64 = R1 & 7;
           if (_c9NcC::P64 != 5) goto u9NcQ; else goto u9Nd1;
       u9NcQ: // global
           if (_c9NcC::P64 != 6) goto u9Nd3; else goto u9Nd2;
       u9Nd3: // global
           Sp = Sp + 8;
           call _c9Nc7() args: 0, res: 0, upd: 0;
       u9Nd2: // global
           Sp = Sp + 8;
           goto u9NdI;
       u9Nd1: // global
           Sp = Sp + 8;
           goto u9NdI;
       u9NdI: // global
           call _c9Ncp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NbE_info" {
     block_c9NbE_info:
         const _c9NbE;
         const 0;
         const 30;
 },
 _c9Nbg() //  [R1]
         { []
         }
     {offset
       c9Nbg: // global
           _c9NcD::P64 = R1 & 7;
           if (_c9NcD::P64 < 4) goto u9Nd4; else goto u9NcP;
       u9Nd4: // global
           Sp = Sp + 8;
           call _c9Nc7() args: 0, res: 0, upd: 0;
       u9NcP: // global
           if (_c9NcD::P64 != 5) goto u9Nd6; else goto u9Nd6;
       u9Nd6: // global
           Sp = Sp + 8;
           call _c9Ncp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nbg_info" {
     block_c9Nbg_info:
         const _c9Nbg;
         const 0;
         const 30;
 },
 _c9NaO() //  [R1]
         { []
         }
     {offset
       c9NaO: // global
           _c9NcE::P64 = R1 & 7;
           if (_c9NcE::P64 < 6) goto u9NcN; else goto u9Nd7;
       u9NcN: // global
           if (_c9NcE::P64 < 3) goto u9Nd8; else goto u9NcO;
       u9Nd8: // global
           Sp = Sp + 8;
           call _c9Nc7() args: 0, res: 0, upd: 0;
       u9NcO: // global
           if (_c9NcE::P64 != 4) goto u9Nda; else goto u9Nda;
       u9Nda: // global
           Sp = Sp + 8;
           goto u9NdE;
       u9Nd7: // global
           Sp = Sp + 8;
           goto u9NdE;
       u9NdE: // global
           call _c9Ncp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NaO_info" {
     block_c9NaO_info:
         const _c9NaO;
         const 0;
         const 30;
 },
 _c9Nah() //  [R1]
         { []
         }
     {offset
       c9Nah: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9Ndb;
               case 2, 3, 4, 5, 6 : goto u9Ndg;
           }
       u9Ndg: // global
           Sp = Sp + 8;
           call _c9Ncp() args: 0, res: 0, upd: 0;
       u9Ndb: // global
           Sp = Sp + 8;
           call _c9Nc7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nah_info" {
     block_c9Nah_info:
         const _c9Nah;
         const 0;
         const 30;
 },
 _c9Nc7() //  []
         { []
         }
     {offset
       c9Nc7: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Ncp() //  []
         { []
         }
     {offset
       c9Ncp: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Ncs() //  []
         { []
         }
     {offset
       c9Ncs: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ncs_info" {
     block_c9Ncs_info:
         const _c9Ncs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.03480661 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$c>=_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c>=_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>=_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Nfx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Nfy; else goto c9Nfz;
       c9Nfy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Nfz: // global
           I64[Sp - 16] = block_c9Nfo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NjE; else goto c9Nfp;
       u9NjE: // global
           call _c9Nfo(R1) args: 0, res: 0, upd: 0;
       c9Nfp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$c>=_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c>=_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Nfo() //  [R1]
         { []
         }
     {offset
       c9Nfo: // global
           _s9LXd::P64 = P64[Sp + 8];
           _c9Nfw::P64 = R1 & 7;
           if (_c9Nfw::P64 < 3) goto u9Nj1; else goto u9Nj2;
       u9Nj1: // global
           if (_c9Nfw::P64 < 2) goto c9Nfs; else goto c9Nft;
       c9Nfs: // global
           I64[Sp + 8] = block_c9NfC_info;
           R1 = _s9LXd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NjA; else goto c9NfE;
       u9NjA: // global
           call _c9NfC(R1) args: 0, res: 0, upd: 0;
       c9NfE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nft: // global
           I64[Sp + 8] = block_c9NfZ_info;
           R1 = _s9LXd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NjB; else goto c9Ng1;
       u9NjB: // global
           call _c9NfZ(R1) args: 0, res: 0, upd: 0;
       c9Ng1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Nj2: // global
           if (_c9Nfw::P64 < 4) goto c9Nfu; else goto c9Nfv;
       c9Nfu: // global
           I64[Sp] = block_c9Ngi_info;
           _s9LXj::P64 = P64[R1 + 5];
           R1 = _s9LXd::P64;
           P64[Sp + 8] = _s9LXj::P64;
           if (R1 & 7 != 0) goto u9NjC; else goto c9Ngk;
       u9NjC: // global
           call _c9Ngi(R1) args: 0, res: 0, upd: 0;
       c9Ngk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nfv: // global
           I64[Sp + 8] = block_c9NiL_info;
           R1 = _s9LXd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NjD; else goto c9NiN;
       u9NjD: // global
           call _c9NiL() args: 0, res: 0, upd: 0;
       c9NiN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Nfo_info" {
     block_c9Nfo_info:
         const _c9Nfo;
         const 1;
         const 30;
 },
 _c9NfC() //  [R1]
         { []
         }
     {offset
       c9NfC: // global
           _c9Nj0::P64 = R1 & 7;
           if (_c9Nj0::P64 < 2) goto u9Nja; else goto u9Nj3;
       u9Nja: // global
           Sp = Sp + 8;
           call _c9Niq() args: 0, res: 0, upd: 0;
       u9Nj3: // global
           if (_c9Nj0::P64 != 3) goto u9Njc; else goto u9Njc;
       u9Njc: // global
           Sp = Sp + 8;
           call _c9NiI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NfC_info" {
     block_c9NfC_info:
         const _c9NfC;
         const 0;
         const 30;
 },
 _c9NfZ() //  [R1]
         { []
         }
     {offset
       c9NfZ: // global
           _c9NiZ::P64 = R1 & 7;
           if (_c9NiZ::P64 != 3) goto u9Nj4; else goto u9Njd;
       u9Nj4: // global
           if (_c9NiZ::P64 != 4) goto u9Njf; else goto u9Nje;
       u9Njf: // global
           Sp = Sp + 8;
           call _c9Niq() args: 0, res: 0, upd: 0;
       u9Nje: // global
           Sp = Sp + 8;
           goto u9NjI;
       u9Njd: // global
           Sp = Sp + 8;
           goto u9NjI;
       u9NjI: // global
           call _c9NiI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NfZ_info" {
     block_c9NfZ_info:
         const _c9NfZ;
         const 0;
         const 30;
 },
 _c9Ngi() //  [R1]
         { []
         }
     {offset
       c9Ngi: // global
           _c9NiS::P64 = R1 & 7;
           if (_c9NiS::P64 == 3) goto c9Ngv; else goto u9Nj5;
       c9Ngv: // global
           I64[Sp] = block_c9Ngt_info;
           _s9LXl::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9LXl::P64;
           if (R1 & 7 != 0) goto u9NjK; else goto c9Ngw;
       u9NjK: // global
           call _c9Ngt(R1) args: 0, res: 0, upd: 0;
       c9Ngw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Nj5: // global
           if (_c9NiS::P64 != 4) goto u9Njh; else goto u9Njg;
       u9Njh: // global
           Sp = Sp + 16;
           call _c9Niq() args: 0, res: 0, upd: 0;
       u9Njg: // global
           Sp = Sp + 16;
           call _c9NiI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Ngi_info" {
     block_c9Ngi_info:
         const _c9Ngi;
         const 1;
         const 30;
 },
 _c9Ngt() //  [R1]
         { []
         }
     {offset
       c9Ngt: // global
           _s9LXl::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9NgD;
               case 2 : goto c9Nh9;
               case 3 : goto c9NhB;
               case 4 : goto c9NhZ;
               case 5 : goto c9Nij;
               case 6 : goto c9Niz;
           }
       c9Niz: // global
           I64[Sp + 8] = block_c9Nix_info;
           R1 = _s9LXl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NjS; else goto c9NiA;
       u9NjS: // global
           call _c9Nix() args: 0, res: 0, upd: 0;
       c9NiA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nij: // global
           I64[Sp + 8] = block_c9Nih_info;
           R1 = _s9LXl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NjR; else goto c9Nik;
       u9NjR: // global
           call _c9Nih(R1) args: 0, res: 0, upd: 0;
       c9Nik: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NhZ: // global
           I64[Sp + 8] = block_c9NhX_info;
           R1 = _s9LXl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NjQ; else goto c9Ni0;
       u9NjQ: // global
           call _c9NhX(R1) args: 0, res: 0, upd: 0;
       c9Ni0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NhB: // global
           I64[Sp + 8] = block_c9Nhz_info;
           R1 = _s9LXl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NjP; else goto c9NhC;
       u9NjP: // global
           call _c9Nhz(R1) args: 0, res: 0, upd: 0;
       c9NhC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nh9: // global
           I64[Sp + 8] = block_c9Nh7_info;
           R1 = _s9LXl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NjO; else goto c9Nha;
       u9NjO: // global
           call _c9Nh7(R1) args: 0, res: 0, upd: 0;
       c9Nha: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NgD: // global
           I64[Sp + 8] = block_c9NgA_info;
           R1 = _s9LXl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NjN; else goto c9NgE;
       u9NjN: // global
           call _c9NgA(R1) args: 0, res: 0, upd: 0;
       c9NgE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ngt_info" {
     block_c9Ngt_info:
         const _c9Ngt;
         const 1;
         const 30;
 },
 _c9Nix() //  []
         { []
         }
     {offset
       c9Nix: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Nix_info" {
     block_c9Nix_info:
         const _c9Nix;
         const 0;
         const 30;
 },
 _c9Nih() //  [R1]
         { []
         }
     {offset
       c9Nih: // global
           if (R1 & 7 == 6) goto u9Nji; else goto u9Njj;
       u9Nji: // global
           Sp = Sp + 8;
           call _c9NiI() args: 0, res: 0, upd: 0;
       u9Njj: // global
           Sp = Sp + 8;
           call _c9Niq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nih_info" {
     block_c9Nih_info:
         const _c9Nih;
         const 0;
         const 30;
 },
 _c9NhX() //  [R1]
         { []
         }
     {offset
       c9NhX: // global
           _c9NiV::P64 = R1 & 7;
           if (_c9NiV::P64 != 5) goto u9Nj9; else goto u9Njk;
       u9Nj9: // global
           if (_c9NiV::P64 != 6) goto u9Njm; else goto u9Njl;
       u9Njm: // global
           Sp = Sp + 8;
           call _c9Niq() args: 0, res: 0, upd: 0;
       u9Njl: // global
           Sp = Sp + 8;
           goto u9Nk1;
       u9Njk: // global
           Sp = Sp + 8;
           goto u9Nk1;
       u9Nk1: // global
           call _c9NiI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NhX_info" {
     block_c9NhX_info:
         const _c9NhX;
         const 0;
         const 30;
 },
 _c9Nhz() //  [R1]
         { []
         }
     {offset
       c9Nhz: // global
           _c9NiW::P64 = R1 & 7;
           if (_c9NiW::P64 < 4) goto u9Njn; else goto u9Nj8;
       u9Njn: // global
           Sp = Sp + 8;
           call _c9Niq() args: 0, res: 0, upd: 0;
       u9Nj8: // global
           if (_c9NiW::P64 != 5) goto u9Njp; else goto u9Njp;
       u9Njp: // global
           Sp = Sp + 8;
           call _c9NiI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nhz_info" {
     block_c9Nhz_info:
         const _c9Nhz;
         const 0;
         const 30;
 },
 _c9Nh7() //  [R1]
         { []
         }
     {offset
       c9Nh7: // global
           _c9NiX::P64 = R1 & 7;
           if (_c9NiX::P64 < 6) goto u9Nj6; else goto u9Njq;
       u9Nj6: // global
           if (_c9NiX::P64 < 3) goto u9Njr; else goto u9Nj7;
       u9Njr: // global
           Sp = Sp + 8;
           call _c9Niq() args: 0, res: 0, upd: 0;
       u9Nj7: // global
           if (_c9NiX::P64 != 4) goto u9Njt; else goto u9Njt;
       u9Njt: // global
           Sp = Sp + 8;
           goto u9NjX;
       u9Njq: // global
           Sp = Sp + 8;
           goto u9NjX;
       u9NjX: // global
           call _c9NiI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nh7_info" {
     block_c9Nh7_info:
         const _c9Nh7;
         const 0;
         const 30;
 },
 _c9NgA() //  [R1]
         { []
         }
     {offset
       c9NgA: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9Nju;
               case 2, 3, 4, 5, 6 : goto u9Njz;
           }
       u9Njz: // global
           Sp = Sp + 8;
           call _c9NiI() args: 0, res: 0, upd: 0;
       u9Nju: // global
           Sp = Sp + 8;
           call _c9Niq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NgA_info" {
     block_c9NgA_info:
         const _c9NgA;
         const 0;
         const 30;
 },
 _c9Niq() //  []
         { []
         }
     {offset
       c9Niq: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9NiI() //  []
         { []
         }
     {offset
       c9NiI: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9NiL() //  []
         { []
         }
     {offset
       c9NiL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NiL_info" {
     block_c9NiL_info:
         const _c9NiL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.065686906 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$c>_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c>_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NlQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NlR; else goto c9NlS;
       c9NlR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NlS: // global
           I64[Sp - 16] = block_c9NlH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NpR; else goto c9NlI;
       u9NpR: // global
           call _c9NlH(R1) args: 0, res: 0, upd: 0;
       c9NlI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$c>_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c>_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NlH() //  [R1]
         { []
         }
     {offset
       c9NlH: // global
           _s9LXv::P64 = P64[Sp + 8];
           _c9NlP::P64 = R1 & 7;
           if (_c9NlP::P64 < 3) goto u9Npg; else goto u9Nph;
       u9Npg: // global
           if (_c9NlP::P64 < 2) goto c9NlL; else goto c9NlM;
       c9NlL: // global
           I64[Sp + 8] = block_c9NlV_info;
           R1 = _s9LXv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NpN; else goto c9NlX;
       u9NpN: // global
           call _c9NlV() args: 0, res: 0, upd: 0;
       c9NlX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NlM: // global
           I64[Sp + 8] = block_c9Nm4_info;
           R1 = _s9LXv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NpO; else goto c9Nm6;
       u9NpO: // global
           call _c9Nm4(R1) args: 0, res: 0, upd: 0;
       c9Nm6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Nph: // global
           if (_c9NlP::P64 < 4) goto c9NlN; else goto c9NlO;
       c9NlN: // global
           I64[Sp] = block_c9Nmr_info;
           _s9LXA::P64 = P64[R1 + 5];
           R1 = _s9LXv::P64;
           P64[Sp + 8] = _s9LXA::P64;
           if (R1 & 7 != 0) goto u9NpP; else goto c9Nmt;
       u9NpP: // global
           call _c9Nmr(R1) args: 0, res: 0, upd: 0;
       c9Nmt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NlO: // global
           I64[Sp + 8] = block_c9NoU_info;
           R1 = _s9LXv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NpQ; else goto c9NoW;
       u9NpQ: // global
           call _c9NoU(R1) args: 0, res: 0, upd: 0;
       c9NoW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NlH_info" {
     block_c9NlH_info:
         const _c9NlH;
         const 1;
         const 30;
 },
 _c9NlV() //  []
         { []
         }
     {offset
       c9NlV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NlV_info" {
     block_c9NlV_info:
         const _c9NlV;
         const 0;
         const 30;
 },
 _c9Nm4() //  [R1]
         { []
         }
     {offset
       c9Nm4: // global
           _c9Npf::P64 = R1 & 7;
           if (_c9Npf::P64 < 2) goto u9Npo; else goto u9Npi;
       u9Npo: // global
           Sp = Sp + 8;
           call _c9Np2() args: 0, res: 0, upd: 0;
       u9Npi: // global
           if (_c9Npf::P64 != 3) goto u9Npq; else goto u9Npq;
       u9Npq: // global
           Sp = Sp + 8;
           call _c9Np6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nm4_info" {
     block_c9Nm4_info:
         const _c9Nm4;
         const 0;
         const 30;
 },
 _c9Nmr() //  [R1]
         { []
         }
     {offset
       c9Nmr: // global
           _c9Np8::P64 = R1 & 7;
           if (_c9Np8::P64 == 3) goto c9NmE; else goto u9Npj;
       c9NmE: // global
           I64[Sp] = block_c9NmC_info;
           _s9LXC::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9LXC::P64;
           if (R1 & 7 != 0) goto u9NpU; else goto c9NmF;
       u9NpU: // global
           call _c9NmC(R1) args: 0, res: 0, upd: 0;
       c9NmF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Npj: // global
           if (_c9Np8::P64 != 4) goto u9Nps; else goto u9Npr;
       u9Nps: // global
           Sp = Sp + 16;
           call _c9Np2() args: 0, res: 0, upd: 0;
       u9Npr: // global
           Sp = Sp + 16;
           call _c9Np6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nmr_info" {
     block_c9Nmr_info:
         const _c9Nmr;
         const 1;
         const 30;
 },
 _c9NmC() //  [R1]
         { []
         }
     {offset
       c9NmC: // global
           _s9LXC::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9NmM;
               case 2 : goto c9NmW;
               case 3 : goto c9Nns;
               case 4 : goto c9NnU;
               case 5 : goto c9Noi;
               case 6 : goto c9NoC;
           }
       c9NoC: // global
           I64[Sp + 8] = block_c9NoA_info;
           R1 = _s9LXC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nq2; else goto c9NoD;
       u9Nq2: // global
           call _c9NoA(R1) args: 0, res: 0, upd: 0;
       c9NoD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Noi: // global
           I64[Sp + 8] = block_c9Nog_info;
           R1 = _s9LXC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nq1; else goto c9Noj;
       u9Nq1: // global
           call _c9Nog(R1) args: 0, res: 0, upd: 0;
       c9Noj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NnU: // global
           I64[Sp + 8] = block_c9NnS_info;
           R1 = _s9LXC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nq0; else goto c9NnV;
       u9Nq0: // global
           call _c9NnS(R1) args: 0, res: 0, upd: 0;
       c9NnV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nns: // global
           I64[Sp + 8] = block_c9Nnq_info;
           R1 = _s9LXC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NpZ; else goto c9Nnt;
       u9NpZ: // global
           call _c9Nnq(R1) args: 0, res: 0, upd: 0;
       c9Nnt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NmW: // global
           I64[Sp + 8] = block_c9NmU_info;
           R1 = _s9LXC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NpY; else goto c9NmX;
       u9NpY: // global
           call _c9NmU(R1) args: 0, res: 0, upd: 0;
       c9NmX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NmM: // global
           I64[Sp + 8] = block_c9NmJ_info;
           R1 = _s9LXC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NpX; else goto c9NmN;
       u9NpX: // global
           call _c9NmJ() args: 0, res: 0, upd: 0;
       c9NmN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NmC_info" {
     block_c9NmC_info:
         const _c9NmC;
         const 1;
         const 30;
 },
 _c9NoA() //  [R1]
         { []
         }
     {offset
       c9NoA: // global
           if (R1 & 7 == 6) goto u9Npt; else goto u9Npu;
       u9Npt: // global
           Sp = Sp + 8;
           call _c9Np6() args: 0, res: 0, upd: 0;
       u9Npu: // global
           Sp = Sp + 8;
           call _c9Np2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NoA_info" {
     block_c9NoA_info:
         const _c9NoA;
         const 0;
         const 30;
 },
 _c9Nog() //  [R1]
         { []
         }
     {offset
       c9Nog: // global
           _c9Npb::P64 = R1 & 7;
           if (_c9Npb::P64 != 5) goto u9Npn; else goto u9Npv;
       u9Npn: // global
           if (_c9Npb::P64 != 6) goto u9Npx; else goto u9Npw;
       u9Npx: // global
           Sp = Sp + 8;
           call _c9Np2() args: 0, res: 0, upd: 0;
       u9Npw: // global
           Sp = Sp + 8;
           goto u9Nqb;
       u9Npv: // global
           Sp = Sp + 8;
           goto u9Nqb;
       u9Nqb: // global
           call _c9Np6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nog_info" {
     block_c9Nog_info:
         const _c9Nog;
         const 0;
         const 30;
 },
 _c9NnS() //  [R1]
         { []
         }
     {offset
       c9NnS: // global
           _c9Npc::P64 = R1 & 7;
           if (_c9Npc::P64 < 4) goto u9Npy; else goto u9Npm;
       u9Npy: // global
           Sp = Sp + 8;
           call _c9Np2() args: 0, res: 0, upd: 0;
       u9Npm: // global
           if (_c9Npc::P64 != 5) goto u9NpA; else goto u9NpA;
       u9NpA: // global
           Sp = Sp + 8;
           call _c9Np6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NnS_info" {
     block_c9NnS_info:
         const _c9NnS;
         const 0;
         const 30;
 },
 _c9Nnq() //  [R1]
         { []
         }
     {offset
       c9Nnq: // global
           _c9Npd::P64 = R1 & 7;
           if (_c9Npd::P64 < 6) goto u9Npk; else goto u9NpB;
       u9Npk: // global
           if (_c9Npd::P64 < 3) goto u9NpC; else goto u9Npl;
       u9NpC: // global
           Sp = Sp + 8;
           call _c9Np2() args: 0, res: 0, upd: 0;
       u9Npl: // global
           if (_c9Npd::P64 != 4) goto u9NpE; else goto u9NpE;
       u9NpE: // global
           Sp = Sp + 8;
           goto u9Nq7;
       u9NpB: // global
           Sp = Sp + 8;
           goto u9Nq7;
       u9Nq7: // global
           call _c9Np6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nnq_info" {
     block_c9Nnq_info:
         const _c9Nnq;
         const 0;
         const 30;
 },
 _c9NmU() //  [R1]
         { []
         }
     {offset
       c9NmU: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9NpF;
               case 2, 3, 4, 5, 6 : goto u9NpK;
           }
       u9NpK: // global
           Sp = Sp + 8;
           call _c9Np6() args: 0, res: 0, upd: 0;
       u9NpF: // global
           Sp = Sp + 8;
           call _c9Np2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NmU_info" {
     block_c9NmU_info:
         const _c9NmU;
         const 0;
         const 30;
 },
 _c9NmJ() //  []
         { []
         }
     {offset
       c9NmJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NmJ_info" {
     block_c9NmJ_info:
         const _c9NmJ;
         const 0;
         const 30;
 },
 _c9NoU() //  [R1]
         { []
         }
     {offset
       c9NoU: // global
           if (R1 & 7 == 4) goto u9NpL; else goto u9NpM;
       u9NpL: // global
           Sp = Sp + 8;
           call _c9Np6() args: 0, res: 0, upd: 0;
       u9NpM: // global
           Sp = Sp + 8;
           call _c9Np2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NoU_info" {
     block_c9NoU_info:
         const _c9NoU;
         const 0;
         const 30;
 },
 _c9Np6() //  []
         { []
         }
     {offset
       c9Np6: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Np2() //  []
         { []
         }
     {offset
       c9Np2: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.095443413 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$c<=_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c<=_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<=_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Ns3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ns4; else goto c9Ns5;
       c9Ns4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Ns5: // global
           I64[Sp - 16] = block_c9NrU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Nw4; else goto c9NrV;
       u9Nw4: // global
           call _c9NrU(R1) args: 0, res: 0, upd: 0;
       c9NrV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$c<=_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$c<=_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NrU() //  [R1]
         { []
         }
     {offset
       c9NrU: // global
           _s9LXM::P64 = P64[Sp + 8];
           _c9Ns2::P64 = R1 & 7;
           if (_c9Ns2::P64 < 3) goto u9Nvt; else goto u9Nvu;
       u9Nvt: // global
           if (_c9Ns2::P64 < 2) goto c9NrY; else goto c9NrZ;
       c9NrY: // global
           I64[Sp + 8] = block_c9Ns8_info;
           R1 = _s9LXM::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nw0; else goto c9Nsa;
       u9Nw0: // global
           call _c9Ns8() args: 0, res: 0, upd: 0;
       c9Nsa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NrZ: // global
           I64[Sp + 8] = block_c9Nsh_info;
           R1 = _s9LXM::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nw1; else goto c9Nsj;
       u9Nw1: // global
           call _c9Nsh(R1) args: 0, res: 0, upd: 0;
       c9Nsj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Nvu: // global
           if (_c9Ns2::P64 < 4) goto c9Ns0; else goto c9Ns1;
       c9Ns0: // global
           I64[Sp] = block_c9NsE_info;
           _s9LXR::P64 = P64[R1 + 5];
           R1 = _s9LXM::P64;
           P64[Sp + 8] = _s9LXR::P64;
           if (R1 & 7 != 0) goto u9Nw2; else goto c9NsG;
       u9Nw2: // global
           call _c9NsE(R1) args: 0, res: 0, upd: 0;
       c9NsG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Ns1: // global
           I64[Sp + 8] = block_c9Nv7_info;
           R1 = _s9LXM::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nw3; else goto c9Nv9;
       u9Nw3: // global
           call _c9Nv7(R1) args: 0, res: 0, upd: 0;
       c9Nv9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NrU_info" {
     block_c9NrU_info:
         const _c9NrU;
         const 1;
         const 30;
 },
 _c9Ns8() //  []
         { []
         }
     {offset
       c9Ns8: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ns8_info" {
     block_c9Ns8_info:
         const _c9Ns8;
         const 0;
         const 30;
 },
 _c9Nsh() //  [R1]
         { []
         }
     {offset
       c9Nsh: // global
           _c9Nvs::P64 = R1 & 7;
           if (_c9Nvs::P64 < 2) goto u9NvB; else goto u9Nvv;
       u9NvB: // global
           Sp = Sp + 8;
           call _c9Nvf() args: 0, res: 0, upd: 0;
       u9Nvv: // global
           if (_c9Nvs::P64 != 3) goto u9NvD; else goto u9NvD;
       u9NvD: // global
           Sp = Sp + 8;
           call _c9Nvj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nsh_info" {
     block_c9Nsh_info:
         const _c9Nsh;
         const 0;
         const 30;
 },
 _c9NsE() //  [R1]
         { []
         }
     {offset
       c9NsE: // global
           _c9Nvl::P64 = R1 & 7;
           if (_c9Nvl::P64 == 3) goto c9NsR; else goto u9Nvw;
       c9NsR: // global
           I64[Sp] = block_c9NsP_info;
           _s9LXT::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9LXT::P64;
           if (R1 & 7 != 0) goto u9Nw7; else goto c9NsS;
       u9Nw7: // global
           call _c9NsP(R1) args: 0, res: 0, upd: 0;
       c9NsS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9Nvw: // global
           if (_c9Nvl::P64 != 4) goto u9NvF; else goto u9NvE;
       u9NvF: // global
           Sp = Sp + 16;
           call _c9Nvf() args: 0, res: 0, upd: 0;
       u9NvE: // global
           Sp = Sp + 16;
           call _c9Nvj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NsE_info" {
     block_c9NsE_info:
         const _c9NsE;
         const 1;
         const 30;
 },
 _c9NsP() //  [R1]
         { []
         }
     {offset
       c9NsP: // global
           _s9LXT::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9NsZ;
               case 2 : goto c9Nt9;
               case 3 : goto c9NtF;
               case 4 : goto c9Nu7;
               case 5 : goto c9Nuv;
               case 6 : goto c9NuP;
           }
       c9NuP: // global
           I64[Sp + 8] = block_c9NuN_info;
           R1 = _s9LXT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nwf; else goto c9NuQ;
       u9Nwf: // global
           call _c9NuN(R1) args: 0, res: 0, upd: 0;
       c9NuQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nuv: // global
           I64[Sp + 8] = block_c9Nut_info;
           R1 = _s9LXT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nwe; else goto c9Nuw;
       u9Nwe: // global
           call _c9Nut(R1) args: 0, res: 0, upd: 0;
       c9Nuw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nu7: // global
           I64[Sp + 8] = block_c9Nu5_info;
           R1 = _s9LXT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nwd; else goto c9Nu8;
       u9Nwd: // global
           call _c9Nu5(R1) args: 0, res: 0, upd: 0;
       c9Nu8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NtF: // global
           I64[Sp + 8] = block_c9NtD_info;
           R1 = _s9LXT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nwc; else goto c9NtG;
       u9Nwc: // global
           call _c9NtD(R1) args: 0, res: 0, upd: 0;
       c9NtG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nt9: // global
           I64[Sp + 8] = block_c9Nt7_info;
           R1 = _s9LXT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nwb; else goto c9Nta;
       u9Nwb: // global
           call _c9Nt7(R1) args: 0, res: 0, upd: 0;
       c9Nta: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NsZ: // global
           I64[Sp + 8] = block_c9NsW_info;
           R1 = _s9LXT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9Nwa; else goto c9Nt0;
       u9Nwa: // global
           call _c9NsW() args: 0, res: 0, upd: 0;
       c9Nt0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NsP_info" {
     block_c9NsP_info:
         const _c9NsP;
         const 1;
         const 30;
 },
 _c9NuN() //  [R1]
         { []
         }
     {offset
       c9NuN: // global
           if (R1 & 7 == 6) goto u9NvG; else goto u9NvH;
       u9NvG: // global
           Sp = Sp + 8;
           call _c9Nvj() args: 0, res: 0, upd: 0;
       u9NvH: // global
           Sp = Sp + 8;
           call _c9Nvf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NuN_info" {
     block_c9NuN_info:
         const _c9NuN;
         const 0;
         const 30;
 },
 _c9Nut() //  [R1]
         { []
         }
     {offset
       c9Nut: // global
           _c9Nvo::P64 = R1 & 7;
           if (_c9Nvo::P64 != 5) goto u9NvA; else goto u9NvI;
       u9NvA: // global
           if (_c9Nvo::P64 != 6) goto u9NvK; else goto u9NvJ;
       u9NvK: // global
           Sp = Sp + 8;
           call _c9Nvf() args: 0, res: 0, upd: 0;
       u9NvJ: // global
           Sp = Sp + 8;
           goto u9Nwo;
       u9NvI: // global
           Sp = Sp + 8;
           goto u9Nwo;
       u9Nwo: // global
           call _c9Nvj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nut_info" {
     block_c9Nut_info:
         const _c9Nut;
         const 0;
         const 30;
 },
 _c9Nu5() //  [R1]
         { []
         }
     {offset
       c9Nu5: // global
           _c9Nvp::P64 = R1 & 7;
           if (_c9Nvp::P64 < 4) goto u9NvL; else goto u9Nvz;
       u9NvL: // global
           Sp = Sp + 8;
           call _c9Nvf() args: 0, res: 0, upd: 0;
       u9Nvz: // global
           if (_c9Nvp::P64 != 5) goto u9NvN; else goto u9NvN;
       u9NvN: // global
           Sp = Sp + 8;
           call _c9Nvj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nu5_info" {
     block_c9Nu5_info:
         const _c9Nu5;
         const 0;
         const 30;
 },
 _c9NtD() //  [R1]
         { []
         }
     {offset
       c9NtD: // global
           _c9Nvq::P64 = R1 & 7;
           if (_c9Nvq::P64 < 6) goto u9Nvx; else goto u9NvO;
       u9Nvx: // global
           if (_c9Nvq::P64 < 3) goto u9NvP; else goto u9Nvy;
       u9NvP: // global
           Sp = Sp + 8;
           call _c9Nvf() args: 0, res: 0, upd: 0;
       u9Nvy: // global
           if (_c9Nvq::P64 != 4) goto u9NvR; else goto u9NvR;
       u9NvR: // global
           Sp = Sp + 8;
           goto u9Nwk;
       u9NvO: // global
           Sp = Sp + 8;
           goto u9Nwk;
       u9Nwk: // global
           call _c9Nvj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NtD_info" {
     block_c9NtD_info:
         const _c9NtD;
         const 0;
         const 30;
 },
 _c9Nt7() //  [R1]
         { []
         }
     {offset
       c9Nt7: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9NvS;
               case 2, 3, 4, 5, 6 : goto u9NvX;
           }
       u9NvX: // global
           Sp = Sp + 8;
           call _c9Nvj() args: 0, res: 0, upd: 0;
       u9NvS: // global
           Sp = Sp + 8;
           call _c9Nvf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nt7_info" {
     block_c9Nt7_info:
         const _c9Nt7;
         const 0;
         const 30;
 },
 _c9NsW() //  []
         { []
         }
     {offset
       c9NsW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NsW_info" {
     block_c9NsW_info:
         const _c9NsW;
         const 0;
         const 30;
 },
 _c9Nv7() //  [R1]
         { []
         }
     {offset
       c9Nv7: // global
           if (R1 & 7 == 4) goto u9NvY; else goto u9NvZ;
       u9NvY: // global
           Sp = Sp + 8;
           call _c9Nvj() args: 0, res: 0, upd: 0;
       u9NvZ: // global
           Sp = Sp + 8;
           call _c9Nvf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nv7_info" {
     block_c9Nv7_info:
         const _c9Nv7;
         const 0;
         const 30;
 },
 _c9Nvj() //  []
         { []
         }
     {offset
       c9Nvj: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Nvf() //  []
         { []
         }
     {offset
       c9Nvf: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.126930628 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$cmax_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$cmax_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmax_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Nyg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Nyh; else goto c9Nyi;
       c9Nyh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Nyi: // global
           I64[Sp - 16] = block_c9Ny7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NBV; else goto c9Ny8;
       u9NBV: // global
           call _c9Ny7(R1) args: 0, res: 0, upd: 0;
       c9Ny8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$cmax_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$cmax_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9Ny7() //  [R1]
         { []
         }
     {offset
       c9Ny7: // global
           _s9LY3::P64 = P64[Sp + 8];
           _c9Nyf::P64 = R1 & 7;
           if (_c9Nyf::P64 < 3) goto u9NBp; else goto u9NBq;
       u9NBp: // global
           if (_c9Nyf::P64 < 2) goto c9Nyb; else goto c9Nyc;
       c9Nyb: // global
           R1 = _s9LY3::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Nyc: // global
           I64[Sp + 8] = block_c9Nyo_info;
           R1 = _s9LY3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NBS; else goto c9Nyq;
       u9NBS: // global
           call _c9Nyo(R1) args: 0, res: 0, upd: 0;
       c9Nyq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9NBq: // global
           if (_c9Nyf::P64 < 4) goto c9Nyd; else goto c9Nye;
       c9Nyd: // global
           I64[Sp - 8] = block_c9NyH_info;
           _s9LY4::P64 = R1;
           _s9LY7::P64 = P64[R1 + 5];
           R1 = _s9LY3::P64;
           P64[Sp] = _s9LY7::P64;
           P64[Sp + 8] = _s9LY4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9NBT; else goto c9NyJ;
       u9NBT: // global
           call _c9NyH(R1) args: 0, res: 0, upd: 0;
       c9NyJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nye: // global
           I64[Sp + 8] = block_c9NBa_info;
           R1 = _s9LY3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NBU; else goto c9NBc;
       u9NBU: // global
           call _c9NBa() args: 0, res: 0, upd: 0;
       c9NBc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ny7_info" {
     block_c9Ny7_info:
         const _c9Ny7;
         const 1;
         const 30;
 },
 _c9Nyo() //  [R1]
         { []
         }
     {offset
       c9Nyo: // global
           _c9NBo::P64 = R1 & 7;
           if (_c9NBo::P64 == 3) goto c9NyA; else goto u9NBr;
       c9NyA: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9NBr: // global
           if (_c9NBo::P64 != 4) goto c9Nyw; else goto u9NBx;
       c9Nyw: // global
           R1 = GHC.Conc.Sync.ThreadFinished_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9NBx: // global
           Sp = Sp + 8;
           call _c9NB7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nyo_info" {
     block_c9Nyo_info:
         const _c9Nyo;
         const 0;
         const 30;
 },
 _c9NyH() //  [R1]
         { []
         }
     {offset
       c9NyH: // global
           _c9NBh::P64 = R1 & 7;
           if (_c9NBh::P64 == 3) goto c9NyU; else goto u9NBs;
       c9NyU: // global
           I64[Sp - 8] = block_c9NyS_info;
           _s9LY8::P64 = R1;
           _s9LY9::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp] = _s9LY9::P64;
           P64[Sp + 8] = _s9LY8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9NBX; else goto c9NyV;
       u9NBX: // global
           call _c9NyS(R1) args: 0, res: 0, upd: 0;
       c9NyV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9NBs: // global
           if (_c9NBh::P64 != 4) goto u9NBz; else goto u9NBy;
       u9NBz: // global
           Sp = Sp + 16;
           call _c9NAZ() args: 0, res: 0, upd: 0;
       u9NBy: // global
           Sp = Sp + 24;
           call _c9NB7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NyH_info" {
     block_c9NyH_info:
         const _c9NyH;
         const 2;
         const 30;
 },
 _c9NyS() //  [R1]
         { []
         }
     {offset
       c9NyS: // global
           _s9LY9::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9Nz2;
               case 2 : goto c9Nzc;
               case 3 : goto c9NzI;
               case 4 : goto c9NAa;
               case 5 : goto c9NAy;
               case 6 : goto c9NAS;
           }
       c9NAS: // global
           I64[Sp + 8] = block_c9NAQ_info;
           R1 = _s9LY9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NC5; else goto c9NAT;
       u9NC5: // global
           call _c9NAQ(R1) args: 0, res: 0, upd: 0;
       c9NAT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NAy: // global
           I64[Sp + 8] = block_c9NAw_info;
           R1 = _s9LY9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NC4; else goto c9NAz;
       u9NC4: // global
           call _c9NAw(R1) args: 0, res: 0, upd: 0;
       c9NAz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NAa: // global
           I64[Sp + 8] = block_c9NA8_info;
           R1 = _s9LY9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NC3; else goto c9NAb;
       u9NC3: // global
           call _c9NA8(R1) args: 0, res: 0, upd: 0;
       c9NAb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NzI: // global
           I64[Sp + 8] = block_c9NzG_info;
           R1 = _s9LY9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NC2; else goto c9NzJ;
       u9NC2: // global
           call _c9NzG(R1) args: 0, res: 0, upd: 0;
       c9NzJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nzc: // global
           I64[Sp + 8] = block_c9Nza_info;
           R1 = _s9LY9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NC1; else goto c9Nzd;
       u9NC1: // global
           call _c9Nza(R1) args: 0, res: 0, upd: 0;
       c9Nzd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9Nz2: // global
           I64[Sp + 8] = block_c9NyZ_info;
           R1 = _s9LY9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NC0; else goto c9Nz3;
       u9NC0: // global
           call _c9NyZ() args: 0, res: 0, upd: 0;
       c9Nz3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NyS_info" {
     block_c9NyS_info:
         const _c9NyS;
         const 3;
         const 30;
 },
 _c9NAQ() //  [R1]
         { []
         }
     {offset
       c9NAQ: // global
           if (R1 & 7 == 6) goto u9NBA; else goto u9NBB;
       u9NBA: // global
           Sp = Sp + 8;
           call _c9NB3() args: 0, res: 0, upd: 0;
       u9NBB: // global
           Sp = Sp + 16;
           call _c9NAZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NAQ_info" {
     block_c9NAQ_info:
         const _c9NAQ;
         const 2;
         const 30;
 },
 _c9NAw() //  [R1]
         { []
         }
     {offset
       c9NAw: // global
           _c9NBk::P64 = R1 & 7;
           if (_c9NBk::P64 != 5) goto u9NBw; else goto u9NBC;
       u9NBw: // global
           if (_c9NBk::P64 != 6) goto u9NBE; else goto u9NBD;
       u9NBE: // global
           Sp = Sp + 16;
           call _c9NAZ() args: 0, res: 0, upd: 0;
       u9NBD: // global
           Sp = Sp + 8;
           goto u9NCe;
       u9NBC: // global
           Sp = Sp + 8;
           goto u9NCe;
       u9NCe: // global
           call _c9NB3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NAw_info" {
     block_c9NAw_info:
         const _c9NAw;
         const 2;
         const 30;
 },
 _c9NA8() //  [R1]
         { []
         }
     {offset
       c9NA8: // global
           _c9NBl::P64 = R1 & 7;
           if (_c9NBl::P64 < 4) goto u9NBF; else goto u9NBv;
       u9NBF: // global
           Sp = Sp + 16;
           call _c9NAZ() args: 0, res: 0, upd: 0;
       u9NBv: // global
           if (_c9NBl::P64 != 5) goto u9NBH; else goto u9NBH;
       u9NBH: // global
           Sp = Sp + 8;
           call _c9NB3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NA8_info" {
     block_c9NA8_info:
         const _c9NA8;
         const 2;
         const 30;
 },
 _c9NzG() //  [R1]
         { []
         }
     {offset
       c9NzG: // global
           _c9NBm::P64 = R1 & 7;
           if (_c9NBm::P64 < 6) goto u9NBt; else goto u9NBI;
       u9NBt: // global
           if (_c9NBm::P64 < 3) goto u9NBJ; else goto u9NBu;
       u9NBJ: // global
           Sp = Sp + 16;
           call _c9NAZ() args: 0, res: 0, upd: 0;
       u9NBu: // global
           if (_c9NBm::P64 != 4) goto u9NBL; else goto u9NBL;
       u9NBL: // global
           Sp = Sp + 8;
           goto u9NCa;
       u9NBI: // global
           Sp = Sp + 8;
           goto u9NCa;
       u9NCa: // global
           call _c9NB3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NzG_info" {
     block_c9NzG_info:
         const _c9NzG;
         const 2;
         const 30;
 },
 _c9Nza() //  [R1]
         { []
         }
     {offset
       c9Nza: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9NBM;
               case 2, 3, 4, 5, 6 : goto u9NBR;
           }
       u9NBR: // global
           Sp = Sp + 8;
           call _c9NB3() args: 0, res: 0, upd: 0;
       u9NBM: // global
           Sp = Sp + 16;
           call _c9NAZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Nza_info" {
     block_c9Nza_info:
         const _c9Nza;
         const 2;
         const 30;
 },
 _c9NB3() //  []
         { []
         }
     {offset
       c9NB3: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9NyZ() //  []
         { []
         }
     {offset
       c9NyZ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NyZ_info" {
     block_c9NyZ_info:
         const _c9NyZ;
         const 130;
         const 30;
 },
 _c9NAZ() //  []
         { []
         }
     {offset
       c9NAZ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9NB7() //  []
         { []
         }
     {offset
       c9NB7: // global
           R1 = GHC.Conc.Sync.ThreadDied_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9NBa() //  []
         { []
         }
     {offset
       c9NBa: // global
           R1 = GHC.Conc.Sync.ThreadDied_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NBa_info" {
     block_c9NBa_info:
         const _c9NBa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.156788476 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_$cmin_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_$cmin_closure:
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmin_info;
 },
 GHC.Conc.Sync.$fOrdThreadStatus_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NE4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9NE5; else goto c9NE6;
       c9NE5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadStatus_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NE6: // global
           I64[Sp - 16] = block_c9NDV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NHM; else goto c9NDW;
       u9NHM: // global
           call _c9NDV(R1) args: 0, res: 0, upd: 0;
       c9NDW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadStatus_$cmin_info" {
     GHC.Conc.Sync.$fOrdThreadStatus_$cmin_info:
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NDV() //  [R1]
         { []
         }
     {offset
       c9NDV: // global
           _s9LYj::P64 = P64[Sp + 8];
           _c9NE3::P64 = R1 & 7;
           if (_c9NE3::P64 < 3) goto u9NHh; else goto u9NHi;
       u9NHh: // global
           if (_c9NE3::P64 < 2) goto c9NDZ; else goto c9NE0;
       c9NDZ: // global
           I64[Sp + 8] = block_c9NE9_info;
           R1 = _s9LYj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NHJ; else goto c9NEb;
       u9NHJ: // global
           call _c9NE9() args: 0, res: 0, upd: 0;
       c9NEb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NE0: // global
           I64[Sp + 8] = block_c9NEi_info;
           R1 = _s9LYj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NHK; else goto c9NEk;
       u9NHK: // global
           call _c9NEi(R1) args: 0, res: 0, upd: 0;
       c9NEk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9NHi: // global
           if (_c9NE3::P64 < 4) goto c9NE1; else goto c9NE2;
       c9NE1: // global
           I64[Sp - 8] = block_c9NEF_info;
           _s9LYk::P64 = R1;
           _s9LYo::P64 = P64[R1 + 5];
           R1 = _s9LYj::P64;
           P64[Sp] = _s9LYo::P64;
           P64[Sp + 8] = _s9LYk::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9NHL; else goto c9NEH;
       u9NHL: // global
           call _c9NEF(R1) args: 0, res: 0, upd: 0;
       c9NEH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NE2: // global
           R1 = _s9LYj::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NDV_info" {
     block_c9NDV_info:
         const _c9NDV;
         const 1;
         const 30;
 },
 _c9NE9() //  []
         { []
         }
     {offset
       c9NE9: // global
           R1 = GHC.Conc.Sync.ThreadRunning_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NE9_info" {
     block_c9NE9_info:
         const _c9NE9;
         const 0;
         const 30;
 },
 _c9NEi() //  [R1]
         { []
         }
     {offset
       c9NEi: // global
           _c9NHg::P64 = R1 & 7;
           if (_c9NHg::P64 < 2) goto c9NEq; else goto u9NHj;
       c9NEq: // global
           R1 = GHC.Conc.Sync.ThreadRunning_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9NHj: // global
           if (_c9NHg::P64 != 3) goto c9NEC; else goto c9NEC;
       c9NEC: // global
           R1 = GHC.Conc.Sync.ThreadFinished_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NEi_info" {
     block_c9NEi_info:
         const _c9NEi;
         const 0;
         const 30;
 },
 _c9NEF() //  [R1]
         { []
         }
     {offset
       c9NEF: // global
           _c9NH9::P64 = R1 & 7;
           if (_c9NH9::P64 == 3) goto c9NES; else goto u9NHk;
       c9NES: // global
           I64[Sp - 8] = block_c9NEQ_info;
           _s9LYp::P64 = R1;
           _s9LYq::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp] = _s9LYq::P64;
           P64[Sp + 8] = _s9LYp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9NHN; else goto c9NET;
       u9NHN: // global
           call _c9NEQ(R1) args: 0, res: 0, upd: 0;
       c9NET: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u9NHk: // global
           if (_c9NH9::P64 == 4) goto u9NHp; else goto u9NHq;
       u9NHp: // global
           Sp = Sp + 16;
           call _c9NH5() args: 0, res: 0, upd: 0;
       u9NHq: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call _c9NGX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NEF_info" {
     block_c9NEF_info:
         const _c9NEF;
         const 2;
         const 30;
 },
 _c9NEQ() //  [R1]
         { []
         }
     {offset
       c9NEQ: // global
           _s9LYq::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c9NF0;
               case 2 : goto c9NFa;
               case 3 : goto c9NFG;
               case 4 : goto c9NG8;
               case 5 : goto c9NGw;
               case 6 : goto c9NGQ;
           }
       c9NGQ: // global
           I64[Sp + 8] = block_c9NGO_info;
           R1 = _s9LYq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NHV; else goto c9NGR;
       u9NHV: // global
           call _c9NGO(R1) args: 0, res: 0, upd: 0;
       c9NGR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NGw: // global
           I64[Sp + 8] = block_c9NGu_info;
           R1 = _s9LYq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NHU; else goto c9NGx;
       u9NHU: // global
           call _c9NGu(R1) args: 0, res: 0, upd: 0;
       c9NGx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NG8: // global
           I64[Sp + 8] = block_c9NG6_info;
           R1 = _s9LYq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NHT; else goto c9NG9;
       u9NHT: // global
           call _c9NG6(R1) args: 0, res: 0, upd: 0;
       c9NG9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NFG: // global
           I64[Sp + 8] = block_c9NFE_info;
           R1 = _s9LYq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NHS; else goto c9NFH;
       u9NHS: // global
           call _c9NFE(R1) args: 0, res: 0, upd: 0;
       c9NFH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NFa: // global
           I64[Sp + 8] = block_c9NF8_info;
           R1 = _s9LYq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9NHR; else goto c9NFb;
       u9NHR: // global
           call _c9NF8(R1) args: 0, res: 0, upd: 0;
       c9NFb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9NF0: // global
           I64[Sp + 16] = block_c9NEX_info;
           R1 = _s9LYq::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9NHQ; else goto c9NF1;
       u9NHQ: // global
           call _c9NEX() args: 0, res: 0, upd: 0;
       c9NF1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NEQ_info" {
     block_c9NEQ_info:
         const _c9NEQ;
         const 3;
         const 30;
 },
 _c9NGO() //  [R1]
         { []
         }
     {offset
       c9NGO: // global
           if (R1 & 7 == 6) goto u9NHr; else goto u9NHs;
       u9NHr: // global
           Sp = Sp + 16;
           call _c9NH5() args: 0, res: 0, upd: 0;
       u9NHs: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c9NGX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NGO_info" {
     block_c9NGO_info:
         const _c9NGO;
         const 2;
         const 30;
 },
 _c9NGu() //  [R1]
         { []
         }
     {offset
       c9NGu: // global
           _c9NHc::P64 = R1 & 7;
           if (_c9NHc::P64 != 5) goto u9NHo; else goto u9NHt;
       u9NHo: // global
           if (_c9NHc::P64 != 6) goto u9NHv; else goto u9NHu;
       u9NHv: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c9NGX() args: 0, res: 0, upd: 0;
       u9NHu: // global
           Sp = Sp + 16;
           goto u9NI4;
       u9NHt: // global
           Sp = Sp + 16;
           goto u9NI4;
       u9NI4: // global
           call _c9NH5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NGu_info" {
     block_c9NGu_info:
         const _c9NGu;
         const 2;
         const 30;
 },
 _c9NG6() //  [R1]
         { []
         }
     {offset
       c9NG6: // global
           _c9NHd::P64 = R1 & 7;
           if (_c9NHd::P64 < 4) goto u9NHw; else goto u9NHn;
       u9NHw: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c9NGX() args: 0, res: 0, upd: 0;
       u9NHn: // global
           if (_c9NHd::P64 != 5) goto u9NHy; else goto u9NHy;
       u9NHy: // global
           Sp = Sp + 16;
           call _c9NH5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NG6_info" {
     block_c9NG6_info:
         const _c9NG6;
         const 2;
         const 30;
 },
 _c9NFE() //  [R1]
         { []
         }
     {offset
       c9NFE: // global
           _c9NHe::P64 = R1 & 7;
           if (_c9NHe::P64 < 6) goto u9NHl; else goto u9NHz;
       u9NHl: // global
           if (_c9NHe::P64 < 3) goto u9NHA; else goto u9NHm;
       u9NHA: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c9NGX() args: 0, res: 0, upd: 0;
       u9NHm: // global
           if (_c9NHe::P64 != 4) goto u9NHC; else goto u9NHC;
       u9NHC: // global
           Sp = Sp + 16;
           goto u9NI0;
       u9NHz: // global
           Sp = Sp + 16;
           goto u9NI0;
       u9NI0: // global
           call _c9NH5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NFE_info" {
     block_c9NFE_info:
         const _c9NFE;
         const 2;
         const 30;
 },
 _c9NF8() //  [R1]
         { []
         }
     {offset
       c9NF8: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto u9NHD;
               case 2, 3, 4, 5, 6 : goto u9NHI;
           }
       u9NHI: // global
           Sp = Sp + 16;
           call _c9NH5() args: 0, res: 0, upd: 0;
       u9NHD: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c9NGX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9NF8_info" {
     block_c9NF8_info:
         const _c9NF8;
         const 2;
         const 30;
 },
 _c9NEX() //  []
         { []
         }
     {offset
       c9NEX: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NEX_info" {
     block_c9NEX_info:
         const _c9NEX;
         const 1;
         const 30;
 },
 _c9NH5() //  []
         { []
         }
     {offset
       c9NH5: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9NGX() //  []
         { []
         }
     {offset
       c9NGX: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.180613362 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadStatus_closure" {
     GHC.Conc.Sync.$fOrdThreadStatus_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Conc.Sync.$fEqThreadStatus_closure+1;
         const GHC.Conc.Sync.$fOrdThreadStatus_$ccompare_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$c<=_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$c>=_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmax_closure+2;
         const GHC.Conc.Sync.$fOrdThreadStatus_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.182398488 UTC

[section ""cstring" . GHC.Conc.Sync.$trModule4_bytes" {
     GHC.Conc.Sync.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.183906287 UTC

[section ""data" . GHC.Conc.Sync.$trModule3_closure" {
     GHC.Conc.Sync.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.185519373 UTC

[section ""cstring" . GHC.Conc.Sync.$trModule2_bytes" {
     GHC.Conc.Sync.$trModule2_bytes:
         I8[] [71,72,67,46,67,111,110,99,46,83,121,110,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.187069772 UTC

[section ""data" . GHC.Conc.Sync.$trModule1_closure" {
     GHC.Conc.Sync.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.18871049 UTC

[section ""data" . GHC.Conc.Sync.$trModule_closure" {
     GHC.Conc.Sync.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Conc.Sync.$trModule3_closure+1;
         const GHC.Conc.Sync.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.192967481 UTC

[section ""data" . $krep_r9FuN_closure" {
     $krep_r9FuN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'LiftedRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.194902216 UTC

[section ""data" . $krep1_r9FuO_closure" {
     $krep1_r9FuO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRuntimeRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.196873817 UTC

[section ""data" . $krep2_r9FuP_closure" {
     $krep2_r9FuP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.198658906 UTC

[section ""data" . $krep3_r9FuQ_closure" {
     $krep3_r9FuQ_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.200339716 UTC

[section ""data" . $krep4_r9FuR_closure" {
     $krep4_r9FuR_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcThreadId#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.202751248 UTC

[section ""data" . $krep5_r9FuS_closure" {
     $krep5_r9FuS_closure:
         const :_con_info;
         const $krep3_r9FuQ_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.20456412 UTC

[section ""data" . $krep6_r9FuT_closure" {
     $krep6_r9FuT_closure:
         const :_con_info;
         const $krep2_r9FuP_closure+1;
         const $krep5_r9FuS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.206224227 UTC

[section ""data" . $krep7_r9FuU_closure" {
     $krep7_r9FuU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcTVar#_closure;
         const $krep6_r9FuT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.208729564 UTC

[section ""data" . $krep8_r9FuV_closure" {
     $krep8_r9FuV_closure:
         const :_con_info;
         const $krep2_r9FuP_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.210635656 UTC

[section ""data" . $krep9_r9FuW_closure" {
     $krep9_r9FuW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcState#_closure;
         const $krep8_r9FuV_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.212306317 UTC

[section ""data" . $krep10_r9FuX_closure" {
     $krep10_r9FuX_closure:
         const :_con_info;
         const $krep1_r9FuO_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.214277326 UTC

[section ""data" . $krep11_r9FuY_closure" {
     $krep11_r9FuY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'[]_closure;
         const $krep10_r9FuX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.216750238 UTC

[section ""data" . $krep12_r9FuZ_closure" {
     $krep12_r9FuZ_closure:
         const :_con_info;
         const $krep11_r9FuY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.218866451 UTC

[section ""data" . $krep13_r9Fv0_closure" {
     $krep13_r9Fv0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'TupleRep_closure;
         const $krep12_r9FuZ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.220553188 UTC

[section ""data" . $krep14_r9Fv1_closure" {
     $krep14_r9Fv1_closure:
         const :_con_info;
         const $krep9_r9FuW_closure+1;
         const $krep5_r9FuS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.222232715 UTC

[section ""data" . $krep15_r9Fv2_closure" {
     $krep15_r9Fv2_closure:
         const :_con_info;
         const $krep_r9FuN_closure+1;
         const $krep14_r9Fv1_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.223824184 UTC

[section ""data" . $krep16_r9Fv3_closure" {
     $krep16_r9Fv3_closure:
         const :_con_info;
         const $krep13_r9Fv0_closure+1;
         const $krep15_r9Fv2_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.225967456 UTC

[section ""data" . $krep17_r9Fv4_closure" {
     $krep17_r9Fv4_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc(#,#)_closure;
         const $krep16_r9Fv3_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.227573815 UTC

[section ""data" . $krep18_r9Fv5_closure" {
     $krep18_r9Fv5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r9FuW_closure+1;
         const $krep17_r9Fv4_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.22927953 UTC

[section ""cstring" . GHC.Conc.Sync.$tcThreadId2_bytes" {
     GHC.Conc.Sync.$tcThreadId2_bytes:
         I8[] [84,104,114,101,97,100,73,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.230975069 UTC

[section ""data" . GHC.Conc.Sync.$tcThreadId1_closure" {
     GHC.Conc.Sync.$tcThreadId1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcThreadId2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.232685516 UTC

[section ""data" . GHC.Conc.Sync.$tcThreadId_closure" {
     GHC.Conc.Sync.$tcThreadId_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcThreadId1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16775948407395805744;
         const 12520674293648100702;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.234555167 UTC

[section ""data" . $krep19_r9Fv6_closure" {
     $krep19_r9Fv6_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Conc.Sync.$tcThreadId_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.236825331 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadId1_closure" {
     GHC.Conc.Sync.$tc'ThreadId1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r9FuR_closure+1;
         const $krep19_r9Fv6_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.238475598 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'ThreadId3_bytes" {
     GHC.Conc.Sync.$tc'ThreadId3_bytes:
         I8[] [39,84,104,114,101,97,100,73,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.240111616 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadId2_closure" {
     GHC.Conc.Sync.$tc'ThreadId2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'ThreadId3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.241759722 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadId_closure" {
     GHC.Conc.Sync.$tc'ThreadId_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'ThreadId2_closure+1;
         const GHC.Conc.Sync.$tc'ThreadId1_closure+4;
         const 18342150043682338300;
         const 5104860271509165481;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.243475956 UTC

[section ""cstring" . GHC.Conc.Sync.$tcBlockReason2_bytes" {
     GHC.Conc.Sync.$tcBlockReason2_bytes:
         I8[] [66,108,111,99,107,82,101,97,115,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.245061873 UTC

[section ""data" . GHC.Conc.Sync.$tcBlockReason1_closure" {
     GHC.Conc.Sync.$tcBlockReason1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcBlockReason2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.247115046 UTC

[section ""data" . GHC.Conc.Sync.$tcBlockReason_closure" {
     GHC.Conc.Sync.$tcBlockReason_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcBlockReason1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13301038780413995570;
         const 11021250300446969031;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.248834703 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Conc.Sync.$tcBlockReason_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.250438512 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnMVar2_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnMVar2_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.25195133 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnMVar1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnMVar1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnMVar2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.253585933 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnMVar_closure" {
     GHC.Conc.Sync.$tc'BlockedOnMVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnMVar1_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 6633002816895506850;
         const 13520604374172074732;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.255322936 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnBlackHole3_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnBlackHole3_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,66,108,97,99,107,72,111,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.25699741 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnBlackHole2_closure" {
     GHC.Conc.Sync.$tc'BlockedOnBlackHole2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.258723403 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnBlackHole_closure" {
     GHC.Conc.Sync.$tc'BlockedOnBlackHole_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole2_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 9499731398899925739;
         const 7296688042620961692;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.260893085 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnException2_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnException2_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,69,120,99,101,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.263131519 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnException1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnException1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnException2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.264816319 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnException_closure" {
     GHC.Conc.Sync.$tc'BlockedOnException_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnException1_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 16834505563200403543;
         const 10899729493106152581;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.266542899 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnSTM2_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnSTM2_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.268102792 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnSTM1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnSTM1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnSTM2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.269816963 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnSTM_closure" {
     GHC.Conc.Sync.$tc'BlockedOnSTM_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnSTM1_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 1161208048218837616;
         const 14246412223428266787;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.271535871 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnForeignCall2_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnForeignCall2_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,70,111,114,101,105,103,110,67,97,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.273106683 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnForeignCall1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnForeignCall1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnForeignCall2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.274909665 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnForeignCall_closure" {
     GHC.Conc.Sync.$tc'BlockedOnForeignCall_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnForeignCall1_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 7408412473094687054;
         const 5512662453084487661;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.276595565 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'BlockedOnOther2_bytes" {
     GHC.Conc.Sync.$tc'BlockedOnOther2_bytes:
         I8[] [39,66,108,111,99,107,101,100,79,110,79,116,104,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.278220266 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnOther1_closure" {
     GHC.Conc.Sync.$tc'BlockedOnOther1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnOther2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.279932889 UTC

[section ""data" . GHC.Conc.Sync.$tc'BlockedOnOther_closure" {
     GHC.Conc.Sync.$tc'BlockedOnOther_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnOther1_closure+1;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const 12822899422417308746;
         const 1265626399802742388;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.281714523 UTC

[section ""cstring" . GHC.Conc.Sync.$tcThreadStatus2_bytes" {
     GHC.Conc.Sync.$tcThreadStatus2_bytes:
         I8[] [84,104,114,101,97,100,83,116,97,116,117,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.283434985 UTC

[section ""data" . GHC.Conc.Sync.$tcThreadStatus1_closure" {
     GHC.Conc.Sync.$tcThreadStatus1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcThreadStatus2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.28572052 UTC

[section ""data" . GHC.Conc.Sync.$tcThreadStatus_closure" {
     GHC.Conc.Sync.$tcThreadStatus_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcThreadStatus1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16437204929171641638;
         const 3495092226815585861;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.287412398 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadDied1_closure" {
     GHC.Conc.Sync.$tc'ThreadDied1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Conc.Sync.$tcThreadStatus_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.289089194 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'ThreadRunning2_bytes" {
     GHC.Conc.Sync.$tc'ThreadRunning2_bytes:
         I8[] [39,84,104,114,101,97,100,82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.291734728 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadRunning1_closure" {
     GHC.Conc.Sync.$tc'ThreadRunning1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'ThreadRunning2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.293424358 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadRunning_closure" {
     GHC.Conc.Sync.$tc'ThreadRunning_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'ThreadRunning1_closure+1;
         const GHC.Conc.Sync.$tc'ThreadDied1_closure+1;
         const 1667122312602609882;
         const 13647871799576313560;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.295152456 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'ThreadFinished2_bytes" {
     GHC.Conc.Sync.$tc'ThreadFinished2_bytes:
         I8[] [39,84,104,114,101,97,100,70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.296729295 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadFinished1_closure" {
     GHC.Conc.Sync.$tc'ThreadFinished1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'ThreadFinished2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.29843718 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadFinished_closure" {
     GHC.Conc.Sync.$tc'ThreadFinished_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'ThreadFinished1_closure+1;
         const GHC.Conc.Sync.$tc'ThreadDied1_closure+1;
         const 2441107603776884109;
         const 12730966154693836607;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.300179543 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'ThreadDied3_bytes" {
     GHC.Conc.Sync.$tc'ThreadDied3_bytes:
         I8[] [39,84,104,114,101,97,100,68,105,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.301825958 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadDied2_closure" {
     GHC.Conc.Sync.$tc'ThreadDied2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'ThreadDied3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.30354123 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadDied_closure" {
     GHC.Conc.Sync.$tc'ThreadDied_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'ThreadDied2_closure+1;
         const GHC.Conc.Sync.$tc'ThreadDied1_closure+1;
         const 9513974555658789847;
         const 4757719484357493227;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.30533398 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadBlocked1_closure" {
     GHC.Conc.Sync.$tc'ThreadBlocked1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Conc.Sync.$tc'BlockedOnBlackHole1_closure+1;
         const GHC.Conc.Sync.$tc'ThreadDied1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.306928523 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'ThreadBlocked3_bytes" {
     GHC.Conc.Sync.$tc'ThreadBlocked3_bytes:
         I8[] [39,84,104,114,101,97,100,66,108,111,99,107,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.308562834 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadBlocked2_closure" {
     GHC.Conc.Sync.$tc'ThreadBlocked2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'ThreadBlocked3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.310704491 UTC

[section ""data" . GHC.Conc.Sync.$tc'ThreadBlocked_closure" {
     GHC.Conc.Sync.$tc'ThreadBlocked_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'ThreadBlocked2_closure+1;
         const GHC.Conc.Sync.$tc'ThreadBlocked1_closure+4;
         const 1896650886570328403;
         const 13390928353603149841;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.312519112 UTC

[section ""cstring" . GHC.Conc.Sync.$tcPrimMVar2_bytes" {
     GHC.Conc.Sync.$tcPrimMVar2_bytes:
         I8[] [80,114,105,109,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.314391131 UTC

[section ""data" . GHC.Conc.Sync.$tcPrimMVar1_closure" {
     GHC.Conc.Sync.$tcPrimMVar1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcPrimMVar2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.316069055 UTC

[section ""data" . GHC.Conc.Sync.$tcPrimMVar_closure" {
     GHC.Conc.Sync.$tcPrimMVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcPrimMVar1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9965391380168186507;
         const 18322737771689556223;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.317789716 UTC

[section ""cstring" . GHC.Conc.Sync.$tcSTM2_bytes" {
     GHC.Conc.Sync.$tcSTM2_bytes:
         I8[] [83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.319389214 UTC

[section ""data" . GHC.Conc.Sync.$tcSTM1_closure" {
     GHC.Conc.Sync.$tcSTM1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcSTM2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.321078226 UTC

[section ""data" . GHC.Conc.Sync.$tcSTM_closure" {
     GHC.Conc.Sync.$tcSTM_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcSTM1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 2004856025729794332;
         const 14974623362753764267;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.322771978 UTC

[section ""data" . $krep20_r9Fv7_closure" {
     $krep20_r9Fv7_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Conc.Sync.$tcSTM_closure+1;
         const $krep5_r9FuS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.324379546 UTC

[section ""data" . GHC.Conc.Sync.$tc'STM1_closure" {
     GHC.Conc.Sync.$tc'STM1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r9Fv5_closure+4;
         const $krep20_r9Fv7_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.326715627 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'STM3_bytes" {
     GHC.Conc.Sync.$tc'STM3_bytes:
         I8[] [39,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.328305928 UTC

[section ""data" . GHC.Conc.Sync.$tc'STM2_closure" {
     GHC.Conc.Sync.$tc'STM2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'STM3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.329910175 UTC

[section ""data" . GHC.Conc.Sync.$tc'STM_closure" {
     GHC.Conc.Sync.$tc'STM_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'STM2_closure+1;
         const GHC.Conc.Sync.$tc'STM1_closure+4;
         const 11288073744523536973;
         const 9767688212531311940;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.331488657 UTC

[section ""cstring" . GHC.Conc.Sync.$tcTVar2_bytes" {
     GHC.Conc.Sync.$tcTVar2_bytes:
         I8[] [84,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.333027714 UTC

[section ""data" . GHC.Conc.Sync.$tcTVar1_closure" {
     GHC.Conc.Sync.$tcTVar1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tcTVar2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.334622748 UTC

[section ""data" . GHC.Conc.Sync.$tcTVar_closure" {
     GHC.Conc.Sync.$tcTVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tcTVar1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 13084572405727191592;
         const 5232564955606145236;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.336834635 UTC

[section ""data" . $krep21_r9Fv8_closure" {
     $krep21_r9Fv8_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Conc.Sync.$tcTVar_closure+1;
         const $krep5_r9FuS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.338474548 UTC

[section ""data" . GHC.Conc.Sync.$tc'TVar1_closure" {
     GHC.Conc.Sync.$tc'TVar1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r9FuU_closure+1;
         const $krep21_r9Fv8_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.340036628 UTC

[section ""cstring" . GHC.Conc.Sync.$tc'TVar3_bytes" {
     GHC.Conc.Sync.$tc'TVar3_bytes:
         I8[] [39,84,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.341593392 UTC

[section ""data" . GHC.Conc.Sync.$tc'TVar2_closure" {
     GHC.Conc.Sync.$tc'TVar2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Conc.Sync.$tc'TVar3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.343223074 UTC

[section ""data" . GHC.Conc.Sync.$tc'TVar_closure" {
     GHC.Conc.Sync.$tc'TVar_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Conc.Sync.$trModule_closure+1;
         const GHC.Conc.Sync.$tc'TVar2_closure+1;
         const GHC.Conc.Sync.$tc'TVar1_closure+4;
         const 9463269625853265574;
         const 3517068532143837766;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.344883832 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowThreadId2_bytes" {
     GHC.Conc.Sync.$fShowThreadId2_bytes:
         I8[] [84,104,114,101,97,100,73,100,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.35026191 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_closure" {
     GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_closure:
         const GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_info;
 },
 x_s9LYA_entry() //  [R1]
         { []
         }
     {offset
       c9NLn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9NLw; else goto c9NLx;
       c9NLw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9NLx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9NLk_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9NLB; else goto c9NLl;
       u9NLB: // global
           call _c9NLk(R1) args: 0, res: 0, upd: 0;
       c9NLl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_s9LYA_info" {
     x_s9LYA_info:
         const x_s9LYA_entry;
         const 1;
         const 16;
 },
 _c9NLk() //  [R1]
         { []
         }
     {offset
       c9NLk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9NLA; else goto c9NLz;
       c9NLA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9NLz: // global
           (_s9LYG::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] rts_getThreadId(P64[R1 + 7]);
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9LYG::I64));
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9NLk_info" {
     block_c9NLk_info:
         const _c9NLk;
         const 0;
         const 30;
 },
 sat_s9LYQ_entry() //  [R1]
         { []
         }
     {offset
       c9NLO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9NLZ; else goto c9NM0;
       c9NLZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9NM0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c9NLL_info;
           _s9LYy::P64 = P64[R1 + 16];
           _s9LYI::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _s9LYy::P64;
           P64[Sp - 24] = _s9LYI::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u9NM7; else goto c9NLM;
       u9NM7: // global
           call _c9NLL(R1) args: 0, res: 0, upd: 0;
       c9NLM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9LYQ_info" {
     sat_s9LYQ_info:
         const sat_s9LYQ_entry;
         const 3;
         const 15;
 },
 _c9NLL() //  [R1]
         { []
         }
     {offset
       c9NLL: // global
           I64[Sp] = block_c9NLR_info;
           _s9LYK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9LYK::I64;
           if (R1 & 7 != 0) goto u9NM6; else goto c9NLS;
       u9NM6: // global
           call _c9NLR(R1) args: 0, res: 0, upd: 0;
       c9NLS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9NLL_info" {
     block_c9NLL_info:
         const _c9NLL;
         const 2;
         const 30;
 },
 _c9NLR() //  [R1]
         { []
         }
     {offset
       c9NLR: // global
           _s9LYI::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c9NLW_info;
           R4 = _s9LYI::P64;
           R3 = I64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9NLR_info" {
     block_c9NLR_info:
         const _c9NLR;
         const 66;
         const 30;
 },
 _c9NLW() //  [R1, R2]
         { []
         }
     {offset
       c9NLW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9NM5; else goto c9NM4;
       c9NM5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9NM4: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9NLW_info" {
     block_c9NLW_info:
         const _c9NLW;
         const 0;
         const 30;
 },
 sat_s9LYR_entry() //  [R1, R2]
         { []
         }
     {offset
       c9NM8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9NMc; else goto c9NMb;
       c9NMc: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9NMb: // global
           _s9LYy::P64 = P64[R1 + 7];
           _s9LYA::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9LYQ_info;
           P64[Hp - 16] = _s9LYy::P64;
           P64[Hp - 8] = _s9LYA::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = GHC.Conc.Sync.$fShowThreadId2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9LYR_info" {
     sat_s9LYR_info:
         const sat_s9LYR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NMd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9NMh; else goto c9NMg;
       c9NMh: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NMg: // global
           I64[Hp - 40] = x_s9LYA_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s9LYR_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_info" {
     GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_info:
         const GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.366708958 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadId_$cshow_closure" {
     GHC.Conc.Sync.$fShowThreadId_$cshow_closure:
         const GHC.Conc.Sync.$fShowThreadId_$cshow_info;
 },
 sat_s9LZ3_entry() //  [R1]
         { []
         }
     {offset
       c9NNd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9NNo; else goto c9NNp;
       c9NNo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9NNp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9NNa_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9NNu; else goto c9NNb;
       u9NNu: // global
           call _c9NNa(R1) args: 0, res: 0, upd: 0;
       c9NNb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9LZ3_info" {
     sat_s9LZ3_info:
         const sat_s9LZ3_entry;
         const 1;
         const 16;
 },
 _c9NNa() //  [R1]
         { []
         }
     {offset
       c9NNa: // global
           (_s9LYY::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] rts_getThreadId(P64[R1 + 7]);
           I64[Sp] = block_c9NNl_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9LYY::I64));
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9NNa_info" {
     block_c9NNa_info:
         const _c9NNa;
         const 0;
         const 30;
 },
 _c9NNl() //  [R1, R2]
         { []
         }
     {offset
       c9NNl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9NNt; else goto c9NNs;
       c9NNt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9NNs: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9NNl_info" {
     block_c9NNl_info:
         const _c9NNl;
         const 0;
         const 30;
 },
 GHC.Conc.Sync.$fShowThreadId_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9NNv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9NNz; else goto c9NNy;
       c9NNz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowThreadId_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9NNy: // global
           I64[Hp - 16] = sat_s9LZ3_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Conc.Sync.$fShowThreadId2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadId_$cshow_info" {
     GHC.Conc.Sync.$fShowThreadId_$cshow_info:
         const GHC.Conc.Sync.$fShowThreadId_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.378650701 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadId1_closure" {
     GHC.Conc.Sync.$fShowThreadId1_closure:
         const GHC.Conc.Sync.$fShowThreadId1_info;
 },
 x_s9LZ5_entry() //  [R1]
         { []
         }
     {offset
       c9NO7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9NOg; else goto c9NOh;
       c9NOg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9NOh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9NO4_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9NOl; else goto c9NO5;
       u9NOl: // global
           call _c9NO4(R1) args: 0, res: 0, upd: 0;
       c9NO5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_s9LZ5_info" {
     x_s9LZ5_info:
         const x_s9LZ5_entry;
         const 1;
         const 16;
 },
 _c9NO4() //  [R1]
         { []
         }
     {offset
       c9NO4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9NOk; else goto c9NOj;
       c9NOk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9NOj: // global
           (_s9LZb::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] rts_getThreadId(P64[R1 + 7]);
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9LZb::I64));
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9NO4_info" {
     block_c9NO4_info:
         const _c9NO4;
         const 0;
         const 30;
 },
 sat_s9LZj_entry() //  [R1]
         { []
         }
     {offset
       c9NOy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9NOE; else goto c9NOF;
       c9NOE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9NOF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9NOv_info;
           _s9LZd::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9LZd::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9NOK; else goto c9NOw;
       u9NOK: // global
           call _c9NOv(R1) args: 0, res: 0, upd: 0;
       c9NOw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9LZj_info" {
     sat_s9LZj_info:
         const sat_s9LZj_entry;
         const 2;
         const 18;
 },
 _c9NOv() //  [R1]
         { []
         }
     {offset
       c9NOv: // global
           _s9LZd::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9NOB_info;
           R4 = _s9LZd::P64;
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9NOv_info" {
     block_c9NOv_info:
         const _c9NOv;
         const 1;
         const 30;
 },
 _c9NOB() //  [R1, R2]
         { []
         }
     {offset
       c9NOB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9NOJ; else goto c9NOI;
       c9NOJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9NOI: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9NOB_info" {
     block_c9NOB_info:
         const _c9NOB;
         const 0;
         const 30;
 },
 sat_s9LZk_entry() //  [R1, R2]
         { []
         }
     {offset
       c9NOL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9NOP; else goto c9NOO;
       c9NOP: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9NOO: // global
           _s9LZ5::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s9LZj_info;
           P64[Hp - 8] = _s9LZ5::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = GHC.Conc.Sync.$fShowThreadId2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9LZk_info" {
     sat_s9LZk_info:
         const sat_s9LZk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 GHC.Conc.Sync.$fShowThreadId1_entry() //  [R2]
         { []
         }
     {offset
       c9NOQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9NOU; else goto c9NOT;
       c9NOU: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowThreadId1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9NOT: // global
           I64[Hp - 32] = x_s9LZ5_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s9LZk_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadId1_info" {
     GHC.Conc.Sync.$fShowThreadId1_info:
         const GHC.Conc.Sync.$fShowThreadId1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.392129299 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadId_$cshowList_closure" {
     GHC.Conc.Sync.$fShowThreadId_$cshowList_closure:
         const GHC.Conc.Sync.$fShowThreadId_$cshowList_info;
 },
 GHC.Conc.Sync.$fShowThreadId_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NPE: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Conc.Sync.$fShowThreadId1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadId_$cshowList_info" {
     GHC.Conc.Sync.$fShowThreadId_$cshowList_info:
         const GHC.Conc.Sync.$fShowThreadId_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.395416025 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadId_closure" {
     GHC.Conc.Sync.$fShowThreadId_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Conc.Sync.$fShowThreadId_$cshowsPrec_closure+2;
         const GHC.Conc.Sync.$fShowThreadId_$cshow_closure+1;
         const GHC.Conc.Sync.$fShowThreadId_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.397451201 UTC

[section ""data" . reportHeapOverflow1_r9Fv9_closure" {
     reportHeapOverflow1_r9Fv9_closure:
         const reportHeapOverflow1_r9Fv9_info;
 },
 reportHeapOverflow1_r9Fv9_entry() //  []
         { []
         }
     {offset
       c9NPR: // global
           call "ccall" arg hints:  []  result hints:  [] reportHeapOverflow();
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . reportHeapOverflow1_r9Fv9_info" {
     reportHeapOverflow1_r9Fv9_info:
         const reportHeapOverflow1_r9Fv9_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.400604842 UTC

[section ""data" . GHC.Conc.Sync.reportHeapOverflow_closure" {
     GHC.Conc.Sync.reportHeapOverflow_closure:
         const GHC.Conc.Sync.reportHeapOverflow_info;
 },
 GHC.Conc.Sync.reportHeapOverflow_entry() //  []
         { []
         }
     {offset
       c9NQ4: // global
           call reportHeapOverflow1_r9Fv9_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.reportHeapOverflow_info" {
     GHC.Conc.Sync.reportHeapOverflow_info:
         const GHC.Conc.Sync.reportHeapOverflow_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.405432706 UTC

[section ""data" . GHC.Conc.Sync.cmpThread_closure" {
     GHC.Conc.Sync.cmpThread_closure:
         const GHC.Conc.Sync.cmpThread_info;
 },
 GHC.Conc.Sync.cmpThread_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NQi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NQm; else goto c9NQn;
       c9NQm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.cmpThread_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NQn: // global
           I64[Sp - 16] = block_c9NQf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NQU; else goto c9NQg;
       u9NQU: // global
           call _c9NQf(R1) args: 0, res: 0, upd: 0;
       c9NQg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.cmpThread_info" {
     GHC.Conc.Sync.cmpThread_info:
         const GHC.Conc.Sync.cmpThread_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NQf() //  [R1]
         { []
         }
     {offset
       c9NQf: // global
           I64[Sp] = block_c9NQl_info;
           _s9LZu::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9LZu::P64;
           if (R1 & 7 != 0) goto u9NQT; else goto c9NQp;
       u9NQT: // global
           call _c9NQl(R1) args: 0, res: 0, upd: 0;
       c9NQp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NQf_info" {
     block_c9NQf_info:
         const _c9NQf;
         const 1;
         const 30;
 },
 _c9NQl() //  [R1]
         { []
         }
     {offset
       c9NQl: // global
           (_s9LZA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           _s9LZB::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9LZA::I64));
           if (_s9LZB::I64 != (-1)) goto u9NQS; else goto c9NQI;
       u9NQS: // global
           if (_s9LZB::I64 != 0) goto c9NQC; else goto c9NQO;
       c9NQC: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9NQO: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9NQI: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NQl_info" {
     block_c9NQl_info:
         const _c9NQl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.413622972 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadId_$c==_closure" {
     GHC.Conc.Sync.$fEqThreadId_$c==_closure:
         const GHC.Conc.Sync.$fEqThreadId_$c==_info;
 },
 GHC.Conc.Sync.$fEqThreadId_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NRn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NRr; else goto c9NRs;
       c9NRr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqThreadId_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NRs: // global
           I64[Sp - 16] = block_c9NRk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NRS; else goto c9NRl;
       u9NRS: // global
           call _c9NRk(R1) args: 0, res: 0, upd: 0;
       c9NRl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqThreadId_$c==_info" {
     GHC.Conc.Sync.$fEqThreadId_$c==_info:
         const GHC.Conc.Sync.$fEqThreadId_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NRk() //  [R1]
         { []
         }
     {offset
       c9NRk: // global
           I64[Sp] = block_c9NRq_info;
           _s9LZF::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9LZF::P64;
           if (R1 & 7 != 0) goto u9NRR; else goto c9NRu;
       u9NRR: // global
           call _c9NRq(R1) args: 0, res: 0, upd: 0;
       c9NRu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NRk_info" {
     block_c9NRk_info:
         const _c9NRk;
         const 1;
         const 30;
 },
 _c9NRq() //  [R1]
         { []
         }
     {offset
       c9NRq: // global
           (_s9LZL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           if (%MO_SS_Conv_W64_W32(_s9LZL::I64) == 0 :: W32) goto c9NRN; else goto c9NRH;
       c9NRN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9NRH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NRq_info" {
     block_c9NRq_info:
         const _c9NRq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.421077481 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadId_$c/=_closure" {
     GHC.Conc.Sync.$fEqThreadId_$c/=_closure:
         const GHC.Conc.Sync.$fEqThreadId_$c/=_info;
 },
 GHC.Conc.Sync.$fEqThreadId_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NSj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NSn; else goto c9NSo;
       c9NSn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fEqThreadId_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NSo: // global
           I64[Sp - 16] = block_c9NSg_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NSO; else goto c9NSh;
       u9NSO: // global
           call _c9NSg(R1) args: 0, res: 0, upd: 0;
       c9NSh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fEqThreadId_$c/=_info" {
     GHC.Conc.Sync.$fEqThreadId_$c/=_info:
         const GHC.Conc.Sync.$fEqThreadId_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NSg() //  [R1]
         { []
         }
     {offset
       c9NSg: // global
           I64[Sp] = block_c9NSm_info;
           _s9LZQ::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9LZQ::P64;
           if (R1 & 7 != 0) goto u9NSN; else goto c9NSq;
       u9NSN: // global
           call _c9NSm(R1) args: 0, res: 0, upd: 0;
       c9NSq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NSg_info" {
     block_c9NSg_info:
         const _c9NSg;
         const 1;
         const 30;
 },
 _c9NSm() //  [R1]
         { []
         }
     {offset
       c9NSm: // global
           (_s9LZW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           if (%MO_SS_Conv_W64_W32(_s9LZW::I64) == 0 :: W32) goto c9NSJ; else goto c9NSD;
       c9NSJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9NSD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NSm_info" {
     block_c9NSm_info:
         const _c9NSm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.427843786 UTC

[section ""data" . GHC.Conc.Sync.$fEqThreadId_closure" {
     GHC.Conc.Sync.$fEqThreadId_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Conc.Sync.$fEqThreadId_$c==_closure+2;
         const GHC.Conc.Sync.$fEqThreadId_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.430683704 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$c<_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$c<_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$c<_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NTg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NTk; else goto c9NTl;
       c9NTk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NTl: // global
           I64[Sp - 16] = block_c9NTd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NTL; else goto c9NTe;
       u9NTL: // global
           call _c9NTd(R1) args: 0, res: 0, upd: 0;
       c9NTe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$c<_info" {
     GHC.Conc.Sync.$fOrdThreadId_$c<_info:
         const GHC.Conc.Sync.$fOrdThreadId_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NTd() //  [R1]
         { []
         }
     {offset
       c9NTd: // global
           I64[Sp] = block_c9NTj_info;
           _s9M01::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9M01::P64;
           if (R1 & 7 != 0) goto u9NTK; else goto c9NTn;
       u9NTK: // global
           call _c9NTj(R1) args: 0, res: 0, upd: 0;
       c9NTn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NTd_info" {
     block_c9NTd_info:
         const _c9NTd;
         const 1;
         const 30;
 },
 _c9NTj() //  [R1]
         { []
         }
     {offset
       c9NTj: // global
           (_s9M07::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           if (%MO_SS_Conv_W64_W32(_s9M07::I64) == (-1) :: W32) goto c9NTG; else goto c9NTA;
       c9NTG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9NTA: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NTj_info" {
     block_c9NTj_info:
         const _c9NTj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.438244658 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$c>=_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$c>=_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$c>=_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NUc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NUg; else goto c9NUh;
       c9NUg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NUh: // global
           I64[Sp - 16] = block_c9NU9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NUH; else goto c9NUa;
       u9NUH: // global
           call _c9NU9(R1) args: 0, res: 0, upd: 0;
       c9NUa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$c>=_info" {
     GHC.Conc.Sync.$fOrdThreadId_$c>=_info:
         const GHC.Conc.Sync.$fOrdThreadId_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NU9() //  [R1]
         { []
         }
     {offset
       c9NU9: // global
           I64[Sp] = block_c9NUf_info;
           _s9M0c::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9M0c::P64;
           if (R1 & 7 != 0) goto u9NUG; else goto c9NUj;
       u9NUG: // global
           call _c9NUf(R1) args: 0, res: 0, upd: 0;
       c9NUj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NU9_info" {
     block_c9NU9_info:
         const _c9NU9;
         const 1;
         const 30;
 },
 _c9NUf() //  [R1]
         { []
         }
     {offset
       c9NUf: // global
           (_s9M0i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           if (%MO_SS_Conv_W64_W32(_s9M0i::I64) == (-1) :: W32) goto c9NUC; else goto c9NUw;
       c9NUC: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9NUw: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NUf_info" {
     block_c9NUf_info:
         const _c9NUf;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.44698903 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$c>_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$c>_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$c>_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NV8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NVc; else goto c9NVd;
       c9NVc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NVd: // global
           I64[Sp - 16] = block_c9NV5_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NVK; else goto c9NV6;
       u9NVK: // global
           call _c9NV5(R1) args: 0, res: 0, upd: 0;
       c9NV6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$c>_info" {
     GHC.Conc.Sync.$fOrdThreadId_$c>_info:
         const GHC.Conc.Sync.$fOrdThreadId_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NV5() //  [R1]
         { []
         }
     {offset
       c9NV5: // global
           I64[Sp] = block_c9NVb_info;
           _s9M0n::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9M0n::P64;
           if (R1 & 7 != 0) goto u9NVJ; else goto c9NVf;
       u9NVJ: // global
           call _c9NVb(R1) args: 0, res: 0, upd: 0;
       c9NVf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NV5_info" {
     block_c9NV5_info:
         const _c9NV5;
         const 1;
         const 30;
 },
 _c9NVb() //  [R1]
         { []
         }
     {offset
       c9NVb: // global
           (_s9M0t::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           _s9M0u::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9M0t::I64));
           if (_s9M0u::I64 == (-1)) goto c9NVE; else goto u9NVI;
       u9NVI: // global
           if (_s9M0u::I64 == 0) goto c9NVE; else goto c9NVs;
       c9NVE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9NVs: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NVb_info" {
     block_c9NVb_info:
         const _c9NVb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.454641375 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$c<=_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$c<=_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$c<=_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NWb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NWf; else goto c9NWg;
       c9NWf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NWg: // global
           I64[Sp - 16] = block_c9NW8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NWN; else goto c9NW9;
       u9NWN: // global
           call _c9NW8(R1) args: 0, res: 0, upd: 0;
       c9NW9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$c<=_info" {
     GHC.Conc.Sync.$fOrdThreadId_$c<=_info:
         const GHC.Conc.Sync.$fOrdThreadId_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NW8() //  [R1]
         { []
         }
     {offset
       c9NW8: // global
           I64[Sp] = block_c9NWe_info;
           _s9M0y::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9M0y::P64;
           if (R1 & 7 != 0) goto u9NWM; else goto c9NWi;
       u9NWM: // global
           call _c9NWe(R1) args: 0, res: 0, upd: 0;
       c9NWi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NW8_info" {
     block_c9NW8_info:
         const _c9NW8;
         const 1;
         const 30;
 },
 _c9NWe() //  [R1]
         { []
         }
     {offset
       c9NWe: // global
           (_s9M0E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           _s9M0F::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9M0E::I64));
           if (_s9M0F::I64 == (-1)) goto c9NWH; else goto u9NWL;
       u9NWL: // global
           if (_s9M0F::I64 == 0) goto c9NWH; else goto c9NWv;
       c9NWH: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9NWv: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NWe_info" {
     block_c9NWe_info:
         const _c9NWe;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.462482639 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$cmax_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$cmax_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$cmax_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NXe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9NXi; else goto c9NXj;
       c9NXi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NXj: // global
           I64[Sp - 16] = block_c9NXb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NXQ; else goto c9NXc;
       u9NXQ: // global
           call _c9NXb(R1) args: 0, res: 0, upd: 0;
       c9NXc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$cmax_info" {
     GHC.Conc.Sync.$fOrdThreadId_$cmax_info:
         const GHC.Conc.Sync.$fOrdThreadId_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NXb() //  [R1]
         { []
         }
     {offset
       c9NXb: // global
           I64[Sp - 8] = block_c9NXh_info;
           _s9M0I::P64 = R1;
           _s9M0J::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s9M0J::P64;
           P64[Sp + 8] = _s9M0I::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9NXP; else goto c9NXl;
       u9NXP: // global
           call _c9NXh(R1) args: 0, res: 0, upd: 0;
       c9NXl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NXb_info" {
     block_c9NXb_info:
         const _c9NXb;
         const 1;
         const 30;
 },
 _c9NXh() //  [R1]
         { []
         }
     {offset
       c9NXh: // global
           _s9M0I::P64 = P64[Sp + 16];
           (_s9M0P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           _s9M0Q::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9M0P::I64));
           if (_s9M0Q::I64 == (-1)) goto c9NXK; else goto u9NXO;
       u9NXO: // global
           if (_s9M0Q::I64 == 0) goto c9NXK; else goto c9NXy;
       c9NXK: // global
           R1 = _s9M0I::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9NXy: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NXh_info" {
     block_c9NXh_info:
         const _c9NXh;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.470723066 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_$cmin_closure" {
     GHC.Conc.Sync.$fOrdThreadId_$cmin_closure:
         const GHC.Conc.Sync.$fOrdThreadId_$cmin_info;
 },
 GHC.Conc.Sync.$fOrdThreadId_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c9NYh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9NYl; else goto c9NYm;
       c9NYl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fOrdThreadId_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9NYm: // global
           I64[Sp - 16] = block_c9NYe_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9NYT; else goto c9NYf;
       u9NYT: // global
           call _c9NYe(R1) args: 0, res: 0, upd: 0;
       c9NYf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fOrdThreadId_$cmin_info" {
     GHC.Conc.Sync.$fOrdThreadId_$cmin_info:
         const GHC.Conc.Sync.$fOrdThreadId_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9NYe() //  [R1]
         { []
         }
     {offset
       c9NYe: // global
           I64[Sp - 8] = block_c9NYk_info;
           _s9M0T::P64 = R1;
           _s9M0U::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s9M0U::P64;
           P64[Sp + 8] = _s9M0T::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9NYS; else goto c9NYo;
       u9NYS: // global
           call _c9NYk(R1) args: 0, res: 0, upd: 0;
       c9NYo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NYe_info" {
     block_c9NYe_info:
         const _c9NYe;
         const 1;
         const 30;
 },
 _c9NYk() //  [R1]
         { []
         }
     {offset
       c9NYk: // global
           _s9M0T::P64 = P64[Sp + 16];
           (_s9M10::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] cmp_thread(P64[R1 + 7], P64[Sp + 8]);
           _s9M0V::P64 = R1;
           _s9M11::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9M10::I64));
           if (_s9M11::I64 == (-1)) goto c9NYN; else goto u9NYR;
       u9NYR: // global
           if (_s9M11::I64 == 0) goto c9NYN; else goto c9NYB;
       c9NYN: // global
           R1 = _s9M0V::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9NYB: // global
           R1 = _s9M0T::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9NYk_info" {
     block_c9NYk_info:
         const _c9NYk;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.477306923 UTC

[section ""data" . GHC.Conc.Sync.$fOrdThreadId_closure" {
     GHC.Conc.Sync.$fOrdThreadId_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Conc.Sync.$fEqThreadId_closure+1;
         const GHC.Conc.Sync.cmpThread_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$c<_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$c<=_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$c>_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$c>=_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$cmax_closure+2;
         const GHC.Conc.Sync.$fOrdThreadId_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.479588421 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowThreadStatus10_bytes" {
     GHC.Conc.Sync.$fShowThreadStatus10_bytes:
         I8[] [84,104,114,101,97,100,82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.481790223 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus9_closure" {
     GHC.Conc.Sync.$fShowThreadStatus9_closure:
         const GHC.Conc.Sync.$fShowThreadStatus9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus9_entry() //  [R1]
         { []
         }
     {offset
       c9NZl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NZm; else goto c9NZn;
       c9NZm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9NZn: // global
           (_c9NZi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9NZi::I64 == 0) goto c9NZk; else goto c9NZj;
       c9NZk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9NZj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9NZi::I64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus9_info" {
     GHC.Conc.Sync.$fShowThreadStatus9_info:
         const GHC.Conc.Sync.$fShowThreadStatus9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.485781692 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowThreadStatus8_bytes" {
     GHC.Conc.Sync.$fShowThreadStatus8_bytes:
         I8[] [84,104,114,101,97,100,70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.487856891 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus7_closure" {
     GHC.Conc.Sync.$fShowThreadStatus7_closure:
         const GHC.Conc.Sync.$fShowThreadStatus7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus7_entry() //  [R1]
         { []
         }
     {offset
       c9NZD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NZE; else goto c9NZF;
       c9NZE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9NZF: // global
           (_c9NZA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9NZA::I64 == 0) goto c9NZC; else goto c9NZB;
       c9NZC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9NZB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9NZA::I64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus7_info" {
     GHC.Conc.Sync.$fShowThreadStatus7_info:
         const GHC.Conc.Sync.$fShowThreadStatus7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.491363745 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowThreadStatus6_bytes" {
     GHC.Conc.Sync.$fShowThreadStatus6_bytes:
         I8[] [84,104,114,101,97,100,66,108,111,99,107,101,100,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.49348936 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus5_closure" {
     GHC.Conc.Sync.$fShowThreadStatus5_closure:
         const GHC.Conc.Sync.$fShowThreadStatus5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus5_entry() //  [R1]
         { []
         }
     {offset
       c9NZV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9NZW; else goto c9NZX;
       c9NZW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9NZX: // global
           (_c9NZS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9NZS::I64 == 0) goto c9NZU; else goto c9NZT;
       c9NZU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9NZT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9NZS::I64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus5_info" {
     GHC.Conc.Sync.$fShowThreadStatus5_info:
         const GHC.Conc.Sync.$fShowThreadStatus5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.496797744 UTC

[section ""cstring" . GHC.Conc.Sync.$fShowThreadStatus4_bytes" {
     GHC.Conc.Sync.$fShowThreadStatus4_bytes:
         I8[] [84,104,114,101,97,100,68,105,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.499413034 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus3_closure" {
     GHC.Conc.Sync.$fShowThreadStatus3_closure:
         const GHC.Conc.Sync.$fShowThreadStatus3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus3_entry() //  [R1]
         { []
         }
     {offset
       c9O0d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9O0e; else goto c9O0f;
       c9O0e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9O0f: // global
           (_c9O0a::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9O0a::I64 == 0) goto c9O0c; else goto c9O0b;
       c9O0c: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9O0b: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9O0a::I64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus3_info" {
     GHC.Conc.Sync.$fShowThreadStatus3_info:
         const GHC.Conc.Sync.$fShowThreadStatus3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.505938391 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_closure" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_closure:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_info;
         const 0;
 },
 sat_s9M1a_entry() //  [R1]
         { []
         }
     {offset
       c9O0L: // global
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           call GHC.Conc.Sync.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M1a_info" {
     sat_s9M1a_info:
         const sat_s9M1a_entry;
         const 2;
         const 4294967314;
         const S9MdE_srt;
 },
 sat_s9M1c_entry() //  [R1]
         { []
         }
     {offset
       c9O0Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9O12; else goto c9O11;
       c9O12: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9O11: // global
           _s9M14::P64 = P64[R1 + 16];
           _s9M16::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9M14::P64;
           R3 = Hp - 14;
           R2 = _s9M16::P64;
           call GHC.Conc.Sync.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M1c_info" {
     sat_s9M1c_info:
         const sat_s9M1c_entry;
         const 2;
         const 4294967314;
         const S9MdE_srt;
 },
 sat_s9M1d_entry() //  [R1]
         { []
         }
     {offset
       c9O13: // global
           _s9M1d::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9O14; else goto c9O15;
       c9O15: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9O17; else goto c9O16;
       c9O17: // global
           HpAlloc = 32;
           goto c9O14;
       c9O14: // global
           R1 = _s9M1d::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9O16: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9M1d::P64;
           _s9M14::P64 = P64[_s9M1d::P64 + 16];
           _s9M16::P64 = P64[_s9M1d::P64 + 24];
           I64[Hp - 24] = sat_s9M1c_info;
           P64[Hp - 8] = _s9M14::P64;
           P64[Hp] = _s9M16::P64;
           R3 = Hp - 24;
           R2 = GHC.Conc.Sync.$fShowThreadStatus5_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9M1d_info" {
     sat_s9M1d_info:
         const sat_s9M1d_entry;
         const 2;
         const 4402341478418;
         const S9MdE_srt;
 },
 GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c9O1e: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9O1f; else goto c9O1g;
       c9O1f: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9O1g: // global
           I64[Sp - 24] = block_c9O0s_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9O1z; else goto c9O0t;
       u9O1z: // global
           call _c9O0s(R1) args: 0, res: 0, upd: 0;
       c9O0t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_info" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_info:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_entry;
         const 0;
         const 136343736811534;
         const 12884901911;
         const S9MdE_srt;
 },
 _c9O0s() //  [R1]
         { []
         }
     {offset
       c9O0s: // global
           _s9M14::P64 = P64[Sp + 16];
           _c9O1d::P64 = R1 & 7;
           if (_c9O1d::P64 < 3) goto u9O1w; else goto u9O1x;
       u9O1w: // global
           if (_c9O1d::P64 < 2) goto c9O19; else goto c9O1a;
       c9O19: // global
           R3 = _s9M14::P64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus9_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9O1a: // global
           R3 = _s9M14::P64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus7_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       u9O1x: // global
           if (_c9O1d::P64 < 4) goto c9O1b; else goto c9O1c;
       c9O1b: // global
           I64[Sp] = block_c9O0z_info;
           _s9M16::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9M16::P64;
           if (R1 & 7 != 0) goto u9O1y; else goto c9O0A;
       u9O1y: // global
           call _c9O0z(R1) args: 0, res: 0, upd: 0;
       c9O0A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9O1c: // global
           R3 = _s9M14::P64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus3_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O0s_info" {
     block_c9O0s_info:
         const _c9O0s;
         const 2;
         const 127547643789342;
         const S9MdE_srt;
 },
 _c9O0z() //  [R1]
         { []
         }
     {offset
       c9O0z: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9O1o; else goto c9O1n;
       c9O1o: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9O1n: // global
           _s9M14::P64 = P64[Sp + 16];
           _s9M16::P64 = P64[Sp + 8];
           if (%MO_S_Lt_W64(I64[R1 + 7], 11)) goto c9O1q; else goto c9O1s;
       c9O1q: // global
           I64[Hp - 48] = sat_s9M1a_info;
           P64[Hp - 32] = _s9M14::P64;
           P64[Hp - 24] = _s9M16::P64;
           _c9O0H::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9O0H::P64;
           R2 = GHC.Conc.Sync.$fShowThreadStatus5_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9O1s: // global
           I64[Hp - 48] = sat_s9M1d_info;
           P64[Hp - 32] = _s9M14::P64;
           P64[Hp - 24] = _s9M16::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O0z_info" {
     block_c9O0z_info:
         const _c9O0z;
         const 2;
         const 4402341478430;
         const S9MdE_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.520483396 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus_$cshow_closure" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshow_closure:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshow_info;
         const 0;
 },
 sat_s9M1h_entry() //  [R1]
         { []
         }
     {offset
       c9O2p: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           call GHC.Conc.Sync.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M1h_info" {
     sat_s9M1h_info:
         const sat_s9M1h_entry;
         const 1;
         const 4294967312;
         const S9MdE_srt;
 },
 GHC.Conc.Sync.$fShowThreadStatus_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9O2y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9O2z; else goto c9O2A;
       c9O2z: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.$fShowThreadStatus_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9O2A: // global
           I64[Sp - 8] = block_c9O2e_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9O2N; else goto c9O2f;
       u9O2N: // global
           call _c9O2e(R1) args: 0, res: 0, upd: 0;
       c9O2f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus_$cshow_info" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshow_info:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshow_entry;
         const 0;
         const 268285132144654;
         const 4294967301;
         const S9MdE_srt;
 },
 _c9O2e() //  [R1]
         { []
         }
     {offset
       c9O2e: // global
           _c9O2x::P64 = R1 & 7;
           if (_c9O2x::P64 < 3) goto u9O2L; else goto u9O2M;
       u9O2L: // global
           if (_c9O2x::P64 < 2) goto c9O2t; else goto c9O2u;
       c9O2t: // global
           R1 = GHC.Conc.Sync.$fShowThreadStatus9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9O2u: // global
           R1 = GHC.Conc.Sync.$fShowThreadStatus7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9O2M: // global
           if (_c9O2x::P64 < 4) goto c9O2v; else goto c9O2w;
       c9O2v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9O2H; else goto c9O2G;
       c9O2H: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9O2G: // global
           _s9M1g::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_s9M1h_info;
           P64[Hp] = _s9M1g::P64;
           R3 = Hp - 16;
           R2 = GHC.Conc.Sync.$fShowThreadStatus5_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9O2w: // global
           R1 = GHC.Conc.Sync.$fShowThreadStatus3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O2e_info" {
     block_c9O2e_info:
         const _c9O2e;
         const 0;
         const 127547643789342;
         const S9MdE_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.527528675 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus2_closure" {
     GHC.Conc.Sync.$fShowThreadStatus2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.529520621 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus1_closure" {
     GHC.Conc.Sync.$fShowThreadStatus1_closure:
         const GHC.Conc.Sync.$fShowThreadStatus1_info;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9O3c: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Conc.Sync.$fShowThreadStatus2_closure+1;
           call GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus1_info" {
     GHC.Conc.Sync.$fShowThreadStatus1_info:
         const GHC.Conc.Sync.$fShowThreadStatus1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9MdE_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.532910106 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus_$cshowList_closure" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshowList_closure:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowList_info;
         const 0;
 },
 GHC.Conc.Sync.$fShowThreadStatus_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9O3n: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Conc.Sync.$fShowThreadStatus1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fShowThreadStatus_$cshowList_info" {
     GHC.Conc.Sync.$fShowThreadStatus_$cshowList_info:
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9MdE_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.536058126 UTC

[section ""data" . GHC.Conc.Sync.$fShowThreadStatus_closure" {
     GHC.Conc.Sync.$fShowThreadStatus_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_closure+3;
         const GHC.Conc.Sync.$fShowThreadStatus_$cshow_closure+1;
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.538474299 UTC

[section ""data" . GHC.Conc.Sync.killThread2_closure" {
     GHC.Conc.Sync.killThread2_closure:
         const GHC.Conc.Sync.killThread2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.killThread2_entry() //  [R1]
         { []
         }
     {offset
       c9O3B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9O3C; else goto c9O3D;
       c9O3C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9O3D: // global
           (_c9O3y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9O3y::I64 == 0) goto c9O3A; else goto c9O3z;
       c9O3A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9O3z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9O3y::I64;
           R2 = GHC.IO.Exception.ThreadKilled_closure+3;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.killThread2_info" {
     GHC.Conc.Sync.killThread2_info:
         const GHC.Conc.Sync.killThread2_entry;
         const 0;
         const 4294967317;
         const S9MdE_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.542818194 UTC

[section ""data" . GHC.Conc.Sync.killThread1_closure" {
     GHC.Conc.Sync.killThread1_closure:
         const GHC.Conc.Sync.killThread1_info;
         const 0;
 },
 GHC.Conc.Sync.killThread1_entry() //  [R2]
         { []
         }
     {offset
       c9O3U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9O3Y; else goto c9O3Z;
       c9O3Y: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.killThread1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9O3Z: // global
           I64[Sp - 8] = block_c9O3R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9O43; else goto c9O3S;
       u9O43: // global
           call _c9O3R(R1) args: 0, res: 0, upd: 0;
       c9O3S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.killThread1_info" {
     GHC.Conc.Sync.killThread1_info:
         const GHC.Conc.Sync.killThread1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S9MdE_srt+144;
 },
 _c9O3R() //  [R1]
         { []
         }
     {offset
       c9O3R: // global
           I64[Sp] = block_c9O3X_info;
           R2 = GHC.Conc.Sync.killThread2_closure;
           R1 = P64[R1 + 7];
           call stg_killThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O3R_info" {
     block_c9O3R_info:
         const _c9O3R;
         const 0;
         const 4294967326;
         const S9MdE_srt+152;
 },
 _c9O3X() //  []
         { []
         }
     {offset
       c9O3X: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O3X_info" {
     block_c9O3X_info:
         const _c9O3X;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.550032678 UTC

[section ""data" . GHC.Conc.Sync.killThread_closure" {
     GHC.Conc.Sync.killThread_closure:
         const GHC.Conc.Sync.killThread_info;
         const 0;
 },
 GHC.Conc.Sync.killThread_entry() //  [R2]
         { []
         }
     {offset
       c9O4o: // global
           R2 = R2;
           call GHC.Conc.Sync.killThread1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.killThread_info" {
     GHC.Conc.Sync.killThread_info:
         const GHC.Conc.Sync.killThread_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9MdE_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.55346427 UTC

[section ""data" . GHC.Conc.Sync.getNumProcessors1_closure" {
     GHC.Conc.Sync.getNumProcessors1_closure:
         const GHC.Conc.Sync.getNumProcessors1_info;
 },
 GHC.Conc.Sync.getNumProcessors1_entry() //  []
         { []
         }
     {offset
       c9O4C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9O4L; else goto c9O4K;
       c9O4L: // global
           HpAlloc = 16;
           R1 = GHC.Conc.Sync.getNumProcessors1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9O4K: // global
           (_s9M1t::I64) = call "ccall" arg hints:  []  result hints:  [] getNumberOfProcessors();
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = %MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(_s9M1t::I64));
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getNumProcessors1_info" {
     GHC.Conc.Sync.getNumProcessors1_info:
         const GHC.Conc.Sync.getNumProcessors1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.556973864 UTC

[section ""data" . GHC.Conc.Sync.getNumProcessors_closure" {
     GHC.Conc.Sync.getNumProcessors_closure:
         const GHC.Conc.Sync.getNumProcessors_info;
 },
 GHC.Conc.Sync.getNumProcessors_entry() //  []
         { []
         }
     {offset
       c9O4X: // global
           call GHC.Conc.Sync.getNumProcessors1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getNumProcessors_info" {
     GHC.Conc.Sync.getNumProcessors_info:
         const GHC.Conc.Sync.getNumProcessors_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.559837668 UTC

[section ""data" . GHC.Conc.Sync.threadStatus7_closure" {
     GHC.Conc.Sync.threadStatus7_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnOther_closure+6;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.561836929 UTC

[section ""data" . GHC.Conc.Sync.threadStatus6_closure" {
     GHC.Conc.Sync.threadStatus6_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnMVar_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.56348683 UTC

[section ""data" . GHC.Conc.Sync.threadStatus2_closure" {
     GHC.Conc.Sync.threadStatus2_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnException_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.565151638 UTC

[section ""data" . GHC.Conc.Sync.threadStatus3_closure" {
     GHC.Conc.Sync.threadStatus3_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnForeignCall_closure+5;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.566878194 UTC

[section ""data" . GHC.Conc.Sync.threadStatus4_closure" {
     GHC.Conc.Sync.threadStatus4_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnSTM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.568549762 UTC

[section ""data" . GHC.Conc.Sync.threadStatus5_closure" {
     GHC.Conc.Sync.threadStatus5_closure:
         const GHC.Conc.Sync.ThreadBlocked_con_info;
         const GHC.Conc.Sync.BlockedOnBlackHole_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.572321674 UTC

[section ""data" . GHC.Conc.Sync.$wthreadStatus_closure" {
     GHC.Conc.Sync.$wthreadStatus_closure:
         const GHC.Conc.Sync.$wthreadStatus_info;
 },
 sat_s9M1F_entry() //  [R1]
         { []
         }
     {offset
       c9O5z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9O5A; else goto c9O5B;
       c9O5A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9O5B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s9M1E::I64 = I64[R1 + 16];
           if (%MO_S_Ge_W64(_s9M1E::I64, 18)) goto c9O5o; else goto u9O5C;
       u9O5C: // global
           if (%MO_S_Lt_W64(_s9M1E::I64, 0)) goto c9O5o; else goto u9O5D;
       u9O5D: // global
           switch [0 .. 17] _s9M1E::I64 {
               case 0 : goto c9O5p;
               case 1 : goto c9O5w;
               case 2 : goto c9O5r;
               case 6 : goto c9O5s;
               case 10, 11 : goto c9O5u;
               case 12 : goto c9O5v;
               case 14 : goto c9O5w;
               case 16 : goto c9O5x;
               case 17 : goto c9O5y;
               default: {goto c9O5o;}
           }
       c9O5y: // global
           R1 = GHC.Conc.Sync.ThreadDied_closure+4;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9O5x: // global
           R1 = GHC.Conc.Sync.ThreadFinished_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9O5v: // global
           R1 = GHC.Conc.Sync.threadStatus2_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9O5u: // global
           R1 = GHC.Conc.Sync.threadStatus3_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9O5s: // global
           R1 = GHC.Conc.Sync.threadStatus4_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9O5r: // global
           R1 = GHC.Conc.Sync.threadStatus5_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9O5w: // global
           R1 = GHC.Conc.Sync.threadStatus6_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9O5p: // global
           R1 = GHC.Conc.Sync.ThreadRunning_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9O5o: // global
           R1 = GHC.Conc.Sync.threadStatus7_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9M1F_info" {
     sat_s9M1F_info:
         const sat_s9M1F_entry;
         const 4294967296;
         const 17;
 },
 GHC.Conc.Sync.$wthreadStatus_entry() //  [R2]
         { []
         }
     {offset
       c9O5E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9O5F; else goto c9O5G;
       c9O5F: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.$wthreadStatus_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9O5G: // global
           I64[Sp - 8] = block_c9O5e_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_threadStatus#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$wthreadStatus_info" {
     GHC.Conc.Sync.$wthreadStatus_info:
         const GHC.Conc.Sync.$wthreadStatus_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9O5e() //  [R1]
         { []
         }
     {offset
       c9O5e: // global
           I64[Sp] = R1;
           Sp = Sp - 8;
           call _c9O5f() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9O5e_info" {
     block_c9O5e_info:
         const _c9O5e;
         const 0;
         const 30;
 },
 _c9O5f() //  []
         { []
         }
     {offset
       c9O5f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9O5J; else goto c9O5I;
       c9O5J: // global
           HpAlloc = 24;
           I64[Sp] = block_c9O5f_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9O5I: // global
           I64[Hp - 16] = sat_s9M1F_info;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O5f_info" {
     block_c9O5f_info:
         const _c9O5f;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.582757569 UTC

[section ""data" . GHC.Conc.Sync.threadStatus1_closure" {
     GHC.Conc.Sync.threadStatus1_closure:
         const GHC.Conc.Sync.threadStatus1_info;
 },
 GHC.Conc.Sync.threadStatus1_entry() //  [R2]
         { []
         }
     {offset
       c9O6q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9O6r; else goto c9O6s;
       c9O6r: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.threadStatus1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9O6s: // global
           I64[Sp - 8] = block_c9O6n_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9O6w; else goto c9O6o;
       u9O6w: // global
           call _c9O6n(R1) args: 0, res: 0, upd: 0;
       c9O6o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.threadStatus1_info" {
     GHC.Conc.Sync.threadStatus1_info:
         const GHC.Conc.Sync.threadStatus1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9O6n() //  [R1]
         { []
         }
     {offset
       c9O6n: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Conc.Sync.$wthreadStatus_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O6n_info" {
     block_c9O6n_info:
         const _c9O6n;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.587927086 UTC

[section ""data" . GHC.Conc.Sync.threadStatus_closure" {
     GHC.Conc.Sync.threadStatus_closure:
         const GHC.Conc.Sync.threadStatus_info;
 },
 GHC.Conc.Sync.threadStatus_entry() //  [R2]
         { []
         }
     {offset
       c9O6L: // global
           R2 = R2;
           call GHC.Conc.Sync.threadStatus1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.threadStatus_info" {
     GHC.Conc.Sync.threadStatus_info:
         const GHC.Conc.Sync.threadStatus_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.591721418 UTC

[section ""data" . GHC.Conc.Sync.$fFunctorSTM2_closure" {
     GHC.Conc.Sync.$fFunctorSTM2_closure:
         const GHC.Conc.Sync.$fFunctorSTM2_info;
 },
 GHC.Conc.Sync.$fFunctorSTM2_entry() //  [R2, R3]
         { []
         }
     {offset
       c9O6Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9O70; else goto c9O71;
       c9O70: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fFunctorSTM2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9O71: // global
           I64[Sp - 16] = block_c9O6W_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fFunctorSTM2_info" {
     GHC.Conc.Sync.$fFunctorSTM2_info:
         const GHC.Conc.Sync.$fFunctorSTM2_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9O6W() //  [R1]
         { []
         }
     {offset
       c9O6W: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9O74; else goto c9O73;
       c9O74: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9O73: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O6W_info" {
     block_c9O6W_info:
         const _c9O6W;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.597042381 UTC

[section ""data" . GHC.Conc.Sync.$fFunctorSTM1_closure" {
     GHC.Conc.Sync.$fFunctorSTM1_closure:
         const GHC.Conc.Sync.$fFunctorSTM1_info;
 },
 GHC.Conc.Sync.$fFunctorSTM1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9O7n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9O7o; else goto c9O7p;
       c9O7o: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fFunctorSTM1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9O7p: // global
           I64[Sp - 16] = block_c9O7l_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fFunctorSTM1_info" {
     GHC.Conc.Sync.$fFunctorSTM1_info:
         const GHC.Conc.Sync.$fFunctorSTM1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9O7l() //  []
         { []
         }
     {offset
       c9O7l: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O7l_info" {
     block_c9O7l_info:
         const _c9O7l;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.602807811 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM2_closure" {
     GHC.Conc.Sync.$fApplicativeSTM2_closure:
         const GHC.Conc.Sync.$fApplicativeSTM2_info;
 },
 GHC.Conc.Sync.$fApplicativeSTM2_entry() //  [R2, R3]
         { []
         }
     {offset
       c9O7K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9O7L; else goto c9O7M;
       c9O7L: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fApplicativeSTM2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9O7M: // global
           I64[Sp - 16] = block_c9O7F_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fApplicativeSTM2_info" {
     GHC.Conc.Sync.$fApplicativeSTM2_info:
         const GHC.Conc.Sync.$fApplicativeSTM2_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9O7F() //  [R1]
         { []
         }
     {offset
       c9O7F: // global
           I64[Sp] = block_c9O7H_info;
           _s9M22::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9M22::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O7F_info" {
     block_c9O7F_info:
         const _c9O7F;
         const 1;
         const 30;
 },
 _c9O7H() //  [R1]
         { []
         }
     {offset
       c9O7H: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9O7Q; else goto c9O7P;
       c9O7Q: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9O7P: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O7H_info" {
     block_c9O7H_info:
         const _c9O7H;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.610471993 UTC

[section ""data" . $cliftA2_r9Fva_closure" {
     $cliftA2_r9Fva_closure:
         const $cliftA2_r9Fva_info;
 },
 $cliftA2_r9Fva_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9O8g: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9O8h; else goto c9O8i;
       c9O8h: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $cliftA2_r9Fva_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9O8i: // global
           I64[Sp - 24] = block_c9O8b_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $cliftA2_r9Fva_info" {
     $cliftA2_r9Fva_info:
         const $cliftA2_r9Fva_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9O8b() //  [R1]
         { []
         }
     {offset
       c9O8b: // global
           I64[Sp] = block_c9O8d_info;
           _s9M2d::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s9M2d::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O8b_info" {
     block_c9O8b_info:
         const _c9O8b;
         const 2;
         const 30;
 },
 _c9O8d() //  [R1]
         { []
         }
     {offset
       c9O8d: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9O8m; else goto c9O8l;
       c9O8m: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9O8l: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O8d_info" {
     block_c9O8d_info:
         const _c9O8d;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.617750741 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_closure" {
     GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_closure:
         const GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_info;
 },
 GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9O8I: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $cliftA2_r9Fva_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_info" {
     GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_info:
         const GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.621553712 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM1_closure" {
     GHC.Conc.Sync.$fApplicativeSTM1_closure:
         const GHC.Conc.Sync.$fApplicativeSTM1_info;
 },
 GHC.Conc.Sync.$fApplicativeSTM1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9O8X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9O8Y; else goto c9O8Z;
       c9O8Y: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fApplicativeSTM1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9O8Z: // global
           I64[Sp - 16] = block_c9O8T_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fApplicativeSTM1_info" {
     GHC.Conc.Sync.$fApplicativeSTM1_info:
         const GHC.Conc.Sync.$fApplicativeSTM1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9O8T() //  [R1]
         { []
         }
     {offset
       c9O8T: // global
           I64[Sp] = block_c9O8V_info;
           _s9M2n::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9M2n::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O8T_info" {
     block_c9O8T_info:
         const _c9O8T;
         const 1;
         const 30;
 },
 _c9O8V() //  []
         { []
         }
     {offset
       c9O8V: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O8V_info" {
     block_c9O8V_info:
         const _c9O8V;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.627814957 UTC

[section ""data" . GHC.Conc.Sync.$fFunctorSTM_closure" {
     GHC.Conc.Sync.$fFunctorSTM_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Conc.Sync.$fFunctorSTM2_closure+3;
         const GHC.Conc.Sync.$fFunctorSTM1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.62962708 UTC

[section ""data" . GHC.Conc.Sync.$fApplicativeSTM_closure" {
     GHC.Conc.Sync.$fApplicativeSTM_closure:
         const GHC.Base.C:Applicative_con_info;
         const GHC.Conc.Sync.$fFunctorSTM_closure+1;
         const GHC.Conc.Sync.$fApplicativeSTM_$cpure_closure+2;
         const GHC.Conc.Sync.$fApplicativeSTM2_closure+3;
         const GHC.Conc.Sync.$fApplicativeSTM_$cliftA2_closure+4;
         const GHC.Conc.Sync.$fApplicativeSTM_$c*>_closure+3;
         const GHC.Conc.Sync.$fApplicativeSTM1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.631700913 UTC

[section ""data" . lvl_r9Fvb_closure" {
     lvl_r9Fvb_closure:
         const lvl_r9Fvb_info;
         const 0;
 },
 lvl_r9Fvb_entry() //  [R2]
         { []
         }
     {offset
       c9O9m: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl_r9Fvb_info" {
     lvl_r9Fvb_info:
         const lvl_r9Fvb_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S9MdE_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.634830891 UTC

[section ""data" . GHC.Conc.Sync.$fMonadSTM_closure" {
     GHC.Conc.Sync.$fMonadSTM_closure:
         const GHC.Base.C:Monad_con_info;
         const GHC.Conc.Sync.$fApplicativeSTM_closure+1;
         const GHC.Conc.Sync.$fMonadSTM_$c>>=_closure+3;
         const GHC.Conc.Sync.$fApplicativeSTM_$c*>_closure+3;
         const GHC.Conc.Sync.$fApplicativeSTM_$cpure_closure+2;
         const lvl_r9Fvb_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.636770331 UTC

[section ""data" . GHC.Conc.Sync.always2_closure" {
     GHC.Conc.Sync.always2_closure:
         const GHC.Conc.Sync.always2_info;
 },
 GHC.Conc.Sync.always2_entry() //  []
         { []
         }
     {offset
       c9O9y: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.always2_info" {
     GHC.Conc.Sync.always2_info:
         const GHC.Conc.Sync.always2_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.641382893 UTC

[section ""data" . GHC.Conc.Sync.alwaysSucceeds1_closure" {
     GHC.Conc.Sync.alwaysSucceeds1_closure:
         const GHC.Conc.Sync.alwaysSucceeds1_info;
 },
 sat_s9M2z_entry() //  [R1]
         { []
         }
     {offset
       c9O9S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9O9T; else goto c9O9U;
       c9O9T: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9O9U: // global
           I64[Sp - 8] = block_c9O9Q_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M2z_info" {
     sat_s9M2z_info:
         const sat_s9M2z_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _c9O9Q() //  []
         { []
         }
     {offset
       c9O9Q: // global
           Sp = Sp + 8;
           call stg_retry#() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O9Q_info" {
     block_c9O9Q_info:
         const _c9O9Q;
         const 0;
         const 30;
 },
 GHC.Conc.Sync.alwaysSucceeds1_entry() //  [R2]
         { []
         }
     {offset
       c9Oa0: // global
           _s9M2t::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Oa1; else goto c9Oa2;
       c9Oa2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Oa4; else goto c9Oa3;
       c9Oa4: // global
           HpAlloc = 16;
           goto c9Oa1;
       c9Oa1: // global
           R2 = _s9M2t::P64;
           R1 = GHC.Conc.Sync.alwaysSucceeds1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Oa3: // global
           I64[Hp - 8] = sat_s9M2z_info;
           P64[Hp] = _s9M2t::P64;
           I64[Sp - 16] = block_c9O9W_info;
           R2 = GHC.Conc.Sync.always2_closure+1;
           R1 = Hp - 7;
           P64[Sp - 8] = _s9M2t::P64;
           Sp = Sp - 16;
           call stg_catchRetry#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.alwaysSucceeds1_info" {
     GHC.Conc.Sync.alwaysSucceeds1_info:
         const GHC.Conc.Sync.alwaysSucceeds1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9O9W() //  []
         { []
         }
     {offset
       c9O9W: // global
           _s9M2t::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9O9Y_info;
           R1 = _s9M2t::P64;
           Sp = Sp + 8;
           call stg_check#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O9W_info" {
     block_c9O9W_info:
         const _c9O9W;
         const 1;
         const 30;
 },
 _c9O9Y() //  []
         { []
         }
     {offset
       c9O9Y: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9O9Y_info" {
     block_c9O9Y_info:
         const _c9O9Y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.651478093 UTC

[section ""data" . GHC.Conc.Sync.alwaysSucceeds_closure" {
     GHC.Conc.Sync.alwaysSucceeds_closure:
         const GHC.Conc.Sync.alwaysSucceeds_info;
 },
 GHC.Conc.Sync.alwaysSucceeds_entry() //  [R2]
         { []
         }
     {offset
       c9Oaz: // global
           R2 = R2;
           call GHC.Conc.Sync.alwaysSucceeds1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.alwaysSucceeds_info" {
     GHC.Conc.Sync.alwaysSucceeds_info:
         const GHC.Conc.Sync.alwaysSucceeds_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.654755123 UTC

[section ""data" . GHC.Conc.Sync.$fAlternativeSTM2_closure" {
     GHC.Conc.Sync.$fAlternativeSTM2_closure:
         const GHC.Conc.Sync.$fAlternativeSTM2_info;
 },
 GHC.Conc.Sync.$fAlternativeSTM2_entry() //  []
         { []
         }
     {offset
       c9OaK: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fAlternativeSTM2_info" {
     GHC.Conc.Sync.$fAlternativeSTM2_info:
         const GHC.Conc.Sync.$fAlternativeSTM2_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.659184725 UTC

[section ""data" . GHC.Conc.Sync.$fAlternativeSTM3_closure" {
     GHC.Conc.Sync.$fAlternativeSTM3_closure:
         const GHC.Conc.Sync.$fAlternativeSTM3_info;
 },
 some_v_s9M2H_entry() //  [R1]
         { []
         }
     {offset
       c9Ob7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ob8; else goto c9Ob9;
       c9Ob8: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ob9: // global
           I64[Sp - 16] = block_c9Ob2_info;
           _s9M2H::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s9M2H::P64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . some_v_s9M2H_info" {
     some_v_s9M2H_info:
         const some_v_s9M2H_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _c9Ob2() //  [R1]
         { []
         }
     {offset
       c9Ob2: // global
           I64[Sp] = block_c9Ob4_info;
           R2 = GHC.Conc.Sync.$fAlternativeSTM2_closure+1;
           _s9M2L::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9M2L::P64;
           call stg_catchRetry#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ob2_info" {
     block_c9Ob2_info:
         const _c9Ob2;
         const 1;
         const 30;
 },
 _c9Ob4() //  [R1]
         { []
         }
     {offset
       c9Ob4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Obd; else goto c9Obc;
       c9Obd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Obc: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ob4_info" {
     block_c9Ob4_info:
         const _c9Ob4;
         const 1;
         const 30;
 },
 GHC.Conc.Sync.$fAlternativeSTM3_entry() //  [R2]
         { []
         }
     {offset
       c9Obe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Obi; else goto c9Obh;
       c9Obi: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fAlternativeSTM3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Obh: // global
           I64[Hp - 8] = some_v_s9M2H_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call some_v_s9M2H_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fAlternativeSTM3_info" {
     GHC.Conc.Sync.$fAlternativeSTM3_info:
         const GHC.Conc.Sync.$fAlternativeSTM3_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.668533612 UTC

[section ""data" . GHC.Conc.Sync.$fAlternativeSTM1_closure" {
     GHC.Conc.Sync.$fAlternativeSTM1_closure:
         const GHC.Conc.Sync.$fAlternativeSTM1_info;
 },
 many_v_s9M2S_entry() //  [R1]
         { []
         }
     {offset
       c9ObS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9ObT; else goto c9ObU;
       c9ObT: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9ObU: // global
           I64[Sp - 16] = block_c9ObN_info;
           _s9M2T::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s9M2T::P64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . many_v_s9M2S_info" {
     many_v_s9M2S_info:
         const many_v_s9M2S_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c9ObN() //  [R1]
         { []
         }
     {offset
       c9ObN: // global
           I64[Sp] = block_c9ObP_info;
           _s9M2X::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9M2X::P64;
           call many_v1_s9M2T_entry(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9ObN_info" {
     block_c9ObN_info:
         const _c9ObN;
         const 1;
         const 30;
 },
 _c9ObP() //  [R1]
         { []
         }
     {offset
       c9ObP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ObY; else goto c9ObX;
       c9ObY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9ObX: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9ObP_info" {
     block_c9ObP_info:
         const _c9ObP;
         const 1;
         const 30;
 },
 many_v1_s9M2T_entry() //  [R1]
         { []
         }
     {offset
       c9Oc3: // global
           R2 = GHC.Conc.Sync.$fAlternativeSTM2_closure+1;
           R1 = P64[R1 + 7];
           call stg_catchRetry#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . many_v1_s9M2T_info" {
     many_v1_s9M2T_info:
         const many_v1_s9M2T_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Conc.Sync.$fAlternativeSTM1_entry() //  [R2]
         { []
         }
     {offset
       c9Oc6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Oca; else goto c9Oc9;
       c9Oca: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = GHC.Conc.Sync.$fAlternativeSTM1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Oc9: // global
           I64[Hp - 32] = many_v_s9M2S_info;
           P64[Hp - 24] = R2;
           _c9ObI::P64 = Hp - 7;
           P64[Hp - 16] = _c9ObI::P64;
           I64[Hp - 8] = many_v1_s9M2T_info;
           P64[Hp] = Hp - 31;
           R1 = _c9ObI::P64;
           call many_v1_s9M2T_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$fAlternativeSTM1_info" {
     GHC.Conc.Sync.$fAlternativeSTM1_info:
         const GHC.Conc.Sync.$fAlternativeSTM1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.678662173 UTC

[section ""data" . sat_s9M33_closure" {
     sat_s9M33_closure:
         const sat_s9M33_info;
         const 0;
 },
 sat_s9M33_entry() //  [R2, R3]
         { []
         }
     {offset
       c9OcE: // global
           _B3::P64 = R2;
           R2 = R3;
           R1 = _B3::P64;
           call stg_catchRetry#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M33_info" {
     sat_s9M33_info:
         const sat_s9M33_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.681893443 UTC

[section ""data" . sat_s9M32_closure" {
     sat_s9M32_closure:
         const sat_s9M32_info;
         const 0;
 },
 sat_s9M32_entry() //  []
         { []
         }
     {offset
       c9OcP: // global
           call stg_retry#() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M32_info" {
     sat_s9M32_info:
         const sat_s9M32_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.684702309 UTC

[section ""data" . GHC.Conc.Sync.$fAlternativeSTM_closure" {
     GHC.Conc.Sync.$fAlternativeSTM_closure:
         const GHC.Base.C:Alternative_con_info;
         const GHC.Conc.Sync.$fApplicativeSTM_closure+1;
         const sat_s9M32_closure+1;
         const sat_s9M33_closure+3;
         const GHC.Conc.Sync.$fAlternativeSTM3_closure+2;
         const GHC.Conc.Sync.$fAlternativeSTM1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.68701095 UTC

[section ""data" . sat_s9M35_closure" {
     sat_s9M35_closure:
         const sat_s9M35_info;
         const 0;
 },
 sat_s9M35_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Od1: // global
           _B3::P64 = R2;
           R2 = R3;
           R1 = _B3::P64;
           call stg_catchRetry#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M35_info" {
     sat_s9M35_info:
         const sat_s9M35_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.690076554 UTC

[section ""data" . sat_s9M34_closure" {
     sat_s9M34_closure:
         const sat_s9M34_info;
         const 0;
 },
 sat_s9M34_entry() //  []
         { []
         }
     {offset
       c9Odc: // global
           call stg_retry#() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M34_info" {
     sat_s9M34_info:
         const sat_s9M34_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.69311044 UTC

[section ""data" . GHC.Conc.Sync.$fMonadPlusSTM_closure" {
     GHC.Conc.Sync.$fMonadPlusSTM_closure:
         const GHC.Base.C:MonadPlus_con_info;
         const GHC.Conc.Sync.$fAlternativeSTM_closure+1;
         const GHC.Conc.Sync.$fMonadSTM_closure+1;
         const sat_s9M34_closure+1;
         const sat_s9M35_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.694813562 UTC

[section ""cstring" . lvl1_r9Fvc_bytes" {
     lvl1_r9Fvc_bytes:
         I8[] [84,114,97,110,115,97,99,116,105,111,110,97,108,32,105,110,118,97,114,105,97,110,116,32,118,105,111,108,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.697235439 UTC

[section ""data" . GHC.Conc.Sync.always3_closure" {
     GHC.Conc.Sync.always3_closure:
         const GHC.Conc.Sync.always3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.always3_entry() //  [R1]
         { []
         }
     {offset
       c9Odt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Odu; else goto c9Odv;
       c9Odu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Odv: // global
           (_c9Odo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Odo::I64 == 0) goto c9Odq; else goto c9Odp;
       c9Odq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Odp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Odo::I64;
           I64[Sp - 24] = block_c9Odr_info;
           R2 = lvl1_r9Fvc_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.always3_info" {
     GHC.Conc.Sync.always3_info:
         const GHC.Conc.Sync.always3_entry;
         const 0;
         const 4294967317;
         const S9MdE_srt+160;
 },
 _c9Odr() //  [R1]
         { []
         }
     {offset
       c9Odr: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Odr_info" {
     block_c9Odr_info:
         const _c9Odr;
         const 0;
         const 4294967326;
         const S9MdE_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.705355988 UTC

[section ""data" . GHC.Conc.Sync.always1_closure" {
     GHC.Conc.Sync.always1_closure:
         const GHC.Conc.Sync.always1_info;
         const 0;
 },
 sat_s9M3f_entry() //  [R1]
         { []
         }
     {offset
       c9Oe3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Oe4; else goto c9Oe5;
       c9Oe4: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Oe5: // global
           I64[Sp - 8] = block_c9OdU_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M3f_info" {
     sat_s9M3f_info:
         const sat_s9M3f_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9MdE_srt+168;
 },
 _c9OdU() //  [R1]
         { []
         }
     {offset
       c9OdU: // global
           I64[Sp] = block_c9OdW_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9Oed; else goto c9OdX;
       u9Oed: // global
           call _c9OdW(R1) args: 0, res: 0, upd: 0;
       c9OdX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OdU_info" {
     block_c9OdU_info:
         const _c9OdU;
         const 0;
         const 4294967326;
         const S9MdE_srt+168;
 },
 _c9OdW() //  [R1]
         { []
         }
     {offset
       c9OdW: // global
           if (R1 & 7 == 1) goto c9Oe0; else goto c9Oe1;
       c9Oe0: // global
           R1 = GHC.Conc.Sync.always3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c9Oe1: // global
           Sp = Sp + 8;
           call stg_retry#() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OdW_info" {
     block_c9OdW_info:
         const _c9OdW;
         const 0;
         const 4294967326;
         const S9MdE_srt+168;
 },
 sat_s9M3p_entry() //  [R1]
         { []
         }
     {offset
       c9Oeu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Oev; else goto c9Oew;
       c9Oev: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Oew: // global
           I64[Sp - 8] = block_c9Oel_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M3p_info" {
     sat_s9M3p_info:
         const sat_s9M3p_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9MdE_srt+168;
 },
 _c9Oel() //  [R1]
         { []
         }
     {offset
       c9Oel: // global
           I64[Sp] = block_c9Oen_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9OeE; else goto c9Oeo;
       u9OeE: // global
           call _c9Oen(R1) args: 0, res: 0, upd: 0;
       c9Oeo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oel_info" {
     block_c9Oel_info:
         const _c9Oel;
         const 0;
         const 4294967326;
         const S9MdE_srt+168;
 },
 _c9Oen() //  [R1]
         { []
         }
     {offset
       c9Oen: // global
           if (R1 & 7 == 1) goto c9Oer; else goto c9Oes;
       c9Oer: // global
           R1 = GHC.Conc.Sync.always3_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c9Oes: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oen_info" {
     block_c9Oen_info:
         const _c9Oen;
         const 0;
         const 4294967326;
         const S9MdE_srt+168;
 },
 GHC.Conc.Sync.always1_entry() //  [R2]
         { []
         }
     {offset
       c9OeH: // global
           _s9M37::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c9OeI; else goto c9OeJ;
       c9OeJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OeL; else goto c9OeK;
       c9OeL: // global
           HpAlloc = 16;
           goto c9OeI;
       c9OeI: // global
           R2 = _s9M37::P64;
           R1 = GHC.Conc.Sync.always1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9OeK: // global
           I64[Hp - 8] = sat_s9M3f_info;
           P64[Hp] = _s9M37::P64;
           I64[Sp - 16] = block_c9Oee_info;
           R2 = GHC.Conc.Sync.always2_closure+1;
           R1 = Hp - 7;
           P64[Sp - 8] = _s9M37::P64;
           Sp = Sp - 16;
           call stg_catchRetry#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.always1_info" {
     GHC.Conc.Sync.always1_info:
         const GHC.Conc.Sync.always1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S9MdE_srt+168;
 },
 _c9Oee() //  [R1]
         { []
         }
     {offset
       c9Oee: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OeO; else goto c9OeN;
       c9OeO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OeN: // global
           I64[Hp - 8] = sat_s9M3p_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9OeF_info;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_check#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oee_info" {
     block_c9Oee_info:
         const _c9Oee;
         const 1;
         const 4294967326;
         const S9MdE_srt+168;
 },
 _c9OeF() //  []
         { []
         }
     {offset
       c9OeF: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OeF_info" {
     block_c9OeF_info:
         const _c9OeF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.722402531 UTC

[section ""data" . GHC.Conc.Sync.always_closure" {
     GHC.Conc.Sync.always_closure:
         const GHC.Conc.Sync.always_info;
         const 0;
 },
 GHC.Conc.Sync.always_entry() //  [R2]
         { []
         }
     {offset
       c9OfI: // global
           R2 = R2;
           call GHC.Conc.Sync.always1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.always_info" {
     GHC.Conc.Sync.always_info:
         const GHC.Conc.Sync.always_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9MdE_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.725527457 UTC

[section ""cstring" . lvl2_r9Fvd_bytes" {
     lvl2_r9Fvd_bytes:
         I8[] [110,111,32,116,104,114,101,97,100,115,32,116,111,32,114,117,110,58,32,32,105,110,102,105,110,105,116,101,32,108,111,111,112,32,111,114,32,100,101,97,100,108,111,99,107,63]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.727674172 UTC

[section ""data" . lvl3_r9Fve_closure" {
     lvl3_r9Fve_closure:
         const lvl3_r9Fve_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r9Fve_entry() //  [R1]
         { []
         }
     {offset
       c9OfW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OfX; else goto c9OfY;
       c9OfX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9OfY: // global
           (_c9OfT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9OfT::I64 == 0) goto c9OfV; else goto c9OfU;
       c9OfV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9OfU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9OfT::I64;
           R2 = lvl2_r9Fvd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r9Fve_info" {
     lvl3_r9Fve_info:
         const lvl3_r9Fve_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.732511195 UTC

[section ""data" . lvl4_r9Fvf_closure" {
     lvl4_r9Fvf_closure:
         const lvl4_r9Fvf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r9Fvf_entry() //  [R1]
         { []
         }
     {offset
       c9Ogi: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Ogj; else goto c9Ogk;
       c9Ogj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ogk: // global
           (_c9Oga::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Oga::I64 == 0) goto c9Ogc; else goto c9Ogb;
       c9Ogc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ogb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Oga::I64;
           I64[Sp - 24] = block_c9Ogd_info;
           R6 = 0;
           R5 = GHC.IO.Exception.$fExceptionDeadlock4_closure;
           R4 = GHC.IO.Exception.$trModule_closure;
           R3 = 11186984538024031318;
           R2 = 18363794241794644491;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r9Fvf_info" {
     lvl4_r9Fvf_info:
         const lvl4_r9Fvf_entry;
         const 0;
         const 4294967317;
         const S9MdE_srt+184;
 },
 _c9Ogd() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9Ogd: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Oge() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Ogd_info" {
     block_c9Ogd_info:
         const _c9Ogd;
         const 0;
         const 30;
 },
 _c9Oge() //  []
         { []
         }
     {offset
       c9Oge: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Ogn; else goto c9Ogm;
       c9Ogn: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Oge_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Ogm: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Oge_info" {
     block_c9Oge_info:
         const _c9Oge;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.739440982 UTC

[section ""cstring" . lvl5_r9Fvg_bytes" {
     lvl5_r9Fvg_bytes:
         I8[] [37,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.741891526 UTC

[section ""data" . lvl6_r9Fvh_closure" {
     lvl6_r9Fvh_closure:
         const lvl6_r9Fvh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r9Fvh_entry() //  [R1]
         { []
         }
     {offset
       c9OgX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OgY; else goto c9OgZ;
       c9OgY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9OgZ: // global
           (_c9OgU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9OgU::I64 == 0) goto c9OgW; else goto c9OgV;
       c9OgW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9OgV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9OgU::I64;
           R2 = lvl5_r9Fvg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r9Fvh_info" {
     lvl6_r9Fvh_info:
         const lvl6_r9Fvh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.746779232 UTC

[section ""data" . lvl7_r9Fvi_closure" {
     lvl7_r9Fvi_closure:
         const lvl7_r9Fvi_info;
 },
 lvl7_r9Fvi_entry() //  [R2]
         { []
         }
     {offset
       c9Ohf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ohg; else goto c9Ohh;
       c9Ohg: // global
           R2 = R2;
           R1 = lvl7_r9Fvi_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ohh: // global
           I64[Sp - 8] = block_c9Ohc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Ohl; else goto c9Ohd;
       u9Ohl: // global
           call _c9Ohc() args: 0, res: 0, upd: 0;
       c9Ohd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_r9Fvi_info" {
     lvl7_r9Fvi_info:
         const lvl7_r9Fvi_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9Ohc() //  []
         { []
         }
     {offset
       c9Ohc: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ohc_info" {
     block_c9Ohc_info:
         const _c9Ohc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.751799045 UTC

[section ""data" . lvl8_r9Fvj_closure" {
     lvl8_r9Fvj_closure:
         const lvl8_r9Fvj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r9Fvj_entry() //  [R1]
         { []
         }
     {offset
       c9OhE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OhF; else goto c9OhG;
       c9OhF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9OhG: // global
           (_c9OhB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9OhB::I64 == 0) goto c9OhD; else goto c9OhC;
       c9OhD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9OhC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9OhB::I64;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           R1 = GHC.IO.Handle.hFlush_closure;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_r9Fvj_info" {
     lvl8_r9Fvj_info:
         const lvl8_r9Fvj_entry;
         const 0;
         const 12884901909;
         const S9MdE_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.759750647 UTC

[section ""data" . lvl9_r9Fvk_closure" {
     lvl9_r9Fvk_closure:
         const lvl9_r9Fvk_info;
         const 0;
 },
 msg_s9M3O_entry() //  [R1]
         { []
         }
     {offset
       c9Oia: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9Oib; else goto c9Oic;
       c9Oib: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Oic: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c9Oi8_info;
           _s9M3F::P64 = P64[R1 + 16];
           R2 = _s9M3F::P64;
           P64[Sp - 32] = _s9M3F::P64;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . msg_s9M3O_info" {
     msg_s9M3O_info:
         const msg_s9M3O_entry;
         const 2;
         const 30064771090;
         const S9MdE_srt+208;
 },
 _c9Oi8() //  [R1]
         { []
         }
     {offset
       c9Oi8: // global
           I64[Sp] = block_c9Oif_info;
           R3 = lvl4_r9Fvf_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Oi8_info" {
     block_c9Oi8_info:
         const _c9Oi8;
         const 2;
         const 30064771102;
         const S9MdE_srt+208;
 },
 _c9Oif() //  [R1]
         { []
         }
     {offset
       c9Oif: // global
           if (R1 & 7 == 1) goto c9Oin; else goto c9Oiw;
       c9Oin: // global
           _s9M3F::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9Oik_info;
           R2 = _s9M3F::P64;
           Sp = Sp + 8;
           call GHC.Exception.$p2Exception_entry(R2) args: 8, res: 8, upd: 24;
       c9Oiw: // global
           _s9M3G::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c9Oiu_info;
           R1 = _s9M3G::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Oif_info" {
     block_c9Oif_info:
         const _c9Oif;
         const 2;
         const 4294967326;
         const S9MdE_srt+216;
 },
 _c9Oik() //  [R1]
         { []
         }
     {offset
       c9Oik: // global
           R2 = R1;
           I64[Sp - 16] = stg_ap_ppp_info;
           P64[Sp - 8] = GHC.Conc.Sync.$fShowThreadStatus2_closure+1;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Oik_info" {
     block_c9Oik_info:
         const _c9Oik;
         const 1;
         const 30;
 },
 _c9Oiu() //  []
         { []
         }
     {offset
       c9Oiu: // global
           R1 = lvl3_r9Fve_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Oiu_info" {
     block_c9Oiu_info:
         const _c9Oiu;
         const 0;
         const 4294967326;
         const S9MdE_srt+216;
 },
 sat_s9M47_entry() //  [R1, R2]
         { []
         }
     {offset
       c9OiR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OiV; else goto c9OiW;
       c9OiV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9OiW: // global
           I64[Sp - 16] = block_c9OiO_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Oj7; else goto c9OiP;
       u9Oj7: // global
           call _c9OiO(R1) args: 0, res: 0, upd: 0;
       c9OiP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M47_info" {
     sat_s9M47_info:
         const sat_s9M47_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9OiO() //  [R1]
         { []
         }
     {offset
       c9OiO: // global
           I64[Sp] = block_c9OiU_info;
           _s9M41::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9M41::I64;
           if (R1 & 7 != 0) goto u9Oj6; else goto c9OiY;
       u9Oj6: // global
           call _c9OiU(R1) args: 0, res: 0, upd: 0;
       c9OiY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OiO_info" {
     block_c9OiO_info:
         const _c9OiO;
         const 1;
         const 30;
 },
 _c9OiU() //  [R1]
         { []
         }
     {offset
       c9OiU: // global
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] errorBelch2(I64[Sp + 8], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OiU_info" {
     block_c9OiU_info:
         const _c9OiU;
         const 65;
         const 30;
 },
 sat_s9M48_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Oj8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Oj9; else goto c9Oja;
       c9Oj9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Oja: // global
           I64[Sp - 24] = block_c9OiH_info;
           _s9M3O::P64 = P64[R1 + 6];
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 16] = _s9M3O::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M48_info" {
     sat_s9M48_info:
         const sat_s9M48_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const S9MdE_srt+232;
 },
 _c9OiH() //  [R1]
         { []
         }
     {offset
       c9OiH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Ojd; else goto c9Ojc;
       c9Ojd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ojc: // global
           I64[Hp - 8] = sat_s9M47_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OiH_info" {
     block_c9OiH_info:
         const _c9OiH;
         const 2;
         const 30;
 },
 lvl9_r9Fvk_entry() //  [R2]
         { []
         }
     {offset
       c9Oje: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ojf; else goto c9Ojg;
       c9Ojf: // global
           R2 = R2;
           R1 = lvl9_r9Fvk_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ojg: // global
           I64[Sp - 8] = block_c9OhT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Ojn; else goto c9OhU;
       u9Ojn: // global
           call _c9OhT(R1) args: 0, res: 0, upd: 0;
       c9OhU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl9_r9Fvk_info" {
     lvl9_r9Fvk_info:
         const lvl9_r9Fvk_entry;
         const 0;
         const 545460846606;
         const 8589934597;
         const S9MdE_srt+208;
 },
 _c9OhT() //  [R1]
         { []
         }
     {offset
       c9OhT: // global
           I64[Sp - 16] = block_c9OhY_info;
           _s9M3F::P64 = P64[R1 + 7];
           _s9M3G::P64 = P64[R1 + 15];
           R1 = lvl8_r9Fvj_closure;
           P64[Sp - 8] = _s9M3G::P64;
           P64[Sp] = _s9M3F::P64;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OhT_info" {
     block_c9OhT_info:
         const _c9OhT;
         const 0;
         const 270582939678;
         const S9MdE_srt+208;
 },
 _c9OhY() //  [R1]
         { []
         }
     {offset
       c9OhY: // global
           I64[Sp] = block_c9Oi0_info;
           R2 = lvl7_r9Fvi_closure+2;
           R1 = R1;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OhY_info" {
     block_c9OhY_info:
         const _c9OhY;
         const 2;
         const 133143986206;
         const S9MdE_srt+208;
 },
 _c9Oi0() //  []
         { []
         }
     {offset
       c9Oi0: // global
           I64[Sp] = block_c9Oi2_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oi0_info" {
     block_c9Oi0_info:
         const _c9Oi0;
         const 2;
         const 133143986206;
         const S9MdE_srt+208;
 },
 _c9Oi2() //  [R1]
         { []
         }
     {offset
       c9Oi2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Ojm; else goto c9Ojl;
       c9Ojm: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ojl: // global
           I64[Hp - 40] = msg_s9M3O_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = sat_s9M48_info;
           P64[Hp] = Hp - 40;
           R4 = Hp - 6;
           R3 = lvl6_r9Fvh_closure;
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oi2_info" {
     block_c9Oi2_info:
         const _c9Oi2;
         const 2;
         const 133143986206;
         const S9MdE_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.786873898 UTC

[section ""data" . lvl10_r9Fvl_closure" {
     lvl10_r9Fvl_closure:
         const lvl10_r9Fvl_info;
         const 0;
 },
 lvl10_r9Fvl_entry() //  []
         { []
         }
     {offset
       c9OkS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9OkT; else goto c9OkU;
       c9OkT: // global
           R1 = lvl10_r9Fvl_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OkU: // global
           I64[Sp - 8] = block_c9OkN_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl10_r9Fvl_info" {
     lvl10_r9Fvl_info:
         const lvl10_r9Fvl_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const S9MdE_srt+256;
 },
 _c9OkN() //  []
         { []
         }
     {offset
       c9OkN: // global
           I64[Sp] = block_c9OkP_info;
           R1 = lvl9_r9Fvk_closure+2;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OkN_info" {
     block_c9OkN_info:
         const _c9OkN;
         const 0;
         const 4294967326;
         const S9MdE_srt+256;
 },
 _c9OkP() //  [R1]
         { []
         }
     {offset
       c9OkP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OkY; else goto c9OkX;
       c9OkY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OkX: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OkP_info" {
     block_c9OkP_info:
         const _c9OkP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.793875125 UTC

[section ""data" . GHC.Conc.Sync.uncaughtExceptionHandler_closure" {
     GHC.Conc.Sync.uncaughtExceptionHandler_closure:
         const GHC.Conc.Sync.uncaughtExceptionHandler_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.uncaughtExceptionHandler_entry() //  [R1]
         { []
         }
     {offset
       c9Olm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Oln; else goto c9Olo;
       c9Oln: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Olo: // global
           (_c9Olh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Olh::I64 == 0) goto c9Olj; else goto c9Oli;
       c9Olj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Oli: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Olh::I64;
           I64[Sp - 24] = block_c9Olk_info;
           Sp = Sp - 24;
           call lvl10_r9Fvl_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.uncaughtExceptionHandler_info" {
     GHC.Conc.Sync.uncaughtExceptionHandler_info:
         const GHC.Conc.Sync.uncaughtExceptionHandler_entry;
         const 0;
         const 4294967317;
         const S9MdE_srt+264;
 },
 _c9Olk() //  [R1]
         { []
         }
     {offset
       c9Olk: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Olk_info" {
     block_c9Olk_info:
         const _c9Olk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.799358127 UTC

[section ""data" . GHC.Conc.Sync.setUncaughtExceptionHandler1_closure" {
     GHC.Conc.Sync.setUncaughtExceptionHandler1_closure:
         const GHC.Conc.Sync.setUncaughtExceptionHandler1_info;
         const 0;
 },
 GHC.Conc.Sync.setUncaughtExceptionHandler1_entry() //  [R2]
         { []
         }
     {offset
       c9OlI: // global
           R3 = R2;
           R2 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           call GHC.STRef.writeSTRef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setUncaughtExceptionHandler1_info" {
     GHC.Conc.Sync.setUncaughtExceptionHandler1_info:
         const GHC.Conc.Sync.setUncaughtExceptionHandler1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9MdE_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.802591252 UTC

[section ""data" . GHC.Conc.Sync.setUncaughtExceptionHandler_closure" {
     GHC.Conc.Sync.setUncaughtExceptionHandler_closure:
         const GHC.Conc.Sync.setUncaughtExceptionHandler_info;
         const 0;
 },
 GHC.Conc.Sync.setUncaughtExceptionHandler_entry() //  [R2]
         { []
         }
     {offset
       c9OlT: // global
           R2 = R2;
           call GHC.Conc.Sync.setUncaughtExceptionHandler1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setUncaughtExceptionHandler_info" {
     GHC.Conc.Sync.setUncaughtExceptionHandler_info:
         const GHC.Conc.Sync.setUncaughtExceptionHandler_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9MdE_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.80571573 UTC

[section ""data" . GHC.Conc.Sync.getUncaughtExceptionHandler1_closure" {
     GHC.Conc.Sync.getUncaughtExceptionHandler1_closure:
         const GHC.Conc.Sync.getUncaughtExceptionHandler1_info;
         const 0;
 },
 GHC.Conc.Sync.getUncaughtExceptionHandler1_entry() //  []
         { []
         }
     {offset
       c9Om4: // global
           R2 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           call GHC.STRef.readSTRef1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getUncaughtExceptionHandler1_info" {
     GHC.Conc.Sync.getUncaughtExceptionHandler1_info:
         const GHC.Conc.Sync.getUncaughtExceptionHandler1_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const S9MdE_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.808929912 UTC

[section ""data" . GHC.Conc.Sync.getUncaughtExceptionHandler_closure" {
     GHC.Conc.Sync.getUncaughtExceptionHandler_closure:
         const GHC.Conc.Sync.getUncaughtExceptionHandler_info;
         const 0;
 },
 GHC.Conc.Sync.getUncaughtExceptionHandler_entry() //  []
         { []
         }
     {offset
       c9Omf: // global
           call GHC.Conc.Sync.getUncaughtExceptionHandler1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getUncaughtExceptionHandler_info" {
     GHC.Conc.Sync.getUncaughtExceptionHandler_info:
         const GHC.Conc.Sync.getUncaughtExceptionHandler_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const S9MdE_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.813041774 UTC

[section ""data" . GHC.Conc.Sync.reportError1_closure" {
     GHC.Conc.Sync.reportError1_closure:
         const GHC.Conc.Sync.reportError1_info;
         const 0;
 },
 GHC.Conc.Sync.reportError1_entry() //  [R2]
         { []
         }
     {offset
       c9Omt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Omu; else goto c9Omv;
       c9Omu: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.reportError1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Omv: // global
           I64[Sp - 16] = block_c9Omq_info;
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Omz; else goto c9Omr;
       u9Omz: // global
           call _c9Omq(R1) args: 0, res: 0, upd: 0;
       c9Omr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.reportError1_info" {
     GHC.Conc.Sync.reportError1_info:
         const GHC.Conc.Sync.reportError1_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const S9MdE_srt+272;
 },
 _c9Omq() //  [R1]
         { []
         }
     {offset
       c9Omq: // global
           R2 = P64[Sp + 8];
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Omq_info" {
     block_c9Omq_info:
         const _c9Omq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.818714349 UTC

[section ""data" . GHC.Conc.Sync.reportError_closure" {
     GHC.Conc.Sync.reportError_closure:
         const GHC.Conc.Sync.reportError_info;
         const 0;
 },
 GHC.Conc.Sync.reportError_entry() //  [R2]
         { []
         }
     {offset
       c9OmP: // global
           R2 = R2;
           call GHC.Conc.Sync.reportError1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.reportError_info" {
     GHC.Conc.Sync.reportError_info:
         const GHC.Conc.Sync.reportError_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9MdE_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.824370375 UTC

[section ""data" . GHC.Conc.Sync.sharedCAF1_closure" {
     GHC.Conc.Sync.sharedCAF1_closure:
         const GHC.Conc.Sync.sharedCAF1_info;
 },
 io_s9M4v_entry() //  [R1]
         { []
         }
     {offset
       c9Onf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ong; else goto c9Onh;
       c9Ong: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Onh: // global
           I64[Sp - 24] = block_c9On7_info;
           _s9M4p::P64 = P64[R1 + 7];
           _s9M4q::P64 = P64[R1 + 15];
           R1 = _s9M4p::P64;
           P64[Sp - 16] = _s9M4p::P64;
           P64[Sp - 8] = _s9M4q::P64;
           Sp = Sp - 24;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_s9M4v_info" {
     io_s9M4v_info:
         const io_s9M4v_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c9On7() //  [R1]
         { []
         }
     {offset
       c9On7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Onk; else goto c9Onj;
       c9Onk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Onj: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = R1;
           I64[Sp] = block_c9Ona_info;
           R2 = Hp - 7;
           _s9M4z::I64 = R1;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9M4z::I64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9On7_info" {
     block_c9On7_info:
         const _c9On7;
         const 2;
         const 30;
 },
 _c9Ona() //  [R1]
         { []
         }
     {offset
       c9Ona: // global
           I64[Sp] = block_c9Onc_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9Onx; else goto c9Ond;
       u9Onx: // global
           call _c9Onc(R1) args: 0, res: 0, upd: 0;
       c9Ond: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ona_info" {
     block_c9Ona_info:
         const _c9Ona;
         const 130;
         const 30;
 },
 _c9Onc() //  [R1]
         { []
         }
     {offset
       c9Onc: // global
           _s9M4z::I64 = I64[Sp + 16];
           _s9M4F::I64 = I64[R1 + 7];
           if (_s9M4z::I64 == _s9M4F::I64) goto c9Ont; else goto c9Ons;
       c9Ont: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Ons: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(_s9M4z::I64);
           R1 = _s9M4F::I64;
           Sp = Sp + 24;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Onc_info" {
     block_c9Onc_info:
         const _c9Onc;
         const 130;
         const 30;
 },
 GHC.Conc.Sync.sharedCAF1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9OnC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9OnD; else goto c9OnE;
       c9OnD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.sharedCAF1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9OnE: // global
           I64[Sp - 24] = block_c9On0_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.sharedCAF1_info" {
     GHC.Conc.Sync.sharedCAF1_info:
         const GHC.Conc.Sync.sharedCAF1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9On0() //  [R1]
         { []
         }
     {offset
       c9On0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9OnH; else goto c9OnG;
       c9OnH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9OnG: // global
           I64[Hp - 16] = io_s9M4v_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _c9On2::P64 = Hp - 15;
           if (R1 == 0) goto c9OnB; else goto c9OnA;
       c9OnB: // global
           R1 = _c9On2::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       c9OnA: // global
           R1 = _c9On2::P64;
           Sp = Sp + 24;
           call io_s9M4v_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9On0_info" {
     block_c9On0_info:
         const _c9On0;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.836004984 UTC

[section ""data" . GHC.Conc.Sync.sharedCAF_closure" {
     GHC.Conc.Sync.sharedCAF_closure:
         const GHC.Conc.Sync.sharedCAF_info;
 },
 GHC.Conc.Sync.sharedCAF_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Ooh: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.sharedCAF1_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.sharedCAF_info" {
     GHC.Conc.Sync.sharedCAF_info:
         const GHC.Conc.Sync.sharedCAF_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.847421625 UTC

[section ""data" . GHC.Conc.Sync.$wmodifyMVar__closure" {
     GHC.Conc.Sync.$wmodifyMVar__closure:
         const GHC.Conc.Sync.$wmodifyMVar__info;
 },
 sat_s9M54_entry() //  [R1]
         { []
         }
     {offset
       c9OoP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9OoQ; else goto c9OoR;
       c9OoQ: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OoR: // global
           I64[Sp - 24] = block_c9OoN_info;
           R2 = P64[R1 + 15];
           _s9M4Z::P64 = P64[R1 + 23];
           _s9M50::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9M4Z::P64;
           P64[Sp - 8] = _s9M50::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M54_info" {
     sat_s9M54_info:
         const sat_s9M54_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9OoN() //  []
         { []
         }
     {offset
       c9OoN: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OoN_info" {
     block_c9OoN_info:
         const _c9OoN;
         const 2;
         const 30;
 },
 sat_s9M55_entry() //  [R1, R2]
         { []
         }
     {offset
       c9OoT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9OoU; else goto c9OoV;
       c9OoU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9OoV: // global
           I64[Sp - 24] = block_c9OoD_info;
           _s9M4L::P64 = P64[R1 + 7];
           _s9M4U::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9M4L::P64;
           P64[Sp - 8] = _s9M4U::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9OoZ; else goto c9OoE;
       u9OoZ: // global
           call _c9OoD(R1) args: 0, res: 0, upd: 0;
       c9OoE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M55_info" {
     sat_s9M55_info:
         const sat_s9M55_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9OoD() //  [R1]
         { []
         }
     {offset
       c9OoD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9OoY; else goto c9OoX;
       c9OoY: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OoX: // global
           _s9M4Z::P64 = P64[R1 + 7];
           _s9M50::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9M54_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9M4Z::P64;
           P64[Hp] = _s9M50::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OoD_info" {
     block_c9OoD_info:
         const _c9OoD;
         const 2;
         const 30;
 },
 sat_s9M4W_entry() //  [R1]
         { []
         }
     {offset
       c9Op6: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M4W_info" {
     sat_s9M4W_info:
         const sat_s9M4W_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9M5n_entry() //  [R1]
         { []
         }
     {offset
       c9Opy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Opz; else goto c9OpA;
       c9Opz: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OpA: // global
           I64[Sp - 24] = block_c9Opw_info;
           R2 = P64[R1 + 15];
           _s9M5i::P64 = P64[R1 + 23];
           _s9M5j::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9M5i::P64;
           P64[Sp - 8] = _s9M5j::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M5n_info" {
     sat_s9M5n_info:
         const sat_s9M5n_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9Opw() //  []
         { []
         }
     {offset
       c9Opw: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Opw_info" {
     block_c9Opw_info:
         const _c9Opw;
         const 2;
         const 30;
 },
 sat_s9M5o_entry() //  [R1, R2]
         { []
         }
     {offset
       c9OpC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9OpD; else goto c9OpE;
       c9OpD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9OpE: // global
           I64[Sp - 24] = block_c9Opm_info;
           _s9M4L::P64 = P64[R1 + 7];
           _s9M5d::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9M4L::P64;
           P64[Sp - 8] = _s9M5d::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9OpI; else goto c9Opn;
       u9OpI: // global
           call _c9Opm(R1) args: 0, res: 0, upd: 0;
       c9Opn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M5o_info" {
     sat_s9M5o_info:
         const sat_s9M5o_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9Opm() //  [R1]
         { []
         }
     {offset
       c9Opm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9OpH; else goto c9OpG;
       c9OpH: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OpG: // global
           _s9M5i::P64 = P64[R1 + 7];
           _s9M5j::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9M5n_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9M5i::P64;
           P64[Hp] = _s9M5j::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Opm_info" {
     block_c9Opm_info:
         const _c9Opm;
         const 2;
         const 30;
 },
 sat_s9M5f_entry() //  [R1]
         { []
         }
     {offset
       c9OpP: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M5f_info" {
     sat_s9M5f_info:
         const sat_s9M5f_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9M5t_entry() //  [R1]
         { []
         }
     {offset
       c9OpW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9OpX; else goto c9OpY;
       c9OpX: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OpY: // global
           I64[Sp - 24] = block_c9Opf_info;
           _s9M4L::P64 = P64[R1 + 7];
           _s9M4M::P64 = P64[R1 + 15];
           R1 = _s9M4L::P64;
           P64[Sp - 16] = _s9M4L::P64;
           P64[Sp - 8] = _s9M4M::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M5t_info" {
     sat_s9M5t_info:
         const sat_s9M5t_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c9Opf() //  [R1]
         { []
         }
     {offset
       c9Opf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Oq1; else goto c9Oq0;
       c9Oq1: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Oq0: // global
           I64[Hp - 64] = sat_s9M5o_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9M5f_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9OpS_info;
           R2 = Hp - 63;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Opf_info" {
     block_c9Opf_info:
         const _c9Opf;
         const 2;
         const 30;
 },
 _c9OpS() //  [R1]
         { []
         }
     {offset
       c9OpS: // global
           I64[Sp + 16] = block_c9OpU_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OpS_info" {
     block_c9OpS_info:
         const _c9OpS;
         const 130;
         const 30;
 },
 _c9OpU() //  []
         { []
         }
     {offset
       c9OpU: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OpU_info" {
     block_c9OpU_info:
         const _c9OpU;
         const 0;
         const 30;
 },
 sat_s9M5G_entry() //  [R1]
         { []
         }
     {offset
       c9Oqo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Oqp; else goto c9Oqq;
       c9Oqp: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Oqq: // global
           I64[Sp - 24] = block_c9Oqm_info;
           R2 = P64[R1 + 15];
           _s9M5B::P64 = P64[R1 + 23];
           _s9M5C::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9M5B::P64;
           P64[Sp - 8] = _s9M5C::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M5G_info" {
     sat_s9M5G_info:
         const sat_s9M5G_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9Oqm() //  []
         { []
         }
     {offset
       c9Oqm: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oqm_info" {
     block_c9Oqm_info:
         const _c9Oqm;
         const 2;
         const 30;
 },
 sat_s9M5H_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Oqs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Oqt; else goto c9Oqu;
       c9Oqt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Oqu: // global
           I64[Sp - 24] = block_c9Oqc_info;
           _s9M4L::P64 = P64[R1 + 7];
           _s9M5w::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9M4L::P64;
           P64[Sp - 8] = _s9M5w::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Oqy; else goto c9Oqd;
       u9Oqy: // global
           call _c9Oqc(R1) args: 0, res: 0, upd: 0;
       c9Oqd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M5H_info" {
     sat_s9M5H_info:
         const sat_s9M5H_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9Oqc() //  [R1]
         { []
         }
     {offset
       c9Oqc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Oqx; else goto c9Oqw;
       c9Oqx: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Oqw: // global
           _s9M5B::P64 = P64[R1 + 7];
           _s9M5C::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9M5G_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9M5B::P64;
           P64[Hp] = _s9M5C::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oqc_info" {
     block_c9Oqc_info:
         const _c9Oqc;
         const 2;
         const 30;
 },
 sat_s9M5y_entry() //  [R1]
         { []
         }
     {offset
       c9OqF: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M5y_info" {
     sat_s9M5y_info:
         const sat_s9M5y_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Conc.Sync.$wmodifyMVar__entry() //  [R2, R3]
         { []
         }
     {offset
       c9OqM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9OqN; else goto c9OqO;
       c9OqN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$wmodifyMVar__closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9OqO: // global
           I64[Sp - 24] = block_c9Oos_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$wmodifyMVar__info" {
     GHC.Conc.Sync.$wmodifyMVar__info:
         const GHC.Conc.Sync.$wmodifyMVar__entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Oos() //  [R1]
         { []
         }
     {offset
       c9Oos: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9OqR; else goto c9OqQ;
       c9OqR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9OqQ: // global
           _s9M4L::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9OqK; else goto u9Ora;
       c9OqK: // global
           I64[Hp - 16] = sat_s9M5t_info;
           P64[Hp - 8] = _s9M4L::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9Ora: // global
           if (R1 == 1) goto c9OqL; else goto c9OqJ;
       c9OqL: // global
           Hp = Hp - 24;
           I64[Sp] = block_c9Oq5_info;
           R1 = _s9M4L::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       c9OqJ: // global
           Hp = Hp - 24;
           I64[Sp] = block_c9Oow_info;
           R1 = _s9M4L::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oos_info" {
     block_c9Oos_info:
         const _c9Oos;
         const 2;
         const 30;
 },
 _c9Oq5() //  [R1]
         { []
         }
     {offset
       c9Oq5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Or6; else goto c9Or5;
       c9Or6: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Or5: // global
           I64[Hp - 64] = sat_s9M5H_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9M5y_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9Or1_info;
           R2 = Hp - 63;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oq5_info" {
     block_c9Oq5_info:
         const _c9Oq5;
         const 2;
         const 30;
 },
 _c9Or1() //  [R1]
         { []
         }
     {offset
       c9Or1: // global
           I64[Sp + 16] = block_c9Or3_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Or1_info" {
     block_c9Or1_info:
         const _c9Or1;
         const 130;
         const 30;
 },
 _c9Oow() //  [R1]
         { []
         }
     {offset
       c9Oow: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9OqX; else goto c9OqW;
       c9OqX: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OqW: // global
           I64[Hp - 64] = sat_s9M55_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9M4W_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9OqS_info;
           R2 = Hp - 63;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oow_info" {
     block_c9Oow_info:
         const _c9Oow;
         const 2;
         const 30;
 },
 _c9OqS() //  [R1]
         { []
         }
     {offset
       c9OqS: // global
           I64[Sp + 16] = block_c9Or3_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OqS_info" {
     block_c9OqS_info:
         const _c9OqS;
         const 130;
         const 30;
 },
 _c9Or3() //  []
         { []
         }
     {offset
       c9Or3: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Or3_info" {
     block_c9Or3_info:
         const _c9Or3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.891650602 UTC

[section ""data" . GHC.Conc.Sync.modifyMVar_1_closure" {
     GHC.Conc.Sync.modifyMVar_1_closure:
         const GHC.Conc.Sync.modifyMVar_1_info;
 },
 GHC.Conc.Sync.modifyMVar_1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9OtA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OtB; else goto c9OtC;
       c9OtB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.modifyMVar_1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9OtC: // global
           I64[Sp - 16] = block_c9Otx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9OtG; else goto c9Oty;
       u9OtG: // global
           call _c9Otx(R1) args: 0, res: 0, upd: 0;
       c9Oty: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.modifyMVar_1_info" {
     GHC.Conc.Sync.modifyMVar_1_info:
         const GHC.Conc.Sync.modifyMVar_1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Otx() //  [R1]
         { []
         }
     {offset
       c9Otx: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Conc.Sync.$wmodifyMVar__entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Otx_info" {
     block_c9Otx_info:
         const _c9Otx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.897161899 UTC

[section ""data" . GHC.Conc.Sync.modifyMVar__closure" {
     GHC.Conc.Sync.modifyMVar__closure:
         const GHC.Conc.Sync.modifyMVar__info;
 },
 GHC.Conc.Sync.modifyMVar__entry() //  [R2, R3]
         { []
         }
     {offset
       c9OtV: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.modifyMVar_1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.modifyMVar__info" {
     GHC.Conc.Sync.modifyMVar__info:
         const GHC.Conc.Sync.modifyMVar__entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.908981733 UTC

[section ""data" . GHC.Conc.Sync.$wwithMVar_closure" {
     GHC.Conc.Sync.$wwithMVar_closure:
         const GHC.Conc.Sync.$wwithMVar_info;
 },
 sat_s9M6a_entry() //  [R1]
         { []
         }
     {offset
       c9Out: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ouu; else goto c9Ouv;
       c9Ouu: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ouv: // global
           I64[Sp - 24] = block_c9Our_info;
           R2 = P64[R1 + 15];
           _s9M65::P64 = P64[R1 + 23];
           _s9M66::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9M65::P64;
           P64[Sp - 8] = _s9M66::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M6a_info" {
     sat_s9M6a_info:
         const sat_s9M6a_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9Our() //  []
         { []
         }
     {offset
       c9Our: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Our_info" {
     block_c9Our_info:
         const _c9Our;
         const 2;
         const 30;
 },
 sat_s9M6b_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Oux: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ouy; else goto c9Ouz;
       c9Ouy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ouz: // global
           I64[Sp - 24] = block_c9Ouh_info;
           _s9M5R::P64 = P64[R1 + 7];
           _s9M60::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9M5R::P64;
           P64[Sp - 8] = _s9M60::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9OuD; else goto c9Oui;
       u9OuD: // global
           call _c9Ouh(R1) args: 0, res: 0, upd: 0;
       c9Oui: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M6b_info" {
     sat_s9M6b_info:
         const sat_s9M6b_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9Ouh() //  [R1]
         { []
         }
     {offset
       c9Ouh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9OuC; else goto c9OuB;
       c9OuC: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OuB: // global
           _s9M65::P64 = P64[R1 + 7];
           _s9M66::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9M6a_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9M65::P64;
           P64[Hp] = _s9M66::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ouh_info" {
     block_c9Ouh_info:
         const _c9Ouh;
         const 2;
         const 30;
 },
 sat_s9M62_entry() //  [R1]
         { []
         }
     {offset
       c9OuK: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M62_info" {
     sat_s9M62_info:
         const sat_s9M62_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9M6t_entry() //  [R1]
         { []
         }
     {offset
       c9Ovc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ovd; else goto c9Ove;
       c9Ovd: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ove: // global
           I64[Sp - 24] = block_c9Ova_info;
           R2 = P64[R1 + 15];
           _s9M6o::P64 = P64[R1 + 23];
           _s9M6p::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9M6o::P64;
           P64[Sp - 8] = _s9M6p::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M6t_info" {
     sat_s9M6t_info:
         const sat_s9M6t_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9Ova() //  []
         { []
         }
     {offset
       c9Ova: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ova_info" {
     block_c9Ova_info:
         const _c9Ova;
         const 2;
         const 30;
 },
 sat_s9M6u_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Ovg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ovh; else goto c9Ovi;
       c9Ovh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ovi: // global
           I64[Sp - 24] = block_c9Ov0_info;
           _s9M5R::P64 = P64[R1 + 7];
           _s9M6j::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9M5R::P64;
           P64[Sp - 8] = _s9M6j::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Ovm; else goto c9Ov1;
       u9Ovm: // global
           call _c9Ov0(R1) args: 0, res: 0, upd: 0;
       c9Ov1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M6u_info" {
     sat_s9M6u_info:
         const sat_s9M6u_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9Ov0() //  [R1]
         { []
         }
     {offset
       c9Ov0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Ovl; else goto c9Ovk;
       c9Ovl: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ovk: // global
           _s9M6o::P64 = P64[R1 + 7];
           _s9M6p::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9M6t_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9M6o::P64;
           P64[Hp] = _s9M6p::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ov0_info" {
     block_c9Ov0_info:
         const _c9Ov0;
         const 2;
         const 30;
 },
 sat_s9M6l_entry() //  [R1]
         { []
         }
     {offset
       c9Ovt: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M6l_info" {
     sat_s9M6l_info:
         const sat_s9M6l_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9M6z_entry() //  [R1]
         { []
         }
     {offset
       c9OvA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9OvB; else goto c9OvC;
       c9OvB: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OvC: // global
           I64[Sp - 24] = block_c9OuT_info;
           _s9M5R::P64 = P64[R1 + 7];
           _s9M5S::P64 = P64[R1 + 15];
           R1 = _s9M5R::P64;
           P64[Sp - 16] = _s9M5R::P64;
           P64[Sp - 8] = _s9M5S::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M6z_info" {
     sat_s9M6z_info:
         const sat_s9M6z_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c9OuT() //  [R1]
         { []
         }
     {offset
       c9OuT: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9OvF; else goto c9OvE;
       c9OvF: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OvE: // global
           I64[Hp - 64] = sat_s9M6u_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9M6l_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9Ovw_info;
           R2 = Hp - 63;
           _s9M6j::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9M6j::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OuT_info" {
     block_c9OuT_info:
         const _c9OuT;
         const 2;
         const 30;
 },
 _c9Ovw() //  [R1]
         { []
         }
     {offset
       c9Ovw: // global
           _s9M5R::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9Ovy_info;
           R2 = P64[Sp + 16];
           _s9M6x::P64 = R1;
           R1 = _s9M5R::P64;
           P64[Sp + 16] = _s9M6x::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ovw_info" {
     block_c9Ovw_info:
         const _c9Ovw;
         const 2;
         const 30;
 },
 _c9Ovy() //  []
         { []
         }
     {offset
       c9Ovy: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ovy_info" {
     block_c9Ovy_info:
         const _c9Ovy;
         const 1;
         const 30;
 },
 sat_s9M6M_entry() //  [R1]
         { []
         }
     {offset
       c9Ow2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ow3; else goto c9Ow4;
       c9Ow3: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ow4: // global
           I64[Sp - 24] = block_c9Ow0_info;
           R2 = P64[R1 + 15];
           _s9M6H::P64 = P64[R1 + 23];
           _s9M6I::P64 = P64[R1 + 31];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9M6H::P64;
           P64[Sp - 8] = _s9M6I::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M6M_info" {
     sat_s9M6M_info:
         const sat_s9M6M_entry;
         const 4;
         const 8;
         const 4294967299;
 },
 _c9Ow0() //  []
         { []
         }
     {offset
       c9Ow0: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ow0_info" {
     block_c9Ow0_info:
         const _c9Ow0;
         const 2;
         const 30;
 },
 sat_s9M6N_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Ow6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ow7; else goto c9Ow8;
       c9Ow7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ow8: // global
           I64[Sp - 24] = block_c9OvQ_info;
           _s9M5R::P64 = P64[R1 + 7];
           _s9M6C::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s9M5R::P64;
           P64[Sp - 8] = _s9M6C::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Owc; else goto c9OvR;
       u9Owc: // global
           call _c9OvQ(R1) args: 0, res: 0, upd: 0;
       c9OvR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M6N_info" {
     sat_s9M6N_info:
         const sat_s9M6N_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c9OvQ() //  [R1]
         { []
         }
     {offset
       c9OvQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Owb; else goto c9Owa;
       c9Owb: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Owa: // global
           _s9M6H::P64 = P64[R1 + 7];
           _s9M6I::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s9M6M_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s9M6H::P64;
           P64[Hp] = _s9M6I::P64;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OvQ_info" {
     block_c9OvQ_info:
         const _c9OvQ;
         const 2;
         const 30;
 },
 sat_s9M6E_entry() //  [R1]
         { []
         }
     {offset
       c9Owj: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M6E_info" {
     sat_s9M6E_info:
         const sat_s9M6E_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Conc.Sync.$wwithMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Owq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Owr; else goto c9Ows;
       c9Owr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.$wwithMVar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Ows: // global
           I64[Sp - 24] = block_c9Ou6_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$wwithMVar_info" {
     GHC.Conc.Sync.$wwithMVar_info:
         const GHC.Conc.Sync.$wwithMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Ou6() //  [R1]
         { []
         }
     {offset
       c9Ou6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Owv; else goto c9Owu;
       c9Owv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Owu: // global
           _s9M5R::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9Owo; else goto u9OwO;
       c9Owo: // global
           I64[Hp - 16] = sat_s9M6z_info;
           P64[Hp - 8] = _s9M5R::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9OwO: // global
           if (R1 == 1) goto c9Owp; else goto c9Own;
       c9Owp: // global
           Hp = Hp - 24;
           I64[Sp] = block_c9OvJ_info;
           R1 = _s9M5R::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       c9Own: // global
           Hp = Hp - 24;
           I64[Sp] = block_c9Oua_info;
           R1 = _s9M5R::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ou6_info" {
     block_c9Ou6_info:
         const _c9Ou6;
         const 2;
         const 30;
 },
 _c9OvJ() //  [R1]
         { []
         }
     {offset
       c9OvJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9OwK; else goto c9OwJ;
       c9OwK: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OwJ: // global
           I64[Hp - 64] = sat_s9M6N_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9M6E_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9OwF_info;
           R2 = Hp - 63;
           _s9M6C::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9M6C::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OvJ_info" {
     block_c9OvJ_info:
         const _c9OvJ;
         const 2;
         const 30;
 },
 _c9OwF() //  [R1]
         { []
         }
     {offset
       c9OwF: // global
           _s9M5R::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9OwH_info;
           R2 = P64[Sp + 16];
           _s9M6Q::P64 = R1;
           R1 = _s9M5R::P64;
           P64[Sp + 16] = _s9M6Q::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OwF_info" {
     block_c9OwF_info:
         const _c9OwF;
         const 2;
         const 30;
 },
 _c9OwH() //  []
         { []
         }
     {offset
       c9OwH: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OwH_info" {
     block_c9OwH_info:
         const _c9OwH;
         const 1;
         const 30;
 },
 _c9Oua() //  [R1]
         { []
         }
     {offset
       c9Oua: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9OwB; else goto c9OwA;
       c9OwB: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OwA: // global
           I64[Hp - 64] = sat_s9M6b_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9M62_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9Oww_info;
           R2 = Hp - 63;
           _s9M60::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9M60::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oua_info" {
     block_c9Oua_info:
         const _c9Oua;
         const 2;
         const 30;
 },
 _c9Oww() //  [R1]
         { []
         }
     {offset
       c9Oww: // global
           _s9M5R::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9Owy_info;
           R2 = P64[Sp + 16];
           _s9M6e::P64 = R1;
           R1 = _s9M5R::P64;
           P64[Sp + 16] = _s9M6e::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Oww_info" {
     block_c9Oww_info:
         const _c9Oww;
         const 2;
         const 30;
 },
 _c9Owy() //  []
         { []
         }
     {offset
       c9Owy: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Owy_info" {
     block_c9Owy_info:
         const _c9Owy;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.953827056 UTC

[section ""data" . GHC.Conc.Sync.withMVar1_closure" {
     GHC.Conc.Sync.withMVar1_closure:
         const GHC.Conc.Sync.withMVar1_info;
 },
 GHC.Conc.Sync.withMVar1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Ozg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ozh; else goto c9Ozi;
       c9Ozh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.withMVar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Ozi: // global
           I64[Sp - 16] = block_c9Ozd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Ozm; else goto c9Oze;
       u9Ozm: // global
           call _c9Ozd(R1) args: 0, res: 0, upd: 0;
       c9Oze: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.withMVar1_info" {
     GHC.Conc.Sync.withMVar1_info:
         const GHC.Conc.Sync.withMVar1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9Ozd() //  [R1]
         { []
         }
     {offset
       c9Ozd: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Conc.Sync.$wwithMVar_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ozd_info" {
     block_c9Ozd_info:
         const _c9Ozd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.958823803 UTC

[section ""data" . GHC.Conc.Sync.withMVar_closure" {
     GHC.Conc.Sync.withMVar_closure:
         const GHC.Conc.Sync.withMVar_info;
 },
 GHC.Conc.Sync.withMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       c9OzB: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.withMVar1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.withMVar_info" {
     GHC.Conc.Sync.withMVar_info:
         const GHC.Conc.Sync.withMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.962510618 UTC

[section ""data" . GHC.Conc.Sync.reportStackOverflow1_closure" {
     GHC.Conc.Sync.reportStackOverflow1_closure:
         const GHC.Conc.Sync.reportStackOverflow1_info;
 },
 GHC.Conc.Sync.reportStackOverflow1_entry() //  []
         { []
         }
     {offset
       c9OzO: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] reportStackOverflow(CurrentTSO);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.reportStackOverflow1_info" {
     GHC.Conc.Sync.reportStackOverflow1_info:
         const GHC.Conc.Sync.reportStackOverflow1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.965927148 UTC

[section ""data" . GHC.Conc.Sync.reportStackOverflow_closure" {
     GHC.Conc.Sync.reportStackOverflow_closure:
         const GHC.Conc.Sync.reportStackOverflow_info;
 },
 GHC.Conc.Sync.reportStackOverflow_entry() //  []
         { []
         }
     {offset
       c9OA1: // global
           call GHC.Conc.Sync.reportStackOverflow1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.reportStackOverflow_info" {
     GHC.Conc.Sync.reportStackOverflow_info:
         const GHC.Conc.Sync.reportStackOverflow_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:53.977121146 UTC

[section ""data" . GHC.Conc.Sync.forkIO2_closure" {
     GHC.Conc.Sync.forkIO2_closure:
         const GHC.Conc.Sync.forkIO2_info;
         const 0;
 },
 GHC.Conc.Sync.forkIO2_entry() //  [R2]
         { []
         }
     {offset
       c9OAc: // global
           R2 = R2;
           call GHC.Conc.Sync.childHandler1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkIO2_info" {
     GHC.Conc.Sync.forkIO2_info:
         const GHC.Conc.Sync.forkIO2_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9MdE_srt+304;
 },
 section ""data" . GHC.Conc.Sync.childHandler1_closure" {
     GHC.Conc.Sync.childHandler1_closure:
         const GHC.Conc.Sync.childHandler1_info;
         const 0;
 },
 sat_s9M7p_entry() //  [R1]
         { []
         }
     {offset
       c9OB7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OB8; else goto c9OB9;
       c9OB8: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OB9: // global
           I64[Sp - 16] = block_c9OB4_info;
           _s9M78::P64 = P64[R1 + 7];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 8] = _s9M78::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9OBd; else goto c9OB5;
       u9OBd: // global
           call _c9OB4(R1) args: 0, res: 0, upd: 0;
       c9OB5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M7p_info" {
     sat_s9M7p_info:
         const sat_s9M7p_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9MdE_srt+272;
 },
 _c9OB4() //  [R1]
         { []
         }
     {offset
       c9OB4: // global
           R2 = P64[Sp + 8];
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OB4_info" {
     block_c9OB4_info:
         const _c9OB4;
         const 1;
         const 30;
 },
 sat_s9M7B_entry() //  [R1]
         { []
         }
     {offset
       c9OBA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OBB; else goto c9OBC;
       c9OBB: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OBC: // global
           I64[Sp - 16] = block_c9OBx_info;
           _s9M78::P64 = P64[R1 + 7];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 8] = _s9M78::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9OBG; else goto c9OBy;
       u9OBG: // global
           call _c9OBx(R1) args: 0, res: 0, upd: 0;
       c9OBy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M7B_info" {
     sat_s9M7B_info:
         const sat_s9M7B_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9MdE_srt+272;
 },
 _c9OBx() //  [R1]
         { []
         }
     {offset
       c9OBx: // global
           R2 = P64[Sp + 8];
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OBx_info" {
     block_c9OBx_info:
         const _c9OBx;
         const 1;
         const 30;
 },
 sat_s9M7J_entry() //  [R1]
         { []
         }
     {offset
       c9OBV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OBW; else goto c9OBX;
       c9OBW: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OBX: // global
           I64[Sp - 16] = block_c9OBS_info;
           _s9M78::P64 = P64[R1 + 7];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 8] = _s9M78::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9OC1; else goto c9OBT;
       u9OC1: // global
           call _c9OBS(R1) args: 0, res: 0, upd: 0;
       c9OBT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M7J_info" {
     sat_s9M7J_info:
         const sat_s9M7J_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9MdE_srt+272;
 },
 _c9OBS() //  [R1]
         { []
         }
     {offset
       c9OBS: // global
           R2 = P64[Sp + 8];
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OBS_info" {
     block_c9OBS_info:
         const _c9OBS;
         const 1;
         const 30;
 },
 sat_s9M7U_entry() //  [R1]
         { []
         }
     {offset
       c9OC2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9OC3; else goto c9OC4;
       c9OC3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9OC4: // global
           I64[Sp - 8] = block_c9OAn_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9ODQ; else goto c9OAo;
       u9ODQ: // global
           call _c9OAn(R1) args: 0, res: 0, upd: 0;
       c9OAo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M7U_info" {
     sat_s9M7U_info:
         const sat_s9M7U_entry;
         const 1;
         const 528869387927568;
         const S9MdE_srt+208;
 },
 _c9OAn() //  [R1]
         { []
         }
     {offset
       c9OAn: // global
           I64[Sp - 24] = block_c9OAs_info;
           _s9M79::P64 = P64[R1 + 7];
           R2 = _s9M79::P64;
           P64[Sp - 16] = _s9M79::P64;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 24;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OAn_info" {
     block_c9OAn_info:
         const _c9OAn;
         const 0;
         const 528869387927582;
         const S9MdE_srt+208;
 },
 _c9OAs() //  [R1]
         { []
         }
     {offset
       c9OAs: // global
           I64[Sp] = block_c9OAw_info;
           R3 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OAs_info" {
     block_c9OAs_info:
         const _c9OAs;
         const 3;
         const 528869387927582;
         const S9MdE_srt+208;
 },
 _c9OAw() //  [R1]
         { []
         }
     {offset
       c9OAw: // global
           if (R1 & 7 == 1) goto c9OC9; else goto c9ODA;
       c9OC9: // global
           I64[Sp] = block_c9OAA_info;
           R2 = P64[Sp + 8];
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
       c9ODA: // global
           I64[Sp + 24] = block_c9ODy_info;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OAw_info" {
     block_c9OAw_info:
         const _c9OAw;
         const 3;
         const 388131899572254;
         const S9MdE_srt+208;
 },
 _c9OAA() //  [R1]
         { []
         }
     {offset
       c9OAA: // global
           I64[Sp] = block_c9OAE_info;
           R3 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OAA_info" {
     block_c9OAA_info:
         const _c9OAA;
         const 3;
         const 388131899572254;
         const S9MdE_srt+208;
 },
 _c9OAE() //  [R1]
         { []
         }
     {offset
       c9OAE: // global
           if (R1 & 7 == 1) goto c9OCd; else goto c9ODr;
       c9OCd: // global
           I64[Sp] = block_c9OAI_info;
           R2 = P64[Sp + 8];
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
       c9ODr: // global
           I64[Sp + 24] = block_c9ODp_info;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OAE_info" {
     block_c9OAE_info:
         const _c9OAE;
         const 3;
         const 106656922861598;
         const S9MdE_srt+208;
 },
 _c9OAI() //  [R1]
         { []
         }
     {offset
       c9OAI: // global
           I64[Sp] = block_c9OCe_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OAI_info" {
     block_c9OAI_info:
         const _c9OAI;
         const 3;
         const 106656922861598;
         const S9MdE_srt+208;
 },
 _c9OCe() //  [R1]
         { []
         }
     {offset
       c9OCe: // global
           if (R1 & 7 == 1) goto u9ODN; else goto c9OCV;
       u9ODN: // global
           Sp = Sp + 8;
           call _s9M7f() args: 0, res: 0, upd: 0;
       c9OCV: // global
           I64[Sp] = block_c9OCP_info;
           R1 = P64[Sp + 16];
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OCe_info" {
     block_c9OCe_info:
         const _c9OCe;
         const 3;
         const 106656922861598;
         const S9MdE_srt+208;
 },
 _c9OCP() //  [R1]
         { []
         }
     {offset
       c9OCP: // global
           I64[Sp - 8] = block_c9OCT_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OCP_info" {
     block_c9OCP_info:
         const _c9OCP;
         const 3;
         const 106656922861598;
         const S9MdE_srt+208;
 },
 _c9OCT() //  [R1]
         { []
         }
     {offset
       c9OCT: // global
           I64[Sp] = block_c9OD0_info;
           R3 = GHC.IO.Exception.$fExceptionAsyncException9_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OCT_info" {
     block_c9OCT_info:
         const _c9OCT;
         const 4;
         const 106656922861598;
         const S9MdE_srt+208;
 },
 _c9OD0() //  [R1]
         { []
         }
     {offset
       c9OD0: // global
           if (R1 & 7 == 1) goto u9ODO; else goto c9ODc;
       u9ODO: // global
           Sp = Sp + 16;
           call _s9M7f() args: 0, res: 0, upd: 0;
       c9ODc: // global
           _s9M7O::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9ODa_info;
           R1 = _s9M7O::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OD0_info" {
     block_c9OD0_info:
         const _c9OD0;
         const 4;
         const 106656922861598;
         const S9MdE_srt+208;
 },
 _c9ODa() //  [R1]
         { []
         }
     {offset
       c9ODa: // global
           if (R1 & 7 == 3) goto c9ODm; else goto u9ODP;
       c9ODm: // global
           R1 = GHC.Conc.Sync.always2_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u9ODP: // global
           Sp = Sp + 8;
           call _s9M7f() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9ODa_info" {
     block_c9ODa_info:
         const _c9ODa;
         const 3;
         const 106656922861598;
         const S9MdE_srt+208;
 },
 _s9M7f() //  []
         { []
         }
     {offset
       s9M7f: // global
           _s9M79::P64 = P64[Sp];
           I64[Sp] = block_c9OAR_info;
           R2 = _s9M79::P64;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9OAR() //  [R1]
         { []
         }
     {offset
       c9OAR: // global
           I64[Sp] = block_c9OAV_info;
           R3 = GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OAR_info" {
     block_c9OAR_info:
         const _c9OAR;
         const 2;
         const 106656922861598;
         const S9MdE_srt+208;
 },
 _c9OAV() //  [R1]
         { []
         }
     {offset
       c9OAV: // global
           if (R1 & 7 == 1) goto c9OCj; else goto c9OCo;
       c9OCj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OCm; else goto c9OCl;
       c9OCm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OCl: // global
           I64[Hp - 8] = sat_s9M7p_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9OCo: // global
           _s9M7a::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9OBg_info;
           R1 = _s9M7a::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OAV_info" {
     block_c9OAV_info:
         const _c9OAV;
         const 2;
         const 71472550772766;
         const S9MdE_srt+208;
 },
 _c9OBg() //  [R1]
         { []
         }
     {offset
       c9OBg: // global
           I64[Sp - 8] = block_c9OBk_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OBg_info" {
     block_c9OBg_info:
         const _c9OBg;
         const 1;
         const 71472550772766;
         const S9MdE_srt+208;
 },
 _c9OBk() //  [R1]
         { []
         }
     {offset
       c9OBk: // global
           I64[Sp] = block_c9OBo_info;
           R3 = GHC.IO.Exception.$fExceptionAsyncException9_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OBk_info" {
     block_c9OBk_info:
         const _c9OBk;
         const 2;
         const 71472550772766;
         const S9MdE_srt+208;
 },
 _c9OBo() //  [R1]
         { []
         }
     {offset
       c9OBo: // global
           if (R1 & 7 == 1) goto c9OCs; else goto c9OCx;
       c9OCs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OCv; else goto c9OCu;
       c9OCv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OCu: // global
           I64[Hp - 8] = sat_s9M7B_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9OCx: // global
           _s9M7s::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9OBJ_info;
           R1 = _s9M7s::P64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OBo_info" {
     block_c9OBo_info:
         const _c9OBo;
         const 2;
         const 4294967326;
         const S9MdE_srt+272;
 },
 _c9OBJ() //  [R1]
         { []
         }
     {offset
       c9OBJ: // global
           if (R1 & 7 == 1) goto c9OCG; else goto c9OCz;
       c9OCG: // global
           R1 = GHC.Conc.Sync.reportStackOverflow1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9OCz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OCC; else goto c9OCB;
       c9OCC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OCB: // global
           I64[Hp - 8] = sat_s9M7J_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OBJ_info" {
     block_c9OBJ_info:
         const _c9OBJ;
         const 1;
         const 4294967326;
         const S9MdE_srt+272;
 },
 _c9ODp() //  []
         { []
         }
     {offset
       c9ODp: // global
           R1 = GHC.Conc.Sync.always2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9ODp_info" {
     block_c9ODp_info:
         const _c9ODp;
         const 0;
         const 30;
 },
 _c9ODy() //  []
         { []
         }
     {offset
       c9ODy: // global
           R1 = GHC.Conc.Sync.always2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9ODy_info" {
     block_c9ODy_info:
         const _c9ODy;
         const 0;
         const 30;
 },
 GHC.Conc.Sync.childHandler1_entry() //  [R2]
         { []
         }
     {offset
       c9ODU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ODY; else goto c9ODX;
       c9ODY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Conc.Sync.childHandler1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9ODX: // global
           I64[Hp - 16] = sat_s9M7U_info;
           P64[Hp] = R2;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.childHandler1_info" {
     GHC.Conc.Sync.childHandler1_info:
         const GHC.Conc.Sync.childHandler1_entry;
         const 0;
         const 1109411527393294;
         const 8589934597;
         const S9MdE_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.022410359 UTC

[section ""data" . GHC.Conc.Sync.childHandler_closure" {
     GHC.Conc.Sync.childHandler_closure:
         const GHC.Conc.Sync.childHandler_info;
         const 0;
 },
 GHC.Conc.Sync.childHandler_entry() //  [R2]
         { []
         }
     {offset
       c9OGx: // global
           R2 = R2;
           call GHC.Conc.Sync.childHandler1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.childHandler_info" {
     GHC.Conc.Sync.childHandler_info:
         const GHC.Conc.Sync.childHandler_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9MdE_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.026744547 UTC

[section ""data" . GHC.Conc.Sync.forkOn1_closure" {
     GHC.Conc.Sync.forkOn1_closure:
         const GHC.Conc.Sync.forkOn1_info;
         const 0;
 },
 sat_s9M81_entry() //  [R1]
         { []
         }
     {offset
       c9OGS: // global
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = P64[R1 + 7];
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M81_info" {
     sat_s9M81_info:
         const sat_s9M81_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9MdE_srt+344;
 },
 GHC.Conc.Sync.forkOn1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9OGV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OGZ; else goto c9OH0;
       c9OGZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.forkOn1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9OH0: // global
           I64[Sp - 16] = block_c9OGI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9OH7; else goto c9OGJ;
       u9OH7: // global
           call _c9OGI(R1) args: 0, res: 0, upd: 0;
       c9OGJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkOn1_info" {
     GHC.Conc.Sync.forkOn1_info:
         const GHC.Conc.Sync.forkOn1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S9MdE_srt+344;
 },
 _c9OGI() //  [R1]
         { []
         }
     {offset
       c9OGI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OH3; else goto c9OH2;
       c9OH3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OH2: // global
           _s9M7Z::I64 = I64[R1 + 7];
           I64[Hp - 8] = sat_s9M81_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9OGW_info;
           R2 = Hp - 7;
           R1 = _s9M7Z::I64;
           Sp = Sp + 8;
           call stg_forkOn#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OGI_info" {
     block_c9OGI_info:
         const _c9OGI;
         const 1;
         const 4294967326;
         const S9MdE_srt+344;
 },
 _c9OGW() //  [R1]
         { []
         }
     {offset
       c9OGW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OH6; else goto c9OH5;
       c9OH6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OH5: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OGW_info" {
     block_c9OGW_info:
         const _c9OGW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.035295493 UTC

[section ""data" . GHC.Conc.Sync.forkOn_closure" {
     GHC.Conc.Sync.forkOn_closure:
         const GHC.Conc.Sync.forkOn_info;
         const 0;
 },
 GHC.Conc.Sync.forkOn_entry() //  [R2, R3]
         { []
         }
     {offset
       c9OHx: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.forkOn1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkOn_info" {
     GHC.Conc.Sync.forkOn_info:
         const GHC.Conc.Sync.forkOn_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S9MdE_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.04115398 UTC

[section ""data" . GHC.Conc.Sync.forkOnWithUnmask1_closure" {
     GHC.Conc.Sync.forkOnWithUnmask1_closure:
         const GHC.Conc.Sync.forkOnWithUnmask1_info;
         const 0;
 },
 sat_s9M8c_entry() //  [R2]
         { []
         }
     {offset
       c9OI1: // global
           R1 = R2;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M8c_info" {
     sat_s9M8c_info:
         const sat_s9M8c_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s9M8d_entry() //  [R1]
         { []
         }
     {offset
       c9OI4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OI8; else goto c9OI7;
       c9OI8: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9OI7: // global
           _s9M87::P64 = P64[R1 + 16];
           I64[Hp - 8] = sat_s9M8c_info;
           R2 = Hp - 6;
           R1 = _s9M87::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M8d_info" {
     sat_s9M8d_info:
         const sat_s9M8d_entry;
         const 1;
         const 16;
 },
 sat_s9M8e_entry() //  [R1]
         { []
         }
     {offset
       c9OI9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9OId; else goto c9OIc;
       c9OId: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OIc: // global
           _s9M87::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9M8d_info;
           P64[Hp] = _s9M87::P64;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M8e_info" {
     sat_s9M8e_info:
         const sat_s9M8e_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9MdE_srt+344;
 },
 GHC.Conc.Sync.forkOnWithUnmask1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9OIe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OIi; else goto c9OIj;
       c9OIi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Conc.Sync.forkOnWithUnmask1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9OIj: // global
           I64[Sp - 16] = block_c9OHI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9OIq; else goto c9OHJ;
       u9OIq: // global
           call _c9OHI(R1) args: 0, res: 0, upd: 0;
       c9OHJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkOnWithUnmask1_info" {
     GHC.Conc.Sync.forkOnWithUnmask1_info:
         const GHC.Conc.Sync.forkOnWithUnmask1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const S9MdE_srt+344;
 },
 _c9OHI() //  [R1]
         { []
         }
     {offset
       c9OHI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OIm; else goto c9OIl;
       c9OIm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OIl: // global
           _s9M8a::I64 = I64[R1 + 7];
           I64[Hp - 8] = sat_s9M8e_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9OIf_info;
           R2 = Hp - 7;
           R1 = _s9M8a::I64;
           Sp = Sp + 8;
           call stg_forkOn#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OHI_info" {
     block_c9OHI_info:
         const _c9OHI;
         const 1;
         const 4294967326;
         const S9MdE_srt+344;
 },
 _c9OIf() //  [R1]
         { []
         }
     {offset
       c9OIf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OIp; else goto c9OIo;
       c9OIp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OIo: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OIf_info" {
     block_c9OIf_info:
         const _c9OIf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.052780056 UTC

[section ""data" . GHC.Conc.Sync.forkOnWithUnmask_closure" {
     GHC.Conc.Sync.forkOnWithUnmask_closure:
         const GHC.Conc.Sync.forkOnWithUnmask_info;
         const 0;
 },
 GHC.Conc.Sync.forkOnWithUnmask_entry() //  [R2, R3]
         { []
         }
     {offset
       c9OIY: // global
           R3 = R3;
           R2 = R2;
           call GHC.Conc.Sync.forkOnWithUnmask1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkOnWithUnmask_info" {
     GHC.Conc.Sync.forkOnWithUnmask_info:
         const GHC.Conc.Sync.forkOnWithUnmask_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S9MdE_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.056858388 UTC

[section ""data" . GHC.Conc.Sync.forkIO1_closure" {
     GHC.Conc.Sync.forkIO1_closure:
         const GHC.Conc.Sync.forkIO1_info;
         const 0;
 },
 sat_s9M8m_entry() //  [R1]
         { []
         }
     {offset
       c9OJe: // global
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = P64[R1 + 7];
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M8m_info" {
     sat_s9M8m_info:
         const sat_s9M8m_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9MdE_srt+344;
 },
 GHC.Conc.Sync.forkIO1_entry() //  [R2]
         { []
         }
     {offset
       c9OJk: // global
           _s9M8j::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9OJl; else goto c9OJm;
       c9OJm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OJo; else goto c9OJn;
       c9OJo: // global
           HpAlloc = 16;
           goto c9OJl;
       c9OJl: // global
           R2 = _s9M8j::P64;
           R1 = GHC.Conc.Sync.forkIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9OJn: // global
           I64[Hp - 8] = sat_s9M8m_info;
           P64[Hp] = _s9M8j::P64;
           I64[Sp - 8] = block_c9OJh_info;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call stg_fork#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkIO1_info" {
     GHC.Conc.Sync.forkIO1_info:
         const GHC.Conc.Sync.forkIO1_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const S9MdE_srt+344;
 },
 _c9OJh() //  [R1]
         { []
         }
     {offset
       c9OJh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OJr; else goto c9OJq;
       c9OJr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OJq: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OJh_info" {
     block_c9OJh_info:
         const _c9OJh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.063492275 UTC

[section ""data" . GHC.Conc.Sync.forkIO_closure" {
     GHC.Conc.Sync.forkIO_closure:
         const GHC.Conc.Sync.forkIO_info;
         const 0;
 },
 GHC.Conc.Sync.forkIO_entry() //  [R2]
         { []
         }
     {offset
       c9OJL: // global
           R2 = R2;
           call GHC.Conc.Sync.forkIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkIO_info" {
     GHC.Conc.Sync.forkIO_info:
         const GHC.Conc.Sync.forkIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9MdE_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.068476511 UTC

[section ""data" . GHC.Conc.Sync.forkIOWithUnmask1_closure" {
     GHC.Conc.Sync.forkIOWithUnmask1_closure:
         const GHC.Conc.Sync.forkIOWithUnmask1_info;
         const 0;
 },
 sat_s9M8u_entry() //  [R2]
         { []
         }
     {offset
       c9OKa: // global
           R1 = R2;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M8u_info" {
     sat_s9M8u_info:
         const sat_s9M8u_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s9M8v_entry() //  [R1]
         { []
         }
     {offset
       c9OKd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OKh; else goto c9OKg;
       c9OKh: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9OKg: // global
           _s9M8r::P64 = P64[R1 + 16];
           I64[Hp - 8] = sat_s9M8u_info;
           R2 = Hp - 6;
           R1 = _s9M8r::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M8v_info" {
     sat_s9M8v_info:
         const sat_s9M8v_entry;
         const 1;
         const 16;
 },
 sat_s9M8w_entry() //  [R1]
         { []
         }
     {offset
       c9OKi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9OKm; else goto c9OKl;
       c9OKm: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OKl: // global
           _s9M8r::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s9M8v_info;
           P64[Hp] = _s9M8r::P64;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9M8w_info" {
     sat_s9M8w_info:
         const sat_s9M8w_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const S9MdE_srt+344;
 },
 GHC.Conc.Sync.forkIOWithUnmask1_entry() //  [R2]
         { []
         }
     {offset
       c9OKq: // global
           _s9M8r::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9OKr; else goto c9OKs;
       c9OKs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OKu; else goto c9OKt;
       c9OKu: // global
           HpAlloc = 16;
           goto c9OKr;
       c9OKr: // global
           R2 = _s9M8r::P64;
           R1 = GHC.Conc.Sync.forkIOWithUnmask1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9OKt: // global
           I64[Hp - 8] = sat_s9M8w_info;
           P64[Hp] = _s9M8r::P64;
           I64[Sp - 8] = block_c9OKn_info;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call stg_fork#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkIOWithUnmask1_info" {
     GHC.Conc.Sync.forkIOWithUnmask1_info:
         const GHC.Conc.Sync.forkIOWithUnmask1_entry;
         const 0;
         const 73014444046;
         const 8589934597;
         const S9MdE_srt+344;
 },
 _c9OKn() //  [R1]
         { []
         }
     {offset
       c9OKn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OKx; else goto c9OKw;
       c9OKx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9OKw: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OKn_info" {
     block_c9OKn_info:
         const _c9OKn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.078625106 UTC

[section ""data" . GHC.Conc.Sync.forkIOWithUnmask_closure" {
     GHC.Conc.Sync.forkIOWithUnmask_closure:
         const GHC.Conc.Sync.forkIOWithUnmask_info;
         const 0;
 },
 GHC.Conc.Sync.forkIOWithUnmask_entry() //  [R2]
         { []
         }
     {offset
       c9OKZ: // global
           R2 = R2;
           call GHC.Conc.Sync.forkIOWithUnmask1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.forkIOWithUnmask_info" {
     GHC.Conc.Sync.forkIOWithUnmask_info:
         const GHC.Conc.Sync.forkIOWithUnmask_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9MdE_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.081446498 UTC

[section ""cstring" . lvl11_r9Fvm_bytes" {
     lvl11_r9Fvm_bytes:
         I8[] [115,101,116,78,117,109,67,97,112,97,98,105,108,105,116,105,101,115,58,32,67,97,112,97,98,105,108,105,116,121,32,99,111,117,110,116,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.083043538 UTC

[section ""cstring" . lvl12_r9Fvn_bytes" {
     lvl12_r9Fvn_bytes:
         I8[] [41,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.085122469 UTC

[section ""data" . lvl13_r9Fvo_closure" {
     lvl13_r9Fvo_closure:
         const lvl13_r9Fvo_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r9Fvo_entry() //  [R1]
         { []
         }
     {offset
       c9OLe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OLf; else goto c9OLg;
       c9OLf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9OLg: // global
           (_c9OLb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9OLb::I64 == 0) goto c9OLd; else goto c9OLc;
       c9OLd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9OLc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9OLb::I64;
           R2 = lvl12_r9Fvn_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_r9Fvo_info" {
     lvl13_r9Fvo_info:
         const lvl13_r9Fvo_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.090471551 UTC

[section ""data" . GHC.Conc.Sync.$wlvl_closure" {
     GHC.Conc.Sync.$wlvl_closure:
         const GHC.Conc.Sync.$wlvl_info;
         const 0;
 },
 sat_s9M8H_entry() //  [R1]
         { []
         }
     {offset
       c9OLA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9OLB; else goto c9OLC;
       c9OLB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9OLC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9OLx_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9M8H_info" {
     sat_s9M8H_info:
         const sat_s9M8H_entry;
         const 4294967296;
         const 4294967313;
         const S9MdE_srt+384;
 },
 _c9OLx() //  [R1, R2]
         { []
         }
     {offset
       c9OLx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9OLF; else goto c9OLE;
       c9OLF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9OLE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = lvl13_r9Fvo_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9OLx_info" {
     block_c9OLx_info:
         const _c9OLx;
         const 0;
         const 4294967326;
         const S9MdE_srt+384;
 },
 GHC.Conc.Sync.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c9OLI: // global
           _s9M8B::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9OLJ; else goto c9OLK;
       c9OLK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9OLM; else goto c9OLL;
       c9OLM: // global
           HpAlloc = 24;
           goto c9OLJ;
       c9OLJ: // global
           R2 = _s9M8B::I64;
           R1 = GHC.Conc.Sync.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9OLL: // global
           I64[Hp - 16] = sat_s9M8H_info;
           I64[Hp] = _s9M8B::I64;
           I64[Sp - 8] = block_c9OLG_info;
           R3 = Hp - 16;
           R2 = lvl11_r9Fvm_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.$wlvl_info" {
     GHC.Conc.Sync.$wlvl_info:
         const GHC.Conc.Sync.$wlvl_entry;
         const 0;
         const 30064771086;
         const 8589934596;
         const S9MdE_srt+384;
 },
 _c9OLG() //  [R1]
         { []
         }
     {offset
       c9OLG: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OLG_info" {
     block_c9OLG_info:
         const _c9OLG;
         const 0;
         const 4294967326;
         const S9MdE_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.103020664 UTC

[section ""data" . GHC.Conc.Sync.setNumCapabilities2_closure" {
     GHC.Conc.Sync.setNumCapabilities2_closure:
         const GHC.Conc.Sync.setNumCapabilities2_info;
         const 0;
 },
 GHC.Conc.Sync.setNumCapabilities2_entry() //  [R2]
         { []
         }
     {offset
       c9OMi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9OMj; else goto c9OMk;
       c9OMj: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.setNumCapabilities2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9OMk: // global
           I64[Sp - 8] = block_c9OMf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9OMo; else goto c9OMg;
       u9OMo: // global
           call _c9OMf(R1) args: 0, res: 0, upd: 0;
       c9OMg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setNumCapabilities2_info" {
     GHC.Conc.Sync.setNumCapabilities2_info:
         const GHC.Conc.Sync.setNumCapabilities2_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S9MdE_srt+400;
 },
 _c9OMf() //  [R1]
         { []
         }
     {offset
       c9OMf: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Conc.Sync.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OMf_info" {
     block_c9OMf_info:
         const _c9OMf;
         const 0;
         const 4294967326;
         const S9MdE_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.109714772 UTC

[section ""data" . GHC.Conc.Sync.setNumCapabilities1_closure" {
     GHC.Conc.Sync.setNumCapabilities1_closure:
         const GHC.Conc.Sync.setNumCapabilities1_info;
         const 0;
 },
 GHC.Conc.Sync.setNumCapabilities1_entry() //  [R2]
         { []
         }
     {offset
       c9OMG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9OMH; else goto c9OMI;
       c9OMH: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.setNumCapabilities1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9OMI: // global
           I64[Sp - 8] = block_c9OMD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9ONd; else goto c9OME;
       u9ONd: // global
           call _c9OMD(R1) args: 0, res: 0, upd: 0;
       c9OME: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setNumCapabilities1_info" {
     GHC.Conc.Sync.setNumCapabilities1_info:
         const GHC.Conc.Sync.setNumCapabilities1_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const S9MdE_srt+400;
 },
 _c9OMD() //  [R1]
         { []
         }
     {offset
       c9OMD: // global
           _s9M8Q::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s9M8Q::I64, 0)) goto c9OMP; else goto c9ON2;
       c9OMP: // global
           I64[Sp] = block_c9OMZ_info;
           _u9ON5::P64 = CurrentTSO;
           I64[I64[_u9ON5::P64 + 24] + 16] = Sp;
           _u9ON6::I64 = CurrentNursery;
           P64[_u9ON6::I64 + 8] = Hp + 8;
           I64[_u9ON5::P64 + 104] = I64[_u9ON5::P64 + 104] - ((Hp + 8) - I64[_u9ON6::I64]);
           (_u9ON3::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] setNumCapabilities(%MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(_s9M8Q::I64)));
           (_u9ON4::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_u9ON3::I64);
           BaseReg = _u9ON4::I64;
           _u9ON7::P64 = CurrentTSO;
           _u9ON8::P64 = I64[_u9ON7::P64 + 24];
           Sp = I64[_u9ON8::P64 + 16];
           SpLim = _u9ON8::P64 + 192;
           HpAlloc = 0;
           _u9ON9::I64 = CurrentNursery;
           _u9ONa::I64 = I64[_u9ON9::I64 + 8];
           Hp = _u9ONa::I64 - 8;
           _u9ONb::I64 = I64[_u9ON9::I64];
           HpLim = _u9ONb::I64 + ((%MO_SS_Conv_W32_W64(I32[_u9ON9::I64 + 48]) << 12) - 1);
           I64[_u9ON7::P64 + 104] = I64[_u9ON7::P64 + 104] + (_u9ONa::I64 - _u9ONb::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
       c9ON2: // global
           R2 = _s9M8Q::I64;
           Sp = Sp + 8;
           call GHC.Conc.Sync.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OMD_info" {
     block_c9OMD_info:
         const _c9OMD;
         const 0;
         const 4294967326;
         const S9MdE_srt+400;
 },
 _c9OMZ() //  []
         { []
         }
     {offset
       c9OMZ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OMZ_info" {
     block_c9OMZ_info:
         const _c9OMZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.118320444 UTC

[section ""data" . GHC.Conc.Sync.setNumCapabilities_closure" {
     GHC.Conc.Sync.setNumCapabilities_closure:
         const GHC.Conc.Sync.setNumCapabilities_info;
         const 0;
 },
 GHC.Conc.Sync.setNumCapabilities_entry() //  [R2]
         { []
         }
     {offset
       c9ONN: // global
           R2 = R2;
           call GHC.Conc.Sync.setNumCapabilities1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setNumCapabilities_info" {
     GHC.Conc.Sync.setNumCapabilities_info:
         const GHC.Conc.Sync.setNumCapabilities_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S9MdE_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.121686996 UTC

[section ""data" . GHC.Conc.Sync.getNumCapabilities1_closure" {
     GHC.Conc.Sync.getNumCapabilities1_closure:
         const GHC.Conc.Sync.getNumCapabilities1_info;
 },
 GHC.Conc.Sync.getNumCapabilities1_entry() //  []
         { []
         }
     {offset
       c9ONZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OO3; else goto c9OO2;
       c9OO3: // global
           HpAlloc = 16;
           R1 = GHC.Conc.Sync.getNumCapabilities1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OO2: // global
           _s9M90::I64 = %MO_SS_Conv_W32_W64(I32[enabled_capabilities]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9M90::I64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getNumCapabilities1_info" {
     GHC.Conc.Sync.getNumCapabilities1_info:
         const GHC.Conc.Sync.getNumCapabilities1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.12512554 UTC

[section ""data" . GHC.Conc.Sync.getNumCapabilities_closure" {
     GHC.Conc.Sync.getNumCapabilities_closure:
         const GHC.Conc.Sync.getNumCapabilities_info;
 },
 GHC.Conc.Sync.getNumCapabilities_entry() //  []
         { []
         }
     {offset
       c9OOf: // global
           call GHC.Conc.Sync.getNumCapabilities1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getNumCapabilities_info" {
     GHC.Conc.Sync.getNumCapabilities_info:
         const GHC.Conc.Sync.getNumCapabilities_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.128902141 UTC

[section ""data" . GHC.Conc.Sync.numCapabilities1_closure" {
     GHC.Conc.Sync.numCapabilities1_closure:
         const GHC.Conc.Sync.numCapabilities1_info;
 },
 GHC.Conc.Sync.numCapabilities1_entry() //  []
         { []
         }
     {offset
       c9OOt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9OOu; else goto c9OOv;
       c9OOu: // global
           R1 = GHC.Conc.Sync.numCapabilities1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OOv: // global
           I64[Sp - 8] = block_c9OOq_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.numCapabilities1_info" {
     GHC.Conc.Sync.numCapabilities1_info:
         const GHC.Conc.Sync.numCapabilities1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c9OOq() //  []
         { []
         }
     {offset
       c9OOq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OOy; else goto c9OOx;
       c9OOy: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9OOx: // global
           _s9M96::I64 = %MO_SS_Conv_W32_W64(I32[enabled_capabilities]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9M96::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OOq_info" {
     block_c9OOq_info:
         const _c9OOq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.135005813 UTC

[section ""data" . GHC.Conc.Sync.numCapabilities_closure" {
     GHC.Conc.Sync.numCapabilities_closure:
         const GHC.Conc.Sync.numCapabilities_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Conc.Sync.numCapabilities_entry() //  [R1]
         { []
         }
     {offset
       c9OOT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9OOU; else goto c9OOV;
       c9OOU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9OOV: // global
           (_c9OOO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9OOO::I64 == 0) goto c9OOQ; else goto c9OOP;
       c9OOQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9OOP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9OOO::I64;
           I64[Sp - 24] = block_c9OOR_info;
           Sp = Sp - 24;
           call GHC.Conc.Sync.numCapabilities1_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.numCapabilities_info" {
     GHC.Conc.Sync.numCapabilities_info:
         const GHC.Conc.Sync.numCapabilities_entry;
         const 0;
         const 21;
 },
 _c9OOR() //  [R1]
         { []
         }
     {offset
       c9OOR: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9OOR_info" {
     block_c9OOR_info:
         const _c9OOR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.140321034 UTC

[section ""data" . GHC.Conc.Sync.disableAllocationLimit1_closure" {
     GHC.Conc.Sync.disableAllocationLimit1_closure:
         const GHC.Conc.Sync.disableAllocationLimit1_info;
 },
 GHC.Conc.Sync.disableAllocationLimit1_entry() //  []
         { []
         }
     {offset
       c9OPh: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] rts_disableThreadAllocationLimit(CurrentTSO);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.disableAllocationLimit1_info" {
     GHC.Conc.Sync.disableAllocationLimit1_info:
         const GHC.Conc.Sync.disableAllocationLimit1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.1435774 UTC

[section ""data" . GHC.Conc.Sync.disableAllocationLimit_closure" {
     GHC.Conc.Sync.disableAllocationLimit_closure:
         const GHC.Conc.Sync.disableAllocationLimit_info;
 },
 GHC.Conc.Sync.disableAllocationLimit_entry() //  []
         { []
         }
     {offset
       c9OPu: // global
           call GHC.Conc.Sync.disableAllocationLimit1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.disableAllocationLimit_info" {
     GHC.Conc.Sync.disableAllocationLimit_info:
         const GHC.Conc.Sync.disableAllocationLimit_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.147553613 UTC

[section ""data" . GHC.Conc.Sync.enableAllocationLimit1_closure" {
     GHC.Conc.Sync.enableAllocationLimit1_closure:
         const GHC.Conc.Sync.enableAllocationLimit1_info;
 },
 GHC.Conc.Sync.enableAllocationLimit1_entry() //  []
         { []
         }
     {offset
       c9OPH: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] rts_enableThreadAllocationLimit(CurrentTSO);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.enableAllocationLimit1_info" {
     GHC.Conc.Sync.enableAllocationLimit1_info:
         const GHC.Conc.Sync.enableAllocationLimit1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.150818867 UTC

[section ""data" . GHC.Conc.Sync.enableAllocationLimit_closure" {
     GHC.Conc.Sync.enableAllocationLimit_closure:
         const GHC.Conc.Sync.enableAllocationLimit_info;
 },
 GHC.Conc.Sync.enableAllocationLimit_entry() //  []
         { []
         }
     {offset
       c9OPU: // global
           call GHC.Conc.Sync.enableAllocationLimit1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.enableAllocationLimit_info" {
     GHC.Conc.Sync.enableAllocationLimit_info:
         const GHC.Conc.Sync.enableAllocationLimit_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.154202381 UTC

[section ""data" . GHC.Conc.Sync.getAllocationCounter1_closure" {
     GHC.Conc.Sync.getAllocationCounter1_closure:
         const GHC.Conc.Sync.getAllocationCounter1_info;
 },
 GHC.Conc.Sync.getAllocationCounter1_entry() //  []
         { []
         }
     {offset
       c9OQ8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9OQc; else goto c9OQb;
       c9OQc: // global
           HpAlloc = 16;
           R1 = GHC.Conc.Sync.getAllocationCounter1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9OQb: // global
           (_s9M9w::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] rts_getThreadAllocationCounter(CurrentTSO);
           I64[Hp - 8] = GHC.Int.I64#_con_info;
           I64[Hp] = _s9M9w::I64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getAllocationCounter1_info" {
     GHC.Conc.Sync.getAllocationCounter1_info:
         const GHC.Conc.Sync.getAllocationCounter1_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.157821339 UTC

[section ""data" . GHC.Conc.Sync.getAllocationCounter_closure" {
     GHC.Conc.Sync.getAllocationCounter_closure:
         const GHC.Conc.Sync.getAllocationCounter_info;
 },
 GHC.Conc.Sync.getAllocationCounter_entry() //  []
         { []
         }
     {offset
       c9OQn: // global
           call GHC.Conc.Sync.getAllocationCounter1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.getAllocationCounter_info" {
     GHC.Conc.Sync.getAllocationCounter_info:
         const GHC.Conc.Sync.getAllocationCounter_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.161843811 UTC

[section ""data" . GHC.Conc.Sync.setAllocationCounter1_closure" {
     GHC.Conc.Sync.setAllocationCounter1_closure:
         const GHC.Conc.Sync.setAllocationCounter1_info;
 },
 GHC.Conc.Sync.setAllocationCounter1_entry() //  [R2]
         { []
         }
     {offset
       c9OQB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9OQC; else goto c9OQD;
       c9OQC: // global
           R2 = R2;
           R1 = GHC.Conc.Sync.setAllocationCounter1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9OQD: // global
           I64[Sp - 16] = block_c9OQy_info;
           R1 = R2;
           I64[Sp - 8] = CurrentTSO;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9OQK; else goto c9OQz;
       u9OQK: // global
           call _c9OQy(R1) args: 0, res: 0, upd: 0;
       c9OQz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setAllocationCounter1_info" {
     GHC.Conc.Sync.setAllocationCounter1_info:
         const GHC.Conc.Sync.setAllocationCounter1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9OQy() //  [R1]
         { []
         }
     {offset
       c9OQy: // global
           call "ccall" arg hints:  [PtrHint,
                                     ‘signed’]  result hints:  [] rts_setThreadAllocationCounter(P64[Sp + 8], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9OQy_info" {
     block_c9OQy_info:
         const _c9OQy;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.166966899 UTC

[section ""data" . GHC.Conc.Sync.setAllocationCounter_closure" {
     GHC.Conc.Sync.setAllocationCounter_closure:
         const GHC.Conc.Sync.setAllocationCounter_info;
 },
 GHC.Conc.Sync.setAllocationCounter_entry() //  [R2]
         { []
         }
     {offset
       c9OR2: // global
           R2 = R2;
           call GHC.Conc.Sync.setAllocationCounter1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.setAllocationCounter_info" {
     GHC.Conc.Sync.setAllocationCounter_info:
         const GHC.Conc.Sync.setAllocationCounter_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.170288533 UTC

[section ""data" . GHC.Conc.Sync.TVar_closure" {
     GHC.Conc.Sync.TVar_closure:
         const GHC.Conc.Sync.TVar_info;
 },
 GHC.Conc.Sync.TVar_entry() //  [R2]
         { []
         }
     {offset
       c9ORe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9ORi; else goto c9ORh;
       c9ORi: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Conc.Sync.TVar_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9ORh: // global
           I64[Hp - 8] = GHC.Conc.Sync.TVar_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.TVar_info" {
     GHC.Conc.Sync.TVar_info:
         const GHC.Conc.Sync.TVar_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.173559183 UTC

[section ""data" . GHC.Conc.Sync.ThreadRunning_closure" {
     GHC.Conc.Sync.ThreadRunning_closure:
         const GHC.Conc.Sync.ThreadRunning_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.175100836 UTC

[section ""data" . GHC.Conc.Sync.ThreadFinished_closure" {
     GHC.Conc.Sync.ThreadFinished_closure:
         const GHC.Conc.Sync.ThreadFinished_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.178180869 UTC

[section ""data" . GHC.Conc.Sync.ThreadBlocked_closure" {
     GHC.Conc.Sync.ThreadBlocked_closure:
         const GHC.Conc.Sync.ThreadBlocked_info;
 },
 GHC.Conc.Sync.ThreadBlocked_entry() //  [R2]
         { []
         }
     {offset
       c9ORw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9ORA; else goto c9ORz;
       c9ORA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Conc.Sync.ThreadBlocked_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9ORz: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadBlocked_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadBlocked_info" {
     GHC.Conc.Sync.ThreadBlocked_info:
         const GHC.Conc.Sync.ThreadBlocked_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.181416745 UTC

[section ""data" . GHC.Conc.Sync.ThreadDied_closure" {
     GHC.Conc.Sync.ThreadDied_closure:
         const GHC.Conc.Sync.ThreadDied_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.183006344 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnMVar_closure" {
     GHC.Conc.Sync.BlockedOnMVar_closure:
         const GHC.Conc.Sync.BlockedOnMVar_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.184558739 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnBlackHole_closure" {
     GHC.Conc.Sync.BlockedOnBlackHole_closure:
         const GHC.Conc.Sync.BlockedOnBlackHole_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.18617098 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnException_closure" {
     GHC.Conc.Sync.BlockedOnException_closure:
         const GHC.Conc.Sync.BlockedOnException_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.187719685 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnSTM_closure" {
     GHC.Conc.Sync.BlockedOnSTM_closure:
         const GHC.Conc.Sync.BlockedOnSTM_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.189800428 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnForeignCall_closure" {
     GHC.Conc.Sync.BlockedOnForeignCall_closure:
         const GHC.Conc.Sync.BlockedOnForeignCall_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.191330072 UTC

[section ""data" . GHC.Conc.Sync.BlockedOnOther_closure" {
     GHC.Conc.Sync.BlockedOnOther_closure:
         const GHC.Conc.Sync.BlockedOnOther_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.193590933 UTC

[section ""data" . GHC.Conc.Sync.ThreadId_closure" {
     GHC.Conc.Sync.ThreadId_closure:
         const GHC.Conc.Sync.ThreadId_info;
 },
 GHC.Conc.Sync.ThreadId_entry() //  [R2]
         { []
         }
     {offset
       c9ORT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9ORX; else goto c9ORW;
       c9ORX: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Conc.Sync.ThreadId_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9ORW: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadId_info" {
     GHC.Conc.Sync.ThreadId_info:
         const GHC.Conc.Sync.ThreadId_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.196907151 UTC

[section ""cstring" . i9OS5_str" {
     i9OS5_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,86,97,114]
 },
 GHC.Conc.Sync.TVar_con_entry() //  [R1]
         { []
         }
     {offset
       c9OS4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.TVar_con_info" {
     GHC.Conc.Sync.TVar_con_info:
         const GHC.Conc.Sync.TVar_con_entry;
         const 1;
         const 2;
         const i9OS5_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.199952486 UTC

[section ""cstring" . i9OSc_str" {
     i9OSc_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,104,114,101,97,100,82,117,110,110,105,110,103]
 },
 GHC.Conc.Sync.ThreadRunning_con_entry() //  [R1]
         { []
         }
     {offset
       c9OSb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadRunning_con_info" {
     GHC.Conc.Sync.ThreadRunning_con_info:
         const GHC.Conc.Sync.ThreadRunning_con_entry;
         const 4294967296;
         const 3;
         const i9OSc_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.203979422 UTC

[section ""cstring" . i9OSj_str" {
     i9OSj_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,104,114,101,97,100,70,105,110,105,115,104,101,100]
 },
 GHC.Conc.Sync.ThreadFinished_con_entry() //  [R1]
         { []
         }
     {offset
       c9OSi: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadFinished_con_info" {
     GHC.Conc.Sync.ThreadFinished_con_info:
         const GHC.Conc.Sync.ThreadFinished_con_entry;
         const 4294967296;
         const 4294967299;
         const i9OSj_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.207064746 UTC

[section ""cstring" . i9OSq_str" {
     i9OSq_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,104,114,101,97,100,66,108,111,99,107,101,100]
 },
 GHC.Conc.Sync.ThreadBlocked_con_entry() //  [R1]
         { []
         }
     {offset
       c9OSp: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadBlocked_con_info" {
     GHC.Conc.Sync.ThreadBlocked_con_info:
         const GHC.Conc.Sync.ThreadBlocked_con_entry;
         const 1;
         const 8589934594;
         const i9OSq_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.210135839 UTC

[section ""cstring" . i9OSx_str" {
     i9OSx_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,104,114,101,97,100,68,105,101,100]
 },
 GHC.Conc.Sync.ThreadDied_con_entry() //  [R1]
         { []
         }
     {offset
       c9OSw: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadDied_con_info" {
     GHC.Conc.Sync.ThreadDied_con_info:
         const GHC.Conc.Sync.ThreadDied_con_entry;
         const 4294967296;
         const 12884901891;
         const i9OSx_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.213157905 UTC

[section ""relreadonly" . GHC.Conc.Sync.BlockReason_closure_tbl" {
     GHC.Conc.Sync.BlockReason_closure_tbl:
         const GHC.Conc.Sync.BlockedOnMVar_closure+1;
         const GHC.Conc.Sync.BlockedOnBlackHole_closure+2;
         const GHC.Conc.Sync.BlockedOnException_closure+3;
         const GHC.Conc.Sync.BlockedOnSTM_closure+4;
         const GHC.Conc.Sync.BlockedOnForeignCall_closure+5;
         const GHC.Conc.Sync.BlockedOnOther_closure+6;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.215359769 UTC

[section ""cstring" . i9OSF_str" {
     i9OSF_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,77,86,97,114]
 },
 GHC.Conc.Sync.BlockedOnMVar_con_entry() //  [R1]
         { []
         }
     {offset
       c9OSE: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnMVar_con_info" {
     GHC.Conc.Sync.BlockedOnMVar_con_info:
         const GHC.Conc.Sync.BlockedOnMVar_con_entry;
         const 4294967296;
         const 3;
         const i9OSF_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.218514224 UTC

[section ""cstring" . i9OSM_str" {
     i9OSM_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,66,108,97,99,107,72,111,108,101]
 },
 GHC.Conc.Sync.BlockedOnBlackHole_con_entry() //  [R1]
         { []
         }
     {offset
       c9OSL: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnBlackHole_con_info" {
     GHC.Conc.Sync.BlockedOnBlackHole_con_info:
         const GHC.Conc.Sync.BlockedOnBlackHole_con_entry;
         const 4294967296;
         const 4294967299;
         const i9OSM_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.221592138 UTC

[section ""cstring" . i9OST_str" {
     i9OST_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,69,120,99,101,112,116,105,111,110]
 },
 GHC.Conc.Sync.BlockedOnException_con_entry() //  [R1]
         { []
         }
     {offset
       c9OSS: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnException_con_info" {
     GHC.Conc.Sync.BlockedOnException_con_info:
         const GHC.Conc.Sync.BlockedOnException_con_entry;
         const 4294967296;
         const 8589934595;
         const i9OST_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.224633645 UTC

[section ""cstring" . i9OT0_str" {
     i9OT0_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,83,84,77]
 },
 GHC.Conc.Sync.BlockedOnSTM_con_entry() //  [R1]
         { []
         }
     {offset
       c9OSZ: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnSTM_con_info" {
     GHC.Conc.Sync.BlockedOnSTM_con_info:
         const GHC.Conc.Sync.BlockedOnSTM_con_entry;
         const 4294967296;
         const 12884901891;
         const i9OT0_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.228039443 UTC

[section ""cstring" . i9OT7_str" {
     i9OT7_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,70,111,114,101,105,103,110,67,97,108,108]
 },
 GHC.Conc.Sync.BlockedOnForeignCall_con_entry() //  [R1]
         { []
         }
     {offset
       c9OT6: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnForeignCall_con_info" {
     GHC.Conc.Sync.BlockedOnForeignCall_con_info:
         const GHC.Conc.Sync.BlockedOnForeignCall_con_entry;
         const 4294967296;
         const 17179869187;
         const i9OT7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.231716332 UTC

[section ""cstring" . i9OTe_str" {
     i9OTe_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,66,108,111,99,107,101,100,79,110,79,116,104,101,114]
 },
 GHC.Conc.Sync.BlockedOnOther_con_entry() //  [R1]
         { []
         }
     {offset
       c9OTd: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.BlockedOnOther_con_info" {
     GHC.Conc.Sync.BlockedOnOther_con_info:
         const GHC.Conc.Sync.BlockedOnOther_con_entry;
         const 4294967296;
         const 21474836483;
         const i9OTe_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.234856122 UTC

[section ""cstring" . i9OTl_str" {
     i9OTl_str:
         I8[] [98,97,115,101,58,71,72,67,46,67,111,110,99,46,83,121,110,99,46,84,104,114,101,97,100,73,100]
 },
 GHC.Conc.Sync.ThreadId_con_entry() //  [R1]
         { []
         }
     {offset
       c9OTk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Conc.Sync.ThreadId_con_info" {
     GHC.Conc.Sync.ThreadId_con_info:
         const GHC.Conc.Sync.ThreadId_con_entry;
         const 1;
         const 2;
         const i9OTl_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:54.238465944 UTC

[section ""relreadonly" . S9MdE_srt" {
     S9MdE_srt:
         const GHC.Conc.Sync.$w$cshowsPrec_closure;
         const GHC.Conc.Sync.$fShowBlockReason1_closure;
         const GHC.Conc.Sync.$fShowBlockReason3_closure;
         const GHC.Conc.Sync.$fShowBlockReason5_closure;
         const GHC.Conc.Sync.$fShowBlockReason7_closure;
         const GHC.Conc.Sync.$fShowBlockReason9_closure;
         const GHC.Conc.Sync.$fShowBlockReason11_closure;
         const GHC.Conc.Sync.$fShowBlockReason_$cshow_closure;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const GHC.Conc.Sync.labelThread1_closure;
         const GHC.Conc.Sync.$fShowThreadStatus5_closure;
         const GHC.Conc.Sync.$fShowThreadStatus_$cshowsPrec_closure;
         const GHC.Conc.Sync.$fShowThreadStatus3_closure;
         const GHC.Conc.Sync.$fShowThreadStatus7_closure;
         const GHC.Conc.Sync.$fShowThreadStatus9_closure;
         const GHC.Conc.Sync.$fShowThreadStatus_$cshow_closure;
         const GHC.Conc.Sync.$fShowThreadStatus1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure;
         const GHC.Conc.Sync.killThread1_closure;
         const GHC.Conc.Sync.killThread2_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Conc.Sync.always3_closure;
         const GHC.Conc.Sync.always1_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.IO.Handle.hFlush_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const lvl3_r9Fve_closure;
         const lvl4_r9Fvf_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const lvl6_r9Fvh_closure;
         const lvl8_r9Fvj_closure;
         const lvl9_r9Fvk_closure;
         const lvl10_r9Fvl_closure;
         const GHC.Conc.Sync.uncaughtExceptionHandler_closure;
         const GHC.Conc.Sync.setUncaughtExceptionHandler1_closure;
         const GHC.Conc.Sync.getUncaughtExceptionHandler1_closure;
         const GHC.Conc.Sync.reportError1_closure;
         const GHC.Conc.Sync.childHandler1_closure;
         const GHC.IO.Exception.$fExceptionAllocationLimitExceeded6_closure;
         const GHC.IO.Exception.$fExceptionAsyncException9_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnSTM3_closure;
         const GHC.Conc.Sync.forkIO2_closure;
         const GHC.Conc.Sync.forkOn1_closure;
         const GHC.Conc.Sync.forkOnWithUnmask1_closure;
         const GHC.Conc.Sync.forkIO1_closure;
         const GHC.Conc.Sync.forkIOWithUnmask1_closure;
         const lvl13_r9Fvo_closure;
         const GHC.IO.failIO1_closure;
         const GHC.Conc.Sync.$wlvl_closure;
         const GHC.Conc.Sync.setNumCapabilities2_closure;
         const GHC.Conc.Sync.setNumCapabilities1_closure;
 }]

