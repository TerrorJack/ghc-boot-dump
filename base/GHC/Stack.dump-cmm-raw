
==================== Raw Cmm ====================
2018-03-16 16:05:05.134002083 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:05.136365818 UTC

[section ""data" . GHC.Stack.errorWithStackTrace1_closure" {
     GHC.Stack.errorWithStackTrace1_closure:
         const GHC.Stack.errorWithStackTrace1_info;
         const 0;
 },
 sat_sa3mE_entry() //  [R1]
         { []
         }
     {offset
       ca3tr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca3ts; else goto ca3tt;
       ca3ts: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3tt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.CCS.renderStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa3mE_info" {
     sat_sa3mE_info:
         const sat_sa3mE_entry;
         const 1;
         const 4294967312;
         const Sa3nK_srt;
 },
 sat_sa3mG_entry() //  [R1]
         { []
         }
     {offset
       ca3tv: // global
           _sa3mG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ca3tw; else goto ca3tx;
       ca3tx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ca3tz; else goto ca3ty;
       ca3tz: // global
           HpAlloc = 48;
           goto ca3tw;
       ca3tw: // global
           R1 = _sa3mG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3ty: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sa3mG::P64;
           _sa3mB::P64 = P64[_sa3mG::P64 + 16];
           _sa3mC::P64 = P64[_sa3mG::P64 + 24];
           I64[Hp - 40] = sat_sa3mE_info;
           P64[Hp - 24] = _sa3mB::P64;
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = _sa3mC::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa3mG_info" {
     sat_sa3mG_info:
         const sat_sa3mG_entry;
         const 2;
         const 12884901906;
         const Sa3nK_srt;
 },
 GHC.Stack.errorWithStackTrace1_entry() //  [R2, R3]
         { []
         }
     {offset
       ca3tA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ca3tE; else goto ca3tD;
       ca3tE: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.errorWithStackTrace1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ca3tD: // global
           I64[Hp - 24] = sat_sa3mG_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.errorWithStackTrace1_info" {
     GHC.Stack.errorWithStackTrace1_info:
         const GHC.Stack.errorWithStackTrace1_entry;
         const 0;
         const 30064771086;
         const 12884901903;
         const Sa3nK_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.144374275 UTC

[section ""data" . GHC.Stack.errorWithStackTrace2_closure" {
     GHC.Stack.errorWithStackTrace2_closure:
         const GHC.Stack.errorWithStackTrace2_info;
         const 0;
 },
 sat_sa3mJ_entry() //  [R1]
         { []
         }
     {offset
       ca3u4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca3u5; else goto ca3u6;
       ca3u5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3u6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Exception.$bErrorCall_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa3mJ_info" {
     sat_sa3mJ_info:
         const sat_sa3mJ_entry;
         const 1;
         const 16;
 },
 sat_sa3mK_entry() //  [R1]
         { []
         }
     {offset
       ca3u7: // global
           _sa3mK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ca3u8; else goto ca3u9;
       ca3u9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ca3ub; else goto ca3ua;
       ca3ub: // global
           HpAlloc = 24;
           goto ca3u8;
       ca3u8: // global
           R1 = _sa3mK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3ua: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sa3mK::P64;
           _sa3mH::P64 = P64[_sa3mK::P64 + 16];
           I64[Hp - 16] = sat_sa3mJ_info;
           P64[Hp] = _sa3mH::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa3mK_info" {
     sat_sa3mK_info:
         const sat_sa3mK_entry;
         const 1;
         const 4294967312;
         const Sa3nK_srt+8;
 },
 GHC.Stack.errorWithStackTrace2_entry() //  [R2]
         { []
         }
     {offset
       ca3uc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ca3ug; else goto ca3uf;
       ca3ug: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Stack.errorWithStackTrace2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca3uf: // global
           I64[Hp - 16] = sat_sa3mK_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.errorWithStackTrace2_info" {
     GHC.Stack.errorWithStackTrace2_info:
         const GHC.Stack.errorWithStackTrace2_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const Sa3nK_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.15210987 UTC

[section ""data" . GHC.Stack.errorWithStackTrace_closure" {
     GHC.Stack.errorWithStackTrace_closure:
         const GHC.Stack.errorWithStackTrace_info;
         const 0;
 },
 GHC.Stack.errorWithStackTrace_entry() //  [R2]
         { []
         }
     {offset
       ca3uJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca3uK; else goto ca3uL;
       ca3uK: // global
           R2 = R2;
           R1 = GHC.Stack.errorWithStackTrace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca3uL: // global
           I64[Sp - 16] = block_ca3ux_info;
           R3 = GHC.Types.[]_closure+1;
           _sa3mL::P64 = R2;
           R2 = CCCS;
           P64[Sp - 8] = _sa3mL::P64;
           Sp = Sp - 16;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.errorWithStackTrace_info" {
     GHC.Stack.errorWithStackTrace_info:
         const GHC.Stack.errorWithStackTrace_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const Sa3nK_srt+16;
 },
 _ca3ux() //  [R1]
         { []
         }
     {offset
       ca3ux: // global
           I64[Sp] = block_ca3uz_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ua3uW; else goto ca3uA;
       ua3uW: // global
           call _ca3uz(R1) args: 0, res: 0, upd: 0;
       ca3uA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca3ux_info" {
     block_ca3ux_info:
         const _ca3ux;
         const 1;
         const 12884901918;
         const Sa3nK_srt+16;
 },
 _ca3uz() //  [R1]
         { []
         }
     {offset
       ca3uz: // global
           _sa3mL::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ca3uD; else goto ca3uE;
       ca3uD: // global
           I64[Sp + 8] = block_ca3uT_info;
           R2 = _sa3mL::P64;
           Sp = Sp + 8;
           call GHC.Stack.errorWithStackTrace2_entry(R2) args: 8, res: 8, upd: 8;
       ca3uE: // global
           I64[Sp + 8] = block_ca3uT_info;
           R3 = _sa3mL::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Stack.errorWithStackTrace1_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca3uz_info" {
     block_ca3uz_info:
         const _ca3uz;
         const 1;
         const 12884901918;
         const Sa3nK_srt+16;
 },
 _ca3uT() //  [R1]
         { []
         }
     {offset
       ca3uT: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca3uT_info" {
     block_ca3uT_info:
         const _ca3uT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.159915055 UTC

[section ""cstring" . lvl_ra3mz_bytes" {
     lvl_ra3mz_bytes:
         I8[] [112,111,112,67,97,108,108,83,116,97,99,107,58,32,101,109,112,116,121,32,115,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.162463949 UTC

[section ""data" . GHC.Stack.withFrozenCallStack1_closure" {
     GHC.Stack.withFrozenCallStack1_closure:
         const GHC.Stack.withFrozenCallStack1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stack.withFrozenCallStack1_entry() //  [R1]
         { []
         }
     {offset
       ca3vn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ca3vo; else goto ca3vp;
       ca3vo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3vp: // global
           (_ca3vi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ca3vi::I64 == 0) goto ca3vk; else goto ca3vj;
       ca3vk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ca3vj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ca3vi::I64;
           I64[Sp - 24] = block_ca3vl_info;
           R2 = lvl_ra3mz_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stack.withFrozenCallStack1_info" {
     GHC.Stack.withFrozenCallStack1_info:
         const GHC.Stack.withFrozenCallStack1_entry;
         const 0;
         const 4294967317;
         const Sa3nK_srt+48;
 },
 _ca3vl() //  [R1]
         { []
         }
     {offset
       ca3vl: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ca3vl_info" {
     block_ca3vl_info:
         const _ca3vl;
         const 0;
         const 4294967326;
         const Sa3nK_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.168047674 UTC

[section ""data" . GHC.Stack.popCallStack_closure" {
     GHC.Stack.popCallStack_closure:
         const GHC.Stack.popCallStack_info;
         const 0;
 },
 GHC.Stack.popCallStack_entry() //  [R2]
         { []
         }
     {offset
       ca3vP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca3vQ; else goto ca3vR;
       ca3vQ: // global
           R2 = R2;
           R1 = GHC.Stack.popCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca3vR: // global
           I64[Sp - 8] = block_ca3vH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua3w2; else goto ca3vI;
       ua3w2: // global
           call _ca3vH(R1) args: 0, res: 0, upd: 0;
       ca3vI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.popCallStack_info" {
     GHC.Stack.popCallStack_info:
         const GHC.Stack.popCallStack_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sa3nK_srt+56;
 },
 _ca3vH() //  [R1]
         { []
         }
     {offset
       ca3vH: // global
           _ca3vO::P64 = R1 & 7;
           if (_ca3vO::P64 < 3) goto ua3w1; else goto ca3vN;
       ua3w1: // global
           if (_ca3vO::P64 < 2) goto ca3vL; else goto ca3vM;
       ca3vL: // global
           R1 = GHC.Stack.withFrozenCallStack1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ca3vM: // global
           R1 = P64[R1 + 22] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ca3vN: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca3vH_info" {
     block_ca3vH_info:
         const _ca3vH;
         const 0;
         const 4294967326;
         const Sa3nK_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.174057823 UTC

[section ""data" . GHC.Stack.callStack_closure" {
     GHC.Stack.callStack_closure:
         const GHC.Stack.callStack_info;
 },
 GHC.Stack.callStack_entry() //  [R2]
         { []
         }
     {offset
       ca3wu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca3wv; else goto ca3ww;
       ca3wv: // global
           R2 = R2;
           R1 = GHC.Stack.callStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca3ww: // global
           I64[Sp - 8] = block_ca3wm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua3wH; else goto ca3wn;
       ua3wH: // global
           call _ca3wm(R1) args: 0, res: 0, upd: 0;
       ca3wn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.callStack_info" {
     GHC.Stack.callStack_info:
         const GHC.Stack.callStack_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ca3wm() //  [R1]
         { []
         }
     {offset
       ca3wm: // global
           _ca3wt::P64 = R1 & 7;
           if (_ca3wt::P64 < 3) goto ua3wG; else goto ca3ws;
       ua3wG: // global
           if (_ca3wt::P64 < 2) goto ca3wq; else goto ca3wr;
       ca3wq: // global
           R1 = GHC.Stack.Types.EmptyCallStack_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ca3wr: // global
           R1 = P64[R1 + 22] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ca3ws: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca3wm_info" {
     block_ca3wm_info:
         const _ca3wm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.180516476 UTC

[section ""data" . GHC.Stack.withFrozenCallStack_closure" {
     GHC.Stack.withFrozenCallStack_closure:
         const GHC.Stack.withFrozenCallStack_info;
         const 0;
 },
 sat_sa3ni_entry() //  [R1]
         { []
         }
     {offset
       ca3xd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ca3xe; else goto ca3xf;
       ca3xe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3xf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ca3x5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ua3xq; else goto ca3x6;
       ua3xq: // global
           call _ca3x5(R1) args: 0, res: 0, upd: 0;
       ca3x6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa3ni_info" {
     sat_sa3ni_info:
         const sat_sa3ni_entry;
         const 1;
         const 4294967312;
         const Sa3nK_srt+64;
 },
 _ca3x5() //  [R1]
         { []
         }
     {offset
       ca3x5: // global
           _ca3xc::P64 = R1 & 7;
           if (_ca3xc::P64 < 3) goto ua3xp; else goto ca3xb;
       ua3xp: // global
           if (_ca3xc::P64 < 2) goto ca3x9; else goto ca3xa;
       ca3x9: // global
           R1 = GHC.Stack.withFrozenCallStack1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ca3xa: // global
           R1 = P64[R1 + 22] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ca3xb: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ca3x5_info" {
     block_ca3x5_info:
         const _ca3x5;
         const 0;
         const 4294967326;
         const Sa3nK_srt+64;
 },
 GHC.Stack.withFrozenCallStack_entry() //  [R2, R3]
         { []
         }
     {offset
       ca3xs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ca3xw; else goto ca3xv;
       ca3xw: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.withFrozenCallStack_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ca3xv: // global
           I64[Hp - 32] = sat_sa3ni_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 5;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.withFrozenCallStack_info" {
     GHC.Stack.withFrozenCallStack_info:
         const GHC.Stack.withFrozenCallStack_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sa3nK_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.186907779 UTC

[section ""cstring" . GHC.Stack.$trModule4_bytes" {
     GHC.Stack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.188685981 UTC

[section ""data" . GHC.Stack.$trModule3_closure" {
     GHC.Stack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.190291294 UTC

[section ""cstring" . GHC.Stack.$trModule2_bytes" {
     GHC.Stack.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.191879707 UTC

[section ""data" . GHC.Stack.$trModule1_closure" {
     GHC.Stack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.193497219 UTC

[section ""data" . GHC.Stack.$trModule_closure" {
     GHC.Stack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stack.$trModule3_closure+1;
         const GHC.Stack.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.195116245 UTC

[section ""relreadonly" . Sa3nK_srt" {
     Sa3nK_srt:
         const GHC.Stack.CCS.renderStack_closure;
         const GHC.Exception.$fExceptionErrorCall_$ctoException_closure;
         const GHC.Stack.errorWithStackTrace1_closure;
         const GHC.Stack.errorWithStackTrace2_closure;
         const GHC.Stack.CCS.$wgo_closure;
         const GHC.Stack.errorWithStackTrace_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Stack.popCallStack_closure;
         const GHC.Stack.withFrozenCallStack1_closure;
         const GHC.Stack.withFrozenCallStack_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.305479045 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:05.308118406 UTC

[section ""data" . GHC.Stack.errorWithStackTrace1_closure" {
     GHC.Stack.errorWithStackTrace1_closure:
         const GHC.Stack.errorWithStackTrace1_info;
         const 0;
 },
 sat_sa3xZ_entry() //  [R1]
         { []
         }
     {offset
       ca3yR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca3yS; else goto ca3yT;
       ca3yS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3yT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Stack.CCS.renderStack_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa3xZ_info" {
     sat_sa3xZ_info:
         const sat_sa3xZ_entry;
         const 1;
         const 4294967312;
         const Sa3z5_srt;
 },
 sat_sa3y1_entry() //  [R1]
         { []
         }
     {offset
       ca3yV: // global
           _sa3y1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ca3yW; else goto ca3yX;
       ca3yX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ca3yZ; else goto ca3yY;
       ca3yZ: // global
           HpAlloc = 48;
           goto ca3yW;
       ca3yW: // global
           R1 = _sa3y1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3yY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sa3y1::P64;
           _sa3xW::P64 = P64[_sa3y1::P64 + 16];
           _sa3xX::P64 = P64[_sa3y1::P64 + 24];
           I64[Hp - 40] = sat_sa3xZ_info;
           P64[Hp - 24] = _sa3xW::P64;
           I64[Hp - 16] = GHC.Exception.ErrorCallWithLocation_con_info;
           P64[Hp - 8] = _sa3xX::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 15;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa3y1_info" {
     sat_sa3y1_info:
         const sat_sa3y1_entry;
         const 2;
         const 12884901906;
         const Sa3z5_srt;
 },
 GHC.Stack.errorWithStackTrace1_entry() //  [R2, R3]
         { []
         }
     {offset
       ca3z0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ca3z4; else goto ca3z3;
       ca3z4: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.errorWithStackTrace1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ca3z3: // global
           I64[Hp - 24] = sat_sa3y1_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.errorWithStackTrace1_info" {
     GHC.Stack.errorWithStackTrace1_info:
         const GHC.Stack.errorWithStackTrace1_entry;
         const 0;
         const 30064771086;
         const 12884901903;
         const Sa3z5_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.316013419 UTC

[section ""data" . GHC.Stack.errorWithStackTrace2_closure" {
     GHC.Stack.errorWithStackTrace2_closure:
         const GHC.Stack.errorWithStackTrace2_info;
         const 0;
 },
 sat_sa3y4_entry() //  [R1]
         { []
         }
     {offset
       ca3zA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca3zB; else goto ca3zC;
       ca3zB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3zC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Exception.$bErrorCall_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa3y4_info" {
     sat_sa3y4_info:
         const sat_sa3y4_entry;
         const 1;
         const 16;
 },
 sat_sa3y5_entry() //  [R1]
         { []
         }
     {offset
       ca3zD: // global
           _sa3y5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ca3zE; else goto ca3zF;
       ca3zF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ca3zH; else goto ca3zG;
       ca3zH: // global
           HpAlloc = 24;
           goto ca3zE;
       ca3zE: // global
           R1 = _sa3y5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3zG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sa3y5::P64;
           _sa3y2::P64 = P64[_sa3y5::P64 + 16];
           I64[Hp - 16] = sat_sa3y4_info;
           P64[Hp] = _sa3y2::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Exception.$fExceptionErrorCall_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa3y5_info" {
     sat_sa3y5_info:
         const sat_sa3y5_entry;
         const 1;
         const 4294967312;
         const Sa3z5_srt+8;
 },
 GHC.Stack.errorWithStackTrace2_entry() //  [R2]
         { []
         }
     {offset
       ca3zI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ca3zM; else goto ca3zL;
       ca3zM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Stack.errorWithStackTrace2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca3zL: // global
           I64[Hp - 16] = sat_sa3y5_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.errorWithStackTrace2_info" {
     GHC.Stack.errorWithStackTrace2_info:
         const GHC.Stack.errorWithStackTrace2_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const Sa3z5_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.323706522 UTC

[section ""data" . GHC.Stack.errorWithStackTrace_closure" {
     GHC.Stack.errorWithStackTrace_closure:
         const GHC.Stack.errorWithStackTrace_info;
         const 0;
 },
 GHC.Stack.errorWithStackTrace_entry() //  [R2]
         { []
         }
     {offset
       ca3Aj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ca3Ak; else goto ca3Al;
       ca3Ak: // global
           R2 = R2;
           R1 = GHC.Stack.errorWithStackTrace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca3Al: // global
           I64[Sp - 16] = block_ca3A7_info;
           R3 = GHC.Types.[]_closure+1;
           _sa3y6::P64 = R2;
           R2 = CCCS;
           P64[Sp - 8] = _sa3y6::P64;
           Sp = Sp - 16;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.errorWithStackTrace_info" {
     GHC.Stack.errorWithStackTrace_info:
         const GHC.Stack.errorWithStackTrace_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const Sa3z5_srt+16;
 },
 _ca3A7() //  [R1]
         { []
         }
     {offset
       ca3A7: // global
           I64[Sp] = block_ca3A9_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ua3Aw; else goto ca3Aa;
       ua3Aw: // global
           call _ca3A9(R1) args: 0, res: 0, upd: 0;
       ca3Aa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca3A7_info" {
     block_ca3A7_info:
         const _ca3A7;
         const 1;
         const 12884901918;
         const Sa3z5_srt+16;
 },
 _ca3A9() //  [R1]
         { []
         }
     {offset
       ca3A9: // global
           _sa3y6::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ca3Ad; else goto ca3Ae;
       ca3Ad: // global
           I64[Sp + 8] = block_ca3At_info;
           R2 = _sa3y6::P64;
           Sp = Sp + 8;
           call GHC.Stack.errorWithStackTrace2_entry(R2) args: 8, res: 8, upd: 8;
       ca3Ae: // global
           I64[Sp + 8] = block_ca3At_info;
           R3 = _sa3y6::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Stack.errorWithStackTrace1_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ca3A9_info" {
     block_ca3A9_info:
         const _ca3A9;
         const 1;
         const 12884901918;
         const Sa3z5_srt+16;
 },
 _ca3At() //  [R1]
         { []
         }
     {offset
       ca3At: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca3At_info" {
     block_ca3At_info:
         const _ca3At;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.330935574 UTC

[section ""cstring" . lvl_ra3mz_bytes" {
     lvl_ra3mz_bytes:
         I8[] [112,111,112,67,97,108,108,83,116,97,99,107,58,32,101,109,112,116,121,32,115,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.333033402 UTC

[section ""data" . GHC.Stack.withFrozenCallStack1_closure" {
     GHC.Stack.withFrozenCallStack1_closure:
         const GHC.Stack.withFrozenCallStack1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stack.withFrozenCallStack1_entry() //  [R1]
         { []
         }
     {offset
       ca3B2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ca3B3; else goto ca3B4;
       ca3B3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3B4: // global
           (_ca3AX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ca3AX::I64 == 0) goto ca3AZ; else goto ca3AY;
       ca3AZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ca3AY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ca3AX::I64;
           I64[Sp - 24] = block_ca3B0_info;
           R2 = lvl_ra3mz_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stack.withFrozenCallStack1_info" {
     GHC.Stack.withFrozenCallStack1_info:
         const GHC.Stack.withFrozenCallStack1_entry;
         const 0;
         const 4294967317;
         const Sa3z5_srt+48;
 },
 _ca3B0() //  [R1]
         { []
         }
     {offset
       ca3B0: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ca3B0_info" {
     block_ca3B0_info:
         const _ca3B0;
         const 0;
         const 4294967326;
         const Sa3z5_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.338802789 UTC

[section ""data" . GHC.Stack.popCallStack_closure" {
     GHC.Stack.popCallStack_closure:
         const GHC.Stack.popCallStack_info;
         const 0;
 },
 GHC.Stack.popCallStack_entry() //  [R2]
         { []
         }
     {offset
       ca3Bw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca3Bx; else goto ca3By;
       ca3Bx: // global
           R2 = R2;
           R1 = GHC.Stack.popCallStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca3By: // global
           I64[Sp - 8] = block_ca3Bo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua3BJ; else goto ca3Bp;
       ua3BJ: // global
           call _ca3Bo(R1) args: 0, res: 0, upd: 0;
       ca3Bp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.popCallStack_info" {
     GHC.Stack.popCallStack_info:
         const GHC.Stack.popCallStack_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sa3z5_srt+56;
 },
 _ca3Bo() //  [R1]
         { []
         }
     {offset
       ca3Bo: // global
           _ca3Bv::P64 = R1 & 7;
           if (_ca3Bv::P64 < 3) goto ua3BI; else goto ca3Bu;
       ua3BI: // global
           if (_ca3Bv::P64 < 2) goto ca3Bs; else goto ca3Bt;
       ca3Bs: // global
           R1 = GHC.Stack.withFrozenCallStack1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ca3Bt: // global
           R1 = P64[R1 + 22] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ca3Bu: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca3Bo_info" {
     block_ca3Bo_info:
         const _ca3Bo;
         const 0;
         const 4294967326;
         const Sa3z5_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.344532344 UTC

[section ""data" . GHC.Stack.callStack_closure" {
     GHC.Stack.callStack_closure:
         const GHC.Stack.callStack_info;
 },
 GHC.Stack.callStack_entry() //  [R2]
         { []
         }
     {offset
       ca3Cc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ca3Cd; else goto ca3Ce;
       ca3Cd: // global
           R2 = R2;
           R1 = GHC.Stack.callStack_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ca3Ce: // global
           I64[Sp - 8] = block_ca3C4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ua3Cp; else goto ca3C5;
       ua3Cp: // global
           call _ca3C4(R1) args: 0, res: 0, upd: 0;
       ca3C5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.callStack_info" {
     GHC.Stack.callStack_info:
         const GHC.Stack.callStack_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ca3C4() //  [R1]
         { []
         }
     {offset
       ca3C4: // global
           _ca3Cb::P64 = R1 & 7;
           if (_ca3Cb::P64 < 3) goto ua3Co; else goto ca3Ca;
       ua3Co: // global
           if (_ca3Cb::P64 < 2) goto ca3C8; else goto ca3C9;
       ca3C8: // global
           R1 = GHC.Stack.Types.EmptyCallStack_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ca3C9: // global
           R1 = P64[R1 + 22] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ca3Ca: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ca3C4_info" {
     block_ca3C4_info:
         const _ca3C4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.350753186 UTC

[section ""data" . GHC.Stack.withFrozenCallStack_closure" {
     GHC.Stack.withFrozenCallStack_closure:
         const GHC.Stack.withFrozenCallStack_info;
         const 0;
 },
 sat_sa3yD_entry() //  [R1]
         { []
         }
     {offset
       ca3CX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ca3CY; else goto ca3CZ;
       ca3CY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ca3CZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ca3CP_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ua3Da; else goto ca3CQ;
       ua3Da: // global
           call _ca3CP(R1) args: 0, res: 0, upd: 0;
       ca3CQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sa3yD_info" {
     sat_sa3yD_info:
         const sat_sa3yD_entry;
         const 1;
         const 4294967312;
         const Sa3z5_srt+64;
 },
 _ca3CP() //  [R1]
         { []
         }
     {offset
       ca3CP: // global
           _ca3CW::P64 = R1 & 7;
           if (_ca3CW::P64 < 3) goto ua3D9; else goto ca3CV;
       ua3D9: // global
           if (_ca3CW::P64 < 2) goto ca3CT; else goto ca3CU;
       ca3CT: // global
           R1 = GHC.Stack.withFrozenCallStack1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ca3CU: // global
           R1 = P64[R1 + 22] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ca3CV: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ca3CP_info" {
     block_ca3CP_info:
         const _ca3CP;
         const 0;
         const 4294967326;
         const Sa3z5_srt+64;
 },
 GHC.Stack.withFrozenCallStack_entry() //  [R2, R3]
         { []
         }
     {offset
       ca3Dc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ca3Dg; else goto ca3Df;
       ca3Dg: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stack.withFrozenCallStack_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ca3Df: // global
           I64[Hp - 32] = sat_sa3yD_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Stack.Types.FreezeCallStack_con_info;
           P64[Hp] = Hp - 32;
           R2 = Hp - 5;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stack.withFrozenCallStack_info" {
     GHC.Stack.withFrozenCallStack_info:
         const GHC.Stack.withFrozenCallStack_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sa3z5_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.35719361 UTC

[section ""cstring" . GHC.Stack.$trModule4_bytes" {
     GHC.Stack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.358680008 UTC

[section ""data" . GHC.Stack.$trModule3_closure" {
     GHC.Stack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.360308649 UTC

[section ""cstring" . GHC.Stack.$trModule2_bytes" {
     GHC.Stack.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.362245057 UTC

[section ""data" . GHC.Stack.$trModule1_closure" {
     GHC.Stack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stack.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.36389479 UTC

[section ""data" . GHC.Stack.$trModule_closure" {
     GHC.Stack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stack.$trModule3_closure+1;
         const GHC.Stack.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:05.365514501 UTC

[section ""relreadonly" . Sa3z5_srt" {
     Sa3z5_srt:
         const GHC.Stack.CCS.renderStack_closure;
         const GHC.Exception.$fExceptionErrorCall_$ctoException_closure;
         const GHC.Stack.errorWithStackTrace1_closure;
         const GHC.Stack.errorWithStackTrace2_closure;
         const GHC.Stack.CCS.$wgo_closure;
         const GHC.Stack.errorWithStackTrace_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Stack.popCallStack_closure;
         const GHC.Stack.withFrozenCallStack1_closure;
         const GHC.Stack.withFrozenCallStack_closure;
 }]

