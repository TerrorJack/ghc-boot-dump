
==================== Raw Cmm ====================
2018-03-16 15:57:07.701891038 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:57:07.705735096 UTC

[section ""data" . GHC.Weak.mkWeak1_closure" {
     GHC.Weak.mkWeak1_closure:
         const GHC.Weak.mkWeak1_info;
 },
 GHC.Weak.mkWeak1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2nMQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2nMR; else goto c2nMS;
       c2nMR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Weak.mkWeak1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2nMS: // global
           I64[Sp - 24] = block_c2nMJ_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2nNb; else goto c2nMK;
       u2nNb: // global
           call _c2nMJ(R1) args: 0, res: 0, upd: 0;
       c2nMK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.mkWeak1_info" {
     GHC.Weak.mkWeak1_info:
         const GHC.Weak.mkWeak1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c2nMJ() //  [R1]
         { []
         }
     {offset
       c2nMJ: // global
           _s2nGL::P64 = P64[Sp + 8];
           _s2nGM::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c2nMN; else goto c2nMO;
       c2nMN: // global
           I64[Sp + 16] = block_c2nMV_info;
           R2 = _s2nGM::P64;
           R1 = _s2nGL::P64;
           Sp = Sp + 16;
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
       c2nMO: // global
           I64[Sp + 16] = block_c2nN4_info;
           R3 = P64[R1 + 6];
           R2 = _s2nGM::P64;
           R1 = _s2nGL::P64;
           Sp = Sp + 16;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nMJ_info" {
     block_c2nMJ_info:
         const _c2nMJ;
         const 2;
         const 30;
 },
 _c2nMV() //  [R1]
         { []
         }
     {offset
       c2nMV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2nN1; else goto c2nN0;
       c2nN1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2nN0: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nMV_info" {
     block_c2nMV_info:
         const _c2nMV;
         const 0;
         const 30;
 },
 _c2nN4() //  [R1]
         { []
         }
     {offset
       c2nN4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2nNa; else goto c2nN9;
       c2nNa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2nN9: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nN4_info" {
     block_c2nN4_info:
         const _c2nN4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.7351231 UTC

[section ""data" . GHC.Weak.mkWeak_closure" {
     GHC.Weak.mkWeak_closure:
         const GHC.Weak.mkWeak_info;
 },
 GHC.Weak.mkWeak_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2nNz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Weak.mkWeak1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.mkWeak_info" {
     GHC.Weak.mkWeak_info:
         const GHC.Weak.mkWeak_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.739399792 UTC

[section ""data" . GHC.Weak.deRefWeak1_closure" {
     GHC.Weak.deRefWeak1_closure:
         const GHC.Weak.deRefWeak1_info;
 },
 GHC.Weak.deRefWeak1_entry() //  [R2]
         { []
         }
     {offset
       c2nNN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2nNO; else goto c2nNP;
       c2nNO: // global
           R2 = R2;
           R1 = GHC.Weak.deRefWeak1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nNP: // global
           I64[Sp - 8] = block_c2nNK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nO7; else goto c2nNL;
       u2nO7: // global
           call _c2nNK(R1) args: 0, res: 0, upd: 0;
       c2nNL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.deRefWeak1_info" {
     GHC.Weak.deRefWeak1_info:
         const GHC.Weak.deRefWeak1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c2nNK() //  [R1]
         { []
         }
     {offset
       c2nNK: // global
           I64[Sp] = block_c2nNS_info;
           R1 = P64[R1 + 7];
           call stg_deRefWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nNK_info" {
     block_c2nNK_info:
         const _c2nNK;
         const 0;
         const 30;
 },
 _c2nNS() //  [R1, R2]
         { []
         }
     {offset
       c2nNS: // global
           P64[Sp - 8] = R2;
           I64[Sp] = R1;
           Sp = Sp - 16;
           call _c2nNU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2nNS_info" {
     block_c2nNS_info:
         const _c2nNS;
         const 0;
         const 30;
 },
 _c2nNU() //  []
         { []
         }
     {offset
       c2nNU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2nNZ; else goto c2nNY;
       c2nNZ: // global
           HpAlloc = 16;
           I64[Sp] = block_c2nNU_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2nNY: // global
           if (I64[Sp + 16] == 0) goto c2nO5; else goto c2nO4;
       c2nO5: // global
           Hp = Hp - 16;
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nO4: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nNU_info" {
     block_c2nNU_info:
         const _c2nNU;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.74754706 UTC

[section ""data" . GHC.Weak.deRefWeak_closure" {
     GHC.Weak.deRefWeak_closure:
         const GHC.Weak.deRefWeak_info;
 },
 GHC.Weak.deRefWeak_entry() //  [R2]
         { []
         }
     {offset
       c2nOv: // global
           R2 = R2;
           call GHC.Weak.deRefWeak1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.deRefWeak_info" {
     GHC.Weak.deRefWeak_info:
         const GHC.Weak.deRefWeak_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.751647121 UTC

[section ""data" . GHC.Weak.finalize1_closure" {
     GHC.Weak.finalize1_closure:
         const GHC.Weak.finalize1_info;
 },
 GHC.Weak.finalize1_entry() //  [R2]
         { []
         }
     {offset
       c2nOJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nOK; else goto c2nOL;
       c2nOK: // global
           R2 = R2;
           R1 = GHC.Weak.finalize1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nOL: // global
           I64[Sp - 8] = block_c2nOG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nOY; else goto c2nOH;
       u2nOY: // global
           call _c2nOG(R1) args: 0, res: 0, upd: 0;
       c2nOH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.finalize1_info" {
     GHC.Weak.finalize1_info:
         const GHC.Weak.finalize1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c2nOG() //  [R1]
         { []
         }
     {offset
       c2nOG: // global
           I64[Sp] = block_c2nOO_info;
           R1 = P64[R1 + 7];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nOG_info" {
     block_c2nOG_info:
         const _c2nOG;
         const 0;
         const 30;
 },
 _c2nOO() //  [R1, R2]
         { []
         }
     {offset
       c2nOO: // global
           if (R1 == 0) goto c2nOX; else goto c2nOW;
       c2nOX: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nOW: // global
           R1 = R2;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nOO_info" {
     block_c2nOO_info:
         const _c2nOO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.758898042 UTC

[section ""data" . GHC.Weak.finalize_closure" {
     GHC.Weak.finalize_closure:
         const GHC.Weak.finalize_info;
 },
 GHC.Weak.finalize_entry() //  [R2]
         { []
         }
     {offset
       c2nPg: // global
           R2 = R2;
           call GHC.Weak.finalize1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.finalize_info" {
     GHC.Weak.finalize_info:
         const GHC.Weak.finalize_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.76317414 UTC

[section ""data" . GHC.Weak.runFinalizerBatch1_closure" {
     GHC.Weak.runFinalizerBatch1_closure:
         const GHC.Weak.runFinalizerBatch1_info;
 },
 GHC.Weak.runFinalizerBatch1_entry() //  [R2, R3]
         { []
         }
     {offset
       c2nPu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2nPv; else goto c2nPw;
       c2nPv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Weak.runFinalizerBatch1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2nPw: // global
           I64[Sp - 16] = block_c2nPr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2nPU; else goto c2nPs;
       u2nPU: // global
           call _c2nPr(R1) args: 0, res: 0, upd: 0;
       c2nPs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.runFinalizerBatch1_info" {
     GHC.Weak.runFinalizerBatch1_info:
         const GHC.Weak.runFinalizerBatch1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c2nPr() //  [R1]
         { []
         }
     {offset
       c2nPr: // global
           I64[Sp] = I64[R1 + 7];
           call _c2nPD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2nPr_info" {
     block_c2nPr_info:
         const _c2nPr;
         const 1;
         const 30;
 },
 _c2nPD() //  []
         { []
         }
     {offset
       c2nPD: // global
           _s2nHq::I64 = I64[Sp];
           if (_s2nHq::I64 != 0) goto c2nPN; else goto c2nPQ;
       c2nPN: // global
           _s2nHr::I64 = _s2nHq::I64 - 1;
           _s2nHt::P64 = P64[P64[Sp + 8] + ((_s2nHr::I64 << 3) + 24)];
           I64[Sp - 8] = block_c2nPL_info;
           R1 = _s2nHt::P64;
           I64[Sp] = _s2nHr::I64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c2nPQ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2nPL() //  []
         { []
         }
     {offset
       c2nPL: // global
           I64[Sp + 8] = I64[Sp + 8];
           Sp = Sp + 8;
           call _c2nPD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2nPL_info" {
     block_c2nPL_info:
         const _c2nPL;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.771207787 UTC

[section ""data" . GHC.Weak.runFinalizerBatch_closure" {
     GHC.Weak.runFinalizerBatch_closure:
         const GHC.Weak.runFinalizerBatch_info;
 },
 GHC.Weak.runFinalizerBatch_entry() //  [R2, R3]
         { []
         }
     {offset
       c2nQi: // global
           R3 = R3;
           R2 = R2;
           call GHC.Weak.runFinalizerBatch1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.runFinalizerBatch_info" {
     GHC.Weak.runFinalizerBatch_info:
         const GHC.Weak.runFinalizerBatch_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.774371737 UTC

[section ""cstring" . GHC.Weak.$trModule4_bytes" {
     GHC.Weak.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.776047757 UTC

[section ""data" . GHC.Weak.$trModule3_closure" {
     GHC.Weak.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Weak.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.77777761 UTC

[section ""cstring" . GHC.Weak.$trModule2_bytes" {
     GHC.Weak.$trModule2_bytes:
         I8[] [71,72,67,46,87,101,97,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.779364288 UTC

[section ""data" . GHC.Weak.$trModule1_closure" {
     GHC.Weak.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Weak.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.781107374 UTC

[section ""data" . GHC.Weak.$trModule_closure" {
     GHC.Weak.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Weak.$trModule3_closure+1;
         const GHC.Weak.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.783532889 UTC

[section ""data" . $krep_r2nGG_closure" {
     $krep_r2nGG_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.785868528 UTC

[section ""data" . $krep1_r2nGH_closure" {
     $krep1_r2nGH_closure:
         const :_con_info;
         const $krep_r2nGG_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.787519463 UTC

[section ""data" . $krep2_r2nGI_closure" {
     $krep2_r2nGI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWeak#_closure;
         const $krep1_r2nGH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.789205373 UTC

[section ""cstring" . GHC.Weak.$tcWeak2_bytes" {
     GHC.Weak.$tcWeak2_bytes:
         I8[] [87,101,97,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.790918065 UTC

[section ""data" . GHC.Weak.$tcWeak1_closure" {
     GHC.Weak.$tcWeak1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Weak.$tcWeak2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.79265797 UTC

[section ""data" . GHC.Weak.$tcWeak_closure" {
     GHC.Weak.$tcWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Weak.$trModule_closure+1;
         const GHC.Weak.$tcWeak1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 16083706323098193819;
         const 16670279643231176950;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.794473164 UTC

[section ""data" . $krep3_r2nGJ_closure" {
     $krep3_r2nGJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Weak.$tcWeak_closure+1;
         const $krep1_r2nGH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.796181247 UTC

[section ""data" . GHC.Weak.$tc'Weak1_closure" {
     GHC.Weak.$tc'Weak1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r2nGI_closure+1;
         const $krep3_r2nGJ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.798082862 UTC

[section ""cstring" . GHC.Weak.$tc'Weak3_bytes" {
     GHC.Weak.$tc'Weak3_bytes:
         I8[] [39,87,101,97,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.799743363 UTC

[section ""data" . GHC.Weak.$tc'Weak2_closure" {
     GHC.Weak.$tc'Weak2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Weak.$tc'Weak3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.801531367 UTC

[section ""data" . GHC.Weak.$tc'Weak_closure" {
     GHC.Weak.$tc'Weak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Weak.$trModule_closure+1;
         const GHC.Weak.$tc'Weak2_closure+1;
         const GHC.Weak.$tc'Weak1_closure+4;
         const 3879909390682789585;
         const 9243676412269356154;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.803855284 UTC

[section ""data" . GHC.Weak.Weak_closure" {
     GHC.Weak.Weak_closure:
         const GHC.Weak.Weak_info;
 },
 GHC.Weak.Weak_entry() //  [R2]
         { []
         }
     {offset
       c2nQK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2nQO; else goto c2nQN;
       c2nQO: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Weak.Weak_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nQN: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.Weak_info" {
     GHC.Weak.Weak_info:
         const GHC.Weak.Weak_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.807395295 UTC

[section ""cstring" . i2nME_str" {
     i2nME_str:
         I8[] [98,97,115,101,58,71,72,67,46,87,101,97,107,46,87,101,97,107]
 },
 GHC.Weak.Weak_con_entry() //  [R1]
         { []
         }
     {offset
       c2nQU: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.Weak_con_info" {
     GHC.Weak.Weak_con_info:
         const GHC.Weak.Weak_con_entry;
         const 1;
         const 2;
         const i2nME_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.810918302 UTC

[section ""relreadonly" . S2nK4_srt" { S2nK4_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.930303189 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:57:07.933118084 UTC

[section ""data" . GHC.Weak.mkWeak1_closure" {
     GHC.Weak.mkWeak1_closure:
         const GHC.Weak.mkWeak1_info;
 },
 GHC.Weak.mkWeak1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2nRW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2nRX; else goto c2nRY;
       c2nRX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Weak.mkWeak1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2nRY: // global
           I64[Sp - 24] = block_c2nRP_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2nSh; else goto c2nRQ;
       u2nSh: // global
           call _c2nRP(R1) args: 0, res: 0, upd: 0;
       c2nRQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.mkWeak1_info" {
     GHC.Weak.mkWeak1_info:
         const GHC.Weak.mkWeak1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c2nRP() //  [R1]
         { []
         }
     {offset
       c2nRP: // global
           _s2nR1::P64 = P64[Sp + 8];
           _s2nR2::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c2nRT; else goto c2nRU;
       c2nRT: // global
           I64[Sp + 16] = block_c2nS1_info;
           R2 = _s2nR2::P64;
           R1 = _s2nR1::P64;
           Sp = Sp + 16;
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
       c2nRU: // global
           I64[Sp + 16] = block_c2nSa_info;
           R3 = P64[R1 + 6];
           R2 = _s2nR2::P64;
           R1 = _s2nR1::P64;
           Sp = Sp + 16;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nRP_info" {
     block_c2nRP_info:
         const _c2nRP;
         const 2;
         const 30;
 },
 _c2nS1() //  [R1]
         { []
         }
     {offset
       c2nS1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2nS7; else goto c2nS6;
       c2nS7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2nS6: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nS1_info" {
     block_c2nS1_info:
         const _c2nS1;
         const 0;
         const 30;
 },
 _c2nSa() //  [R1]
         { []
         }
     {offset
       c2nSa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2nSg; else goto c2nSf;
       c2nSg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2nSf: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nSa_info" {
     block_c2nSa_info:
         const _c2nSa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.941974344 UTC

[section ""data" . GHC.Weak.mkWeak_closure" {
     GHC.Weak.mkWeak_closure:
         const GHC.Weak.mkWeak_info;
 },
 GHC.Weak.mkWeak_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2nSK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Weak.mkWeak1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.mkWeak_info" {
     GHC.Weak.mkWeak_info:
         const GHC.Weak.mkWeak_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.946426657 UTC

[section ""data" . GHC.Weak.deRefWeak1_closure" {
     GHC.Weak.deRefWeak1_closure:
         const GHC.Weak.deRefWeak1_info;
 },
 GHC.Weak.deRefWeak1_entry() //  [R2]
         { []
         }
     {offset
       c2nSY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2nSZ; else goto c2nT0;
       c2nSZ: // global
           R2 = R2;
           R1 = GHC.Weak.deRefWeak1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nT0: // global
           I64[Sp - 8] = block_c2nSV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nTi; else goto c2nSW;
       u2nTi: // global
           call _c2nSV(R1) args: 0, res: 0, upd: 0;
       c2nSW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.deRefWeak1_info" {
     GHC.Weak.deRefWeak1_info:
         const GHC.Weak.deRefWeak1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c2nSV() //  [R1]
         { []
         }
     {offset
       c2nSV: // global
           I64[Sp] = block_c2nT3_info;
           R1 = P64[R1 + 7];
           call stg_deRefWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nSV_info" {
     block_c2nSV_info:
         const _c2nSV;
         const 0;
         const 30;
 },
 _c2nT3() //  [R1, R2]
         { []
         }
     {offset
       c2nT3: // global
           P64[Sp - 8] = R2;
           I64[Sp] = R1;
           Sp = Sp - 16;
           call _c2nT5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2nT3_info" {
     block_c2nT3_info:
         const _c2nT3;
         const 0;
         const 30;
 },
 _c2nT5() //  []
         { []
         }
     {offset
       c2nT5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2nTa; else goto c2nT9;
       c2nTa: // global
           HpAlloc = 16;
           I64[Sp] = block_c2nT5_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2nT9: // global
           if (I64[Sp + 16] == 0) goto c2nTg; else goto c2nTf;
       c2nTg: // global
           Hp = Hp - 16;
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nTf: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nT5_info" {
     block_c2nT5_info:
         const _c2nT5;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.955224773 UTC

[section ""data" . GHC.Weak.deRefWeak_closure" {
     GHC.Weak.deRefWeak_closure:
         const GHC.Weak.deRefWeak_info;
 },
 GHC.Weak.deRefWeak_entry() //  [R2]
         { []
         }
     {offset
       c2nTL: // global
           R2 = R2;
           call GHC.Weak.deRefWeak1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.deRefWeak_info" {
     GHC.Weak.deRefWeak_info:
         const GHC.Weak.deRefWeak_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.959418294 UTC

[section ""data" . GHC.Weak.finalize1_closure" {
     GHC.Weak.finalize1_closure:
         const GHC.Weak.finalize1_info;
 },
 GHC.Weak.finalize1_entry() //  [R2]
         { []
         }
     {offset
       c2nTZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nU0; else goto c2nU1;
       c2nU0: // global
           R2 = R2;
           R1 = GHC.Weak.finalize1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nU1: // global
           I64[Sp - 8] = block_c2nTW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nUe; else goto c2nTX;
       u2nUe: // global
           call _c2nTW(R1) args: 0, res: 0, upd: 0;
       c2nTX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.finalize1_info" {
     GHC.Weak.finalize1_info:
         const GHC.Weak.finalize1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c2nTW() //  [R1]
         { []
         }
     {offset
       c2nTW: // global
           I64[Sp] = block_c2nU4_info;
           R1 = P64[R1 + 7];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nTW_info" {
     block_c2nTW_info:
         const _c2nTW;
         const 0;
         const 30;
 },
 _c2nU4() //  [R1, R2]
         { []
         }
     {offset
       c2nU4: // global
           if (R1 == 0) goto c2nUd; else goto c2nUc;
       c2nUd: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nUc: // global
           R1 = R2;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nU4_info" {
     block_c2nU4_info:
         const _c2nU4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.966037179 UTC

[section ""data" . GHC.Weak.finalize_closure" {
     GHC.Weak.finalize_closure:
         const GHC.Weak.finalize_info;
 },
 GHC.Weak.finalize_entry() //  [R2]
         { []
         }
     {offset
       c2nUz: // global
           R2 = R2;
           call GHC.Weak.finalize1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.finalize_info" {
     GHC.Weak.finalize_info:
         const GHC.Weak.finalize_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.970349457 UTC

[section ""data" . GHC.Weak.runFinalizerBatch1_closure" {
     GHC.Weak.runFinalizerBatch1_closure:
         const GHC.Weak.runFinalizerBatch1_info;
 },
 GHC.Weak.runFinalizerBatch1_entry() //  [R2, R3]
         { []
         }
     {offset
       c2nUN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2nUO; else goto c2nUP;
       c2nUO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Weak.runFinalizerBatch1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2nUP: // global
           I64[Sp - 16] = block_c2nUK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2nVd; else goto c2nUL;
       u2nVd: // global
           call _c2nUK(R1) args: 0, res: 0, upd: 0;
       c2nUL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.runFinalizerBatch1_info" {
     GHC.Weak.runFinalizerBatch1_info:
         const GHC.Weak.runFinalizerBatch1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c2nUK() //  [R1]
         { []
         }
     {offset
       c2nUK: // global
           I64[Sp] = I64[R1 + 7];
           call _c2nUW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2nUK_info" {
     block_c2nUK_info:
         const _c2nUK;
         const 1;
         const 30;
 },
 _c2nUW() //  []
         { []
         }
     {offset
       c2nUW: // global
           _s2nRG::I64 = I64[Sp];
           if (_s2nRG::I64 != 0) goto c2nV6; else goto c2nV9;
       c2nV6: // global
           _s2nRH::I64 = _s2nRG::I64 - 1;
           _s2nRJ::P64 = P64[P64[Sp + 8] + ((_s2nRH::I64 << 3) + 24)];
           I64[Sp - 8] = block_c2nV4_info;
           R1 = _s2nRJ::P64;
           I64[Sp] = _s2nRH::I64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c2nV9: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2nV4() //  []
         { []
         }
     {offset
       c2nV4: // global
           I64[Sp + 8] = I64[Sp + 8];
           Sp = Sp + 8;
           call _c2nUW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2nV4_info" {
     block_c2nV4_info:
         const _c2nV4;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.978431051 UTC

[section ""data" . GHC.Weak.runFinalizerBatch_closure" {
     GHC.Weak.runFinalizerBatch_closure:
         const GHC.Weak.runFinalizerBatch_info;
 },
 GHC.Weak.runFinalizerBatch_entry() //  [R2, R3]
         { []
         }
     {offset
       c2nVE: // global
           R3 = R3;
           R2 = R2;
           call GHC.Weak.runFinalizerBatch1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.runFinalizerBatch_info" {
     GHC.Weak.runFinalizerBatch_info:
         const GHC.Weak.runFinalizerBatch_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.981394614 UTC

[section ""cstring" . GHC.Weak.$trModule4_bytes" {
     GHC.Weak.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.983029672 UTC

[section ""data" . GHC.Weak.$trModule3_closure" {
     GHC.Weak.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Weak.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.985107715 UTC

[section ""cstring" . GHC.Weak.$trModule2_bytes" {
     GHC.Weak.$trModule2_bytes:
         I8[] [71,72,67,46,87,101,97,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.986863106 UTC

[section ""data" . GHC.Weak.$trModule1_closure" {
     GHC.Weak.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Weak.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.988429388 UTC

[section ""data" . GHC.Weak.$trModule_closure" {
     GHC.Weak.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Weak.$trModule3_closure+1;
         const GHC.Weak.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.990060085 UTC

[section ""data" . $krep_r2nGG_closure" {
     $krep_r2nGG_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.991654521 UTC

[section ""data" . $krep1_r2nGH_closure" {
     $krep1_r2nGH_closure:
         const :_con_info;
         const $krep_r2nGG_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.993753469 UTC

[section ""data" . $krep2_r2nGI_closure" {
     $krep2_r2nGI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWeak#_closure;
         const $krep1_r2nGH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.995329596 UTC

[section ""cstring" . GHC.Weak.$tcWeak2_bytes" {
     GHC.Weak.$tcWeak2_bytes:
         I8[] [87,101,97,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.996877564 UTC

[section ""data" . GHC.Weak.$tcWeak1_closure" {
     GHC.Weak.$tcWeak1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Weak.$tcWeak2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.998554547 UTC

[section ""data" . GHC.Weak.$tcWeak_closure" {
     GHC.Weak.$tcWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Weak.$trModule_closure+1;
         const GHC.Weak.$tcWeak1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 16083706323098193819;
         const 16670279643231176950;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:08.000255879 UTC

[section ""data" . $krep3_r2nGJ_closure" {
     $krep3_r2nGJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Weak.$tcWeak_closure+1;
         const $krep1_r2nGH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:08.001877592 UTC

[section ""data" . GHC.Weak.$tc'Weak1_closure" {
     GHC.Weak.$tc'Weak1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r2nGI_closure+1;
         const $krep3_r2nGJ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:08.003437394 UTC

[section ""cstring" . GHC.Weak.$tc'Weak3_bytes" {
     GHC.Weak.$tc'Weak3_bytes:
         I8[] [39,87,101,97,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:08.004970636 UTC

[section ""data" . GHC.Weak.$tc'Weak2_closure" {
     GHC.Weak.$tc'Weak2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Weak.$tc'Weak3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:08.006681755 UTC

[section ""data" . GHC.Weak.$tc'Weak_closure" {
     GHC.Weak.$tc'Weak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Weak.$trModule_closure+1;
         const GHC.Weak.$tc'Weak2_closure+1;
         const GHC.Weak.$tc'Weak1_closure+4;
         const 3879909390682789585;
         const 9243676412269356154;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:08.009428568 UTC

[section ""data" . GHC.Weak.Weak_closure" {
     GHC.Weak.Weak_closure:
         const GHC.Weak.Weak_info;
 },
 GHC.Weak.Weak_entry() //  [R2]
         { []
         }
     {offset
       c2nW6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2nWa; else goto c2nW9;
       c2nWa: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Weak.Weak_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nW9: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.Weak_info" {
     GHC.Weak.Weak_info:
         const GHC.Weak.Weak_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:08.012888413 UTC

[section ""cstring" . i2nWi_str" {
     i2nWi_str:
         I8[] [98,97,115,101,58,71,72,67,46,87,101,97,107,46,87,101,97,107]
 },
 GHC.Weak.Weak_con_entry() //  [R1]
         { []
         }
     {offset
       c2nWh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Weak.Weak_con_info" {
     GHC.Weak.Weak_con_info:
         const GHC.Weak.Weak_con_entry;
         const 1;
         const 2;
         const i2nWi_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:08.015869057 UTC

[section ""relreadonly" . S2nWo_srt" { S2nWo_srt:
 }]

