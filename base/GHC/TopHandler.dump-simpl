
==================== Tidy Core ====================
2018-03-16 16:09:05.329212352 UTC

Result size of Tidy Core
  = {terms: 808, types: 1,290, coercions: 184, joins: 8/10}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TopHandler.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.TopHandler.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TopHandler.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TopHandler.$trModule3
  = GHC.Types.TrNameS GHC.TopHandler.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TopHandler.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.TopHandler.$trModule2 = "GHC.TopHandler"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TopHandler.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TopHandler.$trModule1
  = GHC.Types.TrNameS GHC.TopHandler.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TopHandler.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.TopHandler.$trModule
  = GHC.Types.Module
      GHC.TopHandler.$trModule3 GHC.TopHandler.$trModule1

-- RHS size: {terms: 33, types: 80, coercions: 0, joins: 0/0}
GHC.TopHandler.runMainIO2 :: Data.Typeable.Internal.TypeRep (IO ())
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 230 0}]
GHC.TopHandler.runMainIO2
  = case Data.Typeable.Internal.$wmkTrCon
           @ (* -> *)
           @ IO
           11571292540224541508##
           14006894820825784566##
           GHC.Types.$trModule
           GHC.Types.$tcIO1
           0#
           GHC.Types.krep$*Arr*
           (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)
    of
    { (# ww8_idPJm, ww9_idPJn, ww10_idPJo, ww11_idPJp, ww12_idPJq #) ->
    case Data.Typeable.Internal.$wmkTrCon
           @ *
           @ ()
           2684808367141291271##
           14290630168515401665##
           GHC.Tuple.$trModule
           GHC.Tuple.$tc()1
           0#
           GHC.Types.krep$*
           (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)
    of
    { (# ww2_XdPKG, ww3_XdPKI, ww4_XdPKK, ww5_XdPKM, ww6_XdPKO #) ->
    Data.Typeable.Internal.mkTrApp
      @ *
      @ *
      @ IO
      @ ()
      (Data.Typeable.Internal.TrTyCon
         @ (* -> *)
         @ IO
         ww8_idPJm
         ww9_idPJn
         ww10_idPJo
         ww11_idPJp
         ww12_idPJq)
      (Data.Typeable.Internal.TrTyCon
         @ * @ () ww2_XdPKG ww3_XdPKI ww4_XdPKK ww5_XdPKM ww6_XdPKO)
    }
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
unreachable_rdQlR :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
unreachable_rdQlR
  = "If you can read this, shutdownHaskellAndExit did not exit."#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
unreachable1_rdQlS :: [Char]
[GblId]
unreachable1_rdQlS = unpackCString# unreachable_rdQlR

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
GHC.TopHandler.flushStdHandles2
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 60}]
GHC.TopHandler.flushStdHandles2
  = GHC.IO.Handle.Internals.wantWritableHandle1
      @ ()
      GHC.IO.Handle.hFlush2
      stderr
      (GHC.IO.Handle.Internals.flushWriteBuffer1
       `cast` (<GHC.IO.Handle.Types.Handle__>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.IO.Handle.Types.Handle__
                   -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (GHC.IO.Handle.Types.Handle__ -> IO () :: *)))

-- RHS size: {terms: 8, types: 16, coercions: 0, joins: 0/0}
GHC.TopHandler.flushStdHandles3
  :: SomeException -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)}]
GHC.TopHandler.flushStdHandles3
  = \ (ds1_idPKf [OS=OneShot] :: SomeException)
      (eta_B1 [OS=OneShot] :: State# RealWorld) ->
      case ds1_idPKf of
      { SomeException @ e_idPKj $dException_idPKk e1_idPKl ->
      (# eta_B1, GHC.Tuple.() #)
      }

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
GHC.TopHandler.flushStdHandles4
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 60}]
GHC.TopHandler.flushStdHandles4
  = GHC.IO.Handle.Internals.wantWritableHandle1
      @ ()
      GHC.IO.Handle.hFlush2
      stdout
      (GHC.IO.Handle.Internals.flushWriteBuffer1
       `cast` (<GHC.IO.Handle.Types.Handle__>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (GHC.IO.Handle.Types.Handle__
                   -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (GHC.IO.Handle.Types.Handle__ -> IO () :: *)))

-- RHS size: {terms: 11, types: 17, coercions: 0, joins: 0/0}
GHC.TopHandler.flushStdHandles1
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
GHC.TopHandler.flushStdHandles1
  = \ (s_i7JiH :: State# RealWorld) ->
      case catch#
             @ ()
             @ SomeException
             GHC.TopHandler.flushStdHandles4
             GHC.TopHandler.flushStdHandles3
             s_i7JiH
      of
      { (# ipv_i7JiK, ipv1_i7JiL #) ->
      catch#
        @ ()
        @ SomeException
        GHC.TopHandler.flushStdHandles2
        GHC.TopHandler.flushStdHandles3
        ipv_i7JiK
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
flushStdHandles :: IO ()
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TopHandler.flushStdHandles1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
flushStdHandles
  = GHC.TopHandler.flushStdHandles1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))

-- RHS size: {terms: 75, types: 51, coercions: 12, joins: 2/2}
$wexitHelper_rdQlT :: forall a. CInt -> Int# -> IO a
[GblId, Arity=2, Str=<L,U(U)><S,U>, Unf=OtherCon []]
$wexitHelper_rdQlT
  = \ (@ a_sdQcn) (w_sdQco :: CInt) (ww_sdQcs :: Int#) ->
      join {
        $j_sdPVw [Dmd=<L,1*U>] :: IO a_sdQcn
        [LclId[JoinId(0)]]
        $j_sdPVw
          = join {
              $j1_sdPVp [Dmd=<L,1*U>] :: IO a_sdQcn
              [LclId[JoinId(0)], Arity=1, Unf=OtherCon []]
              $j1_sdPVp
                = (\ (s_X7JjH :: State# RealWorld) ->
                     case w_sdQco
                          `cast` (Foreign.C.Types.N:CInt[0] :: (CInt :: *) ~R# (Int32 :: *))
                     of
                     { GHC.Int.I32# ds1_ddPGt ->
                     case {__pkg_ccall_GC base-4.11.0.0 Int#
                              -> Int# -> State# RealWorld -> (# State# RealWorld #)}_ddPGw
                            255# ds1_ddPGt s_X7JjH
                     of
                     { (# ds2_ddPGu #) ->
                     GHC.IO.failIO1 @ a_sdQcn unreachable1_rdQlS ds2_ddPGu
                     }
                     })
                  `cast` (Sym (GHC.Types.N:IO[0] <a_sdQcn>_R)
                          :: (State# RealWorld -> (# State# RealWorld, a_sdQcn #) :: *)
                             ~R# (IO a_sdQcn :: *)) } in
            case >=# ww_sdQcs -127# of {
              __DEFAULT -> jump $j1_sdPVp;
              1# ->
                case <=# ww_sdQcs -1# of {
                  __DEFAULT -> jump $j1_sdPVp;
                  1# ->
                    (\ (s_X7JjH :: State# RealWorld) ->
                       case w_sdQco
                            `cast` (Foreign.C.Types.N:CInt[0] :: (CInt :: *) ~R# (Int32 :: *))
                       of
                       { GHC.Int.I32# ds1_ddPGD ->
                       case {__pkg_ccall_GC base-4.11.0.0 Int#
                              -> Int# -> State# RealWorld -> (# State# RealWorld #)}_ddPGG
                              (narrow32Int# (negateInt# ww_sdQcs)) ds1_ddPGD s_X7JjH
                       of
                       { (# ds2_ddPGE #) ->
                       GHC.IO.failIO1 @ a_sdQcn unreachable1_rdQlS ds2_ddPGE
                       }
                       })
                    `cast` (Sym (GHC.Types.N:IO[0] <a_sdQcn>_R)
                            :: (State# RealWorld -> (# State# RealWorld, a_sdQcn #) :: *)
                               ~R# (IO a_sdQcn :: *))
                }
            } } in
      case >=# ww_sdQcs 0# of {
        __DEFAULT -> jump $j_sdPVw;
        1# ->
          case <=# ww_sdQcs 255# of {
            __DEFAULT -> jump $j_sdPVw;
            1# ->
              (\ (s_X7JjE :: State# RealWorld) ->
                 case w_sdQco
                      `cast` (Foreign.C.Types.N:CInt[0] :: (CInt :: *) ~R# (Int32 :: *))
                 of
                 { GHC.Int.I32# ds1_ddPGt ->
                 case {__pkg_ccall_GC base-4.11.0.0 Int#
                              -> Int# -> State# RealWorld -> (# State# RealWorld #)}_ddPGw
                        (narrow32Int# ww_sdQcs) ds1_ddPGt s_X7JjE
                 of
                 { (# ds2_ddPGu #) ->
                 GHC.IO.failIO1 @ a_sdQcn unreachable1_rdQlS ds2_ddPGu
                 }
                 })
              `cast` (Sym (GHC.Types.N:IO[0] <a_sdQcn>_R)
                      :: (State# RealWorld -> (# State# RealWorld, a_sdQcn #) :: *)
                         ~R# (IO a_sdQcn :: *))
          }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
safeExit1_rdQlU :: Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
safeExit1_rdQlU = GHC.Int.I32# 0#

-- RHS size: {terms: 8, types: 6, coercions: 2, joins: 0/0}
safeExit_rdPtY :: forall a. Int -> IO a
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []]
safeExit_rdPtY
  = \ (@ a_adPz8) (w_sdQcp :: Int) ->
      case w_sdQcp of { I# ww1_sdQcs ->
      $wexitHelper_rdQlT
        @ a_adPz8
        (safeExit1_rdQlU
         `cast` (Sym (Foreign.C.Types.N:CInt[0])
                 :: (Int32 :: *) ~R# (CInt :: *)))
        ww1_sdQcs
      }

-- RHS size: {terms: 4, types: 3, coercions: 2, joins: 0/0}
exitInterrupted_rdPu2 :: forall a. IO a
[GblId]
exitInterrupted_rdPu2
  = \ (@ a_adPzb) ->
      $wexitHelper_rdQlT
        @ a_adPzb
        (safeExit1_rdQlU
         `cast` (Sym (Foreign.C.Types.N:CInt[0])
                 :: (Int32 :: *) ~R# (CInt :: *)))
        -2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_rdQlV :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl_rdQlV = GHC.Types.I# 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_rdQlW :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl1_rdQlW = GHC.Types.I# 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
msgStr_rdQlX :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
msgStr_rdQlX
  = "encountered an exception while trying to report an exception.\n\
    \One possible reason for this is that we failed while trying to encode an error message. Check that your locale is configured properly."#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
msgStr1_rdQlY :: [Char]
[GblId]
msgStr1_rdQlY = unpackCString# msgStr_rdQlX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
str_rdQlZ :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
str_rdQlZ = "%s"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
str1_rdQm0 :: String
[GblId]
str1_rdQm0 = unpackCString# str_rdQlZ

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
lvl2_rdQm1 :: Int
[GblId]
lvl2_rdQm1
  = case GHC.List.$wlenAcc @ Char msgStr1_rdQlY 0# of v_B2
    { __DEFAULT ->
    GHC.Types.I# v_B2
    }

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
lvl3_rdQm2 :: Int
[GblId]
lvl3_rdQm2
  = case GHC.List.$wlenAcc @ Char str1_rdQm0 0# of v_B2
    { __DEFAULT ->
    GHC.Types.I# v_B2
    }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl4_rdQm3 :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl4_rdQm3 = GHC.Types.I# 2#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl5_rdQm4 :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl5_rdQm4 = GHC.Types.I# 251#

-- RHS size: {terms: 403, types: 627, coercions: 85, joins: 6/8}
real_handler_rdQm5
  :: forall a.
     (Int -> IO a)
     -> SomeException -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=3, Str=<L,C(C1(U(U,U)))><S,U><S,U>, Unf=OtherCon []]
real_handler_rdQm5
  = \ (@ a_adPA7)
      (exit_adPuv :: Int -> IO a_adPA7)
      (se_adPuw :: SomeException)
      (s_X7JjF :: State# RealWorld) ->
      case catch#
             @ ()
             @ SomeException
             GHC.TopHandler.flushStdHandles4
             GHC.TopHandler.flushStdHandles3
             s_X7JjF
      of
      { (# ipv_i7JiK, ipv1_i7JiL #) ->
      case catch#
             @ ()
             @ SomeException
             GHC.TopHandler.flushStdHandles2
             GHC.TopHandler.flushStdHandles3
             ipv_i7JiK
      of
      { (# ipv2_X7Jk9, ipv3_X7Jkb #) ->
      join {
        fail_sdPUd [Dmd=<L,1*C1(U(U,U))>]
          :: Void# -> (# State# RealWorld, a_adPA7 #)
        [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []]
        fail_sdPUd _ [Occ=Dead, OS=OneShot]
          = case se_adPuw of wild_idPKU
            { SomeException @ e1_idPKW $dException1_idPKX e2_idPKY ->
            case Data.Typeable.Internal.sameTypeRep
                   @ *
                   @ *
                   @ e1_idPKW
                   @ ExitCode
                   ((GHC.Exception.$p1Exception @ e1_idPKW $dException1_idPKX)
                    `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_idPKW>_N
                            :: (Data.Typeable.Internal.Typeable e1_idPKW :: Constraint)
                               ~R# (Data.Typeable.Internal.TypeRep e1_idPKW :: *)))
                   GHC.IO.Exception.$fExceptionExitCode4
            of {
              False ->
                catch#
                  @ a_adPA7
                  @ SomeException
                  (case Data.Typeable.Internal.sameTypeRep
                          @ *
                          @ *
                          @ e1_idPKW
                          @ IOException
                          ((GHC.Exception.$p1Exception @ e1_idPKW $dException1_idPKX)
                           `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_idPKW>_N
                                   :: (Data.Typeable.Internal.Typeable e1_idPKW :: Constraint)
                                      ~R# (Data.Typeable.Internal.TypeRep e1_idPKW :: *)))
                          GHC.IO.Exception.$fExceptionIOException4
                   of {
                     False ->
                       \ (s1_X7JjT [OS=OneShot] :: State# RealWorld) ->
                         case GHC.Conc.Sync.uncaughtExceptionHandler
                              `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
                                      :: (GHC.IORef.IORef (SomeException -> IO ()) :: *)
                                         ~R# (GHC.STRef.STRef
                                                RealWorld (SomeException -> IO ()) :: *))
                         of
                         { GHC.STRef.STRef var#_idPLn ->
                         case readMutVar#
                                @ RealWorld @ (SomeException -> IO ()) var#_idPLn s1_X7JjT
                         of
                         { (# ipv4_idPLr, ipv5_idPLs #) ->
                         case ((ipv5_idPLs wild_idPKU)
                               `cast` (GHC.Types.N:IO[0] <()>_R
                                       :: (IO () :: *)
                                          ~R# (State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)))
                                ipv4_idPLr
                         of
                         { (# ipv6_X7JjZ, ipv7_X7Jk1 #) ->
                         ((exit_adPuv lvl_rdQlV)
                          `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                                  :: (IO a_adPA7 :: *)
                                     ~R# (State# RealWorld
                                          -> (# State# RealWorld, a_adPA7 #) :: *)))
                           ipv6_X7JjZ
                         }
                         }
                         };
                     True ->
                       case e2_idPKY
                            `cast` (UnsafeCo representational e1_idPKW IOException
                                    :: (e1_idPKW :: *) ~R# (IOException :: *))
                       of
                       { IOError ds3_ddPFc ds4_ddPFd ds5_ddPFe ds6_ddPFf ds7_ddPFg
                                 ds8_ddPFh ->
                       case ds4_ddPFd of {
                         __DEFAULT ->
                           \ (s1_X7JjT [OS=OneShot] :: State# RealWorld) ->
                             case GHC.Conc.Sync.uncaughtExceptionHandler
                                  `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
                                          :: (GHC.IORef.IORef (SomeException -> IO ()) :: *)
                                             ~R# (GHC.STRef.STRef
                                                    RealWorld (SomeException -> IO ()) :: *))
                             of
                             { GHC.STRef.STRef var#_idPLn ->
                             case readMutVar#
                                    @ RealWorld @ (SomeException -> IO ()) var#_idPLn s1_X7JjT
                             of
                             { (# ipv4_idPLr, ipv5_idPLs #) ->
                             case ((ipv5_idPLs wild_idPKU)
                                   `cast` (GHC.Types.N:IO[0] <()>_R
                                           :: (IO () :: *)
                                              ~R# (State# RealWorld
                                                   -> (# State# RealWorld, () #) :: *)))
                                    ipv4_idPLr
                             of
                             { (# ipv6_X7JjZ, ipv7_X7Jk1 #) ->
                             ((exit_adPuv lvl_rdQlV)
                              `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                                      :: (IO a_adPA7 :: *)
                                         ~R# (State# RealWorld
                                              -> (# State# RealWorld, a_adPA7 #) :: *)))
                               ipv6_X7JjZ
                             }
                             }
                             };
                         ResourceVanished ->
                           case ds7_ddPFg of {
                             Nothing ->
                               \ (s1_X7JjT [OS=OneShot] :: State# RealWorld) ->
                                 case GHC.Conc.Sync.uncaughtExceptionHandler
                                      `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
                                              :: (GHC.IORef.IORef (SomeException -> IO ()) :: *)
                                                 ~R# (GHC.STRef.STRef
                                                        RealWorld (SomeException -> IO ()) :: *))
                                 of
                                 { GHC.STRef.STRef var#_idPLn ->
                                 case readMutVar#
                                        @ RealWorld @ (SomeException -> IO ()) var#_idPLn s1_X7JjT
                                 of
                                 { (# ipv4_idPLr, ipv5_idPLs #) ->
                                 case ((ipv5_idPLs wild_idPKU)
                                       `cast` (GHC.Types.N:IO[0] <()>_R
                                               :: (IO () :: *)
                                                  ~R# (State# RealWorld
                                                       -> (# State# RealWorld, () #) :: *)))
                                        ipv4_idPLr
                                 of
                                 { (# ipv6_X7JjZ, ipv7_X7Jk1 #) ->
                                 ((exit_adPuv lvl_rdQlV)
                                  `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                                          :: (IO a_adPA7 :: *)
                                             ~R# (State# RealWorld
                                                  -> (# State# RealWorld, a_adPA7 #) :: *)))
                                   ipv6_X7JjZ
                                 }
                                 }
                                 };
                             Just ioe_adPuy ->
                               case ds3_ddPFc of {
                                 Nothing ->
                                   \ (s1_X7JjT [OS=OneShot] :: State# RealWorld) ->
                                     case GHC.Conc.Sync.uncaughtExceptionHandler
                                          `cast` (GHC.IORef.N:IORef[0] <SomeException -> IO ()>_N
                                                  :: (GHC.IORef.IORef (SomeException -> IO ()) :: *)
                                                     ~R# (GHC.STRef.STRef
                                                            RealWorld
                                                            (SomeException -> IO ()) :: *))
                                     of
                                     { GHC.STRef.STRef var#_idPLn ->
                                     case readMutVar#
                                            @ RealWorld
                                            @ (SomeException -> IO ())
                                            var#_idPLn
                                            s1_X7JjT
                                     of
                                     { (# ipv4_idPLr, ipv5_idPLs #) ->
                                     case ((ipv5_idPLs wild_idPKU)
                                           `cast` (GHC.Types.N:IO[0] <()>_R
                                                   :: (IO () :: *)
                                                      ~R# (State# RealWorld
                                                           -> (# State# RealWorld, () #) :: *)))
                                            ipv4_idPLr
                                     of
                                     { (# ipv6_X7JjZ, ipv7_X7Jk1 #) ->
                                     ((exit_adPuv lvl_rdQlV)
                                      `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                                              :: (IO a_adPA7 :: *)
                                                 ~R# (State# RealWorld
                                                      -> (# State# RealWorld, a_adPA7 #) :: *)))
                                       ipv6_X7JjZ
                                     }
                                     }
                                     };
                                 Just hdl_adPuz ->
                                   case ioe_adPuy
                                        `cast` (Foreign.C.Types.N:CInt[0]
                                                :: (CInt :: *) ~R# (Int32 :: *))
                                   of
                                   { GHC.Int.I32# x_idPLY ->
                                   case x_idPLY of {
                                     __DEFAULT ->
                                       \ (s1_X7JjT [OS=OneShot] :: State# RealWorld) ->
                                         case GHC.Conc.Sync.uncaughtExceptionHandler
                                              `cast` (GHC.IORef.N:IORef[0] <SomeException
                                                                            -> IO ()>_N
                                                      :: (GHC.IORef.IORef
                                                            (SomeException -> IO ()) :: *)
                                                         ~R# (GHC.STRef.STRef
                                                                RealWorld
                                                                (SomeException -> IO ()) :: *))
                                         of
                                         { GHC.STRef.STRef var#_idPLn ->
                                         case readMutVar#
                                                @ RealWorld
                                                @ (SomeException -> IO ())
                                                var#_idPLn
                                                s1_X7JjT
                                         of
                                         { (# ipv4_idPLr, ipv5_idPLs #) ->
                                         case ((ipv5_idPLs wild_idPKU)
                                               `cast` (GHC.Types.N:IO[0] <()>_R
                                                       :: (IO () :: *)
                                                          ~R# (State# RealWorld
                                                               -> (# State# RealWorld, () #) :: *)))
                                                ipv4_idPLr
                                         of
                                         { (# ipv6_X7JjZ, ipv7_X7Jk1 #) ->
                                         ((exit_adPuv lvl_rdQlV)
                                          `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                                                  :: (IO a_adPA7 :: *)
                                                     ~R# (State# RealWorld
                                                          -> (# State# RealWorld, a_adPA7 #) :: *)))
                                           ipv6_X7JjZ
                                         }
                                         }
                                         };
                                     32# ->
                                       join {
                                         $j_sdPXY [Dmd=<L,1*C1(U)>]
                                           :: State# RealWorld -> (# State# RealWorld, a_adPA7 #)
                                         [LclId[JoinId(0)],
                                          Arity=1,
                                          Unf=Unf{Src=InlineStable, TopLvl=False, Value=True,
                                                  ConLike=True, WorkFree=True, Expandable=True,
                                                  Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
                                                  Tmpl= \ (s1_X7JjT [Occ=Once, OS=OneShot]
                                                             :: State# RealWorld) ->
                                                          case GHC.Conc.Sync.uncaughtExceptionHandler
                                                               `cast` (GHC.IORef.N:IORef[0] <SomeException
                                                                                             -> IO
                                                                                                  ()>_N
                                                                       :: (GHC.IORef.IORef
                                                                             (SomeException
                                                                              -> IO ()) :: *)
                                                                          ~R# (GHC.STRef.STRef
                                                                                 RealWorld
                                                                                 (SomeException
                                                                                  -> IO ()) :: *))
                                                          of
                                                          { GHC.STRef.STRef var#_idPLn [Occ=Once] ->
                                                          case readMutVar#
                                                                 @ RealWorld
                                                                 @ (SomeException -> IO ())
                                                                 var#_idPLn
                                                                 s1_X7JjT
                                                          of
                                                          { (# ipv4_idPLr [Occ=Once],
                                                               ipv5_idPLs [Occ=Once!] #) ->
                                                          case ((ipv5_idPLs wild_idPKU)
                                                                `cast` (GHC.Types.N:IO[0] <()>_R
                                                                        :: (IO () :: *)
                                                                           ~R# (State# RealWorld
                                                                                -> (# State#
                                                                                        RealWorld,
                                                                                      () #) :: *)))
                                                                 ipv4_idPLr
                                                          of
                                                          { (# ipv6_X7JjZ [Occ=Once],
                                                               _ [Occ=Dead] #) ->
                                                          ((exit_adPuv lvl_rdQlV)
                                                           `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                                                                   :: (IO a_adPA7 :: *)
                                                                      ~R# (State# RealWorld
                                                                           -> (# State# RealWorld,
                                                                                 a_adPA7 #) :: *)))
                                                            ipv6_X7JjZ
                                                          }
                                                          }
                                                          }}]
                                         $j_sdPXY
                                           = \ (s1_X7JjT [OS=OneShot] :: State# RealWorld) ->
                                               case GHC.Conc.Sync.uncaughtExceptionHandler
                                                    `cast` (GHC.IORef.N:IORef[0] <SomeException
                                                                                  -> IO ()>_N
                                                            :: (GHC.IORef.IORef
                                                                  (SomeException -> IO ()) :: *)
                                                               ~R# (GHC.STRef.STRef
                                                                      RealWorld
                                                                      (SomeException
                                                                       -> IO ()) :: *))
                                               of
                                               { GHC.STRef.STRef var#_idPLn ->
                                               case readMutVar#
                                                      @ RealWorld
                                                      @ (SomeException -> IO ())
                                                      var#_idPLn
                                                      s1_X7JjT
                                               of
                                               { (# ipv4_idPLr, ipv5_idPLs #) ->
                                               case ((ipv5_idPLs wild_idPKU)
                                                     `cast` (GHC.Types.N:IO[0] <()>_R
                                                             :: (IO () :: *)
                                                                ~R# (State# RealWorld
                                                                     -> (# State# RealWorld,
                                                                           () #) :: *)))
                                                      ipv4_idPLr
                                               of
                                               { (# ipv6_X7JjZ, ipv7_X7Jk1 #) ->
                                               ((exit_adPuv lvl_rdQlV)
                                                `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                                                        :: (IO a_adPA7 :: *)
                                                           ~R# (State# RealWorld
                                                                -> (# State# RealWorld,
                                                                      a_adPA7 #) :: *)))
                                                 ipv6_X7JjZ
                                               }
                                               }
                                               } } in
                                       case hdl_adPuz of {
                                         GHC.IO.Handle.Types.FileHandle ds9_idPMr dt_idPMs ->
                                           case stdout of {
                                             GHC.IO.Handle.Types.FileHandle ds10_idPMB dt1_idPMC ->
                                               case sameMVar#
                                                      @ RealWorld
                                                      @ GHC.IO.Handle.Types.Handle__
                                                      dt_idPMs
                                                      dt1_idPMC
                                               of {
                                                 __DEFAULT -> jump $j_sdPXY;
                                                 1# ->
                                                   (exit_adPuv lvl1_rdQlW)
                                                   `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                                                           :: (IO a_adPA7 :: *)
                                                              ~R# (State# RealWorld
                                                                   -> (# State# RealWorld,
                                                                         a_adPA7 #) :: *))
                                               };
                                             GHC.IO.Handle.Types.DuplexHandle ipv4_idPXO ipv5_idPXP
                                                                              ipv6_idPXQ ->
                                               jump $j_sdPXY
                                           };
                                         GHC.IO.Handle.Types.DuplexHandle ds9_idPMG dt_idPMH
                                                                          dt1_idPMI ->
                                           case stdout of {
                                             GHC.IO.Handle.Types.FileHandle ipv4_idPXS ipv5_idPXT ->
                                               jump $j_sdPXY;
                                             GHC.IO.Handle.Types.DuplexHandle ds10_idPMN dt2_idPMO
                                                                              dt3_idPMP ->
                                               case sameMVar#
                                                      @ RealWorld
                                                      @ GHC.IO.Handle.Types.Handle__
                                                      dt_idPMH
                                                      dt2_idPMO
                                               of {
                                                 __DEFAULT -> jump $j_sdPXY;
                                                 1# ->
                                                   (exit_adPuv lvl1_rdQlW)
                                                   `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                                                           :: (IO a_adPA7 :: *)
                                                              ~R# (State# RealWorld
                                                                   -> (# State# RealWorld,
                                                                         a_adPA7 #) :: *))
                                               }
                                           }
                                       }
                                   }
                                   }
                               }
                           }
                       }
                       }
                   })
                  (\ (e4_idPLc [OS=OneShot] :: SomeException)
                     (eta_B1 [OS=OneShot] :: State# RealWorld) ->
                     case e4_idPLc of wild2_idPLw
                     { SomeException @ e5_idPLy $dException2_idPLz e6_idPLA ->
                     case Data.Typeable.Internal.sameTypeRep
                            @ *
                            @ *
                            @ e5_idPLy
                            @ IOException
                            ((GHC.Exception.$p1Exception @ e5_idPLy $dException2_idPLz)
                             `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e5_idPLy>_N
                                     :: (Data.Typeable.Internal.Typeable e5_idPLy :: Constraint)
                                        ~R# (Data.Typeable.Internal.TypeRep e5_idPLy :: *)))
                            GHC.IO.Exception.$fExceptionIOException4
                     of {
                       False -> raiseIO# @ SomeException @ a_adPA7 wild2_idPLw eta_B1;
                       True ->
                         case lvl3_rdQm2 of { I# v1_B2 ->
                         case newAlignedPinnedByteArray# @ RealWorld (+# v1_B2 1#) 1# eta_B1
                         of
                         { (# ipv4_idPN1, ipv5_idPN2 #) ->
                         case unsafeFreezeByteArray# @ RealWorld ipv5_idPN2 ipv4_idPN1 of
                         { (# ipv6_idPN7, ipv7_idPN8 #) ->
                         let {
                           ptr_sdPUn [Dmd=<S,U>] :: Addr#
                           [LclId]
                           ptr_sdPUn = byteArrayContents# ipv7_idPN8 } in
                         join {
                           exit1_sdPUm [Dmd=<C(C(S)),C(C1(U))>]
                             :: Int# -> State# RealWorld -> (# State# RealWorld, a_adPA7 #)
                           [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>]
                           exit1_sdPUm (ww_idPNb [OS=OneShot] :: Int#)
                                       (w_idPNc [OS=OneShot] :: State# RealWorld)
                             = case writeInt8OffAddr# @ RealWorld ptr_sdPUn ww_idPNb 0# w_idPNc
                               of s2_idPNd
                               { __DEFAULT ->
                               case lvl2_rdQm1 of { I# v3_X2L ->
                               case newAlignedPinnedByteArray#
                                      @ RealWorld (+# v3_X2L 1#) 1# s2_idPNd
                               of
                               { (# ipv8_XdPOP, ipv9_XdPOR #) ->
                               case unsafeFreezeByteArray# @ RealWorld ipv9_XdPOR ipv8_XdPOP of
                               { (# ipv10_XdPP0, ipv11_XdPP2 #) ->
                               let {
                                 ptr1_sdPUt [Dmd=<S,U>] :: Addr#
                                 [LclId]
                                 ptr1_sdPUt = byteArrayContents# ipv11_XdPP2 } in
                               join {
                                 exit2_sdPUs [Dmd=<C(C(S)),C(C1(U))>]
                                   :: Int# -> State# RealWorld -> (# State# RealWorld, a_adPA7 #)
                                 [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>]
                                 exit2_sdPUs (ww1_XdPPa [OS=OneShot] :: Int#)
                                             (w1_XdPPc [OS=OneShot] :: State# RealWorld)
                                   = case writeInt8OffAddr#
                                            @ RealWorld ptr1_sdPUt ww1_XdPPa 0# w1_XdPPc
                                     of s1_XdPPe
                                     { __DEFAULT ->
                                     case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr# -> State# RealWorld -> (# State# RealWorld #)}_ddPGQ
                                            ptr_sdPUn ptr1_sdPUt s1_XdPPe
                                     of
                                     { (# ds7_ddPGO #) ->
                                     case ((exit_adPuv lvl_rdQlV)
                                           `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                                                   :: (IO a_adPA7 :: *)
                                                      ~R# (State# RealWorld
                                                           -> (# State# RealWorld,
                                                                 a_adPA7 #) :: *)))
                                            ds7_ddPGO
                                     of
                                     { (# ipv12_idPNg, ipv13_idPNh #) ->
                                     case touch# @ 'UnliftedRep @ ByteArray# ipv11_XdPP2 ipv12_idPNg
                                     of s4_idPNj
                                     { __DEFAULT ->
                                     case touch# @ 'UnliftedRep @ ByteArray# ipv7_idPN8 s4_idPNj
                                     of s3_XdPQd
                                     { __DEFAULT ->
                                     (# s3_XdPQd, ipv13_idPNh #)
                                     }
                                     }
                                     }
                                     }
                                     } } in
                               joinrec {
                                 $wgo_sdPUr [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                   :: [Char]
                                      -> Int# -> State# RealWorld -> (# State# RealWorld, a_adPA7 #)
                                 [LclId[JoinId(3)], Arity=3, Str=<S,1*U><S,U><S,U>, Unf=OtherCon []]
                                 $wgo_sdPUr (w1_idPNl :: [Char])
                                            (ww1_idPNm :: Int#)
                                            (w2_idPNn :: State# RealWorld)
                                   = case w1_idPNl of {
                                       [] -> jump exit2_sdPUs ww1_idPNm w2_idPNn;
                                       : c_idPNs cs_idPNt ->
                                         case c_idPNs of { C# c#_idPNx ->
                                         case writeInt8OffAddr#
                                                @ RealWorld
                                                ptr1_sdPUt
                                                ww1_idPNm
                                                (narrow8Int# (ord# c#_idPNx))
                                                w2_idPNn
                                         of s1_idPNz
                                         { __DEFAULT ->
                                         jump $wgo_sdPUr cs_idPNt (+# ww1_idPNm 1#) s1_idPNz
                                         }
                                         }
                                     }; } in
                               jump $wgo_sdPUr msgStr1_rdQlY 0# ipv10_XdPP0
                               }
                               }
                               }
                               } } in
                         joinrec {
                           $wgo_sdPUj [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                             :: [Char]
                                -> Int# -> State# RealWorld -> (# State# RealWorld, a_adPA7 #)
                           [LclId[JoinId(3)], Arity=3, Str=<S,1*U><S,U><S,U>, Unf=OtherCon []]
                           $wgo_sdPUj (w_idPNl :: [Char])
                                      (ww_idPNm :: Int#)
                                      (w1_idPNn :: State# RealWorld)
                             = case w_idPNl of {
                                 [] -> jump exit1_sdPUm ww_idPNm w1_idPNn;
                                 : c_idPNs cs_idPNt ->
                                   case c_idPNs of { C# c#_idPNx ->
                                   case writeInt8OffAddr#
                                          @ RealWorld
                                          ptr_sdPUn
                                          ww_idPNm
                                          (narrow8Int# (ord# c#_idPNx))
                                          w1_idPNn
                                   of s2_idPNz
                                   { __DEFAULT ->
                                   jump $wgo_sdPUj cs_idPNt (+# ww_idPNm 1#) s2_idPNz
                                   }
                                   }
                               }; } in
                         jump $wgo_sdPUj str1_rdQm0 0# ipv6_idPN7
                         }
                         }
                         }
                     }
                     })
                  ipv2_X7Jk9;
              True ->
                case e2_idPKY
                     `cast` (UnsafeCo representational e1_idPKW ExitCode
                             :: (e1_idPKW :: *) ~R# (ExitCode :: *))
                of {
                  ExitSuccess ->
                    ((exit_adPuv lvl1_rdQlW)
                     `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                             :: (IO a_adPA7 :: *)
                                ~R# (State# RealWorld -> (# State# RealWorld, a_adPA7 #) :: *)))
                      ipv2_X7Jk9;
                  ExitFailure n_adPux ->
                    ((exit_adPuv n_adPux)
                     `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                             :: (IO a_adPA7 :: *)
                                ~R# (State# RealWorld -> (# State# RealWorld, a_adPA7 #) :: *)))
                      ipv2_X7Jk9
                }
            }
            } } in
      case GHC.IO.Exception.$fExceptionAsyncException_$cfromException
             se_adPuw
      of {
        Nothing -> jump fail_sdPUd void#;
        Just ds_ddPFE ->
          case ds_ddPFE of {
            StackOverflow ->
              case myThreadId# ipv2_X7Jk9 of { (# ipv4_idPOt, ipv5_idPOu #) ->
              case {__pkg_ccall base-4.11.0.0 ThreadId#
                           -> State# RealWorld -> (# State# RealWorld #)}_idPOs
                     ipv5_idPOu ipv4_idPOt
              of
              { (# ds4_idPOy #) ->
              ((exit_adPuv lvl4_rdQm3)
               `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                       :: (IO a_adPA7 :: *)
                          ~R# (State# RealWorld -> (# State# RealWorld, a_adPA7 #) :: *)))
                ds4_idPOy
              }
              };
            HeapOverflow ->
              case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld #)}_idPE4
                     ipv2_X7Jk9
              of
              { (# ds3_idPE7 #) ->
              ((exit_adPuv lvl5_rdQm4)
               `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                       :: (IO a_adPA7 :: *)
                          ~R# (State# RealWorld -> (# State# RealWorld, a_adPA7 #) :: *)))
                ds3_idPE7
              };
            ThreadKilled -> jump fail_sdPUd void#;
            UserInterrupt ->
              ((exitInterrupted_rdPu2 @ a_adPA7)
               `cast` (GHC.Types.N:IO[0] <a_adPA7>_R
                       :: (IO a_adPA7 :: *)
                          ~R# (State# RealWorld -> (# State# RealWorld, a_adPA7 #) :: *)))
                ipv2_X7Jk9
          }
      }
      }
      }

Rec {
-- RHS size: {terms: 6, types: 6, coercions: 0, joins: 0/0}
GHC.TopHandler.runIO2
  :: forall a.
     SomeException -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_adPBc)
                 (e1_idPLc [Occ=Once, OS=OneShot] :: SomeException)
                 (eta_B1 [Occ=Once, OS=OneShot] :: State# RealWorld) ->
                 GHC.TopHandler.runIO3 @ a_adPBc e1_idPLc eta_B1}]
GHC.TopHandler.runIO2
  = \ (@ a_adPBc)
      (e1_idPLc [OS=OneShot] :: SomeException)
      (eta_B1 [OS=OneShot] :: State# RealWorld) ->
      GHC.TopHandler.runIO3 @ a_adPBc e1_idPLc eta_B1

-- RHS size: {terms: 9, types: 10, coercions: 0, joins: 0/0}
GHC.TopHandler.runIO3 [Occ=LoopBreaker]
  :: forall a.
     SomeException -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []]
GHC.TopHandler.runIO3
  = \ (@ a_adPBc)
      (err_adPut :: SomeException)
      (eta_idPLb :: State# RealWorld) ->
      catch#
        @ a_adPBc
        @ SomeException
        (real_handler_rdQm5 @ a_adPBc (safeExit_rdPtY @ a_adPBc) err_adPut)
        (GHC.TopHandler.runIO2 @ a_adPBc)
        eta_idPLb
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
topHandler :: forall a. SomeException -> IO a
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TopHandler.runIO3
               `cast` (forall (a :: <*>_N).
                       <SomeException>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           SomeException
                           -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. SomeException -> IO a :: *))}]
topHandler
  = GHC.TopHandler.runIO3
    `cast` (forall (a :: <*>_N).
            <SomeException>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                SomeException
                -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. SomeException -> IO a :: *))

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/0}
GHC.TopHandler.runNonIO1
  :: forall a. a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_adPBl)
                 (a1_adPus [Occ=Once] :: a_adPBl)
                 (eta_idPLb [Occ=Once] :: State# RealWorld) ->
                 catch#
                   @ a_adPBl
                   @ SomeException
                   (case a1_adPus of a2_XdPuK { __DEFAULT ->
                    \ (s_i7IAV [Occ=Once, OS=OneShot] :: State# RealWorld) ->
                      (# s_i7IAV, a2_XdPuK #)
                    })
                   (GHC.TopHandler.runIO2 @ a_adPBl)
                   eta_idPLb}]
GHC.TopHandler.runNonIO1
  = \ (@ a_adPBl)
      (a1_adPus :: a_adPBl)
      (eta_idPLb :: State# RealWorld) ->
      catch#
        @ a_adPBl
        @ SomeException
        (case a1_adPus of a2_XdPuK { __DEFAULT ->
         \ (s_i7IAV [OS=OneShot] :: State# RealWorld) ->
           (# s_i7IAV, a2_XdPuK #)
         })
        (GHC.TopHandler.runIO2 @ a_adPBl)
        eta_idPLb

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
runNonIO :: forall a. a -> IO a
[GblId,
 Arity=2,
 Str=<L,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TopHandler.runNonIO1
               `cast` (forall (a :: <*>_N).
                       <a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. a -> IO a :: *))}]
runNonIO
  = GHC.TopHandler.runNonIO1
    `cast` (forall (a :: <*>_N).
            <a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. a -> IO a :: *))

-- RHS size: {terms: 7, types: 9, coercions: 2, joins: 0/0}
GHC.TopHandler.runIO1
  :: forall a. IO a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,1*C1(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_adPBD)
                 (main_adPuq [Occ=Once] :: IO a_adPBD)
                 (eta_idPLb [Occ=Once] :: State# RealWorld) ->
                 catch#
                   @ a_adPBD
                   @ SomeException
                   (main_adPuq
                    `cast` (GHC.Types.N:IO[0] <a_adPBD>_R
                            :: (IO a_adPBD :: *)
                               ~R# (State# RealWorld -> (# State# RealWorld, a_adPBD #) :: *)))
                   (GHC.TopHandler.runIO2 @ a_adPBD)
                   eta_idPLb}]
GHC.TopHandler.runIO1
  = \ (@ a_adPBD)
      (main_adPuq :: IO a_adPBD)
      (eta_idPLb :: State# RealWorld) ->
      catch#
        @ a_adPBD
        @ SomeException
        (main_adPuq
         `cast` (GHC.Types.N:IO[0] <a_adPBD>_R
                 :: (IO a_adPBD :: *)
                    ~R# (State# RealWorld -> (# State# RealWorld, a_adPBD #) :: *)))
        (GHC.TopHandler.runIO2 @ a_adPBD)
        eta_idPLb

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
runIO :: forall a. IO a -> IO a
[GblId,
 Arity=2,
 Str=<L,1*C1(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TopHandler.runIO1
               `cast` (forall (a :: <*>_N).
                       <IO a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           IO a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. IO a -> IO a :: *))}]
runIO
  = GHC.TopHandler.runIO1
    `cast` (forall (a :: <*>_N).
            <IO a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                IO a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. IO a -> IO a :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
fastExit1_rdQm6 :: Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
fastExit1_rdQm6 = GHC.Int.I32# 1#

-- RHS size: {terms: 8, types: 6, coercions: 2, joins: 0/0}
fastExit_rdPtZ :: forall a. Int -> IO a
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []]
fastExit_rdPtZ
  = \ (@ a_adPz5) (w_sdQcp :: Int) ->
      case w_sdQcp of { I# ww1_sdQcs ->
      $wexitHelper_rdQlT
        @ a_adPz5
        (fastExit1_rdQm6
         `cast` (Sym (Foreign.C.Types.N:CInt[0])
                 :: (Int32 :: *) ~R# (CInt :: *)))
        ww1_sdQcs
      }

Rec {
-- RHS size: {terms: 6, types: 6, coercions: 0, joins: 0/0}
GHC.TopHandler.runIOFastExit2
  :: forall a.
     SomeException -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_adPB0)
                 (e1_idPOT [Occ=Once, OS=OneShot] :: SomeException)
                 (eta_B1 [Occ=Once, OS=OneShot] :: State# RealWorld) ->
                 GHC.TopHandler.runIOFastExit3 @ a_adPB0 e1_idPOT eta_B1}]
GHC.TopHandler.runIOFastExit2
  = \ (@ a_adPB0)
      (e1_idPOT [OS=OneShot] :: SomeException)
      (eta_B1 [OS=OneShot] :: State# RealWorld) ->
      GHC.TopHandler.runIOFastExit3 @ a_adPB0 e1_idPOT eta_B1

-- RHS size: {terms: 9, types: 10, coercions: 0, joins: 0/0}
GHC.TopHandler.runIOFastExit3 [Occ=LoopBreaker]
  :: forall a.
     SomeException -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []]
GHC.TopHandler.runIOFastExit3
  = \ (@ a_adPB0)
      (err_adPuu :: SomeException)
      (eta_idPOR :: State# RealWorld) ->
      catch#
        @ a_adPB0
        @ SomeException
        (real_handler_rdQm5 @ a_adPB0 (fastExit_rdPtZ @ a_adPB0) err_adPuu)
        (GHC.TopHandler.runIOFastExit2 @ a_adPB0)
        eta_idPOR
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
topHandlerFastExit :: forall a. SomeException -> IO a
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TopHandler.runIOFastExit3
               `cast` (forall (a :: <*>_N).
                       <SomeException>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           SomeException
                           -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. SomeException -> IO a :: *))}]
topHandlerFastExit
  = GHC.TopHandler.runIOFastExit3
    `cast` (forall (a :: <*>_N).
            <SomeException>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                SomeException
                -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. SomeException -> IO a :: *))

-- RHS size: {terms: 7, types: 9, coercions: 2, joins: 0/0}
GHC.TopHandler.runIOFastExit1
  :: forall a. IO a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,1*C1(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_adPBw)
                 (main_adPur [Occ=Once] :: IO a_adPBw)
                 (eta_idPLb [Occ=Once] :: State# RealWorld) ->
                 catch#
                   @ a_adPBw
                   @ SomeException
                   (main_adPur
                    `cast` (GHC.Types.N:IO[0] <a_adPBw>_R
                            :: (IO a_adPBw :: *)
                               ~R# (State# RealWorld -> (# State# RealWorld, a_adPBw #) :: *)))
                   (GHC.TopHandler.runIOFastExit2 @ a_adPBw)
                   eta_idPLb}]
GHC.TopHandler.runIOFastExit1
  = \ (@ a_adPBw)
      (main_adPur :: IO a_adPBw)
      (eta_idPLb :: State# RealWorld) ->
      catch#
        @ a_adPBw
        @ SomeException
        (main_adPur
         `cast` (GHC.Types.N:IO[0] <a_adPBw>_R
                 :: (IO a_adPBw :: *)
                    ~R# (State# RealWorld -> (# State# RealWorld, a_adPBw #) :: *)))
        (GHC.TopHandler.runIOFastExit2 @ a_adPBw)
        eta_idPLb

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
runIOFastExit :: forall a. IO a -> IO a
[GblId,
 Arity=2,
 Str=<L,1*C1(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TopHandler.runIOFastExit1
               `cast` (forall (a :: <*>_N).
                       <IO a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           IO a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. IO a -> IO a :: *))}]
runIOFastExit
  = GHC.TopHandler.runIOFastExit1
    `cast` (forall (a :: <*>_N).
            <IO a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                IO a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. IO a -> IO a :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TopHandler.runMainIO3 :: SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.TopHandler.runMainIO3
  = GHC.IO.Exception.$fExceptionAsyncException_$ctoException
      GHC.IO.Exception.UserInterrupt

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TopHandler.runMainIO4 :: Int32
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TopHandler.runMainIO4 = GHC.Int.I32# 2#

-- RHS size: {terms: 92, types: 163, coercions: 13, joins: 0/0}
GHC.TopHandler.runMainIO1
  :: forall a. IO a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,1*C1(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 0] 293 0}]
GHC.TopHandler.runMainIO1
  = \ (@ a_adPCw)
      (main_adPui :: IO a_adPCw)
      (eta_idPLb :: State# RealWorld) ->
      catch#
        @ a_adPCw
        @ SomeException
        (\ (s_i7IAv [OS=OneShot] :: State# RealWorld) ->
           case myThreadId# s_i7IAv of { (# ipv_idPQK, ipv1_idPQL #) ->
           case mkWeakNoFinalizer#
                  @ 'UnliftedRep
                  @ ThreadId#
                  @ ThreadId
                  ipv1_idPQL
                  (GHC.Conc.Sync.ThreadId ipv1_idPQL)
                  ipv_idPQK
           of
           { (# ipv2_idPQX, ipv3_idPQY #) ->
           case {__pkg_ccall base-4.11.0.0 Weak# ThreadId
                           -> State# RealWorld -> (# State# RealWorld #)}_ddPH9
                  ipv3_idPQY ipv2_idPQX
           of
           { (# ds2_ddPH7 #) ->
           case GHC.Conc.Signal.setHandler1
                  (GHC.TopHandler.runMainIO4
                   `cast` (Sym (Foreign.C.Types.N:CInt[0])
                           :: (Int32 :: *) ~R# (CInt :: *)))
                  (GHC.Base.Just
                     @ (ForeignPtr Word8 -> IO (), Data.Dynamic.Dynamic)
                     ((\ _ [Occ=Dead] (eta1_B1 :: State# RealWorld) ->
                         case deRefWeak# @ ThreadId ipv3_idPQY eta1_B1 of
                         { (# ipv4_idPRc, ipv5_idPRd, ipv6_idPRe #) ->
                         case ipv5_idPRd of {
                           __DEFAULT ->
                             case ipv6_idPRe of { ThreadId tid_idPRq ->
                             case killThread#
                                    @ SomeException tid_idPRq GHC.TopHandler.runMainIO3 ipv4_idPRc
                             of s1_idPRs
                             { __DEFAULT ->
                             (# s1_idPRs, GHC.Tuple.() #)
                             }
                             };
                           0# -> (# ipv4_idPRc, GHC.Tuple.() #)
                         }
                         })
                      `cast` (<ForeignPtr Word8>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                              :: (ForeignPtr Word8
                                  -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                                 ~R# (ForeignPtr Word8 -> IO () :: *)),
                      Data.Dynamic.Dynamic
                        @ (IO ())
                        GHC.TopHandler.runMainIO2
                        ((\ (s1_X7ICc :: State# RealWorld) ->
                            case deRefWeak# @ ThreadId ipv3_idPQY s1_X7ICc of
                            { (# ipv4_idPRc, ipv5_idPRd, ipv6_idPRe #) ->
                            case ipv5_idPRd of {
                              __DEFAULT ->
                                case ipv6_idPRe of { ThreadId tid_idPRq ->
                                case killThread#
                                       @ SomeException
                                       tid_idPRq
                                       GHC.TopHandler.runMainIO3
                                       ipv4_idPRc
                                of s2_idPRs
                                { __DEFAULT ->
                                (# s2_idPRs, GHC.Tuple.() #)
                                }
                                };
                              0# -> (# ipv4_idPRc, GHC.Tuple.() #)
                            }
                            })
                         `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                                 :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                                    ~R# (IO () :: *)))))
                  ds2_ddPH7
           of
           { (# ipv4_X7IBU, ipv5_X7IBW #) ->
           case {__pkg_ccall base-4.11.0.0 Int#
                           -> Int#
                           -> Addr#
                           -> State# RealWorld
                           -> (# State# RealWorld, Int# #)}_ddPH4
                  2# -5# __NULL ipv4_X7IBU
           of
           { (# ds4_ddPH2, ds5_ddPH1 #) ->
           (main_adPui
            `cast` (GHC.Types.N:IO[0] <a_adPCw>_R
                    :: (IO a_adPCw :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, a_adPCw #) :: *)))
             ds4_ddPH2
           }
           }
           }
           }
           })
        (GHC.TopHandler.runIO2 @ a_adPCw)
        eta_idPLb

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
runMainIO :: forall a. IO a -> IO a
[GblId,
 Arity=2,
 Str=<L,1*C1(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TopHandler.runMainIO1
               `cast` (forall (a :: <*>_N).
                       <IO a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           IO a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. IO a -> IO a :: *))}]
runMainIO
  = GHC.TopHandler.runMainIO1
    `cast` (forall (a :: <*>_N).
            <IO a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                IO a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. IO a -> IO a :: *))


