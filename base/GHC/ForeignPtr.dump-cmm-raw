
==================== Raw Cmm ====================
2018-03-16 16:02:50.191824273 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:50.194129256 UTC

[section ""data" . GHC.ForeignPtr.$WPlainForeignPtr_closure" {
     GHC.ForeignPtr.$WPlainForeignPtr_closure:
         const GHC.ForeignPtr.$WPlainForeignPtr_info;
 },
 GHC.ForeignPtr.$WPlainForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7Lds: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ldw; else goto c7Ldx;
       c7Ldw: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$WPlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ldx: // global
           I64[Sp - 8] = block_c7Ldp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LdB; else goto c7Ldq;
       u7LdB: // global
           call _c7Ldp(R1) args: 0, res: 0, upd: 0;
       c7Ldq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$WPlainForeignPtr_info" {
     GHC.ForeignPtr.$WPlainForeignPtr_info:
         const GHC.ForeignPtr.$WPlainForeignPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Ldp() //  [R1]
         { []
         }
     {offset
       c7Ldp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LdA; else goto c7Ldz;
       c7LdA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ldz: // global
           _s7KbE::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _s7KbE::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ldp_info" {
     block_c7Ldp_info:
         const _c7Ldp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.200936124 UTC

[section ""data" . GHC.ForeignPtr.$WMallocPtr_closure" {
     GHC.ForeignPtr.$WMallocPtr_closure:
         const GHC.ForeignPtr.$WMallocPtr_info;
 },
 GHC.ForeignPtr.$WMallocPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LdT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LdX; else goto c7LdY;
       c7LdX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$WMallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LdY: // global
           I64[Sp - 16] = block_c7LdQ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Le2; else goto c7LdR;
       u7Le2: // global
           call _c7LdQ(R1) args: 0, res: 0, upd: 0;
       c7LdR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$WMallocPtr_info" {
     GHC.ForeignPtr.$WMallocPtr_info:
         const GHC.ForeignPtr.$WMallocPtr_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7LdQ() //  [R1]
         { []
         }
     {offset
       c7LdQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Le1; else goto c7Le0;
       c7Le1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Le0: // global
           _s7KbI::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s7KbI::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LdQ_info" {
     block_c7LdQ_info:
         const _c7LdQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.206262203 UTC

[section ""cstring" . lvl_r7KaV_bytes" {
     lvl_r7KaV_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.208909132 UTC

[section ""data" . lvl1_r7KaW_closure" {
     lvl1_r7KaW_closure:
         const lvl1_r7KaW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r7KaW_entry() //  [R1]
         { []
         }
     {offset
       c7Lel: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lem; else goto c7Len;
       c7Lem: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Len: // global
           (_c7Lei::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lei::I64 == 0) goto c7Lek; else goto c7Lej;
       c7Lek: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Lej: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lei::I64;
           R2 = lvl_r7KaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r7KaW_info" {
     lvl1_r7KaW_info:
         const lvl1_r7KaW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.213036293 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule4_bytes" {
     GHC.ForeignPtr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.215630017 UTC

[section ""data" . lvl2_r7KaX_closure" {
     lvl2_r7KaX_closure:
         const lvl2_r7KaX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r7KaX_entry() //  [R1]
         { []
         }
     {offset
       c7LeC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LeD; else goto c7LeE;
       c7LeD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LeE: // global
           (_c7Lez::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lez::I64 == 0) goto c7LeB; else goto c7LeA;
       c7LeB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LeA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lez::I64;
           R2 = GHC.ForeignPtr.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r7KaX_info" {
     lvl2_r7KaX_info:
         const lvl2_r7KaX_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.219520914 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule2_bytes" {
     GHC.ForeignPtr.$trModule2_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.222265865 UTC

[section ""data" . lvl3_r7KaY_closure" {
     lvl3_r7KaY_closure:
         const lvl3_r7KaY_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r7KaY_entry() //  [R1]
         { []
         }
     {offset
       c7LeT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LeU; else goto c7LeV;
       c7LeU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LeV: // global
           (_c7LeQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LeQ::I64 == 0) goto c7LeS; else goto c7LeR;
       c7LeS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LeR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LeQ::I64;
           R2 = GHC.ForeignPtr.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r7KaY_info" {
     lvl3_r7KaY_info:
         const lvl3_r7KaY_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.226026358 UTC

[section ""cstring" . lvl4_r7KaZ_bytes" {
     lvl4_r7KaZ_bytes:
         I8[] [46,47,71,72,67,47,70,111,114,101,105,103,110,80,116,114,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.229470563 UTC

[section ""data" . lvl5_r7Kb0_closure" {
     lvl5_r7Kb0_closure:
         const lvl5_r7Kb0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r7Kb0_entry() //  [R1]
         { []
         }
     {offset
       c7Lfa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lfb; else goto c7Lfc;
       c7Lfb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Lfc: // global
           (_c7Lf7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lf7::I64 == 0) goto c7Lf9; else goto c7Lf8;
       c7Lf9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Lf8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lf7::I64;
           R2 = lvl4_r7KaZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r7Kb0_info" {
     lvl5_r7Kb0_info:
         const lvl5_r7Kb0_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.233190721 UTC

[section ""data" . lvl6_r7Kb1_closure" {
     lvl6_r7Kb1_closure:
         const GHC.Types.I#_con_info;
         const 214;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.235152525 UTC

[section ""data" . lvl7_r7Kb2_closure" {
     lvl7_r7Kb2_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.236862058 UTC

[section ""data" . lvl8_r7Kb3_closure" {
     lvl8_r7Kb3_closure:
         const GHC.Types.I#_con_info;
         const 43;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.239086792 UTC

[section ""data" . lvl9_r7Kb4_closure" {
     lvl9_r7Kb4_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl6_r7Kb1_closure+1;
         const lvl7_r7Kb2_closure+1;
         const lvl6_r7Kb1_closure+1;
         const lvl8_r7Kb3_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.240950183 UTC

[section ""data" . lvl10_r7Kb5_closure" {
     lvl10_r7Kb5_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl9_r7Kb4_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.243732225 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr2_entry() //  [R1]
         { []
         }
     {offset
       c7Lfv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lfw; else goto c7Lfx;
       c7Lfw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Lfx: // global
           (_c7Lfs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lfs::I64 == 0) goto c7Lfu; else goto c7Lft;
       c7Lfu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Lft: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lfs::I64;
           R2 = lvl10_r7Kb5_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtr2_info" {
     GHC.ForeignPtr.mallocPlainForeignPtr2_info:
         const GHC.ForeignPtr.mallocPlainForeignPtr2_entry;
         const 0;
         const 12884901909;
         const S7KkP_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.24773761 UTC

[section ""cstring" . lvl11_r7Kb6_bytes" {
     lvl11_r7Kb6_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.250577682 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr2_closure" {
     GHC.ForeignPtr.mallocForeignPtr2_closure:
         const GHC.ForeignPtr.mallocForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr2_entry() //  [R1]
         { []
         }
     {offset
       c7LfO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LfP; else goto c7LfQ;
       c7LfP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LfQ: // global
           (_c7LfJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LfJ::I64 == 0) goto c7LfL; else goto c7LfK;
       c7LfL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LfK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LfJ::I64;
           I64[Sp - 24] = block_c7LfM_info;
           R2 = lvl11_r7Kb6_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtr2_info" {
     GHC.ForeignPtr.mallocForeignPtr2_info:
         const GHC.ForeignPtr.mallocForeignPtr2_entry;
         const 0;
         const 4294967317;
         const S7KkP_srt+16;
 },
 _c7LfM() //  [R1]
         { []
         }
     {offset
       c7LfM: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7LfM_info" {
     block_c7LfM_info:
         const _c7LfM;
         const 0;
         const 4294967326;
         const S7KkP_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.258373437 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr1_entry() //  [R2]
         { []
         }
     {offset
       c7Lga: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Lge; else goto c7Lgf;
       c7Lge: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lgf: // global
           I64[Sp - 16] = block_c7Lg8_info;
           _s7KbK::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           P64[Sp - 8] = _s7KbK::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtr1_info" {
     GHC.ForeignPtr.mallocPlainForeignPtr1_info:
         const GHC.ForeignPtr.mallocPlainForeignPtr1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const S7KkP_srt+24;
 },
 _c7Lg8() //  [R1]
         { []
         }
     {offset
       c7Lg8: // global
           I64[Sp] = block_c7Lgd_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lg8_info" {
     block_c7Lg8_info:
         const _c7Lg8;
         const 1;
         const 21474836510;
         const S7KkP_srt+24;
 },
 _c7Lgd() //  [R1]
         { []
         }
     {offset
       c7Lgd: // global
           _s7KbP::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KbP::I64, 0)) goto c7Lgw; else goto c7LgA;
       c7Lgw: // global
           _s7KbN::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7Lgo_info;
           R2 = _s7KbN::I64;
           R1 = _s7KbP::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c7LgA: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lgd_info" {
     block_c7Lgd_info:
         const _c7Lgd;
         const 65;
         const 4294967326;
         const S7KkP_srt+24;
 },
 _c7Lgo() //  [R1]
         { []
         }
     {offset
       c7Lgo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Lgz; else goto c7Lgy;
       c7Lgz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lgy: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lgo_info" {
     block_c7Lgo_info:
         const _c7Lgo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.268953476 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7LgX: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtr_info" {
     GHC.ForeignPtr.mallocPlainForeignPtr_info:
         const GHC.ForeignPtr.mallocPlainForeignPtr_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7KkP_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.2722806 UTC

[section ""cstring" . lvl12_r7Kb7_bytes" {
     lvl12_r7Kb7_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.27508339 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes2_entry() //  [R1]
         { []
         }
     {offset
       c7Lhd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lhe; else goto c7Lhf;
       c7Lhe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Lhf: // global
           (_c7Lh8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lh8::I64 == 0) goto c7Lha; else goto c7Lh9;
       c7Lha: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Lh9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lh8::I64;
           I64[Sp - 24] = block_c7Lhb_info;
           R2 = lvl12_r7Kb7_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_entry;
         const 0;
         const 4294967317;
         const S7KkP_srt+16;
 },
 _c7Lhb() //  [R1]
         { []
         }
     {offset
       c7Lhb: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Lhb_info" {
     block_c7Lhb_info:
         const _c7Lhb;
         const 0;
         const 4294967326;
         const S7KkP_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.282222141 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry() //  [R2]
         { []
         }
     {offset
       c7LhA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7LhB; else goto c7LhC;
       c7LhB: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LhC: // global
           I64[Sp - 8] = block_c7Lhx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LhW; else goto c7Lhy;
       u7LhW: // global
           call _c7Lhx(R1) args: 0, res: 0, upd: 0;
       c7Lhy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S7KkP_srt+48;
 },
 _c7Lhx() //  [R1]
         { []
         }
     {offset
       c7Lhx: // global
           _s7Kc2::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kc2::I64, 0)) goto c7LhR; else goto c7LhV;
       c7LhR: // global
           I64[Sp] = block_c7LhJ_info;
           R1 = _s7Kc2::I64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7LhV: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lhx_info" {
     block_c7Lhx_info:
         const _c7Lhx;
         const 0;
         const 4294967326;
         const S7KkP_srt+56;
 },
 _c7LhJ() //  [R1]
         { []
         }
     {offset
       c7LhJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7LhU; else goto c7LhT;
       c7LhU: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LhT: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LhJ_info" {
     block_c7LhJ_info:
         const _c7LhJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.290221903 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes_entry() //  [R2]
         { []
         }
     {offset
       c7Lig: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrBytes_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7KkP_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.293523812 UTC

[section ""cstring" . lvl13_r7Kb8_bytes" {
     lvl13_r7Kb8_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.296361569 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_entry() //  [R1]
         { []
         }
     {offset
       c7Liw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lix; else goto c7Liy;
       c7Lix: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Liy: // global
           (_c7Lir::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Lir::I64 == 0) goto c7Lit; else goto c7Lis;
       c7Lit: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Lis: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Lir::I64;
           I64[Sp - 24] = block_c7Liu_info;
           R2 = lvl13_r7Kb8_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_entry;
         const 0;
         const 4294967317;
         const S7KkP_srt+16;
 },
 _c7Liu() //  [R1]
         { []
         }
     {offset
       c7Liu: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Liu_info" {
     block_c7Liu_info:
         const _c7Liu;
         const 0;
         const 4294967326;
         const S7KkP_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.304480095 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c7LiT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LiU; else goto c7LiV;
       c7LiU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LiV: // global
           I64[Sp - 16] = block_c7LiQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Ljm; else goto c7LiR;
       u7Ljm: // global
           call _c7LiQ(R1) args: 0, res: 0, upd: 0;
       c7LiR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S7KkP_srt+64;
 },
 _c7LiQ() //  [R1]
         { []
         }
     {offset
       c7LiQ: // global
           _s7Kcg::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kcg::I64, 0)) goto c7Ljf; else goto c7Ljk;
       c7Ljf: // global
           I64[Sp] = block_c7Lj2_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kcg::I64;
           if (R1 & 7 != 0) goto u7Ljl; else goto c7Lj3;
       u7Ljl: // global
           call _c7Lj2(R1) args: 0, res: 0, upd: 0;
       c7Lj3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Ljk: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LiQ_info" {
     block_c7LiQ_info:
         const _c7LiQ;
         const 1;
         const 4294967326;
         const S7KkP_srt+72;
 },
 _c7Lj2() //  [R1]
         { []
         }
     {offset
       c7Lj2: // global
           _s7Kcg::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7Lj7_info;
           R2 = I64[R1 + 7];
           R1 = _s7Kcg::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lj2_info" {
     block_c7Lj2_info:
         const _c7Lj2;
         const 65;
         const 30;
 },
 _c7Lj7() //  [R1]
         { []
         }
     {offset
       c7Lj7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Ljj; else goto c7Lji;
       c7Ljj: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lji: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lj7_info" {
     block_c7Lj7_info:
         const _c7Lj7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.313971632 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c7LjK: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7KkP_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.317148748 UTC

[section ""cstring" . lvl14_r7Kb9_bytes" {
     lvl14_r7Kb9_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,109,105,120,32,72,97,115,107,101,108,108,32,97,110,100,32,67,32,102,105,110,97,108,105,122,101,114,115,32,105,110,32,116,104,101,32,115,97,109,101,32,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.319910781 UTC

[section ""data" . GHC.ForeignPtr.noMixingError_closure" {
     GHC.ForeignPtr.noMixingError_closure:
         const GHC.ForeignPtr.noMixingError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.noMixingError_entry() //  [R1]
         { []
         }
     {offset
       c7Lk0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lk1; else goto c7Lk2;
       c7Lk1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Lk2: // global
           (_c7LjV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LjV::I64 == 0) goto c7LjX; else goto c7LjW;
       c7LjX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LjW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LjV::I64;
           I64[Sp - 24] = block_c7LjY_info;
           R2 = lvl14_r7Kb9_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.noMixingError_info" {
     GHC.ForeignPtr.noMixingError_info:
         const GHC.ForeignPtr.noMixingError_entry;
         const 0;
         const 4294967317;
         const S7KkP_srt+16;
 },
 _c7LjY() //  [R1]
         { []
         }
     {offset
       c7LjY: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7LjY_info" {
     block_c7LjY_info:
         const _c7LjY;
         const 0;
         const 4294967326;
         const S7KkP_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.326464779 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr1_closure" {
     GHC.ForeignPtr.touchForeignPtr1_closure:
         const GHC.ForeignPtr.touchForeignPtr1_info;
 },
 GHC.ForeignPtr.touchForeignPtr1_entry() //  [R2]
         { []
         }
     {offset
       c7Lkn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Lko; else goto c7Lkp;
       c7Lko: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.touchForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lkp: // global
           I64[Sp - 8] = block_c7Lkk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Lku; else goto c7Lkl;
       u7Lku: // global
           call _c7Lkk(R1) args: 0, res: 0, upd: 0;
       c7Lkl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.touchForeignPtr1_info" {
     GHC.ForeignPtr.touchForeignPtr1_info:
         const GHC.ForeignPtr.touchForeignPtr1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7Lkk() //  [R1]
         { []
         }
     {offset
       c7Lkk: // global
           call MO_Touch(P64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lkk_info" {
     block_c7Lkk_info:
         const _c7Lkk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.332090694 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr_closure" {
     GHC.ForeignPtr.touchForeignPtr_closure:
         const GHC.ForeignPtr.touchForeignPtr_info;
 },
 GHC.ForeignPtr.touchForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7LkJ: // global
           R2 = R2;
           call GHC.ForeignPtr.touchForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.touchForeignPtr_info" {
     GHC.ForeignPtr.touchForeignPtr_info:
         const GHC.ForeignPtr.touchForeignPtr_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.33644651 UTC

[section ""data" . GHC.ForeignPtr.unsafeForeignPtrToPtr_closure" {
     GHC.ForeignPtr.unsafeForeignPtrToPtr_closure:
         const GHC.ForeignPtr.unsafeForeignPtrToPtr_info;
 },
 GHC.ForeignPtr.unsafeForeignPtrToPtr_entry() //  [R2]
         { []
         }
     {offset
       c7LkX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Ll1; else goto c7Ll2;
       c7Ll1: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.unsafeForeignPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ll2: // global
           I64[Sp - 8] = block_c7LkU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ll6; else goto c7LkV;
       u7Ll6: // global
           call _c7LkU(R1) args: 0, res: 0, upd: 0;
       c7LkV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.unsafeForeignPtrToPtr_info" {
     GHC.ForeignPtr.unsafeForeignPtrToPtr_info:
         const GHC.ForeignPtr.unsafeForeignPtrToPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7LkU() //  [R1]
         { []
         }
     {offset
       c7LkU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Ll5; else goto c7Ll4;
       c7Ll5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Ll4: // global
           _s7KcA::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7KcA::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LkU_info" {
     block_c7LkU_info:
         const _c7LkU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.344468511 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c7Llo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Llu; else goto c7Llv;
       c7Llu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Llv: // global
           I64[Sp - 16] = block_c7Lll_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LlA; else goto c7Llm;
       u7LlA: // global
           call _c7Lll(R1) args: 0, res: 0, upd: 0;
       c7Llm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S7KkP_srt+80;
 },
 _c7Lll() //  [R1]
         { []
         }
     {offset
       c7Lll: // global
           _s7KcE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7Llr_info;
           R3 = _s7KcE::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lll_info" {
     block_c7Lll_info:
         const _c7Lll;
         const 1;
         const 4294967326;
         const S7KkP_srt+80;
 },
 _c7Llr() //  [R1, R2]
         { []
         }
     {offset
       c7Llr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Llz; else goto c7Lly;
       c7Llz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7Lly: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Llr_info" {
     block_c7Llr_info:
         const _c7Llr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.353027761 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c7LlV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Lm1; else goto c7Lm2;
       c7Lm1: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lm2: // global
           I64[Sp - 8] = block_c7LlS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Lm7; else goto c7LlT;
       u7Lm7: // global
           call _c7LlS(R1) args: 0, res: 0, upd: 0;
       c7LlT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fShowForeignPtr_$cshow_info" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshow_info:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S7KkP_srt+80;
 },
 _c7LlS() //  [R1]
         { []
         }
     {offset
       c7LlS: // global
           I64[Sp] = block_c7LlY_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 15];
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LlS_info" {
     block_c7LlS_info:
         const _c7LlS;
         const 0;
         const 4294967326;
         const S7KkP_srt+80;
 },
 _c7LlY() //  [R1, R2]
         { []
         }
     {offset
       c7LlY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Lm6; else goto c7Lm5;
       c7Lm6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7Lm5: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LlY_info" {
     block_c7LlY_info:
         const _c7LlY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.361843015 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr1_closure" {
     GHC.ForeignPtr.$fShowForeignPtr1_closure:
         const GHC.ForeignPtr.$fShowForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Lms: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lmy; else goto c7Lmz;
       c7Lmy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lmz: // global
           I64[Sp - 16] = block_c7Lmp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LmE; else goto c7Lmq;
       u7LmE: // global
           call _c7Lmp(R1) args: 0, res: 0, upd: 0;
       c7Lmq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fShowForeignPtr1_info" {
     GHC.ForeignPtr.$fShowForeignPtr1_info:
         const GHC.ForeignPtr.$fShowForeignPtr1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S7KkP_srt+80;
 },
 _c7Lmp() //  [R1]
         { []
         }
     {offset
       c7Lmp: // global
           _s7KcT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7Lmv_info;
           R3 = _s7KcT::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lmp_info" {
     block_c7Lmp_info:
         const _c7Lmp;
         const 1;
         const 4294967326;
         const S7KkP_srt+80;
 },
 _c7Lmv() //  [R1, R2]
         { []
         }
     {offset
       c7Lmv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7LmD; else goto c7LmC;
       c7LmD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7LmC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lmv_info" {
     block_c7Lmv_info:
         const _c7Lmv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.370092552 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LmW: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ForeignPtr.$fShowForeignPtr1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S7KkP_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.373685649 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure+3;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure+1;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.37762849 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Lnb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lnf; else goto c7Lng;
       c7Lnf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lng: // global
           I64[Sp - 16] = block_c7Ln8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lnz; else goto c7Ln9;
       u7Lnz: // global
           call _c7Ln8(R1) args: 0, res: 0, upd: 0;
       c7Ln9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Ln8() //  [R1]
         { []
         }
     {offset
       c7Ln8: // global
           I64[Sp] = block_c7Lne_info;
           _s7Kd5::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kd5::I64;
           if (R1 & 7 != 0) goto u7Lny; else goto c7Lni;
       u7Lny: // global
           call _c7Lne(R1) args: 0, res: 0, upd: 0;
       c7Lni: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ln8_info" {
     block_c7Ln8_info:
         const _c7Ln8;
         const 1;
         const 30;
 },
 _c7Lne() //  [R1]
         { []
         }
     {offset
       c7Lne: // global
           _s7Kd5::I64 = I64[Sp + 8];
           _s7Kd8::I64 = I64[R1 + 15];
           if (_s7Kd5::I64 >= _s7Kd8::I64) goto c7Lnw; else goto c7Lnx;
       c7Lnw: // global
           if (_s7Kd5::I64 == _s7Kd8::I64) goto c7Lnu; else goto c7Lnt;
       c7Lnu: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Lnt: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Lnx: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lne_info" {
     block_c7Lne_info:
         const _c7Lne;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.387267882 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c==_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c==_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LnX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lo1; else goto c7Lo2;
       c7Lo1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lo2: // global
           I64[Sp - 16] = block_c7LnU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lob; else goto c7LnV;
       u7Lob: // global
           call _c7LnU(R1) args: 0, res: 0, upd: 0;
       c7LnV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fEqForeignPtr_$c==_info" {
     GHC.ForeignPtr.$fEqForeignPtr_$c==_info:
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7LnU() //  [R1]
         { []
         }
     {offset
       c7LnU: // global
           I64[Sp] = block_c7Lo0_info;
           _s7Kdf::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdf::I64;
           if (R1 & 7 != 0) goto u7Loa; else goto c7Lo4;
       u7Loa: // global
           call _c7Lo0(R1) args: 0, res: 0, upd: 0;
       c7Lo4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LnU_info" {
     block_c7LnU_info:
         const _c7LnU;
         const 1;
         const 30;
 },
 _c7Lo0() //  [R1]
         { []
         }
     {offset
       c7Lo0: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lo0_info" {
     block_c7Lo0_info:
         const _c7Lo0;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.395772955 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LoA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LoE; else goto c7LoF;
       c7LoE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LoF: // global
           I64[Sp - 16] = block_c7Lox_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LoS; else goto c7Loy;
       u7LoS: // global
           call _c7Lox(R1) args: 0, res: 0, upd: 0;
       c7Loy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fEqForeignPtr_$c/=_info" {
     GHC.ForeignPtr.$fEqForeignPtr_$c/=_info:
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Lox() //  [R1]
         { []
         }
     {offset
       c7Lox: // global
           I64[Sp] = block_c7LoD_info;
           _s7Kdo::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdo::I64;
           if (R1 & 7 != 0) goto u7LoR; else goto c7LoH;
       u7LoR: // global
           call _c7LoD(R1) args: 0, res: 0, upd: 0;
       c7LoH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lox_info" {
     block_c7Lox_info:
         const _c7Lox;
         const 1;
         const 30;
 },
 _c7LoD() //  [R1]
         { []
         }
     {offset
       c7LoD: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7LoQ; else goto c7LoP;
       c7LoQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LoP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LoD_info" {
     block_c7LoD_info:
         const _c7LoD;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.402740416 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_closure+2;
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.406331403 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Lph: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lpl; else goto c7Lpm;
       c7Lpl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lpm: // global
           I64[Sp - 16] = block_c7Lpe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lpz; else goto c7Lpf;
       u7Lpz: // global
           call _c7Lpe(R1) args: 0, res: 0, upd: 0;
       c7Lpf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$c<_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Lpe() //  [R1]
         { []
         }
     {offset
       c7Lpe: // global
           I64[Sp] = block_c7Lpk_info;
           _s7Kdx::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kdx::I64;
           if (R1 & 7 != 0) goto u7Lpy; else goto c7Lpo;
       u7Lpy: // global
           call _c7Lpk(R1) args: 0, res: 0, upd: 0;
       c7Lpo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lpe_info" {
     block_c7Lpe_info:
         const _c7Lpe;
         const 1;
         const 30;
 },
 _c7Lpk() //  [R1]
         { []
         }
     {offset
       c7Lpk: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7Lpw; else goto c7Lpx;
       c7Lpw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Lpx: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lpk_info" {
     block_c7Lpk_info:
         const _c7Lpk;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.415229094 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LpX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lq1; else goto c7Lq2;
       c7Lq1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lq2: // global
           I64[Sp - 16] = block_c7LpU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lqf; else goto c7LpV;
       u7Lqf: // global
           call _c7LpU(R1) args: 0, res: 0, upd: 0;
       c7LpV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7LpU() //  [R1]
         { []
         }
     {offset
       c7LpU: // global
           I64[Sp] = block_c7Lq0_info;
           _s7KdG::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdG::I64;
           if (R1 & 7 != 0) goto u7Lqe; else goto c7Lq4;
       u7Lqe: // global
           call _c7Lq0(R1) args: 0, res: 0, upd: 0;
       c7Lq4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LpU_info" {
     block_c7LpU_info:
         const _c7LpU;
         const 1;
         const 30;
 },
 _c7Lq0() //  [R1]
         { []
         }
     {offset
       c7Lq0: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7Lqc; else goto c7Lqd;
       c7Lqc: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Lqd: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lq0_info" {
     block_c7Lq0_info:
         const _c7Lq0;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.425528218 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LqD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LqH; else goto c7LqI;
       c7LqH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LqI: // global
           I64[Sp - 16] = block_c7LqA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lr1; else goto c7LqB;
       u7Lr1: // global
           call _c7LqA(R1) args: 0, res: 0, upd: 0;
       c7LqB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$c>_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7LqA() //  [R1]
         { []
         }
     {offset
       c7LqA: // global
           I64[Sp] = block_c7LqG_info;
           _s7KdP::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdP::I64;
           if (R1 & 7 != 0) goto u7Lr0; else goto c7LqK;
       u7Lr0: // global
           call _c7LqG(R1) args: 0, res: 0, upd: 0;
       c7LqK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LqA_info" {
     block_c7LqA_info:
         const _c7LqA;
         const 1;
         const 30;
 },
 _c7LqG() //  [R1]
         { []
         }
     {offset
       c7LqG: // global
           _s7KdP::I64 = I64[Sp + 8];
           _s7KdS::I64 = I64[R1 + 15];
           if (_s7KdP::I64 < _s7KdS::I64) goto c7LqZ; else goto c7LqY;
       c7LqY: // global
           if (_s7KdP::I64 == _s7KdS::I64) goto c7LqZ; else goto c7LqV;
       c7LqZ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LqV: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LqG_info" {
     block_c7LqG_info:
         const _c7LqG;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.43462547 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Lro: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lrs; else goto c7Lrt;
       c7Lrs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lrt: // global
           I64[Sp - 16] = block_c7Lrl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LrM; else goto c7Lrm;
       u7LrM: // global
           call _c7Lrl(R1) args: 0, res: 0, upd: 0;
       c7Lrm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Lrl() //  [R1]
         { []
         }
     {offset
       c7Lrl: // global
           I64[Sp] = block_c7Lrr_info;
           _s7KdZ::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KdZ::I64;
           if (R1 & 7 != 0) goto u7LrL; else goto c7Lrv;
       u7LrL: // global
           call _c7Lrr(R1) args: 0, res: 0, upd: 0;
       c7Lrv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lrl_info" {
     block_c7Lrl_info:
         const _c7Lrl;
         const 1;
         const 30;
 },
 _c7Lrr() //  [R1]
         { []
         }
     {offset
       c7Lrr: // global
           _s7KdZ::I64 = I64[Sp + 8];
           _s7Ke2::I64 = I64[R1 + 15];
           if (_s7KdZ::I64 < _s7Ke2::I64) goto c7LrK; else goto c7LrJ;
       c7LrJ: // global
           if (_s7KdZ::I64 == _s7Ke2::I64) goto c7LrK; else goto c7LrG;
       c7LrK: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LrG: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lrr_info" {
     block_c7Lrr_info:
         const _c7Lrr;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.443579691 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Ls9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lsd; else goto c7Lse;
       c7Lsd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lse: // global
           I64[Sp - 16] = block_c7Ls6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lsx; else goto c7Ls7;
       u7Lsx: // global
           call _c7Ls6(R1) args: 0, res: 0, upd: 0;
       c7Ls7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Ls6() //  [R1]
         { []
         }
     {offset
       c7Ls6: // global
           I64[Sp - 8] = block_c7Lsc_info;
           _s7Ke8::P64 = R1;
           _s7Ke9::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7Ke9::I64;
           P64[Sp + 8] = _s7Ke8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Lsw; else goto c7Lsg;
       u7Lsw: // global
           call _c7Lsc(R1) args: 0, res: 0, upd: 0;
       c7Lsg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ls6_info" {
     block_c7Ls6_info:
         const _c7Ls6;
         const 1;
         const 30;
 },
 _c7Lsc() //  [R1]
         { []
         }
     {offset
       c7Lsc: // global
           _s7Ke9::I64 = I64[Sp + 8];
           _s7Keb::P64 = R1;
           _s7Kec::I64 = I64[R1 + 15];
           if (_s7Ke9::I64 < _s7Kec::I64) goto c7Lsv; else goto c7Lsu;
       c7Lsu: // global
           if (_s7Ke9::I64 == _s7Kec::I64) goto c7Lsv; else goto c7Lsr;
       c7Lsv: // global
           R1 = _s7Keb::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7Lsr: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lsc_info" {
     block_c7Lsc_info:
         const _c7Lsc;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.452561984 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LsW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Lt0; else goto c7Lt1;
       c7Lt0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lt1: // global
           I64[Sp - 16] = block_c7LsT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Ltk; else goto c7LsU;
       u7Ltk: // global
           call _c7LsT(R1) args: 0, res: 0, upd: 0;
       c7LsU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7LsT() //  [R1]
         { []
         }
     {offset
       c7LsT: // global
           I64[Sp - 8] = block_c7LsZ_info;
           _s7Kei::P64 = R1;
           _s7Kej::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7Kej::I64;
           P64[Sp + 8] = _s7Kei::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ltj; else goto c7Lt3;
       u7Ltj: // global
           call _c7LsZ(R1) args: 0, res: 0, upd: 0;
       c7Lt3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LsT_info" {
     block_c7LsT_info:
         const _c7LsT;
         const 1;
         const 30;
 },
 _c7LsZ() //  [R1]
         { []
         }
     {offset
       c7LsZ: // global
           _s7Kei::P64 = P64[Sp + 16];
           _s7Kej::I64 = I64[Sp + 8];
           _s7Kem::I64 = I64[R1 + 15];
           if (_s7Kej::I64 < _s7Kem::I64) goto c7Lti; else goto c7Lth;
       c7Lth: // global
           if (_s7Kej::I64 == _s7Kem::I64) goto c7Lti; else goto c7Lte;
       c7Lti: // global
           R1 = _s7Kei::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7Lte: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LsZ_info" {
     block_c7LsZ_info:
         const _c7LsZ;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.460838129 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_closure+1;
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.463675353 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr1_closure" {
     GHC.ForeignPtr.castForeignPtr1_closure:
         const GHC.ForeignPtr.castForeignPtr1_info;
 },
 GHC.ForeignPtr.castForeignPtr1_entry() //  [R2]
         { []
         }
     {offset
       c7LtH: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.castForeignPtr1_info" {
     GHC.ForeignPtr.castForeignPtr1_info:
         const GHC.ForeignPtr.castForeignPtr1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.468516437 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr_closure" {
     GHC.ForeignPtr.castForeignPtr_closure:
         const GHC.ForeignPtr.castForeignPtr_info;
 },
 GHC.ForeignPtr.castForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7LtU: // global
           R2 = R2;
           call GHC.ForeignPtr.castForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.castForeignPtr_info" {
     GHC.ForeignPtr.castForeignPtr_info:
         const GHC.ForeignPtr.castForeignPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.473663636 UTC

[section ""data" . GHC.ForeignPtr.plusForeignPtr_closure" {
     GHC.ForeignPtr.plusForeignPtr_closure:
         const GHC.ForeignPtr.plusForeignPtr_info;
 },
 GHC.ForeignPtr.plusForeignPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Lu8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Luk; else goto c7Lul;
       c7Luk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.plusForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Lul: // global
           I64[Sp - 16] = block_c7Lu5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lur; else goto c7Lu6;
       u7Lur: // global
           call _c7Lu5(R1) args: 0, res: 0, upd: 0;
       c7Lu6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.plusForeignPtr_info" {
     GHC.ForeignPtr.plusForeignPtr_info:
         const GHC.ForeignPtr.plusForeignPtr_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Lu5() //  [R1]
         { []
         }
     {offset
       c7Lu5: // global
           I64[Sp - 8] = block_c7Lub_info;
           _s7Kev::P64 = P64[R1 + 7];
           _s7Keu::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7Kev::P64;
           I64[Sp + 8] = _s7Keu::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Luq; else goto c7Luc;
       u7Luq: // global
           call _c7Lub(R1) args: 0, res: 0, upd: 0;
       c7Luc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lu5_info" {
     block_c7Lu5_info:
         const _c7Lu5;
         const 1;
         const 30;
 },
 _c7Lub() //  [R1]
         { []
         }
     {offset
       c7Lub: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Lup; else goto c7Luo;
       c7Lup: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Luo: // global
           _s7Key::I64 = I64[Sp + 16] + I64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s7Key::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lub_info" {
     block_c7Lub_info:
         const _c7Lub;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.480903258 UTC

[section ""data" . GHC.ForeignPtr.$trModule3_closure" {
     GHC.ForeignPtr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.482859723 UTC

[section ""data" . GHC.ForeignPtr.$trModule1_closure" {
     GHC.ForeignPtr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.484801273 UTC

[section ""data" . GHC.ForeignPtr.$trModule_closure" {
     GHC.ForeignPtr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ForeignPtr.$trModule3_closure+1;
         const GHC.ForeignPtr.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.486728632 UTC

[section ""data" . $krep_r7Kba_closure" {
     $krep_r7Kba_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.488562022 UTC

[section ""data" . $krep1_r7Kbb_closure" {
     $krep1_r7Kbb_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.490565161 UTC

[section ""data" . $krep2_r7Kbc_closure" {
     $krep2_r7Kbc_closure:
         const :_con_info;
         const $krep1_r7Kbb_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.492206222 UTC

[section ""data" . $krep3_r7Kbd_closure" {
     $krep3_r7Kbd_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.494048558 UTC

[section ""data" . $krep4_r7Kbe_closure" {
     $krep4_r7Kbe_closure:
         const :_con_info;
         const $krep3_r7Kbd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.49576656 UTC

[section ""data" . $krep5_r7Kbf_closure" {
     $krep5_r7Kbf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_r7Kbe_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.49806136 UTC

[section ""data" . $krep6_r7Kbg_closure" {
     $krep6_r7Kbg_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.499672131 UTC

[section ""data" . $krep7_r7Kbh_closure" {
     $krep7_r7Kbh_closure:
         const :_con_info;
         const $krep_r7Kba_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.501367894 UTC

[section ""data" . $krep8_r7Kbi_closure" {
     $krep8_r7Kbi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep7_r7Kbh_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.503055298 UTC

[section ""data" . $krep9_r7Kbj_closure" {
     $krep9_r7Kbj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWeak#_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.504753551 UTC

[section ""data" . $krep10_r7Kbk_closure" {
     $krep10_r7Kbk_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcAddr#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.506425213 UTC

[section ""cstring" . GHC.ForeignPtr.$tcFinalizers2_bytes" {
     GHC.ForeignPtr.$tcFinalizers2_bytes:
         I8[] [70,105,110,97,108,105,122,101,114,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.508063753 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers1_closure" {
     GHC.ForeignPtr.$tcFinalizers1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcFinalizers2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.50989281 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers_closure" {
     GHC.ForeignPtr.$tcFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcFinalizers1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2126386461452460014;
         const 14391791758474672075;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.511700051 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers1_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcFinalizers_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.513400702 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'NoFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'NoFinalizers3_bytes:
         I8[] [39,78,111,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.514981118 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers2_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.516686196 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 1940741700794708869;
         const 15606281748314638871;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.518552034 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers1_closure" {
     GHC.ForeignPtr.$tc'CFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.520256387 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'CFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'CFinalizers3_bytes:
         I8[] [39,67,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.522473399 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers2_closure" {
     GHC.ForeignPtr.$tc'CFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'CFinalizers3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.524287014 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers_closure" {
     GHC.ForeignPtr.$tc'CFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers1_closure+4;
         const 5471016724267814004;
         const 11112927960337249170;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.526534286 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers1_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r7Kbf_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.528205212 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes:
         I8[] [39,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.52978055 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers2_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.531503217 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers1_closure+4;
         const 2766439294378598012;
         const 9182349323511249767;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.533367559 UTC

[section ""data" . $krep11_r7Kbl_closure" {
     $krep11_r7Kbl_closure:
         const :_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.535123639 UTC

[section ""data" . $krep12_r7Kbm_closure" {
     $krep12_r7Kbm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep11_r7Kbl_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.536822024 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtrContents2_bytes" {
     GHC.ForeignPtr.$tcForeignPtrContents2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114,67,111,110,116,101,110,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.538985131 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents1_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.540840123 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtrContents1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2960910307208088010;
         const 1419315288615932334;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.542676399 UTC

[section ""data" . $krep13_r7Kbn_closure" {
     $krep13_r7Kbn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.544426153 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.54645516 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainPtr3_bytes:
         I8[] [39,80,108,97,105,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.548720301 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.550509431 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr_closure" {
     GHC.ForeignPtr.$tc'PlainPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr1_closure+4;
         const 10386497703892305970;
         const 4483570029522342780;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.552256493 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7Kbm_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.554030726 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes:
         I8[] [39,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.555683709 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.557624393 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 9658214180323125435;
         const 4797612916438137994;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.559444779 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr1_closure" {
     GHC.ForeignPtr.$tc'MallocPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.561098006 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MallocPtr3_bytes" {
     GHC.ForeignPtr.$tc'MallocPtr3_bytes:
         I8[] [39,77,97,108,108,111,99,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.562827565 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr2_closure" {
     GHC.ForeignPtr.$tc'MallocPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MallocPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.564567598 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr_closure" {
     GHC.ForeignPtr.$tc'MallocPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr2_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr1_closure+4;
         const 1358169953258233372;
         const 15155489453511463859;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.566402767 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtr2_bytes" {
     GHC.ForeignPtr.$tcForeignPtr2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.568115587 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr1_closure" {
     GHC.ForeignPtr.$tcForeignPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.569799463 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr_closure" {
     GHC.ForeignPtr.$tcForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 13645276010227069957;
         const 424768606850180054;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.57155971 UTC

[section ""data" . $krep14_r7Kbo_closure" {
     $krep14_r7Kbo_closure:
         const :_con_info;
         const $krep6_r7Kbg_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.574023803 UTC

[section ""data" . $krep15_r7Kbp_closure" {
     $krep15_r7Kbp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure+1;
         const $krep14_r7Kbo_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.575777552 UTC

[section ""data" . $krep16_r7Kbq_closure" {
     $krep16_r7Kbq_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7Kbn_closure+1;
         const $krep15_r7Kbp_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.577517062 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7Kbk_closure+1;
         const $krep16_r7Kbq_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.579214805 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'ForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'ForeignPtr3_bytes:
         I8[] [39,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.580895614 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'ForeignPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.58267048 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr1_closure+4;
         const 15066988800190837275;
         const 12331496810414125071;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.584393061 UTC

[section ""cstring" . GHC.ForeignPtr.$tcMyWeak2_bytes" {
     GHC.ForeignPtr.$tcMyWeak2_bytes:
         I8[] [77,121,87,101,97,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.586427492 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak1_closure" {
     GHC.ForeignPtr.$tcMyWeak1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcMyWeak2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.58821769 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak_closure" {
     GHC.ForeignPtr.$tcMyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcMyWeak1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18176044154139657744;
         const 6003369520845561213;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.589988256 UTC

[section ""data" . $krep17_r7Kbr_closure" {
     $krep17_r7Kbr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcMyWeak_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.591643659 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak1_closure" {
     GHC.ForeignPtr.$tc'MyWeak1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const $krep17_r7Kbr_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.593380056 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MyWeak3_bytes" {
     GHC.ForeignPtr.$tc'MyWeak3_bytes:
         I8[] [39,77,121,87,101,97,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.595110817 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak2_closure" {
     GHC.ForeignPtr.$tc'MyWeak2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MyWeak3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.596949727 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak_closure" {
     GHC.ForeignPtr.$tc'MyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak2_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak1_closure+4;
         const 12419514784912020020;
         const 3312746660203758866;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.600092952 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr_1_closure" {
     GHC.ForeignPtr.newForeignPtr_1_closure:
         const GHC.ForeignPtr.newForeignPtr_1_info;
 },
 GHC.ForeignPtr.newForeignPtr_1_entry() //  [R2]
         { []
         }
     {offset
       c7LvT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lw0; else goto c7Lw1;
       c7Lw0: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.newForeignPtr_1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lw1: // global
           I64[Sp - 8] = block_c7LvQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Lw6; else goto c7LvR;
       u7Lw6: // global
           call _c7LvQ(R1) args: 0, res: 0, upd: 0;
       c7LvR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.newForeignPtr_1_info" {
     GHC.ForeignPtr.newForeignPtr_1_info:
         const GHC.ForeignPtr.newForeignPtr_1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7LvQ() //  [R1]
         { []
         }
     {offset
       c7LvQ: // global
           I64[Sp - 8] = block_c7LvW_info;
           _s7KeC::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KeC::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LvQ_info" {
     block_c7LvQ_info:
         const _c7LvQ;
         const 0;
         const 30;
 },
 _c7LvW() //  [R1]
         { []
         }
     {offset
       c7LvW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Lw5; else goto c7Lw4;
       c7Lw5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lw4: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LvW_info" {
     block_c7LvW_info:
         const _c7LvW;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.607966747 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr__closure" {
     GHC.ForeignPtr.newForeignPtr__closure:
         const GHC.ForeignPtr.newForeignPtr__info;
 },
 GHC.ForeignPtr.newForeignPtr__entry() //  [R2]
         { []
         }
     {offset
       c7Lwq: // global
           R2 = R2;
           call GHC.ForeignPtr.newForeignPtr_1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.newForeignPtr__info" {
     GHC.ForeignPtr.newForeignPtr__info:
         const GHC.ForeignPtr.newForeignPtr__entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.617117126 UTC

[section ""data" . GHC.ForeignPtr.$winsertCFinalizer_closure" {
     GHC.ForeignPtr.$winsertCFinalizer_closure:
         const GHC.ForeignPtr.$winsertCFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$winsertCFinalizer_slow() //  [R1]
         { []
         }
     {offset
       c7Lwy: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_s7Kf6_entry() //  [R1, R2]
         { []
         }
     {offset
       c7Lx0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Lx1; else goto c7Lx2;
       c7Lx1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Lx2: // global
           I64[Sp - 16] = block_c7LwS_info;
           _s7KeZ::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s7KeZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Lxi; else goto c7LwT;
       u7Lxi: // global
           call _c7LwS(R1) args: 0, res: 0, upd: 0;
       c7LwT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Kf6_info" {
     sat_s7Kf6_info:
         const sat_s7Kf6_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S7KkP_srt+112;
 },
 _c7LwS() //  [R1]
         { []
         }
     {offset
       c7LwS: // global
           _c7LwZ::P64 = R1 & 7;
           if (_c7LwZ::P64 < 3) goto u7Lxh; else goto c7LwY;
       u7Lxh: // global
           if (_c7LwZ::P64 < 2) goto c7LwW; else goto c7LwX;
       c7LwW: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LwX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7Lxd; else goto c7Lxc;
       c7Lxd: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lxc: // global
           _s7Kf2::P64 = P64[R1 + 6];
           I64[Hp - 56] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 48] = _s7Kf2::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 55;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 39;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LwY: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LwS_info" {
     block_c7LwS_info:
         const _c7LwS;
         const 1;
         const 4294967326;
         const S7KkP_srt+112;
 },
 GHC.ForeignPtr.$winsertCFinalizer_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7Lxo: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7Lxp; else goto u7Lyz;
       c7Lxp: // global
           R1 = GHC.ForeignPtr.$winsertCFinalizer_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       u7Lyz: // global
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _c7Lwz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$winsertCFinalizer_info" {
     GHC.ForeignPtr.$winsertCFinalizer_info:
         const GHC.ForeignPtr.$winsertCFinalizer_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const S7KkP_srt+112;
         const 1926;
         const GHC.ForeignPtr.$winsertCFinalizer_slow;
 },
 _c7Lwz() //  []
         { []
         }
     {offset
       c7Lwz: // global
           _s7KeR::P64 = P64[P64[Sp] + 8];
           I64[Sp - 8] = block_c7LwC_info;
           R1 = _s7KeR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LyH; else goto c7LwD;
       u7LyH: // global
           call _c7LwC(R1) args: 0, res: 0, upd: 0;
       c7LwD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LwC() //  [R1]
         { []
         }
     {offset
       c7LwC: // global
           _c7Lxn::P64 = R1 & 7;
           if (_c7Lxn::P64 < 3) goto u7Lyy; else goto c7Lxm;
       u7Lyy: // global
           if (_c7Lxn::P64 < 2) goto c7Lxk; else goto c7Lxl;
       c7Lxk: // global
           I64[Sp] = block_c7LwH_info;
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 8];
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
       c7Lxl: // global
           I64[Sp] = block_c7Lym_info;
           R5 = P64[R1 + 6];
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
       c7Lxm: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LwC_info" {
     block_c7LwC_info:
         const _c7LwC;
         const 1926;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _c7LwH() //  [R1]
         { []
         }
     {offset
       c7LwH: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7Lxx; else goto c7Lxw;
       c7Lxx: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Lxw: // global
           I64[Hp - 88] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.False_closure+1;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 86;
           P64[Hp - 16] = Hp - 55;
           I64[Hp - 8] = sat_s7Kf6_info;
           P64[Hp] = Hp - 31;
           I64[Sp - 8] = block_c7Lxr_info;
           R2 = Hp - 7;
           _s7KeV::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s7KeV::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LwH_info" {
     block_c7LwH_info:
         const _c7LwH;
         const 1926;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _c7Lxr() //  [R1]
         { []
         }
     {offset
       c7Lxr: // global
           I64[Sp] = block_c7Lxt_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LyJ; else goto c7Lxz;
       u7LyJ: // global
           call _c7Lxt(R1) args: 0, res: 0, upd: 0;
       c7Lxz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lxr_info" {
     block_c7Lxr_info:
         const _c7Lxr;
         const 3847;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _c7Lxt() //  [R1]
         { []
         }
     {offset
       c7Lxt: // global
           I64[Sp - 8] = block_c7LxF_info;
           _s7Kfb::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s7Kfb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LyK; else goto c7LxS;
       u7LyK: // global
           call _c7LxF(R1) args: 0, res: 0, upd: 0;
       c7LxS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Lxt_info" {
     block_c7Lxt_info:
         const _c7Lxt;
         const 3847;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _c7LxF() //  [R1]
         { []
         }
     {offset
       c7LxF: // global
           if (R1 & 7 == 1) goto c7LxZ; else goto c7Lyd;
       c7LxZ: // global
           I64[Sp + 16] = block_c7LxW_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7LyL; else goto c7Ly0;
       u7LyL: // global
           call _c7LxW(R1) args: 0, res: 0, upd: 0;
       c7Ly0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Lyd: // global
           I64[Sp] = block_c7Ly7_info;
           R1 = P64[Sp + 16];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LxF_info" {
     block_c7LxF_info:
         const _c7LxF;
         const 7688;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _c7LxW() //  [R1]
         { []
         }
     {offset
       c7LxW: // global
           P64[Sp] = P64[R1 + 7];
           call _s7Kfd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7LxW_info" {
     block_c7LxW_info:
         const _c7LxW;
         const 1926;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _c7Ly7() //  []
         { []
         }
     {offset
       c7Ly7: // global
           I64[Sp + 16] = block_c7Lyb_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7LyP; else goto c7Lyf;
       u7LyP: // global
           call _c7Lyb(R1) args: 0, res: 0, upd: 0;
       c7Lyf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ly7_info" {
     block_c7Ly7_info:
         const _c7Ly7;
         const 7816;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _c7Lyb() //  [R1]
         { []
         }
     {offset
       c7Lyb: // global
           P64[Sp] = P64[R1 + 7];
           call _s7Kfd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Lyb_info" {
     block_c7Lyb_info:
         const _c7Lyb;
         const 1926;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _s7Kfd() //  []
         { []
         }
     {offset
       s7Kfd: // global
           _s7Kff::P64 = P64[Sp];
           I64[Sp] = block_c7LxK_info;
           R5 = _s7Kff::P64;
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LxK() //  [R1]
         { []
         }
     {offset
       c7LxK: // global
           if (R1 == 1) goto u7LyC; else goto u7LyD;
       u7LyC: // global
           Sp = Sp + 56;
           call _c7Lyt() args: 0, res: 0, upd: 0;
       u7LyD: // global
           Sp = Sp + 8;
           call _c7Lys() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7LxK_info" {
     block_c7LxK_info:
         const _c7LxK;
         const 1926;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _c7Lym() //  [R1]
         { []
         }
     {offset
       c7Lym: // global
           if (R1 == 1) goto u7LyE; else goto u7LyF;
       u7LyE: // global
           Sp = Sp + 56;
           call _c7Lyt() args: 0, res: 0, upd: 0;
       u7LyF: // global
           Sp = Sp + 8;
           call _c7Lys() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Lym_info" {
     block_c7Lym_info:
         const _c7Lym;
         const 1926;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _c7Lyt() //  []
         { []
         }
     {offset
       c7Lyt: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Lys() //  []
         { []
         }
     {offset
       c7Lys: // global
           P64[Sp] = P64[Sp];
           I64[Sp + 8] = I64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16];
           I64[Sp + 24] = I64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           call _c7Lwz() args: 0, res: 0, upd: 0;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.645908409 UTC

[section ""cstring" . lvl15_r7Kbs_bytes" {
     lvl15_r7Kbs_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,97,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.648538629 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer2_entry() //  [R1]
         { []
         }
     {offset
       c7LAl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LAm; else goto c7LAn;
       c7LAm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LAn: // global
           (_c7LAg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LAg::I64 == 0) goto c7LAi; else goto c7LAh;
       c7LAi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LAh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LAg::I64;
           I64[Sp - 24] = block_c7LAj_info;
           R2 = lvl15_r7Kbs_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrFinalizer2_info" {
     GHC.ForeignPtr.addForeignPtrFinalizer2_info:
         const GHC.ForeignPtr.addForeignPtrFinalizer2_entry;
         const 0;
         const 4294967317;
         const S7KkP_srt+16;
 },
 _c7LAj() //  [R1]
         { []
         }
     {offset
       c7LAj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7LAj_info" {
     block_c7LAj_info:
         const _c7LAj;
         const 0;
         const 4294967326;
         const S7KkP_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.655279738 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_slow() //  [R1]
         { []
         }
     {offset
       c7LAC: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       c7LAO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7LAP; else goto c7LAQ;
       c7LAP: // global
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7LAQ: // global
           I64[Sp - 32] = block_c7LAG_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7LB1; else goto c7LAH;
       u7LB1: // global
           call _c7LAG(R1) args: 0, res: 0, upd: 0;
       c7LAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info" {
     GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info:
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry;
         const 0;
         const 30064771086;
         const 21474836480;
         const S7KkP_srt+120;
         const 452;
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_slow;
 },
 _c7LAG() //  [R1]
         { []
         }
     {offset
       c7LAG: // global
           _c7LAN::P64 = R1 & 7;
           if (_c7LAN::P64 < 3) goto u7LB0; else goto c7LAM;
       u7LB0: // global
           _s7KfB::I64 = I64[Sp + 8];
           _s7KfC::I64 = I64[Sp + 16];
           _s7KfD::I64 = I64[Sp + 24];
           if (_c7LAN::P64 < 2) goto c7LAK; else goto c7LAL;
       c7LAK: // global
           R6 = _s7KfD::I64;
           R5 = _s7KfC::I64;
           R4 = 1;
           R3 = _s7KfB::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 24] = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7LAL: // global
           R6 = _s7KfD::I64;
           R5 = _s7KfC::I64;
           R4 = 1;
           R3 = _s7KfB::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7LAM: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LAG_info" {
     block_c7LAG_info:
         const _c7LAG;
         const 451;
         const 12884901918;
         const S7KkP_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.663015259 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7LBl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LBu; else goto c7LBv;
       c7LBu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LBv: // global
           I64[Sp - 24] = block_c7LBi_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LBE; else goto c7LBj;
       u7LBE: // global
           call _c7LBi(R1) args: 0, res: 0, upd: 0;
       c7LBj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S7KkP_srt+136;
 },
 _c7LBi() //  [R1]
         { []
         }
     {offset
       c7LBi: // global
           I64[Sp] = block_c7LBo_info;
           _s7KfR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7KfR::I64;
           if (R1 & 7 != 0) goto u7LBD; else goto c7LBp;
       u7LBD: // global
           call _c7LBo(R1) args: 0, res: 0, upd: 0;
       c7LBp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LBi_info" {
     block_c7LBi_info:
         const _c7LBi;
         const 2;
         const 4294967326;
         const S7KkP_srt+136;
 },
 _c7LBo() //  [R1]
         { []
         }
     {offset
       c7LBo: // global
           I64[Sp] = block_c7LBt_info;
           _s7KfT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7KfT::I64;
           if (R1 & 7 != 0) goto u7LBF; else goto c7LBy;
       u7LBF: // global
           call _c7LBt(R1) args: 0, res: 0, upd: 0;
       c7LBy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LBo_info" {
     block_c7LBo_info:
         const _c7LBo;
         const 66;
         const 4294967326;
         const S7KkP_srt+136;
 },
 _c7LBt() //  [R1]
         { []
         }
     {offset
       c7LBt: // global
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 15];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LBt_info" {
     block_c7LBt_info:
         const _c7LBt;
         const 194;
         const 4294967326;
         const S7KkP_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.671731473 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7LC1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrFinalizerEnv_info" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv_info:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7KkP_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.676846529 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizer_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7LCk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LCl; else goto c7LCm;
       c7LCl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LCm: // global
           I64[Sp - 24] = block_c7LCc_info;
           R1 = R4;
           I64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LCx; else goto c7LCd;
       u7LCx: // global
           call _c7LCc(R1) args: 0, res: 0, upd: 0;
       c7LCd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$waddForeignPtrFinalizer_info" {
     GHC.ForeignPtr.$waddForeignPtrFinalizer_info:
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_entry;
         const 0;
         const 81604378638;
         const 17179869201;
         const S7KkP_srt+120;
 },
 _c7LCc() //  [R1]
         { []
         }
     {offset
       c7LCc: // global
           _c7LCj::P64 = R1 & 7;
           if (_c7LCj::P64 < 3) goto u7LCw; else goto c7LCi;
       u7LCw: // global
           _s7KfX::I64 = I64[Sp + 8];
           _s7KfY::I64 = I64[Sp + 16];
           if (_c7LCj::P64 < 2) goto c7LCg; else goto c7LCh;
       c7LCg: // global
           R6 = _s7KfY::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7KfX::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 16] = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7LCh: // global
           R6 = _s7KfY::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7KfX::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7LCi: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LCc_info" {
     block_c7LCc_info:
         const _c7LCc;
         const 194;
         const 12884901918;
         const S7KkP_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.683677809 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LCP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LCT; else goto c7LCU;
       c7LCT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LCU: // global
           I64[Sp - 16] = block_c7LCM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LD2; else goto c7LCN;
       u7LD2: // global
           call _c7LCM(R1) args: 0, res: 0, upd: 0;
       c7LCN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrFinalizer1_info" {
     GHC.ForeignPtr.addForeignPtrFinalizer1_info:
         const GHC.ForeignPtr.addForeignPtrFinalizer1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S7KkP_srt+152;
 },
 _c7LCM() //  [R1]
         { []
         }
     {offset
       c7LCM: // global
           I64[Sp] = block_c7LCS_info;
           _s7Kgb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kgb::I64;
           if (R1 & 7 != 0) goto u7LD1; else goto c7LCW;
       u7LD1: // global
           call _c7LCS(R1) args: 0, res: 0, upd: 0;
       c7LCW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LCM_info" {
     block_c7LCM_info:
         const _c7LCM;
         const 1;
         const 4294967326;
         const S7KkP_srt+152;
 },
 _c7LCS() //  [R1]
         { []
         }
     {offset
       c7LCS: // global
           R4 = P64[R1 + 7];
           R3 = I64[R1 + 15];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrFinalizer_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LCS_info" {
     block_c7LCS_info:
         const _c7LCS;
         const 65;
         const 4294967326;
         const S7KkP_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.690195521 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LDk: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizer1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrFinalizer_info" {
     GHC.ForeignPtr.addForeignPtrFinalizer_info:
         const GHC.ForeignPtr.addForeignPtrFinalizer_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7KkP_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.693161034 UTC

[section ""cstring" . lvl16_r7Kbt_bytes" {
     lvl16_r7Kbt_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.69586039 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_entry() //  [R1]
         { []
         }
     {offset
       c7LDA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LDB; else goto c7LDC;
       c7LDB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LDC: // global
           (_c7LDv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LDv::I64 == 0) goto c7LDx; else goto c7LDw;
       c7LDx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LDw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LDv::I64;
           I64[Sp - 24] = block_c7LDy_info;
           R2 = lvl16_r7Kbt_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_entry;
         const 0;
         const 4294967317;
         const S7KkP_srt+16;
 },
 _c7LDy() //  [R1]
         { []
         }
     {offset
       c7LDy: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7LDy_info" {
     block_c7LDy_info:
         const _c7LDy;
         const 0;
         const 4294967326;
         const S7KkP_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.702644493 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LDX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LDY; else goto c7LDZ;
       c7LDY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LDZ: // global
           I64[Sp - 16] = block_c7LDU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LEt; else goto c7LDV;
       u7LEt: // global
           call _c7LDU(R1) args: 0, res: 0, upd: 0;
       c7LDV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S7KkP_srt+168;
 },
 _c7LDU() //  [R1]
         { []
         }
     {offset
       c7LDU: // global
           _s7Kgk::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Kgk::I64, 0)) goto c7LEl; else goto c7LEr;
       c7LEl: // global
           I64[Sp] = block_c7LE6_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Kgk::I64;
           if (R1 & 7 != 0) goto u7LEs; else goto c7LE7;
       u7LEs: // global
           call _c7LE6(R1) args: 0, res: 0, upd: 0;
       c7LE7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7LEr: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LDU_info" {
     block_c7LDU_info:
         const _c7LDU;
         const 1;
         const 4294967326;
         const S7KkP_srt+176;
 },
 _c7LE6() //  [R1]
         { []
         }
     {offset
       c7LE6: // global
           I64[Sp - 8] = block_c7LEb_info;
           _s7Kgn::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7Kgn::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LE6_info" {
     block_c7LE6_info:
         const _c7LE6;
         const 65;
         const 30;
 },
 _c7LEb() //  [R1]
         { []
         }
     {offset
       c7LEb: // global
           _s7Kgn::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7LEd_info;
           R2 = _s7Kgn::I64;
           _s7Kgq::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s7Kgq::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LEb_info" {
     block_c7LEb_info:
         const _c7LEb;
         const 194;
         const 30;
 },
 _c7LEd() //  [R1]
         { []
         }
     {offset
       c7LEd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7LEq; else goto c7LEp;
       c7LEq: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LEp: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LEd_info" {
     block_c7LEd_info:
         const _c7LEd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.714045514 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LEV: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry(R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7KkP_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.717039995 UTC

[section ""cstring" . lvl17_r7Kbu_bytes" {
     lvl17_r7Kbu_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.719497723 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes2_entry() //  [R1]
         { []
         }
     {offset
       c7LFb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LFc; else goto c7LFd;
       c7LFc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LFd: // global
           (_c7LF6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LF6::I64 == 0) goto c7LF8; else goto c7LF7;
       c7LF8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LF7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LF6::I64;
           I64[Sp - 24] = block_c7LF9_info;
           R2 = lvl17_r7Kbu_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrBytes2_info" {
     GHC.ForeignPtr.mallocForeignPtrBytes2_info:
         const GHC.ForeignPtr.mallocForeignPtrBytes2_entry;
         const 0;
         const 4294967317;
         const S7KkP_srt+16;
 },
 _c7LF9() //  [R1]
         { []
         }
     {offset
       c7LF9: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7LF9_info" {
     block_c7LF9_info:
         const _c7LF9;
         const 0;
         const 4294967326;
         const S7KkP_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.726095914 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes1_entry() //  [R2]
         { []
         }
     {offset
       c7LFy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LFz; else goto c7LFA;
       c7LFz: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LFA: // global
           I64[Sp - 8] = block_c7LFv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LFX; else goto c7LFw;
       u7LFX: // global
           call _c7LFv(R1) args: 0, res: 0, upd: 0;
       c7LFw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrBytes1_info" {
     GHC.ForeignPtr.mallocForeignPtrBytes1_info:
         const GHC.ForeignPtr.mallocForeignPtrBytes1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S7KkP_srt+184;
 },
 _c7LFv() //  [R1]
         { []
         }
     {offset
       c7LFv: // global
           _s7KgC::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KgC::I64, 0)) goto c7LFR; else goto c7LFW;
       c7LFR: // global
           I64[Sp - 8] = block_c7LFH_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KgC::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7LFW: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LFv_info" {
     block_c7LFv_info:
         const _c7LFv;
         const 0;
         const 4294967326;
         const S7KkP_srt+192;
 },
 _c7LFH() //  [R1]
         { []
         }
     {offset
       c7LFH: // global
           I64[Sp] = block_c7LFJ_info;
           _s7KgG::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _s7KgG::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LFH_info" {
     block_c7LFH_info:
         const _c7LFH;
         const 65;
         const 30;
 },
 _c7LFJ() //  [R1]
         { []
         }
     {offset
       c7LFJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7LFV; else goto c7LFU;
       c7LFV: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LFU: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LFJ_info" {
     block_c7LFJ_info:
         const _c7LFJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.734416393 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes_entry() //  [R2]
         { []
         }
     {offset
       c7LGl: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrBytes_info" {
     GHC.ForeignPtr.mallocForeignPtrBytes_info:
         const GHC.ForeignPtr.mallocForeignPtrBytes_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7KkP_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.737810173 UTC

[section ""data" . lvl18_r7Kbv_closure" {
     lvl18_r7Kbv_closure:
         const GHC.Types.I#_con_info;
         const 159;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.73954155 UTC

[section ""data" . lvl19_r7Kbw_closure" {
     lvl19_r7Kbw_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.741194422 UTC

[section ""data" . lvl20_r7Kbx_closure" {
     lvl20_r7Kbx_closure:
         const GHC.Types.I#_con_info;
         const 38;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.742947384 UTC

[section ""data" . lvl21_r7Kby_closure" {
     lvl21_r7Kby_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl18_r7Kbv_closure+1;
         const lvl19_r7Kbw_closure+1;
         const lvl18_r7Kbv_closure+1;
         const lvl20_r7Kbx_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.745339636 UTC

[section ""data" . lvl22_r7Kbz_closure" {
     lvl22_r7Kbz_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl21_r7Kby_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.747601182 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr3_closure" {
     GHC.ForeignPtr.mallocForeignPtr3_closure:
         const GHC.ForeignPtr.mallocForeignPtr3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr3_entry() //  [R1]
         { []
         }
     {offset
       c7LGD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LGE; else goto c7LGF;
       c7LGE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LGF: // global
           (_c7LGA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LGA::I64 == 0) goto c7LGC; else goto c7LGB;
       c7LGC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LGB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LGA::I64;
           R2 = lvl22_r7Kbz_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtr3_info" {
     GHC.ForeignPtr.mallocForeignPtr3_info:
         const GHC.ForeignPtr.mallocForeignPtr3_entry;
         const 0;
         const 144115192370823189;
         const S7KkP_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.752815052 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr1_closure" {
     GHC.ForeignPtr.mallocForeignPtr1_closure:
         const GHC.ForeignPtr.mallocForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr1_entry() //  [R2]
         { []
         }
     {offset
       c7LGT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7LGX; else goto c7LGY;
       c7LGX: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LGY: // global
           I64[Sp - 16] = block_c7LGR_info;
           _s7KgO::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           P64[Sp - 8] = _s7KgO::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtr1_info" {
     GHC.ForeignPtr.mallocForeignPtr1_info:
         const GHC.ForeignPtr.mallocForeignPtr1_entry;
         const 0;
         const 108086395351859214;
         const 8589934597;
         const S7KkP_srt+24;
 },
 _c7LGR() //  [R1]
         { []
         }
     {offset
       c7LGR: // global
           I64[Sp] = block_c7LGW_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LGR_info" {
     block_c7LGR_info:
         const _c7LGR;
         const 1;
         const 72057598332895262;
         const S7KkP_srt+24;
 },
 _c7LGW() //  [R1]
         { []
         }
     {offset
       c7LGW: // global
           _s7KgT::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7KgT::I64, 0)) goto c7LHh; else goto c7LHm;
       c7LHh: // global
           I64[Sp - 8] = block_c7LH7_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7KgT::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7LHm: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LGW_info" {
     block_c7LGW_info:
         const _c7LGW;
         const 65;
         const 4294967326;
         const S7KkP_srt+24;
 },
 _c7LH7() //  [R1]
         { []
         }
     {offset
       c7LH7: // global
           _s7KgT::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7LH9_info;
           R2 = I64[Sp + 16];
           _s7KgX::P64 = R1;
           R1 = _s7KgT::I64;
           P64[Sp + 16] = _s7KgX::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LH7_info" {
     block_c7LH7_info:
         const _c7LH7;
         const 194;
         const 30;
 },
 _c7LH9() //  [R1]
         { []
         }
     {offset
       c7LH9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7LHl; else goto c7LHk;
       c7LHl: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LHk: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LH9_info" {
     block_c7LH9_info:
         const _c7LH9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.762845115 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr_closure" {
     GHC.ForeignPtr.mallocForeignPtr_closure:
         const GHC.ForeignPtr.mallocForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7LHN: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtr_info" {
     GHC.ForeignPtr.mallocForeignPtr_info:
         const GHC.ForeignPtr.mallocForeignPtr_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7KkP_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.766371721 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer3_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer3_entry() //  [R2]
         { []
         }
     {offset
       c7LHZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7LI3; else goto c7LI2;
       c7LI3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LI2: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrConcFinalizer3_info" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer3_info:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.771284002 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer4_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry() //  [R2]
         { []
         }
     {offset
       c7LIk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LIl; else goto u7LIw;
       c7LIl: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u7LIw: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c7LIa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrConcFinalizer4_info" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer4_info:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7LIa() //  []
         { []
         }
     {offset
       c7LIa: // global
           _s7Kh6::P64 = P64[Sp];
           I64[Sp] = block_c7LId_info;
           R1 = _s7Kh6::P64;
           if (R1 & 7 != 0) goto u7LIy; else goto c7LIe;
       u7LIy: // global
           call _c7LId(R1) args: 0, res: 0, upd: 0;
       c7LIe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LId() //  [R1]
         { []
         }
     {offset
       c7LId: // global
           if (R1 & 7 == 1) goto c7LIh; else goto c7LIi;
       c7LIh: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LIi: // global
           I64[Sp - 8] = block_c7LIs_info;
           _s7Kha::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7Kha::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LId_info" {
     block_c7LId_info:
         const _c7LId;
         const 0;
         const 30;
 },
 _c7LIs() //  []
         { []
         }
     {offset
       c7LIs: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7LIa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7LIs_info" {
     block_c7LIs_info:
         const _c7LIs;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.780451655 UTC

[section ""data" . GHC.ForeignPtr.$wforeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$wforeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$wforeignPtrFinalizer_info;
 },
 GHC.ForeignPtr.$wforeignPtrFinalizer_entry() //  [R2]
         { []
         }
     {offset
       c7LJ7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7LJ8; else goto c7LJ9;
       c7LJ8: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$wforeignPtrFinalizer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LJ9: // global
           I64[Sp - 8] = block_c7LIX_info;
           _s7Khe::P64 = R2;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           R1 = _s7Khe::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$wforeignPtrFinalizer_info" {
     GHC.ForeignPtr.$wforeignPtrFinalizer_info:
         const GHC.ForeignPtr.$wforeignPtrFinalizer_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7LIX() //  [R1]
         { []
         }
     {offset
       c7LIX: // global
           I64[Sp] = block_c7LIZ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LJw; else goto c7LJ0;
       u7LJw: // global
           call _c7LIZ(R1) args: 0, res: 0, upd: 0;
       c7LJ0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LIX_info" {
     block_c7LIX_info:
         const _c7LIX;
         const 0;
         const 30;
 },
 _c7LIZ() //  [R1]
         { []
         }
     {offset
       c7LIZ: // global
           _c7LJ6::P64 = R1 & 7;
           if (_c7LJ6::P64 < 3) goto u7LJt; else goto c7LJ5;
       u7LJt: // global
           if (_c7LJ6::P64 < 2) goto u7LJu; else goto c7LJ4;
       u7LJu: // global
           Sp = Sp + 8;
           call _c7LJo() args: 0, res: 0, upd: 0;
       c7LJ4: // global
           I64[Sp] = block_c7LJg_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7LJ5: // global
           R2 = P64[R1 + 5];
           Sp = Sp + 8;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LIZ_info" {
     block_c7LIZ_info:
         const _c7LIZ;
         const 0;
         const 30;
 },
 _c7LJg() //  [R1, R2]
         { []
         }
     {offset
       c7LJg: // global
           if (R1 == 1) goto c7LJp; else goto u7LJv;
       c7LJp: // global
           R1 = R2;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       u7LJv: // global
           Sp = Sp + 8;
           call _c7LJo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7LJg_info" {
     block_c7LJg_info:
         const _c7LJg;
         const 0;
         const 30;
 },
 _c7LJo() //  []
         { []
         }
     {offset
       c7LJo: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.790046656 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr2_closure" {
     GHC.ForeignPtr.finalizeForeignPtr2_closure:
         const GHC.ForeignPtr.finalizeForeignPtr2_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr2_entry() //  [R2]
         { []
         }
     {offset
       c7LJZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7LK0; else goto c7LK1;
       c7LK0: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LK1: // global
           I64[Sp - 8] = block_c7LJW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LK5; else goto c7LJX;
       u7LK5: // global
           call _c7LJW(R1) args: 0, res: 0, upd: 0;
       c7LJX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.finalizeForeignPtr2_info" {
     GHC.ForeignPtr.finalizeForeignPtr2_info:
         const GHC.ForeignPtr.finalizeForeignPtr2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7LJW() //  [R1]
         { []
         }
     {offset
       c7LJW: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LJW_info" {
     block_c7LJW_info:
         const _c7LJW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.796005529 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr1_closure" {
     GHC.ForeignPtr.finalizeForeignPtr1_closure:
         const GHC.ForeignPtr.finalizeForeignPtr1_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr1_entry() //  [R2]
         { []
         }
     {offset
       c7LKm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7LKn; else goto c7LKo;
       c7LKn: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LKo: // global
           I64[Sp - 8] = block_c7LKj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7LKL; else goto c7LKk;
       u7LKL: // global
           call _c7LKj(R1) args: 0, res: 0, upd: 0;
       c7LKk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.finalizeForeignPtr1_info" {
     GHC.ForeignPtr.finalizeForeignPtr1_info:
         const GHC.ForeignPtr.finalizeForeignPtr1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7LKj() //  [R1]
         { []
         }
     {offset
       c7LKj: // global
           I64[Sp] = block_c7LKr_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u7LKK; else goto c7LKt;
       u7LKK: // global
           call _c7LKr(R1) args: 0, res: 0, upd: 0;
       c7LKt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LKj_info" {
     block_c7LKj_info:
         const _c7LKj;
         const 0;
         const 30;
 },
 _c7LKr() //  [R1]
         { []
         }
     {offset
       c7LKr: // global
           _c7LKI::P64 = R1 & 7;
           if (_c7LKI::P64 < 3) goto u7LKJ; else goto c7LKH;
       u7LKJ: // global
           if (_c7LKI::P64 < 2) goto c7LKz; else goto c7LKD;
       c7LKz: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7LKD: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7LKH: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LKr_info" {
     block_c7LKr_info:
         const _c7LKr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.802728908 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr_closure" {
     GHC.ForeignPtr.finalizeForeignPtr_closure:
         const GHC.ForeignPtr.finalizeForeignPtr_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7LL5: // global
           R2 = R2;
           call GHC.ForeignPtr.finalizeForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.finalizeForeignPtr_info" {
     GHC.ForeignPtr.finalizeForeignPtr_info:
         const GHC.ForeignPtr.finalizeForeignPtr_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.805784319 UTC

[section ""cstring" . lvl23_r7KbA_bytes" {
     lvl23_r7KbA_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.808257939 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer2_entry() //  [R1]
         { []
         }
     {offset
       c7LLl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LLm; else goto c7LLn;
       c7LLm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7LLn: // global
           (_c7LLg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7LLg::I64 == 0) goto c7LLi; else goto c7LLh;
       c7LLi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7LLh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7LLg::I64;
           I64[Sp - 24] = block_c7LLj_info;
           R2 = lvl23_r7KbA_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrConcFinalizer2_info" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer2_info:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_entry;
         const 0;
         const 4294967317;
         const S7KkP_srt+16;
 },
 _c7LLj() //  [R1]
         { []
         }
     {offset
       c7LLj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7LLj_info" {
     block_c7LLj_info:
         const _c7LLj;
         const 0;
         const 4294967326;
         const S7KkP_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.823561081 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info;
         const 0;
 },
 sat_s7KhU_entry() //  [R1, R2]
         { []
         }
     {offset
       c7LM0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LM1; else goto c7LM2;
       c7LM1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LM2: // global
           I64[Sp - 24] = block_c7LLS_info;
           _s7KhH::P64 = P64[R1 + 7];
           _s7KhN::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7KhH::P64;
           P64[Sp - 8] = _s7KhN::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LMi; else goto c7LLT;
       u7LMi: // global
           call _c7LLS(R1) args: 0, res: 0, upd: 0;
       c7LLT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7KhU_info" {
     sat_s7KhU_info:
         const sat_s7KhU_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S7KkP_srt+112;
 },
 _c7LLS() //  [R1]
         { []
         }
     {offset
       c7LLS: // global
           _c7LLZ::P64 = R1 & 7;
           if (_c7LLZ::P64 < 3) goto u7LMh; else goto c7LLY;
       u7LMh: // global
           if (_c7LLZ::P64 < 2) goto c7LLW; else goto c7LLX;
       c7LLW: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LLX: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7LLY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7LMg; else goto c7LMf;
       c7LMg: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LMf: // global
           _s7KhR::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7KhR::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LLS_info" {
     block_c7LLS_info:
         const _c7LLS;
         const 2;
         const 4294967326;
         const S7KkP_srt+112;
 },
 sat_s7Ki0_entry() //  [R1]
         { []
         }
     {offset
       c7LMw: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Ki0_info" {
     sat_s7Ki0_info:
         const sat_s7Ki0_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7Kif_entry() //  [R1, R2]
         { []
         }
     {offset
       c7LMR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LMS; else goto c7LMT;
       c7LMS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LMT: // global
           I64[Sp - 24] = block_c7LMJ_info;
           _s7KhH::P64 = P64[R1 + 7];
           _s7Ki8::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7KhH::P64;
           P64[Sp - 8] = _s7Ki8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LN9; else goto c7LMK;
       u7LN9: // global
           call _c7LMJ(R1) args: 0, res: 0, upd: 0;
       c7LMK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Kif_info" {
     sat_s7Kif_info:
         const sat_s7Kif_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S7KkP_srt+112;
 },
 _c7LMJ() //  [R1]
         { []
         }
     {offset
       c7LMJ: // global
           _c7LMQ::P64 = R1 & 7;
           if (_c7LMQ::P64 < 3) goto u7LN8; else goto c7LMP;
       u7LN8: // global
           if (_c7LMQ::P64 < 2) goto c7LMN; else goto c7LMO;
       c7LMN: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LMO: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7LMP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7LN7; else goto c7LN6;
       c7LN7: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LN6: // global
           _s7Kic::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7Kic::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LMJ_info" {
     block_c7LMJ_info:
         const _c7LMJ;
         const 2;
         const 4294967326;
         const S7KkP_srt+112;
 },
 sat_s7KiO_entry() //  [R1]
         { []
         }
     {offset
       c7LNx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LNy; else goto c7LNz;
       c7LNy: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7LNz: // global
           I64[Sp - 16] = block_c7LNn_info;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           _s7KhJ::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s7KhJ::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7KiO_info" {
     sat_s7KiO_info:
         const sat_s7KiO_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c7LNn() //  [R1]
         { []
         }
     {offset
       c7LNn: // global
           I64[Sp] = block_c7LNp_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LOx; else goto c7LNq;
       u7LOx: // global
           call _c7LNp(R1) args: 0, res: 0, upd: 0;
       c7LNq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LNn_info" {
     block_c7LNn_info:
         const _c7LNn;
         const 1;
         const 30;
 },
 _c7LNp() //  [R1]
         { []
         }
     {offset
       c7LNp: // global
           _c7LNw::P64 = R1 & 7;
           if (_c7LNw::P64 < 3) goto u7LOu; else goto c7LNv;
       u7LOu: // global
           if (_c7LNw::P64 < 2) goto c7LNt; else goto c7LNu;
       c7LNt: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LNu: // global
           I64[Sp] = block_c7LNG_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7LNv: // global
           P64[Sp] = P64[R1 + 5];
           call _c7LO7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7LNp_info" {
     block_c7LNp_info:
         const _c7LNp;
         const 1;
         const 30;
 },
 _c7LNG() //  [R1, R2]
         { []
         }
     {offset
       c7LNG: // global
           if (R1 == 1) goto c7LNS; else goto c7LNO;
       c7LNS: // global
           I64[Sp] = block_c7LNR_info;
           R1 = R2;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c7LNO: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LNG_info" {
     block_c7LNG_info:
         const _c7LNG;
         const 1;
         const 30;
 },
 _c7LNR() //  []
         { []
         }
     {offset
       c7LNR: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LNR_info" {
     block_c7LNR_info:
         const _c7LNR;
         const 1;
         const 30;
 },
 _c7LO7() //  []
         { []
         }
     {offset
       c7LO7: // global
           _s7KiG::P64 = P64[Sp];
           I64[Sp] = block_c7LO9_info;
           R1 = _s7KiG::P64;
           if (R1 & 7 != 0) goto u7LOz; else goto c7LOb;
       u7LOz: // global
           call _c7LO9(R1) args: 0, res: 0, upd: 0;
       c7LOb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7LO9() //  [R1]
         { []
         }
     {offset
       c7LO9: // global
           if (R1 & 7 == 1) goto c7LOh; else goto c7LOm;
       c7LOh: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LOm: // global
           I64[Sp - 8] = block_c7LOk_info;
           _s7KiK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7KiK::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LO9_info" {
     block_c7LO9_info:
         const _c7LO9;
         const 1;
         const 30;
 },
 _c7LOk() //  []
         { []
         }
     {offset
       c7LOk: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7LO7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7LOk_info" {
     block_c7LOk_info:
         const _c7LOk;
         const 2;
         const 30;
 },
 GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LOG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7LOH; else goto c7LOI;
       c7LOH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LOI: // global
           I64[Sp - 16] = block_c7LLF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LPp; else goto c7LLG;
       u7LPp: // global
           call _c7LLF(R1) args: 0, res: 0, upd: 0;
       c7LLG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info" {
     GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info:
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry;
         const 0;
         const 211110527500302;
         const 12884901903;
         const S7KkP_srt+112;
 },
 _c7LLF() //  [R1]
         { []
         }
     {offset
       c7LLF: // global
           _c7LOF::P64 = R1 & 7;
           if (_c7LOF::P64 < 3) goto u7LPi; else goto c7LOE;
       u7LPi: // global
           _s7KhH::P64 = P64[Sp + 8];
           if (_c7LOF::P64 < 2) goto c7LOC; else goto c7LOD;
       c7LOC: // global
           Hp = Hp + 88;
           _s7KhJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7LP0; else goto c7LOK;
       c7LOK: // global
           _s7KhK::P64 = P64[_s7KhJ::P64 + 7];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7KhH::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7KhU_info;
           P64[Hp - 8] = _s7KhH::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7LMj_info;
           R2 = Hp - 15;
           R1 = _s7KhK::P64;
           P64[Sp + 8] = _s7KhK::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7LOD: // global
           Hp = Hp + 88;
           _s7KhJ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7LP0; else goto c7LOZ;
       c7LP0: // global
           HpAlloc = 88;
           R1 = _s7KhJ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LOZ: // global
           _s7Ki4::P64 = P64[_s7KhJ::P64 + 6];
           _s7Ki5::P64 = P64[_s7KhJ::P64 + 14];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7KhH::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7Kif_info;
           P64[Hp - 8] = _s7KhH::P64;
           P64[Hp] = Hp - 39;
           I64[Sp - 16] = block_c7LNa_info;
           R2 = Hp - 15;
           R1 = _s7Ki5::P64;
           P64[Sp - 8] = _s7Ki5::P64;
           P64[Sp] = _s7Ki4::P64;
           P64[Sp + 8] = _s7KhJ::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7LOE: // global
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LLF_info" {
     block_c7LLF_info:
         const _c7LLF;
         const 1;
         const 140741783322654;
         const S7KkP_srt+112;
 },
 _c7LMj() //  [R1]
         { []
         }
     {offset
       c7LMj: // global
           I64[Sp] = block_c7LMl_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LPl; else goto c7LMm;
       u7LPl: // global
           call _c7LMl(R1) args: 0, res: 0, upd: 0;
       c7LMm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LMj_info" {
     block_c7LMj_info:
         const _c7LMj;
         const 1;
         const 30;
 },
 _c7LMl() //  [R1]
         { []
         }
     {offset
       c7LMl: // global
           if (R1 & 7 == 1) goto u7LPj; else goto c7LOS;
       u7LPj: // global
           Sp = Sp + 16;
           call _c7LP5() args: 0, res: 0, upd: 0;
       c7LOS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LOV; else goto c7LOU;
       c7LOV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LOU: // global
           I64[Hp - 8] = sat_s7Ki0_info;
           _s7KhK::P64 = P64[Sp + 8];
           P64[Hp] = _s7KhK::P64;
           I64[Sp + 8] = block_c7LOR_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7KhK::P64;
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LMl_info" {
     block_c7LMl_info:
         const _c7LMl;
         const 1;
         const 30;
 },
 _c7LOR() //  []
         { []
         }
     {offset
       c7LOR: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LOR_info" {
     block_c7LOR_info:
         const _c7LOR;
         const 0;
         const 30;
 },
 _c7LNa() //  [R1]
         { []
         }
     {offset
       c7LNa: // global
           I64[Sp] = block_c7LNc_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LPn; else goto c7LNd;
       u7LPn: // global
           call _c7LNc(R1) args: 0, res: 0, upd: 0;
       c7LNd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LNa_info" {
     block_c7LNa_info:
         const _c7LNa;
         const 3;
         const 30;
 },
 _c7LNc() //  [R1]
         { []
         }
     {offset
       c7LNc: // global
           if (R1 & 7 == 1) goto u7LPk; else goto c7LP7;
       u7LPk: // global
           Sp = Sp + 32;
           call _c7LP5() args: 0, res: 0, upd: 0;
       c7LP7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7LPa; else goto c7LP9;
       c7LPa: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LP9: // global
           I64[Hp - 16] = sat_s7KiO_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_c7LP6_info;
           R3 = Hp - 15;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LNc_info" {
     block_c7LNc_info:
         const _c7LNc;
         const 3;
         const 30;
 },
 _c7LP5() //  []
         { []
         }
     {offset
       c7LP5: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7LP6() //  []
         { []
         }
     {offset
       c7LP6: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LP6_info" {
     block_c7LP6_info:
         const _c7LP6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.861741043 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LRm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LRn; else goto c7LRo;
       c7LRn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LRo: // global
           I64[Sp - 16] = block_c7LRj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LRs; else goto c7LRk;
       u7LRs: // global
           call _c7LRj(R1) args: 0, res: 0, upd: 0;
       c7LRk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrConcFinalizer1_info" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer1_info:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const S7KkP_srt+224;
 },
 _c7LRj() //  [R1]
         { []
         }
     {offset
       c7LRj: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LRj_info" {
     block_c7LRj_info:
         const _c7LRj;
         const 1;
         const 4294967326;
         const S7KkP_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.867201419 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LRG: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrConcFinalizer_info" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer_info:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7KkP_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.874062878 UTC

[section ""data" . GHC.ForeignPtr.$wnewConcForeignPtr_closure" {
     GHC.ForeignPtr.$wnewConcForeignPtr_closure:
         const GHC.ForeignPtr.$wnewConcForeignPtr_info;
         const 0;
 },
 sat_s7Kjf_entry() //  [R1, R2]
         { []
         }
     {offset
       c7LS9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LSa; else goto c7LSb;
       c7LSa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LSb: // global
           I64[Sp - 24] = block_c7LS1_info;
           _s7Kj1::P64 = P64[R1 + 7];
           _s7Kj8::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7Kj1::P64;
           P64[Sp - 8] = _s7Kj8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7LSr; else goto c7LS2;
       u7LSr: // global
           call _c7LS1(R1) args: 0, res: 0, upd: 0;
       c7LS2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Kjf_info" {
     sat_s7Kjf_info:
         const sat_s7Kjf_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S7KkP_srt+112;
 },
 _c7LS1() //  [R1]
         { []
         }
     {offset
       c7LS1: // global
           _c7LS8::P64 = R1 & 7;
           if (_c7LS8::P64 < 3) goto u7LSq; else goto c7LS7;
       u7LSq: // global
           if (_c7LS8::P64 < 2) goto c7LS5; else goto c7LS6;
       c7LS5: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LS6: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7LS7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7LSp; else goto c7LSo;
       c7LSp: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LSo: // global
           _s7Kjc::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7Kjc::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LS1_info" {
     block_c7LS1_info:
         const _c7LS1;
         const 2;
         const 4294967326;
         const S7KkP_srt+112;
 },
 sat_s7Kjn_entry() //  [R1]
         { []
         }
     {offset
       c7LSF: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Kjn_info" {
     sat_s7Kjn_info:
         const sat_s7Kjn_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.ForeignPtr.$wnewConcForeignPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LSM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7LSN; else goto c7LSO;
       c7LSN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$wnewConcForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LSO: // global
           I64[Sp - 24] = block_c7LRR_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$wnewConcForeignPtr_info" {
     GHC.ForeignPtr.$wnewConcForeignPtr_info:
         const GHC.ForeignPtr.$wnewConcForeignPtr_entry;
         const 0;
         const 562954248388622;
         const 12884901901;
         const S7KkP_srt+112;
 },
 _c7LRR() //  [R1]
         { []
         }
     {offset
       c7LRR: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c7LSR; else goto c7LSQ;
       c7LSR: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LSQ: // global
           I64[Hp - 80] = :_con_info;
           _s7Kj1::P64 = P64[Sp + 16];
           P64[Hp - 72] = _s7Kj1::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7Kjf_info;
           P64[Hp - 8] = _s7Kj1::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7LSs_info;
           R2 = Hp - 15;
           _s7Kj5::P64 = R1;
           R1 = R1;
           P64[Sp + 16] = _s7Kj5::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LRR_info" {
     block_c7LRR_info:
         const _c7LRR;
         const 66;
         const 4294967326;
         const S7KkP_srt+112;
 },
 _c7LSs() //  [R1]
         { []
         }
     {offset
       c7LSs: // global
           I64[Sp] = block_c7LSu_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7LT9; else goto c7LSv;
       u7LT9: // global
           call _c7LSu(R1) args: 0, res: 0, upd: 0;
       c7LSv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LSs_info" {
     block_c7LSs_info:
         const _c7LSs;
         const 66;
         const 30;
 },
 _c7LSu() //  [R1]
         { []
         }
     {offset
       c7LSu: // global
           _s7Kj5::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7LSJ; else goto c7LSK;
       c7LSJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7LSY; else goto c7LSX;
       c7LSY: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LSX: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = _s7Kj5::P64;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7LSK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LT5; else goto c7LT4;
       c7LT5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LT4: // global
           I64[Hp - 8] = sat_s7Kjn_info;
           P64[Hp] = _s7Kj5::P64;
           I64[Sp] = block_c7LSZ_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7Kj5::P64;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LSu_info" {
     block_c7LSu_info:
         const _c7LSu;
         const 66;
         const 30;
 },
 _c7LSZ() //  [R1]
         { []
         }
     {offset
       c7LSZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7LT8; else goto c7LT7;
       c7LT8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7LT7: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LSZ_info" {
     block_c7LSZ_info:
         const _c7LSZ;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.891942415 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr1_closure" {
     GHC.ForeignPtr.newConcForeignPtr1_closure:
         const GHC.ForeignPtr.newConcForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LU2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7LU3; else goto c7LU4;
       c7LU3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.newConcForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LU4: // global
           I64[Sp - 16] = block_c7LTZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7LU8; else goto c7LU0;
       u7LU8: // global
           call _c7LTZ(R1) args: 0, res: 0, upd: 0;
       c7LU0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.newConcForeignPtr1_info" {
     GHC.ForeignPtr.newConcForeignPtr1_info:
         const GHC.ForeignPtr.newConcForeignPtr1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S7KkP_srt+248;
 },
 _c7LTZ() //  [R1]
         { []
         }
     {offset
       c7LTZ: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$wnewConcForeignPtr_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7LTZ_info" {
     block_c7LTZ_info:
         const _c7LTZ;
         const 1;
         const 4294967326;
         const S7KkP_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.89700422 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr_closure" {
     GHC.ForeignPtr.newConcForeignPtr_closure:
         const GHC.ForeignPtr.newConcForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LUm: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.newConcForeignPtr1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.newConcForeignPtr_info" {
     GHC.ForeignPtr.newConcForeignPtr_info:
         const GHC.ForeignPtr.newConcForeignPtr_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7KkP_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.900420557 UTC

[section ""data" . GHC.ForeignPtr.MyWeak_closure" {
     GHC.ForeignPtr.MyWeak_closure:
         const GHC.ForeignPtr.MyWeak_info;
 },
 GHC.ForeignPtr.MyWeak_entry() //  [R2]
         { []
         }
     {offset
       c7LUy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LUC; else goto c7LUB;
       c7LUC: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.MyWeak_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LUB: // global
           I64[Hp - 8] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.MyWeak_info" {
     GHC.ForeignPtr.MyWeak_info:
         const GHC.ForeignPtr.MyWeak_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.904060288 UTC

[section ""data" . GHC.ForeignPtr.PlainForeignPtr_closure" {
     GHC.ForeignPtr.PlainForeignPtr_closure:
         const GHC.ForeignPtr.PlainForeignPtr_info;
 },
 GHC.ForeignPtr.PlainForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7LUN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LUR; else goto c7LUQ;
       c7LUR: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LUQ: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.PlainForeignPtr_info" {
     GHC.ForeignPtr.PlainForeignPtr_info:
         const GHC.ForeignPtr.PlainForeignPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.908158547 UTC

[section ""data" . GHC.ForeignPtr.MallocPtr_closure" {
     GHC.ForeignPtr.MallocPtr_closure:
         const GHC.ForeignPtr.MallocPtr_info;
 },
 GHC.ForeignPtr.MallocPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LV2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7LV6; else goto c7LV5;
       c7LV6: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.MallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LV5: // global
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.MallocPtr_info" {
     GHC.ForeignPtr.MallocPtr_info:
         const GHC.ForeignPtr.MallocPtr_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.91182805 UTC

[section ""data" . GHC.ForeignPtr.PlainPtr_closure" {
     GHC.ForeignPtr.PlainPtr_closure:
         const GHC.ForeignPtr.PlainPtr_info;
 },
 GHC.ForeignPtr.PlainPtr_entry() //  [R2]
         { []
         }
     {offset
       c7LVh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LVl; else goto c7LVk;
       c7LVl: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LVk: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.PlainPtr_info" {
     GHC.ForeignPtr.PlainPtr_info:
         const GHC.ForeignPtr.PlainPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.91514654 UTC

[section ""data" . GHC.ForeignPtr.NoFinalizers_closure" {
     GHC.ForeignPtr.NoFinalizers_closure:
         const GHC.ForeignPtr.NoFinalizers_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.917348936 UTC

[section ""data" . GHC.ForeignPtr.CFinalizers_closure" {
     GHC.ForeignPtr.CFinalizers_closure:
         const GHC.ForeignPtr.CFinalizers_info;
 },
 GHC.ForeignPtr.CFinalizers_entry() //  [R2]
         { []
         }
     {offset
       c7LVx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LVB; else goto c7LVA;
       c7LVB: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.CFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LVA: // global
           I64[Hp - 8] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.CFinalizers_info" {
     GHC.ForeignPtr.CFinalizers_info:
         const GHC.ForeignPtr.CFinalizers_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.921124995 UTC

[section ""data" . GHC.ForeignPtr.HaskellFinalizers_closure" {
     GHC.ForeignPtr.HaskellFinalizers_closure:
         const GHC.ForeignPtr.HaskellFinalizers_info;
 },
 GHC.ForeignPtr.HaskellFinalizers_entry() //  [R2]
         { []
         }
     {offset
       c7LVM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7LVQ; else goto c7LVP;
       c7LVQ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.HaskellFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7LVP: // global
           I64[Hp - 8] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.HaskellFinalizers_info" {
     GHC.ForeignPtr.HaskellFinalizers_info:
         const GHC.ForeignPtr.HaskellFinalizers_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.926343787 UTC

[section ""data" . GHC.ForeignPtr.ForeignPtr_closure" {
     GHC.ForeignPtr.ForeignPtr_closure:
         const GHC.ForeignPtr.ForeignPtr_info;
 },
 GHC.ForeignPtr.ForeignPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7LW1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7LW5; else goto c7LW4;
       c7LW5: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.ForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7LW4: // global
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.ForeignPtr_info" {
     GHC.ForeignPtr.ForeignPtr_info:
         const GHC.ForeignPtr.ForeignPtr_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.930222276 UTC

[section ""cstring" . i7Ld6_str" {
     i7Ld6_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,121,87,101,97,107]
 },
 GHC.ForeignPtr.MyWeak_con_entry() //  [R1]
         { []
         }
     {offset
       c7LWb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.MyWeak_con_info" {
     GHC.ForeignPtr.MyWeak_con_info:
         const GHC.ForeignPtr.MyWeak_con_entry;
         const 1;
         const 2;
         const i7Ld6_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.933672596 UTC

[section ""cstring" . i7Ld8_str" {
     i7Ld8_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]
 },
 GHC.ForeignPtr.PlainForeignPtr_con_entry() //  [R1]
         { []
         }
     {offset
       c7LWh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.PlainForeignPtr_con_info" {
     GHC.ForeignPtr.PlainForeignPtr_con_info:
         const GHC.ForeignPtr.PlainForeignPtr_con_entry;
         const 1;
         const 2;
         const i7Ld8_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.937156336 UTC

[section ""cstring" . i7Lda_str" {
     i7Lda_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,97,108,108,111,99,80,116,114]
 },
 GHC.ForeignPtr.MallocPtr_con_entry() //  [R1]
         { []
         }
     {offset
       c7LWn: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.MallocPtr_con_info" {
     GHC.ForeignPtr.MallocPtr_con_info:
         const GHC.ForeignPtr.MallocPtr_con_entry;
         const 2;
         const 4294967300;
         const i7Lda_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.940754387 UTC

[section ""cstring" . i7Ldc_str" {
     i7Ldc_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,80,116,114]
 },
 GHC.ForeignPtr.PlainPtr_con_entry() //  [R1]
         { []
         }
     {offset
       c7LWt: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.PlainPtr_con_info" {
     GHC.ForeignPtr.PlainPtr_con_info:
         const GHC.ForeignPtr.PlainPtr_con_entry;
         const 1;
         const 8589934594;
         const i7Ldc_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.944316119 UTC

[section ""cstring" . i7Lde_str" {
     i7Lde_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,78,111,70,105,110,97,108,105,122,101,114,115]
 },
 GHC.ForeignPtr.NoFinalizers_con_entry() //  [R1]
         { []
         }
     {offset
       c7LWz: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.NoFinalizers_con_info" {
     GHC.ForeignPtr.NoFinalizers_con_info:
         const GHC.ForeignPtr.NoFinalizers_con_entry;
         const 4294967296;
         const 3;
         const i7Lde_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.947824625 UTC

[section ""cstring" . i7Ldg_str" {
     i7Ldg_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,67,70,105,110,97,108,105,122,101,114,115]
 },
 GHC.ForeignPtr.CFinalizers_con_entry() //  [R1]
         { []
         }
     {offset
       c7LWF: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.CFinalizers_con_info" {
     GHC.ForeignPtr.CFinalizers_con_info:
         const GHC.ForeignPtr.CFinalizers_con_entry;
         const 1;
         const 4294967298;
         const i7Ldg_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.951341488 UTC

[section ""cstring" . i7Ldi_str" {
     i7Ldi_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]
 },
 GHC.ForeignPtr.HaskellFinalizers_con_entry() //  [R1]
         { []
         }
     {offset
       c7LWL: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.HaskellFinalizers_con_info" {
     GHC.ForeignPtr.HaskellFinalizers_con_info:
         const GHC.ForeignPtr.HaskellFinalizers_con_entry;
         const 1;
         const 8589934594;
         const i7Ldi_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.956078368 UTC

[section ""cstring" . i7Ldk_str" {
     i7Ldk_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,70,111,114,101,105,103,110,80,116,114]
 },
 GHC.ForeignPtr.ForeignPtr_con_entry() //  [R1]
         { []
         }
     {offset
       c7LWR: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.ForeignPtr_con_info" {
     GHC.ForeignPtr.ForeignPtr_con_info:
         const GHC.ForeignPtr.ForeignPtr_con_entry;
         const 4294967297;
         const 5;
         const i7Ldk_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:50.959559859 UTC

[section ""relreadonly" . S7KkP_srt" {
     S7KkP_srt:
         const GHC.Err.undefined_closure;
         const lvl10_r7Kb5_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ForeignPtr.mallocForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
         const GHC.Ptr.$w$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
         const GHC.ForeignPtr.$fShowForeignPtr1_closure;
         const GHC.ForeignPtr.noMixingError_closure;
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const lvl22_r7Kbz_closure;
         const GHC.ForeignPtr.mallocForeignPtr1_closure;
         const GHC.ForeignPtr.mallocForeignPtr3_closure;
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
         const GHC.ForeignPtr.$wnewConcForeignPtr_closure;
         const GHC.ForeignPtr.newConcForeignPtr1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:52.985952296 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:52.987909927 UTC

[section ""data" . GHC.ForeignPtr.$WPlainForeignPtr_closure" {
     GHC.ForeignPtr.$WPlainForeignPtr_closure:
         const GHC.ForeignPtr.$WPlainForeignPtr_info;
 },
 GHC.ForeignPtr.$WPlainForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7M51: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7M55; else goto c7M56;
       c7M55: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$WPlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7M56: // global
           I64[Sp - 8] = block_c7M4Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7M5a; else goto c7M4Z;
       u7M5a: // global
           call _c7M4Y(R1) args: 0, res: 0, upd: 0;
       c7M4Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$WPlainForeignPtr_info" {
     GHC.ForeignPtr.$WPlainForeignPtr_info:
         const GHC.ForeignPtr.$WPlainForeignPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7M4Y() //  [R1]
         { []
         }
     {offset
       c7M4Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7M59; else goto c7M58;
       c7M59: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7M58: // global
           _s7LX0::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _s7LX0::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7M4Y_info" {
     block_c7M4Y_info:
         const _c7M4Y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:52.994457422 UTC

[section ""data" . GHC.ForeignPtr.$WMallocPtr_closure" {
     GHC.ForeignPtr.$WMallocPtr_closure:
         const GHC.ForeignPtr.$WMallocPtr_info;
 },
 GHC.ForeignPtr.$WMallocPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7M5u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M5y; else goto c7M5z;
       c7M5y: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$WMallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7M5z: // global
           I64[Sp - 16] = block_c7M5r_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7M5D; else goto c7M5s;
       u7M5D: // global
           call _c7M5r(R1) args: 0, res: 0, upd: 0;
       c7M5s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$WMallocPtr_info" {
     GHC.ForeignPtr.$WMallocPtr_info:
         const GHC.ForeignPtr.$WMallocPtr_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7M5r() //  [R1]
         { []
         }
     {offset
       c7M5r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7M5C; else goto c7M5B;
       c7M5C: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7M5B: // global
           _s7LX4::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s7LX4::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7M5r_info" {
     block_c7M5r_info:
         const _c7M5r;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:52.999373122 UTC

[section ""cstring" . lvl_r7KaV_bytes" {
     lvl_r7KaV_bytes:
         I8[] [117,110,100,101,102,105,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.001605889 UTC

[section ""data" . lvl1_r7KaW_closure" {
     lvl1_r7KaW_closure:
         const lvl1_r7KaW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r7KaW_entry() //  [R1]
         { []
         }
     {offset
       c7M5Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M5Z; else goto c7M60;
       c7M5Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M60: // global
           (_c7M5V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M5V::I64 == 0) goto c7M5X; else goto c7M5W;
       c7M5X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M5W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M5V::I64;
           R2 = lvl_r7KaV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r7KaW_info" {
     lvl1_r7KaW_info:
         const lvl1_r7KaW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.005068602 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule4_bytes" {
     GHC.ForeignPtr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.007122335 UTC

[section ""data" . lvl2_r7KaX_closure" {
     lvl2_r7KaX_closure:
         const lvl2_r7KaX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r7KaX_entry() //  [R1]
         { []
         }
     {offset
       c7M6g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M6h; else goto c7M6i;
       c7M6h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M6i: // global
           (_c7M6d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M6d::I64 == 0) goto c7M6f; else goto c7M6e;
       c7M6f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M6e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M6d::I64;
           R2 = GHC.ForeignPtr.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r7KaX_info" {
     lvl2_r7KaX_info:
         const lvl2_r7KaX_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.010547122 UTC

[section ""cstring" . GHC.ForeignPtr.$trModule2_bytes" {
     GHC.ForeignPtr.$trModule2_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.012604538 UTC

[section ""data" . lvl3_r7KaY_closure" {
     lvl3_r7KaY_closure:
         const lvl3_r7KaY_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r7KaY_entry() //  [R1]
         { []
         }
     {offset
       c7M6y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M6z; else goto c7M6A;
       c7M6z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M6A: // global
           (_c7M6v::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M6v::I64 == 0) goto c7M6x; else goto c7M6w;
       c7M6x: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M6w: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M6v::I64;
           R2 = GHC.ForeignPtr.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r7KaY_info" {
     lvl3_r7KaY_info:
         const lvl3_r7KaY_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.01626558 UTC

[section ""cstring" . lvl4_r7KaZ_bytes" {
     lvl4_r7KaZ_bytes:
         I8[] [46,47,71,72,67,47,70,111,114,101,105,103,110,80,116,114,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.018291401 UTC

[section ""data" . lvl5_r7Kb0_closure" {
     lvl5_r7Kb0_closure:
         const lvl5_r7Kb0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r7Kb0_entry() //  [R1]
         { []
         }
     {offset
       c7M6Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M6R; else goto c7M6S;
       c7M6R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M6S: // global
           (_c7M6N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M6N::I64 == 0) goto c7M6P; else goto c7M6O;
       c7M6P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M6O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M6N::I64;
           R2 = lvl4_r7KaZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r7Kb0_info" {
     lvl5_r7Kb0_info:
         const lvl5_r7Kb0_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.02153137 UTC

[section ""data" . lvl6_r7Kb1_closure" {
     lvl6_r7Kb1_closure:
         const GHC.Types.I#_con_info;
         const 214;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.023067552 UTC

[section ""data" . lvl7_r7Kb2_closure" {
     lvl7_r7Kb2_closure:
         const GHC.Types.I#_con_info;
         const 34;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.024697918 UTC

[section ""data" . lvl8_r7Kb3_closure" {
     lvl8_r7Kb3_closure:
         const GHC.Types.I#_con_info;
         const 43;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.026363028 UTC

[section ""data" . lvl9_r7Kb4_closure" {
     lvl9_r7Kb4_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl6_r7Kb1_closure+1;
         const lvl7_r7Kb2_closure+1;
         const lvl6_r7Kb1_closure+1;
         const lvl8_r7Kb3_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.028016666 UTC

[section ""data" . lvl10_r7Kb5_closure" {
     lvl10_r7Kb5_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl9_r7Kb4_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.030849692 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr2_entry() //  [R1]
         { []
         }
     {offset
       c7M7c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7M7d; else goto c7M7e;
       c7M7d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M7e: // global
           (_c7M79::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M79::I64 == 0) goto c7M7b; else goto c7M7a;
       c7M7b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M7a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M79::I64;
           R2 = lvl10_r7Kb5_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtr2_info" {
     GHC.ForeignPtr.mallocPlainForeignPtr2_info:
         const GHC.ForeignPtr.mallocPlainForeignPtr2_entry;
         const 0;
         const 12884901909;
         const S7M7f_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.036526714 UTC

[section ""cstring" . lvl11_r7Kb6_bytes" {
     lvl11_r7Kb6_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.04048636 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr2_closure" {
     GHC.ForeignPtr.mallocForeignPtr2_closure:
         const GHC.ForeignPtr.mallocForeignPtr2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr2_entry() //  [R1]
         { []
         }
     {offset
       c7M7x: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7M7y; else goto c7M7z;
       c7M7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M7z: // global
           (_c7M7s::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M7s::I64 == 0) goto c7M7u; else goto c7M7t;
       c7M7u: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M7t: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M7s::I64;
           I64[Sp - 24] = block_c7M7v_info;
           R2 = lvl11_r7Kb6_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtr2_info" {
     GHC.ForeignPtr.mallocForeignPtr2_info:
         const GHC.ForeignPtr.mallocForeignPtr2_entry;
         const 0;
         const 4294967317;
         const S7M7f_srt+16;
 },
 _c7M7v() //  [R1]
         { []
         }
     {offset
       c7M7v: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7M7v_info" {
     block_c7M7v_info:
         const _c7M7v;
         const 0;
         const 4294967326;
         const S7M7f_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.048251039 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr1_entry() //  [R2]
         { []
         }
     {offset
       c7M7V: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7M7Z; else goto c7M80;
       c7M7Z: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7M80: // global
           I64[Sp - 16] = block_c7M7T_info;
           _s7LX6::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           P64[Sp - 8] = _s7LX6::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtr1_info" {
     GHC.ForeignPtr.mallocPlainForeignPtr1_info:
         const GHC.ForeignPtr.mallocPlainForeignPtr1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const S7M7f_srt+24;
 },
 _c7M7T() //  [R1]
         { []
         }
     {offset
       c7M7T: // global
           I64[Sp] = block_c7M7Y_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7M7T_info" {
     block_c7M7T_info:
         const _c7M7T;
         const 1;
         const 21474836510;
         const S7M7f_srt+24;
 },
 _c7M7Y() //  [R1]
         { []
         }
     {offset
       c7M7Y: // global
           _s7LXb::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7LXb::I64, 0)) goto c7M8h; else goto c7M8l;
       c7M8h: // global
           _s7LX9::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7M89_info;
           R2 = _s7LX9::I64;
           R1 = _s7LXb::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c7M8l: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7M7Y_info" {
     block_c7M7Y_info:
         const _c7M7Y;
         const 65;
         const 4294967326;
         const S7M7f_srt+24;
 },
 _c7M89() //  [R1]
         { []
         }
     {offset
       c7M89: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7M8k; else goto c7M8j;
       c7M8k: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7M8j: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7M89_info" {
     block_c7M89_info:
         const _c7M89;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.058484165 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtr_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtr_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7M8R: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtr_info" {
     GHC.ForeignPtr.mallocPlainForeignPtr_info:
         const GHC.ForeignPtr.mallocPlainForeignPtr_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7M7f_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.062117874 UTC

[section ""cstring" . lvl12_r7Kb7_bytes" {
     lvl12_r7Kb7_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.064991073 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes2_entry() //  [R1]
         { []
         }
     {offset
       c7M97: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7M98; else goto c7M99;
       c7M98: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7M99: // global
           (_c7M92::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7M92::I64 == 0) goto c7M94; else goto c7M93;
       c7M94: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7M93: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7M92::I64;
           I64[Sp - 24] = block_c7M95_info;
           R2 = lvl12_r7Kb7_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes2_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_entry;
         const 0;
         const 4294967317;
         const S7M7f_srt+16;
 },
 _c7M95() //  [R1]
         { []
         }
     {offset
       c7M95: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7M95_info" {
     block_c7M95_info:
         const _c7M95;
         const 0;
         const 4294967326;
         const S7M7f_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.071359235 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry() //  [R2]
         { []
         }
     {offset
       c7M9w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7M9x; else goto c7M9y;
       c7M9x: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7M9y: // global
           I64[Sp - 8] = block_c7M9t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7M9S; else goto c7M9u;
       u7M9S: // global
           call _c7M9t(R1) args: 0, res: 0, upd: 0;
       c7M9u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes1_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S7M7f_srt+48;
 },
 _c7M9t() //  [R1]
         { []
         }
     {offset
       c7M9t: // global
           _s7LXo::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7LXo::I64, 0)) goto c7M9N; else goto c7M9R;
       c7M9N: // global
           I64[Sp] = block_c7M9F_info;
           R1 = _s7LXo::I64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c7M9R: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7M9t_info" {
     block_c7M9t_info:
         const _c7M9t;
         const 0;
         const 4294967326;
         const S7M7f_srt+56;
 },
 _c7M9F() //  [R1]
         { []
         }
     {offset
       c7M9F: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7M9Q; else goto c7M9P;
       c7M9Q: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7M9P: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7M9F_info" {
     block_c7M9F_info:
         const _c7M9F;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.078068944 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrBytes_entry() //  [R2]
         { []
         }
     {offset
       c7Mag: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrBytes_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrBytes_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7M7f_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.081109558 UTC

[section ""cstring" . lvl13_r7Kb8_bytes" {
     lvl13_r7Kb8_bytes:
         I8[] [109,97,108,108,111,99,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.083358076 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_entry() //  [R1]
         { []
         }
     {offset
       c7Maw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Max; else goto c7May;
       c7Max: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7May: // global
           (_c7Mar::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Mar::I64 == 0) goto c7Mat; else goto c7Mas;
       c7Mat: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Mas: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Mar::I64;
           I64[Sp - 24] = block_c7Mau_info;
           R2 = lvl13_r7Kb8_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_entry;
         const 0;
         const 4294967317;
         const S7M7f_srt+16;
 },
 _c7Mau() //  [R1]
         { []
         }
     {offset
       c7Mau: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Mau_info" {
     block_c7Mau_info:
         const _c7Mau;
         const 0;
         const 4294967326;
         const S7M7f_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.089846719 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c7MaV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MaW; else goto c7MaX;
       c7MaW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MaX: // global
           I64[Sp - 16] = block_c7MaS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mbo; else goto c7MaT;
       u7Mbo: // global
           call _c7MaS(R1) args: 0, res: 0, upd: 0;
       c7MaT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S7M7f_srt+64;
 },
 _c7MaS() //  [R1]
         { []
         }
     {offset
       c7MaS: // global
           _s7LXC::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7LXC::I64, 0)) goto c7Mbh; else goto c7Mbm;
       c7Mbh: // global
           I64[Sp] = block_c7Mb4_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LXC::I64;
           if (R1 & 7 != 0) goto u7Mbn; else goto c7Mb5;
       u7Mbn: // global
           call _c7Mb4(R1) args: 0, res: 0, upd: 0;
       c7Mb5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Mbm: // global
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MaS_info" {
     block_c7MaS_info:
         const _c7MaS;
         const 1;
         const 4294967326;
         const S7M7f_srt+72;
 },
 _c7Mb4() //  [R1]
         { []
         }
     {offset
       c7Mb4: // global
           _s7LXC::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7Mb9_info;
           R2 = I64[R1 + 7];
           R1 = _s7LXC::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mb4_info" {
     block_c7Mb4_info:
         const _c7Mb4;
         const 65;
         const 30;
 },
 _c7Mb9() //  [R1]
         { []
         }
     {offset
       c7Mb9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Mbl; else goto c7Mbk;
       c7Mbl: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mbk: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mb9_info" {
     block_c7Mb9_info:
         const _c7Mb9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.09847671 UTC

[section ""data" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c7MbR: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info" {
     GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_info:
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7M7f_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.101530874 UTC

[section ""cstring" . lvl14_r7Kb9_bytes" {
     lvl14_r7Kb9_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,109,105,120,32,72,97,115,107,101,108,108,32,97,110,100,32,67,32,102,105,110,97,108,105,122,101,114,115,32,105,110,32,116,104,101,32,115,97,109,101,32,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.103837726 UTC

[section ""data" . GHC.ForeignPtr.noMixingError_closure" {
     GHC.ForeignPtr.noMixingError_closure:
         const GHC.ForeignPtr.noMixingError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.noMixingError_entry() //  [R1]
         { []
         }
     {offset
       c7Mc7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Mc8; else goto c7Mc9;
       c7Mc8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Mc9: // global
           (_c7Mc2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Mc2::I64 == 0) goto c7Mc4; else goto c7Mc3;
       c7Mc4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Mc3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Mc2::I64;
           I64[Sp - 24] = block_c7Mc5_info;
           R2 = lvl14_r7Kb9_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.noMixingError_info" {
     GHC.ForeignPtr.noMixingError_info:
         const GHC.ForeignPtr.noMixingError_entry;
         const 0;
         const 4294967317;
         const S7M7f_srt+16;
 },
 _c7Mc5() //  [R1]
         { []
         }
     {offset
       c7Mc5: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Mc5_info" {
     block_c7Mc5_info:
         const _c7Mc5;
         const 0;
         const 4294967326;
         const S7M7f_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.110275557 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr1_closure" {
     GHC.ForeignPtr.touchForeignPtr1_closure:
         const GHC.ForeignPtr.touchForeignPtr1_info;
 },
 GHC.ForeignPtr.touchForeignPtr1_entry() //  [R2]
         { []
         }
     {offset
       c7Mcw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Mcx; else goto c7Mcy;
       c7Mcx: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.touchForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Mcy: // global
           I64[Sp - 8] = block_c7Mct_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7McD; else goto c7Mcu;
       u7McD: // global
           call _c7Mct(R1) args: 0, res: 0, upd: 0;
       c7Mcu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.touchForeignPtr1_info" {
     GHC.ForeignPtr.touchForeignPtr1_info:
         const GHC.ForeignPtr.touchForeignPtr1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7Mct() //  [R1]
         { []
         }
     {offset
       c7Mct: // global
           call MO_Touch(P64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mct_info" {
     block_c7Mct_info:
         const _c7Mct;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.115380471 UTC

[section ""data" . GHC.ForeignPtr.touchForeignPtr_closure" {
     GHC.ForeignPtr.touchForeignPtr_closure:
         const GHC.ForeignPtr.touchForeignPtr_info;
 },
 GHC.ForeignPtr.touchForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7McU: // global
           R2 = R2;
           call GHC.ForeignPtr.touchForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.touchForeignPtr_info" {
     GHC.ForeignPtr.touchForeignPtr_info:
         const GHC.ForeignPtr.touchForeignPtr_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.119371129 UTC

[section ""data" . GHC.ForeignPtr.unsafeForeignPtrToPtr_closure" {
     GHC.ForeignPtr.unsafeForeignPtrToPtr_closure:
         const GHC.ForeignPtr.unsafeForeignPtrToPtr_info;
 },
 GHC.ForeignPtr.unsafeForeignPtrToPtr_entry() //  [R2]
         { []
         }
     {offset
       c7Md8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Mdc; else goto c7Mdd;
       c7Mdc: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.unsafeForeignPtrToPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Mdd: // global
           I64[Sp - 8] = block_c7Md5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Mdh; else goto c7Md6;
       u7Mdh: // global
           call _c7Md5(R1) args: 0, res: 0, upd: 0;
       c7Md6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.unsafeForeignPtrToPtr_info" {
     GHC.ForeignPtr.unsafeForeignPtrToPtr_info:
         const GHC.ForeignPtr.unsafeForeignPtrToPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Md5() //  [R1]
         { []
         }
     {offset
       c7Md5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Mdg; else goto c7Mdf;
       c7Mdg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mdf: // global
           _s7LXW::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7LXW::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Md5_info" {
     block_c7Md5_info:
         const _c7Md5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.125616752 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c7MdB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MdH; else goto c7MdI;
       c7MdH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MdI: // global
           I64[Sp - 16] = block_c7Mdy_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MdN; else goto c7Mdz;
       u7MdN: // global
           call _c7Mdy(R1) args: 0, res: 0, upd: 0;
       c7Mdz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_info:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S7M7f_srt+80;
 },
 _c7Mdy() //  [R1]
         { []
         }
     {offset
       c7Mdy: // global
           _s7LY0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7MdE_info;
           R3 = _s7LY0::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mdy_info" {
     block_c7Mdy_info:
         const _c7Mdy;
         const 1;
         const 4294967326;
         const S7M7f_srt+80;
 },
 _c7MdE() //  [R1, R2]
         { []
         }
     {offset
       c7MdE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MdM; else goto c7MdL;
       c7MdM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7MdL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MdE_info" {
     block_c7MdE_info:
         const _c7MdE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.13351686 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c7Meb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Meh; else goto c7Mei;
       c7Meh: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Mei: // global
           I64[Sp - 8] = block_c7Me8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Men; else goto c7Me9;
       u7Men: // global
           call _c7Me8(R1) args: 0, res: 0, upd: 0;
       c7Me9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fShowForeignPtr_$cshow_info" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshow_info:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S7M7f_srt+80;
 },
 _c7Me8() //  [R1]
         { []
         }
     {offset
       c7Me8: // global
           I64[Sp] = block_c7Mee_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = I64[R1 + 15];
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Me8_info" {
     block_c7Me8_info:
         const _c7Me8;
         const 0;
         const 4294967326;
         const S7M7f_srt+80;
 },
 _c7Mee() //  [R1, R2]
         { []
         }
     {offset
       c7Mee: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Mem; else goto c7Mel;
       c7Mem: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7Mel: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mee_info" {
     block_c7Mee_info:
         const _c7Mee;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.140741806 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr1_closure" {
     GHC.ForeignPtr.$fShowForeignPtr1_closure:
         const GHC.ForeignPtr.$fShowForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MeM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MeS; else goto c7MeT;
       c7MeS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fShowForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MeT: // global
           I64[Sp - 16] = block_c7MeJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MeY; else goto c7MeK;
       u7MeY: // global
           call _c7MeJ(R1) args: 0, res: 0, upd: 0;
       c7MeK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fShowForeignPtr1_info" {
     GHC.ForeignPtr.$fShowForeignPtr1_info:
         const GHC.ForeignPtr.$fShowForeignPtr1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S7M7f_srt+80;
 },
 _c7MeJ() //  [R1]
         { []
         }
     {offset
       c7MeJ: // global
           _s7LYf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7MeP_info;
           R3 = _s7LYf::P64;
           R2 = I64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Ptr.$w$cshowsPrec_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MeJ_info" {
     block_c7MeJ_info:
         const _c7MeJ;
         const 1;
         const 4294967326;
         const S7M7f_srt+80;
 },
 _c7MeP() //  [R1, R2]
         { []
         }
     {offset
       c7MeP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MeX; else goto c7MeW;
       c7MeX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c7MeW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MeP_info" {
     block_c7MeP_info:
         const _c7MeP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.147787193 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info;
         const 0;
 },
 GHC.ForeignPtr.$fShowForeignPtr_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Mfj: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ForeignPtr.$fShowForeignPtr1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info" {
     GHC.ForeignPtr.$fShowForeignPtr_$cshowList_info:
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S7M7f_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.150883209 UTC

[section ""data" . GHC.ForeignPtr.$fShowForeignPtr_closure" {
     GHC.ForeignPtr.$fShowForeignPtr_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure+3;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure+1;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.154306329 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Mfy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MfC; else goto c7MfD;
       c7MfC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MfD: // global
           I64[Sp - 16] = block_c7Mfv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MfW; else goto c7Mfw;
       u7MfW: // global
           call _c7Mfv(R1) args: 0, res: 0, upd: 0;
       c7Mfw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Mfv() //  [R1]
         { []
         }
     {offset
       c7Mfv: // global
           I64[Sp] = block_c7MfB_info;
           _s7LYr::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LYr::I64;
           if (R1 & 7 != 0) goto u7MfV; else goto c7MfF;
       u7MfV: // global
           call _c7MfB(R1) args: 0, res: 0, upd: 0;
       c7MfF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mfv_info" {
     block_c7Mfv_info:
         const _c7Mfv;
         const 1;
         const 30;
 },
 _c7MfB() //  [R1]
         { []
         }
     {offset
       c7MfB: // global
           _s7LYr::I64 = I64[Sp + 8];
           _s7LYu::I64 = I64[R1 + 15];
           if (_s7LYr::I64 >= _s7LYu::I64) goto c7MfT; else goto c7MfU;
       c7MfT: // global
           if (_s7LYr::I64 == _s7LYu::I64) goto c7MfR; else goto c7MfQ;
       c7MfR: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MfQ: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MfU: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MfB_info" {
     block_c7MfB_info:
         const _c7MfB;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.161976461 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c==_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c==_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Mgp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mgt; else goto c7Mgu;
       c7Mgt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mgu: // global
           I64[Sp - 16] = block_c7Mgm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MgD; else goto c7Mgn;
       u7MgD: // global
           call _c7Mgm(R1) args: 0, res: 0, upd: 0;
       c7Mgn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fEqForeignPtr_$c==_info" {
     GHC.ForeignPtr.$fEqForeignPtr_$c==_info:
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Mgm() //  [R1]
         { []
         }
     {offset
       c7Mgm: // global
           I64[Sp] = block_c7Mgs_info;
           _s7LYB::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LYB::I64;
           if (R1 & 7 != 0) goto u7MgC; else goto c7Mgw;
       u7MgC: // global
           call _c7Mgs(R1) args: 0, res: 0, upd: 0;
       c7Mgw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mgm_info" {
     block_c7Mgm_info:
         const _c7Mgm;
         const 1;
         const 30;
 },
 _c7Mgs() //  [R1]
         { []
         }
     {offset
       c7Mgs: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mgs_info" {
     block_c7Mgs_info:
         const _c7Mgs;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.169460077 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure:
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_info;
 },
 GHC.ForeignPtr.$fEqForeignPtr_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Mh5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mh9; else goto c7Mha;
       c7Mh9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mha: // global
           I64[Sp - 16] = block_c7Mh2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mhn; else goto c7Mh3;
       u7Mhn: // global
           call _c7Mh2(R1) args: 0, res: 0, upd: 0;
       c7Mh3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fEqForeignPtr_$c/=_info" {
     GHC.ForeignPtr.$fEqForeignPtr_$c/=_info:
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Mh2() //  [R1]
         { []
         }
     {offset
       c7Mh2: // global
           I64[Sp] = block_c7Mh8_info;
           _s7LYK::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LYK::I64;
           if (R1 & 7 != 0) goto u7Mhm; else goto c7Mhc;
       u7Mhm: // global
           call _c7Mh8(R1) args: 0, res: 0, upd: 0;
       c7Mhc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mh2_info" {
     block_c7Mh2_info:
         const _c7Mh2;
         const 1;
         const 30;
 },
 _c7Mh8() //  [R1]
         { []
         }
     {offset
       c7Mh8: // global
           if (I64[Sp + 8] == I64[R1 + 15]) goto c7Mhl; else goto c7Mhk;
       c7Mhl: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Mhk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mh8_info" {
     block_c7Mh8_info:
         const _c7Mh8;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.175743492 UTC

[section ""data" . GHC.ForeignPtr.$fEqForeignPtr_closure" {
     GHC.ForeignPtr.$fEqForeignPtr_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_$c==_closure+2;
         const GHC.ForeignPtr.$fEqForeignPtr_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.178543424 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MhQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MhU; else goto c7MhV;
       c7MhU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MhV: // global
           I64[Sp - 16] = block_c7MhN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mi8; else goto c7MhO;
       u7Mi8: // global
           call _c7MhN(R1) args: 0, res: 0, upd: 0;
       c7MhO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$c<_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7MhN() //  [R1]
         { []
         }
     {offset
       c7MhN: // global
           I64[Sp] = block_c7MhT_info;
           _s7LYT::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LYT::I64;
           if (R1 & 7 != 0) goto u7Mi7; else goto c7MhX;
       u7Mi7: // global
           call _c7MhT(R1) args: 0, res: 0, upd: 0;
       c7MhX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MhN_info" {
     block_c7MhN_info:
         const _c7MhN;
         const 1;
         const 30;
 },
 _c7MhT() //  [R1]
         { []
         }
     {offset
       c7MhT: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7Mi5; else goto c7Mi6;
       c7Mi5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Mi6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MhT_info" {
     block_c7MhT_info:
         const _c7MhT;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.185877062 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MiA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MiE; else goto c7MiF;
       c7MiE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MiF: // global
           I64[Sp - 16] = block_c7Mix_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MiS; else goto c7Miy;
       u7MiS: // global
           call _c7Mix(R1) args: 0, res: 0, upd: 0;
       c7Miy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>=_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Mix() //  [R1]
         { []
         }
     {offset
       c7Mix: // global
           I64[Sp] = block_c7MiD_info;
           _s7LZ2::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LZ2::I64;
           if (R1 & 7 != 0) goto u7MiR; else goto c7MiH;
       u7MiR: // global
           call _c7MiD(R1) args: 0, res: 0, upd: 0;
       c7MiH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mix_info" {
     block_c7Mix_info:
         const _c7Mix;
         const 1;
         const 30;
 },
 _c7MiD() //  [R1]
         { []
         }
     {offset
       c7MiD: // global
           if (I64[Sp + 8] >= I64[R1 + 15]) goto c7MiP; else goto c7MiQ;
       c7MiP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MiQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MiD_info" {
     block_c7MiD_info:
         const _c7MiD;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.193378434 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Mjk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mjo; else goto c7Mjp;
       c7Mjo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mjp: // global
           I64[Sp - 16] = block_c7Mjh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MjI; else goto c7Mji;
       u7MjI: // global
           call _c7Mjh(R1) args: 0, res: 0, upd: 0;
       c7Mji: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$c>_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c>_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Mjh() //  [R1]
         { []
         }
     {offset
       c7Mjh: // global
           I64[Sp] = block_c7Mjn_info;
           _s7LZb::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LZb::I64;
           if (R1 & 7 != 0) goto u7MjH; else goto c7Mjr;
       u7MjH: // global
           call _c7Mjn(R1) args: 0, res: 0, upd: 0;
       c7Mjr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mjh_info" {
     block_c7Mjh_info:
         const _c7Mjh;
         const 1;
         const 30;
 },
 _c7Mjn() //  [R1]
         { []
         }
     {offset
       c7Mjn: // global
           _s7LZb::I64 = I64[Sp + 8];
           _s7LZe::I64 = I64[R1 + 15];
           if (_s7LZb::I64 < _s7LZe::I64) goto c7MjG; else goto c7MjF;
       c7MjF: // global
           if (_s7LZb::I64 == _s7LZe::I64) goto c7MjG; else goto c7MjC;
       c7MjG: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MjC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mjn_info" {
     block_c7Mjn_info:
         const _c7Mjn;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.201113984 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Mk9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mkd; else goto c7Mke;
       c7Mkd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mke: // global
           I64[Sp - 16] = block_c7Mk6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mkx; else goto c7Mk7;
       u7Mkx: // global
           call _c7Mk6(R1) args: 0, res: 0, upd: 0;
       c7Mk7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$c<=_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Mk6() //  [R1]
         { []
         }
     {offset
       c7Mk6: // global
           I64[Sp] = block_c7Mkc_info;
           _s7LZl::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7LZl::I64;
           if (R1 & 7 != 0) goto u7Mkw; else goto c7Mkg;
       u7Mkw: // global
           call _c7Mkc(R1) args: 0, res: 0, upd: 0;
       c7Mkg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mk6_info" {
     block_c7Mk6_info:
         const _c7Mk6;
         const 1;
         const 30;
 },
 _c7Mkc() //  [R1]
         { []
         }
     {offset
       c7Mkc: // global
           _s7LZl::I64 = I64[Sp + 8];
           _s7LZo::I64 = I64[R1 + 15];
           if (_s7LZl::I64 < _s7LZo::I64) goto c7Mkv; else goto c7Mku;
       c7Mku: // global
           if (_s7LZl::I64 == _s7LZo::I64) goto c7Mkv; else goto c7Mkr;
       c7Mkv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Mkr: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mkc_info" {
     block_c7Mkc_info:
         const _c7Mkc;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.208689646 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MkY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Ml2; else goto c7Ml3;
       c7Ml2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ml3: // global
           I64[Sp - 16] = block_c7MkV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mlm; else goto c7MkW;
       u7Mlm: // global
           call _c7MkV(R1) args: 0, res: 0, upd: 0;
       c7MkW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmax_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7MkV() //  [R1]
         { []
         }
     {offset
       c7MkV: // global
           I64[Sp - 8] = block_c7Ml1_info;
           _s7LZu::P64 = R1;
           _s7LZv::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7LZv::I64;
           P64[Sp + 8] = _s7LZu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Mll; else goto c7Ml5;
       u7Mll: // global
           call _c7Ml1(R1) args: 0, res: 0, upd: 0;
       c7Ml5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MkV_info" {
     block_c7MkV_info:
         const _c7MkV;
         const 1;
         const 30;
 },
 _c7Ml1() //  [R1]
         { []
         }
     {offset
       c7Ml1: // global
           _s7LZv::I64 = I64[Sp + 8];
           _s7LZx::P64 = R1;
           _s7LZy::I64 = I64[R1 + 15];
           if (_s7LZv::I64 < _s7LZy::I64) goto c7Mlk; else goto c7Mlj;
       c7Mlj: // global
           if (_s7LZv::I64 == _s7LZy::I64) goto c7Mlk; else goto c7Mlg;
       c7Mlk: // global
           R1 = _s7LZx::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7Mlg: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ml1_info" {
     block_c7Ml1_info:
         const _c7Ml1;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.216667178 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info;
 },
 GHC.ForeignPtr.$fOrdForeignPtr_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MlN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MlR; else goto c7MlS;
       c7MlR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MlS: // global
           I64[Sp - 16] = block_c7MlK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mmb; else goto c7MlL;
       u7Mmb: // global
           call _c7MlK(R1) args: 0, res: 0, upd: 0;
       c7MlL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info" {
     GHC.ForeignPtr.$fOrdForeignPtr_$cmin_info:
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7MlK() //  [R1]
         { []
         }
     {offset
       c7MlK: // global
           I64[Sp - 8] = block_c7MlQ_info;
           _s7LZE::P64 = R1;
           _s7LZF::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _s7LZF::I64;
           P64[Sp + 8] = _s7LZE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Mma; else goto c7MlU;
       u7Mma: // global
           call _c7MlQ(R1) args: 0, res: 0, upd: 0;
       c7MlU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MlK_info" {
     block_c7MlK_info:
         const _c7MlK;
         const 1;
         const 30;
 },
 _c7MlQ() //  [R1]
         { []
         }
     {offset
       c7MlQ: // global
           _s7LZE::P64 = P64[Sp + 16];
           _s7LZF::I64 = I64[Sp + 8];
           _s7LZI::I64 = I64[R1 + 15];
           if (_s7LZF::I64 < _s7LZI::I64) goto c7Mm9; else goto c7Mm8;
       c7Mm8: // global
           if (_s7LZF::I64 == _s7LZI::I64) goto c7Mm9; else goto c7Mm5;
       c7Mm9: // global
           R1 = _s7LZE::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7Mm5: // global
           R1 = R1 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MlQ_info" {
     block_c7MlQ_info:
         const _c7MlQ;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.224495447 UTC

[section ""data" . GHC.ForeignPtr.$fOrdForeignPtr_closure" {
     GHC.ForeignPtr.$fOrdForeignPtr_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.ForeignPtr.$fEqForeignPtr_closure+1;
         const GHC.ForeignPtr.$fOrdForeignPtr_$ccompare_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c<=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$c>=_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmax_closure+2;
         const GHC.ForeignPtr.$fOrdForeignPtr_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.226967137 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr1_closure" {
     GHC.ForeignPtr.castForeignPtr1_closure:
         const GHC.ForeignPtr.castForeignPtr1_info;
 },
 GHC.ForeignPtr.castForeignPtr1_entry() //  [R2]
         { []
         }
     {offset
       c7MmA: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.castForeignPtr1_info" {
     GHC.ForeignPtr.castForeignPtr1_info:
         const GHC.ForeignPtr.castForeignPtr1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.231006972 UTC

[section ""data" . GHC.ForeignPtr.castForeignPtr_closure" {
     GHC.ForeignPtr.castForeignPtr_closure:
         const GHC.ForeignPtr.castForeignPtr_info;
 },
 GHC.ForeignPtr.castForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7MmN: // global
           R2 = R2;
           call GHC.ForeignPtr.castForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.castForeignPtr_info" {
     GHC.ForeignPtr.castForeignPtr_info:
         const GHC.ForeignPtr.castForeignPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.236071229 UTC

[section ""data" . GHC.ForeignPtr.plusForeignPtr_closure" {
     GHC.ForeignPtr.plusForeignPtr_closure:
         const GHC.ForeignPtr.plusForeignPtr_info;
 },
 GHC.ForeignPtr.plusForeignPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Mn1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Mnd; else goto c7Mne;
       c7Mnd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.plusForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mne: // global
           I64[Sp - 16] = block_c7MmY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mnk; else goto c7MmZ;
       u7Mnk: // global
           call _c7MmY(R1) args: 0, res: 0, upd: 0;
       c7MmZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.plusForeignPtr_info" {
     GHC.ForeignPtr.plusForeignPtr_info:
         const GHC.ForeignPtr.plusForeignPtr_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7MmY() //  [R1]
         { []
         }
     {offset
       c7MmY: // global
           I64[Sp - 8] = block_c7Mn4_info;
           _s7LZR::P64 = P64[R1 + 7];
           _s7LZQ::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7LZR::P64;
           I64[Sp + 8] = _s7LZQ::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Mnj; else goto c7Mn5;
       u7Mnj: // global
           call _c7Mn4(R1) args: 0, res: 0, upd: 0;
       c7Mn5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MmY_info" {
     block_c7MmY_info:
         const _c7MmY;
         const 1;
         const 30;
 },
 _c7Mn4() //  [R1]
         { []
         }
     {offset
       c7Mn4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Mni; else goto c7Mnh;
       c7Mni: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mnh: // global
           _s7LZU::I64 = I64[Sp + 16] + I64[R1 + 7];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _s7LZU::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mn4_info" {
     block_c7Mn4_info:
         const _c7Mn4;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.243419972 UTC

[section ""data" . GHC.ForeignPtr.$trModule3_closure" {
     GHC.ForeignPtr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.245169077 UTC

[section ""data" . GHC.ForeignPtr.$trModule1_closure" {
     GHC.ForeignPtr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.247185675 UTC

[section ""data" . GHC.ForeignPtr.$trModule_closure" {
     GHC.ForeignPtr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ForeignPtr.$trModule3_closure+1;
         const GHC.ForeignPtr.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.248938023 UTC

[section ""data" . $krep_r7Kba_closure" {
     $krep_r7Kba_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.2509453 UTC

[section ""data" . $krep1_r7Kbb_closure" {
     $krep1_r7Kbb_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.252807032 UTC

[section ""data" . $krep2_r7Kbc_closure" {
     $krep2_r7Kbc_closure:
         const :_con_info;
         const $krep1_r7Kbb_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.254691066 UTC

[section ""data" . $krep3_r7Kbd_closure" {
     $krep3_r7Kbd_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.256381597 UTC

[section ""data" . $krep4_r7Kbe_closure" {
     $krep4_r7Kbe_closure:
         const :_con_info;
         const $krep3_r7Kbd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.258226731 UTC

[section ""data" . $krep5_r7Kbf_closure" {
     $krep5_r7Kbf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_r7Kbe_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.25983219 UTC

[section ""data" . $krep6_r7Kbg_closure" {
     $krep6_r7Kbg_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.261688062 UTC

[section ""data" . $krep7_r7Kbh_closure" {
     $krep7_r7Kbh_closure:
         const :_con_info;
         const $krep_r7Kba_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.263392281 UTC

[section ""data" . $krep8_r7Kbi_closure" {
     $krep8_r7Kbi_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep7_r7Kbh_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.265047411 UTC

[section ""data" . $krep9_r7Kbj_closure" {
     $krep9_r7Kbj_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWeak#_closure;
         const $krep2_r7Kbc_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.26685557 UTC

[section ""data" . $krep10_r7Kbk_closure" {
     $krep10_r7Kbk_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcAddr#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.268525793 UTC

[section ""cstring" . GHC.ForeignPtr.$tcFinalizers2_bytes" {
     GHC.ForeignPtr.$tcFinalizers2_bytes:
         I8[] [70,105,110,97,108,105,122,101,114,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.270120051 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers1_closure" {
     GHC.ForeignPtr.$tcFinalizers1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcFinalizers2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.271944641 UTC

[section ""data" . GHC.ForeignPtr.$tcFinalizers_closure" {
     GHC.ForeignPtr.$tcFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcFinalizers1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2126386461452460014;
         const 14391791758474672075;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.273620694 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers1_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcFinalizers_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.275414546 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'NoFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'NoFinalizers3_bytes:
         I8[] [39,78,111,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.277050603 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers2_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.27906992 UTC

[section ""data" . GHC.ForeignPtr.$tc'NoFinalizers_closure" {
     GHC.ForeignPtr.$tc'NoFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 1940741700794708869;
         const 15606281748314638871;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.280843416 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers1_closure" {
     GHC.ForeignPtr.$tc'CFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.282459669 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'CFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'CFinalizers3_bytes:
         I8[] [39,67,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.284183071 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers2_closure" {
     GHC.ForeignPtr.$tc'CFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'CFinalizers3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.285734463 UTC

[section ""data" . GHC.ForeignPtr.$tc'CFinalizers_closure" {
     GHC.ForeignPtr.$tc'CFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'CFinalizers1_closure+4;
         const 5471016724267814004;
         const 11112927960337249170;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.287379464 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers1_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r7Kbf_closure+1;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.289054491 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes" {
     GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes:
         I8[] [39,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.291025996 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers2_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'HaskellFinalizers3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.292662557 UTC

[section ""data" . GHC.ForeignPtr.$tc'HaskellFinalizers_closure" {
     GHC.ForeignPtr.$tc'HaskellFinalizers_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers2_closure+1;
         const GHC.ForeignPtr.$tc'HaskellFinalizers1_closure+4;
         const 2766439294378598012;
         const 9182349323511249767;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.294578287 UTC

[section ""data" . $krep11_r7Kbl_closure" {
     $krep11_r7Kbl_closure:
         const :_con_info;
         const GHC.ForeignPtr.$tc'NoFinalizers1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.296242781 UTC

[section ""data" . $krep12_r7Kbm_closure" {
     $krep12_r7Kbm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep11_r7Kbl_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.298136665 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtrContents2_bytes" {
     GHC.ForeignPtr.$tcForeignPtrContents2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114,67,111,110,116,101,110,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.299645405 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents1_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.301196565 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtrContents_closure" {
     GHC.ForeignPtr.$tcForeignPtrContents_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtrContents1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2960910307208088010;
         const 1419315288615932334;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.303034533 UTC

[section ""data" . $krep13_r7Kbn_closure" {
     $krep13_r7Kbn_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtrContents_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.304634735 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.306191212 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainPtr3_bytes:
         I8[] [39,80,108,97,105,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.307905202 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.31024951 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainPtr_closure" {
     GHC.ForeignPtr.$tc'PlainPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainPtr1_closure+4;
         const 10386497703892305970;
         const 4483570029522342780;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.312292584 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep12_r7Kbm_closure+1;
         const $krep13_r7Kbn_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.314012755 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes:
         I8[] [39,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.315641384 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'PlainForeignPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.317503441 UTC

[section ""data" . GHC.ForeignPtr.$tc'PlainForeignPtr_closure" {
     GHC.ForeignPtr.$tc'PlainForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 9658214180323125435;
         const 4797612916438137994;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.319217721 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr1_closure" {
     GHC.ForeignPtr.$tc'MallocPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_r7Kbi_closure+1;
         const GHC.ForeignPtr.$tc'PlainForeignPtr1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.320803176 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MallocPtr3_bytes" {
     GHC.ForeignPtr.$tc'MallocPtr3_bytes:
         I8[] [39,77,97,108,108,111,99,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.323020208 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr2_closure" {
     GHC.ForeignPtr.$tc'MallocPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MallocPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.324656498 UTC

[section ""data" . GHC.ForeignPtr.$tc'MallocPtr_closure" {
     GHC.ForeignPtr.$tc'MallocPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr2_closure+1;
         const GHC.ForeignPtr.$tc'MallocPtr1_closure+4;
         const 1358169953258233372;
         const 15155489453511463859;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.326633767 UTC

[section ""cstring" . GHC.ForeignPtr.$tcForeignPtr2_bytes" {
     GHC.ForeignPtr.$tcForeignPtr2_bytes:
         I8[] [70,111,114,101,105,103,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.328216991 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr1_closure" {
     GHC.ForeignPtr.$tcForeignPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcForeignPtr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.329992529 UTC

[section ""data" . GHC.ForeignPtr.$tcForeignPtr_closure" {
     GHC.ForeignPtr.$tcForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcForeignPtr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 13645276010227069957;
         const 424768606850180054;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.331968287 UTC

[section ""data" . $krep14_r7Kbo_closure" {
     $krep14_r7Kbo_closure:
         const :_con_info;
         const $krep6_r7Kbg_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.333664973 UTC

[section ""data" . $krep15_r7Kbp_closure" {
     $krep15_r7Kbp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure+1;
         const $krep14_r7Kbo_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.335220549 UTC

[section ""data" . $krep16_r7Kbq_closure" {
     $krep16_r7Kbq_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_r7Kbn_closure+1;
         const $krep15_r7Kbp_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.336923869 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr1_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r7Kbk_closure+1;
         const $krep16_r7Kbq_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.33887147 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'ForeignPtr3_bytes" {
     GHC.ForeignPtr.$tc'ForeignPtr3_bytes:
         I8[] [39,70,111,114,101,105,103,110,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.340386972 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr2_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'ForeignPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.342190606 UTC

[section ""data" . GHC.ForeignPtr.$tc'ForeignPtr_closure" {
     GHC.ForeignPtr.$tc'ForeignPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr2_closure+1;
         const GHC.ForeignPtr.$tc'ForeignPtr1_closure+4;
         const 15066988800190837275;
         const 12331496810414125071;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.343790519 UTC

[section ""cstring" . GHC.ForeignPtr.$tcMyWeak2_bytes" {
     GHC.ForeignPtr.$tcMyWeak2_bytes:
         I8[] [77,121,87,101,97,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.345275747 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak1_closure" {
     GHC.ForeignPtr.$tcMyWeak1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tcMyWeak2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.347190763 UTC

[section ""data" . GHC.ForeignPtr.$tcMyWeak_closure" {
     GHC.ForeignPtr.$tcMyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tcMyWeak1_closure+1;
         const GHC.Types.krep$*_closure;
         const 18176044154139657744;
         const 6003369520845561213;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.34890829 UTC

[section ""data" . $krep17_r7Kbr_closure" {
     $krep17_r7Kbr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcMyWeak_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.350794759 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak1_closure" {
     GHC.ForeignPtr.$tc'MyWeak1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r7Kbj_closure+1;
         const $krep17_r7Kbr_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.352516001 UTC

[section ""cstring" . GHC.ForeignPtr.$tc'MyWeak3_bytes" {
     GHC.ForeignPtr.$tc'MyWeak3_bytes:
         I8[] [39,77,121,87,101,97,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.354733291 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak2_closure" {
     GHC.ForeignPtr.$tc'MyWeak2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ForeignPtr.$tc'MyWeak3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.356644803 UTC

[section ""data" . GHC.ForeignPtr.$tc'MyWeak_closure" {
     GHC.ForeignPtr.$tc'MyWeak_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ForeignPtr.$trModule_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak2_closure+1;
         const GHC.ForeignPtr.$tc'MyWeak1_closure+4;
         const 12419514784912020020;
         const 3312746660203758866;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.359526934 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr_1_closure" {
     GHC.ForeignPtr.newForeignPtr_1_closure:
         const GHC.ForeignPtr.newForeignPtr_1_info;
 },
 GHC.ForeignPtr.newForeignPtr_1_entry() //  [R2]
         { []
         }
     {offset
       c7MoP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MoW; else goto c7MoX;
       c7MoW: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.newForeignPtr_1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MoX: // global
           I64[Sp - 8] = block_c7MoM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Mp2; else goto c7MoN;
       u7Mp2: // global
           call _c7MoM(R1) args: 0, res: 0, upd: 0;
       c7MoN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.newForeignPtr_1_info" {
     GHC.ForeignPtr.newForeignPtr_1_info:
         const GHC.ForeignPtr.newForeignPtr_1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7MoM() //  [R1]
         { []
         }
     {offset
       c7MoM: // global
           I64[Sp - 8] = block_c7MoS_info;
           _s7LZY::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7LZY::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MoM_info" {
     block_c7MoM_info:
         const _c7MoM;
         const 0;
         const 30;
 },
 _c7MoS() //  [R1]
         { []
         }
     {offset
       c7MoS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Mp1; else goto c7Mp0;
       c7Mp1: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mp0: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MoS_info" {
     block_c7MoS_info:
         const _c7MoS;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.366565013 UTC

[section ""data" . GHC.ForeignPtr.newForeignPtr__closure" {
     GHC.ForeignPtr.newForeignPtr__closure:
         const GHC.ForeignPtr.newForeignPtr__info;
 },
 GHC.ForeignPtr.newForeignPtr__entry() //  [R2]
         { []
         }
     {offset
       c7Mpq: // global
           R2 = R2;
           call GHC.ForeignPtr.newForeignPtr_1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.newForeignPtr__info" {
     GHC.ForeignPtr.newForeignPtr__info:
         const GHC.ForeignPtr.newForeignPtr__entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.377139738 UTC

[section ""data" . GHC.ForeignPtr.$winsertCFinalizer_closure" {
     GHC.ForeignPtr.$winsertCFinalizer_closure:
         const GHC.ForeignPtr.$winsertCFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$winsertCFinalizer_slow() //  [R1]
         { []
         }
     {offset
       c7Mpy: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2,
                                                        R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_s7M0s_entry() //  [R1, R2]
         { []
         }
     {offset
       c7Mq0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mq1; else goto c7Mq2;
       c7Mq1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Mq2: // global
           I64[Sp - 16] = block_c7MpS_info;
           _s7M0l::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s7M0l::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Mqi; else goto c7MpT;
       u7Mqi: // global
           call _c7MpS(R1) args: 0, res: 0, upd: 0;
       c7MpT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7M0s_info" {
     sat_s7M0s_info:
         const sat_s7M0s_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S7M7f_srt+112;
 },
 _c7MpS() //  [R1]
         { []
         }
     {offset
       c7MpS: // global
           _c7MpZ::P64 = R1 & 7;
           if (_c7MpZ::P64 < 3) goto u7Mqh; else goto c7MpY;
       u7Mqh: // global
           if (_c7MpZ::P64 < 2) goto c7MpW; else goto c7MpX;
       c7MpW: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MpX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7Mqd; else goto c7Mqc;
       c7Mqd: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mqc: // global
           _s7M0o::P64 = P64[R1 + 6];
           I64[Hp - 56] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 48] = _s7M0o::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 55;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 39;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MpY: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MpS_info" {
     block_c7MpS_info:
         const _c7MpS;
         const 1;
         const 4294967326;
         const S7M7f_srt+112;
 },
 GHC.ForeignPtr.$winsertCFinalizer_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7Mqo: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c7Mqp; else goto u7Mrz;
       c7Mqp: // global
           R1 = GHC.ForeignPtr.$winsertCFinalizer_closure;
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       u7Mrz: // global
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call _c7Mpz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$winsertCFinalizer_info" {
     GHC.ForeignPtr.$winsertCFinalizer_info:
         const GHC.ForeignPtr.$winsertCFinalizer_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const S7M7f_srt+112;
         const 1926;
         const GHC.ForeignPtr.$winsertCFinalizer_slow;
 },
 _c7Mpz() //  []
         { []
         }
     {offset
       c7Mpz: // global
           _s7M0d::P64 = P64[P64[Sp] + 8];
           I64[Sp - 8] = block_c7MpC_info;
           R1 = _s7M0d::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7MrH; else goto c7MpD;
       u7MrH: // global
           call _c7MpC(R1) args: 0, res: 0, upd: 0;
       c7MpD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MpC() //  [R1]
         { []
         }
     {offset
       c7MpC: // global
           _c7Mqn::P64 = R1 & 7;
           if (_c7Mqn::P64 < 3) goto u7Mry; else goto c7Mqm;
       u7Mry: // global
           if (_c7Mqn::P64 < 2) goto c7Mqk; else goto c7Mql;
       c7Mqk: // global
           I64[Sp] = block_c7MpH_info;
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 8];
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
       c7Mql: // global
           I64[Sp] = block_c7Mrm_info;
           R5 = P64[R1 + 6];
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
       c7Mqm: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MpC_info" {
     block_c7MpC_info:
         const _c7MpC;
         const 1926;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _c7MpH() //  [R1]
         { []
         }
     {offset
       c7MpH: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c7Mqx; else goto c7Mqw;
       c7Mqx: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Mqw: // global
           I64[Hp - 88] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.False_closure+1;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 86;
           P64[Hp - 16] = Hp - 55;
           I64[Hp - 8] = sat_s7M0s_info;
           P64[Hp] = Hp - 31;
           I64[Sp - 8] = block_c7Mqr_info;
           R2 = Hp - 7;
           _s7M0h::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp] = _s7M0h::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MpH_info" {
     block_c7MpH_info:
         const _c7MpH;
         const 1926;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _c7Mqr() //  [R1]
         { []
         }
     {offset
       c7Mqr: // global
           I64[Sp] = block_c7Mqt_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MrJ; else goto c7Mqz;
       u7MrJ: // global
           call _c7Mqt(R1) args: 0, res: 0, upd: 0;
       c7Mqz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mqr_info" {
     block_c7Mqr_info:
         const _c7Mqr;
         const 3847;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _c7Mqt() //  [R1]
         { []
         }
     {offset
       c7Mqt: // global
           I64[Sp - 8] = block_c7MqF_info;
           _s7M0x::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s7M0x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7MrK; else goto c7MqS;
       u7MrK: // global
           call _c7MqF(R1) args: 0, res: 0, upd: 0;
       c7MqS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mqt_info" {
     block_c7Mqt_info:
         const _c7Mqt;
         const 3847;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _c7MqF() //  [R1]
         { []
         }
     {offset
       c7MqF: // global
           if (R1 & 7 == 1) goto c7MqZ; else goto c7Mrd;
       c7MqZ: // global
           I64[Sp + 16] = block_c7MqW_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7MrL; else goto c7Mr0;
       u7MrL: // global
           call _c7MqW(R1) args: 0, res: 0, upd: 0;
       c7Mr0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Mrd: // global
           I64[Sp] = block_c7Mr7_info;
           R1 = P64[Sp + 16];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MqF_info" {
     block_c7MqF_info:
         const _c7MqF;
         const 7688;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _c7MqW() //  [R1]
         { []
         }
     {offset
       c7MqW: // global
           P64[Sp] = P64[R1 + 7];
           call _s7M0z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7MqW_info" {
     block_c7MqW_info:
         const _c7MqW;
         const 1926;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _c7Mr7() //  []
         { []
         }
     {offset
       c7Mr7: // global
           I64[Sp + 16] = block_c7Mrb_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u7MrP; else goto c7Mrf;
       u7MrP: // global
           call _c7Mrb(R1) args: 0, res: 0, upd: 0;
       c7Mrf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mr7_info" {
     block_c7Mr7_info:
         const _c7Mr7;
         const 7816;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _c7Mrb() //  [R1]
         { []
         }
     {offset
       c7Mrb: // global
           P64[Sp] = P64[R1 + 7];
           call _s7M0z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Mrb_info" {
     block_c7Mrb_info:
         const _c7Mrb;
         const 1926;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _s7M0z() //  []
         { []
         }
     {offset
       s7M0z: // global
           _s7M0B::P64 = P64[Sp];
           I64[Sp] = block_c7MqK_info;
           R5 = _s7M0B::P64;
           R4 = I64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 40];
           R1 = I64[Sp + 16];
           call stg_addCFinalizerToWeak#(R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MqK() //  [R1]
         { []
         }
     {offset
       c7MqK: // global
           if (R1 == 1) goto u7MrC; else goto u7MrD;
       u7MrC: // global
           Sp = Sp + 56;
           call _c7Mrt() args: 0, res: 0, upd: 0;
       u7MrD: // global
           Sp = Sp + 8;
           call _c7Mrs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7MqK_info" {
     block_c7MqK_info:
         const _c7MqK;
         const 1926;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _c7Mrm() //  [R1]
         { []
         }
     {offset
       c7Mrm: // global
           if (R1 == 1) goto u7MrE; else goto u7MrF;
       u7MrE: // global
           Sp = Sp + 56;
           call _c7Mrt() args: 0, res: 0, upd: 0;
       u7MrF: // global
           Sp = Sp + 8;
           call _c7Mrs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Mrm_info" {
     block_c7Mrm_info:
         const _c7Mrm;
         const 1926;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _c7Mrt() //  []
         { []
         }
     {offset
       c7Mrt: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Mrs() //  []
         { []
         }
     {offset
       c7Mrs: // global
           P64[Sp] = P64[Sp];
           I64[Sp + 8] = I64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16];
           I64[Sp + 24] = I64[Sp + 24];
           I64[Sp + 32] = I64[Sp + 32];
           P64[Sp + 40] = P64[Sp + 40];
           call _c7Mpz() args: 0, res: 0, upd: 0;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.407783103 UTC

[section ""cstring" . lvl15_r7Kbs_bytes" {
     lvl15_r7Kbs_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,97,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.410357332 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer2_entry() //  [R1]
         { []
         }
     {offset
       c7MtJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MtK; else goto c7MtL;
       c7MtK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7MtL: // global
           (_c7MtE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7MtE::I64 == 0) goto c7MtG; else goto c7MtF;
       c7MtG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7MtF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7MtE::I64;
           I64[Sp - 24] = block_c7MtH_info;
           R2 = lvl15_r7Kbs_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrFinalizer2_info" {
     GHC.ForeignPtr.addForeignPtrFinalizer2_info:
         const GHC.ForeignPtr.addForeignPtrFinalizer2_entry;
         const 0;
         const 4294967317;
         const S7M7f_srt+16;
 },
 _c7MtH() //  [R1]
         { []
         }
     {offset
       c7MtH: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7MtH_info" {
     block_c7MtH_info:
         const _c7MtH;
         const 0;
         const 4294967326;
         const S7M7f_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.417579503 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_slow() //  [R1]
         { []
         }
     {offset
       c7Mu2: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2,
                                                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry() //  [R2, R3, R4,
                                                         R5]
         { []
         }
     {offset
       c7Mue: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Muf; else goto c7Mug;
       c7Muf: // global
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7Mug: // global
           I64[Sp - 32] = block_c7Mu6_info;
           R1 = R5;
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7Mur; else goto c7Mu7;
       u7Mur: // global
           call _c7Mu6(R1) args: 0, res: 0, upd: 0;
       c7Mu7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info" {
     GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_info:
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry;
         const 0;
         const 30064771086;
         const 21474836480;
         const S7M7f_srt+120;
         const 452;
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_slow;
 },
 _c7Mu6() //  [R1]
         { []
         }
     {offset
       c7Mu6: // global
           _c7Mud::P64 = R1 & 7;
           if (_c7Mud::P64 < 3) goto u7Muq; else goto c7Muc;
       u7Muq: // global
           _s7M0X::I64 = I64[Sp + 8];
           _s7M0Y::I64 = I64[Sp + 16];
           _s7M0Z::I64 = I64[Sp + 24];
           if (_c7Mud::P64 < 2) goto c7Mua; else goto c7Mub;
       c7Mua: // global
           R6 = _s7M0Z::I64;
           R5 = _s7M0Y::I64;
           R4 = 1;
           R3 = _s7M0X::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 24] = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7Mub: // global
           R6 = _s7M0Z::I64;
           R5 = _s7M0Y::I64;
           R4 = 1;
           R3 = _s7M0X::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 24] = R1;
           Sp = Sp + 24;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7Muc: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mu6_info" {
     block_c7Mu6_info:
         const _c7Mu6;
         const 451;
         const 12884901918;
         const S7M7f_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.427505472 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7MuO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MuX; else goto c7MuY;
       c7MuX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MuY: // global
           I64[Sp - 24] = block_c7MuL_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Mv7; else goto c7MuM;
       u7Mv7: // global
           call _c7MuL(R1) args: 0, res: 0, upd: 0;
       c7MuM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv1_info:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S7M7f_srt+136;
 },
 _c7MuL() //  [R1]
         { []
         }
     {offset
       c7MuL: // global
           I64[Sp] = block_c7MuR_info;
           _s7M1d::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7M1d::I64;
           if (R1 & 7 != 0) goto u7Mv6; else goto c7MuS;
       u7Mv6: // global
           call _c7MuR(R1) args: 0, res: 0, upd: 0;
       c7MuS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MuL_info" {
     block_c7MuL_info:
         const _c7MuL;
         const 2;
         const 4294967326;
         const S7M7f_srt+136;
 },
 _c7MuR() //  [R1]
         { []
         }
     {offset
       c7MuR: // global
           I64[Sp] = block_c7MuW_info;
           _s7M1f::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7M1f::I64;
           if (R1 & 7 != 0) goto u7Mv8; else goto c7Mv1;
       u7Mv8: // global
           call _c7MuW(R1) args: 0, res: 0, upd: 0;
       c7Mv1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MuR_info" {
     block_c7MuR_info:
         const _c7MuR;
         const 66;
         const 4294967326;
         const S7M7f_srt+136;
 },
 _c7MuW() //  [R1]
         { []
         }
     {offset
       c7MuW: // global
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 15];
           R3 = I64[Sp + 16];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_entry(R5,
                                                                 R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MuW_info" {
     block_c7MuW_info:
         const _c7MuW;
         const 194;
         const 4294967326;
         const S7M7f_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.439620412 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizerEnv_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Mvx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizerEnv1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrFinalizerEnv_info" {
     GHC.ForeignPtr.addForeignPtrFinalizerEnv_info:
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7M7f_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.446507105 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.$waddForeignPtrFinalizer_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7MvQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MvR; else goto c7MvS;
       c7MvR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MvS: // global
           I64[Sp - 24] = block_c7MvI_info;
           R1 = R4;
           I64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Mw3; else goto c7MvJ;
       u7Mw3: // global
           call _c7MvI(R1) args: 0, res: 0, upd: 0;
       c7MvJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$waddForeignPtrFinalizer_info" {
     GHC.ForeignPtr.$waddForeignPtrFinalizer_info:
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_entry;
         const 0;
         const 81604378638;
         const 17179869201;
         const S7M7f_srt+120;
 },
 _c7MvI() //  [R1]
         { []
         }
     {offset
       c7MvI: // global
           _c7MvP::P64 = R1 & 7;
           if (_c7MvP::P64 < 3) goto u7Mw2; else goto c7MvO;
       u7Mw2: // global
           _s7M1j::I64 = I64[Sp + 8];
           _s7M1k::I64 = I64[Sp + 16];
           if (_c7MvP::P64 < 2) goto c7MvM; else goto c7MvN;
       c7MvM: // global
           R6 = _s7M1k::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7M1j::I64;
           R2 = P64[R1 + 7];
           P64[Sp + 16] = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7MvN: // global
           R6 = _s7M1k::I64;
           R5 = 0;
           R4 = 0;
           R3 = _s7M1j::I64;
           R2 = P64[R1 + 14];
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 0, upd: 8;
       c7MvO: // global
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MvI_info" {
     block_c7MvI_info:
         const _c7MvI;
         const 194;
         const 12884901918;
         const S7M7f_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.455903185 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Mwo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mws; else goto c7Mwt;
       c7Mws: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Mwt: // global
           I64[Sp - 16] = block_c7Mwl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MwB; else goto c7Mwm;
       u7MwB: // global
           call _c7Mwl(R1) args: 0, res: 0, upd: 0;
       c7Mwm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrFinalizer1_info" {
     GHC.ForeignPtr.addForeignPtrFinalizer1_info:
         const GHC.ForeignPtr.addForeignPtrFinalizer1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S7M7f_srt+152;
 },
 _c7Mwl() //  [R1]
         { []
         }
     {offset
       c7Mwl: // global
           I64[Sp] = block_c7Mwr_info;
           _s7M1x::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7M1x::I64;
           if (R1 & 7 != 0) goto u7MwA; else goto c7Mwv;
       u7MwA: // global
           call _c7Mwr(R1) args: 0, res: 0, upd: 0;
       c7Mwv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mwl_info" {
     block_c7Mwl_info:
         const _c7Mwl;
         const 1;
         const 4294967326;
         const S7M7f_srt+152;
 },
 _c7Mwr() //  [R1]
         { []
         }
     {offset
       c7Mwr: // global
           R4 = P64[R1 + 7];
           R3 = I64[R1 + 15];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrFinalizer_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mwr_info" {
     block_c7Mwr_info:
         const _c7Mwr;
         const 65;
         const 4294967326;
         const S7M7f_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.465632329 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrFinalizer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MwV: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrFinalizer1_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrFinalizer_info" {
     GHC.ForeignPtr.addForeignPtrFinalizer_info:
         const GHC.ForeignPtr.addForeignPtrFinalizer_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7M7f_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.469876929 UTC

[section ""cstring" . lvl16_r7Kbt_bytes" {
     lvl16_r7Kbt_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,65,108,105,103,110,101,100,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.473162871 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_entry() //  [R1]
         { []
         }
     {offset
       c7Mxb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Mxc; else goto c7Mxd;
       c7Mxc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Mxd: // global
           (_c7Mx6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7Mx6::I64 == 0) goto c7Mx8; else goto c7Mx7;
       c7Mx8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7Mx7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7Mx6::I64;
           I64[Sp - 24] = block_c7Mx9_info;
           R2 = lvl16_r7Kbt_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_info:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_entry;
         const 0;
         const 4294967317;
         const S7M7f_srt+16;
 },
 _c7Mx9() //  [R1]
         { []
         }
     {offset
       c7Mx9: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Mx9_info" {
     block_c7Mx9_info:
         const _c7Mx9;
         const 0;
         const 4294967326;
         const S7M7f_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.482579538 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MxA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MxB; else goto c7MxC;
       c7MxB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MxC: // global
           I64[Sp - 16] = block_c7Mxx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7My6; else goto c7Mxy;
       u7My6: // global
           call _c7Mxx(R1) args: 0, res: 0, upd: 0;
       c7Mxy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_info:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S7M7f_srt+168;
 },
 _c7Mxx() //  [R1]
         { []
         }
     {offset
       c7Mxx: // global
           _s7M1G::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7M1G::I64, 0)) goto c7MxY; else goto c7My4;
       c7MxY: // global
           I64[Sp] = block_c7MxJ_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7M1G::I64;
           if (R1 & 7 != 0) goto u7My5; else goto c7MxK;
       u7My5: // global
           call _c7MxJ(R1) args: 0, res: 0, upd: 0;
       c7MxK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7My4: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mxx_info" {
     block_c7Mxx_info:
         const _c7Mxx;
         const 1;
         const 4294967326;
         const S7M7f_srt+176;
 },
 _c7MxJ() //  [R1]
         { []
         }
     {offset
       c7MxJ: // global
           I64[Sp - 8] = block_c7MxO_info;
           _s7M1J::I64 = I64[R1 + 7];
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7M1J::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MxJ_info" {
     block_c7MxJ_info:
         const _c7MxJ;
         const 65;
         const 30;
 },
 _c7MxO() //  [R1]
         { []
         }
     {offset
       c7MxO: // global
           _s7M1J::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7MxQ_info;
           R2 = _s7M1J::I64;
           _s7M1M::P64 = R1;
           R1 = I64[Sp + 16];
           P64[Sp + 16] = _s7M1M::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MxO_info" {
     block_c7MxO_info:
         const _c7MxO;
         const 194;
         const 30;
 },
 _c7MxQ() //  [R1]
         { []
         }
     {offset
       c7MxQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7My3; else goto c7My2;
       c7My3: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7My2: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MxQ_info" {
     block_c7MxQ_info:
         const _c7MxQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.492851488 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrAlignedBytes_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MyE: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_entry(R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info" {
     GHC.ForeignPtr.mallocForeignPtrAlignedBytes_info:
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7M7f_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.495637185 UTC

[section ""cstring" . lvl17_r7Kbu_bytes" {
     lvl17_r7Kbu_bytes:
         I8[] [109,97,108,108,111,99,70,111,114,101,105,103,110,80,116,114,66,121,116,101,115,58,32,115,105,122,101,32,109,117,115,116,32,98,101,32,62,61,32,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.498039629 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes2_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes2_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes2_entry() //  [R1]
         { []
         }
     {offset
       c7MyU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MyV; else goto c7MyW;
       c7MyV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7MyW: // global
           (_c7MyP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7MyP::I64 == 0) goto c7MyR; else goto c7MyQ;
       c7MyR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7MyQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7MyP::I64;
           I64[Sp - 24] = block_c7MyS_info;
           R2 = lvl17_r7Kbu_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrBytes2_info" {
     GHC.ForeignPtr.mallocForeignPtrBytes2_info:
         const GHC.ForeignPtr.mallocForeignPtrBytes2_entry;
         const 0;
         const 4294967317;
         const S7M7f_srt+16;
 },
 _c7MyS() //  [R1]
         { []
         }
     {offset
       c7MyS: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7MyS_info" {
     block_c7MyS_info:
         const _c7MyS;
         const 0;
         const 4294967326;
         const S7M7f_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.504539634 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes1_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes1_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes1_entry() //  [R2]
         { []
         }
     {offset
       c7Mzj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Mzk; else goto c7Mzl;
       c7Mzk: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Mzl: // global
           I64[Sp - 8] = block_c7Mzg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7MzI; else goto c7Mzh;
       u7MzI: // global
           call _c7Mzg(R1) args: 0, res: 0, upd: 0;
       c7Mzh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrBytes1_info" {
     GHC.ForeignPtr.mallocForeignPtrBytes1_info:
         const GHC.ForeignPtr.mallocForeignPtrBytes1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S7M7f_srt+184;
 },
 _c7Mzg() //  [R1]
         { []
         }
     {offset
       c7Mzg: // global
           _s7M1Y::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7M1Y::I64, 0)) goto c7MzC; else goto c7MzH;
       c7MzC: // global
           I64[Sp - 8] = block_c7Mzs_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7M1Y::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7MzH: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mzg_info" {
     block_c7Mzg_info:
         const _c7Mzg;
         const 0;
         const 4294967326;
         const S7M7f_srt+192;
 },
 _c7Mzs() //  [R1]
         { []
         }
     {offset
       c7Mzs: // global
           I64[Sp] = block_c7Mzu_info;
           _s7M22::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _s7M22::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mzs_info" {
     block_c7Mzs_info:
         const _c7Mzs;
         const 65;
         const 30;
 },
 _c7Mzu() //  [R1]
         { []
         }
     {offset
       c7Mzu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7MzG; else goto c7MzF;
       c7MzG: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MzF: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Mzu_info" {
     block_c7Mzu_info:
         const _c7Mzu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.512809925 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtrBytes_closure" {
     GHC.ForeignPtr.mallocForeignPtrBytes_closure:
         const GHC.ForeignPtr.mallocForeignPtrBytes_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtrBytes_entry() //  [R2]
         { []
         }
     {offset
       c7MAb: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtrBytes1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtrBytes_info" {
     GHC.ForeignPtr.mallocForeignPtrBytes_info:
         const GHC.ForeignPtr.mallocForeignPtrBytes_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7M7f_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.515645713 UTC

[section ""data" . lvl18_r7Kbv_closure" {
     lvl18_r7Kbv_closure:
         const GHC.Types.I#_con_info;
         const 159;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.517845481 UTC

[section ""data" . lvl19_r7Kbw_closure" {
     lvl19_r7Kbw_closure:
         const GHC.Types.I#_con_info;
         const 29;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.519431333 UTC

[section ""data" . lvl20_r7Kbx_closure" {
     lvl20_r7Kbx_closure:
         const GHC.Types.I#_con_info;
         const 38;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.52127111 UTC

[section ""data" . lvl21_r7Kby_closure" {
     lvl21_r7Kby_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl2_r7KaX_closure;
         const lvl3_r7KaY_closure;
         const lvl5_r7Kb0_closure;
         const lvl18_r7Kbv_closure+1;
         const lvl19_r7Kbw_closure+1;
         const lvl18_r7Kbv_closure+1;
         const lvl20_r7Kbx_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.522903999 UTC

[section ""data" . lvl22_r7Kbz_closure" {
     lvl22_r7Kbz_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl1_r7KaW_closure;
         const lvl21_r7Kby_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.525134736 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr3_closure" {
     GHC.ForeignPtr.mallocForeignPtr3_closure:
         const GHC.ForeignPtr.mallocForeignPtr3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr3_entry() //  [R1]
         { []
         }
     {offset
       c7MAt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MAu; else goto c7MAv;
       c7MAu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7MAv: // global
           (_c7MAq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7MAq::I64 == 0) goto c7MAs; else goto c7MAr;
       c7MAs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7MAr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7MAq::I64;
           R2 = lvl22_r7Kbz_closure+2;
           Sp = Sp - 16;
           call GHC.Err.undefined_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtr3_info" {
     GHC.ForeignPtr.mallocForeignPtr3_info:
         const GHC.ForeignPtr.mallocForeignPtr3_entry;
         const 0;
         const 144115192370823189;
         const S7M7f_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.531089876 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr1_closure" {
     GHC.ForeignPtr.mallocForeignPtr1_closure:
         const GHC.ForeignPtr.mallocForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr1_entry() //  [R2]
         { []
         }
     {offset
       c7MAK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7MAO; else goto c7MAP;
       c7MAO: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.mallocForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MAP: // global
           I64[Sp - 16] = block_c7MAI_info;
           _s7M2a::P64 = R2;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           P64[Sp - 8] = _s7M2a::P64;
           Sp = Sp - 32;
           call Foreign.Storable.alignment_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtr1_info" {
     GHC.ForeignPtr.mallocForeignPtr1_info:
         const GHC.ForeignPtr.mallocForeignPtr1_entry;
         const 0;
         const 108086395351859214;
         const 8589934597;
         const S7M7f_srt+24;
 },
 _c7MAI() //  [R1]
         { []
         }
     {offset
       c7MAI: // global
           I64[Sp] = block_c7MAN_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.ForeignPtr.mallocForeignPtr3_closure;
           I64[Sp + 8] = I64[R1 + 7];
           Sp = Sp - 16;
           call Foreign.Storable.sizeOf_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MAI_info" {
     block_c7MAI_info:
         const _c7MAI;
         const 1;
         const 72057598332895262;
         const S7M7f_srt+24;
 },
 _c7MAN() //  [R1]
         { []
         }
     {offset
       c7MAN: // global
           _s7M2f::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7M2f::I64, 0)) goto c7MB8; else goto c7MBd;
       c7MB8: // global
           I64[Sp - 8] = block_c7MAY_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7M2f::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7MBd: // global
           R1 = GHC.ForeignPtr.mallocForeignPtr2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MAN_info" {
     block_c7MAN_info:
         const _c7MAN;
         const 65;
         const 4294967326;
         const S7M7f_srt+24;
 },
 _c7MAY() //  [R1]
         { []
         }
     {offset
       c7MAY: // global
           _s7M2f::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c7MB0_info;
           R2 = I64[Sp + 16];
           _s7M2j::P64 = R1;
           R1 = _s7M2f::I64;
           P64[Sp + 16] = _s7M2j::P64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MAY_info" {
     block_c7MAY_info:
         const _c7MAY;
         const 194;
         const 30;
 },
 _c7MB0() //  [R1]
         { []
         }
     {offset
       c7MB0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7MBc; else goto c7MBb;
       c7MBc: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MBb: // global
           I64[Hp - 40] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = R1 + 16;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MB0_info" {
     block_c7MB0_info:
         const _c7MB0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.546160308 UTC

[section ""data" . GHC.ForeignPtr.mallocForeignPtr_closure" {
     GHC.ForeignPtr.mallocForeignPtr_closure:
         const GHC.ForeignPtr.mallocForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.mallocForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7MBO: // global
           R2 = R2;
           call GHC.ForeignPtr.mallocForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.mallocForeignPtr_info" {
     GHC.ForeignPtr.mallocForeignPtr_info:
         const GHC.ForeignPtr.mallocForeignPtr_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7M7f_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.551284582 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer3_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer3_entry() //  [R2]
         { []
         }
     {offset
       c7MC0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MC4; else goto c7MC3;
       c7MC4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MC3: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrConcFinalizer3_info" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer3_info:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.557206378 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer4_info;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry() //  [R2]
         { []
         }
     {offset
       c7MCn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MCo; else goto u7MCz;
       c7MCo: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u7MCz: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c7MCd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrConcFinalizer4_info" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer4_info:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7MCd() //  []
         { []
         }
     {offset
       c7MCd: // global
           _s7M2s::P64 = P64[Sp];
           I64[Sp] = block_c7MCg_info;
           R1 = _s7M2s::P64;
           if (R1 & 7 != 0) goto u7MCB; else goto c7MCh;
       u7MCB: // global
           call _c7MCg(R1) args: 0, res: 0, upd: 0;
       c7MCh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MCg() //  [R1]
         { []
         }
     {offset
       c7MCg: // global
           if (R1 & 7 == 1) goto c7MCk; else goto c7MCl;
       c7MCk: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MCl: // global
           I64[Sp - 8] = block_c7MCv_info;
           _s7M2w::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7M2w::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MCg_info" {
     block_c7MCg_info:
         const _c7MCg;
         const 0;
         const 30;
 },
 _c7MCv() //  []
         { []
         }
     {offset
       c7MCv: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7MCd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7MCv_info" {
     block_c7MCv_info:
         const _c7MCv;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.56962978 UTC

[section ""data" . GHC.ForeignPtr.$wforeignPtrFinalizer_closure" {
     GHC.ForeignPtr.$wforeignPtrFinalizer_closure:
         const GHC.ForeignPtr.$wforeignPtrFinalizer_info;
 },
 GHC.ForeignPtr.$wforeignPtrFinalizer_entry() //  [R2]
         { []
         }
     {offset
       c7MDd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7MDe; else goto c7MDf;
       c7MDe: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.$wforeignPtrFinalizer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MDf: // global
           I64[Sp - 8] = block_c7MD3_info;
           _s7M2A::P64 = R2;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           R1 = _s7M2A::P64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$wforeignPtrFinalizer_info" {
     GHC.ForeignPtr.$wforeignPtrFinalizer_info:
         const GHC.ForeignPtr.$wforeignPtrFinalizer_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7MD3() //  [R1]
         { []
         }
     {offset
       c7MD3: // global
           I64[Sp] = block_c7MD5_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MDC; else goto c7MD6;
       u7MDC: // global
           call _c7MD5(R1) args: 0, res: 0, upd: 0;
       c7MD6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MD3_info" {
     block_c7MD3_info:
         const _c7MD3;
         const 0;
         const 30;
 },
 _c7MD5() //  [R1]
         { []
         }
     {offset
       c7MD5: // global
           _c7MDc::P64 = R1 & 7;
           if (_c7MDc::P64 < 3) goto u7MDz; else goto c7MDb;
       u7MDz: // global
           if (_c7MDc::P64 < 2) goto u7MDA; else goto c7MDa;
       u7MDA: // global
           Sp = Sp + 8;
           call _c7MDu() args: 0, res: 0, upd: 0;
       c7MDa: // global
           I64[Sp] = block_c7MDm_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7MDb: // global
           R2 = P64[R1 + 5];
           Sp = Sp + 8;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MD5_info" {
     block_c7MD5_info:
         const _c7MD5;
         const 0;
         const 30;
 },
 _c7MDm() //  [R1, R2]
         { []
         }
     {offset
       c7MDm: // global
           if (R1 == 1) goto c7MDv; else goto u7MDB;
       c7MDv: // global
           R1 = R2;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       u7MDB: // global
           Sp = Sp + 8;
           call _c7MDu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7MDm_info" {
     block_c7MDm_info:
         const _c7MDm;
         const 0;
         const 30;
 },
 _c7MDu() //  []
         { []
         }
     {offset
       c7MDu: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.580252269 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr2_closure" {
     GHC.ForeignPtr.finalizeForeignPtr2_closure:
         const GHC.ForeignPtr.finalizeForeignPtr2_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr2_entry() //  [R2]
         { []
         }
     {offset
       c7ME9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7MEa; else goto c7MEb;
       c7MEa: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MEb: // global
           I64[Sp - 8] = block_c7ME6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7MEf; else goto c7ME7;
       u7MEf: // global
           call _c7ME6(R1) args: 0, res: 0, upd: 0;
       c7ME7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.finalizeForeignPtr2_info" {
     GHC.ForeignPtr.finalizeForeignPtr2_info:
         const GHC.ForeignPtr.finalizeForeignPtr2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7ME6() //  [R1]
         { []
         }
     {offset
       c7ME6: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ME6_info" {
     block_c7ME6_info:
         const _c7ME6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.586559395 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr1_closure" {
     GHC.ForeignPtr.finalizeForeignPtr1_closure:
         const GHC.ForeignPtr.finalizeForeignPtr1_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr1_entry() //  [R2]
         { []
         }
     {offset
       c7MEx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7MEy; else goto c7MEz;
       c7MEy: // global
           R2 = R2;
           R1 = GHC.ForeignPtr.finalizeForeignPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MEz: // global
           I64[Sp - 8] = block_c7MEu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7MEW; else goto c7MEv;
       u7MEW: // global
           call _c7MEu(R1) args: 0, res: 0, upd: 0;
       c7MEv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.finalizeForeignPtr1_info" {
     GHC.ForeignPtr.finalizeForeignPtr1_info:
         const GHC.ForeignPtr.finalizeForeignPtr1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7MEu() //  [R1]
         { []
         }
     {offset
       c7MEu: // global
           I64[Sp] = block_c7MEC_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u7MEV; else goto c7MEE;
       u7MEV: // global
           call _c7MEC(R1) args: 0, res: 0, upd: 0;
       c7MEE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MEu_info" {
     block_c7MEu_info:
         const _c7MEu;
         const 0;
         const 30;
 },
 _c7MEC() //  [R1]
         { []
         }
     {offset
       c7MEC: // global
           _c7MET::P64 = R1 & 7;
           if (_c7MET::P64 < 3) goto u7MEU; else goto c7MES;
       u7MEU: // global
           if (_c7MET::P64 < 2) goto c7MEK; else goto c7MEO;
       c7MEK: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7MEO: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
       c7MES: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MEC_info" {
     block_c7MEC_info:
         const _c7MEC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.594257868 UTC

[section ""data" . GHC.ForeignPtr.finalizeForeignPtr_closure" {
     GHC.ForeignPtr.finalizeForeignPtr_closure:
         const GHC.ForeignPtr.finalizeForeignPtr_info;
 },
 GHC.ForeignPtr.finalizeForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7MFj: // global
           R2 = R2;
           call GHC.ForeignPtr.finalizeForeignPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.finalizeForeignPtr_info" {
     GHC.ForeignPtr.finalizeForeignPtr_info:
         const GHC.ForeignPtr.finalizeForeignPtr_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.597225379 UTC

[section ""cstring" . lvl23_r7KbA_bytes" {
     lvl23_r7KbA_bytes:
         I8[] [71,72,67,46,70,111,114,101,105,103,110,80,116,114,58,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,97,32,102,105,110,97,108,105,122,101,114,32,116,111,32,112,108,97,105,110,32,112,111,105,110,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.599528837 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer2_entry() //  [R1]
         { []
         }
     {offset
       c7MFz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MFA; else goto c7MFB;
       c7MFA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7MFB: // global
           (_c7MFu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7MFu::I64 == 0) goto c7MFw; else goto c7MFv;
       c7MFw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7MFv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7MFu::I64;
           I64[Sp - 24] = block_c7MFx_info;
           R2 = lvl23_r7KbA_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrConcFinalizer2_info" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer2_info:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_entry;
         const 0;
         const 4294967317;
         const S7M7f_srt+16;
 },
 _c7MFx() //  [R1]
         { []
         }
     {offset
       c7MFx: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7MFx_info" {
     block_c7MFx_info:
         const _c7MFx;
         const 0;
         const 4294967326;
         const S7M7f_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.613846459 UTC

[section ""data" . GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info;
         const 0;
 },
 sat_s7M3g_entry() //  [R1, R2]
         { []
         }
     {offset
       c7MGg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MGh; else goto c7MGi;
       c7MGh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MGi: // global
           I64[Sp - 24] = block_c7MG8_info;
           _s7M33::P64 = P64[R1 + 7];
           _s7M39::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7M33::P64;
           P64[Sp - 8] = _s7M39::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7MGy; else goto c7MG9;
       u7MGy: // global
           call _c7MG8(R1) args: 0, res: 0, upd: 0;
       c7MG9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7M3g_info" {
     sat_s7M3g_info:
         const sat_s7M3g_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S7M7f_srt+112;
 },
 _c7MG8() //  [R1]
         { []
         }
     {offset
       c7MG8: // global
           _c7MGf::P64 = R1 & 7;
           if (_c7MGf::P64 < 3) goto u7MGx; else goto c7MGe;
       u7MGx: // global
           if (_c7MGf::P64 < 2) goto c7MGc; else goto c7MGd;
       c7MGc: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MGd: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7MGe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7MGw; else goto c7MGv;
       c7MGw: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MGv: // global
           _s7M3d::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7M3d::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MG8_info" {
     block_c7MG8_info:
         const _c7MG8;
         const 2;
         const 4294967326;
         const S7M7f_srt+112;
 },
 sat_s7M3m_entry() //  [R1]
         { []
         }
     {offset
       c7MGM: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7M3m_info" {
     sat_s7M3m_info:
         const sat_s7M3m_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7M3B_entry() //  [R1, R2]
         { []
         }
     {offset
       c7MH7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MH8; else goto c7MH9;
       c7MH8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MH9: // global
           I64[Sp - 24] = block_c7MGZ_info;
           _s7M33::P64 = P64[R1 + 7];
           _s7M3u::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7M33::P64;
           P64[Sp - 8] = _s7M3u::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7MHp; else goto c7MH0;
       u7MHp: // global
           call _c7MGZ(R1) args: 0, res: 0, upd: 0;
       c7MH0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7M3B_info" {
     sat_s7M3B_info:
         const sat_s7M3B_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S7M7f_srt+112;
 },
 _c7MGZ() //  [R1]
         { []
         }
     {offset
       c7MGZ: // global
           _c7MH6::P64 = R1 & 7;
           if (_c7MH6::P64 < 3) goto u7MHo; else goto c7MH5;
       u7MHo: // global
           if (_c7MH6::P64 < 2) goto c7MH3; else goto c7MH4;
       c7MH3: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MH4: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7MH5: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7MHn; else goto c7MHm;
       c7MHn: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MHm: // global
           _s7M3y::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7M3y::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MGZ_info" {
     block_c7MGZ_info:
         const _c7MGZ;
         const 2;
         const 4294967326;
         const S7M7f_srt+112;
 },
 sat_s7M4a_entry() //  [R1]
         { []
         }
     {offset
       c7MHN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MHO; else goto c7MHP;
       c7MHO: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7MHP: // global
           I64[Sp - 16] = block_c7MHD_info;
           R2 = GHC.ForeignPtr.addForeignPtrConcFinalizer3_closure+1;
           _s7M35::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _s7M35::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7M4a_info" {
     sat_s7M4a_info:
         const sat_s7M4a_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c7MHD() //  [R1]
         { []
         }
     {offset
       c7MHD: // global
           I64[Sp] = block_c7MHF_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MIN; else goto c7MHG;
       u7MIN: // global
           call _c7MHF(R1) args: 0, res: 0, upd: 0;
       c7MHG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MHD_info" {
     block_c7MHD_info:
         const _c7MHD;
         const 1;
         const 30;
 },
 _c7MHF() //  [R1]
         { []
         }
     {offset
       c7MHF: // global
           _c7MHM::P64 = R1 & 7;
           if (_c7MHM::P64 < 3) goto u7MIK; else goto c7MHL;
       u7MIK: // global
           if (_c7MHM::P64 < 2) goto c7MHJ; else goto c7MHK;
       c7MHJ: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MHK: // global
           I64[Sp] = block_c7MHW_info;
           R1 = P64[R1 + 6];
           call stg_finalizeWeak#(R1) args: 8, res: 8, upd: 8;
       c7MHL: // global
           P64[Sp] = P64[R1 + 5];
           call _c7MIn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7MHF_info" {
     block_c7MHF_info:
         const _c7MHF;
         const 1;
         const 30;
 },
 _c7MHW() //  [R1, R2]
         { []
         }
     {offset
       c7MHW: // global
           if (R1 == 1) goto c7MI8; else goto c7MI4;
       c7MI8: // global
           I64[Sp] = block_c7MI7_info;
           R1 = R2;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c7MI4: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MHW_info" {
     block_c7MHW_info:
         const _c7MHW;
         const 1;
         const 30;
 },
 _c7MI7() //  []
         { []
         }
     {offset
       c7MI7: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MI7_info" {
     block_c7MI7_info:
         const _c7MI7;
         const 1;
         const 30;
 },
 _c7MIn() //  []
         { []
         }
     {offset
       c7MIn: // global
           _s7M42::P64 = P64[Sp];
           I64[Sp] = block_c7MIp_info;
           R1 = _s7M42::P64;
           if (R1 & 7 != 0) goto u7MIP; else goto c7MIr;
       u7MIP: // global
           call _c7MIp(R1) args: 0, res: 0, upd: 0;
       c7MIr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c7MIp() //  [R1]
         { []
         }
     {offset
       c7MIp: // global
           if (R1 & 7 == 1) goto c7MIx; else goto c7MIC;
       c7MIx: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MIC: // global
           I64[Sp - 8] = block_c7MIA_info;
           _s7M46::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s7M46::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MIp_info" {
     block_c7MIp_info:
         const _c7MIp;
         const 1;
         const 30;
 },
 _c7MIA() //  []
         { []
         }
     {offset
       c7MIA: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _c7MIn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7MIA_info" {
     block_c7MIA_info:
         const _c7MIA;
         const 2;
         const 30;
 },
 GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MIW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7MIX; else goto c7MIY;
       c7MIX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MIY: // global
           I64[Sp - 16] = block_c7MFV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MJF; else goto c7MFW;
       u7MJF: // global
           call _c7MFV(R1) args: 0, res: 0, upd: 0;
       c7MFW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info" {
     GHC.ForeignPtr.$waddForeignPtrConcFinalizer_info:
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry;
         const 0;
         const 211110527500302;
         const 12884901903;
         const S7M7f_srt+112;
 },
 _c7MFV() //  [R1]
         { []
         }
     {offset
       c7MFV: // global
           _c7MIV::P64 = R1 & 7;
           if (_c7MIV::P64 < 3) goto u7MJy; else goto c7MIU;
       u7MJy: // global
           _s7M33::P64 = P64[Sp + 8];
           if (_c7MIV::P64 < 2) goto c7MIS; else goto c7MIT;
       c7MIS: // global
           Hp = Hp + 88;
           _s7M35::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7MJg; else goto c7MJ0;
       c7MJ0: // global
           _s7M36::P64 = P64[_s7M35::P64 + 7];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7M33::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7M3g_info;
           P64[Hp - 8] = _s7M33::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7MGz_info;
           R2 = Hp - 15;
           R1 = _s7M36::P64;
           P64[Sp + 8] = _s7M36::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7MIT: // global
           Hp = Hp + 88;
           _s7M35::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c7MJg; else goto c7MJf;
       c7MJg: // global
           HpAlloc = 88;
           R1 = _s7M35::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MJf: // global
           _s7M3q::P64 = P64[_s7M35::P64 + 6];
           _s7M3r::P64 = P64[_s7M35::P64 + 14];
           I64[Hp - 80] = :_con_info;
           P64[Hp - 72] = _s7M33::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7M3B_info;
           P64[Hp - 8] = _s7M33::P64;
           P64[Hp] = Hp - 39;
           I64[Sp - 16] = block_c7MHq_info;
           R2 = Hp - 15;
           R1 = _s7M3r::P64;
           P64[Sp - 8] = _s7M3r::P64;
           P64[Sp] = _s7M3q::P64;
           P64[Sp + 8] = _s7M35::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       c7MIU: // global
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MFV_info" {
     block_c7MFV_info:
         const _c7MFV;
         const 1;
         const 140741783322654;
         const S7M7f_srt+112;
 },
 _c7MGz() //  [R1]
         { []
         }
     {offset
       c7MGz: // global
           I64[Sp] = block_c7MGB_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MJB; else goto c7MGC;
       u7MJB: // global
           call _c7MGB(R1) args: 0, res: 0, upd: 0;
       c7MGC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MGz_info" {
     block_c7MGz_info:
         const _c7MGz;
         const 1;
         const 30;
 },
 _c7MGB() //  [R1]
         { []
         }
     {offset
       c7MGB: // global
           if (R1 & 7 == 1) goto u7MJz; else goto c7MJ8;
       u7MJz: // global
           Sp = Sp + 16;
           call _c7MJl() args: 0, res: 0, upd: 0;
       c7MJ8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MJb; else goto c7MJa;
       c7MJb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MJa: // global
           I64[Hp - 8] = sat_s7M3m_info;
           _s7M36::P64 = P64[Sp + 8];
           P64[Hp] = _s7M36::P64;
           I64[Sp + 8] = block_c7MJ7_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7M36::P64;
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MGB_info" {
     block_c7MGB_info:
         const _c7MGB;
         const 1;
         const 30;
 },
 _c7MJ7() //  []
         { []
         }
     {offset
       c7MJ7: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MJ7_info" {
     block_c7MJ7_info:
         const _c7MJ7;
         const 0;
         const 30;
 },
 _c7MHq() //  [R1]
         { []
         }
     {offset
       c7MHq: // global
           I64[Sp] = block_c7MHs_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MJD; else goto c7MHt;
       u7MJD: // global
           call _c7MHs(R1) args: 0, res: 0, upd: 0;
       c7MHt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MHq_info" {
     block_c7MHq_info:
         const _c7MHq;
         const 3;
         const 30;
 },
 _c7MHs() //  [R1]
         { []
         }
     {offset
       c7MHs: // global
           if (R1 & 7 == 1) goto u7MJA; else goto c7MJn;
       u7MJA: // global
           Sp = Sp + 32;
           call _c7MJl() args: 0, res: 0, upd: 0;
       c7MJn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MJq; else goto c7MJp;
       c7MJq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MJp: // global
           I64[Hp - 16] = sat_s7M4a_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_c7MJm_info;
           R3 = Hp - 15;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MHs_info" {
     block_c7MHs_info:
         const _c7MHs;
         const 3;
         const 30;
 },
 _c7MJl() //  []
         { []
         }
     {offset
       c7MJl: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7MJm() //  []
         { []
         }
     {offset
       c7MJm: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MJm_info" {
     block_c7MJm_info:
         const _c7MJm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.663387072 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MMs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MMt; else goto c7MMu;
       c7MMt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MMu: // global
           I64[Sp - 16] = block_c7MMp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MMy; else goto c7MMq;
       u7MMy: // global
           call _c7MMp(R1) args: 0, res: 0, upd: 0;
       c7MMq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrConcFinalizer1_info" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer1_info:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const S7M7f_srt+224;
 },
 _c7MMp() //  [R1]
         { []
         }
     {offset
       c7MMp: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$waddForeignPtrConcFinalizer_entry(R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MMp_info" {
     block_c7MMp_info:
         const _c7MMp;
         const 1;
         const 4294967326;
         const S7M7f_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.670938222 UTC

[section ""data" . GHC.ForeignPtr.addForeignPtrConcFinalizer_closure" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer_closure:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer_info;
         const 0;
 },
 GHC.ForeignPtr.addForeignPtrConcFinalizer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MMN: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.addForeignPtrConcFinalizer1_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.addForeignPtrConcFinalizer_info" {
     GHC.ForeignPtr.addForeignPtrConcFinalizer_info:
         const GHC.ForeignPtr.addForeignPtrConcFinalizer_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7M7f_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.68000825 UTC

[section ""data" . GHC.ForeignPtr.$wnewConcForeignPtr_closure" {
     GHC.ForeignPtr.$wnewConcForeignPtr_closure:
         const GHC.ForeignPtr.$wnewConcForeignPtr_info;
         const 0;
 },
 sat_s7M4B_entry() //  [R1, R2]
         { []
         }
     {offset
       c7MNg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MNh; else goto c7MNi;
       c7MNh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MNi: // global
           I64[Sp - 24] = block_c7MN8_info;
           _s7M4n::P64 = P64[R1 + 7];
           _s7M4u::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 16] = _s7M4n::P64;
           P64[Sp - 8] = _s7M4u::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7MNy; else goto c7MN9;
       u7MNy: // global
           call _c7MN8(R1) args: 0, res: 0, upd: 0;
       c7MN9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7M4B_info" {
     sat_s7M4B_info:
         const sat_s7M4B_entry;
         const 2;
         const 4294967307;
         const 4294967301;
         const S7M7f_srt+112;
 },
 _c7MN8() //  [R1]
         { []
         }
     {offset
       c7MN8: // global
           _c7MNf::P64 = R1 & 7;
           if (_c7MNf::P64 < 3) goto u7MNx; else goto c7MNe;
       u7MNx: // global
           if (_c7MNf::P64 < 2) goto c7MNc; else goto c7MNd;
       c7MNc: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MNd: // global
           R1 = GHC.ForeignPtr.noMixingError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c7MNe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c7MNw; else goto c7MNv;
       c7MNw: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MNv: // global
           _s7M4y::P64 = P64[R1 + 5];
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s7M4y::P64;
           I64[Hp - 32] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 24] = Hp - 54;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 29;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MN8_info" {
     block_c7MN8_info:
         const _c7MN8;
         const 2;
         const 4294967326;
         const S7M7f_srt+112;
 },
 sat_s7M4J_entry() //  [R1]
         { []
         }
     {offset
       c7MNM: // global
           R2 = P64[R1 + 7];
           call GHC.ForeignPtr.$wforeignPtrFinalizer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7M4J_info" {
     sat_s7M4J_info:
         const sat_s7M4J_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.ForeignPtr.$wnewConcForeignPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MNT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7MNU; else goto c7MNV;
       c7MNU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.$wnewConcForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MNV: // global
           I64[Sp - 24] = block_c7MMY_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.$wnewConcForeignPtr_info" {
     GHC.ForeignPtr.$wnewConcForeignPtr_info:
         const GHC.ForeignPtr.$wnewConcForeignPtr_entry;
         const 0;
         const 562954248388622;
         const 12884901901;
         const S7M7f_srt+112;
 },
 _c7MMY() //  [R1]
         { []
         }
     {offset
       c7MMY: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c7MNY; else goto c7MNX;
       c7MNY: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MNX: // global
           I64[Hp - 80] = :_con_info;
           _s7M4n::P64 = P64[Sp + 16];
           P64[Hp - 72] = _s7M4n::P64;
           P64[Hp - 64] = GHC.Types.[]_closure+1;
           I64[Hp - 56] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp - 48] = Hp - 78;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 53;
           P64[Hp - 24] = GHC.Types.True_closure+2;
           I64[Hp - 16] = sat_s7M4B_info;
           P64[Hp - 8] = _s7M4n::P64;
           P64[Hp] = Hp - 39;
           I64[Sp] = block_c7MNz_info;
           R2 = Hp - 15;
           _s7M4r::P64 = R1;
           R1 = R1;
           P64[Sp + 16] = _s7M4r::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MMY_info" {
     block_c7MMY_info:
         const _c7MMY;
         const 66;
         const 4294967326;
         const S7M7f_srt+112;
 },
 _c7MNz() //  [R1]
         { []
         }
     {offset
       c7MNz: // global
           I64[Sp] = block_c7MNB_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u7MOg; else goto c7MNC;
       u7MOg: // global
           call _c7MNB(R1) args: 0, res: 0, upd: 0;
       c7MNC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MNz_info" {
     block_c7MNz_info:
         const _c7MNz;
         const 66;
         const 30;
 },
 _c7MNB() //  [R1]
         { []
         }
     {offset
       c7MNB: // global
           _s7M4r::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c7MNQ; else goto c7MNR;
       c7MNQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7MO5; else goto c7MO4;
       c7MO5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MO4: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = _s7M4r::P64;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7MNR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MOc; else goto c7MOb;
       c7MOc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MOb: // global
           I64[Hp - 8] = sat_s7M4J_info;
           P64[Hp] = _s7M4r::P64;
           I64[Sp] = block_c7MO6_info;
           R3 = Hp - 7;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _s7M4r::P64;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MNB_info" {
     block_c7MNB_info:
         const _c7MNB;
         const 66;
         const 30;
 },
 _c7MO6() //  [R1]
         { []
         }
     {offset
       c7MO6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7MOf; else goto c7MOe;
       c7MOf: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7MOe: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MO6_info" {
     block_c7MO6_info:
         const _c7MO6;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.697773763 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr1_closure" {
     GHC.ForeignPtr.newConcForeignPtr1_closure:
         const GHC.ForeignPtr.newConcForeignPtr1_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MPx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7MPy; else goto c7MPz;
       c7MPy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.newConcForeignPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MPz: // global
           I64[Sp - 16] = block_c7MPu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7MPD; else goto c7MPv;
       u7MPD: // global
           call _c7MPu(R1) args: 0, res: 0, upd: 0;
       c7MPv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.newConcForeignPtr1_info" {
     GHC.ForeignPtr.newConcForeignPtr1_info:
         const GHC.ForeignPtr.newConcForeignPtr1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const S7M7f_srt+248;
 },
 _c7MPu() //  [R1]
         { []
         }
     {offset
       c7MPu: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.ForeignPtr.$wnewConcForeignPtr_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7MPu_info" {
     block_c7MPu_info:
         const _c7MPu;
         const 1;
         const 4294967326;
         const S7M7f_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.702730005 UTC

[section ""data" . GHC.ForeignPtr.newConcForeignPtr_closure" {
     GHC.ForeignPtr.newConcForeignPtr_closure:
         const GHC.ForeignPtr.newConcForeignPtr_info;
         const 0;
 },
 GHC.ForeignPtr.newConcForeignPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MPS: // global
           R3 = R3;
           R2 = R2;
           call GHC.ForeignPtr.newConcForeignPtr1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.newConcForeignPtr_info" {
     GHC.ForeignPtr.newConcForeignPtr_info:
         const GHC.ForeignPtr.newConcForeignPtr_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7M7f_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.706370903 UTC

[section ""data" . GHC.ForeignPtr.MyWeak_closure" {
     GHC.ForeignPtr.MyWeak_closure:
         const GHC.ForeignPtr.MyWeak_info;
 },
 GHC.ForeignPtr.MyWeak_entry() //  [R2]
         { []
         }
     {offset
       c7MQ4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MQ8; else goto c7MQ7;
       c7MQ8: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.MyWeak_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MQ7: // global
           I64[Hp - 8] = GHC.ForeignPtr.MyWeak_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.MyWeak_info" {
     GHC.ForeignPtr.MyWeak_info:
         const GHC.ForeignPtr.MyWeak_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.710089541 UTC

[section ""data" . GHC.ForeignPtr.PlainForeignPtr_closure" {
     GHC.ForeignPtr.PlainForeignPtr_closure:
         const GHC.ForeignPtr.PlainForeignPtr_info;
 },
 GHC.ForeignPtr.PlainForeignPtr_entry() //  [R2]
         { []
         }
     {offset
       c7MQk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MQo; else goto c7MQn;
       c7MQo: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainForeignPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MQn: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.PlainForeignPtr_info" {
     GHC.ForeignPtr.PlainForeignPtr_info:
         const GHC.ForeignPtr.PlainForeignPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.713884617 UTC

[section ""data" . GHC.ForeignPtr.MallocPtr_closure" {
     GHC.ForeignPtr.MallocPtr_closure:
         const GHC.ForeignPtr.MallocPtr_info;
 },
 GHC.ForeignPtr.MallocPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MQA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MQE; else goto c7MQD;
       c7MQE: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.MallocPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MQD: // global
           I64[Hp - 16] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.MallocPtr_info" {
     GHC.ForeignPtr.MallocPtr_info:
         const GHC.ForeignPtr.MallocPtr_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.718107714 UTC

[section ""data" . GHC.ForeignPtr.PlainPtr_closure" {
     GHC.ForeignPtr.PlainPtr_closure:
         const GHC.ForeignPtr.PlainPtr_info;
 },
 GHC.ForeignPtr.PlainPtr_entry() //  [R2]
         { []
         }
     {offset
       c7MQQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MQU; else goto c7MQT;
       c7MQU: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.PlainPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MQT: // global
           I64[Hp - 8] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.PlainPtr_info" {
     GHC.ForeignPtr.PlainPtr_info:
         const GHC.ForeignPtr.PlainPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.721881893 UTC

[section ""data" . GHC.ForeignPtr.NoFinalizers_closure" {
     GHC.ForeignPtr.NoFinalizers_closure:
         const GHC.ForeignPtr.NoFinalizers_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.724163082 UTC

[section ""data" . GHC.ForeignPtr.CFinalizers_closure" {
     GHC.ForeignPtr.CFinalizers_closure:
         const GHC.ForeignPtr.CFinalizers_info;
 },
 GHC.ForeignPtr.CFinalizers_entry() //  [R2]
         { []
         }
     {offset
       c7MR7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MRb; else goto c7MRa;
       c7MRb: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.CFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MRa: // global
           I64[Hp - 8] = GHC.ForeignPtr.CFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.CFinalizers_info" {
     GHC.ForeignPtr.CFinalizers_info:
         const GHC.ForeignPtr.CFinalizers_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.72822379 UTC

[section ""data" . GHC.ForeignPtr.HaskellFinalizers_closure" {
     GHC.ForeignPtr.HaskellFinalizers_closure:
         const GHC.ForeignPtr.HaskellFinalizers_info;
 },
 GHC.ForeignPtr.HaskellFinalizers_entry() //  [R2]
         { []
         }
     {offset
       c7MRn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7MRr; else goto c7MRq;
       c7MRr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ForeignPtr.HaskellFinalizers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7MRq: // global
           I64[Hp - 8] = GHC.ForeignPtr.HaskellFinalizers_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.HaskellFinalizers_info" {
     GHC.ForeignPtr.HaskellFinalizers_info:
         const GHC.ForeignPtr.HaskellFinalizers_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.733868181 UTC

[section ""data" . GHC.ForeignPtr.ForeignPtr_closure" {
     GHC.ForeignPtr.ForeignPtr_closure:
         const GHC.ForeignPtr.ForeignPtr_info;
 },
 GHC.ForeignPtr.ForeignPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7MRD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7MRH; else goto c7MRG;
       c7MRH: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ForeignPtr.ForeignPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7MRG: // global
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.ForeignPtr_info" {
     GHC.ForeignPtr.ForeignPtr_info:
         const GHC.ForeignPtr.ForeignPtr_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.738995896 UTC

[section ""cstring" . i7MRP_str" {
     i7MRP_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,121,87,101,97,107]
 },
 GHC.ForeignPtr.MyWeak_con_entry() //  [R1]
         { []
         }
     {offset
       c7MRO: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.MyWeak_con_info" {
     GHC.ForeignPtr.MyWeak_con_info:
         const GHC.ForeignPtr.MyWeak_con_entry;
         const 1;
         const 2;
         const i7MRP_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.743918542 UTC

[section ""cstring" . i7MRW_str" {
     i7MRW_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,70,111,114,101,105,103,110,80,116,114]
 },
 GHC.ForeignPtr.PlainForeignPtr_con_entry() //  [R1]
         { []
         }
     {offset
       c7MRV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.PlainForeignPtr_con_info" {
     GHC.ForeignPtr.PlainForeignPtr_con_info:
         const GHC.ForeignPtr.PlainForeignPtr_con_entry;
         const 1;
         const 2;
         const i7MRW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.748527007 UTC

[section ""cstring" . i7MS3_str" {
     i7MS3_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,77,97,108,108,111,99,80,116,114]
 },
 GHC.ForeignPtr.MallocPtr_con_entry() //  [R1]
         { []
         }
     {offset
       c7MS2: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.MallocPtr_con_info" {
     GHC.ForeignPtr.MallocPtr_con_info:
         const GHC.ForeignPtr.MallocPtr_con_entry;
         const 2;
         const 4294967300;
         const i7MS3_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.753297884 UTC

[section ""cstring" . i7MSa_str" {
     i7MSa_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,80,108,97,105,110,80,116,114]
 },
 GHC.ForeignPtr.PlainPtr_con_entry() //  [R1]
         { []
         }
     {offset
       c7MS9: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.PlainPtr_con_info" {
     GHC.ForeignPtr.PlainPtr_con_info:
         const GHC.ForeignPtr.PlainPtr_con_entry;
         const 1;
         const 8589934594;
         const i7MSa_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.757729961 UTC

[section ""cstring" . i7MSh_str" {
     i7MSh_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,78,111,70,105,110,97,108,105,122,101,114,115]
 },
 GHC.ForeignPtr.NoFinalizers_con_entry() //  [R1]
         { []
         }
     {offset
       c7MSg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.NoFinalizers_con_info" {
     GHC.ForeignPtr.NoFinalizers_con_info:
         const GHC.ForeignPtr.NoFinalizers_con_entry;
         const 4294967296;
         const 3;
         const i7MSh_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.763157753 UTC

[section ""cstring" . i7MSo_str" {
     i7MSo_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,67,70,105,110,97,108,105,122,101,114,115]
 },
 GHC.ForeignPtr.CFinalizers_con_entry() //  [R1]
         { []
         }
     {offset
       c7MSn: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.CFinalizers_con_info" {
     GHC.ForeignPtr.CFinalizers_con_info:
         const GHC.ForeignPtr.CFinalizers_con_entry;
         const 1;
         const 4294967298;
         const i7MSo_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.767385113 UTC

[section ""cstring" . i7MSv_str" {
     i7MSv_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,72,97,115,107,101,108,108,70,105,110,97,108,105,122,101,114,115]
 },
 GHC.ForeignPtr.HaskellFinalizers_con_entry() //  [R1]
         { []
         }
     {offset
       c7MSu: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.HaskellFinalizers_con_info" {
     GHC.ForeignPtr.HaskellFinalizers_con_info:
         const GHC.ForeignPtr.HaskellFinalizers_con_entry;
         const 1;
         const 8589934594;
         const i7MSv_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.770761438 UTC

[section ""cstring" . i7MSC_str" {
     i7MSC_str:
         I8[] [98,97,115,101,58,71,72,67,46,70,111,114,101,105,103,110,80,116,114,46,70,111,114,101,105,103,110,80,116,114]
 },
 GHC.ForeignPtr.ForeignPtr_con_entry() //  [R1]
         { []
         }
     {offset
       c7MSB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ForeignPtr.ForeignPtr_con_info" {
     GHC.ForeignPtr.ForeignPtr_con_info:
         const GHC.ForeignPtr.ForeignPtr_con_entry;
         const 4294967297;
         const 5;
         const i7MSC_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:53.774546687 UTC

[section ""relreadonly" . S7M7f_srt" {
     S7M7f_srt:
         const GHC.Err.undefined_closure;
         const lvl10_r7Kb5_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ForeignPtr.mallocForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtr2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2_closure;
         const GHC.Ptr.$w$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshowsPrec_closure;
         const GHC.ForeignPtr.$fShowForeignPtr_$cshow_closure;
         const GHC.ForeignPtr.$fShowForeignPtr1_closure;
         const GHC.ForeignPtr.noMixingError_closure;
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer2_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizerEnv_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizerEnv1_closure;
         const GHC.ForeignPtr.$waddForeignPtrFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrFinalizer1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrAlignedBytes2_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes1_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const lvl22_r7Kbz_closure;
         const GHC.ForeignPtr.mallocForeignPtr1_closure;
         const GHC.ForeignPtr.mallocForeignPtr3_closure;
         const GHC.ForeignPtr.$waddForeignPtrConcFinalizer_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer2_closure;
         const GHC.ForeignPtr.addForeignPtrConcFinalizer1_closure;
         const GHC.ForeignPtr.$wnewConcForeignPtr_closure;
         const GHC.ForeignPtr.newConcForeignPtr1_closure;
 }]

